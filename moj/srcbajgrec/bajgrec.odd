; Dominik Dagiel   ix 2005

	new string,A
	push "!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	new int,BYTE0
	push "0"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE0
	new int,BYTE9
	push "9"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE9
	new int,BYTEa
	push "a"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEa
	new int,BYTEz
	push "z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEz
	new int,BYTEA
	push "A"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEA
	new int,BYTEZ
	push "Z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEZ
	new int,BYTE_
	push "_"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE_
	new int,BYTESPACE
	push " "
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTESPACE
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l2
	push $1
	push $2
	cthis varnew
l2:
	end method
	method vardelif
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l4
	push $1
	cthis vardel
l4:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global0"
	cthis addmethod
	end method
	method global0
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global1"
	cthis addmethod
	end method
	method global1
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l5:
	push A
	push $2
	cmpjne
	cmp0
	je l6
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l5
l6:
	end method
	method withlist2
	localstring $1
	pop $1
	localdef $2
	pop $2
l7:
	push A
	push $2
	cmpjne
	cmp0
	je l8
	localdef $3
	pop $3
	push $1
	spushs
	push $3
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l7
l8:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method vars2
	push "var2"
	cthis withlist2
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l9:
	push A
	push $3
	cmpjne
	cmp0
	je l10
	push $1
	neg
	cmp0
	je l12
	push $2
	push $3
	cmpje
	pop $1
l12:
	localdef $3
	pop $3
	jmp l9
l10:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l13:
	push $2
	push A
	cmpjne
	cmp0
	je l14
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l13
l14:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global2"
	cthis addmethod
	end method
	method global2
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l15:
	push $2
	push A
	cmpjne
	cmp0
	je l16
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l15
l16:
	end method
	method mresize
	cthis gettype
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	cthis getname
	spop $a
	 clparent [$a],resizemethods
	end method
	method times
	localstring $1
	pop $1
	push 0
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis for_plus
	end method
	method upto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_plus
	end method
	method downto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_minus
	end method
	method for_plus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l18
	ret
l18:
l19:
	push $1
	push $2
	cmpjle
	cmp0
	je l20
	jmp l22
l21:
	add $1,1
	pop $1
	jmp l19
l22:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l21
l20:
	end method
	method for_minus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l24
	ret
l24:
l25:
	push $1
	push $2
	cmpjae
	cmp0
	je l26
	jmp l28
l27:
	sub $1,1
	pop $1
	jmp l25
l28:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l27
l26:
	end method
	method double_for
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	push 0
	pop $5
l29:
	push $5
	push $1
	cmpjl
	cmp0
	je l30
	jmp l32
l31:
	add $5,1
	pop $5
	jmp l29
l32:
	push 0
	pop $4
l33:
	push $4
	push $2
	cmpjl
	cmp0
	je l34
	jmp l36
l35:
	add $4,1
	pop $4
	jmp l33
l36:
	push $3
	spushs
	push $5
	push $4
	spop $d
	cthis [$d]
	jmp l35
l34:
	jmp l31
l30:
	end method
	class classobjcounter
	method init
	localstring $1
	pop $1
	new string,_sprefix
	push $1
	pop _sprefix
	new int,_iile
	push 0
	pop _iile
	push "limit"
	push 0
	cthis var2
	end method
	method get
	push limit
	push 0
	cmpja
	cmp0
	je l38
	push _iile
	push limit
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop _iile
	jmp l37
l38:
	add _iile,1
	pop _iile
l37:
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	end method
	method getid
	localint $1
	pop $1
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	end method
	end class

	class classsignals
	method init
	end method
	method stdfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "classsignals0"
	spop $a
	call [$a],addmethod
	end method
	method classsignals0
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdstart
	localstring $1
	pop $1
	push $1
	spushs
	push "onstart"
	push "classsignals1"
	spop $a
	call [$a],addmethod
	end method
	method classsignals1
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdsigs
	localstring $1
	pop $1
	push $1
	cthis stdstart
	push $1
	cthis stdfinish
	end method
	method buildanima
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "onendframe"
	push "classsignals2"
	spop $a
	call [$a],addmethod
	end method
	method classsignals2
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildsnd
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	end method
	method buildtimer
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "ontick"
	push "classsignals3"
	spop $a
	call [$a],addmethod
	end method
	method classsignals3
	cthis getname
	push "_TICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildbut
	localstring $1
	pop $1
	push $1
	spushs
	push "onclick"
	push "classsignals4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onrel"
	push "classsignals5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveon"
	push "classsignals6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveoff"
	push "classsignals7"
	spop $a
	call [$a],addmethod
	end method
	method classsignals4
	cthis getname
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals5
	cthis getname
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals6
	cthis getname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals7
	cthis getname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	method unlocked
	push _block
	push 0
	cmpje
	end method
	method setaslocker
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlocker"
	push "classlocker0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlocker
	push $1
	spushs
	push "lock"
	push "lock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlock"
	push "unlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setlock"
	push "setlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getlock"
	push "getlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlocked"
	push "unlocked"
	spop $a
	call [$a],addmethod
	end method
	method classlocker0
	new int,_block
	push 1
	pop _block
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l39:
	push $2
	push $3
	cmpjl
	cmp0
	je l40
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l39
l40:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l42
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
l42:
	end method
	end module

	class collection
	method init
	localstring $1
	pop $1
	new string,stype
	push $1
	pop stype
	end method
	method type
	push stype
	ret
	end method
	end class

	class array
	parent collection
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	clparent collection,init
	new int,idim
	push $2
	pop idim
	new int,isize
	push $3
	pop isize
	new vector,vec
	push $1
	call vec,type
	push $2
	push 0
	cmpjle
	cmp0
	jne l45
	push $3
	push 0
	cmpjle
	jmp l46
l44:
	push 0
	jmp l46
l45:
	push 1
l46:
	cmp0
	je l47
	ret
l47:
	push $2
	call $3,pow
	push 0
	call vec,resize
	end method
	method getid
	localint $1
	push 0
	pop $1
	localint $2
	push idim
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l48:
	push $2
	push 0
	cmpja
	cmp0
	je l49
	popax
	add $1,$a
	pop $1
	push isize
	popax
	mul $1,$a
	pop $1
	sub $2,1
	pop $2
	jmp l48
l49:
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method get
	cthis getid
	call vec,get
	ret
	end method
	method set
	localdef $1
	pop $1
	cthis getid
	push $1
	call vec,set
	end method
	method getsize
	push isize
	ret
	end method
	method getdim
	push idim
	ret
	end method
	end class

	class stack
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vec
	push $1
	call vec,type
	push $1
	spushs
	spop $d
	new [$d],var
	end method
	method push
	localstring $1
	pop $1
	push $1
	call vec,add
	end method
	method top
	call vec,last
	ret
	end method
	method pop
	cthis top
	pop var
	call vec,size
	push 1
	pop $b
	popax
	sub $a,$b
	call vec,removeat
	push var
	ret
	end method
	method free
	call vec,free
	end method
	end class

	class map
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new int,isize
	push 0
	pop isize
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	neg
	cmp0
	je l51
	push $1
	cthis add
l51:
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],set
	end method
	method add
	localstring $1
	pop $1
	push stype
	spushs
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method get
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method remove
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method contains
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	ret
	end method
	end class

	class map2
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vn
	push "string"
	call vn,type
	new vector,vec
	push $1
	call vec,type
	end method
	method add
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,add
	push $2
	call vec,add
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,find
	push $2
	call vec,set
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call vn,contains
	ret
	end method
	method get
	localstring $1
	pop $1
	push $1
	call vn,find
	call vec,get
	ret
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call vn,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l53
	push $2
	call vec,removeat
	push $2
	call vn,removeat
l53:
	end method
	method free
	call vn,free
	call vec,free
	end method
	method print
	call vec,print
	call vn,print
	end method
	end class

	class classgamemusic
	parent classdbreader
	method init
	clparent classdbreader,init
	new string,smuspath
	push ""
	pop smuspath
	new string,sbgrpath
	push ""
	pop sbgrpath
	new snd,_sndbgr
	push "onfinish"
	push "_stdsndloop"
	call _sndbgr,addmethod
	end method
	method reset
	call gameapi,stopmusic
	cthis stopbgr
	end method
	method _stdsndloop
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbl,loadscript
	end method
	method musicpath
	localstring $1
	pop $1
	push $1
	pop smuspath
	end method
	method sndbgrpath
	localstring $1
	pop $1
	push $1
	pop sbgrpath
	end method
	method _play
	localint $1
	pop $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	push 1
	pop $2
	push $1
	call dbl,getcolsno
	pop $3
l54:
	push $2
	push $3
	cmpjl
	cmp0
	je l55
	push $1
	push $2
	call dbl,get
	pop $5
	add $2,1
	pop $2
	push $5
	push "music"
	cmpje
	cmp0
	je l57
	push smuspath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	pop $6
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l59
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l61
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call gameapi,setmusicvol
	add $2,1
	pop $2
l61:
	jmp l58
l59:
	push 100
	call gameapi,setmusicvol
l58:
	push $6
	call gameapi,playmusic
	jmp l56
l57:
	push $5
	push "bgr"
	cmpje
	cmp0
	je l63
	push sbgrpath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	call _sndbgr,load
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l65
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l67
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call _sndbgr,setvol
	add $2,1
	pop $2
l67:
	jmp l64
l65:
	push 100
	call _sndbgr,setvol
l64:
	cthis playbgr
	jmp l62
l63:
	add $2,1
	pop $2
l62:
l56:
	jmp l54
l55:
	end method
	method play
	cthis reset
	call gameapi,getgamename
	push "_play"
	cthis readrow
	end method
	method playbgr
	call _sndbgr,play
	end method
	method stopbgr
	push 0
	call _sndbgr,stop
	end method
	end class

	class Music
	method init
	new vector,vmus
	push "string"
	call vmus,type
	new int,ilastid
	end method
	method playdb
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	call vmus,free
l68:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l69
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l68
l69:
	push 0
	pop ilastid
	cthis play
	end method
	method playvec
	localstring $1
	localint $2
	pop $2
	pop $1
	call vmus,free
l70:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l71
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	call vmus,add
	add $2,1
	pop $2
	jmp l70
l71:
	push 0
	pop ilastid
	cthis play
	end method
	method playstr
	localstring $1
	pop $1
	push $1
	push " "
	call vmus,vecbuildfromstring
	push 0
	pop ilastid
	cthis play
	end method
	method play
	push ilastid
	call vmus,size
	cmpjae
	cmp0
	je l73
	ret
l73:
	localdef $1
	push MUSICPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
	add ilastid,1
	pop ilastid
	localint $2
	push 0
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	push 0
	pop $4
	localint $5
	push 100
	pop $5
	localint $6
	push ilastid
	pop $6
l74:
	push $6
	call vmus,size
	cmpjl
	cmp0
	je l75
	jmp l77
l76:
	add $6,1
	pop $6
	jmp l74
l77:
	localdef $7
	push $6
	call vmus,get
	pop $7
	push $7
	spushs
	push "-l"
	cmpst
	jne l79
	spop $a
	push 1
	pop $2
	jmp l78
l79:
	push "-v"
	cmpst
	jne l80
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $5
	jmp l78
l80:
	push "-fin"
	cmpst
	jne l81
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $3
	jmp l78
l81:
	push "-fout"
	cmpst
	jne l82
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $4
	jmp l78
l82:
	push "-p"
	cmpst
	jne l83
	spop $a
	jmp l78
l83:
	spop $a
	push $6
	pop ilastid
	call vmus,size
	pop $6
l78:
	jmp l76
l75:
	push $5
	call gameapi,setmusicvol
	push $2
	cmp0
	je l85
	push $1
	call gameapi,playmusic
	call vmus,size
	pop ilastid
	ret
l85:
	push $1
	call gameapi,loadmusic
	push $3
	cmp0
	je l87
	push $3
	call gameapi,fadeinmusic
	jmp l86
l87:
	call gameapi,startmusic
l86:
	push $4
	cmp0
	je l89
	push $4
	call gameapi,fadeoutmusic
l89:
	end method
	method fadeout
	localint $1
	pop $1
	call gameapi,ismusicplaying
	cmp0
	je l91
	push $1
	call gameapi,fadeoutmusic
	call vmus,size
	pop ilastid
l91:
	end method
	method isplaying
	call gameapi,ismusicplaying
	end method
	method stop
	push 0
	call gameapi,endmusic
	end method
	end class

	new int,igmstate
	new int,igmdebug
	new int,igmeasy
	new int,igmdemo
	new int,igmbegin
	new int,igmwinlocal
	new int,igmsave
	push 0
	pop igmsave
	new string,sgmproject
	push "DagielBajgrec"
	pop sgmproject
	new string,sgmfontfile
	push "configs/fonts/normal.ttf"
	pop sgmfontfile
	new string,sgmfontmono
	push "configs/fonts/mono.ttf"
	pop sgmfontmono
	new string,sgmfontmonobold
	push "configs/fonts/monobold.ttf"
	pop sgmfontmonobold
	new string,sgmfontbold
	push "configs/fonts/monobold.ttf"
	pop sgmfontbold
	new string,sgmfontitalic
	push "configs/fonts/timesit.ttf"
	pop sgmfontitalic
	new string,SFXPATH
	push "sounds/sfx/"
	pop SFXPATH
	new string,BGRPATH
	push "sounds/bgr/"
	pop BGRPATH
	new string,MUSICPATH
	push "sounds/music/"
	pop MUSICPATH
	new string,LANG
	push "pl"
	pop LANG
	new string,SNDPATH
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l93
	push ""
	pop LANG
l93:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l95
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l95:
	new int,iResX
	push 1024
	pop iResX
	new int,iResY
	push 768
	pop iResY
	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method _checkfont
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l97
	push sgmfontfile
	pop $1
l97:
	push ".ttf"
	call $1,contains
	cmp0
	je l99
	push $3
	spushs
	spop $e
	new font,[$e]
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	pop $1
l99:
	push $1
	end method
	method checkfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "_fnt"
	cthis _checkfont
	end method
	method begingame
	push igmbegin
	neg
	pop igmbegin
	push igmbegin
	neg
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpjle
	cmp0
	je l101
	ret
l101:
	sub $3,1
	pop $3
l102:
	push $3
	push 0
	cmpjae
	cmp0
	je l103
	push $1
	spushs
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l102
l103:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	ret
	end method
	method getsndpath
	push _sclwavpath
	ret
	end method
	method getpath
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l105
	push 1
	call $1,strsubb
	jmp l104
l105:
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
l104:
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new anima,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	spushs
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l107
	ret
l107:
	localint $5
	push 0
	pop $5
l108:
	push $5
	push $4
	cmpjl
	cmp0
	je l109
	jmp l111
l110:
	add $5,1
	pop $5
	jmp l108
l111:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l110
l109:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l113
	ret
l113:
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	spushs
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l114:
	push $6
	push $5
	cmpjl
	cmp0
	je l115
	jmp l117
l116:
	add $6,1
	pop $6
	jmp l114
l117:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	cmpjne
	cmp0
	je l119
	push $4
	spushs
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l119:
	jmp l116
l115:
	push $5
	ret
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	ret
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	spushs
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new img,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	push MUSICPATH
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method newsndfree
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method snewsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	end method
	method _newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push "."
	call $2,contains
	neg
	cmp0
	je l121
	push ".wav"
	popax
	add $2,$a
	pop $2
l121:
	push $1
	spushs
	push $2
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l123
	push $1
	push $2
	call subtitle,register
l123:
	end method
	method newsfx
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push SFXPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push BGRPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgrloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newbgr
	push $1
	cthis sndplayloop
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l124:
	push $8
	push $7
	cmpjl
	cmp0
	je l125
	jmp l127
l126:
	add $8,1
	pop $8
	jmp l124
l127:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new snd,[$e]
	push $6
	spushs
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l126
l125:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],setcycle
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	cmp0
	je l129
	push $1
	cthis looponfinish
	jmp l128
l129:
	push "H"
	call $2,contains
	cmp0
	je l131
	push $1
	cthis hideonfinish
l131:
l128:
	push "P"
	call $2,contains
	cmp0
	je l133
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l133:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l134:
	push $6
	push $4
	cmpjl
	cmp0
	je l135
	jmp l137
l136:
	add $6,1
	pop $6
	jmp l134
l137:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	cmpjne
	cmp0
	je l139
	push $3
	spushs
	push $5
	spop $a
	call [$a],add
l139:
	jmp l136
l135:
	push $4
	ret
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	ret
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	push 0
	pop $5
l140:
	push $5
	push $4
	cmpjl
	cmp0
	je l141
	jmp l143
l142:
	add $5,1
	pop $5
	jmp l140
l143:
	push $1
	push $2
	push $5
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	push $3
	cthis newanframesgr
	popax
	jmp l142
l141:
	push $4
	ret
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	ret
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	spushs
	spop $a
	call [$a],hide
	push $6
	ret
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],loadscritp
	end method
	method vargmset
	localstring $1
	localdef $2
	pop $2
	pop $1
	localstring $3
	call gameapi,getgamename
	pop $3
	push $3
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l145
	push $3
	spushs
	call $2,gettype
	push $1
	spop $a
	call [$a],varnew
l145:
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	end class

	new img,imglobcurs
	push "configs/kursorstd.png"
	push "configs/kursoract.png"
	call bsms,load
	module bsms
	method init
	new img,imgstd
	new img,imgact
	new int,msid
	push 0
	pop msid
	end method
	method load
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call imgstd,load
	push $2
	call imgact,load
	push "imgact"
	call imglobcurs,copy
	call imglobcurs,hide
	call imgstd,hide
	call imgact,hide
	cthis reset
	push "imgstd"
	call engine,stdbutcursor
	end method
	method setinitial
	call mouse,stdcursor
	push 0
	pop msid
	end method
	method setstd
	push msid
	push 1
	cmpjne
	cmp0
	je l147
	push "imgstd"
	call mouse,setcursor
	push "imgstd"
	call engine,stdbutcursor
	push 1
	pop msid
l147:
	end method
	method setact
	push msid
	push 2
	cmpjne
	cmp0
	je l149
	push "imgact"
	call mouse,setcursor
	push 2
	pop msid
l149:
	end method
	method setown
	push 3
	pop msid
	end method
	method isinitial
	push msid
	push 0
	cmpje
	end method
	method isstd
	push msid
	push 1
	cmpje
	end method
	method isact
	push msid
	push 2
	cmpje
	end method
	method isown
	push msid
	push 3
	cmpje
	end method
	end module

	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l150
	push $1
	push $5
	cmpjle
	cmp0
	je l150
	push $2
	push $4
	cmpjae
	cmp0
	je l150
	push $2
	push $6
	cmpjle
	jmp l152
l150:
	push 0
	jmp l152
l151:
	push 1
l152:
	end method
	method isin2
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l153
	push $1
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l153
	push $2
	push $4
	cmpjae
	cmp0
	je l153
	push $2
	push $4
	push $6
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l155
l153:
	push 0
	jmp l155
l154:
	push 1
l155:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	end method
	method insurf
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $3
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis isin
	end method
	method issurfin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l157
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l157
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l157
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l158
l156:
	push 0
	jmp l158
l157:
	push 1
l158:
	end method
	method commonsurface
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis issurfin
	cmp0
	jne l160
	push $5
	push $6
	push $7
	push $8
	push $1
	push $2
	push $3
	push $4
	cthis issurfin
	jmp l161
l159:
	push 0
	jmp l161
l160:
	push 1
l161:
	end method
	method commonimgs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis commonsurface
	end method
	method surfwithinsurf
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l162
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l162
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l162
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l164
l162:
	push 0
	jmp l164
l163:
	push 1
l164:
	end method
	method imgwithinimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis surfwithinsurf
	end method
	end module

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	ret
	end method
	method ileny
	push ily
	ret
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	ret
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen5
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis ilen
	ret
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	ret
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	ret
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	ret
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	cmpjae
	cmp0
	je l165
	push ilx
	push $6
	cmpjle
	cmp0
	je l165
	push ily
	push $5
	cmpjae
	cmp0
	je l165
	push ily
	push $7
	cmpjle
	jmp l167
l165:
	push 0
	jmp l167
l166:
	push 1
l167:
	ret
	end method
	method ilodlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],lody
	push $2
	spushs
	spop $a
	call [$a],lodx
	push $2
	spushs
	spop $a
	call [$a],lody
	cthis ilen
	end method
	method iposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpos
	push $2
	spushs
	spop $a
	call [$a],getpos
	cthis ilen
	end method
	end module

	class classansearcher
	method init
	end method
	method _findnotr
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $6
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $7
l168:
	push $2
	push $6
	cmpjne
	cmp0
	je l169
	push $3
	push $7
	cmpjne
	jmp l171
l169:
	push 0
	jmp l171
l170:
	push 1
l171:
	cmp0
	je l172
	push $1
	spushs
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l174
	push $2
	push $3
	ret
l174:
	push $4
	popax
	add $2,$a
	pop $2
	push $5
	popax
	add $3,$a
	pop $3
	jmp l168
l172:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method firstnotrx1y
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	method firstnotrexy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrxy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrx1ey
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	end class

	class signal_pack
	method init
	end method
	method addsignals
	localstring $1
	pop $1
	push $1
	spushs
	push "operator<"
	push "signal_pack0"
	spop $a
	call [$a],addmethod
	end method
	method signal_pack0
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	end method
	end class

	class ImagePos
	method init
	end method
	method getex
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	end class

	class ImageVisible
	method init
	new int,_isvisible
	push 1
	pop _isvisible
	end method
	method isvisible
	push _isvisible
	end method
	method show
	push 1
	pop _isvisible
	end method
	method hide
	push 0
	pop _isvisible
	end method
	end class

	class Image
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push A
	push "getz"
	push 0
	push "getpx"
	push 0
	push "getpy"
	push 0
	push "getw"
	push 0
	push "geth"
	push 0
	push "isvisible"
	push 0
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "show"
	push "Image0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "hide"
	push "Image1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setz"
	push "Image2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpos"
	push "Image3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "move"
	push "Image4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getex"
	push "Image5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getey"
	push "Image6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcx"
	push "Image7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcy"
	push "Image8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isin"
	push "Image9"
	spop $a
	call [$a],addmethod
	end method
	method Image0
	push 1
	pop isvisible
	end method
	method Image1
	push 0
	pop isvisible
	end method
	method Image2
	localint $1
	pop $1
	push $1
	pop getz
	end method
	method Image3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop getpx
	push $2
	pop getpy
	end method
	method Image4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add getpx,$a
	pop getpx
	push $2
	popax
	add getpy,$a
	pop getpy
	end method
	method Image5
	push getpx
	push getw
	pop $b
	popax
	add $a,$b
	end method
	method Image6
	push getpy
	push geth
	pop $b
	popax
	add $a,$b
	end method
	method Image7
	push getpx
	push getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image8
	push getpy
	push geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image9
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	neg
	cmp0
	je l176
	push $3
	neg
	cmp0
	jne l179
	push $3
	cmp0
	je l180
	push isvisible
	jmp l182
l180:
	push 0
	jmp l182
l181:
	push 1
l182:
	jmp l183
l178:
	push 0
	jmp l183
l179:
	push 1
l183:
	cmp0
	je l184
	push $1
	push getpx
	cmpjae
	cmp0
	je l185
	push $1
	cthis getex
	cmpjl
	cmp0
	je l185
	push $2
	push getpy
	cmpjae
	cmp0
	je l185
	push $2
	cthis getey
	cmpjl
	jmp l187
l185:
	push 0
	jmp l187
l186:
	push 1
l187:
	jmp l177
l184:
	push 0
l177:
	jmp l175
l176:
	push 0
l175:
	end method
	end class

	class anima_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "_clanbuildpomvars"
	push "anima_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_clanbuildpomvars
	push $1
	spushs
	push "setbpos"
	push "anima_pack1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "saverelpos"
	push "anima_pack2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrelpos"
	push "anima_pack3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssaverelpos"
	push "anima_pack4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssetrelpos"
	push "anima_pack5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rplay"
	push "anima_pack6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setcpos"
	push "anima_pack7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator="
	push "anima_pack8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator=="
	push "anima_pack9"
	spop $a
	call [$a],addmethod
	push $1
	cthis addsignals
	end method
	method anima_pack0
	new int,_ixp
	new int,_iyp
	end method
	method anima_pack1
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anima_pack2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method anima_pack3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack4
	call mouse,getpos
	cthis saverelpos
	end method
	method anima_pack5
	call mouse,getpos
	cthis setrelpos
	end method
	method anima_pack6
	localstring $1
	pop $1
	push $1
	cthis isplaying
	neg
	cmp0
	je l189
	push $1
	cthis play
l189:
	end method
	method anima_pack7
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack8
	localstring $1
	pop $1
	push $1
	cthis copy
	end method
	method anima_pack9
	localstring $1
	pop $1
	cthis actionnr
	push $1
	spushs
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l190
	cthis framenr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l192
l190:
	push 0
	jmp l192
l191:
	push 1
l192:
	end method
	end class

	class timer_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	cthis addsignals
	end method
	end class

	class vector_pack
	method init
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l193:
	push $2
	cthis size
	cmpjl
	cmp0
	je l194
	jmp l196
l195:
	add $2,1
	pop $2
	jmp l193
l196:
	push $1
	spushs
	push $2
	cthis get
	spop $d
	cthis [$d]
	jmp l195
l194:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "each"
	push "each"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator-"
	push "vector_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator+"
	push "vector_pack1"
	spop $a
	call [$a],addmethod
	end method
	method vector_pack0
	localdef $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method vector_pack1
	localdef $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	end class

	method new_object
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $1
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	 clparent [$a],resizemethods
	end method
	method new_anima
	localstring $1
	pop $1
	push "anima"
	push $1
	cthis new_object
	end method
	method new_vector
	localstring $1
	pop $1
	push "vector"
	push $1
	cthis new_object
	end method
	class classanfilter
	method init
	end method
	method buildanfilter
	new filter,ft
	cthis getname
	call ft,link
	push 1
	call ft,setpivottype
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "buildanfilter"
	push "buildanfilter"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildanfilter
	push $1
	spushs
	push "setopacity"
	push "classanfilter0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setzoom"
	push "classanfilter1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setangle"
	push "classanfilter2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getangle"
	push "classanfilter3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rotate"
	push "classanfilter4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpivottype"
	push "classanfilter5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlink"
	push "classanfilter6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "link"
	push "classanfilter7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "blend"
	push "classanfilter8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mask"
	push "classanfilter9"
	spop $a
	call [$a],addmethod
	end method
	method classanfilter0
	localint $1
	pop $1
	push $1
	call ft,setopacity
	end method
	method classanfilter1
	localreal $1
	pop $1
	push $1
	call ft,setzoom
	end method
	method classanfilter2
	localreal $1
	pop $1
	push $1
	call ft,setangle
	end method
	method classanfilter3
	call ft,getangle
	ret
	end method
	method classanfilter4
	localreal $1
	pop $1
	push $1
	call ft,rotate
	end method
	method classanfilter5
	localint $1
	pop $1
	push $1
	call ft,setpivottype
	end method
	method classanfilter6
	call ft,unlink
	end method
	method classanfilter7
	cthis getname
	call ft,link
	end method
	method classanfilter8
	localstring $1
	pop $1
	push $1
	call ft,blend
	end method
	method classanfilter9
	localstring $1
	pop $1
	push $1
	call ft,mask
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l197:
	push $1
	push iile
	cmpjl
	cmp0
	je l198
	jmp l200
l199:
	add $1,1
	pop $1
	jmp l197
l200:
	push $1
	call _vs,get
	neg
	cmp0
	je l202
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
l202:
	jmp l199
l198:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _pos
	push 10
	call $1,getb
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l204
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l206
	spop $a
	push $1
	cthis copy
	jmp l205
l206:
	push "gmobjvec"
	cmpst
	jne l207
	spop $a
	push $1
	cthis copy
	jmp l205
l207:
	push "gmimgvec"
	cmpst
	jne l208
	spop $a
	push $1
	cthis copy
	jmp l205
l208:
	spop $a
	cthis free
	push $1
	cthis add
l205:
	jmp l203
l204:
	cthis free
	push $1
	cthis add
l203:
	end method
	method save
	localstring $1
	pop $1
	push $1
	call lsim,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call lsim,load
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	ret
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	ret
	end method
	method removegr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l209:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l210
	jmp l212
l211:
	add $2,1
	pop $2
	jmp l209
l212:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis remove
	jmp l211
l210:
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l213:
	push $2
	cthis size
	cmpjl
	cmp0
	je l214
	jmp l216
l215:
	add $2,1
	pop $2
	jmp l213
l216:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l215
l214:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l217:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l218
	jmp l220
l219:
	add $2,1
	pop $2
	jmp l217
l220:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l219
l218:
	end method
	method addgroups
	push "addgr"
	cthis withlist
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	ret
	end method
	method empty
	cthis size
	push 0
	cmpje
	ret
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	ret
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	ret
	end method
	method print
	call lsim,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	ret
	end method
	method set
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,set
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method additer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l221:
	push $3
	push 0
	cmpja
	cmp0
	je l222
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	sub $3,1
	pop $3
	jmp l221
l222:
	end method
	method buildarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newarray
	push $2
	push 0
	push $3
	cthis additer
	end method
	method deleteall
	localint $1
	push 0
	pop $1
l223:
	push $1
	cthis size
	cmpjl
	cmp0
	je l224
	jmp l226
l225:
	add $1,1
	pop $1
	jmp l223
l226:
	push $1
	cthis get
	spushs
	spop $d
	delete [$d]
	jmp l225
l224:
	end method
	method deleteallgm
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l227:
	push $2
	cthis size
	cmpjl
	cmp0
	je l228
	jmp l230
l229:
	add $2,1
	pop $2
	jmp l227
l230:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],vardel
	jmp l229
l228:
	end method
	method deleteallgmobj
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l231:
	push $2
	cthis size
	cmpjl
	cmp0
	je l232
	jmp l234
l233:
	add $2,1
	pop $2
	jmp l231
l234:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],deletegmobj
	jmp l233
l232:
	end method
	method lockall
	push "lock"
	cthis eval
	cthis print
	end method
	method unlockall
	push "unlock"
	cthis eval
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l236
	push $1
	call lsim,add
l236:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l237:
	push $2
	push $1
	cmpjne
	cmp0
	je l238
	push $2
	cthis addbegin
	pop $2
	jmp l237
l238:
	end method
	method addlist
	push A
	cthis sepadd
	end method
	method removelist
	push "remove"
	cthis withlist
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l240
	push $1
	cthis addbegin
	jmp l239
l240:
	push $2
	push $3
	cmpjae
	cmp0
	je l242
	push $1
	cthis add
	jmp l241
l242:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l243:
	push $4
	push $2
	cmpja
	cmp0
	je l244
	jmp l246
l245:
	sub $4,1
	pop $4
	jmp l243
l246:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l245
l244:
	push $2
	push $1
	cthis set
l241:
l239:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removefirst
	push 0
	call lsim,removeat
	end method
	method removelast
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l247:
	push $1
	cthis contains
	cmp0
	je l248
	push $1
	cthis remove
	jmp l247
l248:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l249:
	push $2
	cthis size
	cmpjl
	cmp0
	je l250
	jmp l252
l251:
	add $2,1
	pop $2
	jmp l249
l252:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l254
	push $2
	cthis removeat
l254:
	jmp l251
l250:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	ret
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	ret
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l255:
	push $2
	push $3
	cmpjle
	cmp0
	je l256
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l255
l256:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l258
	call $1,rand
	cthis get
	jmp l257
l258:
	push "null"
l257:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l260
	localint $3
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l261:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l262
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l264
	push "null"
	ret
l264:
	jmp l261
l262:
	push $3
	cthis get
	ret
l260:
	push "null"
	end method
	method buildfullvars
	push "gmobjvec0"
	cthis each
	end method
	method gmobjvec0
	localdef $1
	pop $1
	cthis buildfullname
	end method
	method buildvars
	push "gmobjvec1"
	cthis each
	end method
	method gmobjvec1
	localdef $1
	pop $1
	cthis getname
	cthis addtogamevars
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l266
l267:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l268
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l267
l268:
l266:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method isplaying
	localint $1
	push 0
	pop $1
l269:
	push $1
	cthis size
	cmpjl
	cmp0
	je l270
	jmp l272
l271:
	add $1,1
	pop $1
	jmp l269
l272:
	push $1
	cthis get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],isplaying
	cmp0
	je l274
	push 1
	ret
l274:
	jmp l271
l270:
	push 0
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l275:
	push $5
	push 0
	cmpjae
	cmp0
	je l276
	jmp l278
l277:
	sub $5,1
	pop $5
	jmp l275
l278:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l280
	push $5
	call lsim,get
	ret
l280:
	jmp l277
l276:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l281:
	push $5
	push 0
	cmpjae
	cmp0
	je l282
	jmp l284
l283:
	sub $5,1
	pop $5
	jmp l281
l284:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l286
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l286:
	jmp l283
l282:
	push 0
	ret
	end method
	method setframe
	localdef $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l287:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l288
	jmp l290
l289:
	add $2,1
	pop $2
	jmp l287
l290:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l289
l288:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l291:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l292
	jmp l294
l293:
	add $3,1
	pop $3
	jmp l291
l294:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l293
l292:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l295:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l296
	jmp l298
l297:
	add $4,1
	pop $4
	jmp l295
l298:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l297
l296:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l299:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l300
	jmp l302
l301:
	add $5,1
	pop $5
	jmp l299
l302:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l301
l300:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l303:
	push $3
	cthis size
	cmpjl
	cmp0
	je l304
	jmp l306
l305:
	add $3,1
	pop $3
	jmp l303
l306:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l308
	push $3
	ret
l308:
	jmp l305
l304:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l309:
	push $3
	cthis size
	cmpjl
	cmp0
	je l310
	jmp l312
l311:
	add $3,1
	pop $3
	jmp l309
l312:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l314
	push $3
	ret
l314:
	jmp l311
l310:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l315:
	push $2
	cthis size
	cmpjl
	cmp0
	je l316
	jmp l318
l317:
	add $2,1
	pop $2
	jmp l315
l318:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l317
l316:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l319:
	push $3
	cthis size
	cmpjl
	cmp0
	je l320
	jmp l322
l321:
	add $3,1
	pop $3
	jmp l319
l322:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l321
l320:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l323:
	push $4
	cthis size
	cmpjl
	cmp0
	je l324
	jmp l326
l325:
	add $4,1
	pop $4
	jmp l323
l326:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l325
l324:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l327:
	push $2
	cthis size
	cmpjl
	cmp0
	je l328
	jmp l330
l329:
	add $2,1
	pop $2
	jmp l327
l330:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l332
	push 0
	ret
l332:
	jmp l329
l328:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l334
	ret
l334:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l335:
	push $6
	cthis size
	cmpjl
	cmp0
	je l336
	jmp l338
l337:
	add $6,1
	pop $6
	jmp l335
l338:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l340
	push $6
	pop $3
	push $5
	pop $4
l340:
	jmp l337
l336:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l342
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l343
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l345
l343:
	push 0
	jmp l345
l344:
	push 1
l345:
	jmp l346
l341:
	push 0
	jmp l346
l342:
	push 1
l346:
	ret
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	new string,sanload
	push "null"
	pop sanload
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	ret
	end method
	method getposy
	push _iy
	ret
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	ret
	end method
	method getpy
	push _iy
	ret
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getz
	push _iz
	ret
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l348
	push _ix
	ret
l348:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l349:
	push $4
	push $1
	cmpjl
	cmp0
	je l350
	jmp l352
l351:
	add $4,1
	pop $4
	jmp l349
l352:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l354
	push $3
	pop $2
l354:
	jmp l351
l350:
	push $2
	ret
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l356
	push _iy
	ret
l356:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l357:
	push $4
	push $1
	cmpjl
	cmp0
	je l358
	jmp l360
l359:
	add $4,1
	pop $4
	jmp l357
l360:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l362
	push $3
	pop $2
l362:
	jmp l359
l358:
	push $2
	ret
	end method
	method _getpx
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l364
	push _ix
	ret
l364:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l365:
	push $4
	push $1
	cmpjl
	cmp0
	je l366
	jmp l368
l367:
	add $4,1
	pop $4
	jmp l365
l368:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l370
	push $3
	pop $2
l370:
	jmp l367
l366:
	push $2
	ret
	end method
	method _getpy
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l372
	push _iy
	ret
l372:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l373:
	push $4
	push $1
	cmpjl
	cmp0
	je l374
	jmp l376
l375:
	add $4,1
	pop $4
	jmp l373
l376:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l378
	push $3
	pop $2
l378:
	jmp l375
l374:
	push $2
	ret
	end method
	method _getw
	cthis getex
	cthis _getpx
	pop $b
	popax
	sub $a,$b
	end method
	method _geth
	cthis getey
	cthis _getpy
	pop $b
	popax
	sub $a,$b
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l380
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l380:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l381:
	push $3
	cthis size
	cmpjl
	cmp0
	je l382
	jmp l384
l383:
	add $3,1
	pop $3
	jmp l381
l384:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l383
l382:
	end method
	method nplay
	localint $1
	pop $1
	push "play"
	push $1
	cthis eval1
	end method
	method txtreset
	localint $1
	push 0
	pop $1
l385:
	push $1
	cthis size
	cmpjl
	cmp0
	je l386
	jmp l388
l387:
	add $1,1
	pop $1
	jmp l385
l388:
	push $1
	cthis get
	spushs
	push ""
	spop $a
	call [$a],txtset
	jmp l387
l386:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l389:
	push $5
	push 0
	cmpjae
	cmp0
	je l390
	jmp l392
l391:
	sub $5,1
	pop $5
	jmp l389
l392:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l394
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l394:
	jmp l391
l390:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method isinfunc
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l395:
	push $4
	push 0
	cmpjae
	cmp0
	je l396
	jmp l398
l397:
	sub $4,1
	pop $4
	jmp l395
l398:
	push $4
	call lsim,get
	spushs
	push $3
	spushs
	push $1
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l400
	push $4
	pop _ifound
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	ret
l400:
	jmp l397
l396:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method withincut
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push $1
	push "gmimgvec0"
	cthis ineach
	pop $1
	pop $2
	end method
	method gmimgvec0
	localdef $1
	pop $1
	localint $2
	pop $2
	localint $3
	pop $3
	push $2
	push $3
	cthis withincut
	push $3
	push $2
	end method
	method isincut
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l401:
	push $5
	push 0
	cmpjae
	cmp0
	je l402
	jmp l404
l403:
	sub $5,1
	pop $5
	jmp l401
l404:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],withincut
	cmp0
	je l406
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l408
l406:
	push 0
	jmp l408
l407:
	push 1
l408:
	cmp0
	je l409
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l409:
	jmp l403
l402:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method findif
	localstring $1
	pop $1
	push $1
	push 1
	cthis _find
	end method
	method getfound
	push _ifound
	ret
	end method
	method getsfound
	push _ifound
	cthis get
	ret
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findsfr
	localstring $1
	pop $1
	push "framename"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "actionnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec1"
	cthis find_closest
	end method
	method gmimgvec1
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method getsac
	localstring $1
	pop $1
	push $1
	cthis findsac
	cthis get
	end method
	method getsacfr
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l410:
	push $3
	cthis size
	cmpjl
	cmp0
	je l411
	jmp l413
l412:
	add $3,1
	pop $3
	jmp l410
l413:
	push $3
	cthis get
	spushs
	spop $a
	call [$a],actionname
	push $1
	cmpje
	cmp0
	je l415
	push $3
	cthis get
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpje
	jmp l417
l415:
	push 0
	jmp l417
l416:
	push 1
l417:
	cmp0
	je l418
	push $3
	cthis get
	ret
l418:
	jmp l412
l411:
	push "null"
	end method
	method blitto
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l419:
	push $2
	cthis size
	cmpjl
	cmp0
	je l420
	jmp l422
l421:
	add $2,1
	pop $2
	jmp l419
l422:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],blit
	jmp l421
l420:
	end method
	method sortz
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l423:
	push $2
	cthis size
	cmpjl
	cmp0
	je l424
	jmp l426
l425:
	add $2,1
	pop $2
	jmp l423
l426:
	push $2
	cthis get
	spushs
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	jmp l425
l424:
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l428
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l427
l428:
	push $1
	pop $3
l427:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l430
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l429
l430:
	push $1
	pop $3
l429:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	end method
	method deleteloaded
	cthis deleteallgm
	push sanload
	push "null"
	cmpjne
	cmp0
	je l432
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l432:
	end method
	end class

	class gmadvvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l433:
	push $5
	push 0
	cmpjae
	cmp0
	je l434
	jmp l436
l435:
	sub $5,1
	pop $5
	jmp l433
l436:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],butisin
	cmp0
	je l438
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l438:
	jmp l435
l434:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	end class

	class gmmaskvec
	parent gmadvvec
	method init
	clparent gmadvvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,butisin
	end method
	end class

	new int,igmsubtitle
	push 0
	pop igmsubtitle
	class Subtitle
	method init
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $7
	push 0.5
	pop $7
	localint $8
	localint $9
	localint $10
	push 255
	pop $8
	push 255
	pop $9
	push 255
	pop $10
	new int,iborx
	push $5
	pop iborx
	new int,ibory
	push $6
	pop ibory
	new font,fnt
	push $3
	push $4
	call fnt,load
	new int,ifontsize
	push $4
	pop ifontsize
	new db,dbl
	push "lang/"
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,load
	localstring $11
	localstring $12
	new vector,v1
	push "string"
	call v1,type
	localint $13
	push iResX
	push 2
	push $5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $7
	push $4
	pop $b
	popax
	mul $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop $13
	localint $14
	localint $15
	localint $16
	push 0
	pop $16
	localint $17
	push 0
	pop $17
l439:
	push $17
	call dbl,getrowsno
	cmpjl
	cmp0
	je l440
	jmp l442
l441:
	add $17,1
	pop $17
	jmp l439
l442:
	push $17
	push 0
	push $2
	push $17
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call dbl,set
	push $17
	push 1
	call dbl,get
	pop $11
	push $11
	push " "
	call v1,vecbuildfromstring
	push ""
	pop $12
	push 1
	pop $14
	push 0
	pop $15
l443:
	push $15
	call v1,size
	cmpjl
	cmp0
	je l444
	jmp l446
l445:
	add $15,1
	pop $15
	jmp l443
l446:
	call $12,length
	push $15
	call v1,get
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	push $13
	cmpjle
	cmp0
	je l448
	push " "
	push $15
	call v1,get
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	jmp l447
l448:
	push $14
	push 1
	cmpje
	cmp0
	je l450
	push $17
	push $14
	push $12
	call dbl,set
	jmp l449
l450:
	push $17
	push $12
	call dbl,add
l449:
	push $15
	call v1,get
	pop $12
	add $14,1
	pop $14
l447:
	jmp l445
l444:
	push $14
	push 1
	cmpje
	cmp0
	je l452
	push $17
	push $14
	push $12
	call dbl,set
	jmp l451
l452:
	push $17
	push $12
	call dbl,add
l451:
	push $14
	push $16
	cmpja
	cmp0
	je l454
	push $14
	pop $16
l454:
	jmp l441
l440:
	new gmimgvec,grtxt
	localint $17
	push 0
	pop $17
l455:
	push $17
	push $16
	cmpjl
	cmp0
	je l456
	jmp l458
l457:
	add $17,1
	pop $17
	jmp l455
l458:
	push "txt"
	push $17
	pop $b
	popax
	add $a,$b
	pop $11
	push "txts"
	push $17
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	push ""
	push "fnt"
	cthis black
	clparent classgame,newtext
	push $11
	push ""
	push "fnt"
	push $8
	push $9
	push $10
	clparent classgame,newtext
	push $11
	call grtxt,add
	push $12
	call grtxt,add
	jmp l457
l456:
	new db,dbsnd
	new timer,timtxt
	push 1
	call timtxt,settick
	push 1
	call timtxt,setcycle
	push "onfinish"
	push "Subtitle0"
	call timtxt,addmethod
	push 12000
	cthis setz
	end method
	method Subtitle0
	cthis cisplaying
	neg
	cmp0
	je l460
	cthis hidesubs
	jmp l459
l460:
	cthis play
l459:
	end method
	method reset
	cthis stop
	call dbsnd,free
	end method
	method hidesubs
	call grtxt,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	call grtxt,setz
	end method
	method stop
	cthis hidesubs
	push 0
	call timtxt,stop
	end method
	method register
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push $2
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l462
	localdef $4
	push $1
	call dbsnd,findbyrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l464
	push $4
	push 1
	push $3
	call dbsnd,set
	jmp l463
l464:
	localdef $4
	call dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	call dbsnd,add
	push $4
	push $3
	call dbsnd,add
l463:
l462:
	end method
	method play
	localstring $1
	pop $1
	cthis stop
	localdef $2
	push $1
	call dbsnd,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l466
	push $2
	push 1
	call dbsnd,get
	pop $2
	localdef $3
	push $2
	call dbl,getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	localstring $5
	localint $6
	push 0
	push 0
	call grtxt,setpos
	localint $7
	push 2
	pop $7
	localint $8
	push 0
	pop $8
l467:
	push $8
	push $3
	cmpjl
	cmp0
	je l468
	jmp l470
l469:
	add $8,1
	pop $8
	jmp l467
l470:
	push 2
	push $8
	pop $b
	popax
	mul $a,$b
	pop $6
	push $6
	call grtxt,get
	pop $4
	push $4
	spushs
	push $2
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	call dbl,get
	spop $a
	call [$a],txtset
	push $6
	push 1
	pop $b
	popax
	add $a,$b
	call grtxt,get
	pop $5
	push $5
	spushs
	push $4
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],txtset
	push $4
	spushs
	push iResX
	push $4
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $8
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $4
	spushs
	spop $a
	call [$a],show
	push $5
	spushs
	push $4
	spushs
	spop $a
	call [$a],getpx
	push 1
	pop $b
	popax
	add $a,$b
	push $4
	spushs
	spop $a
	call [$a],getpy
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $5
	spushs
	spop $a
	call [$a],show
	jmp l469
l468:
	push 0
	push iResY
	push $3
	push ifontsize
	push $7
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push ibory
	pop $b
	popax
	sub $a,$b
	call grtxt,move
	call timtxt,play
l466:
	end method
	end class

	push igmsubtitle
	cmp0
	je l472
	push "eng_egipt.db"
	push "sounds/"
	push sgmfontbold
	push 24
	push 50
	push 15
	new Subtitle,subtitle
l472:
	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	push igmsubtitle
	cmp0
	je l474
	call subtitle,reset
l474:
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	ret
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l476
	push $1
	cthis cbplay
	jmp l475
l476:
	cthis cgetactsnd
	push $1
	cmpjne
	cmp0
	je l478
	push $1
	cthis cbplay
l478:
l475:
	end method
	method cbselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	jne l481
	cthis cgetactsnd
	push $1
	cmpjne
	jmp l482
l480:
	push 0
	jmp l482
l481:
	push 1
l482:
	cmp0
	je l483
	push $1
	cthis cbplay
l483:
	end method
	method cbplay
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l485
	push _csplay
	spushs
	push 1
	spop $a
	call [$a],stop
l485:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l487
	push $1
	cthis csubplay
l487:
	end method
	method cbsplay
	localstring $1
	pop $1
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l489
	push $1
	cthis csubplay
l489:
	end method
	method cbplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	cthis cbplay
	end method
	method cbplay2
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l491
	push _csplay
	spushs
	push 0
	spop $a
	call [$a],stop
l491:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l493
	push $1
	cthis csubplay
l493:
	end method
	method crplay
	localstring $1
	pop $1
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l495
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l497
l495:
	push 0
	jmp l497
l496:
	push 1
l497:
	cmp0
	je l498
	ret
l498:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l500
	push $1
	cthis csubplay
l500:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l502
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	jmp l504
l502:
	push 0
	jmp l504
l503:
	push 1
l504:
	cmp0
	je l505
	push $1
	cthis csubplay
l505:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call $2,rand
	push 0
	cmpje
	cmp0
	je l507
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
l507:
	end method
	method cplayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "c"
	push $1
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $d
	cthis [$d]
	push $2
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l509
	push $3
	push "null"
	cmpjne
	jmp l511
l509:
	push 0
	jmp l511
l510:
	push 1
l511:
	cmp0
	je l512
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l512:
	end method
	method cactsndstop
	localint $1
	pop $1
	cthis cisplaying
	cmp0
	je l514
	push _csplay
	spushs
	push $1
	spop $a
	call [$a],stop
l514:
	end method
	method cstopsnds
	localint $1
	pop $1
	call _csplay,in
	cmp0
	je l516
	cthis cisplaying
	jmp l518
l516:
	push 0
	jmp l518
l517:
	push 1
l518:
	cmp0
	je l519
	push $1
	cthis cactsndstop
l519:
	end method
	method cisplaying
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l521
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l520
l521:
	push 0
l520:
	end method
	method csubplay
	localstring $1
	pop $1
	push igmsubtitle
	cmp0
	je l523
	push $1
	call subtitle,play
l523:
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	je l525
	push 0
	pop iile
	ret
l525:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l526:
	push $3
	push $2
	cmpjl
	cmp0
	je l527
	jmp l529
l528:
	add $3,1
	pop $3
	jmp l526
l529:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l528
l527:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	cmpjle
	cmp0
	je l531
	push 0
	pop iile
	ret
l531:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	cmpje
	cmp0
	je l533
	call iile,rand
	pop ilicz
l533:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l534:
	push $3
	push iile
	cmpjl
	cmp0
	je l535
	jmp l537
l536:
	add $3,1
	pop $3
	jmp l534
l537:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l536
l535:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	cmpjne
	cmp0
	je l539
	push splay
	spushs
	push $1
	spop $a
	call [$a],stop
l539:
	end method
	method isplaying
	push splay
	push "null"
	cmpjne
	cmp0
	je l541
	push splay
	spushs
	spop $a
	call [$a],isplaying
	jmp l540
l541:
	push 0
l540:
	end method
	method randplay
	localint $1
	pop $1
	call $1,rand
	push 0
	cmpje
	cmp0
	je l543
	cthis play
l543:
	end method
	method playid
	localint $1
	pop $1
	push $1
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	cthis play
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method reset
	push 0
	pop ilicz
	end method
	method rbgplay
	cthis isplaying
	neg
	cmp0
	je l545
	cthis bgplay
l545:
	end method
	method rplay
	cthis isplaying
	neg
	cmp0
	je l547
	cthis play
l547:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	spushs
	spop $a
	call [$a],play
	push itype
	push 0
	cmpje
	cmp0
	je l549
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l548
l549:
	push itype
	push 1
	cmpje
	cmp0
	je l551
	call iile,rand
	pop ilicz
l551:
l548:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l552:
	push $2
	push iile
	cmpjl
	cmp0
	je l553
	jmp l555
l554:
	add $2,1
	pop $2
	jmp l552
l555:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setvol
	jmp l554
l553:
	end method
	end class

	class SoundSource
	method init
	end method
	method setvol
	localstring $1
	localint $2
	localint $3
	localreal $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call $5,abs
	push $4
	cmpjae
	cmp0
	je l557
	push $1
	spushs
	push $3
	spop $a
	call [$a],setvol
	jmp l556
l557:
	push $1
	spushs
	push 1.0
	call $5,abs
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setvol
l556:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,_iconstid
	end method
	method bkg=
	localdef $1
	pop $1
	push ".pyz"
	call $1,contains
	cmp0
	je l559
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l558
l559:
	push "imgbkg"
	push $1
	push 0
	cthis newimg
l558:
	end method
	method bgr=
	localdef $1
	pop $1
	push $1
	cthis csndbgr
	end method
	method path=
	localdef $1
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	end method
	method cycle=
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis cnewtimercyclefin
	end method
	method timer=
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	end method
	method _getflags
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
	push "L"
	call $1,contains
	cmp0
	je l561
	push "L"
	call $1,strremove
	push 1
	pop $2
l561:
	localdef $3
	push 0
	pop $3
	push "P"
	call $1,contains
	cmp0
	je l563
	push "P"
	call $1,strremove
	push 1
	pop $3
l563:
	localdef $4
	push 0
	pop $4
	push "H"
	call $1,contains
	cmp0
	je l565
	push "H"
	call $1,strremove
	push 1
	pop $4
l565:
	push $1
	push $2
	push $3
	push $4
	ret
	end method
	method img=
	localdef $1
	pop $1
	localdef $2
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	push 0
	pop $5
	push " "
	call $1,contains
	cmp0
	je l567
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l567:
	localstring $6
	push "/"
	call $1,contains
	cmp0
	je l569
	new vector,_v_sfile
	push "string"
	call _v_sfile,type
	push $1
	push "/"
	call _v_sfile,vecbuildfromstring
	call _v_sfile,last
	spushs
	push 4
	spop $h
	call $h,strsube
	pop $6
	delete _v_sfile
	jmp l568
l569:
	push 4
	call $1,strsube
	pop $6
l568:
	localstring $7
	push ".pyz"
	call $1,contains
	cmp0
	je l571
	push "an"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	push $1
	push $5
	cthis newanima
	jmp l570
l571:
	push "img"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	push $1
	push $5
	cthis newimg
l570:
	push $2
	cmp0
	je l573
	push $7
	spushs
	spop $a
	call [$a],anloopfin
l573:
	push $3
	cmp0
	je l575
	push $7
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l575:
	push $4
	cmp0
	je l577
	push $7
	spushs
	spop $a
	call [$a],hide
l577:
	end method
	method imgs=
	push "img="
	cthis withlist
	end method
	method clone
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	cthis getname
	cthis gettype
	push $1
	spop $a
	call [$a],classgame0
	end method
	method classgame0
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	push $3
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method clones=
	push "clone"
	cthis withlist
	end method
	method list=
	localdef $1
	pop $1
	localdef $2
	pop $2
	push $1
	spushs
	spop $e
	new gmobjvec,[$e]
l578:
	push A
	push $2
	cmpjne
	cmp0
	je l579
	push $1
	spushs
	push $2
	spop $a
	call [$a],addbegin
	pop $2
	jmp l578
l579:
	end method
	method list2=
	localdef $1
	push "gmobjvec"
	cthis newconst
	pop $1
	push $1
	cthis list=
	push $1
	end method
	method debug=
	localdef $1
	pop $1
	push $1
	call engine,setdebugstate
	end method
	method sfx=
	localstring $1
	pop $1
	localint $2
	push "N"
	call $1,contains
	pop $2
	push $2
	cmp0
	je l581
	push "N"
	call $1,strremove
l581:
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	popax
	pop $4
	pop $3
	pop $1
	localdef $5
	push 100
	pop $5
	push " "
	call $1,contains
	cmp0
	je l583
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l583:
	localstring $6
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsfx
	push $6
	spushs
	push $5
	spop $a
	call [$a],setvol
	push $3
	cmp0
	je l585
	push $6
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l585:
	push $4
	cmp0
	je l587
	push $6
	spushs
	spop $a
	call [$a],play
	jmp l586
l587:
	push $2
	cmp0
	je l589
	push $6
	spushs
	spop $a
	call [$a],playloop
l589:
l586:
	end method
	method sfxs=
	push "sfx="
	cthis withlist
	end method
	method tickstart
	push "__timspeed"
	cthis hasvar
	neg
	cmp0
	je l591
	new TicksCounter,__timspeed
l591:
	call __timspeed,start
	end method
	method tickstop
	push "ticker: "
	call __timspeed,print
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis newbgr
	push "sndbgr"
	cthis sndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l593
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	push "imgkursor"
	pop $1
l593:
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call mouse,setcursor
	push $1
	call engine,stdbutcursor
	call bsms,setown
	end method
	method newimgarray
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildarray
	end method
	method newfont
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new font,[$e]
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],load
	end method
	method monofont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontmono
	push $2
	cthis newfont
	end method
	method newfontbold
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontbold
	push $2
	cthis newfont
	end method
	method snewfont
	localstring $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "font"
	cthis newconst
	pop $3
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	ret
	end method
	method stdfont
	localint $1
	pop $1
	push sgmfontfile
	push $1
	cthis snewfont
	end method
	method stdmono
	localint $1
	pop $1
	push sgmfontmono
	push $1
	cthis snewfont
	end method
	method stdbold
	localint $1
	pop $1
	push sgmfontbold
	push $1
	cthis snewfont
	end method
	method getconstid
	add _iconstid,1
	pop _iconstid
	push _iconstid
	push 1
	pop $b
	popax
	sub $a,$b
	end method
	method newconst
	localstring $1
	pop $1
	localstring $2
	push "const"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getconstid
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $2
	ret
	end method
	method consttext
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $8
	push "text"
	cthis newconst
	pop $8
	localstring $9
	push $4
	cthis stdfont
	pop $9
	push $8
	spushs
	push $9
	spop $a
	call [$a],setfont
	push $8
	spushs
	push $1
	spop $a
	call [$a],set
	push $8
	spushs
	push $5
	push $6
	push $7
	spop $a
	call [$a],createtxt
	push $8
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $8
	ret
	end method
	method newtext
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	spushs
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	spop $a
	call [$a],setfont
	push $1
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	end method
	method newtextposz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	cthis newtext
	push $1
	spushs
	push $7
	push $8
	push $9
	spop $a
	call [$a],anposz
	end method
	method newgrimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	push $2
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l594:
	push $2
	push $3
	cmpjle
	cmp0
	je l595
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l594
l595:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	spushs
	spop $e
	new classancounter,[$e]
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l596:
	push $6
	push $5
	cmpjl
	cmp0
	je l597
	jmp l599
l598:
	add $6,1
	pop $6
	jmp l596
l599:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l598
l597:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l600:
	push $7
	push $5
	cmpjl
	cmp0
	je l601
	jmp l603
l602:
	add $7,1
	pop $7
	jmp l600
l603:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l602
l601:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l604:
	push $7
	push $5
	cmpjl
	cmp0
	je l605
	jmp l607
l606:
	add $7,1
	pop $7
	jmp l604
l607:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l606
l605:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	spushs
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l608:
	push $3
	push $4
	cmpjl
	cmp0
	je l609
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	cmpjne
	cmp0
	je l611
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	cmpje
	cmp0
	jne l614
	push $12
	push "sfx"
	cmpje
	jmp l615
l613:
	push 0
	jmp l615
l614:
	push 1
l615:
	cmp0
	je l616
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	cmpje
	cmp0
	je l618
	push $14
	push $13
	cthis newsfx
	jmp l617
l618:
	push $14
	push $13
	cthis newsnd
l617:
	push $7
	push $6
	cmpjl
	cmp0
	je l620
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l622
	push $14
	spushs
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l621
l622:
	push 0
	push 4
	call $12,gete
	push "play"
	cmpje
	cmp0
	je l624
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l623
l624:
	push $12
	push "vol"
	cmpje
	cmp0
	je l626
	push $14
	spushs
	push $13
	spop $a
	call [$a],setvol
l626:
l623:
l621:
l620:
	jmp l612
l616:
	push $12
	push "group"
	cmpje
	cmp0
	je l628
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	cmpjl
	cmp0
	je l630
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l632
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
l632:
	jmp l629
l630:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l629:
	jmp l627
l628:
	push $12
	push "bank"
	cmpje
	cmp0
	je l634
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	cmpjl
	cmp0
	je l636
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l638
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	spushs
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l637
l638:
	push $12
	push "vol"
	cmpje
	cmp0
	je l640
	push $14
	spushs
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
l640:
l637:
l636:
	jmp l633
l634:
	push $12
	push "method"
	cmpje
	cmp0
	je l642
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l643:
	push $8
	push $9
	cmpjle
	cmp0
	je l644
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l643
l644:
	jmp l641
l642:
	push $12
	push "singlebank"
	cmpje
	cmp0
	je l646
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l645
l646:
	push $12
	push "bgr"
	cmpje
	cmp0
	je l648
	push $14
	cthis csndbgr
	push $7
	push $6
	cmpjl
	cmp0
	je l650
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l652
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l652:
l650:
	jmp l647
l648:
	push $12
	push "music"
	cmpje
	cmp0
	je l654
	push $14
	cthis playmusic
	push $7
	push $6
	cmpjl
	cmp0
	je l656
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l658
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l658:
l656:
l654:
l647:
l645:
l641:
l633:
l627:
l612:
l611:
	add $3,1
	pop $3
	jmp l608
l609:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l659:
	push $2
	push $3
	cmpjle
	cmp0
	je l660
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $5
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	cmpje
	cmp0
	je l662
	push $2
	ret
l662:
	add $2,1
	pop $2
	jmp l659
l660:
	push 1
	popax
	sub 0,$a
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	cmpjae
	cmp0
	je l664
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l664:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis build2
	end method
	method build2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new anima,[$e]
	push $5
	spushs
	push $1
	spop $a
	call [$a],load
	push $5
	spushs
	push $2
	spop $a
	call [$a],setz
	localint $6
	push $5
	spushs
	spop $a
	call [$a],nofactions
	pop $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $9
	localstring $10
	localstring $11
	localstring $12
	localstring $13
	localint $14
	push 0
	pop $14
l665:
	push $14
	push $6
	cmpjl
	cmp0
	je l666
	jmp l668
l667:
	add $14,1
	pop $14
	jmp l665
l668:
	push "null"
	pop $10
	push "null"
	pop $11
	push "null"
	pop $12
	push $5
	spushs
	push $14
	spop $a
	call [$a],nofframes
	pop $7
	push 1
	pop $8
l669:
	push $8
	push $7
	cmpjle
	cmp0
	je l670
	jmp l672
l671:
	add $8,1
	pop $8
	jmp l669
l672:
	push san
	push $9
	pop $b
	popax
	add $a,$b
	pop $13
	push $8
	push 1
	cmpje
	cmp0
	je l674
	push $13
	pop $10
	jmp l673
l674:
	push $8
	push 2
	cmpje
	cmp0
	je l676
	push $13
	pop $11
	jmp l675
l676:
	push $8
	push 3
	cmpje
	cmp0
	je l678
	push $13
	pop $12
l678:
l675:
l673:
	push $5
	push $13
	clparent newvars,copyanima
	push $13
	spushs
	push $14
	push $8
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $9,1
	pop $9
	jmp l671
l670:
	push $4
	push "null"
	cmpjne
	cmp0
	je l680
	push $4
	spushs
	push $5
	spushs
	push $14
	spop $a
	call [$a],nameofaction
	spop $a
	call [$a],contains
	jmp l682
l680:
	push 0
	jmp l682
l681:
	push 1
l682:
	cmp0
	je l683
	push $10
	spushs
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	jmp l679
l683:
	push $10
	push $11
	push $12
	push $3
	cthis addbut
l679:
	jmp l667
l666:
	push $5
	spushs
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l685
	push sfxmon
	spushs
	spop $a
	call [$a],play
l685:
	push _sfunmovon
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpje
	cmp0
	je l687
	ret
l687:
	push $1
	spushs
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $4
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	spushs
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l688:
	push $5
	push iilebut
	cmpjl
	cmp0
	je l689
	jmp l691
l690:
	add $5,1
	pop $5
	jmp l688
l691:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l690
l689:
	end method
	method print
	localint $1
	push 0
	pop $1
l692:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l693
	jmp l695
l694:
	add $1,1
	pop $1
	jmp l692
l695:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l694
l693:
	end method
	method setrect
	localstring $1
	localint $2
	push 0
	pop $2
l696:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l697
	jmp l699
l698:
	add $2,1
	pop $2
	jmp l696
l699:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getimg
	pop $1
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	spop $a
	call [$a],setrect
	jmp l698
l697:
	end method
	method setflags
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l700:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l701
	jmp l703
l702:
	add $3,1
	pop $3
	jmp l700
l703:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setflags
	jmp l702
l701:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l705
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	jmp l704
l705:
	push "null"
l704:
	ret
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l706:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l707
	jmp l709
l708:
	add $2,1
	pop $2
	jmp l706
l709:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l708
l707:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	cmpja
	cmp0
	je l711
	push iilebut
	pop $2
l711:
	localint $3
	push 0
	pop $3
l712:
	push $3
	push $2
	cmpjl
	cmp0
	je l713
	jmp l715
l714:
	add $3,1
	pop $3
	jmp l712
l715:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l714
l713:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method disabled
	push sbut
	push 0
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disabled
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method resetall
	localint $1
	push 0
	pop $1
l716:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l717
	jmp l719
l718:
	add $1,1
	pop $1
	jmp l716
l719:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setcursorpos
	jmp l718
l717:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l720:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l721
	jmp l723
l722:
	add $3,1
	pop $3
	jmp l720
l723:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setcursorpos
	jmp l722
l721:
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l725
	push $2
	spushs
	spop $a
	call [$a],getimg
	jmp l724
l725:
	push "null"
l724:
	ret
	end method
	method callimgfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getimg
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	cmpjne
	cmp0
	je l727
	push $3
	spushs
	push $2
	spop $a
	call [$a],setmouse
l727:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l729
	ret
l729:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	spushs
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	spushs
	push _sfcl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	spushs
	push _sfrl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l731
	push sfxmon
	spushs
	spop $a
	call [$a],play
l731:
	push _sobmn
	spushs
	push _sfmn
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	spushs
	push _sfmf
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classsimplebutton
	method init
	new string,simgob
	push "null"
	pop simgob
	new gmimgvec,grbut
	end method
	method stdbuild
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push 0
	push 0
	push $3
	push 0
	cthis build
	end method
	method getimgfunc
	localstring $1
	pop $1
	push simgob
	push "null"
	cmpje
	cmp0
	je l733
	push 0
	jmp l732
l733:
	push simgob
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l732:
	end method
	method setbutpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grbut,setpos
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new button,but1
	cthis getname
	call but1,classsimplebutton0
	push "onclick"
	push "classsimplebutton1"
	call but1,addmethod
	push "onrel"
	push "classsimplebutton2"
	call but1,addmethod
	push "onmoveon"
	push "classsimplebutton3"
	call but1,addmethod
	push "onmoveoff"
	push "classsimplebutton4"
	call but1,addmethod
	push ".pyz"
	call $1,contains
	cmp0
	je l735
	new anima,anbut0
	push $1
	call anbut0,load
	push $3
	push $4
	call anbut0,setpos
	push $5
	call anbut0,setz
	push $6
	push 0
	call anbut0,setframe
	push "anbut0"
	pop simgob
	push simgob
	call grbut,add
	localstring $7
	push "anbut0"
	pop $7
	localstring $8
	push "null"
	pop $8
	localstring $9
	push "null"
	pop $9
	localint $10
	push $6
	call anbut0,nofframes
	pop $10
	push $10
	push 1
	cmpja
	cmp0
	je l737
	new anima,anbut1
	push "anbut0"
	call anbut1,copy
	push $6
	push 1
	call anbut1,setframe
	push "anbut1"
	pop $8
	push $8
	call grbut,add
l737:
	push $10
	push 2
	cmpja
	cmp0
	je l739
	new anima,anbut2
	push "anbut0"
	call anbut2,copy
	push $6
	push 2
	call anbut2,setframe
	push "anbut2"
	pop $8
	push $8
	call grbut,add
l739:
	push $7
	push $8
	push $9
	call but1,setan
	jmp l734
l735:
	new img,imgbut
	push "imgbut"
	pop simgob
	push simgob
	call grbut,add
	push $1
	call imgbut,load
	push $3
	push $4
	call imgbut,setpos
	push $5
	call imgbut,setz
	push "imgbut"
	push "null"
	push "null"
	call but1,set
l734:
	push $2
	call but1,setmouse
	end method
	method classsimplebutton0
	localstring $1
	pop $1
	new string,sbut
	push $1
	pop sbut
	end method
	method classsimplebutton1
	push sbut
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton2
	push sbut
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton3
	push sbut
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton4
	push sbut
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l740:
	push $4
	push $3
	cmpjl
	cmp0
	je l741
	jmp l743
l742:
	add $4,1
	pop $4
	jmp l740
l743:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l742
l741:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	cmpje
	cmp0
	je l745
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l744
l745:
	push $5
	spushs
	push $2
	spop $a
	call [$a],_cbuildbutname
l744:
	push $4
	cmp0
	je l747
	push $5
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	spushs
	spop $a
	call [$a],hide
l747:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l749
	push $1
	push "null"
	cmpje
	cmp0
	je l751
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l750
l751:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l750:
l749:
	end method
	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method _stdsndloop
	cthis play
	end method
	method __std_finish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	ret
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	ret
	end method
	method strgetto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l753
	cthis get
	jmp l752
l753:
	push 0
	push $2
	cthis getb
l752:
	end method
	method streq
	localstring $1
	pop $1
	cthis get
	push 0
	cthis length
	call $1,getb
	cmpje
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	ret
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	ret
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method strisbetween
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	localint $4
	push 0
	pop $4
l754:
	push $4
	cthis length
	cmpjl
	cmp0
	je l755
	jmp l757
l756:
	add $4,1
	pop $4
	jmp l754
l757:
	push $4
	cthis getbyte
	pop $3
	push $3
	push $1
	cmpjl
	cmp0
	jne l760
	push $3
	push $2
	cmpja
	jmp l761
l759:
	push 0
	jmp l761
l760:
	push 1
l761:
	cmp0
	je l762
	push 0
	ret
l762:
	jmp l756
l755:
	push 1
	end method
	method strisint
	push BYTE0
	push BYTE9
	cthis strisbetween
	end method
	method strisbin
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis strisbetween
	end method
	method strisalpha
	push BYTEa
	push BYTEz
	cthis strisbetween
	end method
	method streach
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l763:
	push $3
	cthis length
	cmpjl
	cmp0
	je l764
	jmp l766
l765:
	add $3,1
	pop $3
	jmp l763
l766:
	push $3
	push 1
	cthis getb
	pop $2
	push $2
	spushs
	push $1
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l765
l764:
	end method
	method strdotpos
	localint $1
	pop $1
	push "."
	cthis strgetto
	push "."
	pop $b
	popax
	add $a,$b
	push "."
	cthis strgetfrom
	spushs
	push 0
	push $1
	spop $h
	call $h,getb
	pop $b
	popax
	add $a,$b
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l768
	push 0
	jmp l767
l768:
	push 100
	spushs
	spop $h
	call $h,rand
	push $1
	cmpjle
l767:
	end method
	method between
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l770
	push $1
	jmp l769
l770:
	push $2
	push $3
	cmpja
	cmp0
	je l772
	push $3
	jmp l771
l772:
	push $2
l771:
l769:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l774
	push $1
	jmp l773
l774:
	push $2
l773:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l776
	push $1
	jmp l775
l776:
	push $2
l775:
	end method
	method imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push "1111"
	cthis imgborderss
	end method
	method imgborderss
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 3
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l778
	push "_img_bor"
	cthis blit
l778:
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push 1
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l780
	push "_img_bor"
	cthis blit
l780:
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 0
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l782
	push "_img_bor"
	cthis blit
l782:
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push 2
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l784
	push "_img_bor"
	cthis blit
l784:
	delete _img_bor
	end method
	method imgroundborder
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis imgborders
	cthis imgerasecorners
	end method
	method imgerasecorners
	localdef $1
	cthis getpx
	pop $1
	localdef $2
	cthis getpy
	pop $2
	push $1
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	push $1
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	end method
	method imgdrawline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "blit"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgeraseline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "erase"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgputoncenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method imgfuncline
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $9
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	pop $9
	localdef $10
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	pop $10
	localreal $11
	push $9
	push 0
	cmpje
	cmp0
	je l786
	push $10
	push 0
	cmpjl
	cmp0
	je l788
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l789:
	push $11
	push $6
	cmpjae
	cmp0
	je l790
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	sub $11,$a
	pop $11
	jmp l789
l790:
	push $6
	push $11
	pop $b
	popax
	sub $a,$b
	jmp l787
l788:
	push $10
	push 0
	cmpja
	cmp0
	je l792
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l793:
	push $11
	push $6
	cmpjle
	cmp0
	je l794
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $11,$a
	pop $11
	jmp l793
l794:
	push $11
	push $6
	pop $b
	popax
	sub $a,$b
	jmp l791
l792:
	push $8
l791:
l787:
	jmp l785
l786:
	push $9
	push $10
	call $8,length
	pop $11
	localreal $12
l795:
	push $8
	push $11
	cmpjle
	cmp0
	je l796
	push 1.0
	push $11
	push $8
	pop $b
	popax
	sub $a,$b
	push $11
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $12
	push $2
	spushs
	push $12
	push $9
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push $12
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $8,$a
	pop $8
	jmp l795
l796:
	push $8
	push $11
	pop $b
	popax
	sub $a,$b
l785:
	end method
	method anresizemets
	cthis getname
	clparent anima_pack,resizemethods
	end method
	method anfirstnontr
	cthis getname
	cthis getpx
	cthis getpy
	push 1
	push 0
	clparent classansearcher,_findnotr
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ancenterscreen
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis ansetcpos
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method ansetsframe
	localdef $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	cthis setframe
	localint $3
	push 0
	pop $3
l797:
	push $3
	push 1
	popax
	sub 0,$a
	cthis nofframes
	cmpjl
	cmp0
	je l798
	cthis framename
	push $2
	cmpjne
	jmp l800
l798:
	push 0
	jmp l800
l799:
	push 1
l800:
	cmp0
	je l801
	add $3,1
	pop $3
	push 1
	popax
	sub 0,$a
	push $3
	cthis setframe
	jmp l797
l801:
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	ret
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	end method
	method objplayloop
	cthis objloop
	cthis play
	end method
	method anplayfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method anposz
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	ret
	end method
	method annextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method ansetnextact
	cthis annextact
	push 0
	cthis setframe
	end method
	method ansetnextfr
	push 1
	popax
	sub 0,$a
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	cthis setframe
	end method
	method anhasaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	cthis nofactions
	cmpjne
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anaddfx
	cthis getname
	clparent AnimaFx,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method angetcpos
	cthis getcx
	cthis getcy
	ret
	end method
	method angetcrgba
	cthis getcx
	cthis getcy
	cthis getrgba
	end method
	method anisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l802:
	push $5
	cthis nofactions
	cmpjl
	cmp0
	je l803
	jmp l805
l804:
	add $5,1
	pop $5
	jmp l802
l805:
	push $5
	push 0
	cthis setframe
	push $1
	push $2
	push $3
	push $4
	cthis isin
	cmp0
	je l807
	push $5
	ret
l807:
	jmp l804
l803:
	push 1
	popax
	sub 0,$a
	end method
	method anreload
	localstring $1
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	localint $3
	cthis framenr
	pop $3
	localint $4
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpjne
	pop $4
	localint $5
	localint $6
	cthis getpos
	pop $6
	pop $5
	localint $7
	cthis getz
	pop $7
	push $1
	cthis getpath
	cthis load
	push $5
	push $6
	cthis setpos
	push $7
	cthis setz
	push $2
	cthis nofactions
	cmpjl
	cmp0
	je l809
	push $4
	cmp0
	je l811
	push $2
	cthis play
l811:
	push $2
	push $3
	cthis setframe
	jmp l808
l809:
	push 0
	push 0
	cthis setframe
l808:
	end method
	method anclipob
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	cthis clip
	end method
	method ancopyan
	localstring $1
	pop $1
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l813
	cthis show
	jmp l812
l813:
	cthis hide
l812:
	push $1
	spushs
	spop $a
	call [$a],getpos
	cthis setpos
	end method
	method anconstmove
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push A
	push "mvx"
	push $2
	push "mvy"
	push $3
	cthis vars2
	push $1
	cthis setdelay
	push 1
	popax
	sub 0,$a
	push "global3"
	cthis anplayfin
	end method
	method global3
	push 1
	popax
	sub 0,$a
	cthis play
	push mvx
	push mvy
	cthis move
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis set
	cthis create
	end method
	method txtsetcol
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push $2
	push $3
	push $4
	cthis createtxt
	end method
	method txtshadow
	localint $1
	localstring $2
	pop $2
	pop $1
	push "txts"
	cthis hasvar
	neg
	cmp0
	je l815
	new text,txts
	push $2
	call txts,setfont
l815:
	cthis get
	call txts,set
	cthis getpx
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $1
	pop $b
	popax
	add $a,$b
	call txts,setpos
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	call txts,setz
	call txts,show
	push 0
	push 0
	push 0
	call txts,createtxt
	end method
	method txthides
	cthis hide
	push "txts"
	cthis hasvar
	cmp0
	je l817
	call txts,hide
l817:
	end method
	method txtisin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l818
	push $1
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l818
	push $2
	cthis getpy
	cmpjae
	cmp0
	je l818
	push $2
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	cmpjle
	jmp l820
l818:
	push 0
	jmp l820
l819:
	push 1
l820:
	end method
	method txtcenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtright
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	cthis getw
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l822
	localint $2
	push 0
	pop $2
l823:
	push $2
	push $1
	cmpjl
	cmp0
	je l824
	jmp l826
l825:
	add $2,1
	pop $2
	jmp l823
l826:
	push $2
	cthis add
	jmp l825
l824:
l822:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l827:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l828
	jmp l830
l829:
	add $2,1
	pop $2
	jmp l827
l830:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l829
l828:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l832
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l832:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l834
	sub $2,1
	pop $2
	jmp l833
l834:
	push $2
	push 0
	cmpje
	cmp0
	je l836
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l836:
l833:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l837
	push $1
	cthis size
	cmpjl
	jmp l839
l837:
	push 0
	jmp l839
l838:
	push 1
l839:
	cmp0
	je l841
	push $1
	cthis get
	jmp l840
l841:
	push "null"
l840:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l843
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l842
l843:
	push "null"
l842:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l844:
	cthis size
	push $1
	cmpja
	cmp0
	je l845
	cthis vecpop
	popax
	jmp l844
l845:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	ret
	end method
	method vecreplace
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l847
	push $3
	push $2
	cthis set
l847:
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l849
	ret
l849:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l850:
	push $8
	push $1
	cmpjl
	cmp0
	je l851
	jmp l853
l852:
	add $8,1
	pop $8
	jmp l850
l853:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l854:
	push $9
	push $1
	cmpjl
	cmp0
	je l855
	jmp l857
l856:
	add $9,1
	pop $9
	jmp l854
l857:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l859
	push $6
	pop $5
	push $9
	pop $7
l859:
	jmp l856
l855:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l852
l851:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l860:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l861
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l860
l861:
	call $1,length
	push 0
	cmpja
	cmp0
	je l863
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l863:
	end method
	method obbuildfromstring2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l864:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l865
	push $4
	push 0
	cmpja
	cmp0
	je l867
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
l867:
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l864
l865:
	call $1,length
	push 0
	cmpja
	cmp0
	je l869
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l869:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecbuildfromstring2
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring2
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l870:
	push $2
	push $1
	cmpjl
	cmp0
	je l871
	jmp l873
l872:
	add $2,1
	pop $2
	jmp l870
l873:
	push 0
	cthis removeat
	jmp l872
l871:
	end method
	method vecremovefrom
	localint $1
	pop $1
l874:
	push $1
	cthis size
	cmpjl
	cmp0
	je l875
	push $1
	cthis removeat
	jmp l874
l875:
	end method
	method vecfindfrom
	localint $1
	localdef $2
	pop $2
	pop $1
l876:
	push $1
	cthis size
	cmpjl
	cmp0
	je l877
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l879
	push $1
	ret
	jmp l878
l879:
	add $1,1
	pop $1
l878:
	jmp l876
l877:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l882
	cthis size
	push 0
	cmpje
	jmp l883
l881:
	push 0
	jmp l883
l882:
	push 1
l883:
	cmp0
	je l884
	ret
l884:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l886
	localint $4
	push $1
	pop $4
l887:
	push $4
	push $2
	cmpja
	cmp0
	je l888
	jmp l890
l889:
	sub $4,1
	pop $4
	jmp l887
l890:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l889
l888:
	jmp l885
l886:
	push $1
	push $2
	cmpjl
	cmp0
	je l892
	localint $4
	push $1
	pop $4
l893:
	push $4
	push $2
	cmpjl
	cmp0
	je l894
	jmp l896
l895:
	add $4,1
	pop $4
	jmp l893
l896:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l895
l894:
l892:
l885:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l898
	push $2
	push 0
	cthis vecposfromto
	jmp l897
l898:
	push $1
	cthis addbegin
l897:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l900
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l899
l900:
	push $1
	cthis addbegin
l899:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l902
	push $3
	push $2
	cthis set
l902:
	end method
	method veceq
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjne
	cmp0
	je l904
	push 0
	ret
l904:
	localint $3
	push 0
	pop $3
l905:
	push $3
	push $2
	cmpjl
	cmp0
	je l906
	jmp l908
l907:
	add $3,1
	pop $3
	jmp l905
l908:
	push $3
	cthis get
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l910
	push 0
	ret
l910:
	jmp l907
l906:
	push 1
	end method
	method vecbuild
	push "addbegin"
	cthis withlist
	end method
	method veceq2
	new vector,___v
	cthis getvectype
	call ___v,type
	call ___v,vecbuild
	localint $1
	push "___v"
	cthis veceq
	pop $1
	delete ___v
	push $1
	end method
	method veccopydbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	cthis vecadddbrow
	end method
	method vecadddbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l911:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l912
	jmp l914
l913:
	add $3,1
	pop $3
	jmp l911
l914:
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l913
l912:
	end method
	method vecchecknext
	localint $1
	pop $1
	add $1,1
	pop $1
	push $1
	cthis size
	cmpjl
	cmp0
	je l916
	push $1
	cthis get
	jmp l915
l916:
	push "null"
l915:
	end method
	method vecsum
	cthis size
	cmp0
	je l918
	localdef $1
	push 0
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
l919:
	push $2
	cthis size
	cmpjl
	cmp0
	je l920
	jmp l922
l921:
	add $2,1
	pop $2
	jmp l919
l922:
	push $2
	cthis get
	popax
	add $1,$a
	pop $1
	jmp l921
l920:
	push $1
	jmp l917
l918:
	push 0
l917:
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l924
	ret
l924:
	sub $1,1
	pop $1
	cthis free
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l925:
	push $2
	push A
	cmpjne
	cmp0
	je l926
	jmp l928
l927:
	jmp l925
l928:
	push $4
	push 0
	cmpje
	cmp0
	je l930
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l930:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l932
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l931
l932:
	push 0
l931:
	pop $4
	jmp l927
l926:
	end method
	method dbbuild2
	cthis free
	localstring $1
	pop $1
l933:
	push $1
	push A
	cmpjne
	cmp0
	je l934
	push $1
	push "null"
	cmpje
	cmp0
	je l936
	cthis addbeginrow
	popax
	jmp l935
l936:
	push 0
	push $1
	cthis addbegin
l935:
	pop $1
	jmp l933
l934:
	end method
	method dbaddvec
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l937:
	push $3
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l938
	jmp l940
l939:
	add $3,1
	pop $3
	jmp l937
l940:
	push $2
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l939
l938:
	end method
	method dbcopy
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis dbcopyfromto
	end method
	method dbcopyrow
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis dbcopyfromto
	end method
	method dbcopyfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis free
	localint $4
	localint $5
	localint $6
	push $2
	pop $4
l941:
	push $4
	push $3
	cmpjl
	cmp0
	je l942
	jmp l944
l943:
	add $4,1
	pop $4
	jmp l941
l944:
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push 0
	pop $5
l945:
	push $5
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l946
	jmp l948
l947:
	add $5,1
	pop $5
	jmp l945
l948:
	push $6
	push $1
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	cthis add
	jmp l947
l946:
	jmp l943
l942:
	end method
	method dbadddbrowtorow
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l949:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l950
	jmp l952
l951:
	add $4,1
	pop $4
	jmp l949
l952:
	push $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	cthis add
	jmp l951
l950:
	end method
	method dbremovecol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l953:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l954
	jmp l956
l955:
	add $2,1
	pop $2
	jmp l953
l956:
	push $2
	cthis getcolsno
	push $1
	cmpja
	cmp0
	je l958
	push $2
	push $1
	cthis removeat
l958:
	jmp l955
l954:
	end method
	method dbcopyfromtos
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis dbcopyfromto
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l960
l961:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l962
	cthis dbremovelast
	jmp l961
l962:
	jmp l959
l960:
	cthis free
l959:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbgetstringrow
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push $1
	cthis getcolsno
	pop $3
	localint $4
	push 0
	pop $4
l963:
	push $4
	push $3
	cmpjl
	cmp0
	je l964
	jmp l966
l965:
	add $4,1
	pop $4
	jmp l963
l966:
	push $1
	push $4
	cthis get
	popax
	add $2,$a
	pop $2
	jmp l965
l964:
	push $2
	end method
	method dbaddrow
	localdef $1
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	pop $2
l967:
	push A
	push $2
	cmpjne
	cmp0
	je l968
	push $1
	push $2
	cthis addbegin
	localdef $2
	pop $2
	jmp l967
l968:
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l970
	push $3
	push 0
	cmpjae
	jmp l972
l970:
	push 0
	jmp l972
l971:
	push 1
l972:
	cmp0
	je l973
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l974:
	push $3
	push $5
	cmpjl
	cmp0
	je l975
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l974
l975:
l973:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l977
	push $1
	push $2
	cthis get
	jmp l976
l977:
	push "null"
l976:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis findbyrow
	push $2
	cthis get
	ret
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l978:
	push $2
	push 0
	cmpjae
	cmp0
	je l979
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l981
	push $2
	ret
l981:
	sub $2,1
	pop $2
	jmp l978
l979:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	ret
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l983
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l983:
	push 0
	ret
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l985
	localint $3
	push 0
	pop $3
l986:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l987
	jmp l989
l988:
	add $3,1
	pop $3
	jmp l986
l989:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l991
	push $3
	ret
l991:
	jmp l988
l987:
l985:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l992:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l993
	jmp l995
l994:
	add $3,1
	pop $3
	jmp l992
l995:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l997
	push $3
	ret
l997:
	jmp l994
l993:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	ret
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	ret
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	ret
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method dbsetall
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l998:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l999
	jmp l1001
l1000:
	add $2,1
	pop $2
	jmp l998
l1001:
	localdef $3
	push 0
	pop $3
l1002:
	push $3
	push $2
	cthis getcolsno
	cmpjl
	cmp0
	je l1003
	jmp l1005
l1004:
	add $3,1
	pop $3
	jmp l1002
l1005:
	push $2
	push $3
	push $1
	cthis set
	jmp l1004
l1003:
	jmp l1000
l999:
	end method
	method dbeach_row
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1006:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1007
	jmp l1009
l1008:
	add $2,1
	pop $2
	jmp l1006
l1009:
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	jmp l1008
l1007:
	end method
	method dbeq
	localstring $1
	pop $1
	cthis getrowsno
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjne
	cmp0
	je l1011
	push 0
	ret
l1011:
	localint $2
	localint $3
	localint $4
	push 0
	pop $4
l1012:
	push $4
	cthis getrowsno
	cmpjl
	cmp0
	je l1013
	jmp l1015
l1014:
	add $4,1
	pop $4
	jmp l1012
l1015:
	push $4
	cthis getcolsno
	pop $2
	push $2
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjne
	cmp0
	je l1017
	push 0
	ret
l1017:
	push 0
	pop $3
l1018:
	push $3
	push $2
	cmpjl
	cmp0
	je l1019
	jmp l1021
l1020:
	add $3,1
	pop $3
	jmp l1018
l1021:
	push $4
	push $3
	cthis get
	push $1
	spushs
	push $4
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1023
	push 0
	ret
l1023:
	jmp l1020
l1019:
	jmp l1014
l1013:
	push 1
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1025
	push 1
	popax
	sub 0,$a
	ret
l1025:
	localint $3
	call $1,rand
	pop $3
l1026:
	push $3
	push $2
	cmpje
	cmp0
	je l1027
	jmp l1029
l1028:
	call $1,rand
	pop $3
	jmp l1026
l1029:
	jmp l1028
l1027:
	push $3
	ret
	end method
	method bin_to_i
	localstring $1
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	call $1,length
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1030:
	push $4
	push 0
	cmpjae
	cmp0
	je l1031
	jmp l1033
l1032:
	sub $4,1
	pop $4
	jmp l1030
l1033:
	push $4
	push 1
	call $1,getb
	push "1"
	cmpje
	cmp0
	je l1035
	push $2
	popax
	add $3,$a
	pop $3
l1035:
	push 2
	popax
	mul $2,$a
	pop $2
	jmp l1032
l1031:
	push $3
	end method
	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push 800
	push 600
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class TicksCounter
	method init
	new int,istart
	end method
	method start
	call engine,getticks
	pop istart
	end method
	method stop
	call engine,getticks
	push istart
	pop $b
	popax
	sub $a,$b
	pop istart
	end method
	method get
	push istart
	ret
	end method
	method stopget
	cthis stop
	cthis get
	ret
	end method
	method print
	localstring $1
	pop $1
	push $1
	push " delay: "
	pop $b
	popax
	add $a,$b
	cthis stopget
	pop $b
	popax
	add $a,$b
	push " ms"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method put
	push ""
	cthis print
	end method
	end class

	class ObjController
	method init
	new string,_sme
	cthis getname
	pop _sme
	push GAME
	spushs
	push _sme
	spop $a
	call [$a],addgmobj
	end method
	method removefromgame
	push GAME
	spushs
	push _sme
	spop $a
	call [$a],removegmobj
	end method
	end class

	class LObjController
	parent ObjController
	parent classlocker
	method init
	clparent ObjController,init
	clparent classlocker,init
	end method
	end class

	class gmbankvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	push "iid"
	push 1
	popax
	sub 0,$a
	cthis var2
	end method
	method startrand
	cthis size
	push 0
	cmpja
	cmp0
	je l1037
	cthis size
	spushs
	spop $h
	call $h,rand
	pop iid
l1037:
	end method
	method play
	push 0
	cthis stop
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpje
	cmp0
	je l1039
	ret
l1039:
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	cthis get
	spushs
	spop $a
	call [$a],play
	end method
	method onfinish
	end method
	method stop
	localint $1
	pop $1
	cthis isplaying
	cmp0
	je l1041
	cthis getplay
	spushs
	push $1
	spop $a
	call [$a],stop
	push $1
	cmp0
	je l1043
	cthis onfinish
l1043:
l1041:
	end method
	method isplaying
	push iid
	push 0
	cmpjae
	cmp0
	je l1045
	cthis getplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l1044
l1045:
	push 0
l1044:
	end method
	method getplay
	push iid
	cthis get
	ret
	end method
	end class

	class GameController
	parent classlocker
	method init
	localstring $1
	pop $1
	clparent classlocker,init
	new gmobjvec,__grobj
	new db,_dbsnd
	push "|"
	call _dbsnd,setseparator
	new string,_sndbase
	push $1
	pop _sndbase
	new string,GAME
	cthis getname
	pop GAME
	new timer,__dblclick
	push 250
	call __dblclick,delay
	push 1
	call __dblclick,settick
	push "wavmp3"
	push "wav"
	cthis var2
	end method
	method game_exit
	end method
	method setsndbase
	localstring $1
	pop $1
	push $1
	pop _sndbase
	end method
	method say
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis sayf
	end method
	method sayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push $2
	cthis getsndtxt
	pop $4
	push $4
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	push $4
	push $3
	cthis cplayf
	end method
	method getsndtxt
	localstring $1
	pop $1
	localstring $2
	push "snd"
	push _sndbase
	pop $b
	popax
	add $a,$b
	call _dbsnd,getrowsno
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push $1
	cthis addsnd
	push $2
	ret
	end method
	method _sndtimerstart
	localint $1
	push 1
	cthis getname
	call _dbsnd,dbfindbycol
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1047
	push $1
	push 2
	call _dbsnd,get
	call engine,print
	jmp l1046
l1047:
	cthis getname
	push " not in _dbsnd"
	pop $b
	popax
	add $a,$b
	call engine,print
l1046:
	push ""
	call engine,print
	end method
	method addsndf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis addsnd
	push $3
	push "null"
	cmpjne
	cmp0
	je l1049
	push 0
	push 1
	call $1,getb
	spushs
	push ":"
	cmpst
	je l1052
	push "$"
	cmpst
	je l1052
	jmp l1051
l1052:
	spop $a
	push 1
	call $1,strsubb
	pop $1
	jmp l1050
l1051:
	spop $a
l1050:
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l1049:
	end method
	method asf
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push "end"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addsndff
	end method
	method addsndff
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis addsndf
	end method
	method gmconsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l1054
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	call subtitle,register
l1054:
	end method
	method getwavmp3
	push "."
	cthis wavmp3
	pop $b
	popax
	add $a,$b
	end method
	method addsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	call _dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	push 0
	push 1
	call $1,getb
	spushs
	push "$"
	cmpst
	jne l1056
	spop $a
	push 1
	call $1,strsubb
	pop $1
	push $1
	cthis getwavmp3
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1055
l1056:
	push ":"
	cmpst
	jne l1057
	spop $a
	push 1
	call $1,strsubb
	pop $1
	push _sndbase
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	cthis getwavmp3
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1055
l1057:
	spop $a
	push _sndbase
	push $3
	pop $b
	popax
	add $a,$b
	cthis getwavmp3
	pop $b
	popax
	add $a,$b
	pop $4
l1055:
	localstring $5
	call gameapi,getgamename
	pop $5
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l1059
	push $5
	spushs
	push $1
	push $4
	spop $a
	call [$a],gmconsnd
	jmp l1058
l1059:
	push $5
	spushs
	push $1
	call $2,length
	push 40
	pop $b
	popax
	mul $a,$b
	push 1
	spop $a
	call [$a],newtimer
	push $1
	spushs
	push "onstart"
	push "_sndtimerstart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstartstopflag"
	push "GameController0"
	spop $a
	call [$a],addmethod
l1058:
	push $3
	push $4
	call _dbsnd,add
	push $3
	push $1
	call _dbsnd,add
	push $3
	push $2
	call _dbsnd,add
	end method
	method GameController0
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method addbank
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	localstring $3
	pop $3
	localstring $4
l1060:
	push $3
	push A
	cmpjne
	cmp0
	je l1061
	push $3
	cthis getsndtxt
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],addbegin
	push $2
	push "null"
	cmpjne
	cmp0
	je l1063
	push $4
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
l1063:
	pop $3
	jmp l1060
l1061:
	end method
	method exportbank
	localstring $1
	pop $1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $e
	new db,[$e]
	call [$e],GameController1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method GameController1
	localdef $1
	pop $1
	push 1
	cthis dbbuild
	push "|"
	cthis setseparator
	push "GameController2"
	cthis dbeach_row
	push igmdebug
	cmp0
	je l1065
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis save
l1065:
	end method
	method GameController2
	localdef $1
	pop $1
	localdef $2
	cthis getname
	spushs
	push "__db"
	spop $h
	call $h,strsubbs
	pop $2
	push $1
	push "snd"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis addbegin
	push $1
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis addbegin
	end method
	method importbank
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	push $2
	push $3
	push "null"
	push $1
	cthis importgroupto
	end method
	method exportsnd
	localstring $1
	pop $1
	push igmdebug
	cmp0
	je l1067
	push $1
	call _dbsnd,save
l1067:
	end method
	method stdexportsnd
	push "exports/"
	push _sndbase
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis exportsnd
	end method
	method sounds=
	cthis buildsnds
	end method
	method sounds_from
	localstring $1
	pop $1
	new db,__tmpdb
	localdef $2
	push _sndbase
	pop $2
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localdef $3
	pop $3
	localint $4
	localstring $5
l1068:
	push A
	push $3
	cmpjne
	cmp0
	je l1069
	localdef $6
	pop $6
	push 1
	push $6
	call __tmpdb,dbfindbycol
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1071
	cthis getsndpath
	push $4
	push 0
	call __tmpdb,get
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	cmp0
	je l1073
	push GAME
	spushs
	push $6
	push $4
	push 0
	call __tmpdb,get
	spop $a
	call [$a],gmconsnd
	push $6
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	jmp l1072
l1073:
	push $6
	push $4
	push 1
	call __tmpdb,get
	push $3
	cthis addsndf
l1072:
l1071:
	localdef $3
	pop $3
	jmp l1068
l1069:
	call _dbsnd,free
	delete __tmpdb
	push $2
	cthis setsndbase
	end method
	method buildsnds
	call _dbsnd,free
	new db,__dbsnd
	push 3
	call __dbsnd,dbbuild
	push "__dbsnd"
	cthis buildfromdb
	delete __dbsnd
	end method
	method buildfromdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1074:
	push $2
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1075
	jmp l1077
l1076:
	add $2,1
	pop $2
	jmp l1074
l1077:
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 2
	spop $a
	call [$a],get
	cthis addsndf
	jmp l1076
l1075:
	cthis stdexportsnd
	end method
	method importsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis importgroup
	end method
	method importgroup
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis importgroupto
	end method
	method importgroupto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	new db,__tmpdb
	localdef $5
	push _sndbase
	pop $5
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localstring $6
	localint $7
	push 0
	pop $7
l1078:
	push $7
	call __tmpdb,getrowsno
	cmpjl
	cmp0
	je l1079
	jmp l1081
l1080:
	add $7,1
	pop $7
	jmp l1078
l1081:
	push $7
	push 1
	call __tmpdb,get
	pop $6
	push $3
	push "null"
	cmpje
	cmp0
	jne l1084
	push $3
	spushs
	push $6
	spop $a
	call [$a],contains
	jmp l1085
l1083:
	push 0
	jmp l1085
l1084:
	push 1
l1085:
	cmp0
	je l1086
	push $6
	push $7
	push 2
	call __tmpdb,get
	push $2
	cthis addsndf
	push $4
	push "null"
	cmpjne
	cmp0
	je l1088
	push $4
	spushs
	push $6
	spop $a
	call [$a],add
l1088:
l1086:
	jmp l1080
l1079:
	call _dbsnd,free
	call __tmpdb,free
	delete __tmpdb
	push $5
	cthis setsndbase
	end method
	method freesnd
	call _dbsnd,free
	end method
	method addgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,add
	end method
	method removegmobj
	localstring $1
	pop $1
	push $1
	call __grobj,remove
	end method
	method isgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,contains
	end method
	method deletegmobj
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1090
	push $1
	cthis removegmobj
	push $1
	spushs
	spop $d
	delete [$d]
l1090:
	end method
	method lockall
	push "lock"
	call __grobj,eval
	cthis lock
	end method
	method unlockall
	push "unlock"
	call __grobj,eval
	cthis unlock
	end method
	method gmunlockall
	push GAME
	spushs
	spop $a
	call [$a],unlockall
	end method
	method gmlockall
	push GAME
	spushs
	spop $a
	call [$a],lockall
	end method
	method lock=
	localint $1
	pop $1
	push $1
	cmp0
	je l1092
	cthis gmlockall
	jmp l1091
l1092:
	cthis gmunlockall
l1091:
	end method
	method mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	call __dblclick,isplaying
	cmp0
	je l1094
	cthis mouse_dblclick
	jmp l1093
l1094:
	call __dblclick,play
l1093:
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	method mouserrel
	push "onmouserrel"
	call __grobj,eval
	cthis mouse_rrel
	end method
	method keydown
	push "onkeydown"
	call __grobj,eval
	cthis key_down
	end method
	end class

	class classadv
	parent classgame
	method init
	clparent classgame,init
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new path,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbutton,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	end class

	class classquest
	method init
	new vector,vqst
	push "string"
	call vqst,type
	end method
	method isdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	ret
	end method
	method notdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	ret
	end method
	method done
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	cmp0
	je l1096
	push $1
	call vqst,add
l1096:
	end method
	method reset
	call vqst,free
	end method
	method save
	localstring $1
	pop $1
	push $1
	call vqst,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call vqst,load
	end method
	end class

	new classquest,clqs
	method winsave
	localstring $1
	pop $1
	new db,_db_win
	push "output.db"
	call _db_win,load
	localdef $2
	call _db_win,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	call _db_win,add
	push "output.db"
	call _db_win,save
	delete _db_win
	end method
	method getwinpath
	localstring $1
	pop $1
	localstring $2
	push "appdata"
	call engine,getspecialpath
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l1098
	push $2
	push "\/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	jmp l1097
l1098:
	push $1
l1097:
	end method
	method saveexist
	localstring $1
	pop $1
	push igmwinlocal
	cmp0
	je l1100
	push $1
	cthis getwinpath
	call engine,fileexist
	jmp l1099
l1100:
	push $1
	call engine,fileexist
l1099:
	end method
	method vecsave
	localstring $1
	pop $1
	push igmwinlocal
	cmp0
	je l1102
	push $1
	cthis getwinpath
	cthis save
	jmp l1101
l1102:
	push $1
	cthis save
l1101:
	end method
	method vecload
	localstring $1
	pop $1
	push $1
	cthis saveexist
	cmp0
	je l1104
	push igmwinlocal
	cmp0
	je l1106
	push $1
	cthis getwinpath
	cthis load
	jmp l1105
l1106:
	push $1
	cthis load
l1105:
l1104:
	end method
	class classfullsave
	method init
	localstring $1
	pop $1
	new db,dbsav
	new string,sstdfile
	push $1
	cthis setfile
	end method
	method save
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1108
	ret
	jmp l1107
l1108:
	push $1
	call engine,fileexist
	neg
	cmp0
	je l1110
	ret
l1110:
l1107:
	push igmwinlocal
	cmp0
	je l1112
	push $1
	cthis getwinpath
	call dbsav,save
	jmp l1111
l1112:
	push $1
	call dbsav,save
l1111:
	end method
	method _load
	localstring $1
	pop $1
	push $1
	call engine,fileexist
	cmp0
	je l1114
	call dbsav,free
	push $1
	call dbsav,load
l1114:
	end method
	method load
	localstring $1
	pop $1
	push igmwinlocal
	cmp0
	je l1116
	push $1
	cthis getwinpath
	cthis _load
	jmp l1115
l1116:
	push $1
	cthis _load
l1115:
	end method
	method print
	call dbsav,print
	end method
	method setfile
	localstring $1
	pop $1
	push $1
	pop sstdfile
	end method
	method stdload
	push sstdfile
	cthis load
	end method
	method stdsave
	push sstdfile
	cthis save
	end method
	method free
	call dbsav,free
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1118
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l1117
l1118:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l1117:
	cthis stdsave
	end method
	method bset
	localstring $1
	pop $1
	push $1
	push 1
	cthis set
	end method
	method get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1120
	push $2
	push 1
	call dbsav,get
	jmp l1119
l1120:
	push "null"
l1119:
	ret
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1122
	push $3
	push 1
	call dbsav,get
	push $2
	cmpje
	jmp l1121
l1122:
	push 0
l1121:
	ret
	end method
	method bis
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1124
	push $2
	push 1
	call dbsav,get
	push 0
	cmpjne
	jmp l1123
l1124:
	push 0
l1123:
	ret
	end method
	end class

	class StringChecker
	method init
	end method
	method isdigit
	localstring $1
	pop $1
	call $1,to_i
	push 0
	cmpjne
	cmp0
	jne l1126
	push 0
	push 1
	call $1,getb
	push "0"
	cmpje
	jmp l1127
l1125:
	push 0
	jmp l1127
l1126:
	push 1
l1127:
	ret
	end method
	method getint
	localstring $1
	pop $1
	call $1,to_i
	ret
	end method
	method getreal
	localstring $1
	pop $1
	call $1,to_r
	ret
	end method
	method isreal
	localstring $1
	pop $1
	push $1
	cthis isdigit
	cmp0
	je l1128
	push "."
	call $1,contains
	jmp l1130
l1128:
	push 0
	jmp l1130
l1129:
	push 1
l1130:
	ret
	end method
	method isstring
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "\""
	cmpje
	ret
	end method
	method getstring
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	ret
	end method
	end class

	class Script
	method init
	localstring $1
	pop $1
	new db,__dbcode
	new string,__sdb
	new int,__irow
	new int,__icol
	new string,__sreads
	new vector,__vec
	push "string"
	call __vec,type
	new string,__sarg
	new int,__iarg
	new real,__rarg
	new StringChecker,__csc
	push "int"
	new map2,__mp
	localint $2
	push 0
	pop $2
l1131:
	push $2
	push 10
	cmpjl
	cmp0
	je l1132
	jmp l1134
l1133:
	add $2,1
	pop $2
	jmp l1131
l1134:
	push "ARG"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	jmp l1133
l1132:
	push $1
	cthis load
	end method
	method ARG=
	localint $1
	localstring $2
	pop $2
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method ARG
	localint $1
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	end method
	method load
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1136
	ret
l1136:
	push "."
	call $1,contains
	cmp0
	je l1138
	push "__dbcode"
	pop __sdb
	push $1
	call __dbcode,loadbeh
	jmp l1137
l1138:
	push $1
	pop __sdb
l1137:
	call __mp,free
	localint $2
	push 0
	pop $2
l1139:
	push $2
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1140
	jmp l1142
l1141:
	add $2,1
	pop $2
	jmp l1139
l1142:
	push __sdb
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push "func"
	cmpje
	cmp0
	je l1144
	push __sdb
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $2
	call __mp,add
l1144:
	jmp l1141
l1140:
	push "init"
	cthis call
	end method
	method get
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method isvar
	localstring $1
	pop $1
	push "$"
	call $1,contains
	ret
	end method
	method getvar
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	neg
	cmp0
	je l1146
	push $1
	spushs
	spop $e
	new def,[$e]
l1146:
	push $1
	ret
	end method
	method isfunc
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l1147
	push $1
	call __csc,isreal
	neg
	jmp l1149
l1147:
	push 0
	jmp l1149
l1148:
	push 1
l1149:
	ret
	end method
	method getfunc
	localstring $1
	pop $1
	call __vec,free
	push "."
	call $1,strgetto
	call __vec,add
	push "."
	call $1,strgetfrom
	call __vec,add
	end method
	method _get
	add __icol,1
	pop __icol
	push __sdb
	spushs
	push __irow
	push __icol
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	ret
	end method
	method isnext
	push __icol
	push __sdb
	spushs
	push __irow
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1151
	push __sdb
	spushs
	push __irow
	push __icol
	spop $a
	call [$a],get
	pop __sreads
	push 1
	ret
l1151:
	push 0
	ret
	end method
	method perror
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cmp0
	je l1153
	push "error: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
l1153:
	end method
	method interpcall
	localstring $1
	pop $1
	push $1
	cthis getfunc
	localstring $2
	push 0
	call __vec,get
	pop $2
	push 0
	push 1
	call $2,getb
	push "*"
	cmpje
	cmp0
	je l1155
	push 1
	call $2,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1155:
	localstring $3
	push 1
	call __vec,get
	pop $3
	push 0
	push 1
	call $3,getb
	push "*"
	cmpje
	cmp0
	je l1157
	push 1
	call $3,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1157:
	call __vec,free
	add __icol,1
	pop __icol
	localstring $4
	cthis _get
	pop $4
l1158:
	push $4
	push ")"
	cmpjne
	cmp0
	je l1159
	push $4
	cthis getexpr
	cthis _get
	pop $4
	jmp l1158
l1159:
	push $2
	push "this"
	cmpje
	cmp0
	je l1161
	push "null"
	pop $2
l1161:
	push $2
	push $3
	cthis callfun
	end method
	method getvname
	localstring $1
	pop $1
	push $1
	cthis isvar
	cmp0
	je l1163
	push $1
	cthis getvar
	pop $1
	jmp l1162
l1163:
	push $1
	call __csc,isdigit
	cmp0
	je l1165
	push $1
	pop __iarg
	push "__iarg"
	pop $1
	jmp l1164
l1165:
	push $1
	call __csc,isstring
	cmp0
	je l1167
	push $1
	call __csc,getstring
	pop __sarg
	push "__sarg"
	pop $1
	jmp l1166
l1167:
	push $1
	call __csc,isreal
	cmp0
	je l1169
	call $1,to_r
	pop __rarg
	push "__rarg"
	pop $1
l1169:
l1166:
l1164:
l1162:
	push $1
	ret
	end method
	method isscriptfun
	localstring $1
	pop $1
	push "->"
	call $1,contains
	ret
	end method
	method getscriptfun
	localstring $1
	pop $1
	push 2
	call $1,strsubb
	ret
	end method
	method getexpr
	localstring $1
	pop $1
	push $1
	call __csc,isstring
	cmp0
	je l1171
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
	jmp l1170
l1171:
	push $1
	cthis isfunc
	cmp0
	je l1173
	push $1
	cthis interpcall
	jmp l1172
l1173:
	push $1
	cthis isscriptfun
	cmp0
	je l1175
	localint $2
	push __irow
	pop $2
	localint $3
	push __icol
	pop $3
	push $1
	cthis getscriptfun
	cthis call
	push $2
	pop __irow
	push $3
	pop __icol
	jmp l1174
l1175:
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
l1174:
l1172:
l1170:
	end method
	method cmp
	localint $1
	push 0
	pop $1
	localdef $2
	cthis _get
	cthis getexpr
	pop $2
	localstring $3
	cthis _get
	pop $3
	localdef $4
	cthis _get
	cthis getexpr
	pop $4
	push $3
	spushs
	push "=="
	cmpst
	jne l1177
	spop $a
	push $2
	push $4
	cmpje
	pop $1
	jmp l1176
l1177:
	push "!="
	cmpst
	jne l1178
	spop $a
	push $2
	push $4
	cmpjne
	pop $1
	jmp l1176
l1178:
	push "<"
	cmpst
	jne l1179
	spop $a
	push $2
	push $4
	cmpjl
	pop $1
	jmp l1176
l1179:
	push ">"
	cmpst
	jne l1180
	spop $a
	push $2
	push $4
	cmpja
	pop $1
	jmp l1176
l1180:
	push "<="
	cmpst
	jne l1181
	spop $a
	push $2
	push $4
	cmpjle
	pop $1
	jmp l1176
l1181:
	push ">="
	cmpst
	jne l1182
	spop $a
	push $2
	push $4
	cmpjae
	pop $1
	jmp l1176
l1182:
	spop $a
l1176:
	cthis _get
	pop $3
	push $3
	push "||"
	cmpje
	cmp0
	je l1184
	push $1
	cmp0
	jne l1186
	cthis cmp
	jmp l1187
l1185:
	push 0
	jmp l1187
l1186:
	push 1
l1187:
	ret
	jmp l1183
l1184:
	push $3
	push "&&"
	cmpje
	cmp0
	je l1189
	push $1
	cmp0
	je l1190
	cthis cmp
	jmp l1192
l1190:
	push 0
	jmp l1192
l1191:
	push 1
l1192:
	ret
	jmp l1188
l1189:
	push $1
	ret
l1188:
l1183:
	end method
	method containsfun
	localstring $1
	pop $1
	push $1
	call __mp,contains
	end method
	method call
	localstring $1
	pop $1
	push $1
	call __mp,contains
	neg
	cmp0
	je l1194
	ret
l1194:
	push $1
	call __mp,get
	pop __irow
	add __irow,1
	pop __irow
	push 0
	pop __icol
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	localint $12
	localint $13
l1195:
	push $2
	cmp0
	je l1196
	push 0
	pop __icol
	cthis _get
	pop $8
	push $8
	spushs
	push "new"
	cmpst
	jne l1198
	spop $a
	cthis _get
	pop $8
	cthis _get
	pop $9
	push 1
	call $9,strsubb
	pop $9
	cthis isnext
	cmp0
	je l1200
	push __sreads
	push "["
	cmpje
	cmp0
	je l1202
	add __icol,1
	pop __icol
	cthis _get
	pop $11
	push 0
	pop $12
l1203:
	push $12
	push $11
	cmpjl
	cmp0
	je l1204
	jmp l1206
l1205:
	add $12,1
	pop $12
	jmp l1203
l1206:
	push $8
	spushs
	push $9
	push $12
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	jmp l1205
l1204:
	jmp l1201
l1202:
	add __icol,1
	pop __icol
l1207:
	cthis isnext
	cmp0
	je l1208
	push __sreads
	push ")"
	cmpjne
	jmp l1210
l1208:
	push 0
	jmp l1210
l1209:
	push 1
l1210:
	cmp0
	je l1211
	cthis _get
	cthis getexpr
	jmp l1207
l1211:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1201:
	jmp l1199
l1200:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1199:
	add __irow,1
	pop __irow
	jmp l1197
l1198:
	push "delete"
	cmpst
	jne l1212
	spop $a
	cthis _get
	cthis getvar
	spushs
	spop $d
	delete [$d]
	add __irow,1
	pop __irow
	jmp l1197
l1212:
	push $8
	push "if"
	cmpje
	cmp0
	jne l1214
	push $6
	cmp0
	jne l1214
	push $5
	jmp l1215
l1213:
	push 0
	jmp l1215
l1214:
	push 1
l1215:
	cmp0
	je l1217
	push $8
	jmp l1216
l1217:
	push ""
l1216:
	cmpst
	jne l1218
	spop $a
	add __icol,1
	pop __icol
	cthis cmp
	pop $4
	push $8
	push "if"
	cmpje
	cmp0
	je l1220
	push 1
	pop $3
l1220:
	push 0
	pop $6
	push 0
	pop $5
	add __irow,1
	pop __irow
	push $4
	neg
	cmp0
	je l1222
	push 1
	pop $12
l1223:
	push $12
	cmp0
	je l1224
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	pop $8
	push $8
	push "else"
	cmpje
	cmp0
	jne l1227
	push $8
	push "elif"
	cmpje
	cmp0
	jne l1227
	push $8
	push "fi"
	cmpje
	cmp0
	jne l1227
	push $8
	push "done"
	cmpje
	jmp l1228
l1226:
	push 0
	jmp l1228
l1227:
	push 1
l1228:
	cmp0
	je l1229
	push 0
	pop $12
	jmp l1225
l1229:
	add __irow,1
	pop __irow
l1225:
	jmp l1223
l1224:
l1222:
	jmp l1197
l1218:
	push "else"
	cmpst
	jne l1230
	spop $a
	push $3
	neg
	push "else without if"
	cthis perror
	add __irow,1
	pop __irow
	push $4
	cmp0
	je l1232
l1233:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1234
	add __irow,1
	pop __irow
	jmp l1233
l1234:
l1232:
	jmp l1197
l1230:
	push "fi"
	cmpst
	jne l1235
	spop $a
	push $3
	neg
	push "fi without if"
	cthis perror
	push 0
	pop $3
	push 0
	pop $4
	push 0
	pop $6
	add __irow,1
	pop __irow
	jmp l1197
l1235:
	push "elif"
	cmpst
	jne l1236
	spop $a
	push $4
	cmp0
	je l1238
	add __irow,1
	pop __irow
l1239:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1240
	add __irow,1
	pop __irow
	jmp l1239
l1240:
	jmp l1237
l1238:
	push 1
	pop $6
l1237:
	jmp l1197
l1236:
	push "end"
	cmpst
	jne l1241
	spop $a
	push 0
	pop $2
	jmp l1197
l1241:
	push "while"
	cmpst
	jne l1242
	spop $a
	push __irow
	pop $7
	push 1
	pop $5
	jmp l1197
l1242:
	push "done"
	cmpst
	jne l1243
	spop $a
	push $4
	cmp0
	je l1245
	push $7
	pop __irow
	jmp l1244
l1245:
	add __irow,1
	pop __irow
l1244:
	jmp l1197
l1243:
	push "print"
	cmpst
	jne l1246
	spop $a
	push ""
	pop $8
l1247:
	cthis isnext
	cmp0
	je l1248
	cthis _get
	cthis getexpr
	popax
	add $8,$a
	pop $8
	jmp l1247
l1248:
	push $8
	call engine,print
	add __irow,1
	pop __irow
	jmp l1197
l1246:
	push "return"
	cmpst
	jne l1249
	spop $a
	cthis isnext
	cmp0
	je l1251
	push __sreads
	cthis getexpr
l1251:
	ret
	jmp l1197
l1249:
	spop $a
	push "$"
	call $8,contains
	cmp0
	je l1253
	push $8
	cthis getvar
	pop $8
	add __icol,1
	pop __icol
	push $8
	spushs
	cthis _get
	cthis getexpr
	spop $b
	popax
	mov [$b],$a
l1254:
	cthis isnext
	cmp0
	je l1255
	add __icol,1
	pop __icol
	localdef $14
	cthis _get
	cthis getexpr
	pop $14
	push __sreads
	spushs
	push "+"
	cmpst
	jne l1257
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	add [$b],$a
	pop [$b]
	jmp l1256
l1257:
	push "-"
	cmpst
	jne l1258
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	sub [$b],$a
	pop [$b]
	jmp l1256
l1258:
	push "*"
	cmpst
	jne l1259
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	mul [$b],$a
	pop [$b]
	jmp l1256
l1259:
	push "/"
	cmpst
	jne l1260
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$a
	jmp l1256
l1260:
	push "%"
	cmpst
	jne l1261
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$d
	jmp l1256
l1261:
	spop $a
l1256:
	jmp l1254
l1255:
	jmp l1252
l1253:
	push $8
	cthis getexpr
l1252:
	add __irow,1
	pop __irow
l1197:
	push __irow
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1263
	push 1
	push "function "
	push $1
	pop $b
	popax
	add $a,$b
	push " not finished!"
	pop $b
	popax
	add $a,$b
	cthis perror
	push 0
	pop $2
l1263:
	jmp l1195
l1196:
	end method
	end class

	method transparent
	push 0
	push 0
	push 0
	push 0
	ret
	end method
	method red
	push 255
	push 0
	push 0
	ret
	end method
	method green
	push 0
	push 255
	push 0
	ret
	end method
	method blue
	push 0
	push 0
	push 255
	ret
	end method
	method white
	push 255
	push 255
	push 255
	ret
	end method
	method black
	push 0
	push 0
	push 0
	ret
	end method
	method grey
	localint $1
	pop $1
	push $1
	push $1
	push $1
	ret
	end method
	method yellow
	push 255
	push 255
	push 0
	ret
	end method
	class Color
	method init
	push A
	push "r"
	push "g"
	push "b"
	push "a"
	cthis vars
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],get
	cthis set
	end method
	method img=
	localdef $1
	pop $1
	push $1
	spushs
	push $1
	clparent classansearcher,firstnotrx1y
	spop $a
	call [$a],getrgba
	pop a
	pop b
	pop g
	pop r
	end method
	method get
	push r
	push g
	push b
	push a
	ret
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop a
	pop b
	pop g
	pop r
	end method
	method rgb=
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	pop b
	pop g
	pop r
	end method
	method rgb
	push r
	push g
	push b
	ret
	end method
	method print
	push "Color::"
	cthis getname
	pop $b
	popax
	add $a,$b
	push " (r,g,b,a) = ("
	pop $b
	popax
	add $a,$b
	push r
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push g
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push a
	pop $b
	popax
	add $a,$b
	push ")"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	end class

	class classasker
	parent newvars
	method init
	clparent newvars,init
	new string,sfuncyes
	push "null"
	pop sfuncyes
	new string,sfuncno
	push "null"
	pop sfuncno
	new string,ssndask
	new string,ssndyes
	new string,ssndno
	new classsound,clsnd
	end method
	method reset
	push "null"
	pop sfuncyes
	push "null"
	pop sfuncno
	call buts,resetall
	end method
	method setfuncs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sfuncyes
	push $2
	pop sfuncno
	end method
	method fxonmovon
	localstring $1
	pop $1
	push $1
	call buts,sfxonmovon
	end method
	method setmouse
	localstring $1
	pop $1
	push "yes"
	push $1
	call buts,newmouse
	push "no"
	push $1
	call buts,newmouse
	end method
	method load
	localstring $1
	localint $2
	pop $2
	pop $1
	new classbutton,buts
	push $1
	push $2
	push "null"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call buts,disableall
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push $5
	cthis setfuncs
	push $1
	push $2
	push $3
	cthis ask2
	end method
	method ask2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	pop ssndask
	push $2
	pop ssndyes
	push $3
	pop ssndno
	call gameapi,pause
	call buts,benableall
	push "bkg"
	call buts,pause
	call clsnd,creset
	push $1
	call clsnd,cbplay
	cthis getname
	push "_ask"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovon
	localstring $1
	pop $1
	push $1
	push "yes"
	cmpje
	cmp0
	je l1265
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndyes
	call clsnd,cbplay
	jmp l1264
l1265:
	push $1
	push "no"
	cmpje
	cmp0
	je l1267
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndno
	call clsnd,cbplay
l1267:
l1264:
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "bkg"
	cmpje
	cmp0
	je l1269
	ret
l1269:
	call gameapi,resume
	call buts,disableall
	push 0
	call clsnd,cactsndstop
	push $1
	push "yes"
	cmpje
	cmp0
	je l1271
	push sfuncyes
	push "null"
	cmpjne
	jmp l1273
l1271:
	push 0
	jmp l1273
l1272:
	push 1
l1273:
	cmp0
	je l1274
	push sfuncyes
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_yes"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l1270
l1274:
	push $1
	push "no"
	cmpje
	cmp0
	je l1276
	push sfuncno
	push "null"
	cmpjne
	jmp l1278
l1276:
	push 0
	jmp l1278
l1277:
	push 1
l1278:
	cmp0
	je l1279
	push sfuncno
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_no"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1279:
l1270:
	end method
	method disabled
	call buts,disabled
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	end class

	class classplacepointer
	method init
	new anima,anpointer
	push "onfinish"
	push "classplacepointer0"
	call anpointer,addmethod
	new int,_iz
	push 1000
	pop _iz
	end method
	method classplacepointer0
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anpointer,load
	push _iz
	cthis setz
	call anpointer,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push $1
	call anpointer,setz
	end method
	method stop
	push 0
	call anpointer,stop
	end method
	method stoph
	push 0
	call anpointer,stop
	call anpointer,hide
	end method
	method show
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,setpos
	push $3
	call anpointer,play
	end method
	method move
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,move
	end method
	method showob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	cthis show
	end method
	method showpob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	cthis show
	end method
	end class

	class SimpleCounter
	method init
	localint $1
	pop $1
	push "length"
	push $1
	cthis var2
	new int,iid
	push 0
	pop iid
	end method
	method next
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push length
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	end method
	method set
	localint $1
	pop $1
	push $1
	pop iid
	end method
	method reset
	push 0
	pop iid
	end method
	method get
	push iid
	end method
	end class

	module clstrdigit
	method init
	end method
	method getdigit
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	pop $3
l1280:
	call $3,length
	push $2
	cmpjl
	cmp0
	je l1281
	push "0"
	push $3
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1280
l1281:
	push $3
	ret
	end method
	method gettime
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis geth
	push $1
	cthis getm
	push $1
	cthis gets
	push "h"
	call $2,contains
	push "m"
	call $2,contains
	push "s"
	call $2,contains
	cthis getstime
	ret
	end method
	method getstime
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $7
	push ""
	pop $7
	push $4
	cmp0
	je l1283
	push $1
	popax
	add $7,$a
	pop $7
l1283:
	push $5
	cmp0
	je l1285
	push $4
	cmp0
	je l1287
	push ":"
	jmp l1286
l1287:
	push ""
l1286:
	push $2
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1285:
	push $6
	cmp0
	je l1289
	push $4
	cmp0
	jne l1291
	push $5
	jmp l1292
l1290:
	push 0
	jmp l1292
l1291:
	push 1
l1292:
	cmp0
	je l1294
	push ":"
	jmp l1293
l1294:
	push ""
l1293:
	push $3
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1289:
	push $7
	ret
	end method
	method geth
	localint $1
	pop $1
	push $1
	push 3600
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method getm
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	psax
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method gets
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method getns
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis gets
	push $2
	cthis getdigit
	ret
	end method
	method getnm
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getm
	push $2
	cthis getdigit
	ret
	end method
	method getbinary
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l1295:
	push $1
	push 0
	cmpja
	cmp0
	je l1296
	push ""
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	push 2
	popax
	div $1,$a
	mov $1,$a
	jmp l1295
l1296:
	push $2
	ret
	end method
	method bintohex
	localstring $1
	pop $1
	localstring $2
	call $1,length
	push 4
	pop $b
	popax
	div $a,$b
	push $d
	spushs
	push 3
	cmpst
	jne l1298
	spop $a
	push "0"
	jmp l1297
l1298:
	push 2
	cmpst
	jne l1299
	spop $a
	push "00"
	jmp l1297
l1299:
	push 1
	cmpst
	jne l1300
	spop $a
	push "000"
	jmp l1297
l1300:
	spop $a
	push ""
l1297:
	pop $2
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1301:
	push $3
	call $1,length
	cmpjl
	cmp0
	je l1302
	jmp l1304
l1303:
	push 4
	popax
	add $3,$a
	pop $3
	jmp l1301
l1304:
	push $3
	push 4
	call $1,getb
	spushs
	push "0000"
	cmpst
	jne l1306
	spop $a
	push "0"
	jmp l1305
l1306:
	push "0001"
	cmpst
	jne l1307
	spop $a
	push "1"
	jmp l1305
l1307:
	push "0010"
	cmpst
	jne l1308
	spop $a
	push "2"
	jmp l1305
l1308:
	push "0011"
	cmpst
	jne l1309
	spop $a
	push "3"
	jmp l1305
l1309:
	push "0100"
	cmpst
	jne l1310
	spop $a
	push "4"
	jmp l1305
l1310:
	push "0101"
	cmpst
	jne l1311
	spop $a
	push "5"
	jmp l1305
l1311:
	push "0110"
	cmpst
	jne l1312
	spop $a
	push "6"
	jmp l1305
l1312:
	push "0111"
	cmpst
	jne l1313
	spop $a
	push "7"
	jmp l1305
l1313:
	push "1000"
	cmpst
	jne l1314
	spop $a
	push "8"
	jmp l1305
l1314:
	push "1001"
	cmpst
	jne l1315
	spop $a
	push "9"
	jmp l1305
l1315:
	push "1010"
	cmpst
	jne l1316
	spop $a
	push "A"
	jmp l1305
l1316:
	push "1011"
	cmpst
	jne l1317
	spop $a
	push "B"
	jmp l1305
l1317:
	push "1100"
	cmpst
	jne l1318
	spop $a
	push "C"
	jmp l1305
l1318:
	push "1101"
	cmpst
	jne l1319
	spop $a
	push "D"
	jmp l1305
l1319:
	push "1110"
	cmpst
	jne l1320
	spop $a
	push "E"
	jmp l1305
l1320:
	push "1111"
	cmpst
	jne l1321
	spop $a
	push "F"
	jmp l1305
l1321:
	spop $a
l1305:
	popax
	add $2,$a
	pop $2
	jmp l1303
l1302:
	push $2
	end method
	end module

	method getbinary
	cthis get
	clparent clstrdigit,getbinary
	end method
	method getdigit
	localint $1
	pop $1
	cthis get
	push $1
	clparent clstrdigit,getdigit
	end method
	method getbindigit
	localint $1
	pop $1
	cthis getbinary
	push $1
	clparent clstrdigit,getdigit
	end method
	class Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1323
	push sgmfontfile
	pop $1
l1323:
	push ".ttf"
	call $1,contains
	cmp0
	je l1325
	new font,_fnt
	push $1
	push $2
	call _fnt,load
	push "_fnt"
	pop $1
l1325:
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new int,iFontSize
	push $2
	pop iFontSize
	new text,txt
	push $1
	call txt,setfont
	push $8
	call txt,setz
	push $6
	push $7
	call txt,setpos
	call txt,show
	new text,txtbg
	call txtbg,hide
	end method
	method hide
	call txt,hide
	end method
	method show
	call txt,show
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,setpos
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt,set
	push iR
	push iG
	push iB
	call txt,createtxt
	end method
	method get
	call txt,get
	ret
	end method
	method setbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	call txt,getpx
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getpy
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getw
	push iFontSize
	pop $b
	popax
	add $a,$b
	push iFontSize
	push 2
	pop $b
	popax
	mul $a,$b
	push $1
	push $2
	push $3
	push $4
	call txtbg,setbkg
	push 1
	push 255
	push 255
	push 255
	push 128
	call txtbg,setborders
	call txtbg,show
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	cthis set
	end method
	end class

	class Cypher
	parent Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push 0
	cthis set
	end method
	method add
	localint $1
	pop $1
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method iget
	cthis get
	spushs
	spop $h
	call $h,to_i
	end method
	method operator+
	localint $1
	pop $1
	push $1
	cthis add
	end method
	method operator++
	push 1
	cthis add
	end method
	method operator--
	push 1
	popax
	sub 0,$a
	cthis add
	end method
	method operator-
	localint $1
	pop $1
	push $1
	popax
	sub 0,$a
	cthis add
	end method
	method operator=
	localint $1
	pop $1
	push $1
	cthis set
	end method
	method operator==
	localint $1
	pop $1
	cthis get
	push $1
	cmpje
	end method
	method operator!=
	localint $1
	pop $1
	cthis get
	push $1
	cmpjne
	end method
	method operator>
	localint $1
	pop $1
	cthis get
	push $1
	cmpja
	end method
	method operator<
	localint $1
	pop $1
	cthis get
	push $1
	cmpjl
	end method
	end class

	class SecCounter
	method init
	localstring $1
	pop $1
	new string,sdigit
	push $1
	pop sdigit
	new int,itime
	cthis reset
	push "timcyk"
	push 1000
	push 1
	push "SecCounter0"
	cthis cnewtimerfin
	end method
	method SecCounter0
	push 1
	cthis update
	cthis play
	end method
	method play
	call timcyk,play
	end method
	method stop
	push 0
	call timcyk,stop
	end method
	method sgettime
	push itime
	push sdigit
	call clstrdigit,gettime
	ret
	end method
	method gettime
	push itime
	ret
	end method
	method reset
	push itime
	popax
	sub 0,$a
	cthis update
	end method
	method update
	localint $1
	pop $1
	push $1
	popax
	add itime,$a
	pop itime
	end method
	end class

	class TextTimeCounter
	parent Text
	parent SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push $9
	clparent SecCounter,init
	cthis reset
	end method
	method update
	localint $1
	pop $1
	push $1
	clparent SecCounter,update
	cthis sgettime
	cthis set
	end method
	end class

	class gfxObject
	method init
	localstring $1
	pop $1
	new string,sgfxobj
	push $1
	pop sgfxobj
	end method
	method setpos
	push sgfxobj
	spushs
	spop $a
	call [$a],setpos
	end method
	method move
	push sgfxobj
	spushs
	spop $a
	call [$a],move
	end method
	method getpos
	push sgfxobj
	spushs
	spop $a
	call [$a],getpos
	end method
	method getposx
	push sgfxobj
	spushs
	spop $a
	call [$a],getposx
	end method
	method getposy
	push sgfxobj
	spushs
	spop $a
	call [$a],getposy
	end method
	method getpx
	push sgfxobj
	spushs
	spop $a
	call [$a],getpx
	end method
	method getpy
	push sgfxobj
	spushs
	spop $a
	call [$a],getpy
	end method
	method getw
	push sgfxobj
	spushs
	spop $a
	call [$a],getw
	end method
	method geth
	push sgfxobj
	spushs
	spop $a
	call [$a],geth
	end method
	method getcx
	push sgfxobj
	spushs
	spop $a
	call [$a],getcx
	end method
	method getcy
	push sgfxobj
	spushs
	spop $a
	call [$a],getcy
	end method
	method getex
	push sgfxobj
	spushs
	spop $a
	call [$a],getex
	end method
	method getey
	push sgfxobj
	spushs
	spop $a
	call [$a],getey
	end method
	method lodx
	push sgfxobj
	spushs
	spop $a
	call [$a],lodx
	end method
	method lody
	push sgfxobj
	spushs
	spop $a
	call [$a],lody
	end method
	method setz
	push sgfxobj
	spushs
	spop $a
	call [$a],setz
	end method
	method getz
	push sgfxobj
	spushs
	spop $a
	call [$a],getz
	end method
	method show
	push sgfxobj
	spushs
	spop $a
	call [$a],show
	end method
	method hide
	push sgfxobj
	spushs
	spop $a
	call [$a],hide
	end method
	method isvisible
	push sgfxobj
	spushs
	spop $a
	call [$a],isvisible
	end method
	method isin
	push sgfxobj
	spushs
	spop $a
	call [$a],isin
	end method
	end class

	class gfxSquare
	parent Color
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent Color,init
	push A
	push "w"
	push "h"
	cthis vars
	push $3
	pop w
	push $4
	pop h
	new img,imggfx
	push $1
	push $2
	call imggfx,setpos
	push "imggfx"
	clparent gfxObject,init
	end method
	method build
	push w
	push h
	push r
	push g
	push b
	push a
	call imggfx,create
	end method
	method shadow
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localdef $4
	localdef $5
	call imggfx,getpos
	pop $5
	pop $4
	push 0
	push 0
	call imggfx,setpos
	new img,_img1
	new img,_img2
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1327
	push w
	push h
	cthis transparent
	call _img1,create
	push "imggfx"
	call _img1,blit
	jmp l1326
l1327:
	push w
	push h
	cthis get
	call _img1,create
l1326:
	push w
	push h
	cthis black
	push $3
	call _img2,create
	push $1
	push 0
	cmpjl
	cmp0
	je l1329
	push $1
	popax
	sub 0,$a
	push 0
	call _img1,move
	push $1
	popax
	add $4,$a
	pop $4
	jmp l1328
l1329:
	push $1
	push 0
	call _img2,move
l1328:
	push $2
	push 0
	cmpjl
	cmp0
	je l1331
	push 0
	push $2
	popax
	sub 0,$a
	call _img1,move
	push $2
	popax
	add $5,$a
	pop $5
	jmp l1330
l1331:
	push 0
	push $2
	call _img2,move
l1330:
	call $1,abs
	popax
	add w,$a
	pop w
	call $2,abs
	popax
	add h,$a
	pop h
	push w
	push h
	cthis transparent
	call imggfx,create
	push "_img2"
	call imggfx,blit
	push "_img1"
	call imggfx,blit
	delete _img1
	delete _img2
	push $4
	push $5
	call imggfx,move
	end method
	method blackborder
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $1
	cthis black
	push $2
	cthis border
	end method
	method border
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $7
	localdef $8
	call imggfx,getpos
	pop $8
	pop $7
	push 0
	push 0
	call imggfx,setpos
	new img,_img
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1333
	push w
	push h
	cthis transparent
	call _img,create
	push "imggfx"
	call _img,blit
	jmp l1332
l1333:
	push w
	push h
	cthis get
	call _img,create
l1332:
	push $1
	push $2
	call _img,move
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add w,$a
	pop w
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add h,$a
	pop h
	push w
	push h
	push $3
	push $4
	push $5
	push $6
	call imggfx,create
	push "_img"
	call imggfx,blit
	delete _img
	push $7
	push $8
	call imggfx,move
	end method
	end class

	class Rect
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push A
	push "x"
	push "y"
	push "w"
	push "h"
	cthis vars
	push $1
	push $2
	push $3
	push $4
	cthis set
	new vector,vecgr
	push "string"
	call vecgr,type
	push "gmimgvec"
	call vecgr,add
	end method
	method x2
	push x
	push w
	pop $b
	popax
	add $a,$b
	end method
	method y2
	push y
	push h
	pop $b
	popax
	add $a,$b
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	pop w
	push $4
	pop h
	end method
	method fit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	call vecgr,contains
	cmp0
	je l1335
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],_getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1337
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1337:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],_getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1339
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1339:
	jmp l1334
l1335:
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1341
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1341:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1343
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1343:
l1334:
	cthis x2
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l1345
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1345:
	cthis y2
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1347
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1347:
	end method
	method fitrand
	localstring $1
	pop $1
	push $1
	spushs
	push x
	push w
	push $1
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	push y
	push h
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	end method
	method fitgrouprand
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1348:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1349
	jmp l1351
l1350:
	add $2,1
	pop $2
	jmp l1348
l1351:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fitrand
	jmp l1350
l1349:
	end method
	method fitgroup
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1352:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1353
	jmp l1355
l1354:
	add $2,1
	pop $2
	jmp l1352
l1355:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fit
	jmp l1354
l1353:
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	new string,_sobfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	spushs
	push _sfun
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	cmpjne
	cmp0
	je l1357
	push _sobfin
	push "null"
	cmpje
	cmp0
	je l1359
	push _sfunfin
	spushs
	spop $d
	cthis [$d]
	jmp l1358
l1359:
	push _sobfin
	spushs
	push _sfunfin
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1358:
l1357:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	cmpjae
	cmp0
	je l1361
	push _ib2
	cthis _cfinito
	jmp l1360
l1361:
	push _ival
	push _ib1
	cmpjle
	cmp0
	je l1363
	push _ib1
	cthis _cfinito
	jmp l1362
l1363:
	push _sob
	spushs
	push _sfun
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l1362:
l1360:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sobfin
	push $8
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $9
	call $2,abs
	pop $9
	push $1
	push 0
	cmpjle
	cmp0
	jne l1366
	push $9
	push $5
	cmpje
	cmp0
	jne l1366
	push $9
	push $6
	cmpja
	jmp l1367
l1365:
	push 0
	jmp l1367
l1366:
	push 1
l1367:
	cmp0
	je l1368
	ret
l1368:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	cmpja
	cmp0
	je l1370
	push _ib1
	pop _ival
	jmp l1369
l1370:
	push $2
	push 0
	cmpjl
	cmp0
	je l1372
	push _ib2
	pop _ival
	jmp l1371
l1372:
	ret
l1371:
l1369:
	push $3
	spushs
	push $4
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method setopacity
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setopacity"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push "null"
	push $4
	cthis _play
	end method
	method isplaying
	call timf,isplaying
	end method
	end class

	class CutScene
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,X1
	new int,Y1
	new int,X2
	new int,Y2
	new img,_gsq
	push $1
	push $2
	push $3
	push $4
	cthis build
	push "_gsq"
	clparent gfxObject,init
	new string,_sfunc1
	new string,_sob1
	new string,_sfunc2
	new string,_sob2
	new int,_idelay
	push 10
	pop _idelay
	new classfadeinout,_clfio
	end method
	method build
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop Y2
	pop X2
	pop Y1
	pop X1
	push X2
	push X1
	pop $b
	popax
	sub $a,$b
	push Y2
	push Y1
	pop $b
	popax
	sub $a,$b
	cthis black
	push 255
	call _gsq,create
	push X1
	push Y1
	call _gsq,setpos
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method delay
	localint $1
	pop $1
	push $1
	pop _idelay
	end method
	method transparency
	localint $1
	pop $1
	push $1
	call _gsq,transparency
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "null"
	push $1
	push "null"
	push $2
	cthis playobfin
	end method
	method playobfin
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1374
	call gameapi,getgamename
	jmp l1373
l1374:
	push $1
l1373:
	pop _sob1
	push $2
	pop _sfunc1
	push $3
	push "null"
	cmpje
	cmp0
	je l1376
	call gameapi,getgamename
	jmp l1375
l1376:
	push $3
l1375:
	pop _sob2
	push $4
	pop _sfunc2
	call _gsq,show
	push 0
	call _gsq,transparency
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene0"
	call _clfio,_play
	end method
	method CutScene0
	push _sob1
	push _sfunc1
	cthis callfun
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method close
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obclose
	end method
	method obclose
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob1
	push $2
	pop _sfunc1
	push 0
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene1"
	call _clfio,_play
	end method
	method CutScene1
	call _gsq,hide
	push _sob1
	push _sfunc1
	cthis callfun
	end method
	method enter
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obenter
	end method
	method obenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob2
	push $2
	pop _sfunc2
	push 255
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method _callfun2
	call _gsq,hide
	push _sob2
	push _sfunc2
	cthis callfun
	end method
	method isplaying
	call _clfio,isplaying
	end method
	method show
	push 255
	call _gsq,transparency
	call _gsq,show
	end method
	end class

	method allchars
	push "a0 t_!@#$%^&*()_+-=[]\\|}{;':\",./<>?`~"
	end method
	class TextTyper
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new string,sChars
	push $6
	pop sChars
	new int,iLimit
	push $7
	pop iLimit
	push A
	push "Sdir"
	push "left"
	push "W"
	push 0
	push "iFontSize"
	push $2
	push "X"
	push 0
	push "Y"
	push 0
	cthis vars2
	new text,txt1
	push $1
	call txt1,setfont
	push ""
	call txt1,set
	new text,txt2
	push $1
	call txt2,setfont
	push "_"
	call txt2,set
	push iR
	push iG
	push iB
	call txt2,createtxt
	call txt2,hide
	new text,txtpass
	push $1
	call txtpass,setfont
	call txtpass,hide
	new int,bpass
	push 0
	pop bpass
	new string,_sob
	push "null"
	pop _sob
	new string,_sfun
	push "null"
	pop _sfun
	push "timcyk"
	push 300
	push 1
	push "fintimcyk"
	cthis cnewtimerfin
	push "txt1"
	clparent gfxObject,init
	end method
	method setaspasswd
	push 1
	pop bpass
	call txt1,hide
	call txt1,getz
	call txtpass,setz
	call txtpass,show
	cthis copytopass
	end method
	method copytopass
	localdef $1
	call txt1,get
	spushs
	spop $h
	call $h,length
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1377:
	push $3
	push $1
	cmpjl
	cmp0
	je l1378
	jmp l1380
l1379:
	add $3,1
	pop $3
	jmp l1377
l1380:
	push "*"
	popax
	add $2,$a
	pop $2
	jmp l1379
l1378:
	push $2
	call txtpass,txtset
	call txt1,getpx
	call txt1,getpy
	call txtpass,setpos
	end method
	method setastext
	push 0
	pop bpass
	call txt1,show
	call txtpass,hide
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,isin
	end method
	method getcol
	push iR
	push iG
	push iB
	ret
	end method
	method fintimcyk
	cthis getlock
	cmp0
	je l1382
	ret
l1382:
	cthis updatecyk
	cthis play
	end method
	method updatecyk
	call txt2,isvisible
	cmp0
	je l1384
	call txt2,hide
	jmp l1383
l1384:
	call txt1,getex
	call txt1,getpy
	call txt2,setpos
	call txt2,show
l1383:
	end method
	method enable
	cthis unlock
	cthis updatecyk
	call timcyk,play
	end method
	method disable
	call txt2,hide
	push 0
	call timcyk,stop
	cthis lock
	end method
	method onenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob
	push $2
	pop _sfun
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop X
	push $2
	pop Y
	cthis get
	cthis updatetxt
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push X
	push $1
	pop $b
	popax
	add $a,$b
	push Y
	push $2
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method setz
	localint $1
	pop $1
	push $1
	call txt1,setz
	push $1
	call txt2,setz
	end method
	method get
	localstring $1
	call txt1,get
	pop $1
	call $1,length
	push 0
	cmpja
	cmp0
	je l1386
	push $1
	jmp l1385
l1386:
	push ""
l1385:
	end method
	method getpx
	call txt1,getpx
	end method
	method getpy
	call txt1,getpy
	end method
	method getcx
	call txt1,getcx
	end method
	method getcy
	call txt1,getcy
	end method
	method geth
	call txt1,geth
	end method
	method getey
	call txt1,getpy
	push iFontSize
	pop $b
	popax
	add $a,$b
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,clip
	push $1
	push $2
	push $3
	push $4
	call txt2,clip
	end method
	method length
	call txt1,get
	spushs
	spop $h
	call $h,length
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt1,set
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis getcol
	call txt1,txtsetcol
	end method
	method limit=
	localint $1
	pop $1
	push $1
	pop iLimit
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1388
	ret
l1388:
	cthis getname
	push "_ontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1390
	cthis disable
	push _sob
	push _sfun
	cthis callfun
	cthis getname
	push "_onenter"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	ret
l1390:
	localstring $1
	push "t"
	call sChars,contains
	cmp0
	je l1392
	push "tab"
	call keyboard,iskey
	jmp l1394
l1392:
	push 0
	jmp l1394
l1393:
	push 1
l1394:
	cmp0
	je l1395
	push " "
	pop $1
	jmp l1391
l1395:
	call keyboard,getkey
	pop $1
l1391:
	localstring $2
	call txt1,get
	pop $2
	call keyboard,isalpha
	cmp0
	je l1397
	push "a"
	call sChars,contains
	jmp l1399
l1397:
	push 0
	jmp l1399
l1398:
	push 1
l1399:
	cmp0
	jne l1401
	call keyboard,isdigit
	cmp0
	je l1402
	push "0"
	call sChars,contains
	jmp l1404
l1402:
	push 0
	jmp l1404
l1403:
	push 1
l1404:
	cmp0
	jne l1401
	push $1
	call sChars,contains
	jmp l1405
l1400:
	push 0
	jmp l1405
l1401:
	push 1
l1405:
	cmp0
	je l1406
	push iLimit
	push 0
	cmpjle
	cmp0
	jne l1409
	push iLimit
	call $2,length
	cmpja
	jmp l1410
l1408:
	push 0
	jmp l1410
l1409:
	push 1
l1410:
	jmp l1411
l1406:
	push 0
	jmp l1411
l1407:
	push 1
l1411:
	cmp0
	je l1412
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	cthis updatetxt
	cthis updatecyk
	jmp l1396
l1412:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1414
	call $2,length
	push 0
	cmpja
	jmp l1416
l1414:
	push 0
	jmp l1416
l1415:
	push 1
l1416:
	cmp0
	je l1417
	push 1
	call $2,strsube
	cthis updatetxt
	cthis updatecyk
l1417:
l1396:
	end method
	method updatetxt
	localstring $1
	pop $1
	push $1
	call txt1,set
	push iR
	push iG
	push iB
	call txt1,createtxt
	push Sdir
	push "center"
	cmpje
	cmp0
	je l1419
	push X
	push W
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push Y
	call txt1,setpos
	jmp l1418
l1419:
	push Sdir
	push "right"
	cmpje
	cmp0
	je l1421
	push X
	push W
	pop $b
	popax
	add $a,$b
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push Y
	call txt1,setpos
	jmp l1420
l1421:
	push X
	push Y
	call txt1,setpos
l1420:
l1418:
	push bpass
	cmp0
	je l1423
	cthis copytopass
l1423:
	cthis getname
	push "_onwrite"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class ConTextTyper
	parent TextTyper
	parent ObjController
	method init
	clparent TextTyper,init
	clparent ObjController,init
	end method
	end class

	new string,sTextBoxTyperSys
	push "null"
	pop sTextBoxTyperSys
	class TextBoxTyper
	parent LObjController
	parent ImagePos
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent LObjController,init
	clparent ImagePos,init
	new def,Font
	push $1
	push $2
	cthis checkfont
	pop Font
	push A
	push "Cols"
	push $10
	push $3
	pop $b
	popax
	div $a,$b
	psax
	push "Rows"
	push $11
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	push "X"
	push $8
	push "Y"
	push $9
	push "Row"
	push 0
	push "enablemove"
	push 1
	push "W"
	push $10
	push "insystem"
	push 0
	push "H"
	push $11
	push "isvisible"
	push 1
	push "clipx1"
	push $8
	push "clipy1"
	push $9
	push "clipx2"
	push 0
	push "clipy2"
	push 0
	push "clipped"
	push 0
	cthis vars2
	new def,Size
	push $2
	pop Size
	new def,Dy
	push $12
	pop Dy
	new def,Z
	push 0
	pop Z
	localstring $13
	new gmimgvec,grtt
	new gmimgvec,gren
	localint $14
	push 0
	pop $14
l1424:
	push $14
	push Rows
	cmpjl
	cmp0
	je l1425
	jmp l1427
l1426:
	add $14,1
	pop $14
	jmp l1424
l1427:
	push "tt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $13
	push $13
	spushs
	push Font
	push $2
	push $4
	push $5
	push $6
	push $7
	push Cols
	spop $e
	new TextTyper,[$e]
	push $13
	spushs
	push $10
	spop $a
	call [$a],W=
	push $13
	spushs
	push "left"
	spop $a
	call [$a],Sdir=
	push $13
	spushs
	push $8
	push $9
	push $14
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $13
	call grtt,add
	jmp l1426
l1425:
	end method
	method settyper
	localint $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localstring $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $10
	localint $11
	localstring $12
	localstring $13
	push ""
	pop $13
	push $1
	push 0
	cmpjl
	cmp0
	je l1429
	call grtt,last
	spushs
	spop $a
	call [$a],X
	pop $10
	call grtt,last
	spushs
	spop $a
	call [$a],getey
	push Dy
	pop $b
	popax
	add $a,$b
	pop $11
	call grtt,size
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	call grtt,add
	jmp l1428
l1429:
	push $1
	call grtt,get
	pop $12
	push $12
	spushs
	spop $a
	call [$a],X
	pop $10
	push $12
	spushs
	spop $a
	call [$a],getpy
	pop $11
	push $12
	spushs
	spop $a
	call [$a],get
	pop $13
	push $12
	push 0
	push $3
	push $12
	spushs
	spop $a
	call [$a],iFontSize
	pop $b
	popax
	sub $a,$b
	call grtt,movefrom
	push $12
	spushs
	spop $d
	delete [$d]
l1428:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	push $2
	push $3
	push $5
	push $6
	push $7
	push $8
	push W
	push $4
	pop $b
	popax
	div $a,$b
	psax
	spop $e
	new TextTyper,[$e]
	push $12
	spushs
	push W
	spop $a
	call [$a],W=
	push $12
	spushs
	push $9
	spop $a
	call [$a],Sdir=
	push $12
	spushs
	push $13
	spop $a
	call [$a],updatetxt
	push $12
	spushs
	push Z
	spop $a
	call [$a],setz
	push $12
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grtt,move
	push $1
	push $2
	call gren,move
	push $1
	popax
	add X,$a
	pop X
	push $2
	popax
	add Y,$a
	pop Y
	end method
	method size
	call grtt,size
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtt,setz
	push $1
	call gren,setz
	end method
	method getz
	push Z
	end method
	method show
	push 1
	pop isvisible
	call grtt,show
	end method
	method hide
	push 0
	pop isvisible
	call grtt,hide
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 1
	pop clipped
	push $1
	pop clipx1
	push $2
	pop clipy1
	push $3
	pop clipx2
	push $4
	pop clipy2
	localint $5
	push 0
	pop $5
l1430:
	push $5
	call grtt,size
	cmpjl
	cmp0
	je l1431
	jmp l1433
l1432:
	add $5,1
	pop $5
	jmp l1430
l1433:
	push $5
	call grtt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l1432
l1431:
	end method
	method getw
	push W
	end method
	method geth
	push H
	end method
	method enumerate
	localint $1
	pop $1
	localstring $2
	localstring $3
	localint $4
	push 0
	pop $4
l1434:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1435
	jmp l1437
l1436:
	add $4,1
	pop $4
	jmp l1434
l1437:
	push "txte"
	push $4
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new text,[$e]
	push $2
	call gren,add
	push $2
	spushs
	push Z
	spop $a
	call [$a],setz
	push $2
	spushs
	push Font
	spop $a
	call [$a],setfont
	push $2
	spushs
	push ""
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	call tt0,getcol
	spop $a
	call [$a],txtsetcol
	push $2
	spushs
	push X
	push $2
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	push Y
	push $4
	push Size
	push Dy
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l1436
l1435:
	end method
	method cut
	localint $1
	pop $1
	push $1
	pop Rows
	end method
	method enable
	cthis unlock
	cthis activateact
	end method
	method disable
	cthis lock
	push "disable"
	call grtt,eval
	end method
	method actual
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	end method
	method activate
	localint $1
	pop $1
	cthis unlock
	push $1
	push 0
	cmpjae
	cmp0
	je l1439
	push $1
	push Rows
	cmpjl
	jmp l1441
l1439:
	push 0
	jmp l1441
l1440:
	push 1
l1441:
	cmp0
	je l1442
	push insystem
	cmp0
	je l1444
	push GAME
	spushs
	push sTextBoxTyperSys
	spop $a
	call [$a],isgmobj
	cmp0
	je l1446
	push sTextBoxTyperSys
	cthis getname
	cmpjne
	jmp l1448
l1446:
	push 0
	jmp l1448
l1447:
	push 1
l1448:
	cmp0
	je l1449
	push sTextBoxTyperSys
	spushs
	spop $a
	call [$a],deactivate
l1449:
	cthis getname
	pop sTextBoxTyperSys
l1444:
	cthis deactivate
	push $1
	pop Row
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],enable
	cthis getname
	push "_activate"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1442:
	end method
	method activateact
	push Row
	cthis activate
	end method
	method deactivate
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disable
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1451
	ret
l1451:
	cthis getname
	push "_boxontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1453
	localdef $1
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	pop $1
	call $1,clear
	call $1,length
	push 0
	cmpje
	cmp0
	je l1455
	push enablemove
	jmp l1457
l1455:
	push 0
	jmp l1457
l1456:
	push 1
l1457:
	cmp0
	je l1458
	localdef $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l1459:
	push $2
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l1460
	jmp l1462
l1461:
	sub $2,1
	pop $2
	jmp l1459
l1462:
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1461
l1460:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	push Rows
	cmpjl
	cmp0
	je l1464
	push ""
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis setid
l1464:
l1458:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1452
l1453:
	push "up"
	call keyboard,iskey
	cmp0
	je l1466
	push Row
	push 0
	cmpja
	jmp l1468
l1466:
	push 0
	jmp l1468
l1467:
	push 1
l1468:
	cmp0
	je l1469
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1465
l1469:
	push "down"
	call keyboard,iskey
	cmp0
	je l1471
	push Row
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l1473
l1471:
	push 0
	jmp l1473
l1472:
	push 1
l1473:
	cmp0
	je l1474
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1470
l1474:
	push "pgdown"
	call keyboard,iskey
	cmp0
	je l1476
	push Row
	push Rows
	push 10
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1478
	push Row
	push 10
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1477
l1478:
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1477:
	jmp l1475
l1476:
	push "pgup"
	call keyboard,iskey
	cmp0
	je l1480
	push Row
	push 9
	cmpja
	cmp0
	je l1482
	push Row
	push 10
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1481
l1482:
	push 0
	cthis activate
l1481:
	jmp l1479
l1480:
	push "backspace"
	call keyboard,iskey
	cmp0
	jne l1485
	push "delete"
	call keyboard,iskey
	jmp l1486
l1484:
	push 0
	jmp l1486
l1485:
	push 1
l1486:
	cmp0
	je l1487
	cthis actual
	spushs
	spop $a
	call [$a],length
	push 0
	cmpje
	jmp l1489
l1487:
	push 0
	jmp l1489
l1488:
	push 1
l1489:
	cmp0
	je l1490
	push enablemove
	cmp0
	je l1492
	localdef $2
	push Row
	pop $2
l1493:
	push $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1494
	jmp l1496
l1495:
	add $2,1
	pop $2
	jmp l1493
l1496:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1495
l1494:
	push ""
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setid
l1492:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1498
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1498:
	jmp l1483
l1490:
	push "onkeydown"
	call grtt,eval
l1483:
l1479:
l1475:
l1470:
l1465:
l1452:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1500
	ret
l1500:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push clipped
	cmp0
	je l1502
	push $1
	push $2
	push clipx1
	push clipy1
	push clipx2
	push clipy2
	call clsurf,isin
	jmp l1504
l1502:
	push 0
	jmp l1504
l1503:
	push 1
l1504:
	cmp0
	jne l1506
	push clipped
	neg
	cmp0
	je l1507
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	jmp l1509
l1507:
	push 0
	jmp l1509
l1508:
	push 1
l1509:
	jmp l1510
l1505:
	push 0
	jmp l1510
l1506:
	push 1
l1510:
	cmp0
	je l1511
	cthis deactivate
	localint $3
	push 0
	pop $3
l1512:
	push $3
	cthis size
	cmpjl
	cmp0
	je l1513
	jmp l1515
l1514:
	add $3,1
	pop $3
	jmp l1512
l1515:
	push "tt"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getey
	push $2
	cmpja
	cmp0
	je l1517
	push $3
	cthis activate
	ret
l1517:
	jmp l1514
l1513:
	jmp l1501
l1511:
	cthis getname
	push "_OUTSIDE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1501:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	cmp0
	je l1519
	push isvisible
	neg
	jmp l1521
l1519:
	push 0
	jmp l1521
l1520:
	push 1
l1521:
	cmp0
	je l1522
	push 0
	ret
l1522:
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	end method
	method getid
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method getact
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method idpx
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpx
	end method
	method idpy
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpy
	end method
	method getpx
	push X
	end method
	method getpy
	push Y
	end method
	method get
	push 0
	cthis getfrom
	end method
	method getfrom
	localint $1
	pop $1
	push $1
	push ""
	cthis getlinesfrom
	end method
	method getlinesfrom
	localint $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push ""
	pop $3
	localint $4
	push $1
	pop $4
l1523:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1524
	jmp l1526
l1525:
	add $4,1
	pop $4
	jmp l1523
l1526:
	push "tt"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	push $2
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	jmp l1525
l1524:
	push $3
	end method
	method getlines
	push 0
	push " "
	cthis getlinesfrom
	end method
	method nonempty
	localint $1
	pop $1
	localstring $2
l1527:
	push $1
	call grtt,size
	cmpjl
	cmp0
	je l1528
	jmp l1530
l1529:
	add $1,1
	pop $1
	jmp l1527
l1530:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	pop $2
	call $2,clear
	call $2,length
	push 0
	cmpja
	cmp0
	je l1532
	push $1
	ret
l1532:
	jmp l1529
l1528:
	push 1
	popax
	sub 0,$a
	end method
	method clear
	call grtt,txtreset
	end method
	method setid
	localstring $1
	localint $2
	pop $2
	pop $1
	call grtt,size
	push $2
	cmpjae
	cmp0
	je l1534
	push "tt"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],txtset
l1534:
	end method
	method settext
	localint $1
	pop $1
l1535:
	push $1
	push 0
	cmpja
	cmp0
	je l1536
	sub $1,1
	pop $1
	push $1
	cthis setid
	jmp l1535
l1536:
	end method
	method copytodb
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
	localint $2
	push 0
	pop $2
l1537:
	push $2
	call grtt,size
	cmpjl
	cmp0
	je l1538
	jmp l1540
l1539:
	add $2,1
	pop $2
	jmp l1537
l1540:
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	call grtt,get
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],add
	jmp l1539
l1538:
	end method
	method copyfromdb
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis copyfromdbii
	end method
	method copyfromdbss
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis copyfromdbii
	end method
	method copyfromdbii
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1543
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	jmp l1544
l1542:
	push 0
	jmp l1544
l1543:
	push 1
l1544:
	cmp0
	je l1545
	ret
l1545:
	cthis clear
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	cthis size
	cmpja
	cmp0
	je l1547
	push $2
	cthis size
	pop $b
	popax
	add $a,$b
	pop $3
l1547:
	localint $4
	push $2
	pop $4
l1548:
	push $4
	push $3
	cmpjl
	cmp0
	je l1549
	jmp l1551
l1550:
	add $4,1
	pop $4
	jmp l1548
l1551:
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmp0
	je l1553
	push $1
	spushs
	push $4
	push 0
	spop $a
	call [$a],get
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis setid
l1553:
	jmp l1550
l1549:
	end method
	method copyfromdbrow
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $4
	push $4
	cthis size
	cmpja
	cmp0
	je l1555
	cthis size
	pop $4
l1555:
	localint $5
	push $3
	pop $5
l1556:
	push $5
	push $4
	cmpjl
	cmp0
	je l1557
	jmp l1559
l1558:
	add $5,1
	pop $5
	jmp l1556
l1559:
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],get
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	cthis setid
	jmp l1558
l1557:
	end method
	method save
	localstring $1
	pop $1
	new db,__tmpdb
	push "__tmpdb"
	cthis copytodb
	push "|"
	call __tmpdb,setseparator
	push $1
	call __tmpdb,save
	delete __tmpdb
	end method
	method load
	localstring $1
	pop $1
	new db,__tmpdb
	push $1
	call __tmpdb,load
	push "__tmpdb"
	cthis copyfromdb
	delete __tmpdb
	end method
	end class

	class GUITextBoxTyper
	parent TextBoxTyper
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	push $9
	push $10
	push $11
	push $12
	clparent TextBoxTyper,init
	push A
	push "rewinder"
	push "null"
	push "rewinderbg"
	push "null"
	cthis vars2
	end method
	method setrewinder
	localstring $1
	pop $1
	push $1
	pop rewinder
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	pop rewinderbg
	end method
	method activate
	localint $1
	pop $1
	push $1
	clparent TextBoxTyper,activate
	cthis updaterewactual
	end method
	method updaterewactual
	push Row
	cthis updaterewpos
	end method
	method updaterewpos
	localint $1
	pop $1
	push rewinder
	push "null"
	cmpjne
	cmp0
	je l1561
	localdef $2
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $a
	call [$a],getpy
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	cmpjl
	cmp0
	je l1563
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
	jmp l1562
l1563:
	push $2
	spushs
	spop $a
	call [$a],getey
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	cmpja
	cmp0
	je l1565
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
l1565:
l1562:
l1561:
	end method
	end class

	class DelayTaker
	method init
	new int,bonrel
	push 0
	pop bonrel
	new int,bstart
	push 0
	pop bstart
	new int,bclickrel
	push 1
	pop bclickrel
	push "timwez"
	push 300
	push 1
	push "DelayTaker0"
	cthis cnewtimerfin
	end method
	method DelayTaker0
	push 1
	pop bonrel
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	pop bclickrel
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	call timwez,delay
	end method
	method take
	push bclickrel
	cmp0
	je l1567
	call timwez,play
	push 0
	pop bonrel
	jmp l1566
l1567:
	push 1
	pop bonrel
l1566:
	push 1
	pop bstart
	end method
	method ret
	push 0
	pop bonrel
	push 0
	pop bstart
	push 0
	call timwez,stop
	end method
	method isonclick
	cthis stoptimer
	push bstart
	cmp0
	je l1568
	push bonrel
	neg
	jmp l1570
l1568:
	push 0
	jmp l1570
l1569:
	push 1
l1570:
	end method
	method isonrel
	cthis stoptimer
	push bstart
	cmp0
	je l1571
	push bonrel
	jmp l1573
l1571:
	push 0
	jmp l1573
l1572:
	push 1
l1573:
	end method
	method istaken
	push bstart
	end method
	method stoptimer
	push 0
	call timwez,stop
	end method
	end class

	class ImgMover
	method init
	new string,smoved
	push "null"
	pop smoved
	new int,ilastx
	new int,ilasty
	new int,irelx
	new int,irely
	end method
	method mssetobj
	localstring $1
	pop $1
	push $1
	call mouse,getpos
	cthis setobj
	end method
	method setobj
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	push 0
	cthis set
	end method
	method setcobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis setobj
	end method
	method setpobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setobj
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $4
	pop $b
	popax
	sub $a,$b
	pop ilastx
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $5
	pop $b
	popax
	sub $a,$b
	pop ilasty
	push $2
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop irelx
	push $3
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop irely
	push $1
	pop smoved
	end method
	method msmove
	call mouse,getpos
	cthis move
	end method
	method msftmove
	call mouse,getpos
	cthis ftmove
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1575
	push smoved
	spushs
	push $1
	push smoved
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push irelx
	pop $b
	popax
	sub $a,$b
	push $2
	push smoved
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	push irely
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
l1575:
	end method
	method ftmove
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1577
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
l1577:
	end method
	method retobj
	push 0
	push 0
	cthis ret
	end method
	method ret
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push ilastx
	push $1
	pop $b
	popax
	add $a,$b
	push ilasty
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	cthis free
	end method
	method put
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	cthis free
	end method
	method free
	push "null"
	pop smoved
	end method
	method getmover
	push smoved
	ret
	end method
	method getfree
	localdef $1
	push smoved
	pop $1
	cthis free
	push $1
	end method
	method moving
	push smoved
	push "null"
	cmpjne
	ret
	end method
	end class

	class ConImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	push _sme
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1579
	push _sme
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1579:
	end method
	end class

	class DelayMover
	parent ImgMover
	parent LObjController
	method init
	clparent ImgMover,init
	clparent LObjController,init
	new DelayTaker,cldt
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method _put
	call cldt,ret
	push _sme
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	call cldt,take
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1581
	ret
l1581:
	call cldt,isonclick
	cmp0
	je l1583
	cthis _put
	jmp l1582
l1583:
	call cldt,istaken
	neg
	cmp0
	je l1585
	push _sme
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1585:
l1582:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1587
	ret
l1587:
	call cldt,isonrel
	cmp0
	je l1589
	cthis _put
l1589:
	end method
	end class

	class Rewinder
	parent classlocker
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new string,sarrowdir
	new int,ilenx
	new int,ileny
	new string,sgr
	new string,sorientation
	new int,bvertical
	new int,bfilteritem
	push 0
	pop bfilteritem
	new int,ibx1
	push 0
	pop ibx1
	new int,ibx2
	push iResX
	pop ibx2
	new int,iby1
	push 0
	pop iby1
	new int,iby2
	push iResY
	pop iby2
	new int,iodleg
	push 2
	pop iodleg
	new ImgMover,clmv
	push "timtick"
	push 1
	push 1
	push "timfin"
	cthis cnewtimercyclefin
	push A
	push "borx1"
	push $1
	push "bory1"
	push $2
	push "borx2"
	push $3
	push "bory2"
	push $4
	cthis vars2
	new snd,fxrew
	end method
	method movefilter
	push 1
	pop bfilteritem
	end method
	method movenormal
	push 0
	pop bfilteritem
	end method
	method setfxrew
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call fxrew,load
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push $1
	push $2
	push $3
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,set
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1592
	push sorientation
	push "down"
	cmpje
	jmp l1593
l1591:
	push 0
	jmp l1593
l1592:
	push 1
l1593:
	cmp0
	je l1594
	push sgr
	spushs
	push $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	push 0
	spop $a
	call [$a],move
	jmp l1590
l1594:
	push sgr
	spushs
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	spop $a
	call [$a],move
l1590:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],remove
	end method
	method pickup
	localint $1
	localint $2
	pop $2
	pop $1
	push sgr
	spushs
	push $1
	push $2
	push 1
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l1596
	push sgr
	spushs
	spop $a
	call [$a],getsfound
	push $1
	push $2
	cthis getitem
	push 1
	ret
l1596:
	push 0
	ret
	end method
	method mspickup
	call mouse,getpos
	cthis pickup
	ret
	end method
	method freeitem
	call clmv,free
	end method
	method moveitem
	push bfilteritem
	cmp0
	je l1598
	call clmv,msftmove
	jmp l1597
l1598:
	call clmv,msmove
l1597:
	end method
	method retitem
	localstring $1
	call clmv,getmover
	pop $1
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,ret
	push $1
	cthis putitem
	end method
	method putitem
	localstring $1
	pop $1
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1601
	push sorientation
	push "down"
	cmpje
	jmp l1602
l1600:
	push 0
	jmp l1602
l1601:
	push 1
l1602:
	cmp0
	je l1603
	push $1
	spushs
	push sgr
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l1599
l1603:
	push $1
	spushs
	push 0
	push sgr
	spushs
	spop $a
	call [$a],getey
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
l1599:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],add
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $1
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	end method
	method getmoved
	call clmv,getmover
	ret
	end method
	method getbutw
	call anupstd,getw
	ret
	end method
	method getbuth
	call anupstd,geth
	ret
	end method
	method movearrows
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grarrows,move
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $6
	pop sgr
	new anima,anupstd
	push $1
	call anupstd,load
	push $2
	call anupstd,setz
	push "up"
	push 0
	call anupstd,setframe
	push "anupstd"
	push "anupact"
	cthis copyanima
	push "up"
	push 1
	call anupact,setframe
	push "anupstd"
	push "andownact"
	cthis copyanima
	push "down"
	push 1
	call andownact,setframe
	push "anupstd"
	push "andownstd"
	cthis copyanima
	push "down"
	push 0
	call andownstd,setframe
	push "butup"
	push "anupstd"
	push "anupact"
	push "null"
	push $3
	cthis newbutan
	push "butdown"
	push "andownstd"
	push "andownact"
	push "null"
	push $3
	cthis newbutan
	push "onmoveon"
	push "_rewbutmoveon"
	call butup,addmethod
	push "onmoveon"
	push "_rewbutmoveon"
	call butdown,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butup,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butdown,addmethod
	push "onclick"
	push "_rewbutclick"
	call butup,addmethod
	push "onclick"
	push "_rewbutclick"
	call butdown,addmethod
	push "onrel"
	push "_rewbutrel"
	call butup,addmethod
	push "onrel"
	push "_rewbutrel"
	call butdown,addmethod
	push $4
	pop sorientation
	new gmimgvec,grarrows
	push "grarrows"
	push "anupstd"
	popax
	pop $b
	psax
	call [$b],operator+
	push "anupact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownstd"
	popax
	pop $b
	psax
	call [$b],operator+
	popax
	localint $7
	localint $8
	localint $9
	localint $10
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1606
	push sorientation
	push "down"
	cmpje
	jmp l1607
l1605:
	push 0
	jmp l1607
l1606:
	push 1
l1607:
	cmp0
	je l1608
	push 0
	pop bvertical
	push $5
	pop ilenx
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1610
	push borx1
	push bory2
	call anupstd,geth
	pop $b
	popax
	sub $a,$b
	call anupstd,setpos
	push borx1
	push bory2
	call anupact,geth
	pop $b
	popax
	sub $a,$b
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call andownstd,getey
	pop $7
	jmp l1609
l1610:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownact,setpos
	push bory1
	pop $7
l1609:
	call anupstd,getex
	push iodleg
	pop $b
	popax
	add $a,$b
	pop ibx1
	call andownstd,getpx
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop ibx2
	push ibx1
	pop $8
	jmp l1604
l1608:
	push 1
	pop bvertical
	push $5
	pop ileny
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1612
	push borx2
	call anupstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupstd,setpos
	push borx2
	call anupact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call anupstd,getex
	pop $8
	jmp l1611
l1612:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx1
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx1
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	push borx1
	pop $8
l1611:
	call anupstd,getey
	push iodleg
	pop $b
	popax
	add $a,$b
	pop iby1
	call andownstd,getpy
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop iby2
	push iby1
	pop $7
l1604:
	cthis getname
	push "up"
	call butup,_rewbuildbut
	cthis getname
	push "down"
	call butdown,_rewbuildbut
	localint $11
	push $6
	spushs
	spop $a
	call [$a],size
	pop $11
	push $6
	spushs
	push $8
	push $7
	spop $a
	call [$a],_setpos
	new int,ilimx
	push $8
	pop ilimx
	new int,ilimy
	push $7
	pop ilimy
	localstring $12
	localint $13
	push 0
	pop $13
l1613:
	push $13
	push $11
	cmpjl
	cmp0
	je l1614
	jmp l1616
l1615:
	add $13,1
	pop $13
	jmp l1613
l1616:
	push sgr
	spushs
	push $13
	spop $a
	call [$a],get
	pop $12
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1618
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1617
l1618:
	push sorientation
	push "left"
	cmpje
	cmp0
	je l1620
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1619
l1620:
	push sorientation
	push "up"
	cmpje
	cmp0
	je l1622
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	jmp l1621
l1622:
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1624
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
l1624:
l1621:
l1619:
l1617:
	push $12
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	jmp l1615
l1614:
	end method
	method _rewbuildbut
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sob
	push $1
	pop _sob
	new string,_sdir
	push $2
	push "up"
	cmpje
	cmp0
	je l1626
	push bvertical
	push 0
	cmpje
	cmp0
	je l1628
	push "left"
	pop _sdir
	jmp l1627
l1628:
	push "up"
	pop _sdir
l1627:
	jmp l1625
l1626:
	push $2
	push "down"
	cmpje
	cmp0
	je l1630
	push bvertical
	push 0
	cmpje
	cmp0
	je l1632
	push "right"
	pop _sdir
	jmp l1631
l1632:
	push "down"
	pop _sdir
l1631:
l1630:
l1625:
	end method
	method _rewbutmoveon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _rewbutclick
	push _sdir
	cthis mstrzalkaon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method mstrzalkaon
	localstring $1
	pop $1
	push $1
	pop sarrowdir
	call timtick,play
	end method
	method _rewbutrel
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	end method
	method _rewstrzalkaoff
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method timfin
	cthis getlock
	cmp0
	je l1634
	ret
l1634:
	localint $1
	push 0
	pop $1
	push sarrowdir
	push "null"
	cmpjne
	cmp0
	je l1636
	push sgr
	spushs
	spop $a
	call [$a],empty
	neg
	jmp l1638
l1636:
	push 0
	jmp l1638
l1637:
	push 1
l1638:
	cmp0
	je l1639
	push sarrowdir
	push "up"
	cmpje
	cmp0
	je l1641
	push sgr
	spushs
	spop $a
	call [$a],getey
	call andownstd,getpy
	push ileny
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1643
	push sgr
	spushs
	push 0
	push ileny
	popax
	sub 0,$a
	spop $a
	call [$a],move
	push 1
	pop $1
l1643:
	jmp l1640
l1641:
	push sarrowdir
	push "down"
	cmpje
	cmp0
	je l1645
	push sgr
	spushs
	spop $a
	call [$a],getpy
	push ilimy
	cmpjl
	cmp0
	je l1647
	push sgr
	spushs
	push 0
	push ileny
	spop $a
	call [$a],move
	push 1
	pop $1
l1647:
	jmp l1644
l1645:
	push sarrowdir
	push "left"
	cmpje
	cmp0
	je l1649
	push sgr
	spushs
	spop $a
	call [$a],getex
	call andownstd,getpx
	push ilenx
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1651
	push sgr
	spushs
	push ilenx
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1651:
	jmp l1648
l1649:
	push sarrowdir
	push "right"
	cmpje
	cmp0
	je l1653
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push ilimx
	cmpjl
	cmp0
	je l1655
	push sgr
	spushs
	push ilenx
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1655:
l1653:
l1648:
l1644:
l1640:
l1639:
	push $1
	cmp0
	je l1657
	call fxrew,isplaying
	neg
	cmp0
	je l1659
	call fxrew,play
l1659:
	jmp l1656
l1657:
	push 0
	call fxrew,stop
l1656:
	cthis play
	end method
	end class

	class ConRewinder
	parent Rewinder
	parent ObjController
	method init
	clparent Rewinder,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	clparent Rewinder,getitem
	call cldt,take
	end method
	method _put
	call cldt,ret
	push _sme
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmousemove
	cthis moveitem
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1661
	ret
l1661:
	call cldt,isonrel
	cmp0
	je l1663
	cthis _put
l1663:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1665
	ret
l1665:
	call cldt,isonclick
	cmp0
	je l1667
	cthis _put
	jmp l1666
l1667:
	call cldt,istaken
	neg
	cmp0
	je l1669
	push _sme
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1669:
l1666:
	end method
	end class

	class Button
	parent LObjController
	method init
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	push A
	push "sobject"
	push "null"
	push "sclicked"
	push "null"
	cthis vars2
	end method
	method sort
	call grbuts,sortimgs
	end method
	method addgroups
	call grbuts,addgroups
	call grbuts,sortimgs
	end method
	method addgroup
	localstring $1
	pop $1
	push $1
	call grbuts,addgr
	call grbuts,sortimgs
	end method
	method addlist
	call grbuts,addlist
	call grbuts,sortimgs
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grbuts,add
	call grbuts,sortimgs
	end method
	method addlocker
	localstring $1
	pop $1
	push $1
	cthis add
	push $1
	clparent classlocker,setaslocker
	end method
	method removebutlist
	push "removebut"
	cthis withlist
	end method
	method removebut
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	push $1
	push sobject
	cmpje
	cmp0
	je l1671
	push "null"
	pop sobject
l1671:
	push $1
	push sclicked
	cmpje
	cmp0
	je l1673
	push "null"
	pop sclicked
l1673:
	end method
	method load
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push "gmimgvec"
	push $1
	spop $a
	call [$a],varnew
	push $1
	push $2
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],each
	push $1
	cthis addgroup
	end method
	method remove
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	cmp0
	je l1675
	push $1
	call grbuts,removegr
l1675:
	end method
	method loadfrom
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	cthis getgraphpath
	pop $5
	push $2
	cthis setgraphpath
	push $1
	push $3
	push $4
	cthis load
	push $5
	cthis setgraphpath
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1677
	ret
l1677:
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1679
	push sobject
	pop sclicked
	push sobject
	spushs
	push "butclick"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1681
	push sobject
	spushs
	spop $a
	call [$a],butclick
l1681:
l1679:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1683
	ret
l1683:
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1685
	push sclicked
	spushs
	push "butlrel"
	spop $a
	call [$a],hasaddedmet
	jmp l1687
l1685:
	push 0
	jmp l1687
l1686:
	push 1
l1687:
	cmp0
	je l1688
	push sclicked
	spushs
	spop $a
	call [$a],butlrel
	jmp l1684
l1688:
	push "null"
	pop sclicked
l1684:
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1690
	ret
l1690:
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1692
	push sclicked
	spushs
	push "butmoving"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1694
	push sclicked
	spushs
	spop $a
	call [$a],butmoving
l1694:
l1692:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push "isbutin"
	call grbuts,isinfunc
	cmp0
	je l1696
	localdef $3
	call grbuts,getsfound
	pop $3
	push $3
	push sobject
	cmpjne
	cmp0
	je l1698
	cthis lastoff
	push $3
	pop sobject
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $3
	spushs
	push "butmoveon"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1700
	push $3
	spushs
	spop $a
	call [$a],butmoveon
l1700:
l1698:
	jmp l1695
l1696:
	cthis lastoff
l1695:
	end method
	method lastoff
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1702
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	spushs
	push "butmoveoff"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1704
	push sobject
	spushs
	spop $a
	call [$a],butmoveoff
l1704:
	push "null"
	pop sobject
l1702:
	end method
	end class

	method Button_isin
	push "isbutin"
	push "global4"
	cthis addmethod
	end method
	method global4
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 0
	cthis isin
	end method
	method Button_isinvis
	push "isbutin"
	push "global5"
	cthis addmethod
	end method
	method global5
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method Button_isinalpha
	push "isbutin"
	push "global6"
	cthis addmethod
	end method
	method global6
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	end method
	method Button_isinvisalpha
	push "isbutin"
	push "global7"
	cthis addmethod
	end method
	method global7
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 1
	cthis isin
	end method
	method Button_moveon
	push "butmoveon"
	push "global8"
	cthis addmethod
	end method
	method global8
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l1706
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l1706:
	end method
	method Button_moveonplay
	push "butmoveon"
	push "global9"
	cthis addmethod
	end method
	method global9
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l1708
	push 1
	popax
	sub 0,$a
	cthis play
l1708:
	end method
	method Button_moveoff
	push "butmoveoff"
	push "global10"
	cthis addmethod
	end method
	method global10
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method Button_moveonms
	push "butmoveon"
	push "global11"
	cthis addmethod
	end method
	method global11
	call advmouse,setbut
	end method
	method Button_moveoffms
	push "butmoveoff"
	push "global12"
	cthis addmethod
	end method
	method global12
	call advmouse,setstd
	end method
	method Button_std
	cthis Button_isin
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdalpha
	cthis Button_isinalpha
	cthis Button_moveon
	cthis Button_moveoff
	end method
	class Buttons
	parent LObjController
	method init
	localstring $1
	pop $1
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	new int,__id
	push 0
	pop __id
	new string,sanbut
	push "anbut"
	pop sanbut
	push sanbut
	push $1
	push 10
	cthis newanima
	push sanbut
	push sanbut
	push "grbuts"
	cthis newanactionsgr
	popax
	call anbut,hide
	push 10
	call grbuts,setz
	push "Buttons0"
	call grbuts,removeif
	new string,slastb
	push "null"
	pop slastb
	push A
	push "sobject"
	push "null"
	push "bvisible"
	push 1
	push "balpha"
	push 1
	cthis vars2
	end method
	method Buttons0
	cthis actionname
	push "bkg"
	cmpje
	cmp0
	je l1710
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setz
	push 1
	jmp l1709
l1710:
	push 0
l1709:
	end method
	method _release
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],setframe
	cthis copyobj
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "null"
	pop slastb
	call bsms,setstd
	end method
	method getbut
	call grbuts,getsfound
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1712
	ret
l1712:
	push 1
	popax
	sub 0,$a
	push 0
	call grbuts,setframe
	localdef $1
	call mouse,getpos
	push bvisible
	push balpha
	call grbuts,isin
	pop $1
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1714
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
l1714:
	push $1
	cmp0
	je l1716
	localstring $2
	call grbuts,getsfound
	pop $2
	push $2
	push slastb
	cmpjne
	cmp0
	je l1718
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1720
	cthis _release
l1720:
	push $2
	pop slastb
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	cthis copyobj
	call bsms,setact
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1718:
	jmp l1715
l1716:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1722
	cthis _release
l1722:
l1715:
	end method
	method copyobj
	push slastb
	spushs
	spop $a
	call [$a],actionname
	pop sobject
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1724
	ret
l1724:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1726
	cthis copyobj
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1726:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1728
	ret
l1728:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1730
	cthis copyobj
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1730:
	end method
	method disable
	cthis lock
	call grbuts,hide
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1732
	call bsms,setstd
	push "null"
	pop slastb
l1732:
	end method
	method enable
	cthis unlock
	call grbuts,show
	end method
	end class

	class TextDb
	parent classlocker
	parent ObjController
	parent gfxObject
	method init
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	clparent ObjController,init
	new string,sFont
	push $1
	pop sFont
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iFontSize
	push $2
	pop iFontSize
	localstring $12
	localint $13
	localint $14
	push "Z"
	push $10
	cthis var2
	push ".db"
	call $3,contains
	cmp0
	je l1734
	push 0
	push 6
	call $3,getb
	push "$path:"
	cmpje
	cmp0
	je l1736
	new db,dbtxt
	push 6
	call $3,strsubb
	call dbtxt,load
	jmp l1735
l1736:
	push "dbtxt"
	push $3
	cthis newdb
l1735:
	jmp l1733
l1734:
	new db,dbtxt
	push 0
	push 5
	call $3,getb
	spushs
	push "$var:"
	cmpst
	jne l1738
	spop $a
	push 5
	call $3,strsubb
	call dbtxt,dbcopy
	jmp l1737
l1738:
	push "$row:"
	cmpst
	jne l1739
	spop $a
	push 5
	call $3,strsubb
	spushs
	push ","
	spop $h
	call $h,strgetto
	pop $12
	push ","
	call $3,strgetfrom
	pop $13
	push 0
	pop $14
l1740:
	push $14
	push $12
	spushs
	push $13
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1741
	jmp l1743
l1742:
	add $14,1
	pop $14
	jmp l1740
l1743:
	call dbtxt,addrow
	popax
	push $14
	push $12
	spushs
	push $13
	push $14
	spop $a
	call [$a],get
	call dbtxt,add
	jmp l1742
l1741:
	jmp l1737
l1739:
	spop $a
	push $3
	call dbtxt,dbaddlast
l1737:
l1733:
	localint $15
	push 0
	pop $15
	localint $16
	call dbtxt,getrowsno
	pop $16
	new gmimgvec,grtxt
	push $7
	push $8
	call grtxt,_setpos
	push 0
	pop $14
l1744:
	push $14
	push $16
	cmpjl
	cmp0
	je l1745
	jmp l1747
l1746:
	add $14,1
	pop $14
	jmp l1744
l1747:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	spop $e
	new text,[$e]
	push $12
	spushs
	push $1
	spop $a
	call [$a],setfont
	push $12
	spushs
	push $14
	push 0
	call dbtxt,get
	spop $a
	call [$a],set
	push $12
	spushs
	push $7
	push $8
	spop $a
	call [$a],setpos
	push $2
	push $9
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	push $12
	spushs
	push $10
	spop $a
	call [$a],setz
	push $12
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	push $12
	spushs
	spop $a
	call [$a],getw
	push $15
	cmpja
	cmp0
	je l1749
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $15
l1749:
	push $12
	call grtxt,add
	jmp l1746
l1745:
	push "Rows"
	push $16
	cthis var2
	push $11
	push "right"
	cmpje
	cmp0
	jne l1752
	push $11
	push "center"
	cmpje
	jmp l1753
l1751:
	push 0
	jmp l1753
l1752:
	push 1
l1753:
	cmp0
	je l1754
	push 0
	pop $14
l1755:
	push $14
	push $16
	cmpjl
	cmp0
	je l1756
	jmp l1758
l1757:
	add $14,1
	pop $14
	jmp l1755
l1758:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $11
	push "center"
	cmpje
	cmp0
	je l1760
	push $12
	spushs
	push $15
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	spop $a
	call [$a],move
	jmp l1759
l1760:
	push $12
	spushs
	push $15
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l1759:
	jmp l1757
l1756:
l1754:
	push "W"
	push $15
	cthis var2
	push "grtxt"
	clparent gfxObject,init
	end method
	method stdshadow
	localint $1
	pop $1
	push 0
	push 0
	push 0
	push $1
	cthis setshadow
	end method
	method setshadow
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	push sFont
	push iFontSize
	push "_fntbrd"
	cthis _checkfont
	pop $7
	localint $8
	push 0
	pop $8
l1761:
	push $8
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l1762
	jmp l1764
l1763:
	add $8,1
	pop $8
	jmp l1761
l1764:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "txts"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new text,[$e]
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],set
	push $6
	spushs
	push $7
	spop $a
	call [$a],setfont
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $4
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	push $6
	call grtxt,add
	jmp l1763
l1762:
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtxt,setz
	end method
	method getz
	push Z
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call grtxt,isin
	end method
	method view
	localdef $1
	pop $1
	localstring $2
l1765:
	push A
	push $1
	cmpjne
	cmp0
	je l1766
	push $1
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push "txts"
	push "txt"
	call $2,strsubbs
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l1768
	push $2
	spushs
	spop $a
	call [$a],show
l1768:
	localdef $1
	pop $1
	jmp l1765
l1766:
	end method
	method blitto
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l1769:
	push $3
	call grtxt,size
	cmpjl
	cmp0
	je l1770
	jmp l1772
l1771:
	add $3,1
	pop $3
	jmp l1769
l1772:
	push $3
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],buildfullname
	push $1
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],blit
	push GAME
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardel
	jmp l1771
l1770:
	end method
	method setcol
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1773:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l1774
	jmp l1776
l1775:
	add $4,1
	pop $4
	jmp l1773
l1776:
	push $4
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	jmp l1775
l1774:
	end method
	end class

	class Lexer
	method init
	end method
	method buildlex
	push A
	push "id"
	push "found"
	cthis vars
	new vector,vconsts
	push "string"
	call vconsts,type
	new vector,vtmp1
	push "string"
	call vtmp1,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	new int,dot
	push "."
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop dot
	new string,_literal_char
	push "\""
	pop _literal_char
	end method
	method setliteralchar
	localstring $1
	pop $1
	push $1
	pop _literal_char
	end method
	method getliteralchar
	push _literal_char
	end method
	method _isvar
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push id
	pop $3
	push ""
	pop found
	localint $4
l1777:
	push $3
	cthis length
	cmpjl
	cmp0
	je l1778
	push $3
	cthis getbyte
	pop $4
	push $4
	push $1
	cmpjae
	cmp0
	je l1780
	push $4
	push $2
	cmpjle
	jmp l1782
l1780:
	push 0
	jmp l1782
l1781:
	push 1
l1782:
	cmp0
	je l1783
	push $3
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $3,1
	pop $3
	jmp l1779
l1783:
	push $4
	push BYTEa
	cmpjae
	cmp0
	je l1785
	push $4
	push BYTEz
	cmpjle
	jmp l1787
l1785:
	push 0
	jmp l1787
l1786:
	push 1
l1787:
	cmp0
	jne l1789
	push $4
	push BYTEA
	cmpjae
	cmp0
	je l1790
	push $4
	push BYTEZ
	cmpjle
	jmp l1792
l1790:
	push 0
	jmp l1792
l1791:
	push 1
l1792:
	cmp0
	jne l1789
	push $4
	push BYTE_
	cmpje
	jmp l1793
l1788:
	push 0
	jmp l1793
l1789:
	push 1
l1793:
	cmp0
	je l1794
	push ""
	pop found
l1794:
	cthis length
	pop $3
l1779:
	jmp l1777
l1778:
	call found,length
	end method
	method isreal
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
	localint $3
	push 1
	pop $3
l1795:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1796
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l1798
	push $2
	push BYTE9
	cmpjle
	jmp l1800
l1798:
	push 0
	jmp l1800
l1799:
	push 1
l1800:
	cmp0
	jne l1802
	push $2
	push dot
	cmpje
	cmp0
	je l1803
	push $3
	jmp l1805
l1803:
	push 0
	jmp l1805
l1804:
	push 1
l1805:
	jmp l1806
l1801:
	push 0
	jmp l1806
l1802:
	push 1
l1806:
	cmp0
	je l1807
	push $2
	push dot
	cmpje
	cmp0
	je l1809
	push 0
	pop $3
l1809:
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l1797
l1807:
	cthis length
	pop $1
l1797:
	jmp l1795
l1796:
	push $3
	cmp0
	jne l1812
	push 0
	push 1
	call found,getb
	push "."
	cmpje
	cmp0
	jne l1812
	push 0
	push 1
	call found,gete
	push "."
	cmpje
	jmp l1813
l1811:
	push 0
	jmp l1813
l1812:
	push 1
l1813:
	cmp0
	je l1814
	push ""
	pop found
l1814:
	call found,length
	end method
	method isident
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
l1815:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1816
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTEa
	cmpjae
	cmp0
	je l1818
	push $2
	push BYTEz
	cmpjle
	jmp l1820
l1818:
	push 0
	jmp l1820
l1819:
	push 1
l1820:
	cmp0
	jne l1822
	push $2
	push BYTEA
	cmpjae
	cmp0
	je l1823
	push $2
	push BYTEZ
	cmpjle
	jmp l1825
l1823:
	push 0
	jmp l1825
l1824:
	push 1
l1825:
	cmp0
	jne l1822
	push $2
	push BYTE_
	cmpje
	cmp0
	jne l1822
	push $1
	push id
	cmpja
	cmp0
	je l1826
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l1826
	push $2
	push BYTE9
	cmpjle
	jmp l1828
l1826:
	push 0
	jmp l1828
l1827:
	push 1
l1828:
	jmp l1829
l1821:
	push 0
	jmp l1829
l1822:
	push 1
l1829:
	cmp0
	je l1830
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l1817
l1830:
	cthis length
	pop $1
l1817:
	jmp l1815
l1816:
	call found,length
	end method
	method isliteral
	cthis check
	cthis getliteralchar
	cmpjne
	cmp0
	je l1832
	push 0
	ret
l1832:
	localint $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop found
	localstring $2
l1833:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1834
	push $1
	push 1
	cthis getb
	pop $2
	push $2
	cthis getliteralchar
	cmpje
	cmp0
	je l1836
	push 1
	ret
	jmp l1835
l1836:
	push $2
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
l1835:
	jmp l1833
l1834:
	push 0
	end method
	method isconst
	localstring $1
	localint $2
	cthis isident
	pop $2
	localint $3
	push 0
	pop $3
l1837:
	push $3
	call vconsts,size
	cmpjl
	cmp0
	je l1838
	jmp l1840
l1839:
	add $3,1
	pop $3
	jmp l1837
l1840:
	push $3
	call vconsts,get
	pop $1
	push $2
	cmp0
	je l1842
	push $1
	push found
	cmpje
	cmp0
	je l1844
	push 1
	ret
l1844:
	jmp l1841
l1842:
	push id
	call $1,length
	cthis getb
	pop found
	push $1
	push found
	cmpje
	cmp0
	je l1846
	push 1
	ret
l1846:
l1841:
	jmp l1839
l1838:
	push 0
	end method
	method gettoken
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
l1847:
	cthis notend
	cmp0
	je l1848
	cthis check
	push " "
	cmpje
	cmp0
	je l1850
	add id,1
	pop id
	jmp l1849
l1850:
	cthis isconst
	cmp0
	je l1852
	push $1
	spushs
	push "$const"
	spop $a
	call [$a],add
	push $1
	spushs
	cthis read
	spop $a
	call [$a],add
	jmp l1851
l1852:
	cthis isreal
	cmp0
	je l1854
	push $1
	spushs
	push "$real"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l1856
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l1856:
	jmp l1853
l1854:
	cthis isint
	cmp0
	je l1858
	push $1
	spushs
	push "$int"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l1860
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l1860:
	jmp l1857
l1858:
	cthis isident
	cmp0
	je l1862
	push $1
	spushs
	push "$alpha"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l1864
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l1864:
	jmp l1861
l1862:
	cthis isliteral
	cmp0
	je l1866
	push $1
	spushs
	push "$literal"
	spop $a
	call [$a],add
	cthis next
	push 2
	popax
	add id,$a
	pop id
	push $2
	cmp0
	je l1868
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l1868:
	jmp l1865
l1866:
	push $1
	spushs
	push "$error"
	spop $a
	call [$a],add
	add id,1
	pop id
l1865:
l1861:
l1857:
l1853:
l1851:
l1849:
	jmp l1847
l1848:
	end method
	method expectdb
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	localstring $4
	localint $5
	push 0
	pop $5
l1869:
	push $5
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1870
	jmp l1872
l1871:
	add $5,1
	pop $5
	jmp l1869
l1872:
	call vtmp2,free
	push 0
	pop $3
l1873:
	push $3
	push $1
	spushs
	push $5
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1874
	jmp l1876
l1875:
	add $3,1
	pop $3
	jmp l1873
l1876:
	push $1
	spushs
	push $5
	push $3
	spop $a
	call [$a],get
	pop $4
	call $4,clear
	push $4
	push ""
	cmpjne
	cmp0
	je l1878
	push $4
	call vtmp2,add
l1878:
	jmp l1875
l1874:
	push "vtmp2"
	push $2
	cthis expectvec
	cmp0
	je l1880
	push $5
	ret
l1880:
	jmp l1871
l1870:
	push 1
	popax
	sub 0,$a
	end method
	method expectvec
	localstring $1
	localint $2
	pop $2
	pop $1
	push 0
	pop id
	push "vtmp1"
	push $2
	cthis gettoken
	push $1
	call vtmp1,veceq
	end method
	method expects
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call vtmp2,vecbuildfromstring
	push "vtmp2"
	push $3
	cthis expectvec
	end method
	method consts=
	push "addbegin"
	call vconsts,withlist
	end method
	method setas
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlex"
	push "buildlex"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlex
	push $1
	spushs
	push "start"
	push "Lexer0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "notend"
	push "Lexer1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getnext"
	push "Lexer2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "next"
	push "Lexer3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "check"
	push "Lexer4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "ischar"
	push "Lexer5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isint"
	push "Lexer6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isreal"
	push "isreal"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbinary"
	push "Lexer7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isident"
	push "isident"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isconst"
	push "isconst"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "_isvar"
	push "_isvar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "read"
	push "Lexer8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isliteral"
	push "isliteral"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettoken"
	push "gettoken"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expects"
	push "expects"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectvec"
	push "expectvec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectdb"
	push "expectdb"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "consts="
	push "consts="
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setliteralchar"
	push "setliteralchar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getliteralchar"
	push "getliteralchar"
	spop $a
	call [$a],addmethod
	end method
	method Lexer0
	localstring $1
	pop $1
	push $1
	cthis set
	push 0
	pop id
	end method
	method Lexer1
	push id
	cthis length
	cmpjl
	end method
	method Lexer2
	push id
	cthis length
	cmpje
	cmp0
	je l1882
	push "null"
	ret
l1882:
	add id,1
	pop id
	push id
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	cthis getb
	end method
	method Lexer3
	call found,length
	popax
	add id,$a
	pop id
	end method
	method Lexer4
	push id
	cthis length
	cmpje
	cmp0
	je l1884
	push "null"
	ret
l1884:
	push id
	push 1
	cthis getb
	pop found
	push found
	end method
	method Lexer5
	localstring $1
	pop $1
	push id
	push 1
	cthis getb
	call $1,contains
	end method
	method Lexer6
	push BYTE0
	push BYTE9
	cthis _isvar
	end method
	method Lexer7
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis _isvar
	end method
	method Lexer8
	cthis next
	push found
	end method
	end class

	class AnimaFx
	method init
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "_buildanfx"
	push "AnimaFx0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_buildanfx
	push $1
	spushs
	push "onsetframe"
	push "AnimaFx1"
	spop $a
	call [$a],addmethod
	end method
	method AnimaFx0
	new db,dbsnd
	push 3
	call dbsnd,dbbuild
	localint $1
	push 0
	pop $1
l1885:
	push $1
	call dbsnd,getrowsno
	cmpjl
	cmp0
	je l1886
	jmp l1888
l1887:
	add $1,1
	pop $1
	jmp l1885
l1888:
	push $1
	push 0
	push $1
	push 0
	call dbsnd,get
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	call dbsnd,set
	jmp l1887
l1886:
	end method
	method AnimaFx1
	localdef $1
	cthis actionname
	push "_"
	pop $b
	popax
	add $a,$b
	cthis framenr
	pop $b
	popax
	add $a,$b
	call dbsnd,findbyrow
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1890
	push "fx"
	push $1
	push 2
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
l1890:
	end method
	end class

	class Localize
	method init
	end method
	method _lang_db
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push "load"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	cthis lang_path
	push ".db"
	pop $b
	popax
	add $a,$b
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method lang_db
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push ""
	cthis _lang_db
	end method
	method lang_dbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "script"
	cthis _lang_db
	end method
	method lang_dbbeh
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "beh"
	cthis _lang_db
	end method
	method lang_path
	localstring $1
	pop $1
	push "lang/"
	call gameapi,getgamename
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	end method
	end class

	class PyzCounter
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	new int,istart
	new int,istop
	new int,istep
	new int,idigits
	push 50
	pop idigits
	new int,iactual
	new string,_sanima
	push $1
	pop _sanima
	push A
	push "idx"
	push 2
	push "itimestep"
	push $2
	cthis vars2
	new gmimgvec,grcnt
	localint $3
	push 0
	pop $3
l1891:
	push $3
	push idigits
	cmpjl
	cmp0
	je l1892
	jmp l1894
l1893:
	add $3,1
	pop $3
	jmp l1891
l1894:
	localstring $4
	push "pcc"
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $1
	push $4
	cthis copyanima
	push $4
	spushs
	spop $a
	call [$a],hide
	push $4
	call grcnt,add
	jmp l1893
l1892:
	push "timcnt"
	push $2
	push "PyzCounter0"
	cthis timer=
	end method
	method PyzCounter0
	push istep
	popax
	add iactual,$a
	pop iactual
	push iactual
	cthis view
	push iactual
	push istop
	cmpje
	cmp0
	je l1896
	cthis getbuildername
	spushs
	cthis getbuildername
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l1895
l1896:
	cthis play
l1895:
	end method
	method getcypher
	localint $1
	pop $1
	push "pcc"
	push _sanima
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method start
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop istart
	push $2
	pop istop
	push $3
	pop istep
	push istart
	pop iactual
	push istart
	cthis view
	call timcnt,play
	end method
	method showcypher
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis getcypher
	pop $3
	push $3
	spushs
	push 0
	push $2
	spop $a
	call [$a],setframe
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method stop
	push 0
	call timcnt,stop
	end method
	method view
	localint $1
	pop $1
	call grcnt,hide
	push 0
	push 0
	call grcnt,setpos
	push $1
	push 0
	cmpje
	cmp0
	je l1898
	push 0
	push 0
	cthis showcypher
	jmp l1897
l1898:
	localint $2
	push 0
	pop $2
l1899:
	push $1
	push 0
	cmpja
	cmp0
	je l1900
	jmp l1902
l1901:
	add $2,1
	pop $2
	jmp l1899
l1902:
	push $2
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	push $d
	cthis showcypher
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	jmp l1901
l1900:
	localint $3
	push 0
	pop $3
	localint $4
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1903:
	push $4
	push 0
	cmpjae
	cmp0
	je l1904
	jmp l1906
l1905:
	sub $4,1
	pop $4
	jmp l1903
l1906:
	push $4
	cthis getcypher
	spushs
	push $3
	push 0
	spop $a
	call [$a],move
	push $3
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis getcypher
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1905
l1904:
l1897:
	end method
	end class

	module advmouse
	method init
	new anima,anmsc
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	call anmsc,hide
	end method
	method set
	localstring $1
	pop $1
	call anmsc,show
	push $1
	push 0
	call anmsc,setframe
	push "anmsc"
	call mouse,setcursor
	call anmsc,hide
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setact
	push "active"
	cthis set
	end method
	method setbut
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	ret
	end method
	end module

	class classadvobject
	method init
	cthis addasadvobject
	end method
	method addasadvobject
	push AdventureGame
	neg
	cmp0
	je l1908
	ret
l1908:
	localstring $1
	cthis getname
	pop $1
	push $1
	call grmsmove,addonce
	push $1
	call grmslrel,addonce
	push $1
	call grmslclick,addonce
	push $1
	call grmsrclick,addonce
	end method
	method removefromadvobjs
	push AdventureGame
	neg
	cmp0
	je l1910
	ret
l1910:
	localstring $1
	cthis getname
	pop $1
	push $1
	call grmsmove,remove
	push $1
	call grmslrel,remove
	push $1
	call grmslclick,remove
	push $1
	call grmsrclick,remove
	end method
	method onmousemove
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method onmouselclick
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method onmouselrel
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method onmouserclick
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	end class

	class classadvanhero
	method init
	end method
	method setashero
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "buildhero"
	push "buildhero"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onendframe"
	push "heroendframe1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildhero
	push $1
	spushs
	push "buildheroframe"
	push "buildheroframe"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onfinish"
	push "herofinish"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getdir"
	push "getdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setdir"
	push "setdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "thisfinish"
	push "thisfinish"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "playspec"
	push "playspec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "playspec2"
	push "playspec2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostop"
	push "herostop"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostart"
	push "herostart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostand"
	push "herostand"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstdfin"
	push "setstdfin"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getpocket"
	push "getpocket"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "haspocket"
	push "haspocket"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstandbase"
	push "setstandbase"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	spop $a
	call [$a],setstdfin
	end method
	method buildheroframe
	localstring $1
	pop $1
	push $1
	spushs
	push "onendframe"
	push "heroendframe"
	spop $a
	call [$a],addmethod
	end method
	method setstdfin
	localstring $1
	pop $1
	push "onstdfinish"
	push $1
	cthis addmethod
	end method
	method setstandbase
	localstring $1
	pop $1
	push $1
	pop _sstandbase
	end method
	method buildhero
	new string,_sbase
	new int,_istate
	push 0
	pop _istate
	new string,_sfinfun
	new string,_sobfin
	new int,_bplaystop
	new int,_iiloscsek
	new int,_itypsort
	new int,idsort
	new string,_sobstart
	new string,_sfunfinstart
	new int,bthisfin
	push 0
	pop bthisfin
	new string,_sstandbase
	push "stand"
	pop _sstandbase
	end method
	method getpocket
	push _spocketpref
	cthis getname
	pop $b
	popax
	add $a,$b
	ret
	end method
	method haspocket
	push _spocketpref
	cthis getname
	pop $b
	popax
	add $a,$b
	call engine,varexist
	ret
	end method
	method thisfinish
	localint $1
	pop $1
	push $1
	pop bthisfin
	end method
	method getdir
	cthis actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	ret
	end method
	method setdir
	localstring $1
	pop $1
	cthis actionname
	spushs
	push 2
	spop $h
	call $h,strsube
	push $1
	pop $b
	popax
	add $a,$b
	cthis framenr
	cthis setframe
	end method
	method playspec
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop _sbase
	push $2
	pop _iiloscsek
	push $3
	pop _itypsort
	push $7
	pop _bplaystop
	push $8
	pop _sobfin
	push $9
	pop _sfinfun
	push $5
	pop _sobstart
	push $6
	pop _sfunfinstart
	push $2
	push 0
	cmpja
	cmp0
	je l1912
	push $3
	push 0
	cmpje
	cmp0
	je l1914
	push 1
	pop idsort
	jmp l1913
l1914:
	push $3
	push 1
	cmpje
	cmp0
	je l1916
	call $2,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
l1916:
l1913:
l1912:
	push $4
	cmp0
	je l1918
	push 1
	pop _istate
	push $1
	push "start"
	pop $b
	popax
	add $a,$b
	push $10
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l1917
l1918:
	push $1
	push $2
	push 0
	cmpja
	cmp0
	je l1920
	push "1"
	push $10
	pop $b
	popax
	add $a,$b
	jmp l1919
l1920:
	push $10
l1919:
	pop $b
	popax
	add $a,$b
	push 0
	cthis setframe
	cthis herostart
l1917:
	end method
	method playspec2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call $1,length
	push 2
	cmpjl
	cmp0
	je l1922
	push ""
	jmp l1921
l1922:
	push 2
	call $1,strsube
l1921:
	pop $4
	push $4
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	push $2
	push $3
	push 0
	push 2
	call $1,gete
	cthis playspec
	end method
	method herostop
	push 3
	pop _istate
	push _bplaystop
	cmp0
	je l1924
	push 0
	pop _bplaystop
	push 1
	cthis thisfinish
	push _sbase
	push "stop"
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l1923
l1924:
	push 1
	cthis stop
l1923:
	end method
	method herostart
	push 2
	pop _istate
	push _sbase
	push _iiloscsek
	push 0
	cmpja
	cmp0
	je l1926
	push idsort
	jmp l1925
l1926:
	push ""
l1925:
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
	end method
	method herofinish
	push _istate
	push 2
	cmpje
	cmp0
	je l1928
	push bthisfin
	jmp l1930
l1928:
	push 0
	jmp l1930
l1929:
	push 1
l1930:
	cmp0
	je l1931
	push 3
	pop _istate
l1931:
	push _istate
	push 0
	cmpje
	cmp0
	je l1933
	cthis herostand
	cthis onstdfinish
	localstring $1
	cthis getname
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push $1
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $1
	push "_ACTION_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l1932
l1933:
	push _istate
	push 1
	cmpje
	cmp0
	je l1935
	cthis herostart
	push _sobstart
	push _sfunfinstart
	cthis callfun
	jmp l1934
l1935:
	push _istate
	push 2
	cmpje
	cmp0
	je l1937
	localstring $3
	push _iiloscsek
	push 0
	cmpja
	cmp0
	je l1939
	push _itypsort
	push 0
	cmpje
	cmp0
	je l1941
	push idsort
	push _iiloscsek
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
	jmp l1940
l1941:
	push _itypsort
	push 1
	cmpje
	cmp0
	je l1943
	call _iiloscsek,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
l1943:
l1940:
	push _sbase
	push idsort
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1938
l1939:
	cthis actionname
	pop $3
l1938:
	push $3
	cthis play
	jmp l1936
l1937:
	push _istate
	push 3
	cmpje
	cmp0
	je l1945
	push 0
	pop _istate
	cthis herostand
	push 1
	cthis thisfinish
	push _sobfin
	push _sfinfun
	cthis callfun
l1945:
l1936:
l1934:
l1932:
	end method
	method herostand
	localstring $1
	push _sstndpref
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l1947
	push _sstandbase
	cthis actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	pop $b
	popax
	add $a,$b
	cthis play
	push $1
	spushs
	spop $a
	call [$a],play
l1947:
	end method
	method heroendframe1
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method heroendframe
	cthis getposy
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	cthis setz
	cthis haspocket
	cmp0
	je l1949
	cthis getpocket
	spushs
	cthis getposx
	cthis getposy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],pocketpos
l1949:
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classadvhero
	method init
	new string,_sanim
	new int,_bisvecile
	push 0
	pop _bisvecile
	new string,_sbase
	push "null"
	pop _sbase
	new string,_sbase2
	push "null"
	pop _sbase2
	new int,izakres
	push 0
	pop izakres
	new string,_sbs2
	new string,_sbutoper
	new string,_smetpart
	new string,_simgbut
	new string,_sptfname
	cthis getname
	pop _sptfname
	end method
	method getptfname
	push _sptfname
	ret
	end method
	method link
	localstring $1
	pop $1
	push $1
	pop _sanim
	end method
	method link2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis link
	push $2
	cthis checkamounts
	end method
	method anstand
	push _sanim
	spushs
	push "stand"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method ansay
	push _sanim
	spushs
	push "talk"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method getdir
	push _sanim
	spushs
	spop $a
	call [$a],actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	end method
	method nofpieces
	cthis getdir
	cthis nofpiecesdir
	ret
	end method
	method nofpiecesdir
	localstring $1
	pop $1
	push _bisvecile
	cmp0
	je l1951
	push $1
	call vecdirs,find
	call vecile,get
	jmp l1950
l1951:
	push 0
l1950:
	ret
	end method
	method setbase2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis setbase
	push $2
	pop _sbase2
	end method
	method setbase
	localstring $1
	pop $1
	push $1
	pop _sbase
	call $1,length
	pop izakres
	end method
	method getpropdir
	localstring $1
	pop $1
	push $1
	push "auto"
	cmpje
	cmp0
	je l1953
	cthis getdir
	jmp l1952
l1953:
	push $1
l1952:
	ret
	end method
	method _buildamounts
	push _bisvecile
	neg
	cmp0
	je l1955
	push 1
	pop _bisvecile
	new vector,vecdirs
	push "string"
	call vecdirs,type
	push "begin"
	push "uu"
	push "ru"
	push "rr"
	push "rd"
	push "dd"
	push "ld"
	push "ll"
	push "lu"
	call vecdirs,beginadd
	new vector,vecile
l1955:
	end method
	method _clearvecile
	call vecile,free
	push 8
	push 0
	call vecile,resize
	end method
	method checkamounts
	localstring $1
	pop $1
	push $1
	cthis setbase
	cthis _buildamounts
	cthis _clearvecile
	push _sanim
	push "null"
	cmpje
	cmp0
	je l1957
	ret
l1957:
	localint $2
	push _sanim
	spushs
	spop $a
	call [$a],nofactions
	pop $2
	localstring $3
	localint $4
	localint $5
	push 0
	pop $5
l1958:
	push $5
	push $2
	cmpjl
	cmp0
	je l1959
	jmp l1961
l1960:
	add $5,1
	pop $5
	jmp l1958
l1961:
	push _sanim
	spushs
	push $5
	spop $a
	call [$a],nameofaction
	pop $3
	push 0
	push izakres
	call $3,getb
	push $1
	cmpje
	cmp0
	je l1963
	push izakres
	push 10
	call $3,getb
	pop $4
	push $4
	push 0
	cmpja
	cmp0
	je l1965
	push 0
	push 2
	call $3,gete
	call vecdirs,find
	call vecile,vecinc
l1965:
l1963:
	jmp l1960
l1959:
	end method
	method getanim
	push _sanim
	end method
	method calllastfun
	cthis getcallfin
	spushs
	spop $d
	cthis [$d]
	push _simgbut
	spushs
	spop $a
	call [$a],checkonce
	end method
	method _calllastfunfin
	cthis calllastfunfin
	cthis advmsunlock
	end method
	method calllastfunfin
	cthis getcallfin
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method getcallfin
	push _sanim
	push _smetpart
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	ret
	end method
	method _cplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	cthis advmslock
	push _sanim
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push $1
	push "null"
	cmpje
	cmp0
	je l1967
	push _sanim
	spushs
	push $3
	cthis getpropdir
	spop $a
	call [$a],setdir
	push $2
	push "null"
	cmpjne
	cmp0
	je l1969
	push $2
	spushs
	spop $d
	cthis [$d]
l1969:
	jmp l1966
l1967:
	push _sanim
	spushs
	push $1
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	cthis getname
	push $2
	push $3
	cthis getpropdir
	spop $a
	call [$a],playspec
l1966:
	end method
	method _cplay1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "_cplay1_2"
	push $2
	cthis _cplay
	end method
	method _cplay1_2
	cthis calllastfun
	cthis _callbehs
	end method
	method _callbehs
	cthis advmsunlock
	cthis callbehs
	end method
	method callbehs
	localstring $1
	cthis getcallfin
	pop $1
	push "beh_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l1971
	push "beh_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getname
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l1970
l1971:
	cthis _calllastfunfin
l1970:
	end method
	method _cplay2_2
	cthis calllastfun
	push _sbs2
	push "_callbehs"
	cthis getdir
	cthis _cplay
	end method
	method _cplay2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	pop _sbs2
	push $1
	push "_cplay2_2"
	push $3
	cthis _cplay
	end method
	method no_turn
	localstring $1
	pop $1
	localstring $2
	push _spathpref
	push _sanim
	pop $b
	popax
	add $a,$b
	pop $2
	localstring $3
	push _simgbut
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	pop $3
	push $2
	call engine,varexist
	cmp0
	je l1973
	cthis getdir
	push $3
	cmpjne
	jmp l1975
l1973:
	push 0
	jmp l1975
l1974:
	push 1
l1975:
	cmp0
	je l1976
	push $2
	spushs
	push $3
	cthis getname
	push $1
	spop $a
	call [$a],heroturn
	push 0
	jmp l1972
l1976:
	push 1
l1972:
	end method
	method _heroplay1
	push _simgbut
	cthis heroplay1
	end method
	method _heroplay2
	push _simgbut
	cthis heroplay2
	end method
	method heroplay1
	localstring $1
	pop $1
	push $1
	pop _simgbut
	push "_heroplay1"
	cthis no_turn
	cmp0
	je l1978
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $1
	spushs
	spop $a
	call [$a],getbase1
	push $1
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay1
l1978:
	end method
	method heroplay2
	localstring $1
	pop $1
	push $1
	pop _simgbut
	push "_heroplay2"
	cthis no_turn
	cmp0
	je l1980
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $1
	spushs
	spop $a
	call [$a],getbase1
	push $1
	spushs
	spop $a
	call [$a],getbase2
	push $1
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay2
l1980:
	end method
	method _setbase2
	localstring $1
	pop $1
	push $1
	push 1
	call modadv,get
	push $1
	push 2
	call modadv,get
	cthis setbase2
	end method
	method _setbase
	localstring $1
	pop $1
	push $1
	push 1
	call modadv,get
	cthis setbase
	end method
	method heroplay3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push 1
	call modadv,get
	spop $a
	call [$a],setbutbase1
	push $1
	spushs
	push $2
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase2
	push $1
	cthis heroplay2
	end method
	end class

	new snd,_fxtakeitem
	class classherotaker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "_PICKUP_"
	pop _smetpart
	end method
	method herotake
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method calllastfun
	push _sanim
	spushs
	spop $a
	call [$a],haspocket
	cmp0
	je l1982
	call _fxtakeitem,play
	push _simgbut
	spushs
	spop $a
	call [$a],hideontake
	cmp0
	je l1984
	push _simgbut
	spushs
	spop $a
	call [$a],hide
	jmp l1983
l1984:
	push _simgbut
	spushs
	push "but"
	spop $a
	call [$a],setbuttyp
l1983:
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	push _sbutoper
	push _simgbut
	spushs
	spop $a
	call [$a],getpocket
	spop $a
	call [$a],additem
l1982:
	clparent classadvhero,calllastfun
	end method
	end class

	class classherolooker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "_OPERATE_"
	pop _smetpart
	end method
	method herolook
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method herooperate
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method heroopendoor
	localstring $1
	pop $1
	push $1
	push "open:"
	cthis heroplay3
	end method
	method heroclosedoor
	localstring $1
	pop $1
	push $1
	push "close:"
	cthis heroplay3
	end method
	end class

	class classherouser
	parent classadvhero
	method init
	clparent classadvhero,init
	new string,_stool
	end method
	method herouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _stool
	push "_USE_"
	push _stool
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	pop _smetpart
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	spop $a
	call [$a],itemhide
	push $2
	pop _simgbut
	push $2
	spushs
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $2
	spushs
	spop $a
	call [$a],baseuse1
	push $2
	spushs
	spop $a
	call [$a],baseuse2
	push $2
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay2
	end method
	method calllastfun
	push _sanim
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis getcallfin
	spushs
	spop $d
	cthis [$d]
	end method
	method calllastfunfin
	push _sanim
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis getcallfin
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method callbehs
	localstring $1
	cthis getname
	pop $1
	push "beh_"
	cthis getcallfin
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l1986
	push "beh_"
	cthis getcallfin
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l1985
l1986:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l1988
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l1987
l1988:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l1990
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l1989
l1990:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE"
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l1992
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE"
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l1991
l1992:
	cthis _calllastfunfin
l1991:
l1989:
l1987:
l1985:
	end method
	end class

	class classpathf
	parent classadvhero
	method init
	clparent classadvhero,init
	new path,ptf
	new string,swalkto
	push "null"
	pop swalkto
	new string,_sfunnopath
	push "null"
	pop _sfunnopath
	new string,_sfunvisit
	push "null"
	pop _sfunvisit
	new int,destx
	new int,desty
	new int,bzmien
	push 0
	pop bzmien
	new int,bzatrzym
	push 0
	pop bzatrzym
	new string,_sitem
	push "null"
	pop _sitem
	new string,_sobzmien
	push "null"
	pop _sobzmien
	new string,_sfunzmien
	push "null"
	pop _sfunzmien
	new int,_istep
	new int,_itmpspeed
	push A
	push "ispathto"
	push 1
	cthis vars2
	push "onfinish"
	push "_cptffin"
	call ptf,addmethod
	push "onvisit"
	push "_cptvisit"
	call ptf,addmethod
	push "_cptfstdreach"
	push "_cptfstdarrive"
	cthis addsigs
	push "go:"
	cthis _setbase
	end method
	method _buildan
	localstring $1
	pop $1
	push $1
	call ptf,linkanima
	push $1
	cthis link
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	pop _istep
	push $2
	push $3
	push $4
	push $5
	push $6
	call ptf,build
	push $1
	cthis _buildan
	end method
	method buildfrom
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	pop _istep
	push $2
	push $3
	call ptf,copy
	push $1
	cthis _buildan
	end method
	method addsigs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l1994
	push "onreach"
	push $1
	call ptf,addmethod
l1994:
	push $2
	push "null"
	cmpjne
	cmp0
	je l1996
	push "onarrive"
	push $2
	call ptf,addmethod
l1996:
	end method
	method sigonnopath
	localstring $1
	pop $1
	push $1
	pop _sfunnopath
	end method
	method sigonvisit
	localstring $1
	pop $1
	push $1
	pop _sfunvisit
	end method
	method _cptfstdreach
	localstring $1
	pop $1
	end method
	method _cptfstdarrive
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,move
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,setpos
	end method
	method show
	call ptf,show
	end method
	method hide
	call ptf,hide
	end method
	method enable
	localint $1
	pop $1
	push $1
	call ptf,enable
	end method
	method disable
	localint $1
	pop $1
	push $1
	call ptf,disable
	end method
	method setanstep
	localint $1
	pop $1
	push $1
	pop _istep
	push $1
	call ptf,setanstep
	end method
	method mulspeed
	localint $1
	pop $1
	push $1
	push _istep
	pop $b
	popax
	mul $a,$b
	pop _itmpspeed
	push _itmpspeed
	call ptf,setanstep
	end method
	method retstep
	push _istep
	cthis setanstep
	end method
	method getanstep
	push _istep
	ret
	end method
	method getposx
	call ptf,getposx
	ret
	end method
	method getposy
	call ptf,getposy
	ret
	end method
	method getpx
	call ptf,getpx
	ret
	end method
	method getpy
	call ptf,getpy
	ret
	end method
	method getidan
	call ptf,getidan
	ret
	end method
	method getidan2
	call ptf,getidan2
	ret
	end method
	method getidgo
	call ptf,getidgo
	ret
	end method
	method getidanpath
	call ptf,getidanpath
	ret
	end method
	method getidan2path
	call ptf,getidan2path
	ret
	end method
	method getidgopath
	call ptf,getidgopath
	ret
	end method
	method excludev
	localint $1
	pop $1
	push $1
	call ptf,excludev
	end method
	method linkfilter
	call ptf,linkfilter
	end method
	method unlinkfilter
	call ptf,unlinkfilter
	end method
	method unlinkanima
	call ptf,unlinkanima
	end method
	method linkanima
	localstring $1
	pop $1
	push $1
	call ptf,linkanima
	end method
	method setscalepower
	localreal $1
	pop $1
	push $1
	call ptf,setscalepower
	end method
	method setzsize
	localreal $1
	pop $1
	push $1
	call ptf,setzsize
	end method
	method iswayto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,iswayto
	ret
	end method
	method scalean
	call ptf,scalean
	end method
	method getfromver
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	call ptf,getfromver
	ret
	end method
	method getgover
	localint $1
	pop $1
	push $1
	call ptf,getgover
	ret
	end method
	method getanver
	localint $1
	pop $1
	push $1
	call ptf,getanver
	ret
	end method
	method getxver
	localint $1
	pop $1
	push $1
	call ptf,getxver
	ret
	end method
	method getyver
	localint $1
	pop $1
	push $1
	call ptf,getyver
	ret
	end method
	method getbyname
	localint $1
	pop $1
	push $1
	call ptf,getbyname
	ret
	end method
	method walkbase
	localstring $1
	pop $1
	push $1
	call ptf,setbase
	end method
	method letturn
	localint $1
	pop $1
	push $1
	call ptf,letturn
	end method
	method canturn
	call ptf,canturn
	end method
	method vecdir
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,vecdir
	end method
	method ptfgoto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,goto
	end method
	method setmovetype
	localint $1
	pop $1
	push $1
	call ptf,setmovetype
	end method
	method walkto2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop swalkto
	push $2
	push $3
	cthis cangoto
	cmp0
	je l1998
	push $2
	push $3
	call ptf,goto
	pop $2
	jmp l1997
l1998:
	push _sfunnopath
	push "null"
	cmpjne
	cmp0
	je l2000
	push _sfunnopath
	spushs
	spop $d
	cthis [$d]
l2000:
l1997:
	end method
	method walkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop swalkto
	push $1
	push "null"
	cmpje
	cthis letturn
	cthis iswalking
	cmp0
	je l2002
	push $2
	push $3
	call ptf,iswayto
	cmp0
	je l2004
	push 1
	pop bzmien
	push $2
	pop destx
	push $3
	pop desty
	push 0
	ret
	jmp l2003
l2004:
	push 1
	pop bzatrzym
	push 1
	popax
	sub 0,$a
	ret
l2003:
	jmp l2001
l2002:
	push $2
	push $3
	call ptf,goto
	ret
l2001:
	end method
	method iswaytover
	localint $1
	pop $1
	push slastpathf
	spushs
	push $1
	spop $a
	call [$a],getbyname
	pop $1
	push $1
	cthis getxver
	cthis getposx
	pop $b
	popax
	sub $a,$b
	push $1
	cthis getyver
	cthis getposy
	pop $b
	popax
	sub $a,$b
	call ptf,iswayto
	end method
	method length
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,length
	end method
	method lengthver
	localint $1
	pop $1
	push slastpathf
	spushs
	push $1
	spop $a
	call [$a],getbyname
	pop $1
	push $1
	cthis getxver
	cthis getposx
	pop $b
	popax
	sub $a,$b
	push $1
	cthis getyver
	cthis getposy
	pop $b
	popax
	sub $a,$b
	cthis length
	end method
	method goto
	localint $1
	localint $2
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	cthis walkto
	ret
	end method
	method gotorel
	localint $1
	localint $2
	pop $2
	pop $1
	push _sanim
	spushs
	spop $a
	call [$a],getpx
	push $1
	pop $b
	popax
	add $a,$b
	push _sanim
	spushs
	spop $a
	call [$a],getey
	push $2
	pop $b
	popax
	add $a,$b
	cthis goto
	ret
	end method
	method turn
	localstring $1
	pop $1
	push $1
	call ptf,turn
	end method
	method iswalking
	call ptf,iswalking
	ret
	end method
	method stand
	call ptf,stand
	end method
	method stop
	localint $1
	pop $1
	push $1
	call ptf,stop
	end method
	method getidpath
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,getidpath
	ret
	end method
	method cangoto
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	call ptf,getidpath
	pop $3
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l2006
	push 0
	jmp l2005
l2006:
	push $3
	call ptf,isenabled
l2005:
	ret
	end method
	method _cptfreachpocket
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herolook
	end method
	method _cptfreachbut
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herolook
	end method
	method _cptfreachdoors
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herooperate
	end method
	method _cptfreachitem
	cthis getptfname
	push "take"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herotake
	end method
	method _cptfherofin
	cthis herostand
	push swalkto
	push "null"
	cmpjne
	cmp0
	je l2008
	push _sanim
	push "_REACH_"
	pop $b
	popax
	add $a,$b
	push swalkto
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	cthis ismainhero
	cmp0
	je l2010
	localstring $1
	push "null"
	pop $1
	push _sanim
	spushs
	spop $a
	call [$a],haspocket
	cmp0
	je l2012
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	spop $a
	call [$a],getitem
	pop $1
l2012:
	push $1
	push "null"
	cmpjne
	cmp0
	je l2014
	cthis getptfname
	push "use"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push swalkto
	spop $a
	call [$a],herouse
	jmp l2013
l2014:
	push "_cptfreach"
	push swalkto
	spushs
	spop $a
	call [$a],gettyp
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2013:
l2010:
	push "null"
	pop swalkto
	jmp l2007
l2008:
	push _sanim
	push "_ARRIVE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis _cptheroendpath
l2007:
	end method
	method sigonzmien
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sobzmien
	push $2
	pop _sfunzmien
	end method
	method _cptheroendpath
	push _sfinob
	push _sfinfun
	cthis callfun
	push _bylfin
	cmp0
	je l2016
	push 0
	pop _bylfin
	jmp l2015
l2016:
	push "null"
	pop _sfinfun
	push "null"
	pop _sfinob
l2015:
	end method
	method _cptfnopath
	push _sanim
	push "_NOPATH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _cptfvisit
	push _sanim
	push "_VISIT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method prepareforhero
	push "onfinish"
	push "_cptfherofin"
	call ptf,addmethod
	new string,_sfinob
	new string,_sfinfun
	new int,_bylfin
	push "_cptfnopath"
	cthis sigonnopath
	push "_cptfvisit"
	cthis sigonvisit
	end method
	method herowalkto2
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	push $3
	push $4
	cthis herowalkto
	end method
	method herowalkto
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push _sstndpref
	push _sanim
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],stop
	push $4
	pop _sfinob
	push $5
	pop _sfinfun
	push $5
	push "null"
	cmpjne
	cmp0
	je l2018
	push 1
	pop _bylfin
l2018:
	push $1
	push $2
	push $3
	cthis walkto
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l2020
	push 0
	pop ispathto
	jmp l2019
l2020:
	push 1
	pop ispathto
l2019:
	end method
	method heroturn
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	pop _sfinob
	push $3
	pop _sfinfun
	push $3
	push "null"
	cmpjne
	cmp0
	je l2022
	push 1
	pop _bylfin
l2022:
	push $1
	cthis turn
	end method
	method advgoto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	push "null"
	cthis herowalkto2
	end method
	method advwalkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	push "null"
	cthis herowalkto
	end method
	method advvisit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],reachable
	cmp0
	je l2024
	push $1
	push $1
	spushs
	spop $a
	call [$a],getgox
	push $1
	spushs
	spop $a
	call [$a],getgoy
	cthis advwalkto
l2024:
	end method
	method herostand
	cthis retstep
	cthis stand
	push _sanim
	spushs
	spop $a
	call [$a],herostand
	end method
	method stophero
	cthis herostand
	push 1
	pop bzatrzym
	end method
	method _cptvisit
	push _sfunvisit
	spushs
	spop $d
	cthis [$d]
	push bzmien
	cmp0
	je l2026
	push 0
	pop bzmien
	push destx
	push desty
	cthis goto
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l2028
	push _sfunnopath
	spushs
	spop $d
	cthis [$d]
	jmp l2027
l2028:
	push _sobzmien
	push _sfunzmien
	cthis callfun
l2027:
	jmp l2025
l2026:
	push bzatrzym
	cmp0
	je l2030
	push 0
	pop bzatrzym
	push 1
	cthis stop
l2030:
l2025:
	end method
	method _cptffin
	push swalkto
	push "null"
	cmpjne
	cmp0
	je l2032
	push swalkto
	call ptf,onreach
	push "null"
	pop swalkto
	jmp l2031
l2032:
	call ptf,onarrive
l2031:
	end method
	method anposx
	push _sanim
	spushs
	spop $a
	call [$a],getposx
	end method
	method anposy
	push _sanim
	spushs
	spop $a
	call [$a],getposy
	end method
	method bzmien
	push bzmien
	end method
	method bzmien=
	localint $1
	pop $1
	push $1
	pop bzmien
	end method
	method checkreach
	localstring $1
	pop $1
	push ispathto
	neg
	cmp0
	je l2034
	push $1
	push "null"
	cmpjne
	cmp0
	je l2034
	cthis behplaying
	neg
	jmp l2036
l2034:
	push 0
	jmp l2036
l2035:
	push 1
l2036:
	cmp0
	je l2037
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_NOPATH_"
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	cthis playbehif
	neg
	pop _b_rewind
l2037:
	end method
	end class

	class classwalkerqueue
	method init
	new timer,timwq
	push 1
	call timwq,settick
	push 1
	call timwq,setcycle
	push "onfinish"
	push "_timwqfin"
	call timwq,addmethod
	new vector,vecpt
	push "string"
	call vecpt,type
	new int,iverlen
	push 1
	pop iverlen
	new int,igox
	new int,igoy
	new string,_simg
	new int,bniezmien
	push 1
	pop bniezmien
	end method
	method _timwqfin
	cthis checkqueue
	cthis play
	end method
	method start
	end method
	method ptpos
	localstring $1
	pop $1
	push $1
	call vecpt,find
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	cthis ptpos
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l2039
	push $2
	push 0
	cmpje
	cmp0
	je l2041
	call vecpt,first
	spushs
	push "null"
	push "null"
	spop $a
	call [$a],sigonzmien
	push 0
	call vecpt,removeat
	call vecpt,size
	cmp0
	je l2043
	call vecpt,first
	spushs
	cthis getname
	push "ptzmien"
	spop $a
	call [$a],sigonzmien
l2043:
	jmp l2040
l2041:
	push $2
	call vecpt,removeat
l2040:
l2039:
	end method
	method stop
	push 0
	call timwq,stop
	end method
	method add
	localstring $1
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],anposx
	push $1
	spushs
	spop $a
	call [$a],anposy
	spop $a
	call [$a],iswayto
	popax
	push $1
	call vecpt,add
	call vecpt,size
	push 1
	cmpje
	cmp0
	je l2045
	call vecpt,first
	spushs
	cthis getname
	push "ptzmien"
	spop $a
	call [$a],sigonzmien
l2045:
	end method
	method ptzmien
	push 0
	pop bniezmien
	push _simg
	push igox
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push igoy
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	cthis walkto
	call vecpt,first
	spushs
	push 0
	spop $a
	call [$a],bzmien=
	push 1
	pop bniezmien
	end method
	method goto
	localint $1
	localint $2
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	cthis walkto
	end method
	method visit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],reachable
	cmp0
	je l2047
	call vecpt,first
	push "_WALKTO_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $1
	push $1
	spushs
	spop $a
	call [$a],getgox
	push $1
	spushs
	spop $a
	call [$a],getgoy
	cthis walkto
l2047:
	end method
	method setverlen
	localint $1
	pop $1
	push $1
	pop iverlen
	end method
	method stand
	localint $1
	push 0
	pop $1
l2048:
	push $1
	call vecpt,size
	cmpjl
	cmp0
	je l2049
	jmp l2051
l2050:
	add $1,1
	pop $1
	jmp l2048
l2051:
	push $1
	call vecpt,get
	spushs
	push 0
	spop $a
	call [$a],stop
	push $1
	call vecpt,get
	spushs
	spop $a
	call [$a],herostand
	jmp l2050
l2049:
	end method
	method mulspeed
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l2052:
	push $2
	call vecpt,size
	cmpjl
	cmp0
	je l2053
	jmp l2055
l2054:
	add $2,1
	pop $2
	jmp l2052
l2055:
	push $2
	call vecpt,get
	spushs
	push $1
	spop $a
	call [$a],mulspeed
	jmp l2054
l2053:
	end method
	method walkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop igox
	push $3
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop igoy
	push $1
	pop _simg
	push 1
	pop iverlen
	localint $4
	call vecpt,size
	pop $4
	push $4
	push 0
	cmpjle
	cmp0
	je l2057
	ret
l2057:
	localstring $5
	call vecpt,first
	pop $5
	push $5
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],advwalkto
	localint $6
	localint $7
	localstring $8
	localint $9
	push 1
	pop $9
l2058:
	push $9
	push $4
	cmpjl
	cmp0
	je l2059
	jmp l2061
l2060:
	add $9,1
	pop $9
	jmp l2058
l2061:
	push $9
	call vecpt,get
	pop $8
	push $5
	spushs
	spop $a
	call [$a],getidgo
	pop $7
	push bniezmien
	cmp0
	je l2063
	push $5
	spushs
	push iverlen
	spop $a
	call [$a],getgover
	pop $6
	jmp l2062
l2063:
	push $8
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],advwalkto
	push $8
	spushs
	push $9
	push iverlen
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],getgover
	pop $6
l2062:
	push $6
	push 0
	cmpjl
	cmp0
	je l2065
	push $5
	spushs
	push iverlen
	spop $a
	call [$a],getgover
	pop $6
	push $6
	push 0
	cmpjl
	cmp0
	je l2067
	push $5
	spushs
	spop $a
	call [$a],getidan
	pop $6
l2067:
l2065:
	push $6
	push $7
	cmpje
	cmp0
	je l2069
	push bniezmien
	jmp l2071
l2069:
	push 0
	jmp l2071
l2070:
	push 1
l2071:
	cmp0
	je l2072
	push 1
	popax
	sub 0,$a
	pop $6
l2072:
	push $8
	pop $5
	push $6
	push 0
	cmpjae
	cmp0
	je l2074
	push $8
	spushs
	push "null"
	push $8
	spushs
	push $6
	spop $a
	call [$a],getxver
	push $8
	spushs
	push $6
	spop $a
	call [$a],getyver
	spop $a
	call [$a],advwalkto
	jmp l2073
l2074:
	push $8
	spushs
	push 0
	spop $a
	call [$a],stop
	push $8
	spushs
	spop $a
	call [$a],herostand
l2073:
	jmp l2060
l2059:
	push $5
	spushs
	push $1
	spop $a
	call [$a],checkreach
	end method
	method checkqueue
	localint $1
	call vecpt,size
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l2076
	ret
l2076:
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localint $7
	push 0
	pop $7
l2077:
	push $7
	push $1
	cmpjl
	cmp0
	je l2078
	jmp l2080
l2079:
	add $7,1
	pop $7
	jmp l2077
l2080:
	push $7
	call vecpt,get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],iswalking
	cmp0
	je l2082
	push $3
	spushs
	spop $a
	call [$a],getidan
	pop $5
	push $3
	spushs
	spop $a
	call [$a],getidan2
	pop $6
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $2
l2083:
	push $2
	push $1
	cmpjl
	cmp0
	je l2084
	jmp l2086
l2085:
	add $2,1
	pop $2
	jmp l2083
l2086:
	push $2
	call vecpt,get
	pop $4
	push $4
	spushs
	spop $a
	call [$a],iswalking
	cmp0
	je l2088
	push $4
	spushs
	push $5
	spop $a
	call [$a],excludev
	push $4
	spushs
	push $6
	spop $a
	call [$a],excludev
l2088:
	jmp l2085
l2084:
l2082:
	jmp l2079
l2078:
	end method
	end class

	class classstndgroup
	method init
	new gmobjvec,grstnd
	end method
	method pause
	push "lock"
	call grstnd,eval
	cthis stop
	end method
	method resume
	push igmstate
	push 0
	cmpje
	cmp0
	je l2090
	push "unlock"
	call grstnd,eval
	cthis play
l2090:
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grstnd,add
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call grstnd,remove
	end method
	method stop
	push "stop"
	call grstnd,eval
	end method
	method play
	push "play"
	call grstnd,eval
	end method
	method reset
	push "reset"
	call grstnd,eval
	end method
	end class

	class classadvstander
	parent classlocker
	method init
	clparent classlocker,init
	new timer,timstand
	push 1
	call timstand,settick
	new int,_i_idle
	push 12000
	pop _i_idle
	push "onfinish"
	push "_timstandfin"
	call timstand,addmethod
	new string,sanim
	cthis getname
	pop sanim
	push _sstndpref
	call sanim,strsubbs
	pop sanim
	cthis _make_idle
	new string,_sbeh
	push "beh_"
	push sanim
	pop $b
	popax
	add $a,$b
	push "_IDLE"
	pop $b
	popax
	add $a,$b
	pop _sbeh
	cthis getname
	call modstnd,add
	end method
	method _make_idle
	push _i_idle
	call _i_idle,rand
	pop $b
	popax
	add $a,$b
	call timstand,delay
	end method
	method _timstandfin
	cthis _make_idle
	localstring $1
	call gameapi,getgamename
	pop $1
	push $1
	spushs
	push _sbeh
	spop $a
	call [$a],behexist
	cmp0
	je l2092
	cthis getlock
	neg
	jmp l2094
l2092:
	push 0
	jmp l2094
l2093:
	push 1
l2094:
	cmp0
	je l2095
	push $1
	spushs
	push _sbeh
	spop $a
	call [$a],playbeh
l2095:
	end method
	method play
	cthis getlock
	neg
	cmp0
	je l2097
	call timstand,isplaying
	neg
	jmp l2099
l2097:
	push 0
	jmp l2099
l2098:
	push 1
l2099:
	cmp0
	je l2100
	call timstand,play
l2100:
	end method
	method stop
	push 0
	call timstand,stop
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	pop _i_idle
	push _i_idle
	push 0
	cmpjle
	cmp0
	je l2102
	push 1
	pop _i_idle
l2102:
	push $1
	call timstand,setdelay
	end method
	method reset
	cthis stop
	cthis play
	end method
	end class

	class classtalker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "talk:"
	cthis _setbase
	new snd,sndtalk
	call sndtalk,buildfullname
	push 0
	push 1
	call sndtalk,setstartstopflag
	push "onfinish"
	push "_ctalkfin"
	call sndtalk,addmethod
	new timer,timtalk
	push 1
	call timtalk,settick
	new real,rdelay
	push 1.0
	pop rdelay
	push "onfinish"
	push "_ctalkfin"
	call timtalk,addmethod
	new gmimgvec,txttalk
	new int,_iletxt
	push 10
	pop _iletxt
	localstring $1
	localint $2
	push 0
	pop $2
l2103:
	push $2
	push _iletxt
	cmpjl
	cmp0
	je l2104
	jmp l2106
l2105:
	add $2,1
	pop $2
	jmp l2103
l2106:
	push "txttalk"
	push $2
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	call txttalk,add
	jmp l2105
l2104:
	new font,fonttalk
	call txttalk,hide
	new vector,vecpom
	push "string"
	call vecpom,type
	new int,iTxtLim
	push 30
	pop iTxtLim
	new int,irtxt
	new int,igtxt
	new int,ibtxt
	new string,stextdb
	new string,_swav
	cthis buildfullname
	new string,stalktype
	push "snd"
	cthis settalktype
	end method
	method set
	localstring $1
	pop $1
	push $1
	cthis link
	end method
	method settextdb
	localstring $1
	pop $1
	push $1
	pop stextdb
	end method
	method setfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call fonttalk,load
	push "setfont"
	push "fonttalk"
	call txttalk,eval1
	end method
	method setsnd
	localstring $1
	pop $1
	push ".wav"
	call $1,contains
	neg
	cmp0
	je l2108
	push $1
	pop _swav
	push ".wav"
	popax
	add $1,$a
	pop $1
	jmp l2107
l2108:
	push ".wav"
	call $1,strsubes
	pop _swav
l2107:
	push $1
	call sndtalk,advloadsnd
	end method
	method herosay1
	localstring $1
	pop $1
	push 1
	push 1
	push 1
	push "null"
	push $1
	cthis herosay
	end method
	method herosay
	localint $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis getdir
	cthis herosaydir
	end method
	method herosaydir
	localint $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push _sanim
	spushs
	push 0
	spop $a
	call [$a],thisfinish
	push $2
	neg
	cmp0
	je l2110
	push _sanim
	spushs
	push _sbase
	push $6
	cthis nofpiecesdir
	push $1
	push $2
	push "null"
	push "null"
	push $3
	push $4
	push $5
	push $6
	spop $a
	call [$a],playspec
	push stalktype
	spushs
	spop $d
	cthis [$d]
	jmp l2109
l2110:
	push _sanim
	spushs
	push _sbase
	push $6
	cthis nofpiecesdir
	push $1
	push $2
	cthis getfullname
	push "_ctalkstart"
	push $3
	push $4
	push $5
	push $6
	spop $a
	call [$a],playspec
l2109:
	end method
	method thisfinish
	localint $1
	pop $1
	push _sanim
	spushs
	push $1
	spop $a
	call [$a],thisfinish
	end method
	method stop
	localint $1
	pop $1
	push "snd"
	call stalktype,contains
	cmp0
	je l2112
	push $1
	call sndtalk,stop
	push 0
	call timtalk,stop
	jmp l2111
l2112:
	push $1
	call timtalk,stop
l2111:
	end method
	method settalktype
	localstring $1
	pop $1
	push "_cplay"
	pop stalktype
	push "snd"
	call $1,contains
	cmp0
	je l2114
	push "snd"
	popax
	add stalktype,$a
	pop stalktype
l2114:
	push "txt"
	call $1,contains
	cmp0
	je l2116
	push "txt"
	popax
	add stalktype,$a
	pop stalktype
l2116:
	push "film"
	call $1,contains
	cmp0
	je l2118
	push "film"
	popax
	add stalktype,$a
	pop stalktype
l2118:
	end method
	method _csay
	push stextdb
	push "null"
	cmpjne
	cmp0
	je l2120
	localint $1
	push stextdb
	spushs
	push _swav
	spop $a
	call [$a],findbyrow
	pop $1
	push $1
	push 0
	cmpjl
	cmp0
	je l2122
	ret
l2122:
	push stextdb
	spushs
	push $1
	push 2
	spop $a
	call [$a],get
	push " "
	call vecpom,vecbuildfromstring
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push "txt"
	call stalktype,contains
	cmp0
	je l2124
	push _sanim
	spushs
	spop $a
	call [$a],getcx
	pop $4
	push _sanim
	spushs
	spop $a
	call [$a],getpy
	pop $5
	jmp l2123
l2124:
	push 400
	pop $4
	push 590
	pop $5
l2123:
	localint $6
	push 0
	pop $6
	localint $7
	push iResX
	pop $7
	localint $8
	push 0
	pop $8
	localint $9
	push iResY
	pop $9
	localstring $10
	localint $11
	push 0
	pop $11
l2125:
	push $11
	call vecpom,size
	cmpjl
	cmp0
	je l2126
	jmp l2128
l2127:
	add $11,1
	pop $11
	jmp l2125
l2128:
	push $11
	call vecpom,get
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $2,$a
	pop $2
	call $2,length
	push iTxtLim
	cmpja
	cmp0
	je l2130
	push "txttalk"
	push $3
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $2
	push $4
	push $5
	push $3
	spop $a
	call [$a],_cprinttxt
	push $10
	spushs
	spop $a
	call [$a],getpx
	push $6
	cmpjl
	cmp0
	je l2132
	push $10
	spushs
	spop $a
	call [$a],getpx
	pop $6
l2132:
	push $10
	spushs
	spop $a
	call [$a],getex
	push $7
	cmpja
	cmp0
	je l2134
	push $10
	spushs
	spop $a
	call [$a],getex
	pop $7
l2134:
	push $10
	spushs
	spop $a
	call [$a],getpy
	push $8
	cmpjl
	cmp0
	je l2136
	push $10
	spushs
	spop $a
	call [$a],getpy
	pop $8
l2136:
	push $10
	spushs
	spop $a
	call [$a],getey
	push $9
	cmpja
	cmp0
	je l2138
	push $10
	spushs
	spop $a
	call [$a],getey
	pop $9
l2138:
	push ""
	pop $2
	add $3,1
	pop $3
l2130:
	jmp l2127
l2126:
	call $2,length
	push 0
	cmpja
	cmp0
	je l2140
	push "txttalk"
	push $3
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $2
	push $4
	push $5
	push $3
	spop $a
	call [$a],_cprinttxt
	push $10
	spushs
	spop $a
	call [$a],getpx
	push $6
	cmpjl
	cmp0
	je l2142
	push $10
	spushs
	spop $a
	call [$a],getpx
	pop $6
l2142:
	push $10
	spushs
	spop $a
	call [$a],getex
	push $7
	cmpja
	cmp0
	je l2144
	push $10
	spushs
	spop $a
	call [$a],getex
	pop $7
l2144:
	push $10
	spushs
	spop $a
	call [$a],getpy
	push $8
	cmpjl
	cmp0
	je l2146
	push $10
	spushs
	spop $a
	call [$a],getpy
	pop $8
l2146:
	push $10
	spushs
	spop $a
	call [$a],getey
	push $9
	cmpja
	cmp0
	je l2148
	push $10
	spushs
	spop $a
	call [$a],getey
	pop $9
l2148:
	add $3,1
	pop $3
l2140:
	push iResX
	popax
	sub $7,$a
	pop $7
	push iResY
	popax
	sub $9,$a
	pop $9
	push $6
	push 0
	cmpja
	cmp0
	je l2150
	push 0
	pop $6
l2150:
	push $8
	push 0
	cmpja
	cmp0
	je l2152
	push 0
	pop $6
l2152:
	push 0
	push $6
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	push $3
	popax
	sub 0,$a
	call txttalk0,geth
	pop $b
	popax
	mul $a,$b
	push $8
	pop $b
	popax
	sub $a,$b
	push $9
	pop $b
	popax
	add $a,$b
	call txttalk,move
	call txttalk0,getpy
	push 0
	cmpjl
	cmp0
	je l2154
	push 0
	call txttalk0,getpy
	popax
	sub 0,$a
	call txttalk,move
l2154:
	push rdelay
	push 500
	pop $b
	popax
	mul $a,$b
	call vecpom,size
	pop $b
	popax
	mul $a,$b
	call timtalk,delay
l2120:
	end method
	method _cprinttxt
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push irtxt
	push igtxt
	push ibtxt
	cthis createtxt
	push $2
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis setpos
	push 2000
	cthis setz
	cthis show
	end method
	method _cplaysnd
	call sndtalk,getfullname
	cthis cbsplay
	end method
	method _cplaysndtxt
	cthis _cplaysnd
	cthis _csay
	end method
	method _cplaysndtxtfilm
	cthis _cplaysnd
	cthis _csay
	end method
	method _cplaysndfilm
	cthis _csay
	end method
	method _cplaytxt
	cthis _csay
	call timtalk,play
	end method
	method _cplaytxtfilm
	cthis _csay
	call timtalk,play
	end method
	method _cplayfilm
	cthis _csay
	call timtalk,play
	end method
	method setdelay
	localreal $1
	pop $1
	push $1
	pop rdelay
	end method
	method settxtcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop irtxt
	push $2
	pop igtxt
	push $3
	pop ibtxt
	end method
	method _ctalkstart
	push stalktype
	spushs
	spop $d
	cthis [$d]
	end method
	method _ctalkfin
	call txttalk,hide
	push _sanim
	spushs
	spop $a
	call [$a],herostop
	end method
	end class

	class classtxttalker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "talk:"
	cthis _setbase
	new int,iR
	new int,iG
	new int,iB
	new int,ibR
	new int,ibG
	new int,ibB
	new int,ibA
	new int,ibrr
	new int,ibrg
	new int,ibrb
	new int,ibra
	new int,ibw
	new db,dbtxt
	new int,iSize
	new gmimgvec,grtxt
	new gmimgvec,grtxt2
	localstring $1
	localint $2
	push 0
	pop $2
l2155:
	push $2
	push 25
	cmpjl
	cmp0
	je l2156
	jmp l2158
l2157:
	add $2,1
	pop $2
	jmp l2155
l2158:
	push "txt"
	push $2
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	call grtxt,add
	push $1
	spushs
	spop $a
	call [$a],hide
	jmp l2157
l2156:
	new text,imgtxt
	call imgtxt,hide
	new int,bplaying
	push 0
	pop bplaying
	new string,slang
	push "pol"
	cthis setlang
	end method
	method setlang
	localstring $1
	pop $1
	push $1
	pop slang
	end method
	method isplaying
	push bplaying
	ret
	end method
	method setfont
	localstring $1
	pop $1
	push "setfont"
	push $1
	call grtxt,eval1
	push $1
	spushs
	spop $a
	call [$a],getsize
	pop iSize
	end method
	method setfontcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop iR
	push $2
	pop iG
	push $3
	pop iB
	end method
	method setfontbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ibR
	push $2
	pop ibG
	push $3
	pop ibB
	push $4
	pop ibA
	end method
	method setbgframe
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	pop ibrr
	push $3
	pop ibrg
	push $4
	pop ibrb
	push 255
	pop ibra
	push $1
	pop ibw
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis link
	push $2
	call grtxt,setz
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call imgtxt,setz
	end method
	method herosay
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis getdir
	cthis herosaydir
	end method
	method herosaydir
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push "auto"
	cmpje
	cmp0
	je l2160
	cthis getdir
	pop $4
l2160:
	push 1
	pop bplaying
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push slang
	pop $b
	popax
	add $a,$b
	call dbtxt,load
	localstring $5
	call grtxt2,free
	localint $6
	push 0
	pop $6
	localint $7
	call dbtxt,getrowsno
	pop $7
	localint $8
	push 0
	pop $8
l2161:
	push $8
	push $7
	cmpjl
	cmp0
	je l2162
	jmp l2164
l2163:
	add $8,1
	pop $8
	jmp l2161
l2164:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $8
	push 0
	call dbtxt,get
	spop $a
	call [$a],set
	push $5
	spushs
	push iR
	push iG
	push iB
	spop $a
	call [$a],createtxt
	push $5
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push iSize
	popax
	add $3,$a
	pop $3
	push $5
	spushs
	spop $a
	call [$a],show
	push $5
	spushs
	spop $a
	call [$a],getw
	push $6
	cmpja
	cmp0
	je l2166
	push $5
	spushs
	spop $a
	call [$a],getw
	pop $6
l2166:
	push $5
	call grtxt2,add
	jmp l2163
l2162:
	call txt0,getpx
	push iSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt0,getpy
	push iSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $6
	push iSize
	pop $b
	popax
	add $a,$b
	push iSize
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	push ibR
	push ibG
	push ibB
	push ibA
	call imgtxt,setbkg
	push ibw
	push ibrr
	push ibrg
	push ibrb
	push ibra
	call imgtxt,setborders
	call imgtxt,show
	push _sanim
	push "null"
	cmpjne
	cmp0
	je l2168
	push _sanim
	spushs
	push 0
	spop $a
	call [$a],thisfinish
	push _sanim
	spushs
	push _sbase
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	push "null"
	push "null"
	push $4
	spop $a
	call [$a],playspec
l2168:
	end method
	method stop
	push 0
	pop bplaying
	call grtxt2,hide
	call imgtxt,hide
	push _sanim
	push "null"
	cmpjne
	cmp0
	je l2170
	push _sanim
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push _sanim
	spushs
	push "stand"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
l2170:
	end method
	end class

	class classbgplan
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,rpx
	new real,rpy
	new real,scalex
	new real,scaley
	new int,_ix
	new int,_iy
	end method
	method setscale
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	push $2
	pop scaley
	pop scalex
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add rpx,$a
	pop rpx
	push $2
	popax
	add rpy,$a
	pop rpy
	localint $3
	push rpx
	pop $3
	localint $4
	push rpy
	pop $4
	push $3
	popax
	sub rpx,$a
	pop rpx
	push $4
	popax
	sub rpy,$a
	pop rpy
	push $3
	cmp0
	jne l2173
	push $4
	jmp l2174
l2172:
	push 0
	jmp l2174
l2173:
	push 1
l2174:
	cmp0
	je l2175
	push $3
	popax
	add _ix,$a
	pop _ix
	push $4
	popax
	add _iy,$a
	pop _iy
	push $3
	push $4
	clparent gmobjvec,move
l2175:
	end method
	method movebgr
	localreal $1
	localreal $2
	pop $2
	pop $1
	push scalex
	push $1
	pop $b
	popax
	mul $a,$b
	push scaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	method getpx
	push _ix
	end method
	method getpy
	push _iy
	end method
	end class

	class classgrplans
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,_rxp
	new real,_ryp
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "movebgr"
	push $1
	push $2
	cthis eval2
	end method
	method getposx
	push _rxp
	ret
	end method
	method getposy
	push _ryp
	ret
	end method
	method shift
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	end class

	class CameraPos
	method init
	localint $1
	localint $2
	pop $2
	pop $1
	new int,_x
	new int,_y
	push $1
	push $2
	cthis setpos
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _x
	push $2
	pop _y
	end method
	method getposx
	push _x
	end method
	method getposy
	push _y
	end method
	end class

	class classadvcamera
	method init
	new classgrplans,grbgrs
	new string,sancamera
	push "null"
	pop sancamera
	new string,smsmvfun
	push "null"
	pop smsmvfun
	new real,_rxmod
	new real,_rymod
	push 0.05
	push 0.05
	pop _rymod
	pop _rxmod
	new real,rleft
	new real,rtop
	new real,rright
	new real,rbottom
	push 0.0
	push 0.0
	push iResX
	push 1
	pop $b
	popax
	sub $a,$b
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbottom
	pop rright
	pop rtop
	pop rleft
	new int,icamx
	new int,icamy
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamy
	pop icamx
	new real,rborx
	new real,rbory
	push iResX
	push 1
	pop $b
	popax
	sub $a,$b
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbory
	pop rborx
	new real,_lastx
	push 0
	pop _lastx
	new real,_lasty
	push 0
	pop _lasty
	new string,_sfunxedge
	push "null"
	pop _sfunxedge
	new string,_sfunyedge
	push "null"
	pop _sfunyedge
	push 0
	push 0
	new CameraPos,_campos
	new timer,timcamera
	push 1
	call timcamera,settick
	push 1
	call timcamera,setcycle
	push "onfinish"
	push "_camerafin"
	call timcamera,addmethod
	end method
	method _camerafin
	cthis checkcamera
	cthis play
	end method
	method setscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop rleft
	push $2
	pop rtop
	push $3
	pop rright
	push $4
	pop rbottom
	push $3
	pop rborx
	push $4
	pop rbory
	push $1
	pop _lastx
	push $2
	pop _lasty
	push $1
	push $3
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamx
	push $2
	push $4
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamy
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l2176:
	push $2
	call grbgrs,size
	cmpjl
	cmp0
	je l2177
	jmp l2179
l2178:
	add $2,1
	pop $2
	jmp l2176
l2179:
	push $2
	call grbgrs,get
	spushs
	push $1
	spop $a
	call [$a],remove
	jmp l2178
l2177:
	end method
	method funxedge
	localstring $1
	pop $1
	push $1
	pop _sfunxedge
	end method
	method funyedge
	localstring $1
	pop $1
	push $1
	pop _sfunyedge
	end method
	method setcenter
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop icamy
	pop icamx
	end method
	method setborders
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop rbottom
	pop rright
	end method
	method countcenter
	push rleft
	push rright
	push rleft
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push rtop
	push rbottom
	push rtop
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	cthis setcenter
	end method
	method getposx
	call grbgrs,getposx
	ret
	end method
	method getposy
	call grbgrs,getposy
	ret
	end method
	method setmetonmsmove
	localstring $1
	pop $1
	push $1
	pop smsmvfun
	end method
	method start
	call timcamera,play
	end method
	method stop
	push 0
	call timcamera,stop
	end method
	method setactor
	localstring $1
	pop $1
	push $1
	pop sancamera
	end method
	method setcampos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call _campos,setpos
	push "_campos"
	cthis setactor
	end method
	method isactor
	localstring $1
	pop $1
	push $1
	push sancamera
	cmpje
	ret
	end method
	method getactor
	push sancamera
	ret
	end method
	method scalemodifiers
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	push $2
	pop _rymod
	pop _rxmod
	end method
	method newbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbgplan,[$e]
	push $1
	push $2
	push $3
	cthis addbgr
	end method
	method addbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setscale
	push $1
	call grbgrs,add
	end method
	method addtobgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],add
	end method
	method setscene
	push 1.0
	push 1.0
	cthis _setscene
	end method
	method _setscene
	localreal $1
	localreal $2
	pop $2
	pop $1
	push sancamera
	push "null"
	cmpje
	cmp0
	je l2181
	ret
l2181:
	localreal $3
	push icamx
	push sancamera
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	push $1
	popax
	mul $3,$a
	pop $3
	localreal $4
	push icamy
	push sancamera
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $2
	popax
	mul $4,$a
	pop $4
	localreal $5
	cthis getposx
	push $3
	pop $b
	popax
	add $a,$b
	pop $5
	localreal $6
	cthis getposy
	push $4
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push rleft
	cmpjae
	cmp0
	je l2183
	cthis getposx
	popax
	sub 0,$a
	pop $3
	jmp l2182
l2183:
	push $5
	push rright
	pop $b
	popax
	add $a,$b
	push rborx
	cmpjl
	cmp0
	je l2185
	push rborx
	cthis getposx
	push rright
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $3
l2185:
l2182:
	push $6
	push rtop
	cmpjae
	cmp0
	je l2187
	cthis getposy
	popax
	sub 0,$a
	pop $4
	jmp l2186
l2187:
	push $6
	push rbottom
	pop $b
	popax
	add $a,$b
	push rbory
	cmpjl
	cmp0
	je l2189
	push rbory
	cthis getposy
	push rbottom
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $4
l2189:
l2186:
	push $3
	cmp0
	jne l2192
	push $4
	jmp l2193
l2191:
	push 0
	jmp l2193
l2192:
	push 1
l2193:
	cmp0
	je l2194
	push $3
	push $4
	call grbgrs,move
	push smsmvfun
	push "null"
	cmpjne
	cmp0
	je l2196
	push smsmvfun
	spushs
	spop $d
	cthis [$d]
l2196:
l2194:
	push $3
	push 0
	cmpje
	cmp0
	je l2198
	push _lastx
	push 0
	cmpjne
	cmp0
	je l2198
	push _sfunxedge
	push "null"
	cmpjne
	jmp l2200
l2198:
	push 0
	jmp l2200
l2199:
	push 1
l2200:
	cmp0
	je l2201
	push _sfunxedge
	spushs
	spop $d
	cthis [$d]
l2201:
	push $4
	push 0
	cmpje
	cmp0
	je l2203
	push _lasty
	push 0
	cmpjne
	cmp0
	je l2203
	push _sfunyedge
	push "null"
	cmpjne
	jmp l2205
l2203:
	push 0
	jmp l2205
l2204:
	push 1
l2205:
	cmp0
	je l2206
	push _sfunyedge
	spushs
	spop $d
	cthis [$d]
l2206:
	push $3
	pop _lastx
	push $4
	pop _lasty
	end method
	method checkcamera
	push sancamera
	push "null"
	cmpje
	cmp0
	je l2208
	ret
l2208:
	push _rxmod
	push _rymod
	cthis _setscene
	end method
	method moveplans
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add rleft,$a
	pop rleft
	push $1
	popax
	add rright,$a
	pop rright
	push $2
	popax
	add rtop,$a
	pop rtop
	push $2
	popax
	add rbottom,$a
	pop rbottom
	push $1
	popax
	add rborx,$a
	pop rborx
	push $2
	popax
	add rbory,$a
	pop rbory
	push $1
	popax
	add icamx,$a
	pop icamx
	push $2
	popax
	add icamy,$a
	pop icamy
	push $1
	push $2
	call grbgrs,shift
	end method
	end class

	class classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "but"
	cthis setadvbutmets
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "but"
	clparent classadvbut,setasbutton2
	end method
	method setasbutton2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "setadvbutmets"
	push "setadvbutmets"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbuttyp"
	push "setbuttyp"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setadvbutpos"
	push "setadvbutpos"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutdir"
	push "setbutdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase1"
	push "setbutbase1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase2"
	push "setbutbase2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase"
	push "setbutbase"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbase1"
	push "getbase1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbase2"
	push "getbase2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbutdir"
	push "getbutdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbutname"
	push "getbutname"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettyp"
	push "gettyp"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "reachable"
	push "reachable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setreach"
	push "setreach"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getgox"
	push "getgox"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getgoy"
	push "getgoy"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "enable"
	push "enable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "disable"
	push "disable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "enabled"
	push "enabled"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setonce"
	push "setonce"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "checkonce"
	push "checkonce"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpocket"
	push "classadvbut0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getpocket"
	push "classadvbut1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "moveon"
	push "moveon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "moveoff"
	push "moveoff"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "clickon"
	push "clickon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "lrel"
	push "lrel"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "becomebut"
	push "classadvbut2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "becomeitem"
	push "classadvbut3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "becomedoors"
	push "classadvbut4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "copyposfrompt"
	push "classadvbut5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butisin"
	push "classadvbut6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "preparetosort"
	push "preparetosort"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setadvbutmets
	push $1
	spushs
	push 1
	spop $a
	call [$a],setreach
	end method
	method classadvbut0
	localstring $1
	pop $1
	push $1
	pop _spocket
	end method
	method classadvbut1
	push _spocket
	end method
	method classadvbut2
	cthis getname
	clparent classadvbut,setasbut
	end method
	method classadvbut3
	cthis getname
	clparent classadvbut,setasitem
	end method
	method classadvbut4
	cthis getname
	clparent classadvbut,setasdoors
	end method
	method classadvbut5
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getbyname
	pop $3
	push $1
	spushs
	push $3
	spop $a
	call [$a],getxver
	push $1
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],getyver
	push $1
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	cthis setadvbutpos
	end method
	method classadvbut6
	cthis isin
	end method
	method setonce
	localstring $1
	pop $1
	push $1
	pop _sonce
	end method
	method checkonce
	push _sonce
	push "null"
	cmpjne
	cmp0
	je l2210
	push _sonce
	call clsave,bis
	neg
	jmp l2212
l2210:
	push 0
	jmp l2212
l2211:
	push 1
l2212:
	cmp0
	je l2213
	push _sonce
	call clsave,bset
	cthis disable
l2213:
	end method
	method setadvbutmets
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_styp
	push $2
	pop _styp
	new string,_sname
	push $1
	pop _sname
	new int,igox
	cthis getposx
	pop igox
	new int,igoy
	cthis getposy
	pop igoy
	new string,sgox
	push "null"
	pop sgox
	new string,sgoy
	push "null"
	pop sgoy
	new string,_sbutdir
	push "auto"
	pop _sbutdir
	new string,_sbase1
	push "look:"
	push 1
	call modadv,get
	pop _sbase1
	new string,_sbase2
	push "look:"
	push 2
	call modadv,get
	pop _sbase2
	new int,breachable
	push 0
	pop breachable
	new string,_spocket
	push $1
	pop _spocket
	new string,_sonce
	push "null"
	pop _sonce
	push A
	push "baseuse1"
	push _sbase1
	push "baseuse2"
	push _sbase2
	push "hideontake"
	push 1
	cthis vars2
	cthis enable
	end method
	method setasmask
	localstring $1
	pop $1
	push $1
	spushs
	push "butisin"
	push "classadvbut7"
	spop $a
	call [$a],addmethod
	end method
	method classadvbut7
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	cthis isin
	end method
	method enable
	push AdventureGame
	neg
	cmp0
	je l2215
	ret
l2215:
	cthis getname
	call grbuts,addonce
	end method
	method disable
	push AdventureGame
	neg
	cmp0
	je l2217
	ret
l2217:
	cthis getname
	call grbuts,remove
	end method
	method enabled
	push AdventureGame
	neg
	cmp0
	je l2219
	ret
l2219:
	cthis getname
	call grbuts,contains
	ret
	end method
	method setbutbase
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis setbutbase1
	push $2
	cthis setbutbase2
	end method
	method setreach
	localint $1
	pop $1
	push $1
	pop breachable
	end method
	method reachable
	push breachable
	ret
	end method
	method setbuttyp
	localstring $1
	pop $1
	push $1
	pop _styp
	end method
	method lrel
	end method
	method clickon
	cthis reachable
	cmp0
	je l2221
	cthis getname
	call clwalkq,visit
l2221:
	end method
	method moveon
	push sItemMover
	push "null"
	cmpje
	cmp0
	je l2223
	call advmouse,setactive
	jmp l2222
l2223:
	push sItemMover
	spushs
	cthis getname
	push "setactive"
	spop $a
	call [$a],checkusebutton
l2222:
	end method
	method moveondoors
	push sItemMover
	push "null"
	cmpje
	cmp0
	je l2225
	call advmouse,setexit
	jmp l2224
l2225:
	push sItemMover
	spushs
	cthis getname
	push "setexit"
	spop $a
	call [$a],checkusebutton
l2224:
	end method
	method moveoff
	call advmouse,setstd
	end method
	method setadvbutpos
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sgox
	push $2
	pop sgoy
	push $1
	pop igox
	push $2
	pop igoy
	end method
	method setbutdir
	localstring $1
	pop $1
	push $1
	pop _sbutdir
	end method
	method setbutbase1
	localstring $1
	pop $1
	push $1
	pop _sbase1
	push $1
	pop baseuse1
	end method
	method setbutbase2
	localstring $1
	pop $1
	push $1
	pop _sbase2
	push $1
	pop baseuse2
	end method
	method getbase1
	push _sbase1
	ret
	end method
	method getbase2
	push _sbase2
	ret
	end method
	method getbutdir
	push _sbutdir
	ret
	end method
	method getbutname
	push _sname
	ret
	end method
	method gettyp
	push _styp
	ret
	end method
	method getgox
	push sgox
	push "-hero"
	cmpje
	cmp0
	je l2227
	push sgoy
	push "-main"
	cmpje
	cmp0
	je l2229
	push smainhero
	spushs
	spop $a
	call [$a],getposx
	jmp l2228
l2229:
	push sgoy
	spushs
	spop $a
	call [$a],getposx
l2228:
	jmp l2226
l2227:
	push sgox
	push "-but"
	cmpje
	cmp0
	je l2231
	push sgoy
	spushs
	spop $a
	call [$a],getcx
	jmp l2230
l2231:
	push igox
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
l2230:
l2226:
	end method
	method getgoy
	push sgox
	push "-hero"
	cmpje
	cmp0
	je l2233
	push sgoy
	push "-main"
	cmpje
	cmp0
	je l2235
	push smainhero
	spushs
	spop $a
	call [$a],getposy
	jmp l2234
l2235:
	push sgoy
	spushs
	spop $a
	call [$a],getposy
l2234:
	jmp l2232
l2233:
	push sgox
	push "-but"
	cmpje
	cmp0
	je l2237
	push sgoy
	spushs
	spop $a
	call [$a],getey
	jmp l2236
l2237:
	push igoy
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
l2236:
l2232:
	end method
	method getposx
	push 0
	ret
	end method
	method getposy
	push 0
	ret
	end method
	method getz
	push 0
	ret
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 0
	ret
	end method
	method preparetosort
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method endsort
	end method
	method setasbut
	localstring $1
	pop $1
	push $1
	spushs
	push "moveon"
	push "moveon"
	spop $a
	call [$a],addmethod
	end method
	method setasitem
	localstring $1
	pop $1
	push $1
	spushs
	push "take:"
	push 1
	call modadv,get
	push "take:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	push $1
	spushs
	push "moveon"
	push "moveon"
	spop $a
	call [$a],addmethod
	end method
	method setasdoors
	localstring $1
	pop $1
	push $1
	spushs
	push "moveon"
	push "classadvbut8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "doors:"
	push 1
	call modadv,get
	push "doors:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	end method
	method classadvbut8
	call advmouse,setexit
	end method
	end class

	class classadvitem
	parent classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "item"
	clparent classadvbut,init
	push "take:"
	push 1
	call modadv,get
	push "take:"
	push 2
	call modadv,get
	cthis setbutbase
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "item"
	clparent classadvbut,setasbutton2
	push $1
	spushs
	push "take:"
	push 1
	call modadv,get
	push "take:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	end method
	end class

	class classadvdoors
	parent classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "doors"
	clparent classadvbut,init
	push "doors:"
	push 1
	call modadv,get
	push "doors:"
	push 2
	call modadv,get
	cthis setbutbase
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "doors"
	clparent classadvbut,setasbutton2
	push $1
	spushs
	push "moveon"
	push "moveon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "doors:"
	push 1
	call modadv,get
	push "doors:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	end method
	method moveon
	call advmouse,setexit
	end method
	end class

	class classbehhero
	method init
	new string,_snextbeh
	push "null"
	pop _snextbeh
	new string,_stdfinfun
	push "null"
	pop _stdfinfun
	new string,_stdfinobj
	push "null"
	pop _stdfinobj
	new string,_stype
	push "null"
	pop _stype
	new string,_scaller
	new int,bblock
	push 1
	pop bblock
	new int,bparal
	push 0
	pop bparal
	end method
	method gonext
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	push bparal
	cmp0
	je l2239
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],behret
	pop $2
	jmp l2238
l2239:
	push _sstarter
	spushs
	spop $a
	call [$a],isenumer
	cmp0
	je l2241
	push _sstarter
	cthis getname
	cmpjne
	jmp l2243
l2241:
	push 0
	jmp l2243
l2242:
	push 1
l2243:
	cmp0
	je l2244
	push 1
	pop $2
	jmp l2240
l2244:
	push _snextbeh
	push "null"
	cmpjne
	cmp0
	je l2246
	push _snextbeh
	spushs
	push $1
	spop $a
	call [$a],eval
	jmp l2245
l2246:
	push 1
	pop $2
l2245:
l2240:
l2238:
	push $2
	cmp0
	je l2248
	push $1
	cthis finishbeh
l2248:
	end method
	method finishbeh
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l2250
	push $1
	spushs
	spop $a
	call [$a],reteval
	jmp l2249
l2250:
	call modstnd,resume
	localstring $2
	cthis getactbeh
	pop $2
	push _sstarter
	spushs
	spop $a
	call [$a],callbehfin
	cthis getactbeh
	push $2
	cmpje
	cmp0
	je l2252
	push "null"
	cthis setactbeh
l2252:
l2249:
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setfinfun
	cthis advgetlock
	pop _bmslock
	push bblock
	cthis advmssetlock
	call modstnd,pause
	push "null"
	cthis eval
	end method
	method eval
	localstring $1
	pop $1
	cthis getname
	cthis setactbeh
	push $1
	pop _scaller
	cthis _eval
	end method
	method rewind
	push "_rew"
	cthis hasaddedmet
	cmp0
	je l2254
	cthis _rew
l2254:
	end method
	method reteval
	push _scaller
	cthis gonext
	end method
	method callbehfin
	push _bmslock
	cthis advmssetlock
	push _stdfinobj
	push _stdfinfun
	cthis callfun
	push "null"
	pop _stdfinobj
	push "null"
	pop _stdfinfun
	cthis getname
	spushs
	push _sbeh
	spop $a
	call $a,strsubbs
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _evalenter
	cthis getname
	push "reteval"
	call ccs,obenter
	end method
	method _evalclose
	cthis getname
	push "reteval"
	call ccs,obclose
	end method
	method _evalmusic
	call vmus,getfullname
	push 0
	call _music,playvec
	cthis reteval
	end method
	method _evalscript
	push _id
	push 0
	cmpjae
	cmp0
	je l2256
	localint $1
	push _id
	pop $1
	localdef $2
	push _sdb
	spushs
	push _row
	push $1
	spop $a
	call [$a],get
	pop $2
l2257:
	push $2
	push ")"
	cmpjne
	cmp0
	je l2258
	push _sscr
	spushs
	push $1
	push _id
	pop $b
	popax
	sub $a,$b
	push $2
	spop $a
	call [$a],ARG=
	add $1,1
	pop $1
	push _sdb
	spushs
	push _row
	push $1
	spop $a
	call [$a],get
	pop $2
	jmp l2257
l2258:
l2256:
	push _sscr
	spushs
	push _sfun2
	spop $a
	call [$a],call
	cthis reteval
	end method
	method _evalmet
	push _sob2
	push _sfun2
	cthis callfun
	cthis reteval
	end method
	method _evalsave
	push 0
	push 1
	call ssavval,getb
	push "@"
	cmpje
	cmp0
	je l2260
	localint $1
	push 1
	call ssavval,strsubb
	pop $1
	push ssavvar
	push $1
	push ssavvar
	call clsave,get
	pop $b
	popax
	add $a,$b
	call clsave,set
	jmp l2259
l2260:
	push ssavvar
	push ssavval
	call clsave,set
l2259:
	cthis reteval
	end method
	method _evalgame
	localstring $1
	call gameapi,getgamename
	pop $1
	push _styp
	spushs
	push "-def"
	cmpst
	jne l2262
	spop $a
	push $1
	spushs
	push _spath
	push _sgame
	spop $a
	call [$a],playfromscript
	jmp l2261
l2262:
	push "-adv"
	cmpst
	jne l2263
	spop $a
	push $1
	spushs
	push _sgame
	push _spath
	spop $a
	call [$a],playnewgamepath
	jmp l2261
l2263:
	spop $a
	push $1
	spushs
	push _sgame
	spop $a
	call [$a],playnewgame
l2261:
	cthis reteval
	end method
	method _evalread
	push _sread
	push _ix
	push _iy
	push _sdir
	call clhilarytxt,herosaydir
	end method
	method _rewread
	call clhilarytxt,stop
	cthis reteval
	end method
	method _evalwait
	call timwait,play
	end method
	method _evaltalk
	localstring $1
	push _spathpref
	push _san
	pop $b
	popax
	add $a,$b
	pop $1
	localstring $2
	push _stalkpref
	push _san
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	call engine,varexist
	cmp0
	je l2265
	push $2
	spushs
	spop $a
	call [$a],getdir
	push $2
	spushs
	push _sdir
	spop $a
	call [$a],getpropdir
	cmpjne
	jmp l2267
l2265:
	push 0
	jmp l2267
l2266:
	push 1
l2267:
	cmp0
	je l2268
	push $1
	spushs
	push _sdir
	cthis getname
	push "_evaltalk"
	spop $a
	call [$a],heroturn
	ret
l2268:
	push _san
	cthis advanstand
	push $2
	spushs
	call modadv,gettalktype
	spop $a
	call [$a],settalktype
	push $2
	spushs
	push __swav
	spop $a
	call [$a],setsnd
	push $2
	spushs
	push __sbase
	spop $a
	call [$a],checkamounts
	push $2
	spushs
	push isort
	push bstt
	push bstp
	cthis getname
	push "reteval"
	push $2
	spushs
	push _sdir
	spop $a
	call [$a],getpropdir
	spop $a
	call [$a],herosaydir
	end method
	method _rewtalk
	push _stalkpref
	push _san
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	spop $a
	call [$a],stop
	end method
	method _evalsetpos
	localint $1
	localint $2
	localstring $3
	push _spathpref
	push _san
	pop $b
	popax
	add $a,$b
	pop $3
	push _idestx
	push "-id"
	cmpje
	cmp0
	je l2270
	push $3
	spushs
	push _idesty
	spop $a
	call [$a],getbyname
	pop $2
	push $3
	spushs
	push $2
	spop $a
	call [$a],getxver
	pop $1
	push $3
	spushs
	push $2
	spop $a
	call [$a],getyver
	pop $2
	push _san
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	jmp l2269
l2270:
	push _idestx
	pop $1
	push _idesty
	pop $2
	push _san
	spushs
	push $1
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
l2269:
	push _bssc
	cmp0
	je l2272
	call clcamera,setscene
l2272:
	push $3
	call engine,varexist
	cmp0
	je l2274
	push $3
	spushs
	spop $a
	call [$a],scalean
l2274:
	push _san
	spushs
	push _san
	spushs
	spop $a
	call [$a],getposy
	spop $a
	call [$a],setz
	push _sdir
	push "auto"
	cmpjne
	cmp0
	je l2276
	push _san
	spushs
	push _sdir
	spop $a
	call [$a],setdir
l2276:
	cthis reteval
	end method
	method _evalwalk
	localint $1
	localint $2
	push _idestx
	push "-id"
	cmpje
	cmp0
	je l2278
	push _sptf
	spushs
	push _idesty
	spop $a
	call [$a],getbyname
	pop $2
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getxver
	push _sptf
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $1
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getyver
	push _sptf
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $2
	jmp l2277
l2278:
	push _idestx
	push "-hero"
	cmpje
	cmp0
	je l2280
	push _idesty
	spushs
	spop $a
	call [$a],getposx
	pop $1
	push _idesty
	spushs
	spop $a
	call [$a],getposy
	pop $2
	localint $3
	push 1
	pop $3
	push _sptf
	spushs
	push $1
	push $2
	spop $a
	call [$a],ptfgoto
	push 0
	cmpjae
	cmp0
	je l2282
	push _sptf
	spushs
	push 1
	spop $a
	call [$a],getgover
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l2284
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getxver
	pop $1
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getyver
	pop $2
	push 0
	pop $3
l2284:
l2282:
	push _sptf
	spushs
	push 0
	spop $a
	call [$a],stop
	push $3
	cmp0
	je l2286
	localdef $4
	push _spathpref
	call _sptf,strsubbs
	pop $4
	push $4
	spushs
	spop $a
	call [$a],getposx
	pop $1
	push $4
	spushs
	spop $a
	call [$a],getposy
	pop $2
l2286:
	jmp l2279
l2280:
	push _idestx
	pop $1
	push _idesty
	pop $2
l2279:
l2277:
	push _sptf
	spushs
	push $1
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	cthis getname
	push "reteval"
	spop $a
	call [$a],herowalkto2
	end method
	method _evalturn
	localstring $1
	push _sdir
	pop $1
	push A
	push "uu"
	push "ru"
	push "rr"
	push "rd"
	push "dd"
	push "ld"
	push "ll"
	push "lu"
	call $1,in
	neg
	cmp0
	je l2288
	localstring $2
	push _sptf
	spushs
	spop $a
	call [$a],getanim
	pop $2
	push _sptf
	spushs
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $2
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $2
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],vecdir
	pop $1
l2288:
	push _sptf
	spushs
	push $1
	cthis getname
	push "reteval"
	spop $a
	call [$a],heroturn
	end method
	method _evalanorder
	push _san
	cthis advanstand
	push _sdb
	push _irow
	push _icol
	push _san
	cthis analizeaninstr
	popax
	cthis reteval
	end method
	method _evalanplay
	push _san
	spushs
	push "bthisfin"
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l2290
	push _san
	spushs
	spop $a
	call [$a],setasadvanima
l2290:
	push _san
	cthis advanstand
	push _san
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push _sact
	clparent StringChecker,isdigit
	cmp0
	je l2292
	push _san
	spushs
	push _sact
	spop $a
	call [$a],nameofaction
	pop _sact
l2292:
	push _san
	spushs
	push _sact
	cthis getname
	push "reteval"
	spop $a
	call [$a],playspec2
	end method
	method _rewanplay
	end method
	method _evalsndbg
	call _sndbg,getfullname
	cthis cbsplay
	cthis reteval
	end method
	method _evalsndplay
	call sndp,getfullname
	cthis cbsplay
	end method
	method _rewsndplay
	push 1
	call sndp,stop
	end method
	method _evalcall
	localstring $1
	push scallobj
	pop $1
	push "$"
	call $1,contains
	cmp0
	je l2294
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l2296
	push $1
	popax
	mov $a,[$a]
	psax
	jmp l2295
l2296:
	push sscript
	spushs
	push $1
	spop $a
	call [$a],get
l2295:
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l2298
	cthis reteval
	ret
l2298:
l2294:
	push $1
	cthis getbeh
	pop $1
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],eval
	end method
	method _evalnull
	cthis reteval
	end method
	method _evalstart
	localint $1
	localstring $2
	call vbif,free
	push bonce
	push "null"
	cmpjne
	cmp0
	je l2300
	push bonce
	call clsave,bis
	neg
	cmp0
	je l2302
	push bonce
	call clsave,bset
	jmp l2301
l2302:
	push _scaller
	cthis finishbeh
	ret
l2301:
l2300:
	push iisifsave
	push 0
	cmpje
	cmp0
	je l2304
	push sisifsave
	push sisifvar
	call clsave,is
	jmp l2306
l2304:
	push 0
	jmp l2306
l2305:
	push 1
l2306:
	cmp0
	jne l2308
	push iisifsave
	push 1
	cmpje
	cmp0
	je l2309
	push sisifsave
	push sisifvar
	call clsave,is
	neg
	jmp l2311
l2309:
	push 0
	jmp l2311
l2310:
	push 1
l2311:
	jmp l2312
l2307:
	push 0
	jmp l2312
l2308:
	push 1
l2312:
	cmp0
	je l2313
	push _scaller
	cthis finishbeh
	ret
l2313:
	push brand
	cmp0
	je l2315
	call vecbehs,size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l2317
	call $1,rand
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l2316
l2317:
	cthis reteval
l2316:
	jmp l2314
l2315:
	push bparal
	cmp0
	je l2319
	push "vecbehs"
	call vecbehs2,veccopy
	push 0
	pop $1
l2320:
	push $1
	call vecbehs,size
	cmpjl
	cmp0
	je l2321
	jmp l2323
l2322:
	add $1,1
	pop $1
	jmp l2320
l2323:
	push $1
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l2322
l2321:
	jmp l2318
l2319:
	push ienumer
	push 0
	cmpja
	cmp0
	je l2325
	cthis nextenum
	push 1
	pop $b
	popax
	sub $a,$b
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l2324
l2325:
	cthis reteval
l2324:
l2318:
l2314:
	end method
	method _ifst
	localint $1
	localint $2
	pop $2
	pop $1
	push ifst
	spushs
	push 1
	cmpst
	jne l2327
	spop $a
	push $1
	cmp0
	je l2328
	push $2
	jmp l2330
l2328:
	push 0
	jmp l2330
l2329:
	push 1
l2330:
	jmp l2326
l2327:
	push 2
	cmpst
	jne l2331
	spop $a
	push $1
	cmp0
	jne l2333
	push $2
	jmp l2334
l2332:
	push 0
	jmp l2334
l2333:
	push 1
l2334:
	jmp l2326
l2331:
	spop $a
	push $1
l2326:
	end method
	method _oper_check
	localstring $1
	pop $1
	push $1
	spushs
	push "|"
	cmpst
	jne l2336
	spop $a
	push 2
	jmp l2335
l2336:
	push "&"
	cmpst
	jne l2337
	spop $a
	push 1
	jmp l2335
l2337:
	spop $a
	push 0
l2335:
	end method
	method _ifcheck
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	push istart
	pop $5
	push 0
	pop ifst
l2338:
	push $5
	push istop
	cmpjl
	cmp0
	je l2339
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],get
	pop $3
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],dbchecknext
	pop $4
	push $4
	spushs
	push "="
	cmpst
	jne l2341
	spop $a
	push 2
	popax
	add $5,$a
	pop $5
	push $3
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],get
	call clsave,is
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],dbchecknext
	cthis _oper_check
	pop ifst
	push ifst
	cmp0
	je l2343
	add $5,1
	pop $5
l2343:
	jmp l2340
l2341:
	push "!="
	cmpst
	jne l2344
	spop $a
	push 2
	popax
	add $5,$a
	pop $5
	push $3
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],get
	call clsave,is
	neg
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],dbchecknext
	cthis _oper_check
	pop ifst
	push ifst
	cmp0
	je l2346
	add $5,1
	pop $5
l2346:
	jmp l2340
l2344:
	push "&"
	cmpst
	jne l2347
	spop $a
	add $5,1
	pop $5
	push 0
	push 1
	call $3,getb
	push "!"
	cmpje
	cmp0
	je l2349
	push 1
	call $3,strsubb
	call clsave,bis
	neg
	jmp l2348
l2349:
	push $3
	call clsave,bis
l2348:
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
	push 1
	pop ifst
	jmp l2340
l2347:
	push "|"
	cmpst
	jne l2350
	spop $a
	add $5,1
	pop $5
	push 0
	push 1
	call $3,getb
	push "!"
	cmpje
	cmp0
	je l2352
	push 1
	call $3,strsubb
	call clsave,bis
	neg
	jmp l2351
l2352:
	push $3
	call clsave,bis
l2351:
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
	push 2
	pop ifst
	jmp l2340
l2350:
	spop $a
	push 0
	push 1
	call $3,getb
	push "!"
	cmpje
	cmp0
	je l2354
	push 1
	call $3,strsubb
	call clsave,bis
	neg
	jmp l2353
l2354:
	push $3
	call clsave,bis
l2353:
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
l2340:
	add $5,1
	pop $5
	jmp l2338
l2339:
	push _sstarter
	spushs
	push $1
	spop $a
	call [$a],bif=
	push $1
	end method
	method _checkif
	cthis _ifcheck
	cmp0
	je l2356
	cthis reteval
	jmp l2355
l2356:
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],classbehhero0
l2355:
	end method
	method classbehhero0
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call vecbehs,size
	pop $3
	localint $4
	push 0
	pop $4
	localint $5
	push $1
	call vecbehs,find
	push 1
	pop $b
	popax
	add $a,$b
	pop $5
l2357:
	push $5
	push $3
	cmpjl
	cmp0
	je l2358
	jmp l2360
l2359:
	add $5,1
	pop $5
	jmp l2357
l2360:
	push $5
	call vecbehs,get
	spushs
	spop $a
	call [$a],gettyp
	spushs
	push "IF"
	cmpst
	jne l2362
	spop $a
	add $2,1
	pop $2
	jmp l2361
l2362:
	push "FI"
	cmpst
	jne l2363
	spop $a
	push $2
	push 0
	cmpje
	cmp0
	je l2365
	push $5
	pop $4
	push $3
	pop $5
	jmp l2364
l2365:
	sub $2,1
	pop $2
l2364:
	jmp l2361
l2363:
	push "ELSE"
	cmpst
	je l2367
	push "ELIF"
	cmpst
	je l2367
	jmp l2366
l2367:
	spop $a
	push $2
	push 0
	cmpje
	cmp0
	je l2369
	push $5
	pop $4
	push $3
	pop $5
l2369:
	jmp l2361
l2366:
	spop $a
l2361:
	jmp l2359
l2358:
	push $4
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	end method
	method _evalIF
	push _sstarter
	spushs
	spop $a
	call [$a],ifpush
	cthis _checkif
	end method
	method _gotofi
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	push $1
	call vecbehs,find
	push 1
	pop $b
	popax
	add $a,$b
	pop $3
l2370:
	push $3
	call vecbehs,size
	cmpjl
	cmp0
	je l2371
	jmp l2373
l2372:
	add $3,1
	pop $3
	jmp l2370
l2373:
	push $3
	call vecbehs,get
	spushs
	spop $a
	call [$a],gettyp
	spushs
	push "IF"
	cmpst
	jne l2375
	spop $a
	add $2,1
	pop $2
	jmp l2374
l2375:
	push "FI"
	cmpst
	jne l2376
	spop $a
	push $2
	push 0
	cmpje
	cmp0
	je l2378
	push $3
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	ret
	jmp l2377
l2378:
	sub $2,1
	pop $2
l2377:
	jmp l2374
l2376:
	spop $a
l2374:
	jmp l2372
l2371:
	end method
	method _evalELIF
	push _sstarter
	spushs
	spop $a
	call [$a],bif
	cmp0
	je l2380
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],_gotofi
	jmp l2379
l2380:
	cthis _checkif
l2379:
	end method
	method _evalELSE
	push _sstarter
	spushs
	spop $a
	call [$a],bif
	cmp0
	je l2382
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],_gotofi
	jmp l2381
l2382:
	cthis reteval
l2381:
	end method
	method _evalFI
	push _sstarter
	spushs
	spop $a
	call [$a],ifpop
	cthis reteval
	end method
	method gettyp
	push _stype
	end method
	method settype
	localstring $1
	pop $1
	push $1
	pop _stype
	push "_eval"
	push "_eval"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addmethod
	push "_rew"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasmet
	cmp0
	je l2384
	push "_rew"
	push "_rew"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addmethod
l2384:
	end method
	method setflags
	localstring $1
	pop $1
	push $1
	pop _snextbeh
	end method
	method setfinfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _stdfinobj
	push $2
	pop _stdfinfun
	end method
	method setasstarter
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "start"
	cthis settype
	new string,_sstarter
	cthis getname
	pop _sstarter
	new int,brand
	push $2
	pop brand
	new int,_bmslock
	new vector,vecbehs
	push $4
	pop bblock
	push "string"
	call vecbehs,type
	new string,bonce
	push $1
	pop bonce
	push $3
	pop bparal
	new int,ienumer
	push $5
	pop ienumer
	push $5
	push 0
	cmpja
	cmp0
	je l2386
	new int,_iencnt
	push 1
	pop _iencnt
	jmp l2385
l2386:
	push $3
	cmp0
	je l2388
	new vector,vecbehs2
	push "string"
	call vecbehs2,type
l2388:
l2385:
	new int,iisifsave
	push $6
	pop iisifsave
	push $6
	push 0
	cmpjae
	cmp0
	je l2390
	new string,sisifsave
	push $7
	pop sisifsave
	push $8
	push "null"
	cmpjne
	cmp0
	je l2392
	new string,sisifvar
	push $8
	pop sisifvar
l2392:
l2390:
	new vector,vbif
	end method
	method bif
	call vbif,last
	end method
	method bif=
	localint $1
	pop $1
	call vbif,size
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	call vbif,set
	end method
	method ifpush
	push 1
	call vbif,add
	end method
	method ifpop
	call vbif,pop
	popax
	end method
	method isenumer
	push ienumer
	ret
	end method
	method nextenum
	push _iencnt
	call vecbehs,size
	cmpja
	cmp0
	je l2394
	push ienumer
	push 1
	pop $b
	popax
	add $a,$b
	pop _iencnt
	jmp l2393
l2394:
	add _iencnt,1
	pop _iencnt
l2393:
	push _iencnt
	push 1
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method addtostarter
	localstring $1
	pop $1
	push $1
	call vecbehs,add
	end method
	method getblock
	push bblock
	ret
	end method
	method addflags
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,_sstarter
	push $1
	pop _sstarter
	push _stype
	push "read"
	cmpje
	cmp0
	je l2396
	push 0
	jmp l2395
l2396:
	push $2
l2395:
	pop bblock
	push $3
	pop bparal
	end method
	method behret
	localstring $1
	pop $1
	push $1
	call vecbehs2,remove
	call vecbehs2,size
	push 0
	cmpje
	ret
	end method
	method _setasif
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,istart
	push $3
	pop istart
	new int,istop
	push $4
	pop istop
	new string,_db
	push $1
	pop _db
	new int,irow
	push $2
	pop irow
	new int,ifst
	push 0
	pop ifst
	end method
	method setasIF
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "IF"
	cthis settype
	push $1
	push $2
	push $3
	push $4
	cthis _setasif
	end method
	method setasELIF
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "ELIF"
	cthis settype
	push $1
	push $2
	push $3
	push $4
	cthis _setasif
	end method
	method setas
	localstring $1
	pop $1
	push $1
	cthis settype
	end method
	method setasscript
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "script"
	cthis settype
	new string,_sscr
	push $1
	pop _sscr
	new string,_sfun2
	push $2
	pop _sfun2
	new int,_id
	push $5
	pop _id
	new string,_sdb
	push $3
	pop _sdb
	new int,_row
	push $4
	pop _row
	end method
	method setasuse
	localstring $1
	pop $1
	push "use"
	cthis settype
	new string,_sitem
	push $1
	pop _sitem
	end method
	method _evaluse
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	spushs
	push _sitem
	spop $a
	call [$a],pckremove
	cthis reteval
	end method
	method _evaltopck
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	spushs
	push _sitem
	push _sfile
	spop $a
	call [$a],additem
	cthis reteval
	end method
	method setastopck
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "topck"
	cthis settype
	new string,_sitem
	push $1
	pop _sitem
	new string,_sfile
	push $2
	pop _sfile
	end method
	method setasmet
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "met"
	cthis settype
	new string,_sob2
	push $1
	pop _sob2
	new string,_sfun2
	push $2
	pop _sfun2
	end method
	method setassaver
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "save"
	cthis settype
	new string,ssavvar
	push $1
	pop ssavvar
	new string,ssavval
	push $2
	pop ssavval
	end method
	method setasnewgamer
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "game"
	cthis settype
	new string,_sgame
	push $3
	pop _sgame
	new string,_styp
	push $1
	pop _styp
	new string,_spath
	push $2
	pop _spath
	end method
	method setasreader
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "read"
	cthis settype
	new string,_sread
	push $1
	pop _sread
	new int,_ix
	push $2
	pop _ix
	new int,_iy
	push $3
	pop _iy
	new string,_sdir
	push $4
	pop _sdir
	end method
	method setaswaiter
	localint $1
	pop $1
	push "wait"
	cthis settype
	new timer,timwait
	push 1
	call timwait,settick
	push $1
	call timwait,delay
	cthis getname
	push "reteval"
	call timwait,_csplbuild
	push "onfinish"
	push "_csplfinish"
	call timwait,addmethod
	end method
	method setassndbg
	localstring $1
	localint $2
	pop $2
	pop $1
	push "sndbg"
	cthis settype
	new snd,_sndbg
	call _sndbg,buildfullname
	push 0
	push 1
	call _sndbg,setstartstopflag
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	call _sndbg,advloadsnd
	push $2
	call _sndbg,setvol
	end method
	method _loadsnd
	end method
	method setasanorder
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "anorder"
	cthis settype
	new string,_sdb
	push $1
	pop _sdb
	new int,_irow
	push $2
	pop _irow
	new int,_icol
	push $3
	pop _icol
	new string,_san
	push $4
	pop _san
	end method
	method setascaller
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "call"
	cthis settype
	new string,scallobj
	push $1
	pop scallobj
	new string,sscript
	push $2
	pop sscript
	end method
	method _csplbuild
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sobj
	push $1
	pop _sobj
	new string,_sfinfun
	push $2
	pop _sfinfun
	end method
	method _csplfinish
	push _sobj
	push _sfinfun
	cthis callfun
	end method
	method setassndplayer
	localstring $1
	localint $2
	pop $2
	pop $1
	push "sndplay"
	cthis settype
	new snd,sndp
	call sndp,buildfullname
	push 0
	push 1
	call sndp,setstartstopflag
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	call sndp,advloadsnd
	cthis getname
	push "reteval"
	call sndp,_csplbuild
	push "onfinish"
	push "_csplfinish"
	call sndp,addmethod
	push $2
	call sndp,setvol
	end method
	method setasposer
	localstring $1
	localstring $2
	localint $3
	localint $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "setpos"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,_idestx
	push $2
	pop _idestx
	new int,_idesty
	push $3
	pop _idesty
	new int,_bssc
	push $4
	pop _bssc
	new string,_sdir
	push $5
	pop _sdir
	end method
	method setasturn
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "turn"
	cthis settype
	new string,_sptf
	push $1
	pop _sptf
	new string,_sdir
	push $2
	pop _sdir
	end method
	method setaswalker
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "walk"
	cthis settype
	new string,_sptf
	push $1
	pop _sptf
	new string,_idestx
	push $2
	pop _idestx
	new string,_idesty
	push $3
	pop _idesty
	end method
	method setasanplayer
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "anplay"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,_sact
	push $2
	pop _sact
	end method
	method setastalker
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "talk"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,__swav
	push $2
	pop __swav
	new string,__sbase
	push $3
	pop __sbase
	new int,isort
	push $4
	pop isort
	new int,bstt
	push $5
	pop bstt
	new int,bstp
	push $6
	pop bstp
	new string,_sdir
	push $7
	pop _sdir
	end method
	method setasenter
	push "enter"
	cthis settype
	end method
	method setasclose
	push "close"
	cthis settype
	end method
	method setasmusic
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "music"
	cthis settype
	new vector,vmus
	push "string"
	call vmus,type
	call vmus,buildfullname
l2397:
	push $3
	push 0
	cmpjae
	cmp0
	je l2398
	push $3
	push $4
	cmpjl
	jmp l2400
l2398:
	push 0
	jmp l2400
l2399:
	push 1
l2400:
	cmp0
	je l2401
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l2397
l2401:
	end method
	end class

	new snd,_fx_pocket
	push "sounds/sfx/harfa.wav"
	call _fx_pocket,load
	new string,sItemMover
	push "null"
	pop sItemMover
	class classadvpocket
	parent classadvobject
	parent classadvbut
	parent gmimgvec
	method init
	localstring $1
	pop $1
	clparent classadvobject,init
	push $1
	clparent classadvbut,init
	clparent gmimgvec,init
	push "pocket"
	cthis setbuttyp
	push 1
	cthis setreach
	push "-hero"
	push "-main"
	cthis setadvbutpos
	new int,iX
	new int,iY
	new int,iNumItems
	push 0
	pop iNumItems
	new int,iMaxItems
	push 14
	pop iMaxItems
	new int,iScale
	new string,sState
	push "closed"
	pop sState
	new string,_sanim
	cthis getname
	pop _sanim
	push _spocketpref
	call _sanim,strsubbs
	pop _sanim
	new string,sItem
	push "null"
	pop sItem
	new string,sFocusItem
	push "null"
	pop sFocusItem
	new string,_sbase
	push "anpocket"
	pop _sbase
	new int,_ibase
	call _sbase,length
	pop _ibase
	new int,_ipcz
	push 1000
	pop _ipcz
	push _ipcz
	cthis setz
	new string,sitempath
	new vector,arPocket
	push "string"
	call arPocket,type
	new vector,arPocketFile
	push "string"
	call arPocketFile,type
	push "tim"
	push 1
	push 1
	push "evalpocket"
	cthis cnewtimercyclefin
	push "itempath:"
	push 1
	call modadv,get
	pop sitempath
	localint $2
	cthis getz
	pop $2
	new anima,imitem
	call imitem,anloopfin
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	call imitem,setz
	new img,immarker
	push sitempath
	push "itemmarker.png"
	pop $b
	popax
	add $a,$b
	call immarker,load
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call immarker,setz
	call immarker,hide
	cthis hide
	new int,bskip
	push 0
	pop bskip
	end method
	method addtoadv
	cthis getname
	cthis addtogamevars
	cthis enable
	cthis addasadvobject
	end method
	method removefromadv
	cthis disable
	cthis removefromadvobjs
	end method
	method hidepocket
	push sState
	push "closed"
	cmpjne
	cmp0
	je l2403
	push sState
	push "close"
	cmpjne
	cmp0
	je l2405
	cthis pockettoggle
	push 0
	call tim,stop
l2405:
l2406:
	push sState
	push "closed"
	cmpjne
	cmp0
	je l2407
	call tim,evalpocket
	push 0
	call tim,stop
	jmp l2406
l2407:
l2403:
	end method
	method exitpocket
	push "closed"
	pop sState
	push 0
	call tim,stop
	cthis hide
	end method
	method skip
	push 1
	pop bskip
	end method
	method skipitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2409
	push 1
	pop bskip
l2409:
	end method
	method additem
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call arPocket,contains
	cmp0
	je l2411
	ret
l2411:
	push $1
	call arPocket,add
	push $2
	call arPocketFile,add
	localstring $3
	push _sbase
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new anima,[$e]
	push $3
	cthis add
	push $3
	spushs
	push sitempath
	push $2
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $3
	spushs
	push 0
	spop $a
	call [$a],play
	push $3
	spushs
	cthis getz
	spop $a
	call [$a],setz
	push $3
	spushs
	spop $a
	call [$a],hide
	add iNumItems,1
	pop iNumItems
	end method
	method savestate
	localstring $1
	pop $1
	push "saves/"
	cthis getname
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_name.txt"
	pop $b
	popax
	add $a,$b
	call arPocket,vecsave
	push "saves/"
	cthis getname
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_file.txt"
	pop $b
	popax
	add $a,$b
	call arPocketFile,vecsave
	end method
	method loadstate
	localstring $1
	pop $1
	new vector,vpcp
	push "string"
	call vpcp,type
	new vector,vpcf
	push "string"
	call vpcf,type
	push "saves/"
	cthis getname
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_name.txt"
	pop $b
	popax
	add $a,$b
	call vpcp,vecload
	push "saves/"
	cthis getname
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_file.txt"
	pop $b
	popax
	add $a,$b
	call vpcf,vecload
	localint $2
	push 0
	pop $2
l2412:
	push $2
	call vpcp,size
	cmpjl
	cmp0
	je l2413
	jmp l2415
l2414:
	add $2,1
	pop $2
	jmp l2412
l2415:
	push $2
	call vpcp,get
	push $2
	call vpcf,get
	cthis additem
	jmp l2414
l2413:
	delete vpcp
	delete vpcf
	end method
	method removeitem
	localstring $1
	pop $1
	localdef $2
	push _sbase
	call $1,strsubbs
	call arPocket,find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l2417
	ret
l2417:
	push $2
	call arPocket,removeat
	push $2
	call arPocketFile,removeat
	push $1
	cthis remove
	push $1
	spushs
	spop $d
	delete [$d]
	sub iNumItems,1
	pop iNumItems
	push sState
	push "opened"
	cmpje
	cmp0
	je l2419
	cthis hide
l2419:
	end method
	method useitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2421
	push sItem
	cthis removeitem
	cthis itemhide
l2421:
	end method
	method pckremove
	localstring $1
	pop $1
	push _sbase
	push $1
	pop $b
	popax
	add $a,$b
	cthis removeitem
	end method
	method evalpocket
	cthis play
	push sState
	push "open"
	cmpje
	cmp0
	je l2423
	push 16
	popax
	add iScale,$a
	pop iScale
	jmp l2422
l2423:
	push sState
	push "close"
	cmpje
	cmp0
	je l2425
	push 16
	popax
	sub iScale,$a
	pop iScale
l2425:
l2422:
	push iScale
	push 116
	cmpja
	cmp0
	je l2427
	push 0
	cthis stop
	push 116
	pop iScale
	push "opened"
	pop sState
	jmp l2426
l2427:
	push iScale
	push 0
	cmpjl
	cmp0
	je l2429
	push 0
	cthis stop
	push 0
	pop iScale
	push "closed"
	pop sState
l2429:
l2426:
	localreal $1
	push iScale
	push iScale
	pop $b
	popax
	mul $a,$b
	push 550
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	localreal $2
	localstring $3
	localint $4
	push 0
	pop $4
l2430:
	push $4
	push iNumItems
	cmpjl
	cmp0
	je l2431
	jmp l2433
l2432:
	add $4,1
	pop $4
	jmp l2430
l2433:
	push $1
	push $4
	pop $b
	popax
	mul $a,$b
	push $1
	push iNumItems
	pop $b
	popax
	mul $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push 90.0
	pop $b
	popax
	sub $a,$b
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $2
	push $4
	cthis get
	pop $3
	push $3
	spushs
	call $2,cos
	push iScale
	pop $b
	popax
	mul $a,$b
	push iX
	pop $b
	popax
	add $a,$b
	push 76
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call $2,sin
	push iScale
	pop $b
	popax
	mul $a,$b
	push iY
	pop $b
	popax
	add $a,$b
	push 75
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $3
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l2435
	push $3
	spushs
	push 0
	spop $a
	call [$a],play
l2435:
	jmp l2432
l2431:
	push sState
	push "closed"
	cmpje
	cmp0
	je l2437
	cthis hide
l2437:
	end method
	method pocketpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push iX
	pop $b
	popax
	sub $a,$b
	pop $3
	localint $4
	push $2
	push iY
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	cthis move
	push $1
	pop iX
	push $2
	pop iY
	end method
	method pockettoggle
	push sState
	push "opened"
	cmpje
	cmp0
	je l2439
	push "close"
	pop sState
	call immarker,hide
	call tim,play
	jmp l2438
l2439:
	push sState
	push "closed"
	cmpje
	cmp0
	je l2441
	push "open"
	pop sState
	call arPocket,size
	push 0
	cmpja
	cmp0
	je l2443
	call _fx_pocket,play
l2443:
	push _sanim
	spushs
	spop $a
	call [$a],getposx
	pop iX
	push _sanim
	spushs
	spop $a
	call [$a],getposy
	push _sanim
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop iY
	cthis itemhide
	cthis show
	call tim,evalpocket
	call tim,play
	jmp l2440
l2441:
	push sState
	push "open"
	cmpje
	cmp0
	je l2445
	push "close"
	pop sState
	jmp l2444
l2445:
	push sState
	push "close"
	cmpje
	cmp0
	je l2447
	push "open"
	pop sState
l2447:
l2444:
l2440:
l2438:
	end method
	method getitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2449
	push _sbase
	call sItem,strsubbs
	jmp l2448
l2449:
	push "null"
l2448:
	ret
	end method
	method itemhide
	push "null"
	pop sFocusItem
	push "null"
	pop sItem
	push 0
	call imitem,stop
	call imitem,hide
	push "null"
	pop sItemMover
	end method
	method printstate
	call sState,print
	call bskip,print
	end method
	method itemclick
	cthis skip
	push sState
	push "closed"
	cmpje
	cmp0
	je l2451
	cthis pockettoggle
	jmp l2450
l2451:
	push sState
	push "opened"
	cmpje
	cmp0
	je l2453
	push sFocusItem
	push "null"
	cmpjne
	cmp0
	je l2455
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2457
	cthis pockettoggle
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sItem,strsubbs
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sFocusItem,strsubbs
	pop $b
	popax
	add $a,$b
	cthis playbehif
	neg
	pop _b_rewind
	cthis itemhide
	jmp l2456
l2457:
	push sFocusItem
	pop sItem
	push sItem
	call imitem,copy
	push sFocusItem
	spushs
	spop $a
	call [$a],hide
	push 1
	call imitem,play
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call imitem,setz
	cthis setitempos
	cthis getname
	pop sItemMover
l2456:
	jmp l2454
l2455:
	cthis pockettoggle
l2454:
	jmp l2452
l2453:
	push sState
	push "open"
	cmpje
	cmp0
	je l2459
	cthis pockettoggle
	jmp l2458
l2459:
	push sState
	push "close"
	cmpje
	cmp0
	je l2461
	cthis pockettoggle
l2461:
l2458:
l2452:
l2450:
	end method
	method preparetosort
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	clparent gmimgvec,isin
	pop $3
	push $3
	push 0
	cmpje
	cmp0
	je l2463
	push _sanim
	spushs
	spop $a
	call [$a],getz
	cthis setz
l2463:
	end method
	method endsort
	push _ipcz
	cthis setz
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	push $2
	push $3
	push $4
	clparent gmimgvec,isin
	pop $5
	push $5
	cmp0
	je l2465
	push $5
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	pop sFocusItem
	jmp l2464
l2465:
	push "null"
	pop sFocusItem
	push _sanim
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	pop $5
l2464:
	push $5
	ret
	end method
	method hide
	push "stop"
	push 0
	cthis eval1
	push "hide"
	cthis eval
	call immarker,hide
	end method
	method setitempos
	call mouse,getpx
	push 76
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call mouse,getpy
	push 75
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call imitem,setpos
	end method
	method itemmoveoff
	push sState
	push "opened"
	cmpje
	cmp0
	je l2467
	call immarker,hide
l2467:
	end method
	method itemmoveon
	push sState
	push "opened"
	cmpje
	cmp0
	je l2469
	push sFocusItem
	push "null"
	cmpjne
	cmp0
	je l2471
	call immarker,show
	push sFocusItem
	spushs
	spop $a
	call [$a],getcx
	call immarker,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push sFocusItem
	spushs
	spop $a
	call [$a],getcy
	call immarker,geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call immarker,setpos
l2471:
l2469:
	end method
	method checkusebutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sItem,strsubbs
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	jne l2474
	push sFocusItem
	push "null"
	cmpjne
	cmp0
	je l2475
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sItem,strsubbs
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sFocusItem,strsubbs
	pop $b
	popax
	add $a,$b
	cthis behexist
	jmp l2477
l2475:
	push 0
	jmp l2477
l2476:
	push 1
l2477:
	jmp l2478
l2473:
	push 0
	jmp l2478
l2474:
	push 1
l2478:
	cmp0
	je l2479
	push $2
	spushs
	spop $d
	call advmouse,[$d]
l2479:
	end method
	method moveon
	push sItemMover
	push "null"
	cmpje
	cmp0
	je l2481
	cthis getmainhero
	push _sanim
	cmpje
	cmp0
	jne l2484
	push "beh_"
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	push "_OPERATE_"
	pop $b
	popax
	add $a,$b
	push _sanim
	pop $b
	popax
	add $a,$b
	cthis behexist
	jmp l2485
l2483:
	push 0
	jmp l2485
l2484:
	push 1
l2485:
	cmp0
	je l2486
	call advmouse,setactive
l2486:
	jmp l2480
l2481:
	push sItemMover
	spushs
	cthis getname
	push "setactive"
	spop $a
	call [$a],checkusebutton
l2480:
	end method
	method onmouselclick
	localint $1
	localint $2
	pop $2
	pop $1
	push bskip
	cmp0
	je l2488
	push 0
	pop bskip
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2490
	push sState
	push "opened"
	cmpje
	cmp0
	je l2490
	push sFocusItem
	push "null"
	cmpje
	jmp l2492
l2490:
	push 0
	jmp l2492
l2491:
	push 1
l2492:
	cmp0
	je l2493
	cthis pockettoggle
l2493:
	jmp l2487
l2488:
	cthis getmainhero
	push _sanim
	cmpje
	cmp0
	je l2495
	push sState
	push "opened"
	cmpje
	cmp0
	jne l2497
	push sState
	push "open"
	cmpje
	jmp l2498
l2496:
	push 0
	jmp l2498
l2497:
	push 1
l2498:
	cmp0
	je l2500
	cthis pockettoggle
	jmp l2499
l2500:
	cthis itemhide
l2499:
l2495:
l2487:
	end method
	method onmouserclick
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis butisin
	cmp0
	je l2502
	push sState
	push "opened"
	cmpje
	cmp0
	je l2504
	push sFocusItem
	push "null"
	cmpjne
	jmp l2506
l2504:
	push 0
	jmp l2506
l2505:
	push 1
l2506:
	cmp0
	je l2507
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_ITEM_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sFocusItem,strsubbs
	pop $b
	popax
	add $a,$b
	cthis playbehif
	popax
	jmp l2503
l2507:
	push "beh_RCLICK_"
	push _sanim
	pop $b
	popax
	add $a,$b
	cthis playbehif
	popax
l2503:
l2502:
	end method
	method onmousemove
	localint $1
	localint $2
	pop $2
	pop $1
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2509
	cthis setitempos
l2509:
	push sState
	push "opened"
	cmpje
	cmp0
	je l2511
	push $1
	push $2
	push 1
	push 1
	cthis butisin
	jmp l2513
l2511:
	push 0
	jmp l2513
l2512:
	push 1
l2513:
	cmp0
	je l2514
	cthis itemmoveon
l2514:
	end method
	method moveoff
	call advmouse,setstd
	cthis itemmoveoff
	end method
	method clickon
	cthis getmainhero
	push _sanim
	cmpje
	cmp0
	je l2516
	call clwalkq,stand
	cthis itemclick
	jmp l2515
l2516:
	cthis getname
	call clwalkq,visit
l2515:
	end method
	end class

	new string,sgmlastscene
	push "null"
	pop sgmlastscene
	new string,sgmglobpath
	push "null"
	pop sgmglobpath
	new string,sgmgame
	push "null"
	pop sgmgame
	new db,gdbsound
	push igmsave
	cmp0
	je l2518
	push "saves/save.txt"
	new classfullsave,clsave
	jmp l2517
l2518:
	push "null"
	new classfullsave,clsave
l2517:
	new string,_slhpref
	push "cllh"
	pop _slhpref
	new string,_spathpref
	push "pt"
	pop _spathpref
	new string,_spocketpref
	push "pc"
	pop _spocketpref
	new string,_sstndpref
	push "stnd"
	pop _sstndpref
	new string,_stalkpref
	push "ctlk"
	pop _stalkpref
	new int,AdventureGame
	push 0
	push 0
	push iResX
	push iResY
	new CutScene,ccs
	push 2000
	call ccs,setz
	module modadv
	method init
	new db,dbload
	new string,stalktype
	push "snd"
	cthis settalktype
	push "null"
	new Script,scrl
	new string,_stalk
	end method
	method execute
	localstring $1
	pop $1
	push $1
	call scrl,call
	end method
	method loadscript
	localstring $1
	pop $1
	push $1
	call scrl,load
	end method
	method loadsounds
	localstring $1
	pop $1
	push $1
	call gdbsound,load
	push igmdebug
	cmp0
	je l2520
	push "exports/adv.dlg"
	call gdbsound,save
l2520:
	end method
	method gettalktype
	push stalktype
	ret
	end method
	method settalktype
	localstring $1
	pop $1
	push $1
	pop stalktype
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbload,loadscript
	push "talk:"
	push 1
	cthis get
	pop _stalk
	end method
	method get
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbload,findbyrow
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l2522
	push "modadv.dbload: can't find "
	push $1
	pop $b
	popax
	add $a,$b
	call engine,print
	push "null"
	ret
	jmp l2521
l2522:
	push $3
	push $2
	call dbload,get
	ret
l2521:
	end method
	end module

	module modadvglob
	method init
	new gmobjvec,grhero
	new gmobjvec,grfiles
	new gmobjvec,grpck
	end method
	method addhero
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push "hero_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_active"
	pop $b
	popax
	add $a,$b
	push 1
	call clsave,set
	localint $4
	push $1
	call grhero,find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l2524
	push $4
	call grfiles,get
	push $2
	cmpjne
	cmp0
	je l2526
	push $4
	push $2
	call grfiles,set
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
l2526:
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $3
	cmp0
	je l2528
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],addtoadv
l2528:
	push 0
	ret
	jmp l2523
l2524:
	push $1
	push $2
	push 0
	cthis newanima
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	call grhero,add
	push $2
	call grfiles,add
	push $3
	cmp0
	je l2530
	localstring $5
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	cthis hasvar
	neg
	cmp0
	je l2532
	push $5
	spushs
	push $1
	spop $e
	new classadvpocket,[$e]
	push $5
	call grpck,add
	push $5
	spushs
	spop $a
	call [$a],addtoadv
	jmp l2531
l2532:
	push $5
	spushs
	spop $a
	call [$a],addtoadv
l2531:
l2530:
	push 1
	ret
l2523:
	end method
	method reloadhero
	localstring $1
	pop $1
	localint $2
	push $1
	call grhero,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l2534
	localstring $3
	push $2
	call grfiles,get
	pop $3
	push $1
	push 0
	cthis _delhero
	push $1
	push $3
	push 0
	cthis addhero
	popax
l2534:
	end method
	method delhero
	localstring $1
	pop $1
	push $1
	push 1
	cthis _delhero
	end method
	method delheros
l2535:
	call grhero,size
	cmp0
	je l2536
	call grhero,first
	cthis delhero
	jmp l2535
l2536:
	end method
	method _delhero
	localstring $1
	localint $2
	pop $2
	pop $1
	push "hero_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_active"
	pop $b
	popax
	add $a,$b
	push 0
	call clsave,set
	localint $3
	push $1
	call grhero,find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l2538
	push $1
	spushs
	spop $d
	delete [$d]
	push $3
	call grhero,removeat
	push $3
	call grfiles,removeat
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l2540
	push $2
	jmp l2542
l2540:
	push 0
	jmp l2542
l2541:
	push 1
l2542:
	cmp0
	je l2543
	push $1
	spushs
	spop $d
	delete [$d]
	push $1
	call grpck,remove
l2543:
l2538:
	end method
	method savepck
	localstring $1
	pop $1
	push "saves/grpck_"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call grpck,vecsave
	localint $2
	push 0
	pop $2
l2544:
	push $2
	call grpck,size
	cmpjl
	cmp0
	je l2545
	jmp l2547
l2546:
	add $2,1
	pop $2
	jmp l2544
l2547:
	push $2
	call grpck,get
	spushs
	push $1
	spop $a
	call [$a],savestate
	jmp l2546
l2545:
	end method
	method loadpck
	localstring $1
	pop $1
	localdef $2
	localdef $3
	localint $4
	push 0
	pop $4
l2548:
	push $4
	call grpck,size
	cmpjl
	cmp0
	je l2549
	jmp l2551
l2550:
	add $4,1
	pop $4
	jmp l2548
l2551:
	push $4
	call grpck,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],removefromadv
	push $2
	spushs
	spop $d
	delete [$d]
	jmp l2550
l2549:
	push "saves/grpck_"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call grpck,vecload
	push 0
	pop $4
l2552:
	push $4
	call grpck,size
	cmpjl
	cmp0
	je l2553
	jmp l2555
l2554:
	add $4,1
	pop $4
	jmp l2552
l2555:
	push $4
	call grpck,get
	pop $2
	push $2
	spushs
	push _spocketpref
	call $2,strsubbs
	spop $e
	new classadvpocket,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],loadstate
	push $2
	spushs
	spop $a
	call [$a],removefromadv
	jmp l2554
l2553:
	end method
	method onexit
	localstring $1
	localint $2
	push 0
	pop $2
l2556:
	push $2
	call grhero,size
	cmpjl
	cmp0
	je l2557
	jmp l2559
l2558:
	add $2,1
	pop $2
	jmp l2556
l2559:
	push $2
	call grhero,get
	pop $1
	push $1
	spushs
	push 0
	spop $a
	call [$a],stop
	push $1
	spushs
	spop $a
	call [$a],hide
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	cmp0
	je l2561
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],exitpocket
l2561:
	push _spathpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $a
	call [$a],unlinkanima
	jmp l2558
l2557:
	end method
	end module

	class classloadedhero
	method init
	new string,sanhero
	new int,bplaystart
	push 0
	pop bplaystart
	new int,bplaystop
	push 0
	pop bplaystop
	end method
	method setplaystart
	localint $1
	pop $1
	push $1
	pop bplaystart
	end method
	method setplaystop
	localint $1
	pop $1
	push $1
	pop bplaystop
	end method
	method getstartstop
	push bplaystart
	push bplaystop
	ret
	end method
	end class

	class classadvcontroller
	parent classadv
	method init
	push 1
	pop AdventureGame
	clparent classadv,init
	push "sndpath:"
	push 1
	call modadv,get
	cthis setwavpath
	new snd,__sndplay
	call __sndplay,classadvcontroller0
	push 0
	pop igmstate
	new classstndgroup,modstnd
	new Music,_music
	new timer,_tim_dbclk
	push 200
	call _tim_dbclk,setdelay
	new int,_if_pos
	push 1
	popax
	sub 0,$a
	pop _if_pos
	push "_dbbh"
	new classobjcounter,clcbeh
	new string,_sbeh
	push "clbeh"
	pop _sbeh
	new int,iidbeh
	push "dbadv"
	new classobjcounter,clcadv
	new db,dbmacros
	new vector,_vecarg
	push "string"
	call _vecarg,type
	new classadvcamera,clcamera
	push "advmsmove"
	call clcamera,setmetonmsmove
	new classwalkerqueue,clwalkq
	new gmadvvec,grbuts
	new gmimgvec,grmsmove
	new gmimgvec,grmslclick
	new gmimgvec,grmsrclick
	new gmimgvec,grmslrel
	new string,_susetool
	push "null"
	pop _susetool
	new string,_slastms
	push "null"
	pop _slastms
	new int,bmslock
	push 0
	pop bmslock
	new int,_b_rewind
	push 1
	pop _b_rewind
	new string,sactbeh
	push "null"
	pop sactbeh
	new string,slastpathf
	new int,licznik
	push 0
	pop licznik
	new string,smainhero
	push "null"
	pop smainhero
	cthis advsaveonstart
	localstring $1
	localstring $2
	push sgmgame
	push "null"
	cmpje
	cmp0
	je l2563
	cthis getname
	pop sgmgame
l2563:
	new string,sprivgame
	push sgmgame
	pop sprivgame
	push "null"
	pop sgmgame
	push "game"
	call sprivgame,strsubbs
	pop $2
	push sgmglobpath
	push "null"
	cmpjne
	cmp0
	je l2565
	push sgmglobpath
	pop $1
	push "null"
	pop sgmglobpath
	jmp l2564
l2565:
	push $2
	pop $1
l2564:
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	push $2
	push ".adv"
	pop $b
	popax
	add $a,$b
	cthis loadadventure
	call grbuts,sortimgs
	push smainhero
	push "null"
	cmpje
	cmp0
	je l2567
	call clcamera,getactor
	pop smainhero
l2567:
	call clcamera,start
	call clcamera,setscene
	call clwalkq,start
	push 1
	call clwalkq,setverlen
	call advmouse,setstd
	push "preinit"
	cthis behexist
	cmp0
	je l2569
	push "preinit"
	cthis getname
	push "playbehinit"
	cthis playbehobfin
	jmp l2568
l2569:
	cthis playbehinit
l2568:
	call grbuts,sortimgs
	end method
	method classadvcontroller0
	push A
	push "sfun"
	push "null"
	push "sob"
	push "null"
	cthis vars2
	push 0
	push 1
	cthis setstartstopflag
	push "onfinish"
	push "classadvcontroller1"
	cthis addmethod
	end method
	method classadvcontroller1
	push sob
	push sfun
	cthis callfun
	end method
	method playbehinit
	push sprivgame
	push "visited"
	pop $b
	popax
	add $a,$b
	call clsave,bis
	cmp0
	je l2571
	push "behinit_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l2573
	jmp l2572
l2573:
	push "behinit"
	cthis playpostinit
	cmp0
	je l2575
l2575:
l2572:
	jmp l2570
l2571:
	push sprivgame
	push "visited"
	pop $b
	popax
	add $a,$b
	call clsave,bset
	push "behinit0_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l2577
	jmp l2576
l2577:
	push "behinit0"
	cthis playpostinit
	cmp0
	je l2579
	jmp l2578
l2579:
	push "behinit_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l2581
	jmp l2580
l2581:
	push "behinit"
	cthis playpostinit
	cmp0
	je l2583
l2583:
l2580:
l2578:
l2576:
l2570:
	end method
	method getmainhero
	push smainhero
	ret
	end method
	method setmainhero
	localstring $1
	pop $1
	push $1
	pop smainhero
	end method
	method ismainhero
	localstring $1
	pop $1
	push smainhero
	push $1
	cmpje
	ret
	end method
	method setactbeh
	localstring $1
	pop $1
	push $1
	pop sactbeh
	end method
	method getactbeh
	push sactbeh
	ret
	end method
	method advgetlock
	push bmslock
	ret
	end method
	method advmslock
	push 1
	pop bmslock
	call advmouse,setwait
	end method
	method advmsunlock
	push 0
	pop bmslock
	call advmouse,setstd
	end method
	method advmssetlock
	localint $1
	pop $1
	push $1
	cmp0
	je l2585
	cthis advmslock
	jmp l2584
l2585:
	cthis advmsunlock
l2584:
	end method
	method setusetool
	localstring $1
	pop $1
	push $1
	pop _susetool
	end method
	method getusetool
	push _susetool
	ret
	end method
	method playpostinit
	localstring $1
	pop $1
	push $1
	call gameapi,getgamename
	push "postinit"
	cthis playbehobfinif
	ret
	end method
	method playbeh
	localstring $1
	pop $1
	push $1
	push "null"
	cthis playbehfin
	end method
	method playbehif
	localstring $1
	pop $1
	push $1
	cthis behexist
	cmp0
	je l2587
	push $1
	push "null"
	cthis playbehfin
	push 1
	ret
l2587:
	push 0
	ret
	end method
	method playbehfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	push $2
	cthis playbehobfin
	end method
	method playbehfinif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis behexist
	cmp0
	je l2589
	push $1
	push $2
	cthis playbehfin
	push 1
	ret
l2589:
	push 0
	ret
	end method
	method playbehobfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis getbeh
	spushs
	push $2
	push $3
	spop $a
	call [$a],playfin
	end method
	method playbehobfinif
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis behexist
	cmp0
	je l2591
	push $1
	push $2
	push $3
	cthis playbehobfin
	push 1
	ret
l2591:
	push 0
	ret
	end method
	method playnewgamepath
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	pop sgmglobpath
	push sprivgame
	pop sgmlastscene
	push "lastscene"
	push sgmlastscene
	call clsave,set
	push $1
	call gameapi,play
	end method
	method playnewgame
	localstring $1
	pop $1
	push $1
	push "null"
	cthis playnewgamepath
	end method
	method playfromscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	pop sgmgame
	push "defaultadv:"
	push 1
	call modadv,get
	push $1
	cthis playnewgamepath
	end method
	method getheroloader
	localstring $1
	pop $1
	push _slhpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l2593
	push $1
	jmp l2592
l2593:
	push "null"
l2592:
	end method
	method advanstand
	localstring $1
	pop $1
	localstring $2
	push _spathpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l2595
	push $2
	spushs
	spop $a
	call [$a],iswalking
	jmp l2597
l2595:
	push 0
	jmp l2597
l2596:
	push 1
l2597:
	cmp0
	je l2598
	push $2
	spushs
	push 0
	spop $a
	call [$a],stop
	push $2
	spushs
	spop $a
	call [$a],stand
l2598:
	end method
	method reloadhero
	localstring $1
	pop $1
	push $1
	cthis _getheropath
	cthis anreload
	localstring $2
	push _spathpref
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	cthis getname
	spop $a
	call [$a],linkanima
	push $2
	spushs
	spop $a
	call [$a],linkfilter
	push $2
	spushs
	spop $a
	call [$a],scalean
	end method
	method analizeanopts
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $8
	localreal $9
	localstring $10
	localstring $11
	localint $12
	push 0
	pop $12
	localint $13
	push 0
	pop $13
	localint $14
	localint $15
	localint $16
	localint $17
	push 0
	pop $17
l2599:
	push $3
	push $4
	cmpjl
	cmp0
	je l2600
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	spushs
	push "-stt"
	cmpst
	jne l2602
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $12
	add $3,1
	pop $3
	jmp l2601
l2602:
	push "-stp"
	cmpst
	jne l2603
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $13
	add $3,1
	pop $3
	jmp l2601
l2603:
	push "-wav"
	cmpst
	jne l2604
	spop $a
	push _slhpref
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	pop $10
	add $3,1
	pop $3
	push $10
	spushs
	spop $e
	new classloadedhero,[$e]
	push $10
	spushs
	push "sanhero"
	push $5
	spop $a
	call [$a],varset
	push $6
	spushs
	push $10
	spop $a
	call [$a],add
	jmp l2601
l2604:
	push "-path"
	cmpst
	jne l2605
	spop $a
	push $5
	clparent classadvanhero,buildheroframe
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push _spathpref
	push $5
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	push $5
	push $10
	push $8
	cthis newclpathfcopy
	push $11
	spushs
	spop $a
	call [$a],prepareforhero
	push $11
	push "look"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherolooker,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	push $11
	push "use"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherouser,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	push $11
	push "take"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherotaker,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	jmp l2601
l2605:
	push "-ft"
	cmpst
	jne l2606
	spop $a
	push _spathpref
	push $5
	pop $b
	popax
	add $a,$b
	pop $11
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $11
	spushs
	spop $a
	call [$a],linkfilter
	push $11
	spushs
	push $8
	spop $a
	call [$a],setzsize
	push $11
	spushs
	push $9
	spop $a
	call [$a],setscalepower
	jmp l2601
l2606:
	push "-stnd"
	cmpst
	jne l2607
	spop $a
	push _sstndpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setdelay
	add $3,1
	pop $3
	jmp l2601
l2607:
	push "-txt"
	cmpst
	jne l2608
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $14
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $15
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $16
	add $3,1
	pop $3
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $15
	push $16
	spop $a
	call [$a],settxtcolor
	jmp l2601
l2608:
	push "-font"
	cmpst
	jne l2609
	spop $a
	push 1
	pop $17
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $7
	push "hero:"
	cmpje
	cmp0
	je l2611
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $10
	push $11
	spop $a
	call [$a],setfont
l2611:
	jmp l2601
l2609:
	spop $a
	push $1
	push $2
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push $5
	cthis analizeaninstr
	pop $3
l2601:
	jmp l2599
l2600:
	push $17
	neg
	cmp0
	je l2613
	push $7
	push "hero:"
	cmpje
	jmp l2615
l2613:
	push 0
	jmp l2615
l2614:
	push 1
l2615:
	cmp0
	je l2616
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push "font:"
	push 1
	call modadv,get
	push "font:"
	push 2
	call modadv,get
	spop $a
	call [$a],setfont
l2616:
	push $6
	spushs
	push "setplaystart"
	push $12
	spop $a
	call [$a],eval1
	push $6
	spushs
	push "setplaystop"
	push $13
	spop $a
	call [$a],eval1
	push $6
	spushs
	spop $a
	call [$a],free
	end method
	method setasadvanima
	cthis getname
	push "cadvherofinish"
	clparent classadvanhero,setashero
	end method
	method analizebut
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	localint $8
	localint $9
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $6
	add $4,1
	pop $4
	push ".pyz"
	call $6,contains
	cmp0
	je l2618
	push $6
	pop $7
	push "an"
	push 4
	call $6,strsube
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $7
	push 0
	cthis newanima
l2618:
	push 1
	call $1,strsube
	pop $1
	push $6
	push $5
	push $1
	clparent classadvbut,setasbutton2
	push "setas"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spop $d
	clparent classadvbut,[$d]
	push $6
	spushs
	push $6
	spushs
	spop $a
	call [$a],getcx
	push $6
	spushs
	spop $a
	call [$a],getcy
	spop $a
	call [$a],setadvbutpos
l2619:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2620
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	spushs
	push "-pos"
	cmpst
	jne l2622
	spop $a
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	push $5
	push "-id"
	cmpje
	cmp0
	je l2624
	push slastpathf
	push "null"
	cmpjne
	jmp l2626
l2624:
	push 0
	jmp l2626
l2625:
	push 1
l2626:
	cmp0
	je l2627
	push slastpathf
	spushs
	push $7
	spop $a
	call [$a],getbyname
	pop $8
	push slastpathf
	spushs
	push $8
	spop $a
	call [$a],getxver
	push slastpathf
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $5
	push slastpathf
	spushs
	push $8
	spop $a
	call [$a],getyver
	push slastpathf
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $7
l2627:
	push $6
	spushs
	push $5
	push $7
	spop $a
	call [$a],setadvbutpos
	jmp l2621
l2622:
	push "-bs1"
	cmpst
	jne l2628
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase1
	add $4,1
	pop $4
	jmp l2621
l2628:
	push "-bs2"
	cmpst
	jne l2629
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase2
	add $4,1
	pop $4
	jmp l2621
l2629:
	push "-us1"
	cmpst
	jne l2630
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],baseuse1=
	add $4,1
	pop $4
	jmp l2621
l2630:
	push "-us2"
	cmpst
	jne l2631
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],baseuse2=
	add $4,1
	pop $4
	jmp l2621
l2631:
	push "-useon"
	cmpst
	jne l2632
	spop $a
	push $6
	spushs
	push "use:"
	push 1
	call modadv,get
	spop $a
	call [$a],setbutbase1
	push $6
	spushs
	push "use:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase2
	jmp l2621
l2632:
	push "-dir"
	cmpst
	jne l2633
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutdir
	add $4,1
	pop $4
	jmp l2621
l2633:
	push "-noreach"
	cmpst
	jne l2634
	spop $a
	push $6
	spushs
	push 0
	spop $a
	call [$a],setreach
	jmp l2621
l2634:
	push "-nh"
	cmpst
	jne l2635
	spop $a
	push $6
	spushs
	push 0
	spop $a
	call [$a],hideontake=
	jmp l2621
l2635:
	push "-pck"
	cmpst
	jne l2636
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setpocket
	add $4,1
	pop $4
	jmp l2621
l2636:
	push "-mask"
	cmpst
	jne l2637
	spop $a
	push $6
	clparent classadvbut,setasmask
	push $6
	spushs
	spop $a
	call [$a],hide
	jmp l2621
l2637:
	push "-inpck"
	cmpst
	jne l2638
	spop $a
	push $6
	spushs
	spop $a
	call [$a],hideontake
	cmp0
	je l2640
	push $6
	spushs
	spop $a
	call [$a],hide
	jmp l2639
l2640:
	push $6
	spushs
	push "but"
	spop $a
	call [$a],setbuttyp
l2639:
	cthis getmainhero
	pop $5
	push $5
	push "null"
	cmpje
	cmp0
	je l2642
	call clcamera,getactor
	pop $5
l2642:
	push $5
	spushs
	spop $a
	call [$a],getpocket
	spushs
	push $6
	spushs
	spop $a
	call [$a],getbutname
	push $6
	spushs
	spop $a
	call [$a],getpocket
	spop $a
	call [$a],additem
	jmp l2621
l2638:
	push "-disable"
	cmpst
	jne l2643
	spop $a
	push $6
	spushs
	spop $a
	call [$a],disable
	jmp l2621
l2643:
	push "-once"
	cmpst
	jne l2644
	spop $a
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $6
	spushs
	push $5
	spop $a
	call [$a],setonce
	push $5
	call clsave,bis
	cmp0
	je l2646
	push $6
	spushs
	spop $a
	call [$a],disable
l2646:
	jmp l2621
l2644:
	spop $a
l2621:
	jmp l2619
l2620:
	end method
	method _getheropath
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis getpath
	pop $2
	push $2
	call engine,fileexist
	cmp0
	je l2648
	push "$"
	push $2
	pop $b
	popax
	add $a,$b
	jmp l2647
l2648:
	push "$"
	push "heropath:"
	push 1
	call modadv,get
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
l2647:
	end method
	method loadadventure
	localstring $1
	pop $1
	localstring $2
	call clcadv,get
	pop $2
	localstring $3
	push "grpers"
	call clcadv,size
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	spop $e
	new db,[$e]
	push $2
	spushs
	push $1
	cthis getpath
	spop $a
	call [$a],loadbeh
	localint $4
	push $2
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localstring $10
	localstring $11
	localint $12
	localint $13
	localint $14
	localreal $15
	localreal $16
	push $2
	push "script"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	spushs
	push $2
	spop $e
	new Script,[$e]
	localstring $17
	push ""
	pop $17
	push $3
	spushs
	spop $e
	new gmobjvec,[$e]
	localint $18
	push 0
	pop $18
l2649:
	push $18
	push $4
	cmpjl
	cmp0
	je l2650
	jmp l2652
l2651:
	add $18,1
	pop $18
	jmp l2649
l2652:
	push 0
	pop $5
	push $2
	spushs
	push $18
	spop $a
	call [$a],getcolsno
	pop $6
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	spushs
	push "setpath:"
	cmpst
	jne l2654
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $17
	cthis setgraphpath
	jmp l2653
l2654:
	push "nopath:"
	cmpst
	jne l2655
	spop $a
	push ""
	pop $17
	push $17
	cthis setgraphpath
	jmp l2653
l2655:
	push "func"
	cmpst
	jne l2656
	spop $a
l2657:
	push $2
	spushs
	push $18
	push 0
	spop $a
	call [$a],get
	push "end"
	cmpjne
	cmp0
	je l2658
	add $18,1
	pop $18
	jmp l2657
l2658:
	jmp l2653
l2656:
	push "sndpath:"
	cmpst
	jne l2659
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	cthis setwavpath
	jmp l2653
l2659:
	push "hero:"
	cmpst
	je l2661
	push "an:"
	cmpst
	je l2661
	jmp l2660
l2661:
	spop $a
	push $2
	spushs
	push $18
	push "-global"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push "-pck"
	spop $a
	call [$a],dbdelvar
	pop $8
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push ".pyz"
	call $11,contains
	cmp0
	je l2663
	push $11
	pop $10
	push "an"
	push ".pyz"
	call $11,strsubes
	pop $b
	popax
	add $a,$b
	pop $11
	jmp l2662
l2663:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
l2662:
	push $9
	push "hero:"
	cmpje
	cmp0
	je l2665
	push ".pyz"
	call $10,contains
	cmp0
	je l2667
	push $10
	cthis _getheropath
	pop $10
l2667:
l2665:
	push ".pyz"
	call $10,contains
	cmp0
	je l2669
	push $7
	cmp0
	je l2671
	push $11
	push $10
	push $8
	call modadvglob,addhero
	cmp0
	je l2673
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
l2673:
	sub $6,1
	pop $6
	jmp l2670
l2671:
	push $11
	push $10
	push 0
	cthis newanima
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
	push $9
	push "hero:"
	cmpje
	cmp0
	je l2675
	push $8
	jmp l2677
l2675:
	push 0
	jmp l2677
l2676:
	push 1
l2677:
	cmp0
	je l2678
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	push $11
	spop $e
	new classadvpocket,[$e]
l2678:
l2670:
	jmp l2668
l2669:
	push $10
	push $11
	cthis copyanima
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
	push $9
	push "hero:"
	cmpje
	cmp0
	je l2680
	push $8
	jmp l2682
l2680:
	push 0
	jmp l2682
l2681:
	push 1
l2682:
	cmp0
	je l2683
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	push $11
	spop $e
	new classadvpocket,[$e]
l2683:
l2668:
	push $8
	cmp0
	je l2685
	sub $6,1
	pop $6
l2685:
	push $9
	push "hero:"
	cmpje
	cmp0
	je l2687
	push _sstndpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new classadvstander,[$e]
	push _stalkpref
	push $11
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classtalker,[$e]
	push $10
	spushs
	push $11
	spop $a
	call [$a],set
	push $10
	spushs
	push "gdbsound"
	spop $a
	call [$a],settextdb
l2687:
	push $2
	push $18
	push $5
	push $6
	push $11
	push $3
	push $9
	cthis analizeanopts
	jmp l2653
l2660:
	push "anaac:"
	cmpst
	jne l2688
	spop $a
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push 0
	pop $8
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push ".pyz"
	call $9,contains
	cmp0
	je l2690
	push $9
	pop $10
	push "an"
	push ".pyz"
	call $9,strsubes
	pop $b
	popax
	add $a,$b
	pop $9
	jmp l2689
l2690:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
l2689:
	push $7
	cmp0
	je l2692
	sub $6,1
	pop $6
	push $9
	spushs
	spop $e
	new gmmaskvec,[$e]
	jmp l2691
l2692:
	push $9
	spushs
	spop $e
	new gmadvvec,[$e]
l2691:
	push ".pyz"
	call $10,contains
	cmp0
	je l2694
	push "_"
	push $9
	pop $b
	popax
	add $a,$b
	push $10
	push 0
	cthis newanima
	push "_"
	push $9
	pop $b
	popax
	add $a,$b
	pop $10
	push 1
	pop $8
l2694:
	push $10
	push $9
	push $9
	cthis newanactionsgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	push $8
	cmp0
	je l2696
	push $10
	spushs
	spop $a
	call [$a],hide
l2696:
	jmp l2653
l2688:
	push "anaf:"
	cmpst
	jne l2697
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push ".pyz"
	call $9,contains
	cmp0
	je l2699
	push $9
	pop $10
	push "an"
	push ".pyz"
	call $9,strsubes
	pop $b
	popax
	add $a,$b
	pop $9
	jmp l2698
l2699:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
l2698:
	push $9
	spushs
	spop $e
	new gmimgvec,[$e]
	push ".pyz"
	call $10,contains
	cmp0
	je l2701
	push "_"
	push $9
	pop $b
	popax
	add $a,$b
	push $10
	push 0
	cthis newanima
	push "_"
	push $9
	pop $b
	popax
	add $a,$b
	pop $10
l2701:
	push $10
	push $9
	push $9
	cthis newanfrbyactgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l2653
l2697:
	push "anfac:"
	cmpst
	jne l2702
	spop $a
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $7
	cmp0
	je l2704
	sub $6,1
	pop $6
	push $9
	spushs
	spop $e
	new gmmaskvec,[$e]
	jmp l2703
l2704:
	push $9
	spushs
	spop $e
	new gmadvvec,[$e]
l2703:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $10
	push $9
	push $10
	spushs
	push $11
	spop $a
	call [$a],actionnr
	push $9
	cthis newanframesgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l2653
l2702:
	push "anac:"
	cmpst
	jne l2705
	spop $a
	push $2
	spushs
	push $18
	push "-adv"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $11
	clparent StringChecker,isdigit
	cmp0
	je l2707
	push $10
	spushs
	push $11
	spop $a
	call [$a],nameofaction
	pop $11
l2707:
	push $10
	push $9
	push $11
	cthis copyanimaact
	push $7
	cmp0
	je l2709
	sub $6,1
	pop $6
	push $9
	spushs
	spop $a
	call [$a],setasadvanima
l2709:
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l2653
l2705:
	push "anf:"
	cmpst
	jne l2710
	spop $a
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $10
	push $9
	cthis copyanima
	push $9
	spushs
	push $11
	push $8
	spop $a
	call [$a],setframe
	push $7
	cmp0
	je l2712
	sub $6,1
	pop $6
	push $9
	spushs
	spop $a
	call [$a],setasadvanima
l2712:
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l2653
l2710:
	push "anorder:"
	cmpst
	jne l2713
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l2653
l2713:
	push "behfile:"
	cmpst
	jne l2714
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	cthis loadbehaviours
	add $5,1
	pop $5
	jmp l2653
l2714:
	push "include:"
	cmpst
	jne l2715
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	cthis loadadventure
	add $5,1
	pop $5
	jmp l2653
l2715:
	push "walkqueue:"
	cmpst
	jne l2716
	spop $a
l2717:
	push $5
	push $6
	cmpjl
	cmp0
	je l2718
	push _spathpref
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call clwalkq,add
	add $5,1
	pop $5
	jmp l2717
l2718:
	jmp l2653
l2716:
	push "font:"
	cmpst
	jne l2719
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $9
	spushs
	spop $e
	new font,[$e]
	push $9
	spushs
	push $10
	push $7
	spop $a
	call [$a],load
	jmp l2653
l2719:
	push "bkg:"
	cmpst
	jne l2720
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push ".pyz"
	call $9,contains
	cmp0
	je l2722
	push "imgbkg"
	push $9
	push 0
	cthis newanima
	jmp l2721
l2722:
	push "imgbkg"
	push $9
	push 0
	cthis newimg
l2721:
	push $2
	push $18
	push $5
	push "imgbkg"
	cthis analizeaninstr
	pop $5
	jmp l2653
l2720:
	push "img:"
	cmpst
	jne l2723
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push 0
	push 4
	call $9,gete
	spushs
	push A
	push ".jpg"
	push ".png"
	spop $h
	call $h,in
	cmp0
	je l2725
	push $9
	pop $10
	push "img"
	push 4
	call $9,strsube
	pop $b
	popax
	add $a,$b
	pop $9
	jmp l2724
l2725:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
l2724:
	push $9
	push $10
	push 0
	cthis newimg
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l2653
l2723:
	push "but:"
	cmpst
	je l2727
	push "doors:"
	cmpst
	je l2727
	push "item:"
	cmpst
	je l2727
	jmp l2726
l2727:
	spop $a
	push $9
	push $2
	push $18
	push $5
	cthis analizebut
	jmp l2653
l2726:
	push "camera:"
	cmpst
	jne l2728
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $16
	add $5,1
	pop $5
	push $15
	push $16
	call clcamera,scalemodifiers
l2729:
	push $5
	push $6
	cmpjl
	cmp0
	je l2730
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push "-size"
	cmpje
	cmp0
	je l2732
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $7
	push $8
	call clcamera,setborders
	jmp l2731
l2732:
	push $9
	push "-center"
	cmpje
	cmp0
	je l2734
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $7
	push $8
	call clcamera,setcenter
	jmp l2733
l2734:
	push $9
	push "-sizebg"
	cmpje
	cmp0
	je l2736
	call imgbkg,getw
	call imgbkg,geth
	call clcamera,setborders
l2736:
l2733:
l2731:
	jmp l2729
l2730:
	jmp l2653
l2728:
	push "actor:"
	cmpst
	jne l2737
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	call clcamera,setactor
	add $5,1
	pop $5
	jmp l2653
l2737:
	push "bgr:"
	cmpst
	jne l2738
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $16
	add $5,1
	pop $5
	push $9
	spushs
	spop $e
	new classbgplan,[$e]
	push $9
	push $15
	push $16
	call clcamera,addbgr
	jmp l2653
l2738:
	push "pathfinder:"
	cmpst
	jne l2739
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop slastpathf
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push ".ptf"
	call $10,contains
	cmp0
	je l2741
	push 20
	pop $7
	push 20
	pop $8
	jmp l2740
l2741:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
l2740:
	push slastpathf
	push $10
	push $7
	push $8
	cthis newpathf
	jmp l2653
l2739:
	push "script:"
	cmpst
	jne l2742
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	spushs
	push $10
	spop $e
	new Script,[$e]
	jmp l2653
l2742:
	push "func:"
	cmpst
	jne l2743
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	sub $6,1
	pop $6
	call clcadv,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $7
l2744:
	push $7
	push 0
	cmpjae
	cmp0
	je l2745
	jmp l2747
l2746:
	sub $7,1
	pop $7
	jmp l2744
l2747:
	push $7
	call clcadv,getid
	push "script"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	spushs
	push $10
	spop $a
	call [$a],containsfun
	cmp0
	je l2749
	push 3
	pop $7
l2750:
	push $7
	push $6
	cmpjl
	cmp0
	je l2751
	jmp l2753
l2752:
	add $7,1
	pop $7
	jmp l2750
l2753:
	push $9
	spushs
	push $7
	push 3
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	push $18
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],ARG=
	jmp l2752
l2751:
	push 1
	popax
	sub 0,$a
	pop $7
	push $9
	spushs
	push $10
	spop $a
	call [$a],call
l2749:
	jmp l2746
l2745:
	jmp l2653
l2743:
	push "IF"
	cmpst
	jne l2754
	spop $a
	add _if_pos,1
	pop _if_pos
	push $2
	push $18
	push $5
	push $6
	cthis _found_if
	pop $18
	jmp l2653
l2754:
	push "ELSE"
	cmpst
	jne l2755
	spop $a
	push $2
	push $18
	push 1
	pop $b
	popax
	add $a,$b
	cthis _goto_fi
	pop $18
	jmp l2653
l2755:
	push "FI"
	cmpst
	jne l2756
	spop $a
	sub _if_pos,1
	pop _if_pos
	push _if_pos
	push 1
	popax
	sub 0,$a
	cmpjl
	cmp0
	je l2758
	push "FI error! "
	cthis getname
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	cthis methodname
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
l2758:
	jmp l2653
l2756:
	push "bsave:"
	cmpst
	jne l2759
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	call clsave,bset
	add $5,1
	pop $5
	jmp l2653
l2759:
	push "save:"
	cmpst
	jne l2760
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	push $10
	call clsave,set
	jmp l2653
l2760:
	push "stdptf:"
	cmpst
	jne l2761
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop slastpathf
	add $5,1
	pop $5
	jmp l2653
l2761:
	push "sfxs:"
	cmpst
	jne l2762
	spop $a
l2763:
	push $5
	push $6
	cmpjl
	cmp0
	je l2764
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $11
	push 1
	pop $7
	push 100
	pop $8
	push 0
	pop $12
	push 0
	pop $13
	push 0.0
	pop $15
l2765:
	push $7
	cmp0
	je l2766
	push $5
	push $6
	cmpjl
	jmp l2768
l2766:
	push 0
	jmp l2768
l2767:
	push 1
l2768:
	cmp0
	je l2769
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	push $10
	spushs
	push "-f"
	cmpst
	jne l2771
	spop $a
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $11
	jmp l2770
l2771:
	push "-v"
	cmpst
	jne l2772
	spop $a
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	jmp l2770
l2772:
	push "-l"
	cmpst
	jne l2773
	spop $a
	push 1
	pop $12
	jmp l2770
l2773:
	push "-p"
	cmpst
	jne l2774
	spop $a
	push 1
	pop $13
	jmp l2770
l2774:
	push "-pl"
	cmpst
	jne l2775
	spop $a
	push 1.0
	pop $15
	jmp l2770
l2775:
	spop $a
	sub $5,1
	pop $5
	push 0
	pop $7
l2770:
	add $5,1
	pop $5
	jmp l2765
l2769:
	push $9
	push $11
	cthis newsfx
	push $9
	spushs
	push $8
	spop $a
	call [$a],setvol
	push $12
	cmp0
	je l2777
	push $9
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l2777:
	push $13
	cmp0
	je l2779
	push $9
	spushs
	spop $a
	call [$a],play
	jmp l2778
l2779:
	push $15
	cmp0
	je l2781
	push $9
	spushs
	spop $a
	call [$a],playloop
l2781:
l2778:
	jmp l2763
l2764:
	jmp l2653
l2762:
	push "met:"
	cmpst
	jne l2782
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push "."
	call $10,contains
	cmp0
	je l2784
	push "."
	call $10,strgetto
	pop $11
	push "."
	call $10,strgetfrom
	pop $10
	push $11
	push ""
	cmpje
	cmp0
	jne l2787
	push $11
	push "this"
	cmpje
	jmp l2788
l2786:
	push 0
	jmp l2788
l2787:
	push 1
l2788:
	cmp0
	je l2789
	call gameapi,getgamename
	pop $11
l2789:
	jmp l2783
l2784:
	call gameapi,getgamename
	pop $11
l2783:
	push $11
	spushs
	push $10
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2653
l2782:
	spop $a
l2653:
	jmp l2651
l2650:
	push $2
	spushs
	spop $a
	call [$a],readonly
	end method
	method _found_if
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	add $3,1
	pop $3
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	sub $4,1
	pop $4
	localstring $7
	localstring $8
l2790:
	push $3
	push $4
	cmpjl
	cmp0
	je l2791
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],dbchecknext
	pop $8
	push $8
	spushs
	push ")"
	cmpst
	je l2794
	push "|"
	cmpst
	je l2794
	push "&"
	cmpst
	je l2794
	jmp l2793
l2794:
	spop $a
	push $5
	push $6
	push 0
	push 1
	call $7,getb
	push "!"
	cmpje
	cmp0
	je l2796
	push 1
	call $7,strsubb
	call clsave,bis
	neg
	jmp l2795
l2796:
	push $7
	call clsave,bis
l2795:
	cthis _check_if
	pop $6
	push $8
	push "|"
	cmpje
	cmp0
	je l2798
	push 1
	pop $5
	jmp l2797
l2798:
	push $8
	push "&"
	cmpje
	cmp0
	je l2800
	push 2
	pop $5
l2800:
l2797:
	jmp l2792
l2793:
	push "="
	cmpst
	jne l2801
	spop $a
	push 2
	popax
	add $3,$a
	pop $3
	push $5
	push $6
	push $7
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call clsave,is
	cthis _check_if
	pop $6
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],dbchecknext
	cthis _check_if2
	pop $5
	jmp l2792
l2801:
	push "!="
	cmpst
	jne l2802
	spop $a
	push 2
	popax
	add $3,$a
	pop $3
	push $5
	push $6
	push $7
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call clsave,is
	neg
	cthis _check_if
	pop $6
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],dbchecknext
	cthis _check_if2
	pop $5
	jmp l2792
l2802:
	spop $a
l2792:
	push 2
	popax
	add $3,$a
	pop $3
	jmp l2790
l2791:
	push $6
	neg
	cmp0
	je l2804
	push $1
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis _goto_fi
	jmp l2803
l2804:
	push $2
l2803:
	end method
	method _goto_fi
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push _if_pos
	pop $3
l2805:
	push 1
	cmp0
	je l2806
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	spushs
	push "IF"
	cmpst
	jne l2808
	spop $a
	add $3,1
	pop $3
	jmp l2807
l2808:
	push "ELSE"
	cmpst
	jne l2809
	spop $a
	push $3
	push _if_pos
	cmpje
	cmp0
	je l2811
	push $2
	ret
l2811:
	jmp l2807
l2809:
	push "FI"
	cmpst
	jne l2812
	spop $a
	push $3
	push _if_pos
	cmpje
	cmp0
	je l2814
	sub _if_pos,1
	pop _if_pos
	push $2
	ret
	jmp l2813
l2814:
	sub $3,1
	pop $3
l2813:
	jmp l2807
l2812:
	spop $a
l2807:
	add $2,1
	pop $2
	jmp l2805
l2806:
	end method
	method _check_if2
	localstring $1
	pop $1
	push $1
	spushs
	push "|"
	cmpst
	jne l2816
	spop $a
	push 1
	jmp l2815
l2816:
	push "&"
	cmpst
	jne l2817
	spop $a
	push 2
	jmp l2815
l2817:
	spop $a
	push 0
l2815:
	end method
	method _check_if
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push 1
	cmpst
	jne l2819
	spop $a
	push $2
	cmp0
	jne l2821
	push $3
	jmp l2822
l2820:
	push 0
	jmp l2822
l2821:
	push 1
l2822:
	jmp l2818
l2819:
	push 2
	cmpst
	jne l2823
	spop $a
	push $2
	cmp0
	je l2824
	push $3
	jmp l2826
l2824:
	push 0
	jmp l2826
l2825:
	push 1
l2826:
	jmp l2818
l2823:
	spop $a
	push $3
l2818:
	end method
	method behrewind
	push sactbeh
	push "null"
	cmpjne
	cmp0
	je l2828
	push sactbeh
	spushs
	spop $a
	call [$a],rewind
l2828:
	end method
	method behplaying
	push sactbeh
	push "null"
	cmpjne
	ret
	end method
	method behexist
	localstring $1
	pop $1
	push $1
	cthis getbeh
	call engine,varexist
	ret
	end method
	method getbeh
	localstring $1
	pop $1
	push _sbeh
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method newbehname
	localstring $1
	push _sbeh
	push "_"
	pop $b
	popax
	add $a,$b
	push iidbeh
	pop $b
	popax
	add $a,$b
	pop $1
	add iidbeh,1
	pop iidbeh
	push $1
	ret
	end method
	method newbeh
	localstring $1
	cthis newbehname
	pop $1
	push $1
	spushs
	spop $e
	new classbehhero,[$e]
	push $1
	ret
	end method
	method _checkvol
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],dbchecknext
	push "-v"
	cmpje
	cmp0
	je l2830
	push 2
	popax
	add $3,$a
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	ret
	jmp l2829
l2830:
	push 100
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	ret
l2829:
	end method
	method loadbeh
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $9
	localstring $10
	localstring $11
	localstring $12
	localint $13
	push $5
	spushs
	spop $a
	call [$a],getblock
	pop $13
	localint $14
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	cthis newbeh
	pop $10
	localint $15
	localint $16
	push $9
	spushs
	push "IF"
	cmpst
	je l2833
	push "ELIF"
	cmpst
	je l2833
	jmp l2832
l2833:
	spop $a
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $15
l2834:
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	push ")"
	cmpjne
	cmp0
	je l2835
	add $4,1
	pop $4
	jmp l2834
l2835:
	push $10
	spushs
	push "setas"
	push $9
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	push $15
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	add $4,1
	pop $4
	jmp l2831
l2832:
	push "FI"
	cmpst
	je l2837
	push "ELSE"
	cmpst
	je l2837
	jmp l2836
l2837:
	spop $a
	push $10
	spushs
	push $9
	spop $a
	call [$a],setas
	jmp l2831
l2836:
	push "call:"
	cmpst
	jne l2838
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $1
	push "script"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setascaller
	jmp l2831
l2838:
	push "walk:"
	cmpst
	jne l2839
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	add $4,1
	pop $4
	push $10
	spushs
	push _spathpref
	push $9
	pop $b
	popax
	add $a,$b
	push $11
	push $12
	spop $a
	call [$a],setaswalker
	jmp l2831
l2839:
	push "turn:"
	cmpst
	jne l2840
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push _spathpref
	push $9
	pop $b
	popax
	add $a,$b
	push $11
	spop $a
	call [$a],setasturn
	jmp l2831
l2840:
	push "setpos:"
	cmpst
	jne l2841
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $16
	push 0
	pop $15
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],dbchecknext
	pop $12
	push $12
	push "-ssc"
	cmpje
	cmp0
	je l2843
	push 1
	pop $15
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],dbchecknext
	pop $12
l2843:
	push $12
	push "-dir"
	cmpje
	cmp0
	je l2845
	push 2
	popax
	add $4,$a
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	jmp l2844
l2845:
	push "auto"
	pop $12
l2844:
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	push $16
	push $15
	push $12
	spop $a
	call [$a],setasposer
	jmp l2831
l2841:
	push "game:"
	cmpst
	jne l2846
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $9
	spushs
	push "-def"
	cmpst
	je l2849
	push "-adv"
	cmpst
	je l2849
	jmp l2848
l2849:
	spop $a
	push $10
	spushs
	push $9
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],get
	spop $a
	call [$a],setasnewgamer
	push 2
	popax
	add $4,$a
	pop $4
	jmp l2847
l2848:
	spop $a
	push $10
	spushs
	push "null"
	push "null"
	push $9
	spop $a
	call [$a],setasnewgamer
l2847:
	jmp l2831
l2846:
	push "ref:"
	cmpst
	jne l2850
	spop $a
	push "_"
	push iidbeh
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $4
	cthis buildbeh
	pop $4
	cthis newbehname
	pop $9
	push $10
	spushs
	push _sbeh
	call $9,strsubbs
	push $1
	push "script"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setascaller
	jmp l2831
l2850:
	push "anplay:"
	cmpst
	jne l2851
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setasanplayer
	jmp l2831
l2851:
	push "anorder:"
	cmpst
	jne l2852
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $1
	push $2
	push $4
	push $11
	spop $a
	call [$a],setasanorder
	push $1
	push $2
	push $4
	push "null"
	cthis analizeaninstr
	pop $4
	jmp l2831
l2852:
	push "sndbg:"
	cmpst
	jne l2853
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	push $1
	push $2
	push $4
	cthis _checkvol
	pop $4
	pop $15
	push $10
	spushs
	push $9
	push $15
	spop $a
	call [$a],setassndbg
	jmp l2831
l2853:
	push "sndplay:"
	cmpst
	jne l2854
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	push $1
	push $2
	push $4
	cthis _checkvol
	pop $4
	pop $15
	push $10
	spushs
	push $9
	push $15
	spop $a
	call [$a],setassndplayer
	jmp l2831
l2854:
	push "fxplay:"
	cmpst
	jne l2855
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	push $1
	push $2
	push $4
	cthis _checkvol
	pop $4
	pop $15
	push $10
	spushs
	push "sfx/"
	push $9
	pop $b
	popax
	add $a,$b
	push $15
	spop $a
	call [$a],setassndplayer
	jmp l2831
l2855:
	push "fxbg:"
	cmpst
	jne l2856
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	push $1
	push $2
	push $4
	cthis _checkvol
	pop $4
	pop $15
	push $10
	spushs
	push "sfx/"
	push $11
	pop $b
	popax
	add $a,$b
	push $15
	spop $a
	call [$a],setassndbg
	jmp l2831
l2856:
	push "wait:"
	cmpst
	jne l2857
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $15
	add $4,1
	pop $4
	push $10
	spushs
	push $15
	spop $a
	call [$a],setaswaiter
	jmp l2831
l2857:
	push "read:"
	cmpst
	jne l2858
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $15
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $16
	add $4,1
	pop $4
	push "auto"
	pop $11
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	push $4
	cmpja
	cmp0
	je l2860
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	push $11
	push "-dir"
	cmpje
	cmp0
	je l2862
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
l2862:
l2860:
	push $10
	spushs
	push $9
	push $15
	push $16
	push $11
	spop $a
	call [$a],setasreader
	jmp l2831
l2858:
	push "met:"
	cmpst
	jne l2863
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	call gameapi,getgamename
	pop $12
	push "."
	call $9,contains
	cmp0
	je l2865
	push "."
	call $9,strgetto
	pop $11
	push "."
	call $9,strgetfrom
	pop $9
	push $11
	push ""
	cmpje
	cmp0
	jne l2868
	push $11
	push "this"
	cmpje
	jmp l2869
l2867:
	push 0
	jmp l2869
l2868:
	push 1
l2869:
	cmp0
	je l2870
	push $12
	pop $11
l2870:
	jmp l2864
l2865:
	push $12
	pop $11
l2864:
	push $10
	spushs
	push $11
	push $9
	spop $a
	call [$a],setasmet
	jmp l2831
l2863:
	push "bsave:"
	cmpst
	jne l2871
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push "1"
	spop $a
	call [$a],setassaver
	jmp l2831
l2871:
	push "save:"
	cmpst
	jne l2872
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setassaver
	jmp l2831
l2872:
	push "script:"
	cmpst
	jne l2873
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setasscript
	jmp l2831
l2873:
	push "func:"
	cmpst
	jne l2874
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	call clcbeh,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $16
l2875:
	push $16
	push 0
	cmpjae
	cmp0
	je l2876
	jmp l2878
l2877:
	sub $16,1
	pop $16
	jmp l2875
l2878:
	push $16
	call clcbeh,getid
	push "script"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	spushs
	push $11
	spop $a
	call [$a],containsfun
	cmp0
	je l2880
	push 1
	popax
	sub 0,$a
	pop $16
l2880:
	jmp l2877
l2876:
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],dbchecknext
	push "("
	cmpje
	cmp0
	je l2882
	push $4
	push 2
	pop $b
	popax
	add $a,$b
	pop $16
l2883:
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	push ")"
	cmpjne
	cmp0
	je l2884
	add $4,1
	pop $4
	jmp l2883
l2884:
	jmp l2881
l2882:
	push 1
	popax
	sub 0,$a
	pop $16
l2881:
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	push $1
	push $2
	push $16
	spop $a
	call [$a],setasscript
	jmp l2831
l2874:
	push "use:"
	cmpst
	jne l2885
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	spop $a
	call [$a],setasuse
	jmp l2831
l2885:
	push "topck:"
	cmpst
	jne l2886
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],dbchecknext
	push "-pck"
	cmpje
	cmp0
	je l2888
	push 2
	popax
	add $4,$a
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	jmp l2887
l2888:
	push $11
	pop $12
l2887:
	add $4,1
	pop $4
	push $10
	spushs
	push $11
	push $12
	spop $a
	call [$a],setastopck
	jmp l2831
l2886:
	push "enter:"
	cmpst
	jne l2889
	spop $a
	push $10
	spushs
	spop $a
	call [$a],setasenter
	jmp l2831
l2889:
	push "close:"
	cmpst
	jne l2890
	spop $a
	push $10
	spushs
	spop $a
	call [$a],setasclose
	jmp l2831
l2890:
	push "music:"
	cmpst
	jne l2891
	spop $a
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $16
l2892:
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	push ")"
	cmpjne
	cmp0
	je l2893
	add $4,1
	pop $4
	jmp l2892
l2893:
	push $10
	spushs
	push $1
	push $2
	push $16
	push $4
	spop $a
	call [$a],setasmusic
	add $4,1
	pop $4
	jmp l2831
l2891:
	spop $a
	push "_"
	call $9,strgetto
	pop $12
	push $12
	cthis getheroloader
	pop $11
	push $11
	push "null"
	cmpje
	cmp0
	je l2895
	push igmdebug
	cmp0
	je l2897
	push $10
	push ": "
	pop $b
	popax
	add $a,$b
	push $9
	pop $b
	popax
	add $a,$b
	push " loadbeh error: no hero linked to "
	pop $b
	popax
	add $a,$b
	push $12
	pop $b
	popax
	add $a,$b
	call engine,print
l2897:
	push $10
	push $3
	ret
	jmp l2894
l2895:
	localint $17
	localint $18
	push $11
	spushs
	spop $a
	call [$a],getstartstop
	pop $18
	pop $17
	localstring $19
	push "auto"
	pop $19
	localstring $20
	push "_stalk"
	call modadv,varget
	pop $20
	localint $21
	push 1
	pop $21
	push $4
	push $3
	cmpjl
	pop $14
l2898:
	push $14
	cmp0
	je l2899
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	add $4,1
	pop $4
	push $12
	spushs
	push "-stt"
	cmpst
	jne l2901
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $17
	add $4,1
	pop $4
	jmp l2900
l2901:
	push "-stp"
	cmpst
	jne l2902
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $18
	add $4,1
	pop $4
	jmp l2900
l2902:
	push "-base"
	cmpst
	jne l2903
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $20
	add $4,1
	pop $4
	jmp l2900
l2903:
	push "-r"
	cmpst
	jne l2904
	spop $a
	push 1
	pop $21
	jmp l2900
l2904:
	push "-nr"
	cmpst
	jne l2905
	spop $a
	push 0
	pop $21
	jmp l2900
l2905:
	push "-dir"
	cmpst
	jne l2906
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $19
	add $4,1
	pop $4
	jmp l2900
l2906:
	spop $a
	push 0
	pop $14
	sub $4,1
	pop $4
l2900:
	push $14
	cmp0
	je l2908
	push $4
	push $3
	cmpjae
	jmp l2910
l2908:
	push 0
	jmp l2910
l2909:
	push 1
l2910:
	cmp0
	je l2911
	push 0
	pop $14
l2911:
	jmp l2898
l2899:
	push $10
	spushs
	push $11
	spushs
	push "sanhero"
	spop $a
	call [$a],varget
	push $9
	push $20
	push $21
	push $17
	push $18
	push $19
	spop $a
	call [$a],setastalker
l2894:
l2831:
	push $5
	spushs
	push $10
	spop $a
	call [$a],addtostarter
	push $7
	push 0
	cmpje
	cmp0
	je l2913
	push $6
	spushs
	push $10
	spop $a
	call [$a],setflags
	push $10
	spushs
	push $5
	push $13
	push $8
	spop $a
	call [$a],addflags
	jmp l2912
l2913:
	push $6
	spushs
	push "null"
	spop $a
	call [$a],setflags
	push $10
	spushs
	push $5
	push $13
	push 0
	spop $a
	call [$a],addflags
l2912:
	push $10
	push $4
	ret
	end method
	method buildbeh
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	call dbmacros,findbyrow
	pop $5
	push $5
	push 0
	cmpjl
	cmp0
	je l2915
	push "no such macro: "
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call engine,print
	push 1
	popax
	sub 0,$a
	ret
l2915:
l2916:
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	push "("
	cmpjne
	cmp0
	je l2917
	add $4,1
	pop $4
	jmp l2916
l2917:
	add $4,1
	pop $4
	localint $6
	push $2
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	localstring $7
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	call _vecarg,free
l2918:
	push $7
	push ")"
	cmpjne
	cmp0
	je l2919
	push $7
	call _vecarg,add
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	jmp l2918
l2919:
	localint $8
	push $5
	call dbmacros,getcolsno
	pop $8
	localint $9
	push $2
	spushs
	push $6
	push $1
	spop $a
	call [$a],add
	localint $10
	push 1
	pop $10
l2920:
	push $10
	push $8
	cmpjl
	cmp0
	je l2921
	jmp l2923
l2922:
	add $10,1
	pop $10
	jmp l2920
l2923:
	push $5
	push $10
	call dbmacros,get
	pop $7
	push 0
	push 1
	call $7,getb
	push "$"
	cmpje
	cmp0
	je l2925
	push 1
	push 10
	call $7,getb
	pop $9
	push $2
	spushs
	push $6
	push $9
	push 1
	pop $b
	popax
	sub $a,$b
	call _vecarg,get
	spop $a
	call [$a],add
	jmp l2924
l2925:
	push $2
	spushs
	push $6
	push $7
	spop $a
	call [$a],add
l2924:
	jmp l2922
l2921:
	push $4
	ret
	end method
	method loadbehaviours
	localstring $1
	pop $1
	localstring $2
	call clcbeh,get
	pop $2
	push $2
	spushs
	spop $e
	new db,[$e]
	push $2
	spushs
	push $1
	cthis getpath
	spop $a
	call [$a],loadbeh
	localstring $3
	push $2
	push "script"
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push $2
	spop $e
	new Script,[$e]
	localint $4
	localint $5
	localstring $6
	localstring $7
	localstring $8
	localstring $9
	localint $10
	localint $11
	localstring $12
	localint $13
	localint $14
	localint $15
	localint $16
	localstring $17
	localstring $18
	localint $19
	push 0
	pop $19
l2926:
	push $19
	push $2
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l2927
	jmp l2929
l2928:
	add $19,1
	pop $19
	jmp l2926
l2929:
	push 0
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $6
	add $5,1
	pop $5
	push $6
	spushs
	push "macro:"
	cmpst
	jne l2931
	spop $a
	push $2
	push $19
	push 1
	call dbmacros,dbaddrowfrom
	jmp l2930
l2931:
	push "include:"
	cmpst
	jne l2932
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	cthis loadbehaviours
	add $5,1
	pop $5
	jmp l2930
l2932:
	push "build:"
	cmpst
	jne l2933
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	push $2
	push $19
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	cthis buildbeh
	pop $5
	jmp l2930
l2933:
	push "func"
	cmpst
	jne l2934
	spop $a
l2935:
	push $2
	spushs
	push $19
	push 0
	spop $a
	call [$a],get
	push "end"
	cmpjne
	cmp0
	je l2936
	add $19,1
	pop $19
	jmp l2935
l2936:
	jmp l2930
l2934:
	push "IF"
	cmpst
	jne l2937
	spop $a
	add _if_pos,1
	pop _if_pos
	push $2
	push $19
	push $5
	push $2
	spushs
	push $19
	spop $a
	call [$a],getcolsno
	cthis _found_if
	pop $19
	jmp l2930
l2937:
	push "ELSE"
	cmpst
	jne l2938
	spop $a
	push $2
	push $19
	push 1
	pop $b
	popax
	add $a,$b
	cthis _goto_fi
	pop $19
	jmp l2930
l2938:
	push "FI"
	cmpst
	jne l2939
	spop $a
	sub _if_pos,1
	pop _if_pos
	push _if_pos
	push 1
	popax
	sub 0,$a
	cmpjl
	cmp0
	je l2941
	push "FI error! "
	cthis getname
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	cthis methodname
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
l2941:
	jmp l2930
l2939:
	spop $a
	push $2
	spushs
	push $19
	spop $a
	call [$a],getcolsno
	pop $4
	push $6
	cthis getbeh
	pop $6
	push $6
	spushs
	spop $e
	new classbehhero,[$e]
	push 0
	pop $10
	push 1
	pop $11
	push "null"
	pop $12
	push 0
	pop $13
	push 1
	pop $14
	push "null"
	pop $18
	push 1
	popax
	sub 0,$a
	pop $16
	push 0
	pop $15
l2942:
	push $11
	cmp0
	je l2943
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $7
	spushs
	push "-nr"
	cmpst
	jne l2945
	spop $a
	push 0
	pop $10
	jmp l2944
l2945:
	push "-once"
	cmpst
	jne l2946
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $12
	add $5,1
	pop $5
	jmp l2944
l2946:
	push "-par"
	cmpst
	jne l2947
	spop $a
	push 1
	pop $13
	jmp l2944
l2947:
	push "-r"
	cmpst
	jne l2948
	spop $a
	push 1
	pop $10
	jmp l2944
l2948:
	push "-nb"
	cmpst
	jne l2949
	spop $a
	push 0
	pop $14
	jmp l2944
l2949:
	push "-b"
	cmpst
	jne l2950
	spop $a
	push 1
	pop $14
	jmp l2944
l2950:
	push "-en"
	cmpst
	jne l2951
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	jmp l2944
l2951:
	push "-bif"
	cmpst
	jne l2952
	spop $a
	push 1
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push 1
	pop $18
	jmp l2944
l2952:
	push "-bnif"
	cmpst
	jne l2953
	spop $a
	push 0
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push 1
	pop $18
	jmp l2944
l2953:
	push "-if"
	cmpst
	jne l2954
	spop $a
	push 1
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $18
	add $5,1
	pop $5
	jmp l2944
l2954:
	push "-nif"
	cmpst
	jne l2955
	spop $a
	push 0
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $18
	add $5,1
	pop $5
	jmp l2944
l2955:
	spop $a
	push 0
	pop $11
	push $6
	spushs
	push $12
	push $10
	push $13
	push $14
	push $15
	push $16
	push $17
	push $18
	spop $a
	call [$a],setasstarter
	sub $5,1
	pop $5
	push $6
	pop $7
l2956:
	push $5
	push $4
	cmpjl
	cmp0
	je l2957
	push $2
	push $19
	push $4
	push $5
	push $6
	push $7
	push $10
	push $13
	cthis loadbeh
	pop $5
	pop $7
	jmp l2956
l2957:
l2944:
	jmp l2942
l2943:
l2930:
	jmp l2928
l2927:
	push $2
	spushs
	spop $a
	call [$a],readonly
	end method
	method analizeaninstr
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 1
	pop $5
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjae
	cmp0
	je l2959
	push 0
	pop $5
l2959:
	localint $6
	push 0
	pop $6
	push $4
	push "null"
	cmpjne
	cmp0
	je l2961
	push 1
	pop $6
	push $4
	cthis advanstand
l2961:
	localint $7
	localint $8
	localint $9
	localstring $10
	localstring $11
l2962:
	push $5
	cmp0
	je l2963
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $11
	spushs
	push "-z"
	cmpst
	jne l2965
	spop $a
	push $6
	cmp0
	je l2967
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	push $10
	clparent StringChecker,isdigit
	cmp0
	je l2969
	push $4
	spushs
	push $10
	spop $a
	call [$a],setz
	jmp l2968
l2969:
	push $4
	spushs
	push $10
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],setz
l2968:
l2967:
	add $3,1
	pop $3
	jmp l2964
l2965:
	push "-pos"
	cmpst
	jne l2970
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $6
	cmp0
	je l2972
	push $10
	push "-id"
	cmpje
	cmp0
	je l2974
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $9
	spop $a
	call [$a],getbyname
	pop $7
	push $10
	spushs
	push $7
	spop $a
	call [$a],getxver
	push $10
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $8
	push $10
	spushs
	push $7
	spop $a
	call [$a],getyver
	push $10
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $9
	jmp l2973
l2974:
	push $10
	pop $8
l2973:
	push $4
	spushs
	push $8
	push $9
	spop $a
	call [$a],setpos
l2972:
	jmp l2964
l2970:
	push "-putgr"
	cmpst
	jne l2975
	spop $a
	push $6
	cmp0
	je l2977
	push $4
	spushs
	spop $a
	call [$a],anputgr
l2977:
	jmp l2964
l2975:
	push "-vis"
	cmpst
	jne l2978
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l2980
	push $7
	push 0
	cmpje
	cmp0
	je l2982
	push $4
	spushs
	spop $a
	call [$a],hide
	jmp l2981
l2982:
	push $4
	spushs
	spop $a
	call [$a],show
l2981:
l2980:
	jmp l2964
l2978:
	push "-show"
	cmpst
	jne l2983
	spop $a
	push $6
	cmp0
	je l2985
	push $4
	spushs
	spop $a
	call [$a],show
l2985:
	jmp l2964
l2983:
	push "-hide"
	cmpst
	jne l2986
	spop $a
	push $6
	cmp0
	je l2988
	push $4
	spushs
	spop $a
	call [$a],hide
l2988:
	jmp l2964
l2986:
	push "-dir"
	cmpst
	jne l2989
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l2991
	push $4
	spushs
	spop $a
	call [$a],actionname
	pop $11
	push $4
	spushs
	spop $a
	call [$a],framenr
	pop $7
	push $4
	spushs
	push 2
	call $11,strsube
	push $10
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],setframe
l2991:
	jmp l2964
l2989:
	push "-play"
	cmpst
	jne l2992
	spop $a
	push $6
	cmp0
	je l2994
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],play
l2994:
	add $3,1
	pop $3
	jmp l2964
l2992:
	push "-nplay"
	cmpst
	jne l2995
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l2997
	push $4
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpje
	cmp0
	je l2999
	push $4
	spushs
	push $7
	spop $a
	call [$a],play
	jmp l2998
l2999:
	push $4
	spushs
	push $7
	spop $a
	call [$a],nplay
l2998:
l2997:
	jmp l2964
l2995:
	push "-lplay"
	cmpst
	jne l3000
	spop $a
	push $6
	cmp0
	je l3002
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],anloopsplay
l3002:
	add $3,1
	pop $3
	jmp l2964
l3000:
	push "-bgr"
	cmpst
	jne l3003
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $6
	cmp0
	je l3005
	push $11
	spushs
	push $4
	spop $a
	call [$a],add
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	call engine,varexist
	cmp0
	je l3007
	push $11
	spushs
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l3007:
l3005:
	jmp l2964
l3003:
	push "-sc"
	cmpst
	jne l3008
	spop $a
	push $6
	cmp0
	je l3010
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	call engine,varexist
	cmp0
	je l3012
	push $11
	spushs
	spop $a
	call [$a],scalean
l3012:
l3010:
	jmp l2964
l3008:
	push "-ssc"
	cmpst
	jne l3013
	spop $a
	push $6
	cmp0
	je l3015
	call clcamera,setscene
l3015:
	jmp l2964
l3013:
	push "-actor"
	cmpst
	jne l3016
	spop $a
	push $6
	cmp0
	je l3018
	push $4
	call clcamera,setactor
l3018:
	jmp l2964
l3016:
	push "-mhero"
	cmpst
	jne l3019
	spop $a
	push $6
	cmp0
	je l3021
	push $4
	cthis setmainhero
l3021:
	jmp l2964
l3019:
	push "-puty"
	cmpst
	jne l3022
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l3024
	push $10
	push "resy"
	cmpje
	cmp0
	je l3026
	push $4
	spushs
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],anputy
	jmp l3025
l3026:
	push $4
	spushs
	push $10
	spop $a
	call [$a],anputy
l3025:
l3024:
	jmp l2964
l3022:
	push "-stopf"
	cmpst
	jne l3027
	spop $a
	push $6
	cmp0
	je l3029
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l3029:
	jmp l2964
l3027:
	push "-stoph"
	cmpst
	jne l3030
	spop $a
	push $6
	cmp0
	je l3032
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
	push $4
	spushs
	spop $a
	call [$a],hide
l3032:
	jmp l2964
l3030:
	push "-setaction"
	cmpst
	jne l3033
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l3035
	push $10
	clparent StringChecker,isdigit
	cmp0
	je l3037
	push $4
	spushs
	call $10,to_i
	push 0
	spop $a
	call [$a],setframe
	jmp l3036
l3037:
	push $4
	spushs
	push $10
	push 0
	spop $a
	call [$a],setframe
l3036:
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l3035:
	jmp l2964
l3033:
	push "-setframe"
	cmpst
	jne l3038
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l3040
	push $10
	clparent StringChecker,isdigit
	cmp0
	je l3042
	push $4
	spushs
	call $10,to_i
	push $7
	spop $a
	call [$a],setframe
	jmp l3041
l3042:
	push $4
	spushs
	push $10
	push $7
	spop $a
	call [$a],setframe
l3041:
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l3040:
	jmp l2964
l3038:
	push "-stand"
	cmpst
	jne l3043
	spop $a
	push $6
	cmp0
	je l3045
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setstandbase
l3045:
	add $3,1
	pop $3
	jmp l2964
l3043:
	push "-delay"
	cmpst
	jne l3046
	spop $a
	push $6
	cmp0
	je l3048
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setdelay
l3048:
	add $3,1
	pop $3
	jmp l2964
l3046:
	push "-step"
	cmpst
	jne l3049
	spop $a
	push $6
	cmp0
	je l3051
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setanstep
l3051:
	add $3,1
	pop $3
	jmp l2964
l3049:
	push "-sb1"
	cmpst
	jne l3052
	spop $a
	push $6
	cmp0
	je l3054
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase1
l3054:
	add $3,1
	pop $3
	jmp l2964
l3052:
	push "-sb2"
	cmpst
	jne l3055
	spop $a
	push $6
	cmp0
	je l3057
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase2
l3057:
	add $3,1
	pop $3
	jmp l2964
l3055:
	spop $a
	push 0
	pop $5
	sub $3,1
	pop $3
l2964:
	push $5
	cmp0
	je l3059
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjae
	jmp l3061
l3059:
	push 0
	jmp l3061
l3060:
	push 1
l3061:
	cmp0
	je l3062
	push 0
	pop $5
l3062:
	jmp l2962
l2963:
	push $3
	ret
	end method
	method cadvherofinish
	end method
	method butmoveoff
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],moveoff
	push $1
	spushs
	spop $a
	call [$a],getbutname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmoveon
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],moveon
	push $1
	spushs
	spop $a
	call [$a],getbutname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method advmsmove
	cthis advgetlock
	neg
	cmp0
	je l3064
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,butisin
	pop $3
	push $3
	cmp0
	je l3066
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	push $4
	push _slastms
	cmpjne
	cmp0
	je l3068
	push _slastms
	push "null"
	cmpjne
	cmp0
	je l3070
	push _slastms
	cthis butmoveoff
l3070:
	push $4
	pop _slastms
	push $4
	cthis butmoveon
l3068:
	jmp l3065
l3066:
	push _slastms
	push "null"
	cmpjne
	cmp0
	je l3072
	push _slastms
	cthis butmoveoff
	push "null"
	pop _slastms
l3072:
l3065:
	push "onmousemove"
	push $1
	push $2
	call grmsmove,eval2
	call moddbg,msmove
l3064:
	end method
	method butclickon
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],clickon
	cthis behplaying
	neg
	cmp0
	je l3074
	push "beh_"
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	push "_LCLICK"
	pop $b
	popax
	add $a,$b
	cthis playbehif
	neg
	pop _b_rewind
l3074:
	end method
	method butrelease
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lrel
	end method
	method advmsclick
	call _tim_dbclk,isplaying
	cmp0
	je l3076
	push 2
	call clwalkq,mulspeed
	ret
	jmp l3075
l3076:
	call _tim_dbclk,play
l3075:
	push 1
	pop _b_rewind
	push bmslock
	neg
	cmp0
	je l3078
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push "preparetosort"
	push $1
	push $2
	call grbuts,eval2
	call grbuts,sortimgs
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,butisin
	pop $3
	push "endsort"
	call grbuts,eval
	push $3
	cmp0
	je l3080
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	cthis butclickon
	jmp l3079
l3080:
	localstring $4
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	call engine,varexist
	cmp0
	je l3082
	push $4
	spushs
	spop $a
	call [$a],itemhide
l3082:
	push $1
	push $2
	call clwalkq,goto
l3079:
	push "onmouselclick"
	push $1
	push $2
	call grmslclick,eval2
l3078:
	push _b_rewind
	cmp0
	je l3084
	cthis behrewind
l3084:
	call moddbg,mslclick
	end method
	method advmsrclick
	push bmslock
	neg
	cmp0
	je l3086
	push "onmouserclick"
	call mouse,getpos
	call grmsrclick,eval2
l3086:
	end method
	method advmslrel
	push bmslock
	neg
	cmp0
	je l3088
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,butisin
	pop $3
	push $3
	cmp0
	je l3090
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	cthis butrelease
l3090:
	push "onmouselrel"
	push $1
	push $2
	call grmslrel,eval2
l3088:
	call moddbg,mslrel
	end method
	method mousemove
	push igmstate
	push 0
	cmpje
	cmp0
	je l3092
	cthis advmsmove
l3092:
	cthis mouse_MOVE
	end method
	method mouselclick
	push igmstate
	push 0
	cmpje
	cmp0
	je l3094
	cthis advmsclick
l3094:
	cthis mouse_LCLICK
	end method
	method mouselrel
	push igmstate
	push 0
	cmpje
	cmp0
	je l3096
	cthis advmslrel
l3096:
	cthis mouse_LREL
	end method
	method mouserclick
	push igmstate
	push 0
	cmpje
	cmp0
	je l3098
	cthis advmsrclick
l3098:
	cthis mouse_RCLICK
	end method
	method keydown
	call moddbg,dbkeydown
	cthis keyboard_KEYDOWN
	end method
	method exit
	call modadvglob,onexit
	push igmsubtitle
	cmp0
	je l3100
	call subtitle,reset
l3100:
	end method
	method onmusicfin
	call _music,play
	end method
	method sndplayobfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call __sndplay,load
	push igmsubtitle
	cmp0
	je l3102
	push "__sndplay"
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call subtitle,register
l3102:
	push $2
	call __sndplay,sob=
	push $3
	call __sndplay,sfun=
	push "__sndplay"
	cthis cbsplay
	end method
	method sndplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	push $2
	cthis sndplayobfin
	end method
	method sndplay
	localstring $1
	pop $1
	push $1
	push "null"
	push "null"
	cthis sndplayobfin
	end method
	method advsaveonstart
	push "GAME_game"
	call gameapi,getgamename
	call clsave,set
	push "GAME_sgmgame"
	push sgmgame
	call clsave,set
	push "GAME_sgmglobpath"
	push sgmglobpath
	call clsave,set
	push "GAME_sgmlastscene"
	push sgmlastscene
	call clsave,set
	push "GAME_ccs"
	call ccs,isvisible
	call clsave,set
	cthis advautosave
	end method
	method advautosave
	push "saves/autosave.txt"
	call clsave,save
	push "autosave"
	call modadvglob,savepck
	end method
	method advautoload
	push "autosave"
	cthis _advload
	end method
	method advcacheload
	push "cache"
	cthis _advload
	end method
	method advcachesave
	push "cache"
	cthis _advsave
	end method
	method _advload
	localstring $1
	pop $1
	call modadvglob,delheros
	push $1
	call modadvglob,loadpck
	push "saves/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call clsave,load
	push "GAME_sgmgame"
	call clsave,get
	pop sgmgame
	push "GAME_sgmglobpath"
	call clsave,get
	pop sgmglobpath
	push "GAME_sgmlastscene"
	call clsave,get
	pop sgmlastscene
	push "GAME_ccs"
	call clsave,bis
	cmp0
	je l3104
	call ccs,show
	jmp l3103
l3104:
	call ccs,hide
l3103:
	push "GAME_game"
	call clsave,get
	call gameapi,play
	end method
	method _advsave
	localstring $1
	pop $1
	push "saves/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	new classfullsave,_saver
	push "saves/autosave.txt"
	call _saver,load
	call _saver,stdsave
	delete _saver
	new vector,_vcsave
	push "string"
	call _vcsave,type
	new vector,_vcsv2
	push "string"
	call _vcsv2,type
	push "saves/grpck_autosave.txt"
	call _vcsave,vecload
	push "saves/grpck_"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call _vcsave,vecsave
	localdef $2
	localint $3
	push 0
	pop $3
l3105:
	push $3
	call _vcsave,size
	cmpjl
	cmp0
	je l3106
	jmp l3108
l3107:
	add $3,1
	pop $3
	jmp l3105
l3108:
	push $3
	call _vcsave,get
	pop $2
	push "saves/"
	push $2
	pop $b
	popax
	add $a,$b
	push "autosave_name.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecload
	push "saves/"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_name.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecsave
	push "saves/"
	push $2
	pop $b
	popax
	add $a,$b
	push "autosave_file.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecload
	push "saves/"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_file.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecsave
	jmp l3107
l3106:
	delete _vcsave
	delete _vcsv2
	end method
	method advloadsnd
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	cthis load
	push igmsubtitle
	cmp0
	je l3110
	cthis getfullname
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call subtitle,register
l3110:
	end method
	end class

	module moddbg
	parent classlocker
	method init
	clparent classlocker,init
	new string,sstate
	push "init"
	pop sstate
	new int,ilastx
	new int,ilasty
	new text,txtpos
	push 5000
	call txtpos,setz
	push 0
	push 0
	call txtpos,setpos
	push 0
	push 0
	push 64
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpos,setbkg
	new text,txtswin
	push 5000
	call txtswin,setz
	push 0
	push 0
	push 64
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtswin,setbkg
	new text,txtpod
	push 5000
	call txtpod,setz
	push 0
	push 0
	push 128
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpod,setbkg
	cthis disable
	end method
	method enable
	cthis unlock
	call txtpos,show
	call txtswin,show
	call txtpod,show
	end method
	method disable
	cthis lock
	call txtpos,hide
	call txtswin,hide
	call txtpod,hide
	end method
	method updatetxtpos
	localint $1
	localint $2
	pop $2
	pop $1
	push ""
	push $1
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtpos,set
	push $1
	push 32
	pop $b
	popax
	sub $a,$b
	push $2
	push 46
	pop $b
	popax
	add $a,$b
	call txtpos,setpos
	push $1
	push 64
	pop $b
	popax
	sub $a,$b
	push $2
	push 30
	pop $b
	popax
	add $a,$b
	call txtpod,setpos
	push $1
	push $2
	push 1
	push 1
	push 1000
	popax
	sub 0,$a
	push 1000
	call engine,getimg
	call txtpod,set
	call txtpos,getey
	push iResY
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l3112
	push 0
	push $2
	popax
	sub 0,$a
	call txtpos,move
	push 0
	push $2
	popax
	sub 0,$a
	call txtpod,move
l3112:
	call txtpod,getex
	push iResX
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l3114
	push $1
	popax
	sub 0,$a
	push 0
	call txtpos,move
	push $1
	popax
	sub 0,$a
	push 0
	call txtpod,move
l3114:
	call txtpod,getpx
	popax
	sub 0,$a
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l3116
	push $1
	push 0
	call txtpos,move
	push $1
	push 0
	call txtpod,move
l3116:
	end method
	method updateswin
	push " "
	call swinka,getposx
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	call swinka,getposy
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtswin,set
	call swinka,getposx
	push 32
	pop $b
	popax
	sub $a,$b
	call swinka,getposy
	call txtswin,setpos
	end method
	method msminit
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmmove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push ilastx
	pop $b
	popax
	sub $a,$b
	push $2
	push ilasty
	pop $b
	popax
	sub $a,$b
	call clcamera,moveplans
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmove
	cthis getlock
	cmp0
	je l3118
	ret
l3118:
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	push "msm"
	push sstate
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $d
	cthis [$d]
	push $1
	pop ilastx
	push $2
	pop ilasty
	end method
	method mslclick
	cthis getlock
	cmp0
	je l3120
	ret
l3120:
	push "space"
	call keyboard,iskeydown
	push 1
	cmpje
	cmp0
	je l3122
	push "move"
	pop sstate
l3122:
	end method
	method mslrel
	cthis getlock
	push 1
	cmpje
	cmp0
	je l3124
	ret
l3124:
	push "init"
	pop sstate
	end method
	method msrclick
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	push 0
	cmpjne
	cmp0
	je l3126
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	call $4,print
l3126:
	end method
	method dbkeydown
	push igmdebug
	neg
	cmp0
	je l3128
	ret
l3128:
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l3130
	push "l"
	call keyboard,iskey
	cmp0
	je l3132
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],advcacheload
	jmp l3131
l3132:
	push "s"
	call keyboard,iskey
	cmp0
	je l3134
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],advcachesave
l3134:
l3131:
l3130:
	push "d"
	call keyboard,iskey
	cmp0
	je l3136
	cthis getlock
	cmp0
	je l3138
	cthis enable
	jmp l3137
l3138:
	cthis disable
l3137:
l3136:
	cthis getlock
	cmp0
	je l3140
	ret
l3140:
	push "s"
	call keyboard,iskey
	push 1
	cmpje
	cmp0
	je l3142
	cthis updateswin
l3142:
	end method
	end module

	new string,sAskerGame
	class StdGame
	parent classadv
	parent GameController
	parent Localize
	method init
	localstring $1
	pop $1
	push 0
	pop AdventureGame
	push 0
	pop igmstate
	clparent classadv,init
	push $1
	clparent GameController,init
	clparent Localize,init
	push 0
	push 0
	call clbuts,setcursorpos
	push 0
	push 0
	call claskexit,setcursorpos
	push $1
	cthis path=
	push SNDPATH
	cthis setwavpath
	call bsms,setstd
	call clmusic,play
	call clbuts,reset
	call claskexit,reset
	call advmouse,setstd
	new Music,mus
	push PrzygodaMode
	cmp0
	je l3144
	clparent classadvcontroller,advsaveonstart
	clparent classadvstdgame,advsave_game
l3144:
	new Button,but1
	end method
	method cbutexit
	push "anbutexit"
	push "$scripts/common/butexit.pyz"
	push 300
	cthis newanima
	call anbutexit,Button_std
	push "butclick"
	push "StdGame0"
	call anbutexit,addmethod
	push "anbutexit"
	call but1,add
	end method
	method StdGame0
	push GAME
	spushs
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method cbutmusic
	push "anbutmusic"
	push "$scripts/common/butmuz.pyz"
	push 300
	cthis newanima
	push bPlayMusic
	neg
	cmp0
	je l3146
	push 1
	push 0
	call anbutmusic,setframe
l3146:
	call anbutmusic,Button_std
	push "butclick"
	push "StdGame1"
	call anbutmusic,addmethod
	push "anbutmusic"
	call but1,add
	end method
	method StdGame1
	localdef $1
	cthis framenr
	pop $1
	push bPlayMusic
	cmp0
	je l3148
	push 0
	pop bPlayMusic
	push 1
	push $1
	cthis setframe
	push GAME
	spushs
	spop $a
	call [$a],stop_music
	jmp l3147
l3148:
	push 1
	pop bPlayMusic
	push 0
	push $1
	cthis setframe
	push GAME
	spushs
	spop $a
	call [$a],play_music
l3147:
	end method
	method cutscene
	push 0
	push 0
	push iResX
	push iResY
	new CutScene,ccs
	push 2000
	call ccs,setz
	end method
	method gotoadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push $2
	pop sgmgame
	push "gameadvdef"
	call gameapi,play
	end method
	method crect
	push 600
	push 196
	push 403
	push 497
	new Rect,rec
	end method
	method crect2
	push 6
	push 174
	push 1012
	push 530
	new Rect,rec2
	end method
	method cshowbut
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call clbuts,StdGame2
	end method
	method StdGame2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	push "getcx"
	call buts,callimgfun
	push $1
	push "getcy"
	call buts,callimgfun
	push $2
	call clp,show
	end method
	method napisshow
	localint $1
	localint $2
	pop $2
	pop $1
	cthis show
	push $1
	push $2
	cthis move
	end method
	method napispod
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 5
	pop $b
	popax
	add $a,$b
	cthis napisshow
	end method
	method advclick
	push igmdebug
	cmp0
	je l3150
	push igmstate
	push 0
	cmpje
	cmp0
	jne l3153
	push igmstate
	push 5
	cmpje
	jmp l3154
l3152:
	push 0
	jmp l3154
l3153:
	push 1
l3154:
	jmp l3155
l3150:
	push 0
	jmp l3155
l3151:
	push 1
l3155:
	cmp0
	je l3156
	push 1
	cthis cactsndstop
l3156:
	end method
	method key_down
	push igmdebug
	cmp0
	je l3158
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l3158
	push "r"
	call keyboard,iskey
	jmp l3160
l3158:
	push 0
	jmp l3160
l3159:
	push 1
l3160:
	cmp0
	je l3161
	cthis crestart
l3161:
	end method
	method askfor
	localdef $1
	pop $1
	push igmstate
	push 111
	cmpjne
	cmp0
	je l3163
	push $1
	pop sAskerGame
	call claskexit,askexittomenu
l3163:
	end method
	method askrestart
	call claskexit,askrestart
	end method
	method onmusicfin
	call mus,play
	end method
	method exit
	call bsms,setstd
	cthis game_exit
	push igmsubtitle
	cmp0
	je l3165
	call subtitle,reset
l3165:
	end method
	end class

	new classgamepause,clpause
	new classgamemusic,clmusic
	push "sounds/bgr/"
	call clmusic,sndbgrpath
	push "sounds/music/"
	call clmusic,musicpath
	push "sounds/music.db"
	call clmusic,load
	new snd,sndakskermovon
	push "sounds/sfx/butmovon.wav"
	call sndakskermovon,load
	push 50
	call sndakskermovon,setvol
	class classasker2
	parent classasker
	method init
	clparent classasker,init
	new snd,sndaskexit
	push 0
	push 1
	call sndaskexit,setstartstopflag
	new snd,sndaskexitgame
	push 0
	push 1
	call sndaskexitgame,setstartstopflag
	new snd,sndyes
	push 0
	push 1
	call sndyes,setstartstopflag
	new snd,sndno
	push 0
	push 1
	call sndno,setstartstopflag
	new snd,sndaskrestart
	push 0
	push 1
	call sndaskrestart,setstartstopflag
	new snd,sndaskrestart2
	push 0
	push 1
	call sndaskrestart2,setstartstopflag
	cthis reload
	push "scripts/common/asker.pyz"
	push 12000
	cthis load
	push "sndakskermovon"
	cthis fxonmovon
	end method
	method reload
	push SNDPATH
	cthis setwavpath
	localdef $1
	cthis getsndpath
	pop $1
	push $1
	push "nar07.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexit,load
	push $1
	push "nar12.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexitgame,load
	push $1
	push "nar08.wav"
	pop $b
	popax
	add $a,$b
	call sndyes,load
	push $1
	push "nar09.wav"
	pop $b
	popax
	add $a,$b
	call sndno,load
	push $1
	push "nar11.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart,load
	push $1
	push "nar14.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart2,load
	end method
	method askexittomenu
	push "sndaskexit"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askexitgame
	push "sndaskexitgame"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askrestart
	push "sndaskrestart"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method askrestart2
	push "sndaskrestart2"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method mnotomenu
	end method
	method myestomenu
	call modadvglob,delheros
	call clsave,free
	call gameapi,getgamename
	spushs
	push "Puzzle"
	cmpst
	jne l3167
	spop $a
	push "MenuPuzzle"
	jmp l3166
l3167:
	push "MenuPuzzle"
	cmpst
	jne l3168
	spop $a
	push "OutroPuz"
	jmp l3166
l3168:
	spop $a
	push "MenuPuzzle"
l3166:
	call gameapi,play
	end method
	method mnorestart
	call gameapi,getgamename
	spushs
	push "Puzzle"
	cmpst
	jne l3170
	spop $a
	push "MenuPuzzle"
	jmp l3169
l3170:
	spop $a
	push "MenuPuzzle"
l3169:
	call gameapi,play
	end method
	method myesrestart
	cthis crestart
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call ccs,isplaying
	neg
	cmp0
	je l3172
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent classasker,ask
l3172:
	end method
	end class

	new classasker2,claskexit
	method LANG=
	localdef $1
	pop $1
	push $1
	pop LANG
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l3174
	push ""
	pop LANG
l3174:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l3176
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l3176:
	call claskexit,reload
	end method
	module clbuts
	method init
	end method
	method load
	new classbutton,buts
	push "scripts/common/buttons.pyz"
	push 4000
	push "imglobcurs"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call engine,actclassname
	push "butmovoff"
	call buts,transmovofffunc
	call buts,disableall
	new db,dbb
	push "scripts/common/buts.db"
	call dbb,load
	new snd,sndfxglobon
	push "sounds/sfx/globbutmovon.wav"
	call sndfxglobon,load
	push 50
	call sndfxglobon,setvol
	new def,bvisible
	push 1
	pop bvisible
	end method
	method reset
	call buts,disableall
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push $1
	call dbb,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l3178
	localint $3
	push $2
	call dbb,getcolsno
	pop $3
	localint $4
	push 1
	pop $4
l3179:
	push $4
	push $3
	cmpjl
	cmp0
	je l3180
	jmp l3182
l3181:
	add $4,1
	pop $4
	jmp l3179
l3182:
	push $2
	push $4
	call dbb,get
	call buts,enable
	jmp l3181
l3180:
l3178:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	method enable
	localstring $1
	pop $1
	push $1
	call buts,enable
	end method
	method butmovon
	localstring $1
	pop $1
	call sndfxglobon,play
	call mouse,isvisible
	pop bvisible
	call mouse,show
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovoff
	localstring $1
	pop $1
	push bvisible
	neg
	cmp0
	je l3184
	call mouse,hide
l3184:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "pause"
	cmpje
	cmp0
	je l3186
	call clpause,pause
	jmp l3185
l3186:
	push $1
	push "exit"
	cmpje
	cmp0
	je l3188
	call gameapi,getgamename
	spushs
	push "MenuGry"
	cmpst
	je l3191
	push "MenuTest"
	cmpst
	je l3191
	push "MenuBaj"
	cmpst
	je l3191
	jmp l3190
l3191:
	spop $a
	push "MainMenu"
	call gameapi,play
	jmp l3189
l3190:
	push "SubMenu"
	cmpst
	jne l3192
	spop $a
	push "MenuGry"
	call gameapi,play
	jmp l3189
l3192:
	spop $a
	call claskexit,askexittomenu
l3189:
	jmp l3187
l3188:
	push $1
	push "restart"
	cmpje
	cmp0
	je l3194
	call claskexit,askrestart
l3194:
l3187:
l3185:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end module

	class classplacepointer2
	parent classplacepointer
	method init
	clparent classplacepointer,init
	push "scripts/common/strzalka.pyz"
	cthis load
	end method
	end class

	push 0
	pop igmstate
	push 0
	push 0
	push 0
	push 0
	push 1
	pop igmbegin
	pop igmdemo
	pop igmeasy
	pop igmwinlocal
	pop igmdebug
	method buildsavedir
	push igmwinlocal
	cmp0
	je l3196
	localstring $1
	push "appdata"
	call engine,getspecialpath
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l3198
	localstring $2
	push $1
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	call engine,mkdir
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l3201
	push $2
	push 1
	cmpje
	jmp l3202
l3200:
	push 0
	jmp l3202
l3201:
	push 1
l3202:
	cmp0
	je l3203
	push $1
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/saves"
	pop $b
	popax
	add $a,$b
	call engine,mkdir
	popax
l3203:
l3198:
l3196:
	end method
	cthis buildsavedir
	call bsms,setstd
	call clbuts,load
	push "scripts/common/cursors.pyz"
	call advmouse,load
	new int,iPuzRow
	new int,iPuzCol
	new string,sPuzzle
	new int,bPlayMusic
	push 0
	pop bPlayMusic
	push "MainLoader"
	call gameapi,play
	game MainLoader
	parent StdGame
	method init
	push "mainloader"
	clparent StdGame,init
	push "scripts/common/defaults.adv"
	call modadv,load
	push "scripts/common/sounds.db"
	call modadv,loadsounds
	push "snd"
	call modadv,settalktype
	push "scripts/common/initscript.dsc"
	call modadv,loadscript
	cthis getname
	pop sgmlastscene
	push "startgame:"
	push 1
	call modadv,get
	call gameapi,play
	end method
	end game

	new int,PrzygodaNumer
	push 1
	pop PrzygodaNumer
	new int,PrzygodaMode
	push 0
	pop PrzygodaMode
	class classadvstdgame
	parent classadvcontroller
	method init
	call clbuts,reset
	clparent classadvcontroller,init
	cthis advsave_game
	end method
	method advload_game
	push "save"
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	cthis _advload
	end method
	method advsave_game
	push "save"
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	cthis _advsave
	end method
	end class

	game gameadvdef
	parent classadvstdgame
	method init
	clparent classadvstdgame,init
	end method
	end game

	new int,iBajkaNr
	push 1
	pop iBajkaNr
	game Bajka
	parent StdGame
	method init
	push "bajka"
	clparent StdGame,init
	push "bkg.pyz"
	cthis img=
	new int,ibajkax
	push 10
	pop ibajkax
	new int,ibajkay
	push 10
	pop ibajkay
	new int,ibajkaex
	push 864
	pop ibajkaex
	new int,ibajkaey
	push 647
	pop ibajkaey
	new gmimgvec,grels
	push iBajkaNr
	push 1
	cmpje
	cmp0
	je l3205
	push A
	push "b1_bg.pyz"
	push "b1_c1.pyzP 5"
	push "b1_ptak1.pyzP 10"
	push "b1_ptak2.pyzP 15"
	push "b1_ptak3.pyzP 20"
	push "b1_c2.pyzP 25"
	push "b1_l1.pyzP 30"
	push "b1_bg2.pyzP 35"
	push "b1_l2.pyzP 40"
	push "b1_lisc1.pyzP 45"
	push "b1_l3.pyzP 50"
	cthis imgs=
	push 0.13
	push 100
	push 0
	call anb1_c1,mxmover
	push 2
	push 150
	push 5
	popax
	sub 0,$a
	call anb1_ptak1,mxmover
	push 4
	popax
	sub 0,$a
	push 100
	popax
	sub 0,$a
	push 25
	call anb1_ptak2,mxmover
	push 9
	push 250
	push 465
	popax
	sub 0,$a
	call anb1_ptak3,mxmover
	push 0.33
	popax
	sub 0,$a
	push 200
	popax
	sub 0,$a
	push 0
	call anb1_c1,mxmover
	push A
	push "anb1_bg"
	push "anb1_l1"
	push "anb1_bg2"
	push "anb1_l2"
	push "anb1_lisc1"
	push "anb1_l3"
	call grels,addlist
l3205:
	cthis mclip
	end method
	method mclip
	push "Bajka0"
	call grels,eval
	end method
	method Bajka0
	push ibajkax
	push ibajkay
	push ibajkaex
	push ibajkaey
	cthis clip
	end method
	method mxmover
	localreal $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis getname
	call grels,add
	push A
	push "dx"
	push $1
	push "ilim"
	push $2
	push "ipos"
	push $3
	push "xmov"
	push 0.0
	cthis vars2
	push "onendframe"
	push "Bajka1"
	cthis addmethod
	end method
	method Bajka1
	push dx
	popax
	add xmov,$a
	pop xmov
	localint $1
	push xmov
	pop $1
	push $1
	cmp0
	je l3207
	push $1
	popax
	sub xmov,$a
	pop xmov
	push $1
	push 0
	cthis move
	push dx
	push 0
	cmpja
	cmp0
	je l3209
	cthis getpx
	push ilim
	pop $b
	popax
	add $a,$b
	push ibajkaex
	cmpja
	cmp0
	je l3211
	push ibajkax
	cthis getw
	pop $b
	popax
	sub $a,$b
	push ipos
	pop $b
	popax
	add $a,$b
	cthis getposy
	cthis setpos
l3211:
	jmp l3208
l3209:
	cthis getex
	push ilim
	pop $b
	popax
	add $a,$b
	push ibajkax
	cmpjl
	cmp0
	je l3213
	push ibajkaex
	push ipos
	pop $b
	popax
	add $a,$b
	cthis getposy
	cthis setpos
l3213:
l3208:
l3207:
	end method
	end game

	class TPuzzle
	method init
	end method
	method tinit
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new int,iCols
	push $4
	pop iCols
	new int,iRows
	push $3
	pop iRows
	push "imgbkg"
	push $1
	push 0
	cthis newimg
	new gmimgvec,grel
	new gmimgvec,grend
	push "grel"
	push $2
	popax
	pop $b
	psax
	call [$b],operator<
	call grel,hash
	push "TPuzzle0"
	call grel,each
	new int,ibadajl
	push 25
	pop ibadajl
	new string,sactpuz
	new int,iblitopacity
	push 192
	pop iblitopacity
	new int,PuzzleState
	push 0
	pop PuzzleState
	new DelayMover,cmov
	push 200
	new SimpleCounter,cnt
	new int,iX
	push $5
	pop iX
	new int,iY
	push $6
	pop iY
	push iX
	push iY
	call grel,move
	end method
	method TPuzzle0
	localdef $1
	pop $1
	push 10
	push $1
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method setpuzstate
	localint $1
	pop $1
	push $1
	pop PuzzleState
	push PuzzleState
	push 1
	cmpje
	cmp0
	je l3215
	new gmimgvec,grblit
	localdef $2
	pop $2
	push "grblit"
	push $2
	popax
	pop $b
	psax
	call [$b],operator<
	call grblit,hide
l3215:
	end method
	method cmov_GET
	call mouse,getpos
	push 1
	push 1
	call grel,isincut
	cmp0
	je l3217
	localstring $1
	call grel,getsfound
	pop $1
	push $1
	spushs
	push 900
	spop $a
	call [$a],setz
	push $1
	cthis mssetobj
	cthis tpuzzle_get
l3217:
	end method
	method cwithin
	localstring $1
	pop $1
	localint $2
	cthis gettype
	push "anima"
	cmpjne
	cmp0
	je l3219
	push 0
	pop $2
l3220:
	push $2
	cthis size
	cmpjl
	cmp0
	je l3221
	jmp l3223
l3222:
	add $2,1
	pop $2
	jmp l3220
l3223:
	push $2
	cthis get
	spushs
	push $1
	spop $a
	call [$a],cwithin
	cmp0
	je l3225
	push 1
	ret
l3225:
	jmp l3222
l3221:
	push 0
	ret
	jmp l3218
l3219:
	push $1
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpje
	cmp0
	je l3227
	localint $3
	cthis framenr
	pop $3
	localint $4
	push $3
	push iCols
	pop $b
	popax
	div $a,$b
	push $d
	pop $4
	push A
	push $4
	push 0
	cmpja
	cmp0
	je l3229
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
l3229:
	push $4
	push iCols
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l3231
	push $3
	push 1
	pop $b
	popax
	add $a,$b
l3231:
	push $3
	push iCols
	pop $b
	popax
	div $a,$b
	psax
	pop $4
	push $4
	push 0
	cmpja
	cmp0
	je l3233
	push $3
	push iCols
	pop $b
	popax
	sub $a,$b
l3233:
	push $4
	push iRows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l3235
	push $3
	push iCols
	pop $b
	popax
	add $a,$b
l3235:
	push $1
	spushs
	spop $a
	call [$a],framenr
	spushs
	spop $h
	call $h,in
	ret
	jmp l3226
l3227:
	push 0
	pop $2
l3236:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l3237
	jmp l3239
l3238:
	add $2,1
	pop $2
	jmp l3236
l3239:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis cwithin
	cmp0
	je l3241
	push 1
	ret
l3241:
	jmp l3238
l3237:
	push 0
	ret
l3226:
l3218:
	end method
	method cblit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpje
	cmp0
	je l3243
	push PuzzleState
	push 1
	cmpje
	cmp0
	je l3245
	push $1
	spushs
	push iX
	push iY
	spop $a
	call [$a],setpos
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	spushs
	spop $a
	call [$a],framenr
	call grblit,get
	pop $1
l3245:
	push $1
	spushs
	spop $a
	call [$a],TPuzzle1
	jmp l3242
l3243:
	localint $2
	push 0
	pop $2
l3246:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l3247
	jmp l3249
l3248:
	add $2,1
	pop $2
	jmp l3246
l3249:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis cblit
	jmp l3248
l3247:
l3242:
	end method
	method TPuzzle1
	push 1
	cthis setz
	cthis show
	push iX
	push iY
	cthis setpos
	localint $1
	cthis getpx
	pop $1
	localint $2
	cthis getpy
	pop $2
	cthis anaddfilter
	push iblitopacity
	cthis setopacity
	push $1
	push $2
	cthis setpos
	cthis getname
	call imgbkg,blit
	cthis unlink
	push iX
	push iY
	cthis setpos
	cthis hide
	end method
	method cmov_PUT
	push GAME
	spushs
	spop $a
	call [$a],cput
	end method
	method cput
	cthis tpuzzle_put
	localstring $1
	call cmov,getmover
	pop $1
	push $1
	spushs
	push 100
	call cnt,next
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	call cmov,free
	call grel,TPuzzle2
	localstring $2
	push $1
	pop $2
	localstring $3
	push $1
	pop sactpuz
l3250:
	push $1
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpjne
	cmp0
	je l3251
	push $1
	spushs
	push 0
	spop $a
	call [$a],get
	pop $1
	jmp l3250
l3251:
	push $1
	spushs
	spop $a
	call [$a],lodx
	push iX
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],lody
	push iY
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	call ibadajl,length
	push ibadajl
	cmpjl
	cmp0
	je l3253
	push "null"
	pop sactpuz
	push $2
	cthis cblit
	push $2
	call grel,remove
	push $2
	call grend,add
	cthis tpuzzle_blit
	call grel,empty
	cmp0
	je l3255
	call grend,show
	cthis tpuzzle_end
l3255:
	jmp l3252
l3253:
	push $2
	call grel,remove
	localint $4
	push 0
	pop $4
l3256:
	push $4
	call grel,size
	cmpjl
	cmp0
	je l3257
	jmp l3259
l3258:
	add $4,1
	pop $4
	jmp l3256
l3259:
	push $4
	call grel,get
	pop $1
	push $1
	push $2
	call cllen,iposlen
	push ibadajl
	cmpjl
	cmp0
	je l3261
	push $2
	spushs
	push $1
	spop $a
	call [$a],cwithin
	jmp l3263
l3261:
	push 0
	jmp l3263
l3262:
	push 1
l3263:
	cmp0
	je l3264
	localint $5
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getpos
	pop $6
	pop $5
	push $1
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpje
	cmp0
	je l3266
	push $1
	cthis mwyjmij
	push $2
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpje
	cmp0
	je l3268
	push "gr"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new gmimgvec,[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],add
	push $3
	spushs
	push $2
	spop $a
	call [$a],add
	jmp l3267
l3268:
	push $2
	spushs
	push $1
	spop $a
	call [$a],add
	push $2
	pop $3
l3267:
	push $1
	call grel,remove
	push $3
	call grel,add
	jmp l3265
l3266:
	push $2
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpje
	cmp0
	je l3270
	push $1
	spushs
	push $2
	spop $a
	call [$a],add
	jmp l3269
l3270:
	push $1
	spushs
	push $2
	spop $a
	call [$a],addgr
l3269:
	push $1
	pop $3
l3265:
	push $3
	spushs
	push $5
	push $6
	spop $a
	call [$a],setpos
	push $3
	spushs
	push $2
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],setz
	call grel,sortimgs
	push $3
	pop sactpuz
	ret
l3264:
	jmp l3258
l3257:
	push $2
	call grel,add
l3252:
	end method
	method TPuzzle2
	cthis sortimgs
	push "TPuzzle3"
	cthis each
	end method
	method TPuzzle3
	localint $1
	pop $1
	push 10
	push $1
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method tpuzzle_end
	end method
	method tpuzzle_get
	end method
	method tpuzzle_blit
	end method
	method tpuzzle_put
	end method
	end class

	game Puzzle
	parent StdGame
	parent TPuzzle
	method init
	push "puzzle"
	clparent StdGame,init
	push A
	push "getpuz 60"
	push "putpuz 60"
	push "ok 60"
	cthis sfxs=
	push "bgpuzzle.png"
	push "p"
	push sPuzzle
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push iPuzRow
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push iPuzCol
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	push iPuzRow
	push iPuzCol
	push 0
	push 0
	cthis tinit
	push A
	push "left.pyz 200"
	push "right.pyz 200"
	cthis imgs=
	call anleft,Button_std
	call anright,Button_std
	push "anleft"
	call but1,add
	push "anright"
	call but1,add
	new int,strzalkax
	push 5
	pop strzalkax
	new int,rewindspeed
	push 10
	pop rewindspeed
	push "timleft"
	push "Puzzle0"
	cthis cycle=
	push "timright"
	push "Puzzle1"
	cthis cycle=
	push 6
	push 54
	push 1012
	push 690
	new Rect,rec2
	new gmimgvec,grpes
	localint $1
	push 0
	pop $1
l3285:
	push $1
	call grel,size
	cmpjl
	cmp0
	je l3286
	jmp l3288
l3287:
	add $1,1
	pop $1
	jmp l3285
l3288:
	push $1
	call grel,get
	cthis mwstaw
	jmp l3287
l3286:
	cthis cbutexit
	push 15
	popax
	sub 0,$a
	push 15
	popax
	sub 0,$a
	call anbutexit,move
	push "timwatch"
	push 2000
	push "Puzzle2"
	cthis timer=
	cthis cbutmusic
	cthis unlockall
	push 1
	pop igmstate
	push bPlayMusic
	cmp0
	je l3290
	push "puzzle.ogg -v 50 -l"
	call mus,playstr
l3290:
	end method
	method Puzzle0
	push igmstate
	push 1
	cmpje
	cmp0
	je l3272
	call grpes,size
	jmp l3274
l3272:
	push 0
	jmp l3274
l3273:
	push 1
l3274:
	cmp0
	je l3275
	push rewindspeed
	push 0
	call grpes,move
	localdef $1
	call grpes,first
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l3277
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push 0
	call grpes,move
l3277:
	cthis play
l3275:
	end method
	method Puzzle1
	push igmstate
	push 1
	cmpje
	cmp0
	je l3279
	call grpes,size
	jmp l3281
l3279:
	push 0
	jmp l3281
l3280:
	push 1
l3281:
	cmp0
	je l3282
	push rewindspeed
	popax
	sub 0,$a
	push 0
	call grpes,move
	localdef $1
	call grpes,last
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l3284
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	push 0
	call grpes,move
l3284:
	cthis play
l3282:
	end method
	method Puzzle2
	push "MenuPuzzle"
	call gameapi,play
	end method
	method play_music
	push "puzzle.ogg -v 50 -l"
	call mus,playstr
	end method
	method stop_music
	push 1000
	call mus,fadeout
	end method
	method mwstaw
	localstring $1
	pop $1
	localint $2
	push 5
	pop $2
	localint $3
	call grpes,size
	cmp0
	je l3292
	call grpes,last
	spushs
	spop $a
	call [$a],getex
	pop $3
	jmp l3291
l3292:
	call anleft,getex
	pop $3
l3291:
	push $1
	spushs
	push $3
	push strzalkax
	pop $b
	popax
	add $a,$b
	push iResY
	push $2
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],ansetbpos
	push $1
	spushs
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	push 0
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push iResY
	spop $a
	call [$a],clip
	push $1
	call grpes,add
	end method
	method mwyjmij
	localstring $1
	pop $1
	localint $2
	push $1
	call grpes,find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l3294
	ret
l3294:
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push $1
	call grpes,remove
	localint $3
	push $2
	pop $3
l3295:
	push $3
	call grpes,size
	cmpjl
	cmp0
	je l3296
	jmp l3298
l3297:
	add $3,1
	pop $3
	jmp l3295
l3298:
	push $3
	call grpes,get
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	popax
	sub 0,$a
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l3297
l3296:
	end method
	method clbuts_help_butmoveon
	end method
	method clbuts_help_butmoveoff
	end method
	method tpuzzle_get
	call fxgetpuz,play
	call grel,getsfound
	cthis mwyjmij
	end method
	method tpuzzle_put
	call fxputpuz,play
	end method
	method tpuzzle_end
	call fxok,play
	call grend,hide
	push 2
	pop igmstate
	push sPuzzle
	pop sMenuMode
	call timwatch,play
	end method
	method cmov_PUT
	push GAME
	spushs
	spop $a
	call [$a],cput
	push sactpuz
	push "null"
	cmpjne
	cmp0
	je l3300
	push sactpuz
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpje
	cmp0
	je l3302
	push sactpuz
	spushs
	spop $a
	call [$a],getey
	push 634
	cmpja
	jmp l3304
l3302:
	push 0
	jmp l3304
l3303:
	push 1
l3304:
	cmp0
	je l3305
	push sactpuz
	cthis mwstaw
	jmp l3301
l3305:
	push sactpuz
	call rec2,fit
l3301:
l3300:
	end method
	method mouse_lclick
	push igmstate
	push 2
	cmpje
	cmp0
	je l3307
	push 3
	pop igmstate
	jmp l3306
l3307:
	push igmstate
	push 3
	cmpje
	cmp0
	je l3309
	push "MenuPuzzle"
	call gameapi,play
l3309:
l3306:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push igmstate
	push 1
	cmpje
	cmp0
	je l3311
	push $1
	push $2
	push 1
	push 1
	call anleft,isin
	cmp0
	je l3313
	call timleft,play
	jmp l3312
l3313:
	push $1
	push $2
	push 1
	push 1
	call anright,isin
	cmp0
	je l3315
	call timright,play
l3315:
l3312:
l3311:
	end method
	method mouse_lrel
	push igmstate
	push 1
	cmpje
	cmp0
	je l3317
	call timleft,isplaying
	cmp0
	je l3319
	push 0
	call timleft,stop
l3319:
	call timright,isplaying
	cmp0
	je l3321
	push 0
	call timright,stop
l3321:
l3317:
	end method
	method mouse_rclick
	push igmdebug
	cmp0
	je l3323
	call grpes,print
l3323:
	end method
	method anbutexit_lclick
	push "MenuPuzzle"
	cthis askfor
	end method
	end game

	new int,iMenuPuzid
	push 1
	pop iMenuPuzid
	new string,sMenuMode
	push "null"
	pop sMenuMode
	game MenuPuzzle
	parent StdGame
	method init
	push "menupuz"
	clparent StdGame,init
	push sMenuMode
	push "null"
	cmpjne
	cmp0
	je l3325
	push 3
	pop igmstate
	push "imgpokaz"
	push "$scripts/podglady/x_"
	push sMenuMode
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	push 1000
	cthis newimg
	new classfadeinout,clfio
	push "null"
	pop sMenuMode
	jmp l3324
l3325:
	push 1
	pop igmstate
l3324:
	new int,ilepuzid
	push 10
	pop ilepuzid
	push A
	push "bkg.pyz"
	push "butup.pyz 20"
	push "butdown.pyz 20"
	cthis imgs=
	cthis cbutexit
	push 10
	popax
	sub 0,$a
	push 10
	popax
	sub 0,$a
	call anbutexit,move
	call anbutup,MenuPuzzle0
	call anbutdown,MenuPuzzle2
	cthis cbutmusic
	cthis mstart
	call but1,onmousemove
	push bPlayMusic
	cmp0
	je l3333
	push "puzzle.ogg -v 50 -l"
	call mus,playstr
l3333:
	end method
	method MenuPuzzle0
	cthis Button_std
	push "butclick"
	push "MenuPuzzle1"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle1
	push igmstate
	push 1
	cmpjne
	cmp0
	je l3327
	ret
l3327:
	push iMenuPuzid
	push ilepuzid
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop iMenuPuzid
	push GAME
	spushs
	spop $a
	call [$a],mrestart
	end method
	method MenuPuzzle2
	cthis Button_std
	push "butclick"
	push "MenuPuzzle3"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle3
	push igmstate
	push 1
	cmpjne
	cmp0
	je l3329
	ret
l3329:
	push iMenuPuzid
	push 1
	pop $b
	popax
	sub $a,$b
	pop iMenuPuzid
	push iMenuPuzid
	push 1
	cmpjl
	cmp0
	je l3331
	push ilepuzid
	pop iMenuPuzid
l3331:
	push GAME
	spushs
	spop $a
	call [$a],mrestart
	end method
	method play_music
	push "puzzle.ogg -v 50 -l"
	call mus,playstr
	end method
	method stop_music
	push 1000
	call mus,fadeout
	end method
	method mrestart
	cthis mdel
	cthis mstart
	end method
	method mdel
	localint $1
	push 1
	pop $1
l3334:
	push $1
	push 4
	cmpjle
	cmp0
	je l3335
	jmp l3337
l3336:
	add $1,1
	pop $1
	jmp l3334
l3337:
	push "anmenu"
	push $1
	pop $b
	popax
	add $a,$b
	call but1,removebut
	push "anmenu"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	jmp l3336
l3335:
	end method
	method mstart
	push iMenuPuzid
	spushs
	push 1
	cmpst
	jne l3339
	spop $a
	push "motor"
	push "straz"
	push "pojazdy"
	push "doktor"
	cthis mload
	jmp l3338
l3339:
	push 2
	cmpst
	jne l3340
	spop $a
	push "wies"
	push "sad"
	push "motor"
	push "straz"
	cthis mload
	jmp l3338
l3340:
	push 3
	cmpst
	jne l3341
	spop $a
	push "farma"
	push "kury"
	push "wies"
	push "sad"
	cthis mload
	jmp l3338
l3341:
	push 4
	cmpst
	jne l3342
	spop $a
	push "ufo"
	push "przed"
	push "farma"
	push "kury"
	cthis mload
	jmp l3338
l3342:
	push 5
	cmpst
	jne l3343
	spop $a
	push "wiosna"
	push "zima"
	push "ufo"
	push "przed"
	cthis mload
	jmp l3338
l3343:
	push 6
	cmpst
	jne l3344
	spop $a
	push "las"
	push "morze"
	push "wiosna"
	push "zima"
	cthis mload
	jmp l3338
l3344:
	push 7
	cmpst
	jne l3345
	spop $a
	push "krab"
	push "ryby"
	push "las"
	push "morze"
	cthis mload
	jmp l3338
l3345:
	push 8
	cmpst
	jne l3346
	spop $a
	push "mamut"
	push "statek"
	push "krab"
	push "ryby"
	cthis mload
	jmp l3338
l3346:
	push 9
	cmpst
	jne l3347
	spop $a
	push "pirat"
	push "jaski"
	push "mamut"
	push "statek"
	cthis mload
	jmp l3338
l3347:
	push 10
	cmpst
	jne l3348
	spop $a
	push "pojazdy"
	push "doktor"
	push "pirat"
	push "jaski"
	cthis mload
	jmp l3338
l3348:
	spop $a
l3338:
	end method
	method mload
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 1
	push $1
	cthis mloadb
	push 2
	push $2
	cthis mloadb
	push 3
	push $3
	cthis mloadb
	push 4
	push $4
	cthis mloadb
	end method
	method mloadb
	localint $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push "anmenu"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	push "m_"
	push $2
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	push 10
	cthis newanima
	localint $4
	push 100
	pop $4
	localint $5
	push 80
	pop $5
	localint $6
	push $4
	push 1.3
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	localint $7
	push $5
	push 1.3
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $7
	push $1
	spushs
	push 1
	cmpst
	jne l3350
	spop $a
	push $3
	spushs
	push $4
	push $5
	spop $a
	call [$a],setpos
	jmp l3349
l3350:
	push 2
	cmpst
	jne l3351
	spop $a
	push $3
	spushs
	push $6
	push $5
	spop $a
	call [$a],setpos
	jmp l3349
l3351:
	push 3
	cmpst
	jne l3352
	spop $a
	push $3
	spushs
	push $4
	push $7
	spop $a
	call [$a],setpos
	jmp l3349
l3352:
	push 4
	cmpst
	jne l3353
	spop $a
	push $3
	spushs
	push $6
	push $7
	spop $a
	call [$a],setpos
	jmp l3349
l3353:
	spop $a
l3349:
	push $3
	spushs
	push $2
	spop $a
	call [$a],MenuPuzzle4
	end method
	method MenuPuzzle4
	localstring $1
	pop $1
	push "smenu"
	push $1
	cthis var2
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "MenuPuzzle5"
	cthis addmethod
	push "onfinish"
	push "MenuPuzzle6"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle5
	push igmstate
	push 1
	cmpjne
	cmp0
	je l3355
	ret
l3355:
	push 0
	cthis play
	end method
	method MenuPuzzle6
	push smenu
	pop sPuzzle
	push "WyborPuz"
	call gameapi,play
	end method
	method anbutexit_lclick
	push igmstate
	push 3
	cmpje
	cmp0
	jne l3358
	push igmstate
	push 4
	cmpje
	jmp l3359
l3357:
	push 0
	jmp l3359
l3358:
	push 1
l3359:
	cmp0
	je l3360
	ret
l3360:
	push "exit"
	cthis askfor
	end method
	method mouse_lclick
	push igmstate
	push 3
	cmpje
	cmp0
	je l3362
	push 4
	pop igmstate
	push 1
	push 5
	popax
	sub 0,$a
	push "imgpokaz"
	push "MenuPuzzle7"
	call clfio,imgtransparency
l3362:
	end method
	method MenuPuzzle7
	push 1
	pop igmstate
	call imgpokaz,hide
	end method
	end game

	game WyborPuz
	parent StdGame
	method init
	push "wyborpuz"
	clparent StdGame,init
	push "bkg.pyz"
	cthis img=
	push "buts.pyz"
	new Buttons,cbut
	end method
	method cbut_lclick
	push sobject
	spushs
	push "music"
	cmpst
	jne l3364
	spop $a
	jmp l3363
l3364:
	push "exit"
	cmpst
	jne l3365
	spop $a
	push "MenuPuzzle"
	call gameapi,play
	jmp l3363
l3365:
	push "12"
	cmpst
	jne l3366
	spop $a
	push 3
	pop iPuzRow
	push 4
	pop iPuzCol
	push "Puzzle"
	call gameapi,play
	jmp l3363
l3366:
	push "20"
	cmpst
	jne l3367
	spop $a
	push 4
	pop iPuzRow
	push 5
	pop iPuzCol
	push "Puzzle"
	call gameapi,play
	jmp l3363
l3367:
	push "30"
	cmpst
	jne l3368
	spop $a
	push 5
	pop iPuzRow
	push 6
	pop iPuzCol
	push "Puzzle"
	call gameapi,play
	jmp l3363
l3368:
	push "48"
	cmpst
	jne l3369
	spop $a
	push 6
	pop iPuzRow
	push 8
	pop iPuzCol
	push "Puzzle"
	call gameapi,play
	jmp l3363
l3369:
	spop $a
l3363:
	end method
	end game

	game IntroPuz
	parent StdGame
	method init
	push "intropuz"
	clparent StdGame,init
	push "bkg.pyz"
	cthis img=
	push "grnap"
	push "napisy"
	push 10
	cthis newgrimg
	call grnap,hide
	new int,idtimer
	push 0
	pop idtimer
	push "timgo"
	push 1000
	push "IntroPuz0"
	cthis timer=
	push "timend"
	push 2000
	push "mgo"
	cthis timer=
	call timgo,play
	end method
	method IntroPuz0
	push idtimer
	call grnap,get
	spushs
	spop $a
	call [$a],show
	add idtimer,1
	pop idtimer
	push idtimer
	call grnap,size
	cmpjl
	cmp0
	je l3371
	cthis play
	jmp l3370
l3371:
	call timend,play
l3370:
	end method
	method mgo
	push "MenuPuzzle"
	call gameapi,play
	end method
	method mouse_lclick
	cthis mgo
	end method
	end game

	game OutroPuz
	parent StdGame
	method init
	push "outropuz"
	clparent StdGame,init
	push "intropuz"
	cthis path=
	push "outro.jpg"
	cthis img=
	push "timend"
	push 2000
	push "mgo"
	cthis timer=
	call timend,play
	end method
	method mgo
	push igmstate
	push 0
	cmpje
	cmp0
	je l3373
	push 1
	pop igmstate
	call gameapi,exit
l3373:
	end method
	method mouse_lclick
	cthis mgo
	end method
	end game

	game PuzzleBa
	parent StdGame
	method init
	push "puzzleb"
	clparent StdGame,init
	new img,imgbkg
	push iResX
	push iResY
	cthis white
	push 255
	call imgbkg,create
	new gmimgvec,grm
	push "grm"
	push "pjaski_3_4.pyz"
	popax
	pop $b
	psax
	call [$b],operator<
	call grm,hide
	push "imgp1"
	push "jaskiniowcy2.jpg"
	push 20
	cthis newimg
	new img,imgp
	call imgp1,getw
	call imgp1,geth
	cthis transparent
	call imgp,create
	push "imgp1"
	call imgp,blit
	delete imgp1
	call grm,first
	spushs
	spop $a
	call [$a],getpx
	call grm,first
	spushs
	spop $a
	call [$a],getpy
	call imgp,setpos
	call imgp,hide
	new filter,ft1
	new string,smoved
	push "imgp"
	pop smoved
	new int,iobx
	push 0
	pop iobx
	new int,ioby
	push 0
	pop ioby
	push smoved
	call ft1,link
	push 1
	call ft1,setmaskalpha
	push smoved
	spushs
	spop $a
	call [$a],show
	push smoved
	spushs
	call grm,first
	spushs
	spop $a
	call [$a],getpx
	call grm,first
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],setpos
	new string,smask
	push 11
	call grm,get
	pop smask
	push smask
	call ft1,mask
	new img,im1
	push smask
	spushs
	spop $a
	call [$a],getw
	push smask
	spushs
	spop $a
	call [$a],geth
	cthis transparent
	call im1,create
	push smask
	spushs
	spop $a
	call [$a],getpx
	push smask
	spushs
	spop $a
	call [$a],getpy
	call im1,setpos
	push smoved
	call im1,blit
	end method
	method mouse_move
	call mouse,getpos
	call im1,setpos
	end method
	end game

	game PuzzleC
	parent StdGame
	method init
	push "puzzleb"
	clparent StdGame,init
	new img,imgbkg
	push iResX
	push iResY
	cthis white
	push 255
	call imgbkg,create
	new gmimgvec,grm
	push "grm"
	push "pjaski_3_4.pyz"
	popax
	pop $b
	psax
	call [$b],operator<
	localstring $1
	call grm,first
	pop $1
	new img,im1
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	cthis transparent
	call im1,create
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	call im1,setpos
	push $1
	call im1,blit
	end method
	method mouse_move
	call mouse,getpos
	call im1,setpos
	end method
	end game

	class gmimgvecpuz
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis imsetpos
	end method
	method imsetpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "imsetpos"
	push $1
	push $2
	cthis eval2
	end method
	method ilodx
	push 0
	end method
	method ilody
	push 0
	end method
	end class

	class TPuzzle2
	method init
	end method
	method tinit
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new int,iCols
	push $4
	pop iCols
	new int,iRows
	push $3
	pop iRows
	push "imgbkg"
	push $1
	push 0
	cthis newimg
	push ".pyz"
	call $2,contains
	cmp0
	je l3375
	new gmimgvec,grel
	push "grel"
	push $2
	popax
	pop $b
	psax
	call [$b],operator<
	jmp l3374
l3375:
	push $2
	push "grel"
	cmpjne
	cmp0
	je l3377
	push $2
	spushs
	push "grel"
	spop $a
	call [$a],addtogamevars
l3377:
l3374:
	new gmimgvec,grend
	call grel,hash
	push "TPuzzle20"
	call grel,each
	new string,spuztyp
	call grel,first
	spushs
	spop $a
	call [$a],gettype
	pop spuztyp
	new int,ibadajl
	push 25
	pop ibadajl
	new string,sactpuz
	new int,iblitopacity
	push 255
	pop iblitopacity
	new int,PuzzleState
	push 0
	pop PuzzleState
	new DelayMover,cmov
	push 200
	new SimpleCounter,cnt
	new int,iX
	push $5
	pop iX
	new int,iY
	push $6
	pop iY
	push iX
	push iY
	call grel,move
	end method
	method TPuzzle20
	localdef $1
	pop $1
	push 10
	push $1
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method setpuzstate
	localint $1
	pop $1
	push $1
	pop PuzzleState
	push PuzzleState
	push 1
	cmpje
	cmp0
	je l3379
	new gmimgvec,grblit
	localdef $2
	pop $2
	push "grblit"
	push $2
	popax
	pop $b
	psax
	call [$b],operator<
	call grblit,hide
l3379:
	end method
	method cmov_GET
	call mouse,getpos
	push 1
	push 1
	call grel,isincut
	cmp0
	je l3381
	localstring $1
	call grel,getsfound
	pop $1
	push $1
	spushs
	push 900
	spop $a
	call [$a],setz
	push $1
	cthis mssetobj
	cthis tpuzzle_get
l3381:
	end method
	method cwithin
	localstring $1
	pop $1
	localint $2
	cthis gettype
	push spuztyp
	cmpjne
	cmp0
	je l3383
	push 0
	pop $2
l3384:
	push $2
	cthis size
	cmpjl
	cmp0
	je l3385
	jmp l3387
l3386:
	add $2,1
	pop $2
	jmp l3384
l3387:
	push $2
	cthis get
	spushs
	push $1
	spop $a
	call [$a],cwithin
	cmp0
	je l3389
	push 1
	ret
l3389:
	jmp l3386
l3385:
	push 0
	ret
	jmp l3382
l3383:
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l3391
	localint $3
	cthis framenr
	pop $3
	localint $4
	push $3
	push iCols
	pop $b
	popax
	div $a,$b
	push $d
	pop $4
	push A
	push $4
	push 0
	cmpja
	cmp0
	je l3393
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
l3393:
	push $4
	push iCols
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l3395
	push $3
	push 1
	pop $b
	popax
	add $a,$b
l3395:
	push $3
	push iCols
	pop $b
	popax
	div $a,$b
	psax
	pop $4
	push $4
	push 0
	cmpja
	cmp0
	je l3397
	push $3
	push iCols
	pop $b
	popax
	sub $a,$b
l3397:
	push $4
	push iRows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l3399
	push $3
	push iCols
	pop $b
	popax
	add $a,$b
l3399:
	push $1
	spushs
	spop $a
	call [$a],framenr
	spushs
	spop $h
	call $h,in
	ret
	jmp l3390
l3391:
	push 0
	pop $2
l3400:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l3401
	jmp l3403
l3402:
	add $2,1
	pop $2
	jmp l3400
l3403:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis cwithin
	cmp0
	je l3405
	push 1
	ret
l3405:
	jmp l3402
l3401:
	push 0
	ret
l3390:
l3382:
	end method
	method cposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $1
	spushs
	spop $a
	call [$a],ilodx
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getposx
	push $2
	spushs
	spop $a
	call [$a],ilodx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	sub $a,$b
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $1
	spushs
	spop $a
	call [$a],ilody
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getposy
	push $2
	spushs
	spop $a
	call [$a],ilody
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	call $3,length
	end method
	method cblit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l3407
	push PuzzleState
	push 1
	cmpje
	cmp0
	je l3409
	push $1
	spushs
	push iX
	push iY
	spop $a
	call [$a],imsetpos
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	spushs
	spop $a
	call [$a],framenr
	call grblit,get
	pop $1
l3409:
	push $1
	spushs
	spop $a
	call [$a],TPuzzle21
	jmp l3406
l3407:
	localint $2
	push 0
	pop $2
l3410:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l3411
	jmp l3413
l3412:
	add $2,1
	pop $2
	jmp l3410
l3413:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis cblit
	jmp l3412
l3411:
l3406:
	end method
	method TPuzzle21
	push 1
	cthis setz
	cthis show
	push iX
	push iY
	cthis imsetpos
	cthis getname
	call imgbkg,blit
	cthis hide
	end method
	method cmov_PUT
	push GAME
	spushs
	spop $a
	call [$a],cput
	end method
	method cput
	cthis tpuzzle_put
	localstring $1
	call cmov,getmover
	pop $1
	push $1
	spushs
	push 100
	call cnt,next
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	call cmov,free
	call grel,TPuzzle22
	localstring $2
	push $1
	pop $2
	localstring $3
	push $1
	pop sactpuz
l3414:
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpjne
	cmp0
	je l3415
	push $1
	spushs
	push 0
	spop $a
	call [$a],get
	pop $1
	jmp l3414
l3415:
	push $1
	spushs
	spop $a
	call [$a],ilodx
	push iX
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],ilody
	push iY
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	call ibadajl,length
	push ibadajl
	cmpjl
	cmp0
	je l3417
	push "null"
	pop sactpuz
	push $2
	cthis cblit
	push $2
	call grel,remove
	push $2
	call grend,add
	cthis tpuzzle_blit
	call grel,empty
	cmp0
	je l3419
	call grend,show
	cthis tpuzzle_end
l3419:
	jmp l3416
l3417:
	push $2
	call grel,remove
	localint $4
	push 0
	pop $4
l3420:
	push $4
	call grel,size
	cmpjl
	cmp0
	je l3421
	jmp l3423
l3422:
	add $4,1
	pop $4
	jmp l3420
l3423:
	push $4
	call grel,get
	pop $1
	push $1
	push $2
	cthis cposlen
	push ibadajl
	cmpjl
	cmp0
	je l3425
	push $2
	spushs
	push $1
	spop $a
	call [$a],cwithin
	jmp l3427
l3425:
	push 0
	jmp l3427
l3426:
	push 1
l3427:
	cmp0
	je l3428
	localint $5
	localint $6
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l3430
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $1
	spushs
	spop $a
	call [$a],ilodx
	pop $b
	popax
	sub $a,$b
	pop $5
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $1
	spushs
	spop $a
	call [$a],ilody
	pop $b
	popax
	sub $a,$b
	pop $6
	jmp l3429
l3430:
	push $1
	spushs
	spop $a
	call [$a],getpos
	pop $6
	pop $5
l3429:
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l3432
	push $1
	cthis mwyjmij
	push $2
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l3434
	push "gr"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new gmimgvecpuz,[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],add
	push $3
	spushs
	push $2
	spop $a
	call [$a],add
	jmp l3433
l3434:
	push $2
	spushs
	push $1
	spop $a
	call [$a],add
	push $2
	pop $3
l3433:
	push $1
	call grel,remove
	push $3
	call grel,add
	jmp l3431
l3432:
	push $2
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l3436
	push $1
	spushs
	push $2
	spop $a
	call [$a],add
	jmp l3435
l3436:
	push $1
	spushs
	push $2
	spop $a
	call [$a],addgr
l3435:
	push $1
	pop $3
l3431:
	push $3
	spushs
	push $5
	push $6
	spop $a
	call [$a],imsetpos
	push $3
	spushs
	push $2
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],setz
	call grel,sortimgs
	push $3
	pop sactpuz
	ret
l3428:
	jmp l3422
l3421:
	push $2
	call grel,add
l3416:
	end method
	method TPuzzle22
	cthis sortimgs
	push "TPuzzle23"
	cthis each
	end method
	method TPuzzle23
	localint $1
	pop $1
	push 10
	push $1
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method tpuzzle_end
	end method
	method tpuzzle_get
	end method
	method tpuzzle_blit
	end method
	method tpuzzle_put
	end method
	end class

	method przygotuj_matryce
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new gmimgvec,grmat
	push "grmat"
	push $1
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator<
	push $3
	spushs
	spop $e
	new gmimgvec,[$e]
	push "impuz1"
	push $2
	push 0
	cthis newimg
	new img,impuz
	call impuz1,getw
	call impuz1,geth
	cthis transparent
	call impuz,create
	push "impuz1"
	call impuz,blit
	delete impuz1
	new filter,ft1
	push "impuz"
	call ft1,link
	call grmat,first
	spushs
	spop $a
	call [$a],getpx
	call grmat,first
	spushs
	spop $a
	call [$a],getpy
	call impuz,setpos
	new filter,ft2
	localint $5
	push 0
	pop $5
l3437:
	push $5
	call grmat,size
	cmpjl
	cmp0
	je l3438
	jmp l3440
l3439:
	add $5,1
	pop $5
	jmp l3437
l3440:
	localstring $6
	push "im"
	push $3
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new img,[$e]
	push $6
	spushs
	push "framenr"
	push $5
	spop $a
	call [$a],var2
	push $6
	spushs
	push "imsetpos"
	push "global13"
	spop $a
	call [$a],addmethod
	localstring $7
	push $5
	call grmat,get
	pop $7
	push $6
	spushs
	push $7
	spushs
	spop $a
	call [$a],getw
	push $4
	pop $b
	popax
	add $a,$b
	push $7
	spushs
	spop $a
	call [$a],geth
	push $4
	pop $b
	popax
	add $a,$b
	cthis transparent
	spop $a
	call [$a],create
	push $6
	spushs
	push $7
	spushs
	spop $a
	call [$a],getpx
	push $7
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],setpos
	push $6
	spushs
	push A
	push "ilodx"
	push $6
	spushs
	spop $a
	call [$a],getpx
	push "ilody"
	push $6
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],vars2
	push $4
	push 0
	cmpja
	cmp0
	je l3442
	push $7
	spushs
	push $4
	push $4
	spop $a
	call [$a],move
	push $7
	call ft2,link
	push 92
	call ft2,setopacity
	push $6
	spushs
	push $7
	spop $a
	call [$a],blit
	call ft2,unlink
	push $7
	spushs
	push $4
	popax
	sub 0,$a
	push $4
	popax
	sub 0,$a
	spop $a
	call [$a],move
l3442:
	call ft1,removeallblend
	push $7
	call ft1,mask
	push $6
	spushs
	push "impuz"
	spop $a
	call [$a],blit
	push $3
	spushs
	push $6
	spop $a
	call [$a],add
	jmp l3439
l3438:
	call ft1,unlink
	delete ft1
	delete ft2
	call grmat,deleteallgm
	delete grmat
	delete impuz
	end method
	method global13
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push ilodx
	pop $b
	popax
	add $a,$b
	push $2
	push ilody
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	game PuzzleB
	parent StdGame
	parent TPuzzle2
	method init
	push "puzzleb"
	clparent StdGame,init
	push A
	push "getpuz 60"
	push "putpuz 60"
	push "ok 60"
	cthis sfxs=
	push 3
	pop iPuzRow
	push 4
	pop iPuzCol
	push "matryca_"
	push iPuzRow
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push iPuzCol
	pop $b
	popax
	add $a,$b
	push "p_jaski.jpg"
	push "grel"
	push 3
	cthis przygotuj_matryce
	push "bgpuzzle.png"
	push "grel"
	push iPuzRow
	push iPuzCol
	push 0
	push 0
	cthis tinit
	push A
	push "left.pyz 200"
	push "right.pyz 200"
	cthis imgs=
	call anleft,Button_std
	call anright,Button_std
	push "anleft"
	call but1,add
	push "anright"
	call but1,add
	new int,strzalkax
	push 5
	pop strzalkax
	new int,rewindspeed
	push 10
	pop rewindspeed
	push "timleft"
	push "PuzzleB0"
	cthis cycle=
	push "timright"
	push "PuzzleB1"
	cthis cycle=
	push 6
	push 54
	push 1012
	push 690
	new Rect,rec2
	call rec2,PuzzleB2
	new gmimgvec,grpes
	localint $1
	push 0
	pop $1
l3457:
	push $1
	call grel,size
	cmpjl
	cmp0
	je l3458
	jmp l3460
l3459:
	add $1,1
	pop $1
	jmp l3457
l3460:
	push $1
	call grel,get
	cthis mwstaw
	jmp l3459
l3458:
	cthis cbutexit
	push 15
	popax
	sub 0,$a
	push 15
	popax
	sub 0,$a
	call anbutexit,move
	push "timwatch"
	push 2000
	push "PuzzleB3"
	cthis timer=
	cthis cbutmusic
	cthis unlockall
	push 1
	pop igmstate
	push bPlayMusic
	cmp0
	je l3462
	push "puzzle.ogg -v 50 -l"
	call mus,playstr
l3462:
	end method
	method PuzzleB0
	push igmstate
	push 1
	cmpje
	cmp0
	je l3444
	call grpes,size
	jmp l3446
l3444:
	push 0
	jmp l3446
l3445:
	push 1
l3446:
	cmp0
	je l3447
	push rewindspeed
	push 0
	call grpes,move
	localdef $1
	call grpes,first
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l3449
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push 0
	call grpes,move
l3449:
	cthis play
l3447:
	end method
	method PuzzleB1
	push igmstate
	push 1
	cmpje
	cmp0
	je l3451
	call grpes,size
	jmp l3453
l3451:
	push 0
	jmp l3453
l3452:
	push 1
l3453:
	cmp0
	je l3454
	push rewindspeed
	popax
	sub 0,$a
	push 0
	call grpes,move
	localdef $1
	call grpes,last
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l3456
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	push 0
	call grpes,move
l3456:
	cthis play
l3454:
	end method
	method PuzzleB2
	push "gmimgvecpuz"
	call vecgr,add
	end method
	method play_music
	push "puzzle.ogg -v 50 -l"
	call mus,playstr
	end method
	method stop_music
	push 1000
	call mus,fadeout
	end method
	method mwstaw
	localstring $1
	pop $1
	localint $2
	push 5
	pop $2
	localint $3
	call grpes,size
	cmp0
	je l3464
	call grpes,last
	spushs
	spop $a
	call [$a],getex
	pop $3
	jmp l3463
l3464:
	call anleft,getex
	pop $3
l3463:
	push $1
	spushs
	push $3
	push strzalkax
	pop $b
	popax
	add $a,$b
	push iResY
	push $2
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],ansetbpos
	push $1
	spushs
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	push 0
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push iResY
	spop $a
	call [$a],clip
	push $1
	call grpes,add
	end method
	method mwyjmij
	localstring $1
	pop $1
	localint $2
	push $1
	call grpes,find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l3466
	ret
l3466:
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push $1
	call grpes,remove
	localint $3
	push $2
	pop $3
l3467:
	push $3
	call grpes,size
	cmpjl
	cmp0
	je l3468
	jmp l3470
l3469:
	add $3,1
	pop $3
	jmp l3467
l3470:
	push $3
	call grpes,get
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	popax
	sub 0,$a
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l3469
l3468:
	end method
	method clbuts_help_butmoveon
	end method
	method clbuts_help_butmoveoff
	end method
	method tpuzzle_get
	call fxgetpuz,play
	call grel,getsfound
	cthis mwyjmij
	end method
	method tpuzzle_put
	call fxputpuz,play
	end method
	method tpuzzle_end
	call fxok,play
	call grend,hide
	push 2
	pop igmstate
	push sPuzzle
	pop sMenuMode
	call timwatch,play
	end method
	method cmov_PUT
	push GAME
	spushs
	spop $a
	call [$a],cput
	push sactpuz
	push "null"
	cmpjne
	cmp0
	je l3472
	push sactpuz
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l3474
	push sactpuz
	spushs
	spop $a
	call [$a],getcy
	push 630
	cmpja
	jmp l3476
l3474:
	push 0
	jmp l3476
l3475:
	push 1
l3476:
	cmp0
	je l3477
	push sactpuz
	cthis mwstaw
	jmp l3473
l3477:
	push sactpuz
	call rec2,fit
l3473:
l3472:
	end method
	method mouse_lclick
	push igmstate
	push 2
	cmpje
	cmp0
	je l3479
	push 3
	pop igmstate
l3479:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push igmstate
	push 1
	cmpje
	cmp0
	je l3481
	push $1
	push $2
	push 1
	push 1
	call anleft,isin
	cmp0
	je l3483
	call timleft,play
	jmp l3482
l3483:
	push $1
	push $2
	push 1
	push 1
	call anright,isin
	cmp0
	je l3485
	call timright,play
l3485:
l3482:
l3481:
	end method
	method mouse_lrel
	push igmstate
	push 1
	cmpje
	cmp0
	je l3487
	call timleft,isplaying
	cmp0
	je l3489
	push 0
	call timleft,stop
l3489:
	call timright,isplaying
	cmp0
	je l3491
	push 0
	call timright,stop
l3491:
l3487:
	end method
	method mouse_rclick
	push igmdebug
	cmp0
	je l3493
	call grpes,print
l3493:
	end method
	end game

