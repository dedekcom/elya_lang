module clsav	{
	init()	{
		new vector vqsav;		// quick save (prostszy)
		vqsav.type("string");
		new vector vvqsav;		// quick save (prostszy)
		vvqsav.type("string");
	}
	free()	{
		vqsav.free();	
		vvqsav.free();	
	}
	load(string sfile)	{
		this.free();		// jak bedzie potrzebne dopisac dalej
	}
	save(string sfile)	{}
	qadd( string sname, string sval )	{
		vqsav.add( sname );
		vvqsav.add( sval );
	}
	qsave(string sname, string sval)	{
		int pos = vqsav.find(sname);
		if( pos < 0 )	{
			this.qadd( sname, sval );
		} else {
			vvqsav.set( pos, sval );
		}
	}
	string qload(string sname, string sstdval)	{
		int pos = vqsav.find( sname );
		if ( pos < 0 )	{
			this.qadd( sname, sstdval );
			return sstdval;
		} else {
			return vvqsav.get( pos );
		}
	}
}

class classquest	{
	init()	{
		new vector vqst;
		vqst.type("string");
	}
	int isdone(string sqst)	{	return vqst.contains(sqst);	}
	int notdone( string sqst )	{	return !vqst.contains(sqst);	}
	done(string sqst)	{	if( !vqst.contains(sqst) )	vqst.add(sqst);		}
	reset()	{	vqst.free();	}
	save(string sfile)	{	vqst.save( sfile );	}
	load(string sfile)	{	vqst.load( sfile );	}
}

new classquest clqs;
/*module clqs : classquest	{		// globalny odpowiednik classquesta
	init()	{	classquest::init();	}
}*/

/***************************************************************************/

/*  klasa na load dostaje baze danych z wymienionymi grami do zapisu */
class classeasysaver	{
	init()	{
		new int ilevel = -1;
		new db dbl;
		new string slevelfile;
	}
	getlevel()	{	return ilevel;	}
	setlevel(int il)	{	ilevel=il;	}
	getgame(int ig)	{	return dbl.get( ig, 0 );	}
	load( string slevf, string sdbfile)	{
		ilevel.load( slevf, -1 );
		slevelfile = slevf;
		dbl.load( sdbfile );
	}
	save()	{
		int pos = dbl.findbyrow( gameapi.getgamename() );
		if( pos>ilevel )	{
			ilevel = pos;
			ilevel.save( slevelfile );
		}
	}
}

class classfullsave	{
	init()	{
		new db dbsav;
		new string sstdfile = "saves/save.txt";
	}
	public save(string sfile)	{	dbsav.save(sfile);	}
	public load(string sfile)	{	dbsav.load(sfile);	}
	public print()	{	dbsav.print();	}
	public setfile(string sf)	{	sstdfile = sf;	}
	public stdload()	{	this.load(sstdfile);	}
	public stdsave()	{	this.save(sstdfile); }
	public free()	{	dbsav.free();	}
	public _set(string sname, string svar)	{
		int id = dbsav.findbyrow(sname);
		if( id>=0 )	{
			dbsav.set(id,1,svar);
		} else {
			id = dbsav.addrow()-1;
			dbsav.add( id, sname );
			dbsav.add( id, svar );
		}
// 		this.stdsave();
	}
	public _bset(string sname)	{	this._set(sname,true);	}
	public string _get(string sname)	{
		int id = dbsav.findbyrow(sname);
		return id>=0?dbsav.get(id,1):null;
	}
	public bool _is(string sname, string svar)	{
		int i = dbsav.findbyrow(sname);
  		return i>=0?dbsav.get(i,1)==svar:false;
	}
	public bool _isnt(string sname, string svar)	{
		int i = dbsav.findbyrow(sname);
		return i>=0?dbsav.get(i,1)!=svar:false;
	}
	public bool _bis(string sname)	{	return this._is(sname,true);	}
	public gmset(string sgame, string sname, string svar)	{
		this._set( sgame+sname, svar );
	}
	public string gmget(string sgame, string sname)	{
		return this._get(sgame+sname);
	}
	public bool gmis(string sgame, string sname, string svar)	{
		return this._is(sgame+sname,svar);
	}
	public set(string sname, string svar)	{
		this._set( gameapi.getgamename()+sname, svar );
	}
	public string get(string sname)	{
		return this._get( gameapi.getgamename()+sname);
	}
	public bool is(string sname, string svar)	{
		return this._is(gameapi.getgamename()+sname,svar);
	}
	public bset(string sname)	{
		this._set( gameapi.getgamename()+sname, true );
	}
	public string bget(string sname)	{
		return this._is(gameapi.getgamename()+sname,true);
	}
	public bool bis(string sname)	{
		return this._is(gameapi.getgamename()+sname,true);
	}
	/*** dodane przez andrzeja ****/
	public string gbget(string sgame, string sname) {
	 	return this._get( sgame+sname );
	}
	public bool gbis(string sgame, string sname)	{
		return this._is(sgame+sname,true);
	}
}

