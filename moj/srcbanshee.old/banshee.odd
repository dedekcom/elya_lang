; Dominik Dagiel   ix 2005

	new db,dbconf
	push "configs/config.beh"
	call dbconf,loadscript
	push "enginedebug:"
	call dbconf,dbgetint
	call engine,setdebugstate
	new int,igmdebug
	push "igmdebug:"
	call dbconf,dbgetint
	pop igmdebug
	new int,igmpcdebug
	push "igmpcdebug:"
	call dbconf,dbgetint
	pop igmpcdebug
	new int,igmexportan
	push "igmexportan:"
	call dbconf,dbgetint
	pop igmexportan
	new int,igmimportan
	push "igmimportan:"
	call dbconf,dbgetint
	pop igmimportan
	new int,igmwinlocal
	push "igmwinlocal:"
	call dbconf,dbgetint
	pop igmwinlocal
	new int,igmmac
	push "igmmac:"
	call dbconf,dbgetint
	pop igmmac
	new int,igmipad
	push "igmipad:"
	call dbconf,dbgetint
	pop igmipad
	new int,igmiphone
	push "igmiphone:"
	call dbconf,dbgetint
	pop igmiphone
	new int,igmandroid
	push "igmandroid:"
	call dbconf,dbgetint
	pop igmandroid
	new string,sgmdeveloper
	push "sgmdeveloper:"
	call dbconf,dbget
	pop sgmdeveloper
	new string,sgmproject
	push "sgmproject:"
	call dbconf,dbget
	pop sgmproject
	push igmdebug
	cmp0
	je l2
	push igmipad
	cmp0
	jne l5
	push igmmac
	cmp0
	jne l5
	push igmiphone
	cmp0
	jne l5
	push igmandroid
	jmp l6
l4:
	push 0
	jmp l6
l5:
	push 1
l6:
	jmp l7
l2:
	push 0
	jmp l7
l3:
	push 1
l7:
	cmp0
	je l8
	push "getsavepath"
	push "global0"
	call engine,addmethod
l8:
	method global0
	push "saves/"
	end method
	method checktouchpad
	push igmipad
	cmp0
	jne l10
	push igmiphone
	cmp0
	jne l10
	push igmandroid
	jmp l11
l9:
	push 0
	jmp l11
l10:
	push 1
l11:
	cmp0
	je l12
	push igmpcdebug
	push 0
	cmpje
	jmp l14
l12:
	push 0
	jmp l14
l13:
	push 1
l14:
	end method
	new int,igmappw
	new int,igmapph
	call engine,getappsize
	pop igmapph
	pop igmappw
	new int,igmoffsetx
	new int,igmoffsety
	call engine,getscreenoffset
	pop igmoffsety
	pop igmoffsetx
	new int,iResX
	new int,iResY
	call engine,getscreensize
	pop iResY
	pop iResX
	new real,rgmscalex
	new real,rgmscaley
	call engine,getscreenscale
	pop rgmscaley
	pop rgmscalex
	method getappcenter
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method getwinpath
	localstring $1
	pop $1
	localstring $2
	push "appdata"
	call engine,getspecialpath
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l16
	push $2
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	jmp l15
l16:
	push $1
l15:
	end method
	method getsavepath
	push igmipad
	cmp0
	jne l19
	push igmmac
	jmp l20
l18:
	push 0
	jmp l20
l19:
	push 1
l20:
	cmp0
	je l21
	call engine,getsavepath
	jmp l17
l21:
	push igmwinlocal
	cmp0
	je l23
	push "saves/"
	cthis getwinpath
	jmp l22
l23:
	push "saves/"
l22:
l17:
	end method
	method buildsavedir
	push igmwinlocal
	cmp0
	je l25
	push igmipad
	neg
	cmp0
	je l25
	push igmmac
	neg
	jmp l27
l25:
	push 0
	jmp l27
l26:
	push 1
l27:
	cmp0
	je l28
	localstring $1
	push "appdata"
	call engine,getspecialpath
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l30
	push "/"
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	localint $2
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l33
	push $2
	push 1
	cmpje
	jmp l34
l32:
	push 0
	jmp l34
l33:
	push 1
l34:
	cmp0
	je l35
	push "/"
	push sgmproject
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l38
	push $2
	push 1
	cmpje
	jmp l39
l37:
	push 0
	jmp l39
l38:
	push 1
l39:
	cmp0
	je l40
	push "/saves"
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	popax
l40:
l35:
l30:
l28:
	end method
	cthis buildsavedir
	new string,A
	push "!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	new int,BYTE0
	push "0"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE0
	new int,BYTE9
	push "9"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE9
	new int,BYTEa
	push "a"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEa
	new int,BYTEz
	push "z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEz
	new int,BYTEA
	push "A"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEA
	new int,BYTEZ
	push "Z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEZ
	new int,BYTE_
	push "_"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE_
	new int,BYTESPACE
	push " "
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTESPACE
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l42
	push $1
	push $2
	cthis varnew
l42:
	end method
	method vardelif
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l44
	push $1
	cthis vardel
l44:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global1"
	cthis addmethod
	end method
	method global1
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global2"
	cthis addmethod
	end method
	method global2
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l45:
	push A
	push $2
	cmpjne
	cmp0
	je l46
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l45
l46:
	end method
	method withlist2
	localstring $1
	pop $1
	localdef $2
	pop $2
l47:
	push A
	push $2
	cmpjne
	cmp0
	je l48
	localdef $3
	pop $3
	push $1
	spushs
	push $3
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l47
l48:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method vars2
	push "var2"
	cthis withlist2
	end method
	method builder_func
	localstring $1
	pop $1
	cthis getbuildername
	spushs
	cthis getbuildername
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l50
	push $1
	push "null"
	cmpje
	cmp0
	je l52
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l51
l52:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l51:
l50:
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l53:
	push A
	push $3
	cmpjne
	cmp0
	je l54
	push $1
	neg
	cmp0
	je l56
	push $2
	push $3
	cmpje
	pop $1
l56:
	localdef $3
	pop $3
	jmp l53
l54:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l57:
	push $2
	push A
	cmpjne
	cmp0
	je l58
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l57
l58:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global3"
	cthis addmethod
	end method
	method global3
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l59:
	push $2
	push A
	cmpjne
	cmp0
	je l60
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l59
l60:
	end method
	method mresize
	cthis gettype
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	cthis getname
	spop $a
	 clparent [$a],resizemethods
	end method
	method times
	localstring $1
	pop $1
	push 0
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis for_plus
	end method
	method upto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_plus
	end method
	method downto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_minus
	end method
	method for_plus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l62
	ret
l62:
l63:
	push $1
	push $2
	cmpjle
	cmp0
	je l64
	jmp l66
l65:
	add $1,1
	pop $1
	jmp l63
l66:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l65
l64:
	end method
	method for_minus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l68
	ret
l68:
l69:
	push $1
	push $2
	cmpjae
	cmp0
	je l70
	jmp l72
l71:
	sub $1,1
	pop $1
	jmp l69
l72:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l71
l70:
	end method
	method double_for
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	push 0
	pop $5
l73:
	push $5
	push $1
	cmpjl
	cmp0
	je l74
	jmp l76
l75:
	add $5,1
	pop $5
	jmp l73
l76:
	push 0
	pop $4
l77:
	push $4
	push $2
	cmpjl
	cmp0
	je l78
	jmp l80
l79:
	add $4,1
	pop $4
	jmp l77
l80:
	push $3
	spushs
	push $5
	push $4
	spop $d
	cthis [$d]
	jmp l79
l78:
	jmp l75
l74:
	end method
	class classobjcounter
	method init
	localstring $1
	pop $1
	new string,_sprefix
	push $1
	pop _sprefix
	new int,_iile
	push 0
	pop _iile
	push "limit"
	push 0
	cthis var2
	end method
	method get
	push limit
	push 0
	cmpja
	cmp0
	je l82
	push _iile
	push limit
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop _iile
	jmp l81
l82:
	add _iile,1
	pop _iile
l81:
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	end method
	method getid
	localint $1
	pop $1
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	end method
	end class

	class classsignals
	method init
	end method
	method stdfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "classsignals0"
	spop $a
	call [$a],addmethod
	end method
	method classsignals0
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdstart
	localstring $1
	pop $1
	push $1
	spushs
	push "onstart"
	push "classsignals1"
	spop $a
	call [$a],addmethod
	end method
	method classsignals1
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdsigs
	localstring $1
	pop $1
	push $1
	cthis stdstart
	push $1
	cthis stdfinish
	end method
	method buildanima
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "onendframe"
	push "classsignals2"
	spop $a
	call [$a],addmethod
	end method
	method classsignals2
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildsnd
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	end method
	method buildtimer
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "ontick"
	push "classsignals3"
	spop $a
	call [$a],addmethod
	end method
	method classsignals3
	cthis getname
	push "_TICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildbut
	localstring $1
	pop $1
	push $1
	spushs
	push "onclick"
	push "classsignals4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onrel"
	push "classsignals5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveon"
	push "classsignals6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveoff"
	push "classsignals7"
	spop $a
	call [$a],addmethod
	end method
	method classsignals4
	cthis getname
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals5
	cthis getname
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals6
	cthis getname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals7
	cthis getname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	method unlocked
	push _block
	push 0
	cmpje
	end method
	method setaslocker
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlocker"
	push "classlocker0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlocker
	push $1
	spushs
	push "lock"
	push "lock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlock"
	push "unlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setlock"
	push "setlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getlock"
	push "getlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlocked"
	push "unlocked"
	spop $a
	call [$a],addmethod
	end method
	method classlocker0
	new int,_block
	push 1
	pop _block
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l83:
	push $2
	push $3
	cmpjl
	cmp0
	je l84
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l83
l84:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l86
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
l86:
	end method
	end module

	class collection
	method init
	localstring $1
	pop $1
	new string,stype
	push $1
	pop stype
	end method
	method type
	push stype
	ret
	end method
	end class

	class array
	parent collection
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	clparent collection,init
	new int,idim
	push $2
	pop idim
	new int,isize
	push $3
	pop isize
	new vector,vec
	push $1
	call vec,type
	push $2
	push 0
	cmpjle
	cmp0
	jne l89
	push $3
	push 0
	cmpjle
	jmp l90
l88:
	push 0
	jmp l90
l89:
	push 1
l90:
	cmp0
	je l91
	ret
l91:
	push $2
	call $3,pow
	push 0
	call vec,resize
	end method
	method getid
	localint $1
	push 0
	pop $1
	localint $2
	push idim
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l92:
	push $2
	push 0
	cmpja
	cmp0
	je l93
	popax
	add $1,$a
	pop $1
	push isize
	popax
	mul $1,$a
	pop $1
	sub $2,1
	pop $2
	jmp l92
l93:
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method get
	cthis getid
	call vec,get
	ret
	end method
	method set
	localdef $1
	pop $1
	cthis getid
	push $1
	call vec,set
	end method
	method getsize
	push isize
	ret
	end method
	method getdim
	push idim
	ret
	end method
	end class

	class stack
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vec
	push $1
	call vec,type
	push $1
	spushs
	spop $d
	new [$d],var
	end method
	method push
	localstring $1
	pop $1
	push $1
	call vec,add
	end method
	method top
	call vec,last
	ret
	end method
	method pop
	cthis top
	pop var
	call vec,size
	push 1
	pop $b
	popax
	sub $a,$b
	call vec,removeat
	push var
	ret
	end method
	method free
	call vec,free
	end method
	end class

	class map
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new int,isize
	push 0
	pop isize
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	neg
	cmp0
	je l95
	push $1
	cthis add
l95:
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],set
	end method
	method add
	localstring $1
	pop $1
	push stype
	spushs
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method get
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method remove
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method contains
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	ret
	end method
	end class

	class map2
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vn
	push "string"
	call vn,type
	new vector,vec
	push $1
	call vec,type
	end method
	method add
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,add
	push $2
	call vec,add
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,find
	push $2
	call vec,set
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call vn,contains
	ret
	end method
	method get
	localstring $1
	pop $1
	push $1
	call vn,find
	call vec,get
	ret
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call vn,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l97
	push $2
	call vec,removeat
	push $2
	call vn,removeat
l97:
	end method
	method free
	call vn,free
	call vec,free
	end method
	method print
	call vec,print
	call vn,print
	end method
	end class

	class classgamemusic
	parent classdbreader
	method init
	clparent classdbreader,init
	new string,smuspath
	push ""
	pop smuspath
	new string,sbgrpath
	push ""
	pop sbgrpath
	new snd,_sndbgr
	push "onfinish"
	push "_stdsndloop"
	call _sndbgr,addmethod
	end method
	method reset
	call engine,islocalmusic
	cmp0
	je l99
	call gameapi,stopmusic
l99:
	cthis stopbgr
	end method
	method _stdsndloop
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbl,loadscript
	end method
	method musicpath
	localstring $1
	pop $1
	push $1
	pop smuspath
	end method
	method sndbgrpath
	localstring $1
	pop $1
	push $1
	pop sbgrpath
	end method
	method _play
	localint $1
	pop $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	push 1
	pop $2
	push $1
	call dbl,getcolsno
	pop $3
l100:
	push $2
	push $3
	cmpjl
	cmp0
	je l101
	push $1
	push $2
	call dbl,get
	pop $5
	add $2,1
	pop $2
	push $5
	push "music"
	cmpje
	cmp0
	je l103
	push smuspath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	pop $6
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l105
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l107
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call gameapi,setmusicvol
	add $2,1
	pop $2
l107:
	jmp l104
l105:
	push 100
	call gameapi,setmusicvol
l104:
	push $6
	call gameapi,playmusic
	jmp l102
l103:
	push $5
	push "bgr"
	cmpje
	cmp0
	je l109
	push sbgrpath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	call _sndbgr,load
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l111
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l113
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call _sndbgr,setvol
	add $2,1
	pop $2
l113:
	jmp l110
l111:
	push 100
	call _sndbgr,setvol
l110:
	cthis playbgr
	jmp l108
l109:
	add $2,1
	pop $2
l108:
l102:
	jmp l100
l101:
	end method
	method play
	cthis reset
	call gameapi,getgamename
	push "_play"
	cthis readrow
	end method
	method playbgr
	call _sndbgr,play
	end method
	method stopbgr
	push 0
	call _sndbgr,stop
	end method
	end class

	class Music
	method init
	new vector,vmus
	push "string"
	call vmus,type
	new int,ilastid
	push A
	push "musicvolume"
	push 100
	push "smixer"
	push "gameapi"
	cthis vars2
	end method
	method playdb
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	call vmus,free
l114:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l115
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l114
l115:
	push 0
	pop ilastid
	cthis play
	end method
	method playvec
	localstring $1
	localint $2
	pop $2
	pop $1
	call vmus,free
l116:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l117
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	call vmus,add
	add $2,1
	pop $2
	jmp l116
l117:
	push 0
	pop ilastid
	cthis play
	end method
	method playstr
	localstring $1
	pop $1
	push $1
	push " "
	call vmus,vecbuildfromstring
	push 0
	pop ilastid
	cthis play
	end method
	method play
	push ilastid
	call vmus,size
	cmpjae
	cmp0
	je l119
	ret
l119:
	localstring $1
	push MUSICPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,fileexist
	neg
	cmp0
	je l121
	push SFXPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
l121:
	add ilastid,1
	pop ilastid
	localint $2
	push 0
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	push 0
	pop $4
	localint $5
	push musicvolume
	pop $5
	localint $6
	push ilastid
	pop $6
l122:
	push $6
	call vmus,size
	cmpjl
	cmp0
	je l123
	jmp l125
l124:
	add $6,1
	pop $6
	jmp l122
l125:
	localdef $7
	push $6
	call vmus,get
	pop $7
	push $7
	spushs
	push "-l"
	cmpst
	jne l127
	spop $a
	push 1
	pop $2
	jmp l126
l127:
	push "-v"
	cmpst
	jne l128
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $5
	push $5
	push musicvolume
	pop $b
	popax
	mul $a,$b
	push 100
	pop $b
	popax
	div $a,$b
	psax
	pop $5
	jmp l126
l128:
	push "-fin"
	cmpst
	jne l129
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $3
	jmp l126
l129:
	push "-fout"
	cmpst
	jne l130
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $4
	jmp l126
l130:
	push "-p"
	cmpst
	jne l131
	spop $a
	jmp l126
l131:
	spop $a
	push $6
	pop ilastid
	call vmus,size
	pop $6
l126:
	jmp l124
l123:
	push smixer
	spushs
	push $5
	spop $a
	call [$a],setmusicvol
	push $2
	cmp0
	je l133
	call vmus,size
	pop ilastid
	push smixer
	push "engine"
	cmpje
	cmp0
	je l135
	call engine,ismusicplaying
	cmp0
	je l135
	call engine,getactmusic
	push $1
	cmpje
	jmp l137
l135:
	push 0
	jmp l137
l136:
	push 1
l137:
	cmp0
	je l138
	jmp l134
l138:
	push smixer
	spushs
	push $1
	spop $a
	call [$a],playmusic
l134:
	ret
l133:
	push smixer
	spushs
	push $1
	spop $a
	call [$a],loadmusic
	push $3
	cmp0
	je l140
	push smixer
	spushs
	push $3
	spop $a
	call [$a],fadeinmusic
	jmp l139
l140:
	push smixer
	spushs
	spop $a
	call [$a],startmusic
l139:
	push $4
	cmp0
	je l142
	push smixer
	spushs
	push $4
	spop $a
	call [$a],fadeoutmusic
l142:
	end method
	method fadeout
	localint $1
	pop $1
	push smixer
	spushs
	spop $a
	call [$a],ismusicplaying
	cmp0
	je l144
	push smixer
	spushs
	push $1
	spop $a
	call [$a],fadeoutmusic
	call vmus,size
	pop ilastid
l144:
	end method
	method isplaying
	push smixer
	spushs
	spop $a
	call [$a],ismusicplaying
	end method
	method getactmusic
	call engine,getactmusic
	end method
	method stop
	push smixer
	spushs
	push 0
	spop $a
	call [$a],endmusic
	end method
	end class

	new int,igmstate
	new string,sgmstate
	new int,igmdemo
	push "igmdemo:"
	call dbconf,dbgetint
	pop igmdemo
	new int,igmbegin
	push 1
	pop igmbegin
	new int,igmsoundson
	push "igmsoundson:"
	call dbconf,dbgetint
	pop igmsoundson
	new string,sgmfontfile
	push "sgmfontfile:"
	call dbconf,dbget
	pop sgmfontfile
	new string,sgmfontmono
	push "sgmfontmono:"
	call dbconf,dbget
	pop sgmfontmono
	new string,sgmfontmonobold
	push "sgmfontmonobold:"
	call dbconf,dbget
	pop sgmfontmonobold
	new string,sgmfontbold
	push "sgmfontbold:"
	call dbconf,dbget
	pop sgmfontbold
	new string,sgmfontitalic
	push "sgmfontitalic:"
	call dbconf,dbget
	pop sgmfontitalic
	new string,SFXPATH
	push "sfxpath:"
	call dbconf,dbget
	pop SFXPATH
	new string,BGRPATH
	push "sndbgrpath:"
	call dbconf,dbget
	pop BGRPATH
	new string,MUSICPATH
	push "musicpath:"
	call dbconf,dbget
	pop MUSICPATH
	new string,LANG
	push "lang:"
	call dbconf,dbget
	pop LANG
	new string,LANGDIR
	push "lang/"
	push LANG
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop LANGDIR
	new string,SNDPATH
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l146
	push ""
	pop LANG
l146:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l148
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l148:
	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method _checkfont
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l150
	push sgmfontfile
	pop $1
l150:
	push ".ttf"
	call $1,contains
	cmp0
	je l152
	push $3
	spushs
	spop $e
	new font,[$e]
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	pop $1
l152:
	push $1
	end method
	method checkfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "_fnt"
	cthis _checkfont
	end method
	method begingame
	push igmbegin
	neg
	pop igmbegin
	push igmbegin
	neg
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpjle
	cmp0
	je l154
	ret
l154:
	sub $3,1
	pop $3
l155:
	push $3
	push 0
	cmpjae
	cmp0
	je l156
	push $1
	spushs
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l155
l156:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	ret
	end method
	method getsndpath
	push _sclwavpath
	ret
	end method
	method getpath
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l158
	push 1
	call $1,strsubb
	jmp l157
l158:
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
l157:
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new anima,[$e]
	localdef $4
	push $2
	cthis getpath
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],load
	push igmdebug
	cmp0
	je l160
	push igmexportan
	cmp0
	je l162
	push $1
	spushs
	push "debug/"
	push 0
	call $4,length
	push "/"
	call $4,strgeteto
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	sub $a,$b
	call $4,getb
	pop $b
	popax
	add $a,$b
	push "/"
	call $4,strgeteto
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],saveimages
	jmp l161
l162:
	push igmimportan
	cmp0
	je l164
	push "debug/"
	push ".pyz"
	call $4,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push "0.png"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l166
	push $1
	spushs
	push $4
	spop $a
	call [$a],loadimages
l166:
l164:
l161:
l160:
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	spushs
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l168
	ret
l168:
	localint $5
	push 0
	pop $5
l169:
	push $5
	push $4
	cmpjl
	cmp0
	je l170
	jmp l172
l171:
	add $5,1
	pop $5
	jmp l169
l172:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l171
l170:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l174
	ret
l174:
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	spushs
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l175:
	push $6
	push $5
	cmpjl
	cmp0
	je l176
	jmp l178
l177:
	add $6,1
	pop $6
	jmp l175
l178:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	cmpjne
	cmp0
	je l180
	push $4
	spushs
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l180:
	jmp l177
l176:
	push $5
	ret
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	ret
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	spushs
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new img,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	push MUSICPATH
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method newsndfree
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method snewsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	end method
	method _newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push "."
	call $2,contains
	neg
	cmp0
	je l182
	push ".wav"
	popax
	add $2,$a
	pop $2
l182:
	push $2
	call engine,fileexist
	neg
	cmp0
	je l184
	push "wav"
	call $2,strsubes
	push "ogg"
	pop $b
	popax
	add $a,$b
	pop $2
l184:
	push $1
	spushs
	push $2
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l186
	push $1
	push $2
	call subtitle,register
l186:
	end method
	method newsfx
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push SFXPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push BGRPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgrloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newbgr
	push $1
	cthis sndplayloop
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l187:
	push $8
	push $7
	cmpjl
	cmp0
	je l188
	jmp l190
l189:
	add $8,1
	pop $8
	jmp l187
l190:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new snd,[$e]
	push $6
	spushs
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l189
l188:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],setcycle
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	cmp0
	je l192
	push $1
	cthis looponfinish
	jmp l191
l192:
	push "H"
	call $2,contains
	cmp0
	je l194
	push $1
	cthis hideonfinish
l194:
l191:
	push "P"
	call $2,contains
	cmp0
	je l196
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l196:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l197:
	push $6
	push $4
	cmpjl
	cmp0
	je l198
	jmp l200
l199:
	add $6,1
	pop $6
	jmp l197
l200:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	cmpjne
	cmp0
	je l202
	push $3
	spushs
	push $5
	spop $a
	call [$a],add
l202:
	jmp l199
l198:
	push $4
	ret
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	ret
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	push 0
	pop $5
l203:
	push $5
	push $4
	cmpjl
	cmp0
	je l204
	jmp l206
l205:
	add $5,1
	pop $5
	jmp l203
l206:
	push $1
	push $2
	push $5
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	push $3
	cthis newanframesgr
	popax
	jmp l205
l204:
	push $4
	ret
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	ret
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	spushs
	spop $a
	call [$a],hide
	push $6
	ret
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],loadscritp
	end method
	method vargmset
	localstring $1
	localdef $2
	pop $2
	pop $1
	localstring $3
	call gameapi,getgamename
	pop $3
	push $3
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l208
	push $3
	spushs
	call $2,gettype
	push $1
	spop $a
	call [$a],varnew
l208:
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	end class

	module advmouse
	method init
	new anima,anmsc
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	push "onendframe"
	push "setnextframe"
	call anmsc,addmethod
	push "onsetframe"
	push "advmouse0"
	call anmsc,addmethod
	call anmsc,hide
	end method
	method advmouse0
	cthis hide
	end method
	method setnextframe
	call anmsc,ansetnextfr
	push "anmsc"
	call mouse,setcursor
	end method
	method set
	localstring $1
	pop $1
	push $1
	call anmsc,isplaying
	neg
	cmp0
	je l210
	push $1
	call anmsc,play
l210:
	push "anmsc"
	call mouse,setcursor
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setact
	push "active"
	cthis set
	end method
	method setbut
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	ret
	end method
	method lodx
	call anmsc,lodx
	end method
	method lody
	call anmsc,lody
	end method
	end module

	push igmdebug
	neg
	cmp0
	je l212
	cthis checktouchpad
	jmp l214
l212:
	push 0
	jmp l214
l213:
	push 1
l214:
	cmp0
	je l215
	push "scripts/common/kursorypad.pyz"
	call advmouse,load
	jmp l211
l215:
	push "scripts/common/cursors.pyz"
	call advmouse,load
l211:
	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l216
	push $1
	push $5
	cmpjle
	cmp0
	je l216
	push $2
	push $4
	cmpjae
	cmp0
	je l216
	push $2
	push $6
	cmpjle
	jmp l218
l216:
	push 0
	jmp l218
l217:
	push 1
l218:
	end method
	method isin2
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l219
	push $1
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l219
	push $2
	push $4
	cmpjae
	cmp0
	je l219
	push $2
	push $4
	push $6
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l221
l219:
	push 0
	jmp l221
l220:
	push 1
l221:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	end method
	method insurf
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $3
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis isin
	end method
	method issurfin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l223
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l223
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l223
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l223
	push $1
	push $5
	cmpjl
	cmp0
	je l224
	push $3
	push $7
	cmpja
	cmp0
	je l224
	push $2
	push $6
	cmpjl
	cmp0
	je l224
	push $4
	push $8
	cmpja
	jmp l226
l224:
	push 0
	jmp l226
l225:
	push 1
l226:
	jmp l227
l222:
	push 0
	jmp l227
l223:
	push 1
l227:
	end method
	method commonsurface
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis issurfin
	cmp0
	jne l229
	push $5
	push $6
	push $7
	push $8
	push $1
	push $2
	push $3
	push $4
	cthis issurfin
	jmp l230
l228:
	push 0
	jmp l230
l229:
	push 1
l230:
	end method
	method commonimgs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis commonsurface
	end method
	method surfwithinsurf
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l231
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l231
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l231
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l233
l231:
	push 0
	jmp l233
l232:
	push 1
l233:
	end method
	method imgwithinimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis surfwithinsurf
	end method
	end module

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	ret
	end method
	method ileny
	push ily
	ret
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	ret
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen5
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis ilen
	ret
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	ret
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	ret
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	ret
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	cmpjae
	cmp0
	je l234
	push ilx
	push $6
	cmpjle
	cmp0
	je l234
	push ily
	push $5
	cmpjae
	cmp0
	je l234
	push ily
	push $7
	cmpjle
	jmp l236
l234:
	push 0
	jmp l236
l235:
	push 1
l236:
	ret
	end method
	method ilodlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],lody
	push $2
	spushs
	spop $a
	call [$a],lodx
	push $2
	spushs
	spop $a
	call [$a],lody
	cthis ilen
	end method
	method iposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpos
	push $2
	spushs
	spop $a
	call [$a],getpos
	cthis ilen
	end method
	end module

	class classansearcher
	method init
	end method
	method _findnotr
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $6
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $7
l237:
	push $2
	push $6
	cmpjne
	cmp0
	je l238
	push $3
	push $7
	cmpjne
	jmp l240
l238:
	push 0
	jmp l240
l239:
	push 1
l240:
	cmp0
	je l241
	push $1
	spushs
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l243
	push $2
	push $3
	ret
l243:
	push $4
	popax
	add $2,$a
	pop $2
	push $5
	popax
	add $3,$a
	pop $3
	jmp l237
l241:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method firstnotrx1y
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	method firstnotrexy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrxy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrx1ey
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	end class

	class signal_pack
	method init
	end method
	method addsignals
	localstring $1
	pop $1
	push $1
	spushs
	push "operator<"
	push "signal_pack0"
	spop $a
	call [$a],addmethod
	end method
	method signal_pack0
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	end method
	end class

	class ImagePos
	method init
	end method
	method getex
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	end class

	class ImageVisible
	method init
	new int,_isvisible
	push 1
	pop _isvisible
	end method
	method isvisible
	push _isvisible
	end method
	method show
	push 1
	pop _isvisible
	end method
	method hide
	push 0
	pop _isvisible
	end method
	end class

	class Image
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push A
	push "getz"
	push 0
	push "getpx"
	push 0
	push "getpy"
	push 0
	push "getw"
	push 0
	push "geth"
	push 0
	push "isvisible"
	push 0
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "show"
	push "Image0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "hide"
	push "Image1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setz"
	push "Image2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpos"
	push "Image3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "move"
	push "Image4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getex"
	push "Image5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getey"
	push "Image6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcx"
	push "Image7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcy"
	push "Image8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isin"
	push "Image9"
	spop $a
	call [$a],addmethod
	end method
	method Image0
	push 1
	pop isvisible
	end method
	method Image1
	push 0
	pop isvisible
	end method
	method Image2
	localint $1
	pop $1
	push $1
	pop getz
	end method
	method Image3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop getpx
	push $2
	pop getpy
	end method
	method Image4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add getpx,$a
	pop getpx
	push $2
	popax
	add getpy,$a
	pop getpy
	end method
	method Image5
	push getpx
	push getw
	pop $b
	popax
	add $a,$b
	end method
	method Image6
	push getpy
	push geth
	pop $b
	popax
	add $a,$b
	end method
	method Image7
	push getpx
	push getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image8
	push getpy
	push geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image9
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	neg
	cmp0
	je l245
	push $3
	neg
	cmp0
	jne l248
	push $3
	cmp0
	je l249
	push isvisible
	jmp l251
l249:
	push 0
	jmp l251
l250:
	push 1
l251:
	jmp l252
l247:
	push 0
	jmp l252
l248:
	push 1
l252:
	cmp0
	je l253
	push $1
	push getpx
	cmpjae
	cmp0
	je l254
	push $1
	cthis getex
	cmpjl
	cmp0
	je l254
	push $2
	push getpy
	cmpjae
	cmp0
	je l254
	push $2
	cthis getey
	cmpjl
	jmp l256
l254:
	push 0
	jmp l256
l255:
	push 1
l256:
	jmp l246
l253:
	push 0
l246:
	jmp l244
l245:
	push 0
l244:
	end method
	end class

	class anima_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "_clanbuildpomvars"
	push "anima_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_clanbuildpomvars
	push $1
	spushs
	push "setbpos"
	push "anima_pack1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "saverelpos"
	push "anima_pack2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrelpos"
	push "anima_pack3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssaverelpos"
	push "anima_pack4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssetrelpos"
	push "anima_pack5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rplay"
	push "anima_pack6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setcpos"
	push "anima_pack7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator="
	push "anima_pack8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator=="
	push "anima_pack9"
	spop $a
	call [$a],addmethod
	push $1
	cthis addsignals
	end method
	method anima_pack0
	new int,_ixp
	new int,_iyp
	end method
	method anima_pack1
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anima_pack2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method anima_pack3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack4
	call mouse,getpos
	cthis saverelpos
	end method
	method anima_pack5
	call mouse,getpos
	cthis setrelpos
	end method
	method anima_pack6
	localstring $1
	pop $1
	push $1
	cthis isplaying
	neg
	cmp0
	je l258
	push $1
	cthis play
l258:
	end method
	method anima_pack7
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack8
	localstring $1
	pop $1
	push $1
	cthis copy
	end method
	method anima_pack9
	localstring $1
	pop $1
	cthis actionnr
	push $1
	spushs
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l259
	cthis framenr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l261
l259:
	push 0
	jmp l261
l260:
	push 1
l261:
	end method
	end class

	class timer_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	cthis addsignals
	end method
	end class

	class vector_pack
	method init
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l262:
	push $2
	cthis size
	cmpjl
	cmp0
	je l263
	jmp l265
l264:
	add $2,1
	pop $2
	jmp l262
l265:
	push $1
	spushs
	push $2
	cthis get
	spop $d
	cthis [$d]
	jmp l264
l263:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "each"
	push "each"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator-"
	push "vector_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator+"
	push "vector_pack1"
	spop $a
	call [$a],addmethod
	end method
	method vector_pack0
	localdef $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method vector_pack1
	localdef $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	end class

	method new_object
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $1
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	 clparent [$a],resizemethods
	end method
	method new_anima
	localstring $1
	pop $1
	push "anima"
	push $1
	cthis new_object
	end method
	method new_vector
	localstring $1
	pop $1
	push "vector"
	push $1
	cthis new_object
	end method
	class classanfilter
	method init
	end method
	method buildanfilter
	new filter,ft
	cthis getname
	call ft,link
	push 1
	call ft,setpivottype
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "buildanfilter"
	push "buildanfilter"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildanfilter
	push $1
	spushs
	push "setopacity"
	push "classanfilter0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setzoom"
	push "classanfilter1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setangle"
	push "classanfilter2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getangle"
	push "classanfilter3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rotate"
	push "classanfilter4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpivottype"
	push "classanfilter5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlink"
	push "classanfilter6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "link"
	push "classanfilter7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "blend"
	push "classanfilter8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mask"
	push "classanfilter9"
	spop $a
	call [$a],addmethod
	end method
	method classanfilter0
	localint $1
	pop $1
	push $1
	call ft,setopacity
	end method
	method classanfilter1
	localreal $1
	pop $1
	push $1
	call ft,setzoom
	end method
	method classanfilter2
	localreal $1
	pop $1
	push $1
	call ft,setangle
	end method
	method classanfilter3
	call ft,getangle
	ret
	end method
	method classanfilter4
	localreal $1
	pop $1
	push $1
	call ft,rotate
	end method
	method classanfilter5
	localint $1
	pop $1
	push $1
	call ft,setpivottype
	end method
	method classanfilter6
	call ft,unlink
	end method
	method classanfilter7
	cthis getname
	call ft,link
	end method
	method classanfilter8
	localstring $1
	pop $1
	push $1
	call ft,blend
	end method
	method classanfilter9
	localstring $1
	pop $1
	push $1
	call ft,mask
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l266:
	push $1
	push iile
	cmpjl
	cmp0
	je l267
	jmp l269
l268:
	add $1,1
	pop $1
	jmp l266
l269:
	push $1
	call _vs,get
	neg
	cmp0
	je l271
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
l271:
	jmp l268
l267:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _san
	call $1,strsubbs
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	method allfree
	call _vs,vecsum
	push 0
	cmpje
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l273
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l275
	spop $a
	push $1
	cthis copy
	jmp l274
l275:
	push "gmobjvec"
	cmpst
	jne l276
	spop $a
	push $1
	cthis copy
	jmp l274
l276:
	push "gmimgvec"
	cmpst
	jne l277
	spop $a
	push $1
	cthis copy
	jmp l274
l277:
	spop $a
	cthis free
	push $1
	cthis add
l274:
	jmp l272
l273:
	cthis free
	push $1
	cthis add
l272:
	end method
	method save
	localstring $1
	pop $1
	push $1
	call lsim,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call lsim,load
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method removegr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l278:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l279
	jmp l281
l280:
	add $2,1
	pop $2
	jmp l278
l281:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis remove
	jmp l280
l279:
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l282:
	push $2
	cthis size
	cmpjl
	cmp0
	je l283
	jmp l285
l284:
	add $2,1
	pop $2
	jmp l282
l285:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l284
l283:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l286:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l287
	jmp l289
l288:
	add $2,1
	pop $2
	jmp l286
l289:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l288
l287:
	end method
	method addgroups
	push "addgr"
	cthis withlist
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	end method
	method empty
	cthis size
	push 0
	cmpje
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	end method
	method print
	push ""
	call engine,print
	push "------ type("
	cthis gettype
	pop $b
	popax
	add $a,$b
	push ") "
	pop $b
	popax
	add $a,$b
	cthis getname
	pop $b
	popax
	add $a,$b
	push " ------"
	pop $b
	popax
	add $a,$b
	call engine,print
	call lsim,print
	push "------ end ------"
	call engine,print
	push ""
	call engine,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	end method
	method set
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,set
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method additer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l290:
	push $3
	push 0
	cmpja
	cmp0
	je l291
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	sub $3,1
	pop $3
	jmp l290
l291:
	end method
	method buildarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newarray
	push $2
	push 0
	push $3
	cthis additer
	end method
	method deleteall
	localint $1
	push 0
	pop $1
l292:
	push $1
	cthis size
	cmpjl
	cmp0
	je l293
	jmp l295
l294:
	add $1,1
	pop $1
	jmp l292
l295:
	push $1
	cthis get
	spushs
	spop $d
	delete [$d]
	jmp l294
l293:
	end method
	method deleteallgm
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l296:
	push $2
	cthis size
	cmpjl
	cmp0
	je l297
	jmp l299
l298:
	add $2,1
	pop $2
	jmp l296
l299:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],vardel
	jmp l298
l297:
	end method
	method deleteallgmobj
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l300:
	push $2
	cthis size
	cmpjl
	cmp0
	je l301
	jmp l303
l302:
	add $2,1
	pop $2
	jmp l300
l303:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],deletegmobj
	jmp l302
l301:
	end method
	method lockall
	push "lock"
	cthis eval
	end method
	method unlockall
	push "unlock"
	cthis eval
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l305
	push $1
	call lsim,add
l305:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l306:
	push $2
	push $1
	cmpjne
	cmp0
	je l307
	push $2
	cthis addbegin
	pop $2
	jmp l306
l307:
	end method
	method addlist
	push A
	cthis sepadd
	end method
	method removelist
	push "remove"
	cthis withlist
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l309
	push $1
	cthis addbegin
	jmp l308
l309:
	push $2
	push $3
	cmpjae
	cmp0
	je l311
	push $1
	cthis add
	jmp l310
l311:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l312:
	push $4
	push $2
	cmpja
	cmp0
	je l313
	jmp l315
l314:
	sub $4,1
	pop $4
	jmp l312
l315:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l314
l313:
	push $2
	push $1
	cthis set
l310:
l308:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removefirst
	push 0
	call lsim,removeat
	end method
	method removelast
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l316:
	push $1
	cthis contains
	cmp0
	je l317
	push $1
	cthis remove
	jmp l316
l317:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l318:
	push $2
	cthis size
	cmpjl
	cmp0
	je l319
	jmp l321
l320:
	add $2,1
	pop $2
	jmp l318
l321:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l323
	push $2
	cthis removeat
l323:
	jmp l320
l319:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l324:
	push $2
	push $3
	cmpjle
	cmp0
	je l325
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l324
l325:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l327
	call $1,rand
	cthis get
	jmp l326
l327:
	push "null"
l326:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l329
	localint $3
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l330:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l331
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l333
	push "null"
	ret
l333:
	jmp l330
l331:
	push $3
	cthis get
	ret
l329:
	push "null"
	end method
	method buildfullvars
	push "gmobjvec0"
	cthis each
	end method
	method gmobjvec0
	localdef $1
	pop $1
	cthis buildfullname
	end method
	method buildvars
	push "gmobjvec1"
	cthis each
	end method
	method gmobjvec1
	localdef $1
	pop $1
	cthis getname
	cthis addtogamevars
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l335
l336:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l337
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l336
l337:
l335:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method isplaying
	localint $1
	push 0
	pop $1
l338:
	push $1
	cthis size
	cmpjl
	cmp0
	je l339
	jmp l341
l340:
	add $1,1
	pop $1
	jmp l338
l341:
	push $1
	cthis get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],isplaying
	cmp0
	je l343
	push 1
	ret
l343:
	jmp l340
l339:
	push 0
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l344:
	push $5
	push 0
	cmpjae
	cmp0
	je l345
	jmp l347
l346:
	sub $5,1
	pop $5
	jmp l344
l347:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l349
	push $5
	call lsim,get
	ret
l349:
	jmp l346
l345:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l350:
	push $5
	push 0
	cmpjae
	cmp0
	je l351
	jmp l353
l352:
	sub $5,1
	pop $5
	jmp l350
l353:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l355
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l355:
	jmp l352
l351:
	push 0
	ret
	end method
	method setframe
	localdef $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l356:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l357
	jmp l359
l358:
	add $2,1
	pop $2
	jmp l356
l359:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l358
l357:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l360:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l361
	jmp l363
l362:
	add $3,1
	pop $3
	jmp l360
l363:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l362
l361:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l364:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l365
	jmp l367
l366:
	add $4,1
	pop $4
	jmp l364
l367:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l366
l365:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l368:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l369
	jmp l371
l370:
	add $5,1
	pop $5
	jmp l368
l371:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l370
l369:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l372:
	push $3
	cthis size
	cmpjl
	cmp0
	je l373
	jmp l375
l374:
	add $3,1
	pop $3
	jmp l372
l375:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l377
	push $3
	ret
l377:
	jmp l374
l373:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l378:
	push $3
	cthis size
	cmpjl
	cmp0
	je l379
	jmp l381
l380:
	add $3,1
	pop $3
	jmp l378
l381:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l383
	push $3
	ret
l383:
	jmp l380
l379:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l384:
	push $2
	cthis size
	cmpjl
	cmp0
	je l385
	jmp l387
l386:
	add $2,1
	pop $2
	jmp l384
l387:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l386
l385:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l388:
	push $3
	cthis size
	cmpjl
	cmp0
	je l389
	jmp l391
l390:
	add $3,1
	pop $3
	jmp l388
l391:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l390
l389:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l392:
	push $4
	cthis size
	cmpjl
	cmp0
	je l393
	jmp l395
l394:
	add $4,1
	pop $4
	jmp l392
l395:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l394
l393:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l396:
	push $2
	cthis size
	cmpjl
	cmp0
	je l397
	jmp l399
l398:
	add $2,1
	pop $2
	jmp l396
l399:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l401
	push 0
	ret
l401:
	jmp l398
l397:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l403
	ret
l403:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l404:
	push $6
	cthis size
	cmpjl
	cmp0
	je l405
	jmp l407
l406:
	add $6,1
	pop $6
	jmp l404
l407:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l409
	push $6
	pop $3
	push $5
	pop $4
l409:
	jmp l406
l405:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l411
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l412
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l414
l412:
	push 0
	jmp l414
l413:
	push 1
l414:
	jmp l415
l410:
	push 0
	jmp l415
l411:
	push 1
l415:
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	new string,sanload
	push "null"
	pop sanload
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	end method
	method getposy
	push _iy
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	end method
	method getpy
	push _iy
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getz
	push _iz
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l417
	push _ix
	ret
l417:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l418:
	push $4
	push $1
	cmpjl
	cmp0
	je l419
	jmp l421
l420:
	add $4,1
	pop $4
	jmp l418
l421:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l423
	push $3
	pop $2
l423:
	jmp l420
l419:
	push $2
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l425
	push _iy
	ret
l425:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l426:
	push $4
	push $1
	cmpjl
	cmp0
	je l427
	jmp l429
l428:
	add $4,1
	pop $4
	jmp l426
l429:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l431
	push $3
	pop $2
l431:
	jmp l428
l427:
	push $2
	end method
	method _getpx
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l433
	push _ix
	ret
l433:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l434:
	push $4
	push $1
	cmpjl
	cmp0
	je l435
	jmp l437
l436:
	add $4,1
	pop $4
	jmp l434
l437:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l439
	push $3
	pop $2
l439:
	jmp l436
l435:
	push $2
	end method
	method _getpy
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l441
	push _iy
	ret
l441:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l442:
	push $4
	push $1
	cmpjl
	cmp0
	je l443
	jmp l445
l444:
	add $4,1
	pop $4
	jmp l442
l445:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l447
	push $3
	pop $2
l447:
	jmp l444
l443:
	push $2
	end method
	method _getw
	cthis getex
	cthis _getpx
	pop $b
	popax
	sub $a,$b
	end method
	method _geth
	cthis getey
	cthis _getpy
	pop $b
	popax
	sub $a,$b
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l449
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l449:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l450:
	push $3
	cthis size
	cmpjl
	cmp0
	je l451
	jmp l453
l452:
	add $3,1
	pop $3
	jmp l450
l453:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l452
l451:
	end method
	method nplay
	localint $1
	pop $1
	push "play"
	push $1
	cthis eval1
	end method
	method txtreset
	localint $1
	push 0
	pop $1
l454:
	push $1
	cthis size
	cmpjl
	cmp0
	je l455
	jmp l457
l456:
	add $1,1
	pop $1
	jmp l454
l457:
	push $1
	cthis get
	spushs
	push ""
	spop $a
	call [$a],txtset
	jmp l456
l455:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l458:
	push $5
	push 0
	cmpjae
	cmp0
	je l459
	jmp l461
l460:
	sub $5,1
	pop $5
	jmp l458
l461:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l463
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l463:
	jmp l460
l459:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method isinfunc
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l464:
	push $4
	push 0
	cmpjae
	cmp0
	je l465
	jmp l467
l466:
	sub $4,1
	pop $4
	jmp l464
l467:
	push $4
	call lsim,get
	spushs
	push $3
	spushs
	push $1
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l469
	push $4
	pop _ifound
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	ret
l469:
	jmp l466
l465:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method isincut
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l470:
	push $5
	push 0
	cmpjae
	cmp0
	je l471
	jmp l473
l472:
	sub $5,1
	pop $5
	jmp l470
l473:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],withincut
	cmp0
	je l475
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l477
l475:
	push 0
	jmp l477
l476:
	push 1
l477:
	cmp0
	je l478
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l478:
	jmp l472
l471:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method withincut
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push $1
	push "gmimgvec0"
	cthis ineach
	pop $1
	pop $2
	end method
	method gmimgvec0
	localdef $1
	pop $1
	localint $2
	pop $2
	localint $3
	pop $3
	push $2
	push $3
	cthis withincut
	push $3
	push $2
	end method
	method findif
	localstring $1
	pop $1
	push $1
	push 1
	cthis _find
	end method
	method getfound
	push _ifound
	end method
	method getsfound
	push _ifound
	cthis get
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findsfr
	localstring $1
	pop $1
	push "framename"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "anactnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec1"
	cthis find_closest
	end method
	method gmimgvec1
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method getsac
	localstring $1
	pop $1
	push $1
	cthis findsac
	cthis get
	end method
	method getsacfr
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l479:
	push $3
	cthis size
	cmpjl
	cmp0
	je l480
	jmp l482
l481:
	add $3,1
	pop $3
	jmp l479
l482:
	push $3
	cthis get
	spushs
	spop $a
	call [$a],actionname
	push $1
	cmpje
	cmp0
	je l484
	push $3
	cthis get
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpje
	jmp l486
l484:
	push 0
	jmp l486
l485:
	push 1
l486:
	cmp0
	je l487
	push $3
	cthis get
	ret
l487:
	jmp l481
l480:
	push "null"
	end method
	method blitto
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l488:
	push $2
	cthis size
	cmpjl
	cmp0
	je l489
	jmp l491
l490:
	add $2,1
	pop $2
	jmp l488
l491:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],blit
	jmp l490
l489:
	end method
	method sortz
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l492:
	push $2
	cthis size
	cmpjl
	cmp0
	je l493
	jmp l495
l494:
	add $2,1
	pop $2
	jmp l492
l495:
	push $2
	cthis get
	spushs
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	jmp l494
l493:
	end method
	method ancopies
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l496:
	push $3
	push $2
	cmpjl
	cmp0
	je l497
	jmp l499
l498:
	add $3,1
	pop $3
	jmp l496
l499:
	push GAME
	spushs
	push $1
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],copyanima
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l498
l497:
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method addsrcanima
	localstring $1
	pop $1
	push "srcanima"
	push $1
	cthis var2
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l501
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l503
	new vector,_vtmp
	push "string"
	call _vtmp,type
	push $1
	push "/"
	call _vtmp,vecbuildfromstring
	push "an"
	call _vtmp,last
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	delete _vtmp
	jmp l502
l503:
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
l502:
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l500
l501:
	push $1
	pop $3
l500:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l505
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l504
l505:
	push $1
	pop $3
l504:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method deleteloaded
	cthis deleteallgm
	push sanload
	push "null"
	cmpjne
	cmp0
	je l507
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l507:
	end method
	method deleteinit
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l508:
	push $2
	cthis size
	cmpjl
	cmp0
	je l509
	jmp l511
l510:
	add $2,1
	pop $2
	jmp l508
l511:
	localdef $3
	push $2
	cthis get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],gettype
	push "gmimgvec"
	cmpje
	cmp0
	je l513
	push $3
	spushs
	spop $a
	call [$a],deleteinit
l513:
	push $1
	spushs
	push $3
	spop $a
	call [$a],vardel
	jmp l510
l509:
	push sanload
	push "null"
	cmpjne
	cmp0
	je l515
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l515:
	end method
	end class

	class gmadvvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l516:
	push $5
	push 0
	cmpjae
	cmp0
	je l517
	jmp l519
l518:
	sub $5,1
	pop $5
	jmp l516
l519:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],butisin
	cmp0
	je l521
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l521:
	jmp l518
l517:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	end class

	class gmmaskvec
	parent gmadvvec
	method init
	clparent gmadvvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,butisin
	end method
	end class

	class Subtitle
	method init
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $5
	push 0.5
	pop $5
	localint $6
	localint $7
	localint $8
	push 255
	pop $6
	push 255
	pop $7
	push 255
	pop $8
	localstring $9
	push SNDPATH
	pop $9
	new string,ssubpos
	push "sgmsubtitlespos:"
	call dbconf,dbget
	pop ssubpos
	push ssubpos
	push "null"
	cmpje
	cmp0
	je l523
	push "down"
	pop ssubpos
l523:
	localdef $10
	push "sgmsubtitlespos:"
	push 2
	call dbconf,dbgets
	pop $10
	new int,isubpos
	push $10
	push "null"
	cmpjne
	cmp0
	je l525
	push $10
	jmp l524
l525:
	push 15
l524:
	pop isubpos
	new int,bshadow
	push "igmsubshadow:"
	call dbconf,dbgetint
	pop bshadow
	new int,bblackbg
	push "igmsubblackbg:"
	call dbconf,dbgetint
	pop bblackbg
	new int,iborx
	push $4
	pop iborx
	new font,fnt
	push $2
	push $3
	call fnt,load
	new int,ifontsize
	push $3
	pop ifontsize
	new db,dbl
	push LANGDIR
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,load
	localstring $10
	localstring $11
	new vector,v1
	push "string"
	call v1,type
	localint $12
	push iResX
	push 2
	push $4
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $5
	push $3
	pop $b
	popax
	mul $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop $12
	localint $13
	localint $14
	localint $15
	push 0
	pop $15
	localint $16
	push 0
	pop $16
l526:
	push $16
	call dbl,getrowsno
	cmpjl
	cmp0
	je l527
	jmp l529
l528:
	add $16,1
	pop $16
	jmp l526
l529:
	push $9
	push $16
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	call engine,fileexist
	neg
	cmp0
	je l531
	push $9
	push $16
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".ogg"
	pop $b
	popax
	add $a,$b
	pop $10
l531:
	push $16
	push 0
	push $10
	call dbl,set
	push $16
	push 1
	call dbl,get
	pop $10
	push $10
	push " "
	call v1,vecbuildfromstring
	push ""
	pop $11
	push 1
	pop $13
	push 0
	pop $14
l532:
	push $14
	call v1,size
	cmpjl
	cmp0
	je l533
	jmp l535
l534:
	add $14,1
	pop $14
	jmp l532
l535:
	call $11,length
	push $14
	call v1,get
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	push $12
	cmpjle
	cmp0
	je l537
	push " "
	push $14
	call v1,get
	pop $b
	popax
	add $a,$b
	popax
	add $11,$a
	pop $11
	jmp l536
l537:
	push $13
	push 1
	cmpje
	cmp0
	je l539
	push $16
	push $13
	push $11
	call dbl,set
	jmp l538
l539:
	push $16
	push $11
	call dbl,add
l538:
	push $14
	call v1,get
	pop $11
	add $13,1
	pop $13
l536:
	jmp l534
l533:
	push $13
	push 1
	cmpje
	cmp0
	je l541
	push $16
	push $13
	push $11
	call dbl,set
	jmp l540
l541:
	push $16
	push $11
	call dbl,add
l540:
	push $13
	push $15
	cmpja
	cmp0
	je l543
	push $13
	pop $15
l543:
	jmp l528
l527:
	new gmimgvec,grtxt
	new gmimgvec,grtxts
	localint $16
	push 0
	pop $16
l544:
	push $16
	push $15
	cmpjl
	cmp0
	je l545
	jmp l547
l546:
	add $16,1
	pop $16
	jmp l544
l547:
	push "txt"
	push $16
	pop $b
	popax
	add $a,$b
	pop $10
	push bshadow
	cmp0
	je l549
	push "txts"
	push $16
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	push ""
	push "fnt"
	cthis black
	clparent classgame,newtext
	push $11
	call grtxts,add
	jmp l548
l549:
	push bblackbg
	cmp0
	je l551
	push "imgs"
	push $16
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	spushs
	spop $e
	new img,[$e]
	push $11
	call grtxts,add
l551:
l548:
	push $10
	push ""
	push "fnt"
	push $6
	push $7
	push $8
	clparent classgame,newtext
	push $10
	call grtxt,add
	jmp l546
l545:
	new db,dbsnd
	new timer,timtxt
	push 1
	call timtxt,settick
	push 1
	call timtxt,setcycle
	push "onfinish"
	push "Subtitle0"
	call timtxt,addmethod
	push 12000
	cthis setz
	end method
	method Subtitle0
	cthis cisplaying
	neg
	cmp0
	je l553
	cthis hidesubs
	jmp l552
l553:
	cthis play
l552:
	end method
	method reset
	cthis stop
	call dbsnd,free
	end method
	method hidesubs
	call grtxt,hide
	call grtxts,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	call grtxt,setz
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxts,setz
	end method
	method stop
	cthis hidesubs
	push 0
	call timtxt,stop
	end method
	method register
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push $2
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l555
	localdef $4
	push $1
	call dbsnd,findbyrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l557
	push $4
	push 1
	push $3
	call dbsnd,set
	jmp l556
l557:
	localdef $4
	call dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	call dbsnd,add
	push $4
	push $3
	call dbsnd,add
l556:
l555:
	end method
	method getiddialog
	localstring $1
	pop $1
	push $1
	call dbsnd,findbyrow
	end method
	method play
	localstring $1
	pop $1
	cthis stop
	localdef $2
	push $1
	call dbsnd,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l559
	localint $3
	push 0
	pop $3
	push $2
	push 1
	call dbsnd,get
	pop $2
	localdef $4
	push $2
	call dbl,getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	push 0
	push 0
	call grtxt,setpos
	localint $8
	push 2
	pop $8
	localint $9
	push 0
	pop $9
l560:
	push $9
	push $4
	cmpjl
	cmp0
	je l561
	jmp l563
l562:
	add $9,1
	pop $9
	jmp l560
l563:
	push $9
	call grtxt,get
	pop $5
	push $5
	spushs
	push $2
	push $9
	push 1
	pop $b
	popax
	add $a,$b
	call dbl,get
	spop $a
	call [$a],txtset
	push $5
	spushs
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,length
	popax
	add $3,$a
	pop $3
	push $5
	spushs
	push iResX
	push $5
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	push $9
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push $8
	pop $b
	popax
	add $a,$b
	push igmoffsety
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $5
	spushs
	spop $a
	call [$a],show
	push bshadow
	cmp0
	je l565
	push $9
	call grtxt,get
	pop $6
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],txtset
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push 1
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	spop $a
	call [$a],show
l565:
	jmp l562
l561:
	push bblackbg
	cmp0
	je l567
	call grtxt,first
	pop $5
	call grtxts,first
	pop $6
	push ssubpos
	push "up"
	cmpje
	cmp0
	je l569
	push $6
	spushs
	push iResX
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxt,get
	spushs
	spop $a
	call [$a],getey
	cthis black
	push bblackbg
	spop $a
	call [$a],create
	push $6
	spushs
	push igmoffsetx
	push igmoffsety
	spop $a
	call [$a],setpos
	jmp l568
l569:
	push $6
	spushs
	push iResX
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxt,get
	spushs
	spop $a
	call [$a],getey
	push $5
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	cthis black
	push bblackbg
	spop $a
	call [$a],create
	push $6
	spushs
	push igmoffsetx
	push $5
	spushs
	spop $a
	call [$a],getpy
	push igmoffsety
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
l568:
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	spop $a
	call [$a],show
l567:
	push ssubpos
	push "up"
	cmpje
	cmp0
	je l571
	push 0
	pop $8
	jmp l570
l571:
	push iResY
	push $4
	push ifontsize
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push isubpos
	pop $b
	popax
	sub $a,$b
	pop $8
	push 0
	push $8
	call grtxt,move
	push bshadow
	cmp0
	jne l574
	push bblackbg
	jmp l575
l573:
	push 0
	jmp l575
l574:
	push 1
l575:
	cmp0
	je l576
	push 0
	push $8
	call grtxts,move
l576:
l570:
	call timtxt,play
	push $3
	jmp l558
l559:
	push 0
l558:
	end method
	end class

	new int,igmsubtitle
	push "igmsubtitle:"
	call dbconf,dbgetint
	pop igmsubtitle
	new int,igmlektor
	push "igmlektor:"
	call dbconf,dbgetint
	pop igmlektor
	new int,igmchardelay
	push "igmchardelay:"
	call dbconf,dbgetint
	pop igmchardelay
	push igmsubtitle
	cmp0
	je l578
	localstring $10
	push "subtitles_font:"
	call dbconf,dbget
	pop $10
	localint $11
	push "subtitles_fontsize:"
	call dbconf,dbgetint
	pop $11
	push "subtitles_src:"
	call dbconf,dbget
	push $10
	push "null"
	cmpje
	cmp0
	je l580
	push sgmfontbold
	jmp l579
l580:
	push $10
l579:
	push $11
	push 0
	cmpjle
	cmp0
	je l582
	push 20
	jmp l581
l582:
	push $11
l581:
	push 50
	new Subtitle,subtitle
l578:
	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	new timer,timlektor
	push "onfinish"
	push "classsound0"
	call timlektor,addmethod
	push igmsubtitle
	cmp0
	je l586
	call subtitle,reset
l586:
	end method
	method classsound0
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l584
	push _csplay
	spushs
	spop $a
	call [$a],onfinish
l584:
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	ret
	end method
	method cisactsnd
	localstring $1
	pop $1
	push $1
	push _csplay
	cmpje
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l588
	push $1
	cthis cbplay
	jmp l587
l588:
	cthis cgetactsnd
	push $1
	cmpjne
	cmp0
	je l590
	push $1
	cthis cbplay
l590:
l587:
	end method
	method cbselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	jne l593
	cthis cgetactsnd
	push $1
	cmpjne
	jmp l594
l592:
	push 0
	jmp l594
l593:
	push 1
l594:
	cmp0
	je l595
	push $1
	cthis cbplay
l595:
	end method
	method cbplay
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l597
	push 1
	cthis csplaystop
l597:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l599
	push $1
	cthis csubplay
l599:
	end method
	method cbsplay
	localstring $1
	pop $1
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l601
	push $1
	cthis csubplay
l601:
	end method
	method cbplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	cthis cbplay
	end method
	method cbplay2
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l603
	push 0
	cthis csplaystop
l603:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l605
	push $1
	cthis csubplay
l605:
	end method
	method crplay
	localstring $1
	pop $1
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l607
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l609
l607:
	push 0
	jmp l609
l608:
	push 1
l609:
	cmp0
	je l610
	ret
l610:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l612
	push $1
	cthis csubplay
l612:
	end method
	method cbplayif
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l614
	push $1
	cthis cbplay
l614:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l616
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	jmp l618
l616:
	push 0
	jmp l618
l617:
	push 1
l618:
	cmp0
	je l619
	push $1
	cthis csubplay
l619:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call $2,rand
	push 0
	cmpje
	cmp0
	je l621
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
l621:
	end method
	method cplayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "c"
	push $1
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $d
	cthis [$d]
	push $2
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l623
	push $3
	push "null"
	cmpjne
	jmp l625
l623:
	push 0
	jmp l625
l624:
	push 1
l625:
	cmp0
	je l626
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l626:
	end method
	method cactsndstop
	localint $1
	pop $1
	cthis cisplaying
	cmp0
	je l628
	push $1
	cthis csplaystop
l628:
	end method
	method csplaystop
	localint $1
	pop $1
	call timlektor,isplaying
	cmp0
	je l630
	push 1
	call timlektor,stop
	jmp l629
l630:
	push _csplay
	spushs
	push $1
	spop $a
	call [$a],stop
l629:
	end method
	method cstopsnds
	localint $1
	pop $1
	call _csplay,in
	cmp0
	je l632
	cthis cisplaying
	jmp l634
l632:
	push 0
	jmp l634
l633:
	push 1
l634:
	cmp0
	je l635
	push $1
	cthis cactsndstop
l635:
	end method
	method cisplaying
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l637
	call timlektor,isplaying
	cmp0
	jne l639
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l640
l638:
	push 0
	jmp l640
l639:
	push 1
l640:
	jmp l636
l637:
	push 0
l636:
	end method
	method csubplay
	localstring $1
	pop $1
	push igmsubtitle
	cmp0
	je l642
	localdef $2
	push $1
	call subtitle,play
	pop $2
	push igmlektor
	cmp0
	jne l645
	push $2
	push 0
	cmpjle
	jmp l646
l644:
	push 0
	jmp l646
l645:
	push 1
l646:
	cmp0
	je l647
	push $1
	spushs
	spop $a
	call [$a],play
	jmp l643
l647:
	push $2
	push igmchardelay
	pop $b
	popax
	mul $a,$b
	call timlektor,setdelay
	call timlektor,play
l643:
	jmp l641
l642:
	push $1
	spushs
	spop $a
	call [$a],play
l641:
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	je l649
	push 0
	pop iile
	ret
l649:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l650:
	push $3
	push $2
	cmpjl
	cmp0
	je l651
	jmp l653
l652:
	add $3,1
	pop $3
	jmp l650
l653:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l652
l651:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	cmpjle
	cmp0
	je l655
	push 0
	pop iile
	ret
l655:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	cmpje
	cmp0
	je l657
	call iile,rand
	pop ilicz
l657:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l658:
	push $3
	push iile
	cmpjl
	cmp0
	je l659
	jmp l661
l660:
	add $3,1
	pop $3
	jmp l658
l661:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l660
l659:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	cmpjne
	cmp0
	je l663
	push splay
	spushs
	push $1
	spop $a
	call [$a],stop
l663:
	end method
	method isplaying
	push splay
	push "null"
	cmpjne
	cmp0
	je l665
	push splay
	spushs
	spop $a
	call [$a],isplaying
	jmp l664
l665:
	push 0
l664:
	end method
	method randplay
	localint $1
	pop $1
	call $1,rand
	push 0
	cmpje
	cmp0
	je l667
	cthis play
l667:
	end method
	method playid
	localint $1
	pop $1
	push $1
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	cthis play
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method reset
	push 0
	pop ilicz
	end method
	method rbgplay
	cthis isplaying
	neg
	cmp0
	je l669
	cthis bgplay
l669:
	end method
	method rplay
	cthis isplaying
	neg
	cmp0
	je l671
	cthis play
l671:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	spushs
	spop $a
	call [$a],play
	push itype
	push 0
	cmpje
	cmp0
	je l673
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l672
l673:
	push itype
	push 1
	cmpje
	cmp0
	je l675
	call iile,rand
	pop ilicz
l675:
l672:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l676:
	push $2
	push iile
	cmpjl
	cmp0
	je l677
	jmp l679
l678:
	add $2,1
	pop $2
	jmp l676
l679:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setvol
	jmp l678
l677:
	end method
	end class

	class SoundSource
	method init
	end method
	method setvol
	localstring $1
	localint $2
	localint $3
	localreal $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call $5,abs
	push $4
	cmpjae
	cmp0
	je l681
	push $1
	spushs
	push $3
	spop $a
	call [$a],setvol
	jmp l680
l681:
	push $1
	spushs
	push 1.0
	call $5,abs
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setvol
l680:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,_iconstid
	new gmobjvec,_grsfxs
	end method
	method bkg=
	localdef $1
	pop $1
	push ".pyz"
	call $1,contains
	cmp0
	je l683
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l682
l683:
	push "imgbkg"
	push $1
	push 0
	cthis newimg
l682:
	end method
	method bgr=
	localdef $1
	pop $1
	push $1
	cthis csndbgr
	end method
	method path=
	localdef $1
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	end method
	method cycle=
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis cnewtimercyclefin
	end method
	method timer=
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	end method
	method timplay
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method _getflags
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
	push "L"
	call $1,contains
	cmp0
	je l685
	push "L"
	call $1,strremove
	push 1
	pop $2
l685:
	localdef $3
	push 0
	pop $3
	push "P"
	call $1,contains
	cmp0
	je l687
	push "P"
	call $1,strremove
	push 1
	pop $3
l687:
	localdef $4
	push 0
	pop $4
	push "H"
	call $1,contains
	cmp0
	je l689
	push "H"
	call $1,strremove
	push 1
	pop $4
l689:
	push $1
	push $2
	push $3
	push $4
	ret
	end method
	method img=
	localdef $1
	pop $1
	push $1
	cthis _build_img
	popax
	end method
	method getlangfile
	localstring $1
	pop $1
	localdef $2
	push 4
	call $1,strsube
	push "_"
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	push 0
	push 4
	call $1,gete
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	cthis getpath
	call engine,fileexist
	cmp0
	je l691
	push $2
	jmp l690
l691:
	push $1
l690:
	end method
	method _build_img
	localdef $1
	pop $1
	localdef $2
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
	push "G"
	call $1,contains
	cmp0
	je l693
	push "G"
	call $1,strremove
	push 1
	pop $5
l693:
	localdef $6
	push 0
	pop $6
	push " "
	call $1,contains
	cmp0
	je l695
	push " "
	call $1,strgetfrom
	pop $6
	push " "
	call $1,strgetto
	pop $1
l695:
	localstring $7
	push "/"
	call $1,contains
	cmp0
	je l697
	new vector,_v_sfile
	push "string"
	call _v_sfile,type
	push $1
	push "/"
	call _v_sfile,vecbuildfromstring
	call _v_sfile,last
	spushs
	push 4
	spop $h
	call $h,strsube
	pop $7
	delete _v_sfile
	jmp l696
l697:
	push 4
	call $1,strsube
	pop $7
l696:
	localstring $8
	push ".pyz"
	call $1,contains
	cmp0
	je l699
	push $5
	cmp0
	je l701
	push "gr"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	push $6
	cthis newgrimg
	jmp l700
l701:
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newanima
l700:
	jmp l698
l699:
	push "img"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newimg
l698:
	push $2
	cmp0
	je l703
	push $8
	spushs
	spop $a
	call [$a],anloopfin
l703:
	push $3
	cmp0
	je l705
	push $8
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l705:
	push $4
	cmp0
	je l707
	push $8
	spushs
	spop $a
	call [$a],hide
l707:
	push $8
	end method
	method imgsgr=
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	localdef $3
	pop $3
l708:
	push A
	push $3
	cmpjne
	cmp0
	je l709
	push $1
	spushs
	push $3
	cthis _build_img
	spop $a
	call [$a],add
	localdef $3
	pop $3
	jmp l708
l709:
	end method
	method imgs=
	push "img="
	cthis withlist
	end method
	method clone
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	cthis getname
	cthis gettype
	push $1
	spop $a
	call [$a],classgame0
	end method
	method classgame0
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	push $3
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method clones=
	push "clone"
	cthis withlist
	end method
	method list=
	localdef $1
	pop $1
	localdef $2
	pop $2
	push $1
	spushs
	spop $e
	new gmobjvec,[$e]
l710:
	push A
	push $2
	cmpjne
	cmp0
	je l711
	push $1
	spushs
	push $2
	spop $a
	call [$a],addbegin
	pop $2
	jmp l710
l711:
	end method
	method list2=
	localdef $1
	push "gmobjvec"
	cthis newconst
	pop $1
	push $1
	cthis list=
	push $1
	end method
	method debug=
	localdef $1
	pop $1
	push $1
	call engine,setdebugstate
	end method
	method sfx=
	localstring $1
	pop $1
	localint $2
	push "N"
	call $1,contains
	pop $2
	push $2
	cmp0
	je l713
	push "N"
	call $1,strremove
l713:
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	popax
	pop $4
	pop $3
	pop $1
	localdef $5
	push 100
	pop $5
	push " "
	call $1,contains
	cmp0
	je l715
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l715:
	localstring $6
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsfx
	push $6
	spushs
	push $5
	spop $a
	call [$a],setvol
	push $3
	cmp0
	je l717
	push $6
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l717:
	push $4
	cmp0
	je l719
	push $6
	spushs
	spop $a
	call [$a],play
	jmp l718
l719:
	push $2
	cmp0
	je l721
	push $6
	spushs
	spop $a
	call [$a],playloop
l721:
l718:
	push $6
	call _grsfxs,add
	end method
	method sfxs=
	push "sfx="
	cthis withlist
	end method
	method snd=
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsndfree
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method tickstart
	push "__timspeed"
	cthis hasvar
	neg
	cmp0
	je l723
	new TicksCounter,__timspeed
l723:
	call __timspeed,start
	end method
	method tickstop
	push "ticker: "
	call __timspeed,print
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis newbgr
	push "sndbgr"
	cthis sndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l725
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	push "imgkursor"
	pop $1
l725:
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call mouse,setcursor
	push $1
	call engine,stdbutcursor
	end method
	method newimgarray
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildarray
	end method
	method newfont
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new font,[$e]
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],load
	end method
	method monofont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontmono
	push $2
	cthis newfont
	end method
	method newfontbold
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontbold
	push $2
	cthis newfont
	end method
	method snewfont
	localstring $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "font"
	cthis newconst
	pop $3
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	ret
	end method
	method stdfont
	localint $1
	pop $1
	push sgmfontfile
	push $1
	cthis snewfont
	end method
	method stdmono
	localint $1
	pop $1
	push sgmfontmono
	push $1
	cthis snewfont
	end method
	method stdbold
	localint $1
	pop $1
	push sgmfontbold
	push $1
	cthis snewfont
	end method
	method getconstid
	add _iconstid,1
	pop _iconstid
	push _iconstid
	push 1
	pop $b
	popax
	sub $a,$b
	end method
	method newconst
	localstring $1
	pop $1
	localstring $2
	push "const"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getconstid
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $2
	ret
	end method
	method consttext
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $8
	push "text"
	cthis newconst
	pop $8
	localstring $9
	push $4
	cthis stdfont
	pop $9
	push $8
	spushs
	push $9
	spop $a
	call [$a],setfont
	push $8
	spushs
	push $1
	spop $a
	call [$a],set
	push $8
	spushs
	push $5
	push $6
	push $7
	spop $a
	call [$a],createtxt
	push $8
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $8
	ret
	end method
	method newtext
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	spushs
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	spop $a
	call [$a],setfont
	push $1
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	end method
	method newtextposz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	cthis newtext
	push $1
	spushs
	push $7
	push $8
	push $9
	spop $a
	call [$a],anposz
	end method
	method newgrimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	push $2
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l726:
	push $2
	push $3
	cmpjle
	cmp0
	je l727
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l726
l727:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	spushs
	spop $e
	new classancounter,[$e]
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l728:
	push $6
	push $5
	cmpjl
	cmp0
	je l729
	jmp l731
l730:
	add $6,1
	pop $6
	jmp l728
l731:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l730
l729:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l732:
	push $7
	push $5
	cmpjl
	cmp0
	je l733
	jmp l735
l734:
	add $7,1
	pop $7
	jmp l732
l735:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l734
l733:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l736:
	push $7
	push $5
	cmpjl
	cmp0
	je l737
	jmp l739
l738:
	add $7,1
	pop $7
	jmp l736
l739:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l738
l737:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	spushs
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l740:
	push $3
	push $4
	cmpjl
	cmp0
	je l741
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	cmpjne
	cmp0
	je l743
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	cmpje
	cmp0
	jne l746
	push $12
	push "sfx"
	cmpje
	jmp l747
l745:
	push 0
	jmp l747
l746:
	push 1
l747:
	cmp0
	je l748
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	cmpje
	cmp0
	je l750
	push $14
	push $13
	cthis newsfx
	jmp l749
l750:
	push $14
	push $13
	cthis newsnd
l749:
	push $7
	push $6
	cmpjl
	cmp0
	je l752
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l754
	push $14
	spushs
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l753
l754:
	push 0
	push 4
	call $12,gete
	push "play"
	cmpje
	cmp0
	je l756
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l755
l756:
	push $12
	push "vol"
	cmpje
	cmp0
	je l758
	push $14
	spushs
	push $13
	spop $a
	call [$a],setvol
l758:
l755:
l753:
l752:
	jmp l744
l748:
	push $12
	push "group"
	cmpje
	cmp0
	je l760
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	cmpjl
	cmp0
	je l762
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l764
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
l764:
	jmp l761
l762:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l761:
	jmp l759
l760:
	push $12
	push "bank"
	cmpje
	cmp0
	je l766
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	cmpjl
	cmp0
	je l768
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l770
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	spushs
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l769
l770:
	push $12
	push "vol"
	cmpje
	cmp0
	je l772
	push $14
	spushs
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
l772:
l769:
l768:
	jmp l765
l766:
	push $12
	push "method"
	cmpje
	cmp0
	je l774
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l775:
	push $8
	push $9
	cmpjle
	cmp0
	je l776
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l775
l776:
	jmp l773
l774:
	push $12
	push "singlebank"
	cmpje
	cmp0
	je l778
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l777
l778:
	push $12
	push "bgr"
	cmpje
	cmp0
	je l780
	push $14
	cthis csndbgr
	push $7
	push $6
	cmpjl
	cmp0
	je l782
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l784
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l784:
l782:
	jmp l779
l780:
	push $12
	push "music"
	cmpje
	cmp0
	je l786
	push $14
	cthis playmusic
	push $7
	push $6
	cmpjl
	cmp0
	je l788
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l790
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l790:
l788:
l786:
l779:
l777:
l773:
l765:
l759:
l744:
l743:
	add $3,1
	pop $3
	jmp l740
l741:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	method cgetscreenshoot
	localstring $1
	localreal $2
	pop $2
	pop $1
	new img,_imgsavebkg
	push iResX
	push iResY
	cthis white
	push 255
	call _imgsavebkg,create
	push 2000
	call _imgsavebkg,setz
	call _imgsavebkg,blitscreen
	push $2
	push 1.0
	cmpjne
	cmp0
	je l792
	new filter,_ftbg
	push "_imgsavebkg"
	call _ftbg,link
	push 1
	call _ftbg,setsmooth
	push $2
	call _ftbg,setzoom
l792:
	push 0
	push 0
	call _imgsavebkg,setpos
	new img,_im_1
	push $2
	push iResX
	pop $b
	popax
	mul $a,$b
	push $2
	push iResY
	pop $b
	popax
	mul $a,$b
	cthis white
	push 255
	call _im_1,create
	call _imgsavebkg,getpx
	call _imgsavebkg,getpy
	call _im_1,setpos
	push "_imgsavebkg"
	call _im_1,blit
	push $1
	call _im_1,save
	delete _im_1
	push $2
	push 1.0
	cmpjne
	cmp0
	je l794
	call _ftbg,unlink
	delete _ftbg
l794:
	delete _imgsavebkg
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l795:
	push $2
	push $3
	cmpjle
	cmp0
	je l796
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $5
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	cmpje
	cmp0
	je l798
	push $2
	ret
l798:
	add $2,1
	pop $2
	jmp l795
l796:
	push 1
	popax
	sub 0,$a
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	cmpjae
	cmp0
	je l800
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l800:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis build2
	end method
	method build2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new anima,[$e]
	push $5
	spushs
	push $1
	spop $a
	call [$a],load
	push $5
	spushs
	push $2
	spop $a
	call [$a],setz
	localint $6
	push $5
	spushs
	spop $a
	call [$a],nofactions
	pop $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $9
	localstring $10
	localstring $11
	localstring $12
	localstring $13
	localint $14
	push 0
	pop $14
l801:
	push $14
	push $6
	cmpjl
	cmp0
	je l802
	jmp l804
l803:
	add $14,1
	pop $14
	jmp l801
l804:
	push "null"
	pop $10
	push "null"
	pop $11
	push "null"
	pop $12
	push $5
	spushs
	push $14
	spop $a
	call [$a],nofframes
	pop $7
	push 1
	pop $8
l805:
	push $8
	push $7
	cmpjle
	cmp0
	je l806
	jmp l808
l807:
	add $8,1
	pop $8
	jmp l805
l808:
	push san
	push $9
	pop $b
	popax
	add $a,$b
	pop $13
	push $8
	push 1
	cmpje
	cmp0
	je l810
	push $13
	pop $10
	jmp l809
l810:
	push $8
	push 2
	cmpje
	cmp0
	je l812
	push $13
	pop $11
	jmp l811
l812:
	push $8
	push 3
	cmpje
	cmp0
	je l814
	push $13
	pop $12
l814:
l811:
l809:
	push $5
	push $13
	clparent newvars,copyanima
	push $13
	spushs
	push $14
	push $8
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $9,1
	pop $9
	jmp l807
l806:
	push $4
	push "null"
	cmpjne
	cmp0
	je l816
	push $4
	spushs
	push $5
	spushs
	push $14
	spop $a
	call [$a],nameofaction
	spop $a
	call [$a],contains
	jmp l818
l816:
	push 0
	jmp l818
l817:
	push 1
l818:
	cmp0
	je l819
	push $10
	spushs
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	jmp l815
l819:
	push $10
	push $11
	push $12
	push $3
	cthis addbut
l815:
	jmp l803
l802:
	push $5
	spushs
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l821
	push sfxmon
	spushs
	spop $a
	call [$a],play
l821:
	push _sfunmovon
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpje
	cmp0
	je l823
	ret
l823:
	push $1
	spushs
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $4
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	spushs
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l824:
	push $5
	push iilebut
	cmpjl
	cmp0
	je l825
	jmp l827
l826:
	add $5,1
	pop $5
	jmp l824
l827:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l826
l825:
	end method
	method print
	localint $1
	push 0
	pop $1
l828:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l829
	jmp l831
l830:
	add $1,1
	pop $1
	jmp l828
l831:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l830
l829:
	end method
	method setrect
	localstring $1
	localint $2
	push 0
	pop $2
l832:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l833
	jmp l835
l834:
	add $2,1
	pop $2
	jmp l832
l835:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getimg
	pop $1
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	spop $a
	call [$a],setrect
	jmp l834
l833:
	end method
	method setflags
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l836:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l837
	jmp l839
l838:
	add $3,1
	pop $3
	jmp l836
l839:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setflags
	jmp l838
l837:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l841
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	jmp l840
l841:
	push "null"
l840:
	ret
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l842:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l843
	jmp l845
l844:
	add $2,1
	pop $2
	jmp l842
l845:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l844
l843:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	cmpja
	cmp0
	je l847
	push iilebut
	pop $2
l847:
	localint $3
	push 0
	pop $3
l848:
	push $3
	push $2
	cmpjl
	cmp0
	je l849
	jmp l851
l850:
	add $3,1
	pop $3
	jmp l848
l851:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l850
l849:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method disabled
	push sbut
	push 0
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disabled
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method resetall
	localint $1
	push 0
	pop $1
l852:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l853
	jmp l855
l854:
	add $1,1
	pop $1
	jmp l852
l855:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setcursorpos
	jmp l854
l853:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l856:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l857
	jmp l859
l858:
	add $3,1
	pop $3
	jmp l856
l859:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setcursorpos
	jmp l858
l857:
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l861
	push $2
	spushs
	spop $a
	call [$a],getimg
	jmp l860
l861:
	push "null"
l860:
	ret
	end method
	method callimgfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getimg
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	cmpjne
	cmp0
	je l863
	push $3
	spushs
	push $2
	spop $a
	call [$a],setmouse
l863:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l865
	ret
l865:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	spushs
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	spushs
	push _sfcl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	spushs
	push _sfrl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l867
	push sfxmon
	spushs
	spop $a
	call [$a],play
l867:
	push _sobmn
	spushs
	push _sfmn
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	spushs
	push _sfmf
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classsimplebutton
	method init
	new string,simgob
	push "null"
	pop simgob
	new gmimgvec,grbut
	end method
	method stdbuild
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push 0
	push 0
	push $3
	push 0
	cthis build
	end method
	method getimgfunc
	localstring $1
	pop $1
	push simgob
	push "null"
	cmpje
	cmp0
	je l869
	push 0
	jmp l868
l869:
	push simgob
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l868:
	end method
	method setbutpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grbut,setpos
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new button,but1
	cthis getname
	call but1,classsimplebutton0
	push "onclick"
	push "classsimplebutton1"
	call but1,addmethod
	push "onrel"
	push "classsimplebutton2"
	call but1,addmethod
	push "onmoveon"
	push "classsimplebutton3"
	call but1,addmethod
	push "onmoveoff"
	push "classsimplebutton4"
	call but1,addmethod
	push ".pyz"
	call $1,contains
	cmp0
	je l871
	new anima,anbut0
	push $1
	call anbut0,load
	push $3
	push $4
	call anbut0,setpos
	push $5
	call anbut0,setz
	push $6
	push 0
	call anbut0,setframe
	push "anbut0"
	pop simgob
	push simgob
	call grbut,add
	localstring $7
	push "anbut0"
	pop $7
	localstring $8
	push "null"
	pop $8
	localstring $9
	push "null"
	pop $9
	localint $10
	push $6
	call anbut0,nofframes
	pop $10
	push $10
	push 1
	cmpja
	cmp0
	je l873
	new anima,anbut1
	push "anbut0"
	call anbut1,copy
	push $6
	push 1
	call anbut1,setframe
	push "anbut1"
	pop $8
	push $8
	call grbut,add
l873:
	push $10
	push 2
	cmpja
	cmp0
	je l875
	new anima,anbut2
	push "anbut0"
	call anbut2,copy
	push $6
	push 2
	call anbut2,setframe
	push "anbut2"
	pop $8
	push $8
	call grbut,add
l875:
	push $7
	push $8
	push $9
	call but1,setan
	jmp l870
l871:
	new img,imgbut
	push "imgbut"
	pop simgob
	push simgob
	call grbut,add
	push $1
	call imgbut,load
	push $3
	push $4
	call imgbut,setpos
	push $5
	call imgbut,setz
	push "imgbut"
	push "null"
	push "null"
	call but1,set
l870:
	push $2
	call but1,setmouse
	end method
	method classsimplebutton0
	localstring $1
	pop $1
	new string,sbut
	push $1
	pop sbut
	end method
	method classsimplebutton1
	push sbut
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton2
	push sbut
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton3
	push sbut
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton4
	push sbut
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l876:
	push $4
	push $3
	cmpjl
	cmp0
	je l877
	jmp l879
l878:
	add $4,1
	pop $4
	jmp l876
l879:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l878
l877:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	cmpje
	cmp0
	je l881
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l880
l881:
	push $5
	spushs
	push $2
	spop $a
	call [$a],_cbuildbutname
l880:
	push $4
	cmp0
	je l883
	push $5
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	spushs
	spop $a
	call [$a],hide
l883:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method _stdsndloop
	cthis play
	end method
	method __std_finish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	ret
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	ret
	end method
	method strgetto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l885
	cthis get
	jmp l884
l885:
	push 0
	push $2
	cthis getb
l884:
	end method
	method strgeteto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis rfind
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l887
	cthis get
	jmp l886
l887:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
l886:
	end method
	method streq
	localstring $1
	pop $1
	cthis get
	push 0
	cthis length
	call $1,getb
	cmpje
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	ret
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	ret
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method strisbetween
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	localint $4
	push 0
	pop $4
l888:
	push $4
	cthis length
	cmpjl
	cmp0
	je l889
	jmp l891
l890:
	add $4,1
	pop $4
	jmp l888
l891:
	push $4
	cthis getbyte
	pop $3
	push $3
	push $1
	cmpjl
	cmp0
	jne l894
	push $3
	push $2
	cmpja
	jmp l895
l893:
	push 0
	jmp l895
l894:
	push 1
l895:
	cmp0
	je l896
	push 0
	ret
l896:
	jmp l890
l889:
	push 1
	end method
	method strisint
	push BYTE0
	push BYTE9
	cthis strisbetween
	end method
	method strisbin
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis strisbetween
	end method
	method strisalpha
	push BYTEa
	push BYTEz
	cthis strisbetween
	end method
	method streach
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l897:
	push $3
	cthis length
	cmpjl
	cmp0
	je l898
	jmp l900
l899:
	add $3,1
	pop $3
	jmp l897
l900:
	push $3
	push 1
	cthis getb
	pop $2
	push $2
	spushs
	push $1
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l899
l898:
	end method
	method strdotpos
	localint $1
	pop $1
	push "."
	cthis strgetto
	push "."
	pop $b
	popax
	add $a,$b
	push "."
	cthis strgetfrom
	spushs
	push 0
	push $1
	spop $h
	call $h,getb
	pop $b
	popax
	add $a,$b
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l902
	push 0
	jmp l901
l902:
	push 100
	spushs
	spop $h
	call $h,rand
	push $1
	cmpjle
l901:
	end method
	method between
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l904
	push $1
	jmp l903
l904:
	push $2
	push $3
	cmpja
	cmp0
	je l906
	push $3
	jmp l905
l906:
	push $2
l905:
l903:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l908
	push $1
	jmp l907
l908:
	push $2
l907:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l910
	push $1
	jmp l909
l910:
	push $2
l909:
	end method
	method movoffsetr
	push igmoffsetx
	push 0
	cthis move
	end method
	method movoffsetl
	push igmoffsetx
	popax
	sub 0,$a
	push 0
	cthis move
	end method
	method imgprint
	cthis getname
	push ": x="
	pop $b
	popax
	add $a,$b
	cthis getpx
	pop $b
	popax
	add $a,$b
	push ", y="
	pop $b
	popax
	add $a,$b
	cthis getpy
	pop $b
	popax
	add $a,$b
	push ", w="
	pop $b
	popax
	add $a,$b
	cthis getw
	pop $b
	popax
	add $a,$b
	push ",h="
	pop $b
	popax
	add $a,$b
	cthis geth
	pop $b
	popax
	add $a,$b
	push ",ex="
	pop $b
	popax
	add $a,$b
	cthis getex
	pop $b
	popax
	add $a,$b
	push ",ey="
	pop $b
	popax
	add $a,$b
	cthis getey
	pop $b
	popax
	add $a,$b
	push ", z="
	pop $b
	popax
	add $a,$b
	cthis getz
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	method imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push "1111"
	cthis imgborderss
	end method
	method imgborderss
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 3
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l912
	push "_img_bor"
	cthis blit
l912:
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push 1
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l914
	push "_img_bor"
	cthis blit
l914:
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 0
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l916
	push "_img_bor"
	cthis blit
l916:
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push 2
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l918
	push "_img_bor"
	cthis blit
l918:
	delete _img_bor
	end method
	method imgroundborder
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis imgborders
	cthis imgerasecorners
	end method
	method imgerasecorners
	localdef $1
	cthis getpx
	pop $1
	localdef $2
	cthis getpy
	pop $2
	push $1
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	push $1
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	end method
	method imgdrawline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "blit"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgeraseline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "erase"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgputoncenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method imgfuncline
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $9
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	pop $9
	localdef $10
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	pop $10
	localreal $11
	push $9
	push 0
	cmpje
	cmp0
	je l920
	push $10
	push 0
	cmpjl
	cmp0
	je l922
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l923:
	push $11
	push $6
	cmpjae
	cmp0
	je l924
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	sub $11,$a
	pop $11
	jmp l923
l924:
	push $6
	push $11
	pop $b
	popax
	sub $a,$b
	jmp l921
l922:
	push $10
	push 0
	cmpja
	cmp0
	je l926
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l927:
	push $11
	push $6
	cmpjle
	cmp0
	je l928
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $11,$a
	pop $11
	jmp l927
l928:
	push $11
	push $6
	pop $b
	popax
	sub $a,$b
	jmp l925
l926:
	push $8
l925:
l921:
	jmp l919
l920:
	push $9
	push $10
	call $8,length
	pop $11
	localreal $12
l929:
	push $8
	push $11
	cmpjle
	cmp0
	je l930
	push 1.0
	push $11
	push $8
	pop $b
	popax
	sub $a,$b
	push $11
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $12
	push $2
	spushs
	push $12
	push $9
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push $12
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $8,$a
	pop $8
	jmp l929
l930:
	push $8
	push $11
	pop $b
	popax
	sub $a,$b
l919:
	end method
	method anresizemets
	cthis getname
	clparent anima_pack,resizemethods
	end method
	method anfirstnontr
	cthis getname
	cthis getpx
	cthis getpy
	push 1
	push 0
	clparent classansearcher,_findnotr
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anhideonsetframe
	push "onsetframe"
	push "global4"
	cthis addmethod
	end method
	method global4
	cthis hide
	end method
	method anopacityframe
	localdef $1
	push "_ft"
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $e
	new filter,[$e]
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],link
	push "onsetframe"
	push "global5"
	cthis addmethod
	end method
	method global5
	localdef $1
	cthis framename
	pop $1
	push 0
	push 2
	call $1,getb
	push "op"
	cmpje
	cmp0
	je l932
	push "_ft"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	push 2
	call $1,strsubb
	spushs
	spop $h
	call $h,to_r
	push 100.0
	pop $b
	popax
	div $a,$b
	psax
	push 255
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],setopacity
	jmp l931
l932:
	push "_ft"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	push 255
	spop $a
	call [$a],setopacity
l931:
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ancenterscreen
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis ansetcpos
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method ansetsframe
	localdef $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	cthis setframe
	localint $3
	push 0
	pop $3
l933:
	push $3
	push 1
	popax
	sub 0,$a
	cthis nofframes
	cmpjl
	cmp0
	je l934
	cthis framename
	push $2
	cmpjne
	jmp l936
l934:
	push 0
	jmp l936
l935:
	push 1
l936:
	cmp0
	je l937
	add $3,1
	pop $3
	push 1
	popax
	sub 0,$a
	push $3
	cthis setframe
	jmp l933
l937:
	end method
	method ansetlastframe
	localdef $1
	pop $1
	push $1
	push $1
	cthis nofframes
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setframe
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	ret
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	end method
	method objplayloop
	cthis objloop
	cthis play
	end method
	method anplayfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anplayif
	localdef $1
	pop $1
	push $1
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l939
	push $1
	cthis play
l939:
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method anposz
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	ret
	end method
	method annextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method ansetnextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cthis setframe
	end method
	method ansetnextfr
	push 1
	popax
	sub 0,$a
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	cthis setframe
	end method
	method ansetrandfr
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	cthis nofframes
	spushs
	spop $h
	call $h,rand
	cthis setframe
	end method
	method anhasaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	cthis nofactions
	cmpjne
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anaddfx
	cthis getname
	clparent AnimaFx,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method angetcpos
	cthis getcx
	cthis getcy
	ret
	end method
	method anactnr
	push 1
	popax
	sub 0,$a
	cthis actionnr
	end method
	method angetcrgba
	cthis getcx
	cthis getcy
	cthis getrgba
	end method
	method anisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l940:
	push $5
	cthis nofactions
	cmpjl
	cmp0
	je l941
	jmp l943
l942:
	add $5,1
	pop $5
	jmp l940
l943:
	push $5
	push 0
	cthis setframe
	push $1
	push $2
	push $3
	push $4
	cthis isin
	cmp0
	je l945
	push $5
	ret
l945:
	jmp l942
l941:
	push 1
	popax
	sub 0,$a
	end method
	method anreload
	localstring $1
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	localint $3
	cthis framenr
	pop $3
	localint $4
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpjne
	pop $4
	localint $5
	localint $6
	cthis getpos
	pop $6
	pop $5
	localint $7
	cthis getz
	pop $7
	push $1
	cthis getpath
	cthis load
	push $5
	push $6
	cthis setpos
	push $7
	cthis setz
	push $2
	cthis nofactions
	cmpjl
	cmp0
	je l947
	push $4
	cmp0
	je l949
	push $2
	cthis play
l949:
	push $2
	push $3
	cthis setframe
	jmp l946
l947:
	push 0
	push 0
	cthis setframe
l946:
	end method
	method anclipob
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	cthis clip
	end method
	method ancopyan
	localstring $1
	pop $1
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l951
	cthis show
	jmp l950
l951:
	cthis hide
l950:
	push $1
	spushs
	spop $a
	call [$a],getpos
	cthis setpos
	end method
	method anconstmove
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push A
	push "mvx"
	push $2
	push "mvy"
	push $3
	cthis vars2
	push $1
	cthis setdelay
	push 1
	popax
	sub 0,$a
	push "global6"
	cthis anplayfin
	end method
	method global6
	push 1
	popax
	sub 0,$a
	cthis play
	push mvx
	push mvy
	cthis move
	end method
	method scmove
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	method scpos
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis setpos
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis set
	cthis create
	end method
	method txtsetcol
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push $2
	push $3
	push $4
	cthis createtxt
	end method
	method txtshadow
	localint $1
	localstring $2
	pop $2
	pop $1
	push "txts"
	cthis hasvar
	neg
	cmp0
	je l953
	new text,txts
	push $2
	call txts,setfont
l953:
	cthis get
	call txts,set
	cthis getpx
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $1
	pop $b
	popax
	add $a,$b
	call txts,setpos
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	call txts,setz
	call txts,show
	push 0
	push 0
	push 0
	call txts,createtxt
	end method
	method txthides
	cthis hide
	push "txts"
	cthis hasvar
	cmp0
	je l955
	call txts,hide
l955:
	end method
	method txtisin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l956
	push $1
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l956
	push $2
	cthis getpy
	cmpjae
	cmp0
	je l956
	push $2
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	cmpjle
	jmp l958
l956:
	push 0
	jmp l958
l957:
	push 1
l958:
	end method
	method txtcenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtright
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	cthis getw
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtcenterscreen
	push iResX
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setpos
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l960
	localint $2
	push 0
	pop $2
l961:
	push $2
	push $1
	cmpjl
	cmp0
	je l962
	jmp l964
l963:
	add $2,1
	pop $2
	jmp l961
l964:
	push $2
	cthis add
	jmp l963
l962:
l960:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l965:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l966
	jmp l968
l967:
	add $2,1
	pop $2
	jmp l965
l968:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l967
l966:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l970
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l970:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l972
	sub $2,1
	pop $2
	jmp l971
l972:
	push $2
	push 0
	cmpje
	cmp0
	je l974
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l974:
l971:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l975
	push $1
	cthis size
	cmpjl
	jmp l977
l975:
	push 0
	jmp l977
l976:
	push 1
l977:
	cmp0
	je l979
	push $1
	cthis get
	jmp l978
l979:
	push "null"
l978:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l981
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l980
l981:
	push "null"
l980:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l982:
	cthis size
	push $1
	cmpja
	cmp0
	je l983
	cthis vecpop
	popax
	jmp l982
l983:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	ret
	end method
	method vecreplace
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l985
	push $3
	push $2
	cthis set
l985:
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l987
	ret
l987:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l988:
	push $8
	push $1
	cmpjl
	cmp0
	je l989
	jmp l991
l990:
	add $8,1
	pop $8
	jmp l988
l991:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l992:
	push $9
	push $1
	cmpjl
	cmp0
	je l993
	jmp l995
l994:
	add $9,1
	pop $9
	jmp l992
l995:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l997
	push $6
	pop $5
	push $9
	pop $7
l997:
	jmp l994
l993:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l990
l989:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l998:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l999
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l998
l999:
	call $1,length
	push 0
	cmpja
	cmp0
	je l1001
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l1001:
	end method
	method obbuildfromstring2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l1002:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l1003
	push $4
	push 0
	cmpja
	cmp0
	je l1005
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
l1005:
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l1002
l1003:
	call $1,length
	push 0
	cmpja
	cmp0
	je l1007
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l1007:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecbuildfromstring2
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring2
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l1008:
	push $2
	push $1
	cmpjl
	cmp0
	je l1009
	jmp l1011
l1010:
	add $2,1
	pop $2
	jmp l1008
l1011:
	push 0
	cthis removeat
	jmp l1010
l1009:
	end method
	method vecremovefrom
	localint $1
	pop $1
l1012:
	push $1
	cthis size
	cmpjl
	cmp0
	je l1013
	push $1
	cthis removeat
	jmp l1012
l1013:
	end method
	method vecfindfrom
	localint $1
	localdef $2
	pop $2
	pop $1
l1014:
	push $1
	cthis size
	cmpjl
	cmp0
	je l1015
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1017
	push $1
	ret
	jmp l1016
l1017:
	add $1,1
	pop $1
l1016:
	jmp l1014
l1015:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l1020
	cthis size
	push 0
	cmpje
	jmp l1021
l1019:
	push 0
	jmp l1021
l1020:
	push 1
l1021:
	cmp0
	je l1022
	ret
l1022:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l1024
	localint $4
	push $1
	pop $4
l1025:
	push $4
	push $2
	cmpja
	cmp0
	je l1026
	jmp l1028
l1027:
	sub $4,1
	pop $4
	jmp l1025
l1028:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l1027
l1026:
	jmp l1023
l1024:
	push $1
	push $2
	cmpjl
	cmp0
	je l1030
	localint $4
	push $1
	pop $4
l1031:
	push $4
	push $2
	cmpjl
	cmp0
	je l1032
	jmp l1034
l1033:
	add $4,1
	pop $4
	jmp l1031
l1034:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l1033
l1032:
l1030:
l1023:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1036
	push $2
	push 0
	cthis vecposfromto
	jmp l1035
l1036:
	push $1
	cthis addbegin
l1035:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1038
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l1037
l1038:
	push $1
	cthis addbegin
l1037:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1040
	push $3
	push $2
	cthis set
l1040:
	end method
	method veceq
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjne
	cmp0
	je l1042
	push 0
	ret
l1042:
	localint $3
	push 0
	pop $3
l1043:
	push $3
	push $2
	cmpjl
	cmp0
	je l1044
	jmp l1046
l1045:
	add $3,1
	pop $3
	jmp l1043
l1046:
	push $3
	cthis get
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1048
	push 0
	ret
l1048:
	jmp l1045
l1044:
	push 1
	end method
	method vecbuild
	push "addbegin"
	cthis withlist
	end method
	method veceq2
	new vector,___v
	cthis getvectype
	call ___v,type
	call ___v,vecbuild
	localint $1
	push "___v"
	cthis veceq
	pop $1
	delete ___v
	push $1
	end method
	method veccopydbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	cthis vecadddbrow
	end method
	method vecadddbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1049:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1050
	jmp l1052
l1051:
	add $3,1
	pop $3
	jmp l1049
l1052:
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1051
l1050:
	end method
	method vecchecknext
	localint $1
	pop $1
	add $1,1
	pop $1
	push $1
	cthis size
	cmpjl
	cmp0
	je l1054
	push $1
	cthis get
	jmp l1053
l1054:
	push "null"
l1053:
	end method
	method vecsum
	cthis size
	cmp0
	je l1056
	localdef $1
	push 0
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
l1057:
	push $2
	cthis size
	cmpjl
	cmp0
	je l1058
	jmp l1060
l1059:
	add $2,1
	pop $2
	jmp l1057
l1060:
	push $2
	cthis get
	popax
	add $1,$a
	pop $1
	jmp l1059
l1058:
	push $1
	jmp l1055
l1056:
	push 0
l1055:
	end method
	method vecclosest
	localdef $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpjle
	cmp0
	je l1062
	push 1
	popax
	sub 0,$a
	ret
l1062:
	localint $3
	push 0
	pop $3
	localdef $4
	push $1
	push 0
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $4
	localint $5
	push 1
	pop $5
l1063:
	push $5
	push $2
	cmpjl
	cmp0
	je l1064
	jmp l1066
l1065:
	add $5,1
	pop $5
	jmp l1063
l1066:
	localdef $6
	push $1
	push $5
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $6
	push $6
	push $4
	cmpjl
	cmp0
	je l1068
	push $5
	pop $3
	push $6
	pop $4
l1068:
	jmp l1065
l1064:
	push $3
	end method
	method vecloadargs
	localdef $1
	pop $1
l1069:
	push $1
	push A
	cmpjne
	cmp0
	je l1070
	push $1
	cthis addbegin
	localdef $1
	pop $1
	jmp l1069
l1070:
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l1072
	ret
l1072:
	sub $1,1
	pop $1
	cthis free
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l1073:
	push $2
	push A
	cmpjne
	cmp0
	je l1074
	jmp l1076
l1075:
	jmp l1073
l1076:
	push $4
	push 0
	cmpje
	cmp0
	je l1078
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l1078:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l1080
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l1079
l1080:
	push 0
l1079:
	pop $4
	jmp l1075
l1074:
	end method
	method dbbuild2
	cthis free
	localstring $1
	pop $1
l1081:
	push $1
	push A
	cmpjne
	cmp0
	je l1082
	push $1
	push "null"
	cmpje
	cmp0
	je l1084
	cthis addbeginrow
	popax
	jmp l1083
l1084:
	push 0
	push $1
	cthis addbegin
l1083:
	pop $1
	jmp l1081
l1082:
	end method
	method dbaddvec
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l1085:
	push $3
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1086
	jmp l1088
l1087:
	add $3,1
	pop $3
	jmp l1085
l1088:
	push $2
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1087
l1086:
	end method
	method dbcopy
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis dbcopyfromto
	end method
	method dbcopyrow
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis dbcopyfromto
	end method
	method dbcopyfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push $3
	cthis dbaddrowfromto
	end method
	method dbaddrowfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	localint $6
	push $2
	pop $4
l1089:
	push $4
	push $3
	cmpjl
	cmp0
	je l1090
	jmp l1092
l1091:
	add $4,1
	pop $4
	jmp l1089
l1092:
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push 0
	pop $5
l1093:
	push $5
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1094
	jmp l1096
l1095:
	add $5,1
	pop $5
	jmp l1093
l1096:
	push $6
	push $1
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	cthis add
	jmp l1095
l1094:
	jmp l1091
l1090:
	end method
	method dbadddbrowtorow
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1097:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1098
	jmp l1100
l1099:
	add $4,1
	pop $4
	jmp l1097
l1100:
	push $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	cthis add
	jmp l1099
l1098:
	end method
	method dbremovecol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l1101:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1102
	jmp l1104
l1103:
	add $2,1
	pop $2
	jmp l1101
l1104:
	push $2
	cthis getcolsno
	push $1
	cmpja
	cmp0
	je l1106
	push $2
	push $1
	cthis removeat
l1106:
	jmp l1103
l1102:
	end method
	method dbcopyfromtos
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis dbcopyfromto
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l1108
l1109:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l1110
	cthis dbremovelast
	jmp l1109
l1110:
	jmp l1107
l1108:
	cthis free
l1107:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbgetstringrow
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push $1
	cthis getcolsno
	pop $3
	localint $4
	push 0
	pop $4
l1111:
	push $4
	push $3
	cmpjl
	cmp0
	je l1112
	jmp l1114
l1113:
	add $4,1
	pop $4
	jmp l1111
l1114:
	push $1
	push $4
	cthis get
	popax
	add $2,$a
	pop $2
	jmp l1113
l1112:
	push $2
	end method
	method dbaddrow
	localdef $1
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	pop $2
l1115:
	push A
	push $2
	cmpjne
	cmp0
	je l1116
	push $1
	push $2
	cthis addbegin
	localdef $2
	pop $2
	jmp l1115
l1116:
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l1118
	push $3
	push 0
	cmpjae
	jmp l1120
l1118:
	push 0
	jmp l1120
l1119:
	push 1
l1120:
	cmp0
	je l1121
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l1122:
	push $3
	push $5
	cmpjl
	cmp0
	je l1123
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l1122
l1123:
l1121:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1125
	push $1
	push $2
	cthis get
	jmp l1124
l1125:
	push "null"
l1124:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1127
	push $3
	cthis getcolsno
	push $2
	cmpja
	jmp l1129
l1127:
	push 0
	jmp l1129
l1128:
	push 1
l1129:
	cmp0
	je l1130
	push $3
	push $2
	cthis get
	jmp l1126
l1130:
	push "null"
l1126:
	end method
	method dbget
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1132
	push $2
	push 1
	cthis get
	jmp l1131
l1132:
	push "null"
l1131:
	end method
	method dbgetint
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1134
	push $2
	push 1
	cthis get
	spushs
	spop $h
	call $h,to_i
	jmp l1133
l1134:
	push 0
l1133:
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l1135:
	push $2
	push 0
	cmpjae
	cmp0
	je l1136
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l1138
	push $2
	ret
l1138:
	sub $2,1
	pop $2
	jmp l1135
l1136:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	ret
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1140
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l1140:
	push 0
	ret
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l1142
	localint $3
	push 0
	pop $3
l1143:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1144
	jmp l1146
l1145:
	add $3,1
	pop $3
	jmp l1143
l1146:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l1148
	push $3
	ret
l1148:
	jmp l1145
l1144:
l1142:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1149:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l1150
	jmp l1152
l1151:
	add $3,1
	pop $3
	jmp l1149
l1152:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1154
	push $3
	ret
l1154:
	jmp l1151
l1150:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	ret
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	ret
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	ret
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method dbsetall
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1155:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1156
	jmp l1158
l1157:
	add $2,1
	pop $2
	jmp l1155
l1158:
	localdef $3
	push 0
	pop $3
l1159:
	push $3
	push $2
	cthis getcolsno
	cmpjl
	cmp0
	je l1160
	jmp l1162
l1161:
	add $3,1
	pop $3
	jmp l1159
l1162:
	push $2
	push $3
	push $1
	cthis set
	jmp l1161
l1160:
	jmp l1157
l1156:
	end method
	method dbeach_row
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1163:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1164
	jmp l1166
l1165:
	add $2,1
	pop $2
	jmp l1163
l1166:
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	jmp l1165
l1164:
	end method
	method dbeq
	localstring $1
	pop $1
	cthis getrowsno
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjne
	cmp0
	je l1168
	push 0
	ret
l1168:
	localint $2
	localint $3
	localint $4
	push 0
	pop $4
l1169:
	push $4
	cthis getrowsno
	cmpjl
	cmp0
	je l1170
	jmp l1172
l1171:
	add $4,1
	pop $4
	jmp l1169
l1172:
	push $4
	cthis getcolsno
	pop $2
	push $2
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjne
	cmp0
	je l1174
	push 0
	ret
l1174:
	push 0
	pop $3
l1175:
	push $3
	push $2
	cmpjl
	cmp0
	je l1176
	jmp l1178
l1177:
	add $3,1
	pop $3
	jmp l1175
l1178:
	push $4
	push $3
	cthis get
	push $1
	spushs
	push $4
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1180
	push 0
	ret
l1180:
	jmp l1177
l1176:
	jmp l1171
l1170:
	push 1
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1182
	push 1
	popax
	sub 0,$a
	ret
l1182:
	localint $3
	call $1,rand
	pop $3
l1183:
	push $3
	push $2
	cmpje
	cmp0
	je l1184
	jmp l1186
l1185:
	call $1,rand
	pop $3
	jmp l1183
l1186:
	jmp l1185
l1184:
	push $3
	ret
	end method
	method bin_to_i
	localstring $1
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	call $1,length
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1187:
	push $4
	push 0
	cmpjae
	cmp0
	je l1188
	jmp l1190
l1189:
	sub $4,1
	pop $4
	jmp l1187
l1190:
	push $4
	push 1
	call $1,getb
	push "1"
	cmpje
	cmp0
	je l1192
	push $2
	popax
	add $3,$a
	pop $3
l1192:
	push 2
	popax
	mul $2,$a
	pop $2
	jmp l1189
l1188:
	push $3
	end method
	method internal_filter
	localdef $1
	push "__ft"
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1194
	push $1
	spushs
	push 255
	spop $a
	call [$a],setopacity
	push $1
	jmp l1193
l1194:
	push $1
	spushs
	spop $e
	new filter,[$e]
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],link
	push $1
l1193:
	end method
	method internal_timer
	localdef $1
	push "__tim"
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1196
	push $1
	jmp l1195
l1196:
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push 1
	spop $a
	call [$a],setcycle
	push $1
	spushs
	push A
	push "sfunc"
	push "null"
	spop $a
	call [$a],vars2
	push $1
l1195:
	end method
	method ansetopacity
	localint $1
	pop $1
	cthis internal_filter
	spushs
	push $1
	spop $a
	call [$a],setopacity
	end method
	method anzoomin
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	push 0
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomout
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	push 0
	push $2
	cthis anzoomfadeinout
	end method
	method anfadein
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push 1
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadein
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadeout
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	push $2
	cthis anzoomfadeinout
	end method
	method anfadeout
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push 1
	popax
	sub 0,$a
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadeinout
	localint $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpja
	cmp0
	je l1198
	push 1
	pop $3
	jmp l1197
l1198:
	push $3
	push 0
	cmpjl
	cmp0
	je l1200
	push 1
	popax
	sub 0,$a
	pop $3
l1200:
l1197:
	push $2
	push 0
	cmpja
	cmp0
	je l1202
	push 1
	pop $2
	jmp l1201
l1202:
	push $2
	push 0
	cmpjl
	cmp0
	je l1204
	push 1
	popax
	sub 0,$a
	pop $2
l1204:
l1201:
	cthis show
	localdef $5
	cthis internal_filter
	pop $5
	localdef $6
	cthis internal_timer
	pop $6
	push $5
	spushs
	cthis getname
	spop $a
	call [$a],link
	push $6
	spushs
	push $4
	spop $a
	call [$a],sfunc=
	push $1
	call engine,getloopdelay
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l1206
	push $3
	push 0
	cmpja
	cmp0
	je l1208
	push 255
	cthis ansetopacity
	jmp l1207
l1208:
	push 0
	cthis ansetopacity
l1207:
	push $4
	push "null"
	cmpjne
	cmp0
	je l1210
	push $4
	spushs
	spop $d
	cthis [$d]
l1210:
	ret
l1206:
	localreal $7
	push 255.0
	push $1
	pop $b
	popax
	div $a,$b
	psax
	pop $7
	push $7
	push 1.0
	cmpjl
	cmp0
	je l1212
	push 1.0
	pop $7
l1212:
	localreal $8
	push 1.0
	push $1
	pop $b
	popax
	div $a,$b
	psax
	pop $8
	push $6
	spushs
	push A
	push "sfilter"
	push $5
	push "rstep"
	push $7
	push $3
	pop $b
	popax
	mul $a,$b
	push "ropacity"
	push 0.0
	push "rstepzoom"
	push $8
	push $2
	pop $b
	popax
	mul $a,$b
	push "rzoom"
	push 0.0
	spop $a
	call [$a],vars2
	push $3
	cmp0
	je l1214
	push $5
	spushs
	push $3
	push 1
	cmpje
	cmp0
	je l1216
	push 0
	jmp l1215
l1216:
	push 255
l1215:
	spop $a
	call [$a],setopacity
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getopacity
	spop $a
	call [$a],ropacity=
l1214:
	push $2
	cmp0
	je l1218
	push $5
	spushs
	push $2
	push 1
	cmpje
	cmp0
	je l1220
	push $8
	jmp l1219
l1220:
	push 1
l1219:
	spop $a
	call [$a],setzoom
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getzoomx
	spop $a
	call [$a],rzoom=
l1218:
	push $6
	spushs
	push "onfinish"
	push "global7"
	spop $a
	call [$a],addmethod
	push $6
	spushs
	spop $a
	call [$a],play
	end method
	method global7
	push rstep
	popax
	add ropacity,$a
	pop ropacity
	push rstepzoom
	popax
	add rzoom,$a
	pop rzoom
	push ropacity
	push 255
	cmpjae
	cmp0
	je l1222
	push rstep
	push 0
	cmpja
	jmp l1224
l1222:
	push 0
	jmp l1224
l1223:
	push 1
l1224:
	cmp0
	jne l1226
	push rzoom
	push 1
	cmpjae
	cmp0
	je l1227
	push rstepzoom
	push 0
	cmpja
	jmp l1229
l1227:
	push 0
	jmp l1229
l1228:
	push 1
l1229:
	jmp l1230
l1225:
	push 0
	jmp l1230
l1226:
	push 1
l1230:
	cmp0
	je l1231
	push rstepzoom
	push 0
	cmpja
	cmp0
	je l1233
	push sfilter
	spushs
	push 1
	spop $a
	call [$a],setzoom
l1233:
	push rstep
	push 0
	cmpja
	cmp0
	je l1235
	push sfilter
	spushs
	push 255
	spop $a
	call [$a],setopacity
l1235:
	push sfunc
	push "null"
	cmpjne
	cmp0
	je l1237
	cthis getbuildername
	spushs
	push sfunc
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1237:
	jmp l1221
l1231:
	push ropacity
	push 0
	cmpjle
	cmp0
	je l1239
	push rstep
	push 0
	cmpjl
	jmp l1241
l1239:
	push 0
	jmp l1241
l1240:
	push 1
l1241:
	cmp0
	jne l1243
	push rstepzoom
	push 0
	cmpjl
	cmp0
	je l1244
	push rzoom
	push rstepzoom
	popax
	sub 0,$a
	cmpjl
	jmp l1246
l1244:
	push 0
	jmp l1246
l1245:
	push 1
l1246:
	jmp l1247
l1242:
	push 0
	jmp l1247
l1243:
	push 1
l1247:
	cmp0
	je l1248
	push rstepzoom
	push 0
	cmpjl
	cmp0
	je l1250
	cthis hide
l1250:
	push rstep
	push 0
	cmpjl
	cmp0
	je l1252
	push sfilter
	spushs
	push 0
	spop $a
	call [$a],setopacity
l1252:
	push sfunc
	push "null"
	cmpjne
	cmp0
	je l1254
	cthis getbuildername
	spushs
	push sfunc
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1254:
	jmp l1238
l1248:
	push rstep
	push 0.0
	cmpjne
	cmp0
	je l1256
	push sfilter
	spushs
	push ropacity
	spop $a
	call [$a],setopacity
l1256:
	push rstepzoom
	push 0.0
	cmpjne
	cmp0
	je l1258
	push sfilter
	spushs
	push rzoom
	spop $a
	call [$a],setzoom
l1258:
	cthis play
l1238:
l1221:
	end method
	method imgbuildfromlist
	new vector,__vtmp
	push "string"
	call __vtmp,type
	call __vtmp,vecloadargs
	push "__vtmp"
	cthis imgbuildfromvec
	delete __vtmp
	end method
	method imgbuildfromvec
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],empty
	cmp0
	je l1260
	ret
l1260:
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],first
	pop $2
	localint $3
	push $2
	spushs
	spop $a
	call [$a],getpx
	pop $3
	localint $4
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $4
	localint $5
	push $2
	spushs
	spop $a
	call [$a],getex
	pop $5
	localint $6
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $6
	localint $7
	push 1
	pop $7
l1261:
	push $7
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1262
	jmp l1264
l1263:
	add $7,1
	pop $7
	jmp l1261
l1264:
	push $1
	spushs
	push $7
	spop $a
	call [$a],get
	pop $2
	push $3
	push $2
	spushs
	spop $a
	call [$a],getpx
	cmpja
	cmp0
	je l1266
	push $2
	spushs
	spop $a
	call [$a],getpx
	pop $3
l1266:
	push $4
	push $2
	spushs
	spop $a
	call [$a],getpy
	cmpja
	cmp0
	je l1268
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $4
l1268:
	push $5
	push $2
	spushs
	spop $a
	call [$a],getex
	cmpjl
	cmp0
	je l1270
	push $2
	spushs
	spop $a
	call [$a],getex
	pop $5
l1270:
	push $6
	push $2
	spushs
	spop $a
	call [$a],getey
	cmpjl
	cmp0
	je l1272
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $6
l1272:
	jmp l1263
l1262:
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis create
	push $3
	push $4
	cthis setpos
	push 0
	pop $7
l1273:
	push $7
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1274
	jmp l1276
l1275:
	add $7,1
	pop $7
	jmp l1273
l1276:
	push $1
	spushs
	push $7
	spop $a
	call [$a],get
	cthis blit
	jmp l1275
l1274:
	end method
	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push iResX
	push iResY
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class TicksCounter
	method init
	new int,istart
	end method
	method start
	call engine,getticks
	pop istart
	end method
	method stop
	call engine,getticks
	push istart
	pop $b
	popax
	sub $a,$b
	pop istart
	end method
	method get
	push istart
	ret
	end method
	method stopget
	cthis stop
	cthis get
	ret
	end method
	method print
	localstring $1
	pop $1
	push $1
	push " delay: "
	pop $b
	popax
	add $a,$b
	cthis stopget
	pop $b
	popax
	add $a,$b
	push " ms"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method put
	push ""
	cthis print
	end method
	end class

	class ObjController
	method init
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],addgmobj
	end method
	method removefromgame
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],removegmobj
	end method
	end class

	class LObjController
	parent ObjController
	parent classlocker
	method init
	clparent ObjController,init
	clparent classlocker,init
	end method
	end class

	class gmbankvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	push "iid"
	push 1
	popax
	sub 0,$a
	cthis var2
	end method
	method startrand
	cthis size
	push 0
	cmpja
	cmp0
	je l1278
	cthis size
	spushs
	spop $h
	call $h,rand
	pop iid
l1278:
	end method
	method play
	push 0
	cthis stop
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpje
	cmp0
	je l1280
	ret
l1280:
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	cthis get
	spushs
	spop $a
	call [$a],play
	end method
	method onfinish
	end method
	method stop
	localint $1
	pop $1
	cthis isplaying
	cmp0
	je l1282
	cthis getplay
	spushs
	push $1
	spop $a
	call [$a],stop
	push $1
	cmp0
	je l1284
	cthis onfinish
l1284:
l1282:
	end method
	method isplaying
	push iid
	push 0
	cmpjae
	cmp0
	je l1286
	cthis getplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l1285
l1286:
	push 0
l1285:
	end method
	method getplay
	push iid
	cthis get
	ret
	end method
	end class

	class ClassGameController
	method init
	new gmobjvec,__grobj
	new string,GAME
	cthis getname
	pop GAME
	end method
	method addgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,add
	end method
	method removegmobj
	localstring $1
	pop $1
	push $1
	call __grobj,remove
	end method
	method isgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,contains
	end method
	method deletegmobj
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1288
	push $1
	cthis removegmobj
	push $1
	spushs
	spop $d
	delete [$d]
l1288:
	end method
	method mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	end class

	class GameController
	parent ClassGameController
	parent classlocker
	method init
	localstring $1
	pop $1
	clparent ClassGameController,init
	clparent classlocker,init
	new db,_dbsnd
	push "|"
	call _dbsnd,setseparator
	new string,_sndbase
	push $1
	pop _sndbase
	new timer,__dblclick
	push 250
	call __dblclick,delay
	push 1
	call __dblclick,settick
	new int,_itimersnddelay
	push 10000
	pop _itimersnddelay
	end method
	method game_exit
	end method
	method setsndbase
	localstring $1
	pop $1
	push $1
	pop _sndbase
	end method
	method say
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis sayf
	end method
	method sayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push $2
	cthis getsndtxt
	pop $4
	push $4
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	push $4
	push $3
	cthis cplayf
	end method
	method getsndtxt
	localstring $1
	pop $1
	localstring $2
	push "snd"
	push _sndbase
	pop $b
	popax
	add $a,$b
	call _dbsnd,getrowsno
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push $1
	cthis addsnd
	push $2
	ret
	end method
	method _sndtimerstart
	ret
	localint $1
	push 1
	cthis getname
	call _dbsnd,dbfindbycol
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1290
	push $1
	push 2
	call _dbsnd,get
	call engine,print
	jmp l1289
l1290:
	cthis getname
	push " not in _dbsnd"
	pop $b
	popax
	add $a,$b
	call engine,print
l1289:
	push ""
	call engine,print
	end method
	method addsndf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis addsnd
	push $3
	push "null"
	cmpjne
	cmp0
	je l1292
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1294
	push 1
	call $1,strsubb
	pop $1
l1294:
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l1292:
	end method
	method asf
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push "end"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addsndff
	end method
	method addsndff
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis addsndf
	end method
	method gmconsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l1296
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	call subtitle,register
l1296:
	end method
	method addsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	call _dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1298
	push 1
	call $1,strsubb
	pop $1
	push _sndbase
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1297
l1298:
	push _sndbase
	push $3
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $4
l1297:
	localstring $5
	call gameapi,getgamename
	pop $5
	push igmsoundson
	cmp0
	je l1300
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	jmp l1302
l1300:
	push 0
	jmp l1302
l1301:
	push 1
l1302:
	cmp0
	je l1303
	push $5
	spushs
	push $1
	push $4
	spop $a
	call [$a],gmconsnd
	jmp l1299
l1303:
	push $5
	spushs
	push $1
	call $2,length
	push _itimersnddelay
	pop $b
	popax
	mul $a,$b
	push 1
	spop $a
	call [$a],newtimer
	push $1
	spushs
	push "onstart"
	push "_sndtimerstart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstartstopflag"
	push "GameController0"
	spop $a
	call [$a],addmethod
l1299:
	push $3
	push $4
	call _dbsnd,add
	push $3
	push $1
	call _dbsnd,add
	push $3
	push $2
	call _dbsnd,add
	end method
	method GameController0
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method addbank
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	localstring $3
	pop $3
	localstring $4
l1304:
	push $3
	push A
	cmpjne
	cmp0
	je l1305
	push $3
	cthis getsndtxt
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],addbegin
	push $2
	push "null"
	cmpjne
	cmp0
	je l1307
	push $4
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
l1307:
	pop $3
	jmp l1304
l1305:
	end method
	method exportbank
	localstring $1
	pop $1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $e
	new db,[$e]
	call [$e],GameController1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method GameController1
	localdef $1
	pop $1
	push 1
	cthis dbbuild
	push "|"
	cthis setseparator
	push "GameController2"
	cthis dbeach_row
	push igmdebug
	cmp0
	je l1309
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis save
l1309:
	end method
	method GameController2
	localdef $1
	pop $1
	localdef $2
	cthis getname
	spushs
	push "__db"
	spop $h
	call $h,strsubbs
	pop $2
	push $1
	push "snd"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis addbegin
	push $1
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis addbegin
	end method
	method importbank
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	push $2
	push $3
	push "null"
	push $1
	cthis importgroupto
	end method
	method exportsnd
	localstring $1
	pop $1
	push igmdebug
	cmp0
	je l1311
	push $1
	call _dbsnd,save
l1311:
	end method
	method stdexportsnd
	push "exports/"
	push _sndbase
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis exportsnd
	end method
	method sounds=
	cthis buildsnds
	end method
	method sounds_from
	localstring $1
	pop $1
	new db,__tmpdb
	localdef $2
	push _sndbase
	pop $2
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localdef $3
	pop $3
	localint $4
	localstring $5
l1312:
	push A
	push $3
	cmpjne
	cmp0
	je l1313
	localdef $6
	pop $6
	push 1
	push $6
	call __tmpdb,dbfindbycol
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1315
	cthis getsndpath
	push $4
	push 0
	call __tmpdb,get
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	cmp0
	je l1317
	push GAME
	spushs
	push $6
	push $4
	push 0
	call __tmpdb,get
	spop $a
	call [$a],gmconsnd
	push $6
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	jmp l1316
l1317:
	push $6
	push $4
	push 1
	call __tmpdb,get
	push $3
	cthis addsndf
l1316:
l1315:
	localdef $3
	pop $3
	jmp l1312
l1313:
	call _dbsnd,free
	delete __tmpdb
	push $2
	cthis setsndbase
	end method
	method buildsnds
	call _dbsnd,free
	new db,__dbsnd
	push 3
	call __dbsnd,dbbuild
	push "__dbsnd"
	cthis buildfromdb
	delete __dbsnd
	end method
	method buildfromdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1318:
	push $2
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1319
	jmp l1321
l1320:
	add $2,1
	pop $2
	jmp l1318
l1321:
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 2
	spop $a
	call [$a],get
	cthis addsndf
	jmp l1320
l1319:
	cthis stdexportsnd
	end method
	method importsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis importgroup
	end method
	method importgroup
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis importgroupto
	end method
	method importgroupto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	new db,__tmpdb
	localdef $5
	push _sndbase
	pop $5
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localstring $6
	localint $7
	push 0
	pop $7
l1322:
	push $7
	call __tmpdb,getrowsno
	cmpjl
	cmp0
	je l1323
	jmp l1325
l1324:
	add $7,1
	pop $7
	jmp l1322
l1325:
	push $7
	push 1
	call __tmpdb,get
	pop $6
	push $3
	push "null"
	cmpje
	cmp0
	jne l1328
	push $3
	spushs
	push $6
	spop $a
	call [$a],contains
	jmp l1329
l1327:
	push 0
	jmp l1329
l1328:
	push 1
l1329:
	cmp0
	je l1330
	push $6
	push $7
	push 2
	call __tmpdb,get
	push $2
	cthis addsndf
	push $4
	push "null"
	cmpjne
	cmp0
	je l1332
	push $4
	spushs
	push $6
	spop $a
	call [$a],add
l1332:
l1330:
	jmp l1324
l1323:
	call _dbsnd,free
	call __tmpdb,free
	delete __tmpdb
	push $5
	cthis setsndbase
	end method
	method freesnd
	call _dbsnd,free
	end method
	method lockall
	push "lock"
	call __grobj,eval
	cthis lock
	end method
	method unlockall
	push "unlock"
	call __grobj,eval
	cthis unlock
	end method
	method gmunlockall
	push GAME
	spushs
	spop $a
	call [$a],unlockall
	end method
	method gmlockall
	push GAME
	spushs
	spop $a
	call [$a],lockall
	end method
	method lock=
	localint $1
	pop $1
	push $1
	cmp0
	je l1334
	cthis gmlockall
	jmp l1333
l1334:
	cthis gmunlockall
l1333:
	end method
	method gmcontrol_mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mousemove
	cthis gmcontrol_mousemove
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	call __dblclick,isplaying
	cmp0
	je l1336
	cthis mouse_dblclick
	jmp l1335
l1336:
	call __dblclick,play
l1335:
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	method mouserrel
	push "onmouserrel"
	call __grobj,eval
	cthis mouse_rrel
	end method
	method keydown
	push "onkeydown"
	call __grobj,eval
	cthis key_down
	end method
	end class

	class classadv
	parent classgame
	method init
	clparent classgame,init
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new path,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbutton,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	end class

	class classquest
	method init
	new vector,vqst
	push "string"
	call vqst,type
	end method
	method isdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	ret
	end method
	method notdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	ret
	end method
	method done
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	cmp0
	je l1338
	push $1
	call vqst,add
l1338:
	end method
	method reset
	call vqst,free
	end method
	method save
	localstring $1
	pop $1
	push $1
	call vqst,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call vqst,load
	end method
	end class

	new classquest,clqs
	method winsave
	localstring $1
	pop $1
	new db,_db_win
	push "output.db"
	call _db_win,load
	localdef $2
	call _db_win,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	call _db_win,add
	push "output.db"
	call _db_win,save
	delete _db_win
	end method
	method saveexist
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	end method
	method vecsave
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis save
	end method
	method vecload
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis load
	end method
	class classfullsave
	method init
	localstring $1
	pop $1
	new db,dbsav
	push "|"
	call dbsav,setseparator
	new string,sstdfile
	push $1
	cthis setfile
	new int,saveonset
	push 0
	pop saveonset
	end method
	method save
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call dbsav,save
	end method
	method _load
	localstring $1
	pop $1
	push $1
	call engine,fileexist
	cmp0
	je l1340
	call dbsav,free
	push $1
	call dbsav,load
l1340:
	end method
	method load
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis _load
	end method
	method print
	call dbsav,print
	end method
	method setfile
	localstring $1
	pop $1
	push $1
	pop sstdfile
	end method
	method stdload
	push sstdfile
	cthis load
	end method
	method stdsave
	push sstdfile
	cthis save
	end method
	method free
	call dbsav,free
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1342
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l1341
l1342:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l1341:
	push saveonset
	cmp0
	je l1344
	cthis stdsave
l1344:
	end method
	method bset
	localstring $1
	pop $1
	push $1
	push 1
	cthis set
	end method
	method get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1346
	push $2
	push 1
	call dbsav,get
	jmp l1345
l1346:
	push "null"
l1345:
	ret
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1348
	push $3
	push 1
	call dbsav,get
	push $2
	cmpje
	jmp l1347
l1348:
	push 0
l1347:
	ret
	end method
	method bis
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1350
	push $2
	push 1
	call dbsav,get
	push 0
	cmpjne
	jmp l1349
l1350:
	push 0
l1349:
	ret
	end method
	method has
	localstring $1
	pop $1
	push $1
	call dbsav,findbyrow
	push 0
	cmpjae
	end method
	method bgo
	localstring $1
	pop $1
	push $1
	cthis bis
	neg
	cmp0
	je l1352
	push $1
	cthis bset
	push 1
	jmp l1351
l1352:
	push 0
l1351:
	end method
	method saveonset=
	localint $1
	pop $1
	push $1
	pop saveonset
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1354
	push $2
	call dbsav,removerow
	push saveonset
	cmp0
	je l1356
	cthis stdsave
l1356:
l1354:
	end method
	end class

	class StringChecker
	method init
	end method
	method isdigit
	localstring $1
	pop $1
	call $1,to_i
	push 0
	cmpjne
	cmp0
	jne l1358
	push 0
	push 1
	call $1,getb
	push "0"
	cmpje
	jmp l1359
l1357:
	push 0
	jmp l1359
l1358:
	push 1
l1359:
	ret
	end method
	method getint
	localstring $1
	pop $1
	call $1,to_i
	ret
	end method
	method getreal
	localstring $1
	pop $1
	call $1,to_r
	ret
	end method
	method isreal
	localstring $1
	pop $1
	push $1
	cthis isdigit
	cmp0
	je l1360
	push "."
	call $1,contains
	jmp l1362
l1360:
	push 0
	jmp l1362
l1361:
	push 1
l1362:
	ret
	end method
	method isstring
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "\""
	cmpje
	ret
	end method
	method getstring
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	ret
	end method
	end class

	class Script
	method init
	localstring $1
	pop $1
	new db,__dbcode
	new string,__sdb
	new int,__irow
	new int,__icol
	new string,__sreads
	new vector,__vec
	push "string"
	call __vec,type
	new string,__sarg
	new int,__iarg
	new real,__rarg
	new StringChecker,__csc
	push "int"
	new map2,__mp
	localint $2
	push 0
	pop $2
l1363:
	push $2
	push 10
	cmpjl
	cmp0
	je l1364
	jmp l1366
l1365:
	add $2,1
	pop $2
	jmp l1363
l1366:
	push "ARG"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	jmp l1365
l1364:
	push $1
	cthis load
	end method
	method ARG=
	localint $1
	localstring $2
	pop $2
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method ARG
	localint $1
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	end method
	method load
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1368
	ret
l1368:
	push "."
	call $1,contains
	cmp0
	je l1370
	push "__dbcode"
	pop __sdb
	push $1
	call __dbcode,loadbeh
	jmp l1369
l1370:
	push $1
	pop __sdb
l1369:
	call __mp,free
	localint $2
	push 0
	pop $2
l1371:
	push $2
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1372
	jmp l1374
l1373:
	add $2,1
	pop $2
	jmp l1371
l1374:
	push __sdb
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push "func"
	cmpje
	cmp0
	je l1376
	push __sdb
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $2
	call __mp,add
l1376:
	jmp l1373
l1372:
	push "init"
	cthis call
	end method
	method get
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method isvar
	localstring $1
	pop $1
	push "$"
	call $1,contains
	ret
	end method
	method getvar
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	neg
	cmp0
	je l1378
	push $1
	spushs
	spop $e
	new def,[$e]
l1378:
	push $1
	ret
	end method
	method isfunc
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l1379
	push $1
	call __csc,isreal
	neg
	jmp l1381
l1379:
	push 0
	jmp l1381
l1380:
	push 1
l1381:
	ret
	end method
	method getfunc
	localstring $1
	pop $1
	call __vec,free
	push "."
	call $1,strgetto
	call __vec,add
	push "."
	call $1,strgetfrom
	call __vec,add
	end method
	method _get
	add __icol,1
	pop __icol
	push __sdb
	spushs
	push __irow
	push __icol
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	ret
	end method
	method isnext
	push __icol
	push __sdb
	spushs
	push __irow
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1383
	push __sdb
	spushs
	push __irow
	push __icol
	spop $a
	call [$a],get
	pop __sreads
	push 1
	ret
l1383:
	push 0
	ret
	end method
	method perror
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cmp0
	je l1385
	push "error: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
l1385:
	end method
	method interpcall
	localstring $1
	pop $1
	push $1
	cthis getfunc
	localstring $2
	push 0
	call __vec,get
	pop $2
	push 0
	push 1
	call $2,getb
	push "*"
	cmpje
	cmp0
	je l1387
	push 1
	call $2,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1387:
	localstring $3
	push 1
	call __vec,get
	pop $3
	push 0
	push 1
	call $3,getb
	push "*"
	cmpje
	cmp0
	je l1389
	push 1
	call $3,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1389:
	call __vec,free
	add __icol,1
	pop __icol
	localstring $4
	cthis _get
	pop $4
l1390:
	push $4
	push ")"
	cmpjne
	cmp0
	je l1391
	push $4
	cthis getexpr
	cthis _get
	pop $4
	jmp l1390
l1391:
	push $2
	push "this"
	cmpje
	cmp0
	je l1393
	push "null"
	pop $2
l1393:
	push $2
	push $3
	cthis callfun
	end method
	method getvname
	localstring $1
	pop $1
	push $1
	cthis isvar
	cmp0
	je l1395
	push $1
	cthis getvar
	pop $1
	jmp l1394
l1395:
	push $1
	call __csc,isreal
	cmp0
	je l1397
	call $1,to_r
	pop __rarg
	push "__rarg"
	pop $1
	jmp l1396
l1397:
	push $1
	call __csc,isdigit
	cmp0
	je l1399
	push $1
	pop __iarg
	push "__iarg"
	pop $1
	jmp l1398
l1399:
	push $1
	call __csc,isstring
	cmp0
	je l1401
	push $1
	call __csc,getstring
	pop __sarg
	push "__sarg"
	pop $1
l1401:
l1398:
l1396:
l1394:
	push $1
	ret
	end method
	method isscriptfun
	localstring $1
	pop $1
	push "->"
	call $1,contains
	ret
	end method
	method getscriptfun
	localstring $1
	pop $1
	push 2
	call $1,strsubb
	ret
	end method
	method getexpr
	localstring $1
	pop $1
	push $1
	call __csc,isstring
	cmp0
	je l1403
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
	jmp l1402
l1403:
	push $1
	cthis isfunc
	cmp0
	je l1405
	push $1
	cthis interpcall
	jmp l1404
l1405:
	push $1
	cthis isscriptfun
	cmp0
	je l1407
	localint $2
	push __irow
	pop $2
	localint $3
	push __icol
	pop $3
	push $1
	cthis getscriptfun
	cthis call
	push $2
	pop __irow
	push $3
	pop __icol
	jmp l1406
l1407:
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
l1406:
l1404:
l1402:
	end method
	method cmp
	localint $1
	push 0
	pop $1
	localdef $2
	cthis _get
	cthis getexpr
	pop $2
	localstring $3
	cthis _get
	pop $3
	localdef $4
	cthis _get
	cthis getexpr
	pop $4
	push $3
	spushs
	push "=="
	cmpst
	jne l1409
	spop $a
	push $2
	push $4
	cmpje
	pop $1
	jmp l1408
l1409:
	push "!="
	cmpst
	jne l1410
	spop $a
	push $2
	push $4
	cmpjne
	pop $1
	jmp l1408
l1410:
	push "<"
	cmpst
	jne l1411
	spop $a
	push $2
	push $4
	cmpjl
	pop $1
	jmp l1408
l1411:
	push ">"
	cmpst
	jne l1412
	spop $a
	push $2
	push $4
	cmpja
	pop $1
	jmp l1408
l1412:
	push "<="
	cmpst
	jne l1413
	spop $a
	push $2
	push $4
	cmpjle
	pop $1
	jmp l1408
l1413:
	push ">="
	cmpst
	jne l1414
	spop $a
	push $2
	push $4
	cmpjae
	pop $1
	jmp l1408
l1414:
	spop $a
l1408:
	cthis _get
	pop $3
	push $3
	push "||"
	cmpje
	cmp0
	je l1416
	push $1
	cmp0
	jne l1418
	cthis cmp
	jmp l1419
l1417:
	push 0
	jmp l1419
l1418:
	push 1
l1419:
	ret
	jmp l1415
l1416:
	push $3
	push "&&"
	cmpje
	cmp0
	je l1421
	push $1
	cmp0
	je l1422
	cthis cmp
	jmp l1424
l1422:
	push 0
	jmp l1424
l1423:
	push 1
l1424:
	ret
	jmp l1420
l1421:
	push $1
	ret
l1420:
l1415:
	end method
	method containsfun
	localstring $1
	pop $1
	push $1
	call __mp,contains
	end method
	method call
	localstring $1
	pop $1
	push $1
	call __mp,contains
	neg
	cmp0
	je l1426
	ret
l1426:
	push $1
	call __mp,get
	pop __irow
	add __irow,1
	pop __irow
	push 0
	pop __icol
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	localint $12
	localint $13
l1427:
	push $2
	cmp0
	je l1428
	push 0
	pop __icol
	cthis _get
	pop $8
	push $8
	spushs
	push "new"
	cmpst
	jne l1430
	spop $a
	cthis _get
	pop $8
	cthis _get
	pop $9
	push 1
	call $9,strsubb
	pop $9
	cthis isnext
	cmp0
	je l1432
	push __sreads
	push "["
	cmpje
	cmp0
	je l1434
	add __icol,1
	pop __icol
	cthis _get
	pop $11
	push 0
	pop $12
l1435:
	push $12
	push $11
	cmpjl
	cmp0
	je l1436
	jmp l1438
l1437:
	add $12,1
	pop $12
	jmp l1435
l1438:
	push $8
	spushs
	push $9
	push $12
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	jmp l1437
l1436:
	jmp l1433
l1434:
	add __icol,1
	pop __icol
l1439:
	cthis isnext
	cmp0
	je l1440
	push __sreads
	push ")"
	cmpjne
	jmp l1442
l1440:
	push 0
	jmp l1442
l1441:
	push 1
l1442:
	cmp0
	je l1443
	cthis _get
	cthis getexpr
	jmp l1439
l1443:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1433:
	jmp l1431
l1432:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1431:
	add __irow,1
	pop __irow
	jmp l1429
l1430:
	push "delete"
	cmpst
	jne l1444
	spop $a
	cthis _get
	cthis getvar
	spushs
	spop $d
	delete [$d]
	add __irow,1
	pop __irow
	jmp l1429
l1444:
	push $8
	push "if"
	cmpje
	cmp0
	jne l1446
	push $6
	cmp0
	jne l1446
	push $5
	jmp l1447
l1445:
	push 0
	jmp l1447
l1446:
	push 1
l1447:
	cmp0
	je l1449
	push $8
	jmp l1448
l1449:
	push ""
l1448:
	cmpst
	jne l1450
	spop $a
	add __icol,1
	pop __icol
	cthis cmp
	pop $4
	push $8
	push "if"
	cmpje
	cmp0
	je l1452
	push 1
	pop $3
l1452:
	push 0
	pop $6
	push 0
	pop $5
	add __irow,1
	pop __irow
	push $4
	neg
	cmp0
	je l1454
	push 1
	pop $12
l1455:
	push $12
	cmp0
	je l1456
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	pop $8
	push $8
	push "else"
	cmpje
	cmp0
	jne l1459
	push $8
	push "elif"
	cmpje
	cmp0
	jne l1459
	push $8
	push "fi"
	cmpje
	cmp0
	jne l1459
	push $8
	push "done"
	cmpje
	jmp l1460
l1458:
	push 0
	jmp l1460
l1459:
	push 1
l1460:
	cmp0
	je l1461
	push 0
	pop $12
	jmp l1457
l1461:
	add __irow,1
	pop __irow
l1457:
	jmp l1455
l1456:
l1454:
	jmp l1429
l1450:
	push "else"
	cmpst
	jne l1462
	spop $a
	push $3
	neg
	push "else without if"
	cthis perror
	add __irow,1
	pop __irow
	push $4
	cmp0
	je l1464
l1465:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1466
	add __irow,1
	pop __irow
	jmp l1465
l1466:
l1464:
	jmp l1429
l1462:
	push "fi"
	cmpst
	jne l1467
	spop $a
	push $3
	neg
	push "fi without if"
	cthis perror
	push 0
	pop $3
	push 0
	pop $4
	push 0
	pop $6
	add __irow,1
	pop __irow
	jmp l1429
l1467:
	push "elif"
	cmpst
	jne l1468
	spop $a
	push $4
	cmp0
	je l1470
	add __irow,1
	pop __irow
l1471:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1472
	add __irow,1
	pop __irow
	jmp l1471
l1472:
	jmp l1469
l1470:
	push 1
	pop $6
l1469:
	jmp l1429
l1468:
	push "end"
	cmpst
	jne l1473
	spop $a
	push 0
	pop $2
	jmp l1429
l1473:
	push "while"
	cmpst
	jne l1474
	spop $a
	push __irow
	pop $7
	push 1
	pop $5
	jmp l1429
l1474:
	push "done"
	cmpst
	jne l1475
	spop $a
	push $4
	cmp0
	je l1477
	push $7
	pop __irow
	jmp l1476
l1477:
	add __irow,1
	pop __irow
l1476:
	jmp l1429
l1475:
	push "print"
	cmpst
	jne l1478
	spop $a
	push ""
	pop $8
l1479:
	cthis isnext
	cmp0
	je l1480
	cthis _get
	cthis getexpr
	popax
	add $8,$a
	pop $8
	jmp l1479
l1480:
	push $8
	call engine,print
	add __irow,1
	pop __irow
	jmp l1429
l1478:
	push "return"
	cmpst
	jne l1481
	spop $a
	cthis isnext
	cmp0
	je l1483
	push __sreads
	cthis getexpr
l1483:
	ret
	jmp l1429
l1481:
	spop $a
	push "$"
	call $8,contains
	cmp0
	je l1485
	push $8
	cthis getvar
	pop $8
	add __icol,1
	pop __icol
	push $8
	spushs
	cthis _get
	cthis getexpr
	spop $b
	popax
	mov [$b],$a
l1486:
	cthis isnext
	cmp0
	je l1487
	add __icol,1
	pop __icol
	localdef $14
	cthis _get
	cthis getexpr
	pop $14
	push __sreads
	spushs
	push "+"
	cmpst
	jne l1489
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	add [$b],$a
	pop [$b]
	jmp l1488
l1489:
	push "-"
	cmpst
	jne l1490
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	sub [$b],$a
	pop [$b]
	jmp l1488
l1490:
	push "*"
	cmpst
	jne l1491
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	mul [$b],$a
	pop [$b]
	jmp l1488
l1491:
	push "/"
	cmpst
	jne l1492
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$a
	jmp l1488
l1492:
	push "%"
	cmpst
	jne l1493
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$d
	jmp l1488
l1493:
	spop $a
l1488:
	jmp l1486
l1487:
	jmp l1484
l1485:
	push $8
	cthis getexpr
l1484:
	add __irow,1
	pop __irow
l1429:
	push __irow
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1495
	push 1
	push "function "
	push $1
	pop $b
	popax
	add $a,$b
	push " not finished!"
	pop $b
	popax
	add $a,$b
	cthis perror
	push 0
	pop $2
l1495:
	jmp l1427
l1428:
	end method
	end class

	method animaloader_load
	localstring $1
	pop $1
	new db,_dbanl
	push $1
	cthis getpath
	call _dbanl,loadbeh
	localstring $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	push 0
	pop $6
l1496:
	push $6
	call _dbanl,getrowsno
	cmpjl
	cmp0
	je l1497
	jmp l1499
l1498:
	add $6,1
	pop $6
	jmp l1496
l1499:
	push $6
	call _dbanl,getcolsno
	push 0
	cmpja
	cmp0
	je l1501
	push 0
	pop $5
	push $6
	push $5
	call _dbanl,get
	spushs
	push "an:"
	cmpst
	jne l1503
	spop $a
	add $5,1
	pop $5
	push $6
	push $5
	call _dbanl,get
	pop $2
	add $5,1
	pop $5
	push ".pyz"
	call $2,contains
	cmp0
	je l1505
	push "an"
	push ".pyz"
	call $2,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	push $2
	push 0
	cthis newanima
	jmp l1504
l1505:
	push $6
	push $5
	call _dbanl,get
	push $2
	cthis copyanima
	add $5,1
	pop $5
l1504:
	localint $7
	push $5
	pop $7
l1506:
	push $7
	push $6
	call _dbanl,getcolsno
	cmpjl
	cmp0
	je l1507
	jmp l1509
l1508:
	add $7,1
	pop $7
	jmp l1506
l1509:
	push $6
	push $7
	call _dbanl,get
	spushs
	push "-z"
	cmpst
	jne l1511
	spop $a
	add $7,1
	pop $7
	push $3
	spushs
	push $6
	push $7
	call _dbanl,get
	spop $a
	call [$a],setz
	jmp l1510
l1511:
	push "-hide"
	cmpst
	jne l1512
	spop $a
	push $3
	spushs
	spop $a
	call [$a],hide
	jmp l1510
l1512:
	push "-opacityframe"
	cmpst
	jne l1513
	spop $a
	push $3
	spushs
	spop $a
	call [$a],anopacityframe
	jmp l1510
l1513:
	push "-nplay"
	cmpst
	jne l1514
	spop $a
	add $7,1
	pop $7
	push $3
	spushs
	push $6
	push $7
	call _dbanl,get
	spushs
	spop $h
	call $h,to_i
	spop $a
	call [$a],play
	jmp l1510
l1514:
	push "-play"
	cmpst
	jne l1515
	spop $a
	add $7,1
	pop $7
	push $3
	spushs
	push $6
	push $7
	call _dbanl,get
	spop $a
	call [$a],play
	jmp l1510
l1515:
	push "-delay"
	cmpst
	jne l1516
	spop $a
	add $7,1
	pop $7
	push $3
	spushs
	push $6
	push $7
	call _dbanl,get
	spop $a
	call [$a],setdelay
	jmp l1510
l1516:
	push "-drawmode"
	cmpst
	jne l1517
	spop $a
	push $6
	push $7
	call _dbanl,get
	pop $2
	add $7,1
	pop $7
	push $2
	push "lineardodge"
	cmpje
	cmp0
	je l1519
	push $3
	spushs
	push 1
	spop $a
	call [$a],setdrawmode
l1519:
	jmp l1510
l1517:
	push "-hideonstart"
	cmpst
	jne l1520
	spop $a
	push $3
	spushs
	spop $a
	call [$a],anhideonsetframe
	jmp l1510
l1520:
	spop $a
	push $3
	push "_dbanl"
	push $6
	push $7
	cthis animaloader_an
	pop $7
l1510:
	jmp l1508
l1507:
	jmp l1502
l1503:
	spop $a
l1502:
l1501:
	jmp l1498
l1497:
	end method
	method animaloader_an
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	end method
	method transparent
	push 0
	push 0
	push 0
	push 0
	ret
	end method
	method red
	push 255
	push 0
	push 0
	ret
	end method
	method green
	push 0
	push 255
	push 0
	ret
	end method
	method blue
	push 0
	push 0
	push 255
	ret
	end method
	method white
	push 255
	push 255
	push 255
	ret
	end method
	method black
	push 0
	push 0
	push 0
	ret
	end method
	method grey
	localint $1
	pop $1
	push $1
	push $1
	push $1
	ret
	end method
	method yellow
	push 255
	push 255
	push 0
	ret
	end method
	class Color
	method init
	push A
	push "r"
	push "g"
	push "b"
	push "a"
	cthis vars
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],get
	cthis set
	end method
	method img=
	localdef $1
	pop $1
	push $1
	spushs
	push $1
	clparent classansearcher,firstnotrx1y
	spop $a
	call [$a],getrgba
	pop a
	pop b
	pop g
	pop r
	end method
	method get
	push r
	push g
	push b
	push a
	ret
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop a
	pop b
	pop g
	pop r
	end method
	method rgb=
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	pop b
	pop g
	pop r
	end method
	method rgb
	push r
	push g
	push b
	ret
	end method
	method print
	push "Color::"
	cthis getname
	pop $b
	popax
	add $a,$b
	push " (r,g,b,a) = ("
	pop $b
	popax
	add $a,$b
	push r
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push g
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push a
	pop $b
	popax
	add $a,$b
	push ")"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	end class

	class classasker
	parent newvars
	method init
	clparent newvars,init
	new string,sfuncyes
	push "null"
	pop sfuncyes
	new string,sfuncno
	push "null"
	pop sfuncno
	new string,ssndask
	new string,ssndyes
	new string,ssndno
	new classsound,clsnd
	end method
	method reset
	push "null"
	pop sfuncyes
	push "null"
	pop sfuncno
	call buts,resetall
	end method
	method setfuncs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sfuncyes
	push $2
	pop sfuncno
	end method
	method fxonmovon
	localstring $1
	pop $1
	push $1
	call buts,sfxonmovon
	end method
	method setmouse
	localstring $1
	pop $1
	push "yes"
	push $1
	call buts,newmouse
	push "no"
	push $1
	call buts,newmouse
	end method
	method load
	localstring $1
	localint $2
	pop $2
	pop $1
	new classbutton,buts
	push $1
	push $2
	push "null"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call buts,disableall
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push $5
	cthis setfuncs
	push $1
	push $2
	push $3
	cthis ask2
	end method
	method ask2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	pop ssndask
	push $2
	pop ssndyes
	push $3
	pop ssndno
	call gameapi,pause
	call buts,benableall
	push "bkg"
	call buts,pause
	call clsnd,creset
	push $1
	call clsnd,cbplay
	cthis getname
	push "_ask"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovon
	localstring $1
	pop $1
	push $1
	push "yes"
	cmpje
	cmp0
	je l1522
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndyes
	call clsnd,cbplay
	jmp l1521
l1522:
	push $1
	push "no"
	cmpje
	cmp0
	je l1524
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndno
	call clsnd,cbplay
l1524:
l1521:
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "bkg"
	cmpje
	cmp0
	je l1526
	ret
l1526:
	call gameapi,resume
	call buts,disableall
	push 0
	call clsnd,cactsndstop
	push $1
	push "yes"
	cmpje
	cmp0
	je l1528
	push sfuncyes
	push "null"
	cmpjne
	jmp l1530
l1528:
	push 0
	jmp l1530
l1529:
	push 1
l1530:
	cmp0
	je l1531
	push sfuncyes
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_yes"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l1527
l1531:
	push $1
	push "no"
	cmpje
	cmp0
	je l1533
	push sfuncno
	push "null"
	cmpjne
	jmp l1535
l1533:
	push 0
	jmp l1535
l1534:
	push 1
l1535:
	cmp0
	je l1536
	push sfuncno
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_no"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1536:
l1527:
	end method
	method disabled
	call buts,disabled
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	end class

	class classplacepointer
	method init
	new anima,anpointer
	push "onfinish"
	push "classplacepointer0"
	call anpointer,addmethod
	new int,_iz
	push 1000
	pop _iz
	end method
	method classplacepointer0
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anpointer,load
	push _iz
	cthis setz
	call anpointer,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push $1
	call anpointer,setz
	end method
	method stop
	push 0
	call anpointer,stop
	end method
	method stoph
	push 0
	call anpointer,stop
	call anpointer,hide
	end method
	method show
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,setpos
	push $3
	call anpointer,play
	end method
	method move
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,move
	end method
	method showob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	cthis show
	end method
	method showpob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	cthis show
	end method
	end class

	class SimpleCounter
	method init
	localint $1
	pop $1
	push "length"
	push $1
	cthis var2
	new int,iid
	push 0
	pop iid
	end method
	method next
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push length
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	end method
	method set
	localint $1
	pop $1
	push $1
	pop iid
	end method
	method reset
	push 0
	pop iid
	end method
	method get
	push iid
	end method
	end class

	module clstrdigit
	method init
	end method
	method getdigit
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	pop $3
l1537:
	call $3,length
	push $2
	cmpjl
	cmp0
	je l1538
	push "0"
	push $3
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1537
l1538:
	push $3
	ret
	end method
	method gettime
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis geth
	push $1
	cthis getm
	push $1
	cthis gets
	push "h"
	call $2,contains
	push "m"
	call $2,contains
	push "s"
	call $2,contains
	cthis getstime
	ret
	end method
	method getstime
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $7
	push ""
	pop $7
	push $4
	cmp0
	je l1540
	push $1
	popax
	add $7,$a
	pop $7
l1540:
	push $5
	cmp0
	je l1542
	push $4
	cmp0
	je l1544
	push ":"
	jmp l1543
l1544:
	push ""
l1543:
	push $2
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1542:
	push $6
	cmp0
	je l1546
	push $4
	cmp0
	jne l1548
	push $5
	jmp l1549
l1547:
	push 0
	jmp l1549
l1548:
	push 1
l1549:
	cmp0
	je l1551
	push ":"
	jmp l1550
l1551:
	push ""
l1550:
	push $3
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1546:
	push $7
	ret
	end method
	method geth
	localint $1
	pop $1
	push $1
	push 3600
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method getm
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	psax
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method gets
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method getns
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis gets
	push $2
	cthis getdigit
	ret
	end method
	method getnm
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getm
	push $2
	cthis getdigit
	ret
	end method
	method getbinary
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l1552:
	push $1
	push 0
	cmpja
	cmp0
	je l1553
	push ""
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	push 2
	popax
	div $1,$a
	mov $1,$a
	jmp l1552
l1553:
	push $2
	ret
	end method
	method bintohex
	localstring $1
	pop $1
	localstring $2
	call $1,length
	push 4
	pop $b
	popax
	div $a,$b
	push $d
	spushs
	push 3
	cmpst
	jne l1555
	spop $a
	push "0"
	jmp l1554
l1555:
	push 2
	cmpst
	jne l1556
	spop $a
	push "00"
	jmp l1554
l1556:
	push 1
	cmpst
	jne l1557
	spop $a
	push "000"
	jmp l1554
l1557:
	spop $a
	push ""
l1554:
	pop $2
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1558:
	push $3
	call $1,length
	cmpjl
	cmp0
	je l1559
	jmp l1561
l1560:
	push 4
	popax
	add $3,$a
	pop $3
	jmp l1558
l1561:
	push $3
	push 4
	call $1,getb
	spushs
	push "0000"
	cmpst
	jne l1563
	spop $a
	push "0"
	jmp l1562
l1563:
	push "0001"
	cmpst
	jne l1564
	spop $a
	push "1"
	jmp l1562
l1564:
	push "0010"
	cmpst
	jne l1565
	spop $a
	push "2"
	jmp l1562
l1565:
	push "0011"
	cmpst
	jne l1566
	spop $a
	push "3"
	jmp l1562
l1566:
	push "0100"
	cmpst
	jne l1567
	spop $a
	push "4"
	jmp l1562
l1567:
	push "0101"
	cmpst
	jne l1568
	spop $a
	push "5"
	jmp l1562
l1568:
	push "0110"
	cmpst
	jne l1569
	spop $a
	push "6"
	jmp l1562
l1569:
	push "0111"
	cmpst
	jne l1570
	spop $a
	push "7"
	jmp l1562
l1570:
	push "1000"
	cmpst
	jne l1571
	spop $a
	push "8"
	jmp l1562
l1571:
	push "1001"
	cmpst
	jne l1572
	spop $a
	push "9"
	jmp l1562
l1572:
	push "1010"
	cmpst
	jne l1573
	spop $a
	push "A"
	jmp l1562
l1573:
	push "1011"
	cmpst
	jne l1574
	spop $a
	push "B"
	jmp l1562
l1574:
	push "1100"
	cmpst
	jne l1575
	spop $a
	push "C"
	jmp l1562
l1575:
	push "1101"
	cmpst
	jne l1576
	spop $a
	push "D"
	jmp l1562
l1576:
	push "1110"
	cmpst
	jne l1577
	spop $a
	push "E"
	jmp l1562
l1577:
	push "1111"
	cmpst
	jne l1578
	spop $a
	push "F"
	jmp l1562
l1578:
	spop $a
l1562:
	popax
	add $2,$a
	pop $2
	jmp l1560
l1559:
	push $2
	end method
	end module

	method getbinary
	cthis get
	clparent clstrdigit,getbinary
	end method
	method getdigit
	localint $1
	pop $1
	cthis get
	push $1
	clparent clstrdigit,getdigit
	end method
	method getbindigit
	localint $1
	pop $1
	cthis getbinary
	push $1
	clparent clstrdigit,getdigit
	end method
	class Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1580
	push sgmfontfile
	pop $1
l1580:
	push ".ttf"
	call $1,contains
	cmp0
	je l1582
	new font,_fnt
	push $1
	push $2
	call _fnt,load
	push "_fnt"
	pop $1
l1582:
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new int,iFontSize
	push $2
	pop iFontSize
	new text,txt
	push $1
	call txt,setfont
	push $8
	call txt,setz
	push $6
	push $7
	call txt,setpos
	call txt,show
	new text,txtbg
	call txtbg,hide
	end method
	method hide
	call txt,hide
	end method
	method show
	call txt,show
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,setpos
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt,set
	push iR
	push iG
	push iB
	call txt,createtxt
	end method
	method get
	call txt,get
	ret
	end method
	method setbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	call txt,getpx
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getpy
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getw
	push iFontSize
	pop $b
	popax
	add $a,$b
	push iFontSize
	push 2
	pop $b
	popax
	mul $a,$b
	push $1
	push $2
	push $3
	push $4
	call txtbg,setbkg
	push 1
	push 255
	push 255
	push 255
	push 128
	call txtbg,setborders
	call txtbg,show
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	cthis set
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,move
	end method
	end class

	class Cypher
	parent Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push 0
	cthis set
	end method
	method add
	localint $1
	pop $1
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method iget
	cthis get
	spushs
	spop $h
	call $h,to_i
	end method
	method operator+
	localint $1
	pop $1
	push $1
	cthis add
	end method
	method operator++
	push 1
	cthis add
	end method
	method operator--
	push 1
	popax
	sub 0,$a
	cthis add
	end method
	method operator-
	localint $1
	pop $1
	push $1
	popax
	sub 0,$a
	cthis add
	end method
	method operator=
	localint $1
	pop $1
	push $1
	cthis set
	end method
	method operator==
	localint $1
	pop $1
	cthis get
	push $1
	cmpje
	end method
	method operator!=
	localint $1
	pop $1
	cthis get
	push $1
	cmpjne
	end method
	method operator>
	localint $1
	pop $1
	cthis get
	push $1
	cmpja
	end method
	method operator<
	localint $1
	pop $1
	cthis get
	push $1
	cmpjl
	end method
	end class

	class SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,sdigit
	push $1
	pop sdigit
	push A
	push "istarttime"
	push $2
	push "idtime"
	push $3
	push "itime"
	push 0
	cthis vars2
	cthis reset
	push "timcyk"
	push 1000
	push 1
	push "SecCounter0"
	cthis cnewtimerfin
	end method
	method SecCounter0
	cthis play
	cthis getbuildername
	spushs
	spop $a
	call [$a],tick
	end method
	method play
	call timcyk,play
	end method
	method stop
	push 0
	call timcyk,stop
	end method
	method sgettime
	push itime
	push sdigit
	call clstrdigit,gettime
	ret
	end method
	method gettime
	push itime
	ret
	end method
	method tick
	push idtime
	cthis update
	end method
	method reset
	push istarttime
	pop itime
	end method
	method update
	localint $1
	pop $1
	push $1
	popax
	add itime,$a
	pop itime
	end method
	end class

	class TextTimeCounter
	parent Text
	parent SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localint $10
	localint $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push $9
	push $10
	push $11
	clparent SecCounter,init
	cthis reset
	push 0
	cthis update
	end method
	method update
	localint $1
	pop $1
	push $1
	clparent SecCounter,update
	cthis sgettime
	cthis set
	push itime
	push 0
	cmpjle
	cmp0
	je l1584
	push idtime
	push 0
	cmpjl
	jmp l1586
l1584:
	push 0
	jmp l1586
l1585:
	push 1
l1586:
	cmp0
	je l1587
	cthis getname
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1587:
	end method
	end class

	class gfxObject
	method init
	localstring $1
	pop $1
	new string,sgfxobj
	push $1
	pop sgfxobj
	end method
	method setpos
	push sgfxobj
	spushs
	spop $a
	call [$a],setpos
	end method
	method move
	push sgfxobj
	spushs
	spop $a
	call [$a],move
	end method
	method getpos
	push sgfxobj
	spushs
	spop $a
	call [$a],getpos
	end method
	method getposx
	push sgfxobj
	spushs
	spop $a
	call [$a],getposx
	end method
	method getposy
	push sgfxobj
	spushs
	spop $a
	call [$a],getposy
	end method
	method getpx
	push sgfxobj
	spushs
	spop $a
	call [$a],getpx
	end method
	method getpy
	push sgfxobj
	spushs
	spop $a
	call [$a],getpy
	end method
	method getw
	push sgfxobj
	spushs
	spop $a
	call [$a],getw
	end method
	method geth
	push sgfxobj
	spushs
	spop $a
	call [$a],geth
	end method
	method getcx
	push sgfxobj
	spushs
	spop $a
	call [$a],getcx
	end method
	method getcy
	push sgfxobj
	spushs
	spop $a
	call [$a],getcy
	end method
	method getex
	push sgfxobj
	spushs
	spop $a
	call [$a],getex
	end method
	method getey
	push sgfxobj
	spushs
	spop $a
	call [$a],getey
	end method
	method lodx
	push sgfxobj
	spushs
	spop $a
	call [$a],lodx
	end method
	method lody
	push sgfxobj
	spushs
	spop $a
	call [$a],lody
	end method
	method setz
	push sgfxobj
	spushs
	spop $a
	call [$a],setz
	end method
	method getz
	push sgfxobj
	spushs
	spop $a
	call [$a],getz
	end method
	method show
	push sgfxobj
	spushs
	spop $a
	call [$a],show
	end method
	method hide
	push sgfxobj
	spushs
	spop $a
	call [$a],hide
	end method
	method isvisible
	push sgfxobj
	spushs
	spop $a
	call [$a],isvisible
	end method
	method isin
	push sgfxobj
	spushs
	spop $a
	call [$a],isin
	end method
	end class

	class gfxSquare
	parent Color
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent Color,init
	push A
	push "w"
	push "h"
	cthis vars
	push $3
	pop w
	push $4
	pop h
	new img,imggfx
	push $1
	push $2
	call imggfx,setpos
	push "imggfx"
	clparent gfxObject,init
	end method
	method build
	push w
	push h
	push r
	push g
	push b
	push a
	call imggfx,create
	end method
	method shadow
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localdef $4
	localdef $5
	call imggfx,getpos
	pop $5
	pop $4
	push 0
	push 0
	call imggfx,setpos
	new img,_img1
	new img,_img2
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1589
	push w
	push h
	cthis transparent
	call _img1,create
	push "imggfx"
	call _img1,blit
	jmp l1588
l1589:
	push w
	push h
	cthis get
	call _img1,create
l1588:
	push w
	push h
	cthis black
	push $3
	call _img2,create
	push $1
	push 0
	cmpjl
	cmp0
	je l1591
	push $1
	popax
	sub 0,$a
	push 0
	call _img1,move
	push $1
	popax
	add $4,$a
	pop $4
	jmp l1590
l1591:
	push $1
	push 0
	call _img2,move
l1590:
	push $2
	push 0
	cmpjl
	cmp0
	je l1593
	push 0
	push $2
	popax
	sub 0,$a
	call _img1,move
	push $2
	popax
	add $5,$a
	pop $5
	jmp l1592
l1593:
	push 0
	push $2
	call _img2,move
l1592:
	call $1,abs
	popax
	add w,$a
	pop w
	call $2,abs
	popax
	add h,$a
	pop h
	push w
	push h
	cthis transparent
	call imggfx,create
	push "_img2"
	call imggfx,blit
	push "_img1"
	call imggfx,blit
	delete _img1
	delete _img2
	push $4
	push $5
	call imggfx,move
	end method
	method blackborder
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $1
	cthis black
	push $2
	cthis border
	end method
	method border
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $7
	localdef $8
	call imggfx,getpos
	pop $8
	pop $7
	push 0
	push 0
	call imggfx,setpos
	new img,_img
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1595
	push w
	push h
	cthis transparent
	call _img,create
	push "imggfx"
	call _img,blit
	jmp l1594
l1595:
	push w
	push h
	cthis get
	call _img,create
l1594:
	push $1
	push $2
	call _img,move
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add w,$a
	pop w
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add h,$a
	pop h
	push w
	push h
	push $3
	push $4
	push $5
	push $6
	call imggfx,create
	push "_img"
	call imggfx,blit
	delete _img
	push $7
	push $8
	call imggfx,move
	end method
	end class

	class Rect
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push A
	push "x"
	push "y"
	push "w"
	push "h"
	cthis vars
	push $1
	push $2
	push $3
	push $4
	cthis set
	new vector,vecgr
	push "string"
	call vecgr,type
	push "gmimgvec"
	call vecgr,add
	end method
	method x2
	push x
	push w
	pop $b
	popax
	add $a,$b
	end method
	method y2
	push y
	push h
	pop $b
	popax
	add $a,$b
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	pop w
	push $4
	pop h
	end method
	method setborders
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	pop w
	push $4
	push y
	pop $b
	popax
	sub $a,$b
	pop h
	end method
	method fit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	call vecgr,contains
	cmp0
	je l1597
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],_getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1599
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1599:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],_getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1601
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1601:
	jmp l1596
l1597:
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1603
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1603:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1605
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1605:
l1596:
	cthis x2
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l1607
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1607:
	cthis y2
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1609
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1609:
	end method
	method fitrand
	localstring $1
	pop $1
	push $1
	spushs
	push x
	push w
	push $1
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	push y
	push h
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	end method
	method fitgrouprand
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1610:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1611
	jmp l1613
l1612:
	add $2,1
	pop $2
	jmp l1610
l1613:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fitrand
	jmp l1612
l1611:
	end method
	method fitgroup
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1614:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1615
	jmp l1617
l1616:
	add $2,1
	pop $2
	jmp l1614
l1617:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fit
	jmp l1616
l1615:
	end method
	method isin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push x
	cmpjae
	cmp0
	je l1618
	push $1
	push x
	push w
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1618
	push $2
	push y
	cmpjae
	cmp0
	je l1618
	push $2
	push y
	push h
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l1620
l1618:
	push 0
	jmp l1620
l1619:
	push 1
l1620:
	end method
	end class

	class ImgRect
	method init
	push A
	push "ix"
	push 0
	push "iy"
	push 0
	push "iw"
	push 0
	push "ih"
	push 0
	push "bvis"
	push 0
	push "iz"
	push 0
	cthis vars2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop ix
	push $2
	pop iy
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add ix,$a
	pop ix
	push $2
	popax
	add iy,$a
	pop iy
	end method
	method getpos
	push ix
	push iy
	ret
	end method
	method getposx
	push ix
	end method
	method getposy
	push iy
	end method
	method getpx
	push ix
	end method
	method getpy
	push iy
	end method
	method getw
	push iw
	end method
	method geth
	push ih
	end method
	method getcx
	push ix
	push iw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	push iy
	push ih
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getex
	push ix
	push iw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	push iy
	push ih
	pop $b
	popax
	add $a,$b
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop iz
	end method
	method getz
	push iz
	end method
	method show
	push 1
	pop bvis
	end method
	method hide
	push 0
	pop bvis
	end method
	method isvisible
	push bvis
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push ix
	cmpjae
	cmp0
	je l1621
	push $1
	push ix
	push iw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1621
	push $2
	push iy
	cmpjae
	cmp0
	je l1621
	push $2
	push iy
	push ih
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l1623
l1621:
	push 0
	jmp l1623
l1622:
	push 1
l1623:
	end method
	method setrect
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ix
	push $2
	pop iy
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	pop iw
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	pop ih
	end method
	method print
	push "x: "
	push ix
	pop $b
	popax
	add $a,$b
	push ", y: "
	pop $b
	popax
	add $a,$b
	push iy
	pop $b
	popax
	add $a,$b
	push ", w: "
	pop $b
	popax
	add $a,$b
	push iw
	pop $b
	popax
	add $a,$b
	push ", h: "
	pop $b
	popax
	add $a,$b
	push ih
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	push $1
	spushs
	spop $a
	call [$a],getz
	push $1
	spushs
	spop $a
	call [$a],isvisible
	pop bvis
	pop iz
	pop ih
	pop iw
	pop iy
	pop ix
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	new string,_sobfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	spushs
	push _sfun
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	cmpjne
	cmp0
	je l1625
	push _sobfin
	push "null"
	cmpje
	cmp0
	je l1627
	push _sfunfin
	spushs
	spop $d
	cthis [$d]
	jmp l1626
l1627:
	push _sobfin
	spushs
	push _sfunfin
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1626:
l1625:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	cmpja
	cmp0
	je l1629
	push _ib2
	cthis _cfinito
	jmp l1628
l1629:
	push _ival
	push _ib1
	cmpjl
	cmp0
	je l1631
	push _ib1
	cthis _cfinito
	jmp l1630
l1631:
	push _sob
	spushs
	push _sfun
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l1630:
l1628:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sobfin
	push $8
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $9
	call $2,abs
	pop $9
	push $1
	push 0
	cmpjle
	cmp0
	jne l1634
	push $9
	push $5
	cmpje
	cmp0
	jne l1634
	push $9
	push $6
	cmpja
	jmp l1635
l1633:
	push 0
	jmp l1635
l1634:
	push 1
l1635:
	cmp0
	je l1636
	ret
l1636:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	cmpja
	cmp0
	je l1638
	push _ib1
	pop _ival
	jmp l1637
l1638:
	push $2
	push 0
	cmpjl
	cmp0
	je l1640
	push _ib2
	pop _ival
	jmp l1639
l1640:
	ret
l1639:
l1637:
	push $3
	spushs
	push $4
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method setopacity
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setopacity"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push "null"
	push $4
	cthis _play
	end method
	method isplaying
	call timf,isplaying
	end method
	end class

	class CutScene
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,X1
	new int,Y1
	new int,X2
	new int,Y2
	new img,_gsq
	push $1
	push $2
	push $3
	push $4
	cthis build
	push "_gsq"
	clparent gfxObject,init
	new string,_sfunc1
	new string,_sob1
	new string,_sfunc2
	new string,_sob2
	new int,_idelay
	push 10
	pop _idelay
	new classfadeinout,_clfio
	end method
	method build
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop Y2
	pop X2
	pop Y1
	pop X1
	push X2
	push X1
	pop $b
	popax
	sub $a,$b
	push Y2
	push Y1
	pop $b
	popax
	sub $a,$b
	cthis black
	push 255
	call _gsq,create
	push X1
	push Y1
	call _gsq,setpos
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method buildblack
	push X1
	push Y1
	push X2
	push Y2
	cthis build
	end method
	method buildfromfile
	localstring $1
	pop $1
	localdef $2
	cthis getz
	pop $2
	new img,_imtmp
	push $1
	call _imtmp,load
	push 255
	call _gsq,transparency
	push "_imtmp"
	call _gsq,blit
	delete _imtmp
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method buildfromscreen
	push 255
	call _gsq,transparency
	call _gsq,blitscreen
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method delay
	localint $1
	pop $1
	push $1
	pop _idelay
	end method
	method transparency
	localint $1
	pop $1
	push $1
	call _gsq,transparency
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "null"
	push $1
	push "null"
	push $2
	cthis playobfin
	end method
	method playobfin
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1642
	call gameapi,getgamename
	jmp l1641
l1642:
	push $1
l1641:
	pop _sob1
	push $2
	pop _sfunc1
	push $3
	push "null"
	cmpje
	cmp0
	je l1644
	call gameapi,getgamename
	jmp l1643
l1644:
	push $3
l1643:
	pop _sob2
	push $4
	pop _sfunc2
	call _gsq,show
	push 0
	call _gsq,transparency
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene0"
	call _clfio,_play
	end method
	method CutScene0
	push _sob1
	push _sfunc1
	cthis callfun
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method close
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obclose
	end method
	method obclose
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob1
	push $2
	pop _sfunc1
	push 0
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene1"
	call _clfio,_play
	end method
	method CutScene1
	call _gsq,hide
	push _sob1
	push _sfunc1
	cthis callfun
	end method
	method enter
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obenter
	end method
	method obenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob2
	push $2
	pop _sfunc2
	push 255
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method _callfun2
	call _gsq,hide
	push _sob2
	push _sfunc2
	cthis callfun
	end method
	method isplaying
	call _clfio,isplaying
	end method
	method show
	push 255
	call _gsq,transparency
	call _gsq,show
	end method
	end class

	method allchars
	push "a0 t_!@#$%^&*()_+-=[]\\|}{;':\",./<>?`~"
	end method
	class TextTyper
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new string,sChars
	push $6
	pop sChars
	new int,iLimit
	push $7
	pop iLimit
	push A
	push "Sdir"
	push "left"
	push "W"
	push 0
	push "iFontSize"
	push $2
	push "X"
	push 0
	push "Y"
	push 0
	cthis vars2
	new text,txt1
	push $1
	call txt1,setfont
	push ""
	call txt1,set
	new text,txt2
	push $1
	call txt2,setfont
	push "_"
	call txt2,set
	push iR
	push iG
	push iB
	call txt2,createtxt
	call txt2,hide
	new text,txtpass
	push $1
	call txtpass,setfont
	call txtpass,hide
	new int,bpass
	push 0
	pop bpass
	new string,_sob
	push "null"
	pop _sob
	new string,_sfun
	push "null"
	pop _sfun
	push "timcyk"
	push 300
	push 1
	push "fintimcyk"
	cthis cnewtimerfin
	push "txt1"
	clparent gfxObject,init
	end method
	method setaspasswd
	push 1
	pop bpass
	call txt1,hide
	call txt1,getz
	call txtpass,setz
	call txtpass,show
	cthis copytopass
	end method
	method copytopass
	localdef $1
	call txt1,get
	spushs
	spop $h
	call $h,length
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1645:
	push $3
	push $1
	cmpjl
	cmp0
	je l1646
	jmp l1648
l1647:
	add $3,1
	pop $3
	jmp l1645
l1648:
	push "*"
	popax
	add $2,$a
	pop $2
	jmp l1647
l1646:
	push $2
	call txtpass,txtset
	call txt1,getpx
	call txt1,getpy
	call txtpass,setpos
	end method
	method setastext
	push 0
	pop bpass
	call txt1,show
	call txtpass,hide
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,isin
	end method
	method getcol
	push iR
	push iG
	push iB
	ret
	end method
	method fintimcyk
	cthis getlock
	cmp0
	je l1650
	ret
l1650:
	cthis updatecyk
	cthis play
	end method
	method updatecyk
	call txt2,isvisible
	cmp0
	je l1652
	call txt2,hide
	jmp l1651
l1652:
	call txt1,getex
	call txt1,getpy
	call txt2,setpos
	call txt2,show
l1651:
	end method
	method enable
	cthis unlock
	cthis updatecyk
	call timcyk,play
	end method
	method disable
	call txt2,hide
	push 0
	call timcyk,stop
	cthis lock
	end method
	method onenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob
	push $2
	pop _sfun
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop X
	push $2
	pop Y
	cthis get
	cthis updatetxt
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push X
	push $1
	pop $b
	popax
	add $a,$b
	push Y
	push $2
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method setz
	localint $1
	pop $1
	push $1
	call txt1,setz
	push $1
	call txt2,setz
	end method
	method get
	localstring $1
	call txt1,get
	pop $1
	call $1,length
	push 0
	cmpja
	cmp0
	je l1654
	push $1
	jmp l1653
l1654:
	push ""
l1653:
	end method
	method getpx
	call txt1,getpx
	end method
	method getpy
	call txt1,getpy
	end method
	method getcx
	call txt1,getcx
	end method
	method getcy
	call txt1,getcy
	end method
	method geth
	call txt1,geth
	end method
	method getey
	call txt1,getpy
	push iFontSize
	pop $b
	popax
	add $a,$b
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,clip
	push $1
	push $2
	push $3
	push $4
	call txt2,clip
	end method
	method length
	call txt1,get
	spushs
	spop $h
	call $h,length
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt1,set
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis getcol
	call txt1,txtsetcol
	end method
	method limit=
	localint $1
	pop $1
	push $1
	pop iLimit
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1656
	ret
l1656:
	cthis getname
	push "_ontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1658
	cthis disable
	push _sob
	push _sfun
	cthis callfun
	cthis getname
	push "_onenter"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	ret
l1658:
	localstring $1
	push "t"
	call sChars,contains
	cmp0
	je l1660
	push "tab"
	call keyboard,iskey
	jmp l1662
l1660:
	push 0
	jmp l1662
l1661:
	push 1
l1662:
	cmp0
	je l1663
	push " "
	pop $1
	jmp l1659
l1663:
	call keyboard,getkey
	pop $1
l1659:
	localstring $2
	call txt1,get
	pop $2
	call keyboard,isalpha
	cmp0
	je l1665
	push "a"
	call sChars,contains
	jmp l1667
l1665:
	push 0
	jmp l1667
l1666:
	push 1
l1667:
	cmp0
	jne l1669
	call keyboard,isdigit
	cmp0
	je l1670
	push "0"
	call sChars,contains
	jmp l1672
l1670:
	push 0
	jmp l1672
l1671:
	push 1
l1672:
	cmp0
	jne l1669
	push $1
	call sChars,contains
	jmp l1673
l1668:
	push 0
	jmp l1673
l1669:
	push 1
l1673:
	cmp0
	je l1674
	push iLimit
	push 0
	cmpjle
	cmp0
	jne l1677
	push iLimit
	call $2,length
	cmpja
	jmp l1678
l1676:
	push 0
	jmp l1678
l1677:
	push 1
l1678:
	jmp l1679
l1674:
	push 0
	jmp l1679
l1675:
	push 1
l1679:
	cmp0
	je l1680
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	cthis updatetxt
	cthis updatecyk
	jmp l1664
l1680:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1682
	call $2,length
	push 0
	cmpja
	jmp l1684
l1682:
	push 0
	jmp l1684
l1683:
	push 1
l1684:
	cmp0
	je l1685
	push 1
	call $2,strsube
	cthis updatetxt
	cthis updatecyk
l1685:
l1664:
	cthis getname
	push "_ontyped"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method updatetxt
	localstring $1
	pop $1
	push $1
	call txt1,set
	push iR
	push iG
	push iB
	call txt1,createtxt
	push Sdir
	push "center"
	cmpje
	cmp0
	je l1687
	push X
	push W
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push Y
	call txt1,setpos
	jmp l1686
l1687:
	push Sdir
	push "right"
	cmpje
	cmp0
	je l1689
	push X
	push W
	pop $b
	popax
	add $a,$b
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push Y
	call txt1,setpos
	jmp l1688
l1689:
	push X
	push Y
	call txt1,setpos
l1688:
l1686:
	push bpass
	cmp0
	je l1691
	cthis copytopass
l1691:
	cthis getname
	push "_onwrite"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class ConTextTyper
	parent TextTyper
	parent ObjController
	method init
	clparent TextTyper,init
	clparent ObjController,init
	end method
	end class

	new string,sTextBoxTyperSys
	push "null"
	pop sTextBoxTyperSys
	class TextBoxTyper
	parent LObjController
	parent ImagePos
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent LObjController,init
	clparent ImagePos,init
	new def,Font
	push $1
	push $2
	cthis checkfont
	pop Font
	push A
	push "Cols"
	push $10
	push $3
	pop $b
	popax
	div $a,$b
	psax
	push "Rows"
	push $11
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	push "X"
	push $8
	push "Y"
	push $9
	push "Row"
	push 0
	push "enablemove"
	push 1
	push "W"
	push $10
	push "insystem"
	push 0
	push "H"
	push $11
	push "isvisible"
	push 1
	push "clipx1"
	push $8
	push "clipy1"
	push $9
	push "clipx2"
	push 0
	push "clipy2"
	push 0
	push "clipped"
	push 0
	cthis vars2
	new def,Size
	push $2
	pop Size
	new def,Dy
	push $12
	pop Dy
	new def,Z
	push 0
	pop Z
	localstring $13
	new gmimgvec,grtt
	new gmimgvec,gren
	localint $14
	push 0
	pop $14
l1692:
	push $14
	push Rows
	cmpjl
	cmp0
	je l1693
	jmp l1695
l1694:
	add $14,1
	pop $14
	jmp l1692
l1695:
	push "tt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $13
	push $13
	spushs
	push Font
	push $2
	push $4
	push $5
	push $6
	push $7
	push Cols
	spop $e
	new TextTyper,[$e]
	push $13
	spushs
	push $10
	spop $a
	call [$a],W=
	push $13
	spushs
	push "left"
	spop $a
	call [$a],Sdir=
	push $13
	spushs
	push $8
	push $9
	push $14
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $13
	call grtt,add
	jmp l1694
l1693:
	end method
	method settyper
	localint $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localstring $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $10
	localint $11
	localstring $12
	localstring $13
	push ""
	pop $13
	push $1
	push 0
	cmpjl
	cmp0
	je l1697
	call grtt,last
	spushs
	spop $a
	call [$a],X
	pop $10
	call grtt,last
	spushs
	spop $a
	call [$a],getey
	push Dy
	pop $b
	popax
	add $a,$b
	pop $11
	call grtt,size
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	call grtt,add
	jmp l1696
l1697:
	push $1
	call grtt,get
	pop $12
	push $12
	spushs
	spop $a
	call [$a],X
	pop $10
	push $12
	spushs
	spop $a
	call [$a],getpy
	pop $11
	push $12
	spushs
	spop $a
	call [$a],get
	pop $13
	push $12
	push 0
	push $3
	push $12
	spushs
	spop $a
	call [$a],iFontSize
	pop $b
	popax
	sub $a,$b
	call grtt,movefrom
	push $12
	spushs
	spop $d
	delete [$d]
l1696:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	push $2
	push $3
	push $5
	push $6
	push $7
	push $8
	push W
	push $4
	pop $b
	popax
	div $a,$b
	psax
	spop $e
	new TextTyper,[$e]
	push $12
	spushs
	push W
	spop $a
	call [$a],W=
	push $12
	spushs
	push $9
	spop $a
	call [$a],Sdir=
	push $12
	spushs
	push $13
	spop $a
	call [$a],updatetxt
	push $12
	spushs
	push Z
	spop $a
	call [$a],setz
	push $12
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grtt,move
	push $1
	push $2
	call gren,move
	push $1
	popax
	add X,$a
	pop X
	push $2
	popax
	add Y,$a
	pop Y
	end method
	method size
	call grtt,size
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtt,setz
	push $1
	call gren,setz
	end method
	method getz
	push Z
	end method
	method show
	push 1
	pop isvisible
	call grtt,show
	end method
	method hide
	push 0
	pop isvisible
	call grtt,hide
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 1
	pop clipped
	push $1
	pop clipx1
	push $2
	pop clipy1
	push $3
	pop clipx2
	push $4
	pop clipy2
	localint $5
	push 0
	pop $5
l1698:
	push $5
	call grtt,size
	cmpjl
	cmp0
	je l1699
	jmp l1701
l1700:
	add $5,1
	pop $5
	jmp l1698
l1701:
	push $5
	call grtt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l1700
l1699:
	end method
	method getw
	push W
	end method
	method geth
	push H
	end method
	method enumerate
	localint $1
	pop $1
	localstring $2
	localstring $3
	localint $4
	push 0
	pop $4
l1702:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1703
	jmp l1705
l1704:
	add $4,1
	pop $4
	jmp l1702
l1705:
	push "txte"
	push $4
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new text,[$e]
	push $2
	call gren,add
	push $2
	spushs
	push Z
	spop $a
	call [$a],setz
	push $2
	spushs
	push Font
	spop $a
	call [$a],setfont
	push $2
	spushs
	push ""
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	call tt0,getcol
	spop $a
	call [$a],txtsetcol
	push $2
	spushs
	push X
	push $2
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	push Y
	push $4
	push Size
	push Dy
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l1704
l1703:
	end method
	method cut
	localint $1
	pop $1
	push $1
	pop Rows
	end method
	method enable
	cthis unlock
	cthis activateact
	end method
	method disable
	cthis lock
	push "disable"
	call grtt,eval
	end method
	method actual
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	end method
	method activate
	localint $1
	pop $1
	cthis unlock
	push $1
	push 0
	cmpjae
	cmp0
	je l1707
	push $1
	push Rows
	cmpjl
	jmp l1709
l1707:
	push 0
	jmp l1709
l1708:
	push 1
l1709:
	cmp0
	je l1710
	push insystem
	cmp0
	je l1712
	push GAME
	spushs
	push sTextBoxTyperSys
	spop $a
	call [$a],isgmobj
	cmp0
	je l1714
	push sTextBoxTyperSys
	cthis getname
	cmpjne
	jmp l1716
l1714:
	push 0
	jmp l1716
l1715:
	push 1
l1716:
	cmp0
	je l1717
	push sTextBoxTyperSys
	spushs
	spop $a
	call [$a],deactivate
l1717:
	cthis getname
	pop sTextBoxTyperSys
l1712:
	cthis deactivate
	push $1
	pop Row
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],enable
	cthis getname
	push "_activate"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1710:
	end method
	method activateact
	push Row
	cthis activate
	end method
	method deactivate
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disable
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1719
	ret
l1719:
	cthis getname
	push "_boxontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1721
	localdef $1
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	pop $1
	call $1,clear
	call $1,length
	push 0
	cmpje
	cmp0
	je l1723
	push enablemove
	jmp l1725
l1723:
	push 0
	jmp l1725
l1724:
	push 1
l1725:
	cmp0
	je l1726
	localdef $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l1727:
	push $2
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l1728
	jmp l1730
l1729:
	sub $2,1
	pop $2
	jmp l1727
l1730:
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1729
l1728:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	push Rows
	cmpjl
	cmp0
	je l1732
	push ""
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis setid
l1732:
l1726:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1720
l1721:
	push "up"
	call keyboard,iskey
	cmp0
	je l1734
	push Row
	push 0
	cmpja
	jmp l1736
l1734:
	push 0
	jmp l1736
l1735:
	push 1
l1736:
	cmp0
	je l1737
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1733
l1737:
	push "down"
	call keyboard,iskey
	cmp0
	je l1739
	push Row
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l1741
l1739:
	push 0
	jmp l1741
l1740:
	push 1
l1741:
	cmp0
	je l1742
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1738
l1742:
	push "pgdown"
	call keyboard,iskey
	cmp0
	je l1744
	push Row
	push Rows
	push 10
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1746
	push Row
	push 10
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1745
l1746:
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1745:
	jmp l1743
l1744:
	push "pgup"
	call keyboard,iskey
	cmp0
	je l1748
	push Row
	push 9
	cmpja
	cmp0
	je l1750
	push Row
	push 10
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1749
l1750:
	push 0
	cthis activate
l1749:
	jmp l1747
l1748:
	push "backspace"
	call keyboard,iskey
	cmp0
	jne l1753
	push "delete"
	call keyboard,iskey
	jmp l1754
l1752:
	push 0
	jmp l1754
l1753:
	push 1
l1754:
	cmp0
	je l1755
	cthis actual
	spushs
	spop $a
	call [$a],length
	push 0
	cmpje
	jmp l1757
l1755:
	push 0
	jmp l1757
l1756:
	push 1
l1757:
	cmp0
	je l1758
	push enablemove
	cmp0
	je l1760
	localdef $2
	push Row
	pop $2
l1761:
	push $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1762
	jmp l1764
l1763:
	add $2,1
	pop $2
	jmp l1761
l1764:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1763
l1762:
	push ""
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setid
l1760:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1766
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1766:
	jmp l1751
l1758:
	push "onkeydown"
	call grtt,eval
l1751:
l1747:
l1743:
l1738:
l1733:
l1720:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1768
	ret
l1768:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push clipped
	cmp0
	je l1770
	push $1
	push $2
	push clipx1
	push clipy1
	push clipx2
	push clipy2
	call clsurf,isin
	jmp l1772
l1770:
	push 0
	jmp l1772
l1771:
	push 1
l1772:
	cmp0
	jne l1774
	push clipped
	neg
	cmp0
	je l1775
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	jmp l1777
l1775:
	push 0
	jmp l1777
l1776:
	push 1
l1777:
	jmp l1778
l1773:
	push 0
	jmp l1778
l1774:
	push 1
l1778:
	cmp0
	je l1779
	cthis deactivate
	localint $3
	push 0
	pop $3
l1780:
	push $3
	cthis size
	cmpjl
	cmp0
	je l1781
	jmp l1783
l1782:
	add $3,1
	pop $3
	jmp l1780
l1783:
	push "tt"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getey
	push $2
	cmpja
	cmp0
	je l1785
	push $3
	cthis activate
	ret
l1785:
	jmp l1782
l1781:
	jmp l1769
l1779:
	cthis getname
	push "_OUTSIDE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1769:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	cmp0
	je l1787
	push isvisible
	neg
	jmp l1789
l1787:
	push 0
	jmp l1789
l1788:
	push 1
l1789:
	cmp0
	je l1790
	push 0
	ret
l1790:
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	end method
	method getid
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method getact
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method idpx
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpx
	end method
	method idpy
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpy
	end method
	method getpx
	push X
	end method
	method getpy
	push Y
	end method
	method get
	push 0
	cthis getfrom
	end method
	method getfrom
	localint $1
	pop $1
	push $1
	push ""
	cthis getlinesfrom
	end method
	method getlinesfrom
	localint $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push ""
	pop $3
	localint $4
	push $1
	pop $4
l1791:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1792
	jmp l1794
l1793:
	add $4,1
	pop $4
	jmp l1791
l1794:
	push "tt"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	push $2
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	jmp l1793
l1792:
	push $3
	end method
	method getlines
	push 0
	push " "
	cthis getlinesfrom
	end method
	method nonempty
	localint $1
	pop $1
	localstring $2
l1795:
	push $1
	call grtt,size
	cmpjl
	cmp0
	je l1796
	jmp l1798
l1797:
	add $1,1
	pop $1
	jmp l1795
l1798:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	pop $2
	call $2,clear
	call $2,length
	push 0
	cmpja
	cmp0
	je l1800
	push $1
	ret
l1800:
	jmp l1797
l1796:
	push 1
	popax
	sub 0,$a
	end method
	method clear
	call grtt,txtreset
	end method
	method setid
	localstring $1
	localint $2
	pop $2
	pop $1
	call grtt,size
	push $2
	cmpjae
	cmp0
	je l1802
	push "tt"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],txtset
l1802:
	end method
	method settext
	localint $1
	pop $1
l1803:
	push $1
	push 0
	cmpja
	cmp0
	je l1804
	sub $1,1
	pop $1
	push $1
	cthis setid
	jmp l1803
l1804:
	end method
	method copytodb
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
	localint $2
	push 0
	pop $2
l1805:
	push $2
	call grtt,size
	cmpjl
	cmp0
	je l1806
	jmp l1808
l1807:
	add $2,1
	pop $2
	jmp l1805
l1808:
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	call grtt,get
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],add
	jmp l1807
l1806:
	end method
	method copyfromdb
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis copyfromdbii
	end method
	method copyfromdbss
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis copyfromdbii
	end method
	method copyfromdbii
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1811
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	jmp l1812
l1810:
	push 0
	jmp l1812
l1811:
	push 1
l1812:
	cmp0
	je l1813
	ret
l1813:
	cthis clear
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	cthis size
	cmpja
	cmp0
	je l1815
	push $2
	cthis size
	pop $b
	popax
	add $a,$b
	pop $3
l1815:
	localint $4
	push $2
	pop $4
l1816:
	push $4
	push $3
	cmpjl
	cmp0
	je l1817
	jmp l1819
l1818:
	add $4,1
	pop $4
	jmp l1816
l1819:
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmp0
	je l1821
	push $1
	spushs
	push $4
	push 0
	spop $a
	call [$a],get
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis setid
l1821:
	jmp l1818
l1817:
	end method
	method copyfromdbrow
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $4
	push $4
	cthis size
	cmpja
	cmp0
	je l1823
	cthis size
	pop $4
l1823:
	localint $5
	push $3
	pop $5
l1824:
	push $5
	push $4
	cmpjl
	cmp0
	je l1825
	jmp l1827
l1826:
	add $5,1
	pop $5
	jmp l1824
l1827:
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],get
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	cthis setid
	jmp l1826
l1825:
	end method
	method save
	localstring $1
	pop $1
	new db,__tmpdb
	push "__tmpdb"
	cthis copytodb
	push "|"
	call __tmpdb,setseparator
	push $1
	call __tmpdb,save
	delete __tmpdb
	end method
	method load
	localstring $1
	pop $1
	new db,__tmpdb
	push $1
	call __tmpdb,load
	push "__tmpdb"
	cthis copyfromdb
	delete __tmpdb
	end method
	end class

	class GUITextBoxTyper
	parent TextBoxTyper
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	push $9
	push $10
	push $11
	push $12
	clparent TextBoxTyper,init
	push A
	push "rewinder"
	push "null"
	push "rewinderbg"
	push "null"
	cthis vars2
	end method
	method setrewinder
	localstring $1
	pop $1
	push $1
	pop rewinder
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	pop rewinderbg
	end method
	method activate
	localint $1
	pop $1
	push $1
	clparent TextBoxTyper,activate
	cthis updaterewactual
	end method
	method updaterewactual
	push Row
	cthis updaterewpos
	end method
	method updaterewpos
	localint $1
	pop $1
	push rewinder
	push "null"
	cmpjne
	cmp0
	je l1829
	localdef $2
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $a
	call [$a],getpy
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	cmpjl
	cmp0
	je l1831
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
	jmp l1830
l1831:
	push $2
	spushs
	spop $a
	call [$a],getey
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	cmpja
	cmp0
	je l1833
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
l1833:
l1830:
l1829:
	end method
	end class

	class DelayTaker
	method init
	new int,bonrel
	push 0
	pop bonrel
	new int,bstart
	push 0
	pop bstart
	new int,bclickrel
	push 1
	pop bclickrel
	push "timwez"
	push 300
	push 1
	push "DelayTaker0"
	cthis cnewtimerfin
	end method
	method DelayTaker0
	push 1
	pop bonrel
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	pop bclickrel
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	call timwez,delay
	end method
	method take
	push bclickrel
	cmp0
	je l1835
	call timwez,play
	push 0
	pop bonrel
	jmp l1834
l1835:
	push 1
	pop bonrel
l1834:
	push 1
	pop bstart
	end method
	method ret
	push 0
	pop bonrel
	push 0
	pop bstart
	push 0
	call timwez,stop
	end method
	method isonclick
	cthis stoptimer
	push bstart
	cmp0
	je l1836
	push bonrel
	neg
	jmp l1838
l1836:
	push 0
	jmp l1838
l1837:
	push 1
l1838:
	end method
	method isonrel
	cthis stoptimer
	push bstart
	cmp0
	je l1839
	push bonrel
	jmp l1841
l1839:
	push 0
	jmp l1841
l1840:
	push 1
l1841:
	end method
	method istaken
	push bstart
	end method
	method stoptimer
	push 0
	call timwez,stop
	end method
	end class

	class ImgMover
	method init
	new string,smoved
	push "null"
	pop smoved
	new int,ilastx
	new int,ilasty
	new int,irelx
	new int,irely
	end method
	method mssetobj
	localstring $1
	pop $1
	push $1
	call mouse,getpos
	cthis setobj
	end method
	method setobj
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	push 0
	cthis set
	end method
	method setcobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis setobj
	end method
	method setpobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setobj
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $4
	pop $b
	popax
	sub $a,$b
	pop ilastx
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $5
	pop $b
	popax
	sub $a,$b
	pop ilasty
	push $2
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop irelx
	push $3
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop irely
	push $1
	pop smoved
	end method
	method msmove
	call mouse,getpos
	cthis move
	end method
	method msftmove
	call mouse,getpos
	cthis ftmove
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1843
	push smoved
	spushs
	push $1
	push smoved
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push irelx
	pop $b
	popax
	sub $a,$b
	push $2
	push smoved
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	push irely
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
l1843:
	end method
	method ftmove
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1845
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
l1845:
	end method
	method retobj
	push 0
	push 0
	cthis ret
	end method
	method ret
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push ilastx
	push $1
	pop $b
	popax
	add $a,$b
	push ilasty
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	cthis free
	end method
	method put
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	cthis free
	end method
	method free
	push "null"
	pop smoved
	end method
	method getmover
	push smoved
	end method
	method getfree
	localdef $1
	push smoved
	pop $1
	cthis free
	push $1
	end method
	method moving
	push smoved
	push "null"
	cmpjne
	end method
	end class

	class ConImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1847
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1847:
	end method
	end class

	class DelayImgMover
	parent classlocker
	parent ImgMover
	method init
	clparent classlocker,init
	clparent ImgMover,init
	new DelayTaker,cldt
	push "b2clicks"
	push 0
	cthis var2
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method _put
	push b2clicks
	neg
	cmp0
	je l1849
	call cldt,ret
l1849:
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _get
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	push b2clicks
	neg
	cmp0
	je l1851
	call cldt,take
l1851:
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1853
	ret
l1853:
	push b2clicks
	cmp0
	je l1855
	cthis moving
	neg
	cmp0
	je l1857
	cthis _get
	jmp l1856
l1857:
	cthis _put
l1856:
	jmp l1854
l1855:
	call cldt,isonclick
	cmp0
	je l1859
	cthis _put
	jmp l1858
l1859:
	call cldt,istaken
	neg
	cmp0
	je l1861
	cthis _get
l1861:
l1858:
l1854:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1863
	ret
l1863:
	call cldt,isonrel
	cmp0
	je l1865
	push b2clicks
	neg
	jmp l1867
l1865:
	push 0
	jmp l1867
l1866:
	push 1
l1867:
	cmp0
	je l1868
	cthis _put
l1868:
	end method
	end class

	class DelayMover
	parent DelayImgMover
	parent ObjController
	method init
	clparent DelayImgMover,init
	clparent ObjController,init
	end method
	end class

	class Rewinder
	parent classlocker
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new string,sarrowdir
	new int,ilenx
	new int,ileny
	new string,sgr
	new string,sorientation
	new int,bvertical
	new int,bfilteritem
	push 0
	pop bfilteritem
	new int,ibx1
	push 0
	pop ibx1
	new int,ibx2
	push iResX
	pop ibx2
	new int,iby1
	push 0
	pop iby1
	new int,iby2
	push iResY
	pop iby2
	new int,iodleg
	push 2
	pop iodleg
	new ImgMover,clmv
	push "timtick"
	push 1
	push 1
	push "timfin"
	cthis cnewtimercyclefin
	push A
	push "borx1"
	push $1
	push "bory1"
	push $2
	push "borx2"
	push $3
	push "bory2"
	push $4
	cthis vars2
	new snd,fxrew
	end method
	method movefilter
	push 1
	pop bfilteritem
	end method
	method movenormal
	push 0
	pop bfilteritem
	end method
	method setfxrew
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call fxrew,load
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push $1
	push $2
	push $3
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,set
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1871
	push sorientation
	push "down"
	cmpje
	jmp l1872
l1870:
	push 0
	jmp l1872
l1871:
	push 1
l1872:
	cmp0
	je l1873
	push sgr
	spushs
	push $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	push 0
	spop $a
	call [$a],move
	jmp l1869
l1873:
	push sgr
	spushs
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	spop $a
	call [$a],move
l1869:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],remove
	end method
	method pickup
	localint $1
	localint $2
	pop $2
	pop $1
	push sgr
	spushs
	push $1
	push $2
	push 1
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l1875
	push sgr
	spushs
	spop $a
	call [$a],getsfound
	push $1
	push $2
	cthis getitem
	push 1
	ret
l1875:
	push 0
	ret
	end method
	method mspickup
	call mouse,getpos
	cthis pickup
	ret
	end method
	method freeitem
	call clmv,free
	end method
	method moveitem
	push bfilteritem
	cmp0
	je l1877
	call clmv,msftmove
	jmp l1876
l1877:
	call clmv,msmove
l1876:
	end method
	method retitem
	localstring $1
	call clmv,getmover
	pop $1
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,ret
	push $1
	cthis putitem
	end method
	method putitem
	localstring $1
	pop $1
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1880
	push sorientation
	push "down"
	cmpje
	jmp l1881
l1879:
	push 0
	jmp l1881
l1880:
	push 1
l1881:
	cmp0
	je l1882
	push $1
	spushs
	push sgr
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l1878
l1882:
	push $1
	spushs
	push 0
	push sgr
	spushs
	spop $a
	call [$a],getey
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
l1878:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],add
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $1
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	end method
	method getmoved
	call clmv,getmover
	ret
	end method
	method getbutw
	call anupstd,getw
	ret
	end method
	method getbuth
	call anupstd,geth
	ret
	end method
	method movearrows
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grarrows,move
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $6
	pop sgr
	new anima,anupstd
	push $1
	call anupstd,load
	push $2
	call anupstd,setz
	push "up"
	push 0
	call anupstd,setframe
	push "anupstd"
	push "anupact"
	cthis copyanima
	push "up"
	push 1
	call anupact,setframe
	push "anupstd"
	push "andownact"
	cthis copyanima
	push "down"
	push 1
	call andownact,setframe
	push "anupstd"
	push "andownstd"
	cthis copyanima
	push "down"
	push 0
	call andownstd,setframe
	push "butup"
	push "anupstd"
	push "anupact"
	push "null"
	push $3
	cthis newbutan
	push "butdown"
	push "andownstd"
	push "andownact"
	push "null"
	push $3
	cthis newbutan
	push "onmoveon"
	push "_rewbutmoveon"
	call butup,addmethod
	push "onmoveon"
	push "_rewbutmoveon"
	call butdown,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butup,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butdown,addmethod
	push "onclick"
	push "_rewbutclick"
	call butup,addmethod
	push "onclick"
	push "_rewbutclick"
	call butdown,addmethod
	push "onrel"
	push "_rewbutrel"
	call butup,addmethod
	push "onrel"
	push "_rewbutrel"
	call butdown,addmethod
	push $4
	pop sorientation
	new gmimgvec,grarrows
	push "grarrows"
	push "anupstd"
	popax
	pop $b
	psax
	call [$b],operator+
	push "anupact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownstd"
	popax
	pop $b
	psax
	call [$b],operator+
	popax
	localint $7
	localint $8
	localint $9
	localint $10
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1885
	push sorientation
	push "down"
	cmpje
	jmp l1886
l1884:
	push 0
	jmp l1886
l1885:
	push 1
l1886:
	cmp0
	je l1887
	push 0
	pop bvertical
	push $5
	pop ilenx
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1889
	push borx1
	push bory2
	call anupstd,geth
	pop $b
	popax
	sub $a,$b
	call anupstd,setpos
	push borx1
	push bory2
	call anupact,geth
	pop $b
	popax
	sub $a,$b
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call andownstd,getey
	pop $7
	jmp l1888
l1889:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownact,setpos
	push bory1
	pop $7
l1888:
	call anupstd,getex
	push iodleg
	pop $b
	popax
	add $a,$b
	pop ibx1
	call andownstd,getpx
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop ibx2
	push ibx1
	pop $8
	jmp l1883
l1887:
	push 1
	pop bvertical
	push $5
	pop ileny
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1891
	push borx2
	call anupstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupstd,setpos
	push borx2
	call anupact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call anupstd,getex
	pop $8
	jmp l1890
l1891:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx1
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx1
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	push borx1
	pop $8
l1890:
	call anupstd,getey
	push iodleg
	pop $b
	popax
	add $a,$b
	pop iby1
	call andownstd,getpy
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop iby2
	push iby1
	pop $7
l1883:
	cthis getname
	push "up"
	call butup,_rewbuildbut
	cthis getname
	push "down"
	call butdown,_rewbuildbut
	localint $11
	push $6
	spushs
	spop $a
	call [$a],size
	pop $11
	push $6
	spushs
	push $8
	push $7
	spop $a
	call [$a],_setpos
	new int,ilimx
	push $8
	pop ilimx
	new int,ilimy
	push $7
	pop ilimy
	localstring $12
	localint $13
	push 0
	pop $13
l1892:
	push $13
	push $11
	cmpjl
	cmp0
	je l1893
	jmp l1895
l1894:
	add $13,1
	pop $13
	jmp l1892
l1895:
	push sgr
	spushs
	push $13
	spop $a
	call [$a],get
	pop $12
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1897
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1896
l1897:
	push sorientation
	push "left"
	cmpje
	cmp0
	je l1899
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1898
l1899:
	push sorientation
	push "up"
	cmpje
	cmp0
	je l1901
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	jmp l1900
l1901:
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1903
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
l1903:
l1900:
l1898:
l1896:
	push $12
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	jmp l1894
l1893:
	end method
	method _rewbuildbut
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sob
	push $1
	pop _sob
	new string,_sdir
	push $2
	push "up"
	cmpje
	cmp0
	je l1905
	push bvertical
	push 0
	cmpje
	cmp0
	je l1907
	push "left"
	pop _sdir
	jmp l1906
l1907:
	push "up"
	pop _sdir
l1906:
	jmp l1904
l1905:
	push $2
	push "down"
	cmpje
	cmp0
	je l1909
	push bvertical
	push 0
	cmpje
	cmp0
	je l1911
	push "right"
	pop _sdir
	jmp l1910
l1911:
	push "down"
	pop _sdir
l1910:
l1909:
l1904:
	end method
	method _rewbutmoveon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _rewbutclick
	push _sdir
	cthis mstrzalkaon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method mstrzalkaon
	localstring $1
	pop $1
	push $1
	pop sarrowdir
	call timtick,play
	end method
	method _rewbutrel
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	end method
	method _rewstrzalkaoff
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method timfin
	cthis getlock
	cmp0
	je l1913
	ret
l1913:
	localint $1
	push 0
	pop $1
	push sarrowdir
	push "null"
	cmpjne
	cmp0
	je l1915
	push sgr
	spushs
	spop $a
	call [$a],empty
	neg
	jmp l1917
l1915:
	push 0
	jmp l1917
l1916:
	push 1
l1917:
	cmp0
	je l1918
	push sarrowdir
	push "up"
	cmpje
	cmp0
	je l1920
	push sgr
	spushs
	spop $a
	call [$a],getey
	call andownstd,getpy
	push ileny
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1922
	push sgr
	spushs
	push 0
	push ileny
	popax
	sub 0,$a
	spop $a
	call [$a],move
	push 1
	pop $1
l1922:
	jmp l1919
l1920:
	push sarrowdir
	push "down"
	cmpje
	cmp0
	je l1924
	push sgr
	spushs
	spop $a
	call [$a],getpy
	push ilimy
	cmpjl
	cmp0
	je l1926
	push sgr
	spushs
	push 0
	push ileny
	spop $a
	call [$a],move
	push 1
	pop $1
l1926:
	jmp l1923
l1924:
	push sarrowdir
	push "left"
	cmpje
	cmp0
	je l1928
	push sgr
	spushs
	spop $a
	call [$a],getex
	call andownstd,getpx
	push ilenx
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1930
	push sgr
	spushs
	push ilenx
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1930:
	jmp l1927
l1928:
	push sarrowdir
	push "right"
	cmpje
	cmp0
	je l1932
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push ilimx
	cmpjl
	cmp0
	je l1934
	push sgr
	spushs
	push ilenx
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1934:
l1932:
l1927:
l1923:
l1919:
l1918:
	push $1
	cmp0
	je l1936
	call fxrew,isplaying
	neg
	cmp0
	je l1938
	call fxrew,play
l1938:
	jmp l1935
l1936:
	push 0
	call fxrew,stop
l1935:
	cthis play
	end method
	end class

	class ConRewinder
	parent Rewinder
	parent ObjController
	method init
	clparent Rewinder,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	clparent Rewinder,getitem
	call cldt,take
	end method
	method _put
	call cldt,ret
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmousemove
	cthis moveitem
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1940
	ret
l1940:
	call cldt,isonrel
	cmp0
	je l1942
	cthis _put
l1942:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1944
	ret
l1944:
	call cldt,isonclick
	cmp0
	je l1946
	cthis _put
	jmp l1945
l1946:
	call cldt,istaken
	neg
	cmp0
	je l1948
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1948:
l1945:
	end method
	end class

	class Button
	parent LObjController
	method init
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	push A
	push "sobject"
	push "null"
	push "sclicked"
	push "null"
	push "bcheck2klik"
	push 0
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	end method
	method sort
	call grbuts,sortimgs
	end method
	method addgroups
	call grbuts,addgroups
	call grbuts,sortimgs
	end method
	method addgroup
	localstring $1
	pop $1
	push $1
	call grbuts,addgr
	call grbuts,sortimgs
	end method
	method addlist
	call grbuts,addlist
	call grbuts,sortimgs
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grbuts,add
	call grbuts,sortimgs
	end method
	method addlocker
	localstring $1
	pop $1
	push $1
	cthis add
	push $1
	clparent classlocker,setaslocker
	end method
	method removebutlist
	push "removebut"
	cthis withlist
	end method
	method removebut
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	push $1
	push sobject
	cmpje
	cmp0
	je l1950
	push "null"
	pop sobject
l1950:
	push $1
	push sclicked
	cmpje
	cmp0
	je l1952
	push "null"
	pop sclicked
l1952:
	end method
	method load
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push "gmimgvec"
	push $1
	spop $a
	call [$a],varnew
	push $1
	push $2
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],each
	push $1
	cthis addgroup
	end method
	method remove
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	cmp0
	je l1954
	push $1
	call grbuts,removegr
l1954:
	end method
	method loadfrom
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	cthis getgraphpath
	pop $5
	push $2
	cthis setgraphpath
	push $1
	push $3
	push $4
	cthis load
	push $5
	cthis setgraphpath
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1956
	ret
l1956:
	cthis checktouchpad
	cmp0
	je l1958
	push bcheck2klik
	jmp l1960
l1958:
	push 0
	jmp l1960
l1959:
	push 1
l1960:
	cmp0
	je l1961
	push ipadclick
	cmp0
	je l1963
	localdef $1
	push sobject
	pop $1
	push $1
	push sobject
	cmpje
	cmp0
	je l1965
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l1964
l1965:
	push sobject
	push "null"
	cmpje
	cmp0
	je l1967
	push 0
	pop ipadclick
l1967:
l1964:
	jmp l1962
l1963:
	push 1
	pop ipadclick
l1962:
	jmp l1957
l1961:
	cthis _butmouselclick
l1957:
	end method
	method _butmouselclick
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1969
	push sobject
	pop sclicked
	push sobject
	spushs
	push "butclick"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1971
	push sobject
	spushs
	spop $a
	call [$a],butclick
l1971:
l1969:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1973
	ret
l1973:
	cthis checktouchpad
	cmp0
	je l1975
	cthis lastoff
l1975:
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1977
	push sclicked
	spushs
	push "butlrel"
	spop $a
	call [$a],hasaddedmet
	jmp l1979
l1977:
	push 0
	jmp l1979
l1978:
	push 1
l1979:
	cmp0
	je l1980
	push sclicked
	spushs
	spop $a
	call [$a],butlrel
	jmp l1976
l1980:
	push "null"
	pop sclicked
l1976:
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1982
	ret
l1982:
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1984
	push sclicked
	spushs
	push "butmoving"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1986
	push sclicked
	spushs
	spop $a
	call [$a],butmoving
l1986:
l1984:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push "isbutin"
	call grbuts,isinfunc
	cmp0
	je l1988
	localdef $3
	call grbuts,getsfound
	pop $3
	push $3
	push sobject
	cmpjne
	cmp0
	je l1990
	cthis lastoff
	push $3
	pop sobject
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $3
	spushs
	push "butmoveon"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1992
	push $3
	spushs
	spop $a
	call [$a],butmoveon
l1992:
l1990:
	jmp l1987
l1988:
	cthis lastoff
l1987:
	end method
	method lastoff
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1994
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	spushs
	push "butmoveoff"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1996
	push sobject
	spushs
	spop $a
	call [$a],butmoveoff
l1996:
	push "null"
	pop sobject
l1994:
	end method
	end class

	method Button_isin
	push "isbutin"
	push "global8"
	cthis addmethod
	end method
	method global8
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 0
	cthis isin
	end method
	method Button_isinvis
	push "isbutin"
	push "global9"
	cthis addmethod
	end method
	method global9
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method Button_isinalpha
	push "isbutin"
	push "global10"
	cthis addmethod
	end method
	method global10
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	end method
	method Button_isinvisalpha
	push "isbutin"
	push "global11"
	cthis addmethod
	end method
	method global11
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 1
	cthis isin
	end method
	method Button_moveon
	push "butmoveon"
	push "global12"
	cthis addmethod
	end method
	method global12
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l1998
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l1998:
	end method
	method Button_moveonplay
	push "butmoveon"
	push "global13"
	cthis addmethod
	end method
	method global13
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l2000
	push 1
	popax
	sub 0,$a
	cthis play
l2000:
	end method
	method Button_moveoff
	push "butmoveoff"
	push "global14"
	cthis addmethod
	end method
	method global14
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method Button_moveonms
	push "butmoveon"
	push "global15"
	cthis addmethod
	end method
	method global15
	call advmouse,setbut
	end method
	method Button_moveoffms
	push "butmoveoff"
	push "global16"
	cthis addmethod
	end method
	method global16
	call advmouse,setstd
	end method
	method Button_std
	cthis Button_isin
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdalpha
	cthis Button_isinalpha
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdms
	cthis Button_isinalpha
	cthis Button_moveonms
	cthis Button_moveoffms
	end method
	class Buttons
	parent LObjController
	method init
	localstring $1
	pop $1
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	new int,__id
	push 0
	pop __id
	new string,sanbut
	push "anbut"
	pop sanbut
	push sanbut
	push $1
	push 10
	cthis newanima
	push sanbut
	push sanbut
	push "grbuts"
	cthis newanactionsgr
	popax
	call anbut,hide
	push 10
	call grbuts,setz
	push "Buttons0"
	call grbuts,removeif
	new string,slastb
	push "null"
	pop slastb
	push A
	push "sobject"
	push "null"
	push "bvisible"
	push 1
	push "balpha"
	push 1
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	push "bcheck2klik"
	push 0
	cthis var2
	end method
	method Buttons0
	cthis actionname
	push "bkg"
	cmpje
	cmp0
	je l2002
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setz
	push 1
	jmp l2001
l2002:
	push 0
l2001:
	end method
	method _release
	cthis checktouchpad
	cmp0
	je l2004
	push 0
	pop ipadclick
l2004:
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],setframe
	cthis copyobj
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "null"
	pop slastb
	call advmouse,setstd
	end method
	method getbut
	call grbuts,getsfound
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l2006
	ret
l2006:
	push 1
	popax
	sub 0,$a
	push 0
	call grbuts,setframe
	localdef $1
	call mouse,getpos
	push bvisible
	push balpha
	call grbuts,isin
	pop $1
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2008
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
l2008:
	push $1
	cmp0
	je l2010
	localstring $2
	call grbuts,getsfound
	pop $2
	push $2
	push slastb
	cmpjne
	cmp0
	je l2012
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2014
	cthis _release
l2014:
	push $2
	pop slastb
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	cthis copyobj
	call advmouse,setact
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2012:
	jmp l2009
l2010:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2016
	cthis _release
l2016:
l2009:
	end method
	method copyobj
	push slastb
	spushs
	spop $a
	call [$a],actionname
	pop sobject
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2018
	ret
l2018:
	cthis checktouchpad
	cmp0
	je l2020
	push bcheck2klik
	jmp l2022
l2020:
	push 0
	jmp l2022
l2021:
	push 1
l2022:
	cmp0
	je l2023
	push ipadclick
	cmp0
	je l2025
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l2024
l2025:
	push 1
	pop ipadclick
	cthis onmousemove
l2024:
	jmp l2019
l2023:
	cthis _butmouselclick
l2019:
	end method
	method _butmouselclick
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2027
	cthis copyobj
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2027:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2029
	ret
l2029:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2031
	cthis copyobj
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2031:
	end method
	method disable
	cthis lock
	call grbuts,hide
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2033
	call advmouse,setstd
	push "null"
	pop slastb
l2033:
	end method
	method enable
	cthis unlock
	call grbuts,show
	end method
	end class

	class TextDb
	parent classlocker
	parent ObjController
	parent gfxObject
	method init
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	clparent ObjController,init
	new string,sFont
	push $1
	pop sFont
	new string,sFontBold
	push "null"
	pop sFontBold
	new string,sFontItalic
	push "null"
	pop sFontItalic
	new string,sFontBoldItalic
	push "null"
	pop sFontBoldItalic
	new int,bhtml
	push 0
	pop bhtml
	localstring $12
	localint $13
	localint $14
	push "$"
	call $1,contains
	cmp0
	je l2035
	push 1
	pop bhtml
	new vector,vfont
	push "string"
	call vfont,type
	push $1
	push "$"
	call vfont,vecbuildfromstring
	push 0
	pop $14
l2036:
	push $14
	call vfont,size
	cmpjl
	cmp0
	je l2037
	jmp l2039
l2038:
	add $14,1
	pop $14
	jmp l2036
l2039:
	push $14
	call vfont,get
	pop $12
	push "_italic"
	call $12,contains
	cmp0
	je l2041
	push "_bold"
	call $12,contains
	jmp l2043
l2041:
	push 0
	jmp l2043
l2042:
	push 1
l2043:
	cmp0
	je l2044
	push $12
	pop sFontBoldItalic
	jmp l2040
l2044:
	push "_italic"
	call $12,contains
	cmp0
	je l2046
	push $12
	pop sFontItalic
	jmp l2045
l2046:
	push "_bold"
	call $12,contains
	cmp0
	je l2048
	push $12
	pop sFontBold
	jmp l2047
l2048:
	push $12
	pop sFont
l2047:
l2045:
l2040:
	jmp l2038
l2037:
	push "$"
	call sFont,contains
	cmp0
	je l2050
	push sFontItalic
	push "null"
	cmpjne
	cmp0
	je l2052
	push sFontItalic
	pop sFont
	jmp l2051
l2052:
	push sFontBold
	push "null"
	cmpjne
	cmp0
	je l2054
	push sFontBold
	pop sFont
	jmp l2053
l2054:
	push sFontBoldItalic
	pop sFont
l2053:
l2051:
l2050:
	push sFont
	pop $1
	jmp l2034
l2035:
	push $1
	push $2
	cthis checkfont
	pop $1
l2034:
	new int,iFontSize
	push $2
	pop iFontSize
	push "Z"
	push $10
	cthis var2
	localstring $15
	push "null"
	pop $15
	push ":"
	call $3,contains
	cmp0
	je l2056
	push ":"
	call $3,strgetto
	push ":"
	pop $b
	popax
	add $a,$b
	pop $15
l2056:
	push ".db"
	call $3,contains
	cmp0
	je l2058
	push $15
	push "$path:"
	cmpje
	cmp0
	je l2060
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,load
	jmp l2059
l2060:
	push "dbtxt"
	push $3
	cthis newdb
l2059:
	jmp l2057
l2058:
	push $15
	spushs
	push "$lang:"
	cmpst
	jne l2062
	spop $a
	push "dbtxt"
	push $15
	call $3,strsubbs
	cthis lang_db
	jmp l2061
l2062:
	push "$var:"
	cmpst
	jne l2063
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,dbcopy
	jmp l2061
l2063:
	push "$row:"
	cmpst
	jne l2064
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	spushs
	push ","
	spop $h
	call $h,strgetto
	pop $12
	push ","
	call $3,strgetfrom
	pop $13
	push 0
	pop $14
l2065:
	push $14
	push $12
	spushs
	push $13
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2066
	jmp l2068
l2067:
	add $14,1
	pop $14
	jmp l2065
l2068:
	call dbtxt,addrow
	popax
	push $14
	push $12
	spushs
	push $13
	push $14
	spop $a
	call [$a],get
	call dbtxt,add
	jmp l2067
l2066:
	jmp l2061
l2064:
	spop $a
	new db,dbtxt
	push $3
	call dbtxt,dbaddlast
l2061:
l2057:
	localint $16
	push 0
	pop $16
	localint $17
	call dbtxt,getrowsno
	pop $17
	push 0
	push 5
	call $11,getb
	push "limit"
	cmpje
	cmp0
	je l2070
	localint $18
	push "limit_"
	call $11,strsubbs
	pop $18
	new vector,vtmp
	push "string"
	call vtmp,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	localint $14
	push 0
	pop $14
l2071:
	push $14
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l2072
	jmp l2074
l2073:
	add $14,1
	pop $14
	jmp l2071
l2074:
	push $14
	push 0
	call dbtxt,get
	push " "
	call vtmp,vecbuildfromstring
	localint $19
	push 0
	pop $19
l2075:
	push $19
	call vtmp,size
	cmpjl
	cmp0
	je l2076
	jmp l2078
l2077:
	add $19,1
	pop $19
	jmp l2075
l2078:
	push $19
	call vtmp,get
	call vtmp2,add
	jmp l2077
l2076:
	jmp l2073
l2072:
	call dbtxt,free
	localstring $12
	push ""
	pop $12
	localstring $20
	push 0
	pop $14
l2079:
	push $14
	call vtmp2,size
	cmpjl
	cmp0
	je l2080
	jmp l2082
l2081:
	add $14,1
	pop $14
	jmp l2079
l2082:
	push $14
	call vtmp2,get
	pop $20
	push $12
	push $20
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,length
	push $18
	cmpjl
	cmp0
	je l2084
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	jmp l2083
l2084:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	pop $12
l2083:
	jmp l2081
l2080:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	call dbtxt,getrowsno
	pop $17
l2070:
	new gmimgvec,grtxt
	push $7
	push $8
	call grtxt,_setpos
	push 0
	pop $14
l2085:
	push $14
	push $17
	cmpjl
	cmp0
	je l2086
	jmp l2088
l2087:
	add $14,1
	pop $14
	jmp l2085
l2088:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	spop $e
	new text,[$e]
	localdef $21
	push $14
	push 0
	call dbtxt,get
	pop $21
	push bhtml
	cmp0
	je l2090
	push "<b>"
	call $21,contains
	cmp0
	je l2092
	push sFontBold
	pop $1
	push "<b>"
	call $21,strremove
	jmp l2091
l2092:
	push "<bi>"
	call $21,contains
	cmp0
	je l2094
	push sFontBoldItalic
	pop $1
	push "<bi>"
	call $21,strremove
	jmp l2093
l2094:
	push "<i>"
	call $21,contains
	cmp0
	je l2096
	push sFontItalic
	pop $1
	push "<i>"
	call $21,strremove
	jmp l2095
l2096:
	push sFont
	pop $1
l2095:
l2093:
l2091:
l2090:
	push $12
	spushs
	push $1
	spop $a
	call [$a],setfont
	push $12
	spushs
	push $21
	spop $a
	call [$a],set
	push $12
	spushs
	push $7
	push $8
	spop $a
	call [$a],setpos
	push $2
	push $9
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	push $12
	spushs
	push $10
	spop $a
	call [$a],setz
	push $12
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	push $12
	spushs
	spop $a
	call [$a],getw
	push $16
	cmpja
	cmp0
	je l2098
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $16
l2098:
	push $12
	call grtxt,add
	jmp l2087
l2086:
	push "Rows"
	push $17
	cthis var2
	push $11
	push "right"
	cmpje
	cmp0
	jne l2101
	push $11
	push "center"
	cmpje
	jmp l2102
l2100:
	push 0
	jmp l2102
l2101:
	push 1
l2102:
	cmp0
	je l2103
	push 0
	pop $14
l2104:
	push $14
	push $17
	cmpjl
	cmp0
	je l2105
	jmp l2107
l2106:
	add $14,1
	pop $14
	jmp l2104
l2107:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $11
	push "center"
	cmpje
	cmp0
	je l2109
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	spop $a
	call [$a],move
	jmp l2108
l2109:
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l2108:
	jmp l2106
l2105:
l2103:
	push "W"
	push $16
	cthis var2
	push "grtxt"
	clparent gfxObject,init
	end method
	method stdshadow
	localint $1
	pop $1
	push 0
	push 0
	push 0
	push $1
	cthis setshadow
	end method
	method setshadow
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	push sFont
	push iFontSize
	push "_fntbrd"
	cthis _checkfont
	pop $7
	localint $8
	push 0
	pop $8
l2110:
	push $8
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l2111
	jmp l2113
l2112:
	add $8,1
	pop $8
	jmp l2110
l2113:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "txts"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new text,[$e]
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],set
	push $6
	spushs
	push $7
	spop $a
	call [$a],setfont
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $4
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	push $6
	call grtxt,add
	jmp l2112
l2111:
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtxt,setz
	end method
	method getz
	push Z
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call grtxt,isin
	end method
	method view
	localdef $1
	pop $1
	localstring $2
l2114:
	push A
	push $1
	cmpjne
	cmp0
	je l2115
	push $1
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push "txts"
	push "txt"
	call $2,strsubbs
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l2117
	push $2
	spushs
	spop $a
	call [$a],show
l2117:
	localdef $1
	pop $1
	jmp l2114
l2115:
	end method
	method blitto
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l2118:
	push $3
	call grtxt,size
	cmpjl
	cmp0
	je l2119
	jmp l2121
l2120:
	add $3,1
	pop $3
	jmp l2118
l2121:
	push $3
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],buildfullname
	push $1
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],blit
	push GAME
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardel
	jmp l2120
l2119:
	end method
	method setcol
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l2122:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l2123
	jmp l2125
l2124:
	add $4,1
	pop $4
	jmp l2122
l2125:
	push $4
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	jmp l2124
l2123:
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l2126:
	push $5
	call grtxt,size
	cmpjl
	cmp0
	je l2127
	jmp l2129
l2128:
	add $5,1
	pop $5
	jmp l2126
l2129:
	push $5
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l2128
l2127:
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	call grtxt,getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	localdef $4
	push $2
	call grtxt,getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	call grtxt,move
	end method
	end class

	class Lexer
	method init
	end method
	method buildlex
	push A
	push "id"
	push "found"
	cthis vars
	new vector,vconsts
	push "string"
	call vconsts,type
	new vector,vtmp1
	push "string"
	call vtmp1,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	new int,dot
	push "."
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop dot
	new string,_literal_char
	push "\""
	pop _literal_char
	end method
	method setliteralchar
	localstring $1
	pop $1
	push $1
	pop _literal_char
	end method
	method getliteralchar
	push _literal_char
	end method
	method _isvar
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push id
	pop $3
	push ""
	pop found
	localint $4
l2130:
	push $3
	cthis length
	cmpjl
	cmp0
	je l2131
	push $3
	cthis getbyte
	pop $4
	push $4
	push $1
	cmpjae
	cmp0
	je l2133
	push $4
	push $2
	cmpjle
	jmp l2135
l2133:
	push 0
	jmp l2135
l2134:
	push 1
l2135:
	cmp0
	je l2136
	push $3
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $3,1
	pop $3
	jmp l2132
l2136:
	push $4
	push BYTEa
	cmpjae
	cmp0
	je l2138
	push $4
	push BYTEz
	cmpjle
	jmp l2140
l2138:
	push 0
	jmp l2140
l2139:
	push 1
l2140:
	cmp0
	jne l2142
	push $4
	push BYTEA
	cmpjae
	cmp0
	je l2143
	push $4
	push BYTEZ
	cmpjle
	jmp l2145
l2143:
	push 0
	jmp l2145
l2144:
	push 1
l2145:
	cmp0
	jne l2142
	push $4
	push BYTE_
	cmpje
	jmp l2146
l2141:
	push 0
	jmp l2146
l2142:
	push 1
l2146:
	cmp0
	je l2147
	push ""
	pop found
l2147:
	cthis length
	pop $3
l2132:
	jmp l2130
l2131:
	call found,length
	end method
	method isreal
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
	localint $3
	push 1
	pop $3
l2148:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2149
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l2151
	push $2
	push BYTE9
	cmpjle
	jmp l2153
l2151:
	push 0
	jmp l2153
l2152:
	push 1
l2153:
	cmp0
	jne l2155
	push $2
	push dot
	cmpje
	cmp0
	je l2156
	push $3
	jmp l2158
l2156:
	push 0
	jmp l2158
l2157:
	push 1
l2158:
	jmp l2159
l2154:
	push 0
	jmp l2159
l2155:
	push 1
l2159:
	cmp0
	je l2160
	push $2
	push dot
	cmpje
	cmp0
	je l2162
	push 0
	pop $3
l2162:
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l2150
l2160:
	cthis length
	pop $1
l2150:
	jmp l2148
l2149:
	push $3
	cmp0
	jne l2165
	push 0
	push 1
	call found,getb
	push "."
	cmpje
	cmp0
	jne l2165
	push 0
	push 1
	call found,gete
	push "."
	cmpje
	jmp l2166
l2164:
	push 0
	jmp l2166
l2165:
	push 1
l2166:
	cmp0
	je l2167
	push ""
	pop found
l2167:
	call found,length
	end method
	method isident
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
l2168:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2169
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTEa
	cmpjae
	cmp0
	je l2171
	push $2
	push BYTEz
	cmpjle
	jmp l2173
l2171:
	push 0
	jmp l2173
l2172:
	push 1
l2173:
	cmp0
	jne l2175
	push $2
	push BYTEA
	cmpjae
	cmp0
	je l2176
	push $2
	push BYTEZ
	cmpjle
	jmp l2178
l2176:
	push 0
	jmp l2178
l2177:
	push 1
l2178:
	cmp0
	jne l2175
	push $2
	push BYTE_
	cmpje
	cmp0
	jne l2175
	push $1
	push id
	cmpja
	cmp0
	je l2179
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l2179
	push $2
	push BYTE9
	cmpjle
	jmp l2181
l2179:
	push 0
	jmp l2181
l2180:
	push 1
l2181:
	jmp l2182
l2174:
	push 0
	jmp l2182
l2175:
	push 1
l2182:
	cmp0
	je l2183
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l2170
l2183:
	cthis length
	pop $1
l2170:
	jmp l2168
l2169:
	call found,length
	end method
	method isliteral
	cthis check
	cthis getliteralchar
	cmpjne
	cmp0
	je l2185
	push 0
	ret
l2185:
	localint $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop found
	localstring $2
l2186:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2187
	push $1
	push 1
	cthis getb
	pop $2
	push $2
	cthis getliteralchar
	cmpje
	cmp0
	je l2189
	push 1
	ret
	jmp l2188
l2189:
	push $2
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
l2188:
	jmp l2186
l2187:
	push 0
	end method
	method isconst
	localstring $1
	localint $2
	cthis isident
	pop $2
	localint $3
	push 0
	pop $3
l2190:
	push $3
	call vconsts,size
	cmpjl
	cmp0
	je l2191
	jmp l2193
l2192:
	add $3,1
	pop $3
	jmp l2190
l2193:
	push $3
	call vconsts,get
	pop $1
	push $2
	cmp0
	je l2195
	push $1
	push found
	cmpje
	cmp0
	je l2197
	push 1
	ret
l2197:
	jmp l2194
l2195:
	push id
	call $1,length
	cthis getb
	pop found
	push $1
	push found
	cmpje
	cmp0
	je l2199
	push 1
	ret
l2199:
l2194:
	jmp l2192
l2191:
	push 0
	end method
	method gettoken
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
l2200:
	cthis notend
	cmp0
	je l2201
	cthis check
	push " "
	cmpje
	cmp0
	je l2203
	add id,1
	pop id
	jmp l2202
l2203:
	cthis isconst
	cmp0
	je l2205
	push $1
	spushs
	push "$const"
	spop $a
	call [$a],add
	push $1
	spushs
	cthis read
	spop $a
	call [$a],add
	jmp l2204
l2205:
	cthis isreal
	cmp0
	je l2207
	push $1
	spushs
	push "$real"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2209
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2209:
	jmp l2206
l2207:
	cthis isint
	cmp0
	je l2211
	push $1
	spushs
	push "$int"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2213
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2213:
	jmp l2210
l2211:
	cthis isident
	cmp0
	je l2215
	push $1
	spushs
	push "$alpha"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2217
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2217:
	jmp l2214
l2215:
	cthis isliteral
	cmp0
	je l2219
	push $1
	spushs
	push "$literal"
	spop $a
	call [$a],add
	cthis next
	push 2
	popax
	add id,$a
	pop id
	push $2
	cmp0
	je l2221
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2221:
	jmp l2218
l2219:
	push $1
	spushs
	push "$error"
	spop $a
	call [$a],add
	add id,1
	pop id
l2218:
l2214:
l2210:
l2206:
l2204:
l2202:
	jmp l2200
l2201:
	end method
	method expectdb
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	localstring $4
	localint $5
	push 0
	pop $5
l2222:
	push $5
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l2223
	jmp l2225
l2224:
	add $5,1
	pop $5
	jmp l2222
l2225:
	call vtmp2,free
	push 0
	pop $3
l2226:
	push $3
	push $1
	spushs
	push $5
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2227
	jmp l2229
l2228:
	add $3,1
	pop $3
	jmp l2226
l2229:
	push $1
	spushs
	push $5
	push $3
	spop $a
	call [$a],get
	pop $4
	call $4,clear
	push $4
	push ""
	cmpjne
	cmp0
	je l2231
	push $4
	call vtmp2,add
l2231:
	jmp l2228
l2227:
	push "vtmp2"
	push $2
	cthis expectvec
	cmp0
	je l2233
	push $5
	ret
l2233:
	jmp l2224
l2223:
	push 1
	popax
	sub 0,$a
	end method
	method expectvec
	localstring $1
	localint $2
	pop $2
	pop $1
	push 0
	pop id
	push "vtmp1"
	push $2
	cthis gettoken
	push $1
	call vtmp1,veceq
	end method
	method expects
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call vtmp2,vecbuildfromstring
	push "vtmp2"
	push $3
	cthis expectvec
	end method
	method consts=
	push "addbegin"
	call vconsts,withlist
	end method
	method setas
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlex"
	push "buildlex"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlex
	push $1
	spushs
	push "start"
	push "Lexer0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "notend"
	push "Lexer1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getnext"
	push "Lexer2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "next"
	push "Lexer3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "check"
	push "Lexer4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "ischar"
	push "Lexer5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isint"
	push "Lexer6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isreal"
	push "isreal"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbinary"
	push "Lexer7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isident"
	push "isident"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isconst"
	push "isconst"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "_isvar"
	push "_isvar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "read"
	push "Lexer8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isliteral"
	push "isliteral"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettoken"
	push "gettoken"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expects"
	push "expects"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectvec"
	push "expectvec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectdb"
	push "expectdb"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "consts="
	push "consts="
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setliteralchar"
	push "setliteralchar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getliteralchar"
	push "getliteralchar"
	spop $a
	call [$a],addmethod
	end method
	method Lexer0
	localstring $1
	pop $1
	push $1
	cthis set
	push 0
	pop id
	end method
	method Lexer1
	push id
	cthis length
	cmpjl
	end method
	method Lexer2
	push id
	cthis length
	cmpje
	cmp0
	je l2235
	push "null"
	ret
l2235:
	add id,1
	pop id
	push id
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	cthis getb
	end method
	method Lexer3
	call found,length
	popax
	add id,$a
	pop id
	end method
	method Lexer4
	push id
	cthis length
	cmpje
	cmp0
	je l2237
	push "null"
	ret
l2237:
	push id
	push 1
	cthis getb
	pop found
	push found
	end method
	method Lexer5
	localstring $1
	pop $1
	push id
	push 1
	cthis getb
	call $1,contains
	end method
	method Lexer6
	push BYTE0
	push BYTE9
	cthis _isvar
	end method
	method Lexer7
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis _isvar
	end method
	method Lexer8
	cthis next
	push found
	end method
	end class

	class AnimaFx
	method init
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "_buildanfx"
	push "AnimaFx0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_buildanfx
	push $1
	spushs
	push "onsetframe"
	push "AnimaFx1"
	spop $a
	call [$a],addmethod
	end method
	method AnimaFx0
	new db,dbsnd
	push 3
	call dbsnd,dbbuild
	localint $1
	push 0
	pop $1
l2238:
	push $1
	call dbsnd,getrowsno
	cmpjl
	cmp0
	je l2239
	jmp l2241
l2240:
	add $1,1
	pop $1
	jmp l2238
l2241:
	push $1
	push 0
	push $1
	push 0
	call dbsnd,get
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	call dbsnd,set
	jmp l2240
l2239:
	end method
	method AnimaFx1
	localdef $1
	cthis actionname
	push "_"
	pop $b
	popax
	add $a,$b
	cthis framenr
	pop $b
	popax
	add $a,$b
	call dbsnd,findbyrow
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l2243
	push "fx"
	push $1
	push 2
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
l2243:
	end method
	end class

	class Localize
	method init
	end method
	method _lang_db
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push "load"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	cthis lang_path
	push ".db"
	pop $b
	popax
	add $a,$b
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method lang_db
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push ""
	cthis _lang_db
	end method
	method lang_dbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "script"
	cthis _lang_db
	end method
	method lang_dbbeh
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "beh"
	cthis _lang_db
	end method
	method lang_path
	localstring $1
	pop $1
	push LANGDIR
	call gameapi,getgamename
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	end method
	end class

	class PyzCounter
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	new int,istart
	new int,istop
	new int,istep
	new int,idigits
	push 50
	pop idigits
	new int,iactual
	new string,_sanima
	push $1
	pop _sanima
	push A
	push "idx"
	push 2
	push "itimestep"
	push $2
	cthis vars2
	new gmimgvec,grcnt
	localint $3
	push 0
	pop $3
l2244:
	push $3
	push idigits
	cmpjl
	cmp0
	je l2245
	jmp l2247
l2246:
	add $3,1
	pop $3
	jmp l2244
l2247:
	localstring $4
	push "pcc"
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $1
	push $4
	cthis copyanima
	push $4
	spushs
	spop $a
	call [$a],hide
	push $4
	call grcnt,add
	jmp l2246
l2245:
	push "timcnt"
	push $2
	push "PyzCounter0"
	cthis timer=
	end method
	method PyzCounter0
	push istep
	popax
	add iactual,$a
	pop iactual
	push iactual
	cthis view
	push iactual
	push istop
	cmpje
	cmp0
	je l2249
	cthis getbuildername
	spushs
	cthis getbuildername
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2248
l2249:
	cthis play
l2248:
	end method
	method getcypher
	localint $1
	pop $1
	push "pcc"
	push _sanima
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method start
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop istart
	push $2
	pop istop
	push $3
	pop istep
	push istart
	pop iactual
	push istart
	cthis view
	call timcnt,play
	end method
	method showcypher
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis getcypher
	pop $3
	push $3
	spushs
	push 0
	push $2
	spop $a
	call [$a],setframe
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method stop
	push 0
	call timcnt,stop
	end method
	method view
	localint $1
	pop $1
	call grcnt,hide
	push 0
	push 0
	call grcnt,setpos
	push $1
	push 0
	cmpje
	cmp0
	je l2251
	push 0
	push 0
	cthis showcypher
	jmp l2250
l2251:
	localint $2
	push 0
	pop $2
l2252:
	push $1
	push 0
	cmpja
	cmp0
	je l2253
	jmp l2255
l2254:
	add $2,1
	pop $2
	jmp l2252
l2255:
	push $2
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	push $d
	cthis showcypher
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	jmp l2254
l2253:
	localint $3
	push 0
	pop $3
	localint $4
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l2256:
	push $4
	push 0
	cmpjae
	cmp0
	je l2257
	jmp l2259
l2258:
	sub $4,1
	pop $4
	jmp l2256
l2259:
	push $4
	cthis getcypher
	spushs
	push $3
	push 0
	spop $a
	call [$a],move
	push $3
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis getcypher
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l2258
l2257:
l2250:
	end method
	end class

	class AnMover
	method init
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	new timer,tmov
	push 1
	call tmov,settick
	push 1
	call tmov,setcycle
	push A
	push "rdx"
	push $2
	push "rdy"
	push $3
	cthis vars2
	new real,rsx
	push 0
	pop rsx
	new real,rsy
	push 0
	pop rsy
	new string,sanima
	push $1
	pop sanima
	push "onfinish"
	push "AnMover0"
	call tmov,addmethod
	end method
	method AnMover0
	cthis move
	push "_finish"
	cthis builder_func
	cthis play
	end method
	method move
	push rdx
	popax
	add rsx,$a
	pop rsx
	push rdy
	popax
	add rsy,$a
	pop rsy
	localint $1
	push rsx
	pop $1
	localint $2
	push rsy
	pop $2
	push $1
	cmp0
	jne l2262
	push $2
	jmp l2263
l2261:
	push 0
	jmp l2263
l2262:
	push 1
l2263:
	cmp0
	je l2264
	push sanima
	spushs
	push $1
	push $2
	spop $a
	call [$a],move
	push $1
	popax
	sub rsx,$a
	pop rsx
	push $2
	popax
	sub rsy,$a
	pop rsy
l2264:
	end method
	method reset
	push 0
	pop rsx
	push 0
	pop rsy
	end method
	method play
	cthis reset
	call tmov,play
	end method
	method stop
	push 0
	call tmov,stop
	end method
	end class

	method SetAnMover_tmov_onfinish
	cthis getbuildername
	spushs
	spop $a
	call [$a],sam_move
	cthis play
	end method
	class SetAnMover
	method init
	end method
	method setas
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "setanmover"
	push "setanmover"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setanmover
	push $1
	spushs
	push "sam_move"
	push "sam_move"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_copy"
	push "sam_copy"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_addtimer"
	push "SetAnMover0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_playtimer"
	push "SetAnMover1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_stoptimer"
	push "SetAnMover2"
	spop $a
	call [$a],addmethod
	end method
	method SetAnMover0
	new timer,tmov
	push 1
	call tmov,settick
	push 1
	call tmov,setcycle
	push "onfinish"
	push "SetAnMover_tmov_onfinish"
	call tmov,addmethod
	end method
	method SetAnMover1
	call tmov,play
	end method
	method SetAnMover2
	push 0
	call tmov,stop
	end method
	method setanmover
	localreal $1
	localreal $2
	pop $2
	pop $1
	new real,rdx
	push $1
	pop rdx
	new real,rdy
	push $2
	pop rdy
	new real,rsx
	push 0
	pop rsx
	new real,rsy
	push 0
	pop rsy
	push "sam_speed"
	push 1.0
	cthis var2
	end method
	method sam_move
	push rdx
	push sam_speed
	pop $b
	popax
	mul $a,$b
	popax
	add rsx,$a
	pop rsx
	push rdy
	push sam_speed
	pop $b
	popax
	mul $a,$b
	popax
	add rsy,$a
	pop rsy
	localint $1
	push rsx
	pop $1
	localint $2
	push rsy
	pop $2
	push $1
	cmp0
	jne l2267
	push $2
	jmp l2268
l2266:
	push 0
	jmp l2268
l2267:
	push 1
l2268:
	cmp0
	je l2269
	push $1
	push $2
	cthis move
	push $1
	popax
	sub rsx,$a
	pop rsx
	push $2
	popax
	sub rsy,$a
	pop rsy
	push "ansamcopy"
	cthis hasvar
	cmp0
	je l2271
	push $1
	push $2
	call ansamcopy,move
	push rdx
	push 0
	cmpja
	cmp0
	je l2273
	call ansamcopy,getpx
	push rollerx
	cmpja
	cmp0
	je l2275
	localdef $3
	call ansamcopy,getpx
	cthis getw
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	call ansamcopy,move
	push $3
	push 0
	cthis move
l2275:
l2273:
l2271:
l2269:
	end method
	method sam_copy
	push A
	push "rollerx"
	push 0
	push "rollerex"
	push iResX
	cthis vars2
	cthis getname
	push "ansamcopy"
	cthis copyanima
	call ansamcopy,show
	push rdx
	push 0
	cmpja
	cmp0
	je l2277
	cthis getpx
	cthis getw
	pop $b
	popax
	sub $a,$b
	cthis getpy
	call ansamcopy,ansetbpos
l2277:
	end method
	end class

	class classlives
	method init
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	localint $13
	localint $14
	localstring $15
	pop $15
	pop $14
	pop $13
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new int,iside
	push $15
	push "left"
	cmpje
	cmp0
	je l2279
	push 1
	popax
	sub 0,$a
	pop iside
	jmp l2278
l2279:
	push 1
	pop iside
l2278:
	new int,iilezyc
	push $1
	pop iilezyc
	new int,ibum
	push $2
	pop ibum
	localint $16
	push iilezyc
	push ibum
	pop $b
	popax
	mul $a,$b
	pop $16
	new int,iposxsila
	push $3
	pop iposxsila
	new int,iendxsila
	push $3
	push $16
	pop $b
	popax
	add $a,$b
	pop iendxsila
	new int,iposysila
	push $4
	pop iposysila
	push "imgsilapodkladka"
	push $16
	push $5
	push $6
	push $7
	push $8
	push $9
	push $14
	push 1
	pop $b
	popax
	sub $a,$b
	clparent newvars,newcanvas
	push "imgsila"
	push $16
	push $5
	push $10
	push $11
	push $12
	push $13
	push $14
	clparent newvars,newcanvas
	push iposxsila
	push iposysila
	call imgsila,setpos
	push iposxsila
	push 0
	call imgsila,getex
	push 600
	call imgsila,clip
	push iposxsila
	push iposysila
	call imgsilapodkladka,setpos
	end method
	method reset
	push iposxsila
	push iposysila
	call imgsila,setpos
	end method
	method damage
	localint $1
	pop $1
	push iside
	push $1
	pop $b
	popax
	mul $a,$b
	push ibum
	pop $b
	popax
	mul $a,$b
	push 0
	call imgsila,move
	end method
	method destroyed
	push iside
	push 0
	cmpjl
	cmp0
	je l2281
	call imgsila,getex
	push iposxsila
	cmpjl
	ret
l2281:
	call imgsila,getpx
	push iendxsila
	cmpja
	ret
	end method
	method heal
	localint $1
	pop $1
	push iside
	popax
	sub 0,$a
	push $1
	pop $b
	popax
	mul $a,$b
	push ibum
	pop $b
	popax
	mul $a,$b
	push 0
	call imgsila,move
	push iside
	push 0
	cmpja
	cmp0
	je l2283
	call imgsila,getpx
	push iposxsila
	cmpjl
	cmp0
	je l2285
	push iposxsila
	push iposysila
	call imgsila,setpos
l2285:
	jmp l2282
l2283:
	call imgsila,getpx
	push iposxsila
	cmpja
	cmp0
	je l2287
	push iposxsila
	push iposysila
	call imgsila,setpos
l2287:
l2282:
	end method
	end class

	class imganima
	parent gmimgvec
	method init
	clparent gmimgvec,init
	new int,idgran
	push 0
	pop idgran
	new timer,timan
	push 1
	call timan,settick
	push "onfinish"
	push "imganima0"
	call timan,addmethod
	end method
	method imganima0
	add idgran,1
	pop idgran
	localdef $1
	cthis getbuildername
	pop $1
	push idgran
	push $1
	spushs
	spop $a
	call [$a],size
	cmpje
	cmp0
	je l2289
	push $1
	spushs
	push $1
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2288
l2289:
	push idgran
	cthis setframe
	push $1
	spushs
	push $1
	push "_endframe"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l2288:
	end method
	method load
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	call timan,setcycle
	localint $6
	push $3
	pop $6
l2290:
	push $6
	push $4
	cmpjl
	cmp0
	je l2291
	jmp l2293
l2292:
	add $6,1
	pop $6
	jmp l2290
l2293:
	localdef $7
	push $1
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	push $7
	push "."
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis newimg
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l2292
l2291:
	push 0
	cthis setframe
	end method
	method play
	push 0
	cthis setframe
	call timan,play
	end method
	method setframe
	localint $1
	pop $1
	cthis hide
	push $1
	pop idgran
	push $1
	cthis get
	spushs
	spop $a
	call [$a],show
	end method
	end class

	class GuiItem
	method init
	end method
	method setasrototaker
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "_setasrototaker"
	push "GuiItem0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],_setasrototaker
	push $1
	spushs
	push "rototaker_start"
	push "rototaker_start"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_startwh"
	push "rototaker_startwh"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_startact"
	push "rototaker_startact"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_setroto"
	push "rototaker_setroto"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_endroto"
	push "GuiItem2"
	spop $a
	call [$a],addmethod
	end method
	method GuiItem0
	localdef $1
	localdef $2
	pop $2
	pop $1
	push A
	push "ilerotos"
	push $1
	push "idrotos"
	push 0.0
	push "ikatos"
	push $2
	push 360.0
	pop $b
	popax
	mul $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	push "rzoomx"
	push 0.0
	push "rzoomy"
	push 0.0
	push "rzoomstepx"
	push 0.0
	push "rzoomstepy"
	push 0.0
	push "rmovx"
	push 0.0
	push "rmovy"
	push 0.0
	push "istartalfa"
	push 128
	push "iendx"
	push 0.0
	push "iendy"
	push 0.0
	push "irotodir"
	push 1
	push "izoomdir"
	push 0
	cthis vars2
	new filter,ftroto
	push 2
	call ftroto,setpivottype
	new timer,timrotocenter
	push 1
	call timrotocenter,setcycle
	push "onfinish"
	push "GuiItem1"
	call timrotocenter,addmethod
	end method
	method GuiItem1
	cthis getbuildername
	spushs
	spop $a
	call [$a],rototaker_setroto
	cmp0
	je l2295
	cthis play
l2295:
	end method
	method GuiItem2
	push "rototaker_"
	cthis getname
	pop $b
	popax
	add $a,$b
	push "_endroto"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method rototaker_setroto
	push izoomdir
	cmp0
	je l2297
	localdef $1
	push idrotos
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	localdef $2
	push rzoomx
	push rzoomstepx
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $2
	localdef $3
	push rzoomy
	push rzoomstepy
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $3
	push irotodir
	push ikatos
	pop $b
	popax
	mul $a,$b
	push $2
	push $3
	call ftroto,rotatezoomxy
	jmp l2296
l2297:
	localdef $1
	push ilerotos
	push idrotos
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	push rzoomx
	push rzoomstepx
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $2
	localdef $3
	push rzoomy
	push rzoomstepy
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $3
	push irotodir
	push ikatos
	pop $b
	popax
	mul $a,$b
	push $2
	push $3
	call ftroto,rotatezoomxy
	push idrotos
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop $1
l2296:
	push istartalfa
	push 255
	cmpjl
	cmp0
	je l2299
	localreal $4
	push istartalfa
	pop $4
	push $4
	push 255.0
	push $4
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call ftroto,setopacity
l2299:
	localreal $5
	push iendx
	cthis getposx
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	pop $5
	localreal $6
	push iendy
	cthis getposy
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	mul $a,$b
	pop $6
	push $5
	push $6
	cthis move
	add idrotos,1
	pop idrotos
	push idrotos
	push ilerotos
	cmpjl
	cmp0
	je l2301
	push 1
	jmp l2300
l2301:
	call ftroto,unlink
	cthis rototaker_endroto
	push 0
l2300:
	end method
	method rototaker_startact
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	cthis getpx
	cthis getpy
	push $1
	push $2
	cthis getw
	cthis geth
	push $3
	cthis rototaker_start
	end method
	method rototaker_start
	localint $1
	localint $2
	localint $3
	localint $4
	localreal $5
	localreal $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	push 0
	cthis setframe
	push $1
	push $2
	cthis setpos
	push $3
	push $4
	push $5
	push $6
	cthis getw
	cthis geth
	cthis rototaker_startwh
	end method
	method rototaker_startwh
	localint $1
	localint $2
	localreal $3
	localreal $4
	localreal $5
	localreal $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop iendx
	push $2
	pop iendy
	push $1
	cthis getcx
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rmovx
	push $2
	cthis getcy
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rmovy
	push $5
	push $3
	cmpja
	cmp0
	je l2303
	push $3
	push $5
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomx
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	push $5
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepx
	push 1
	pop izoomdir
	jmp l2302
l2303:
	push 0
	pop izoomdir
	push $5
	push $3
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomx
	push 1.0
	push rzoomx
	pop $b
	popax
	sub $a,$b
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepx
l2302:
	push $6
	push $4
	cmpja
	cmp0
	je l2305
	push $4
	push $6
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomy
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	push $6
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepy
	jmp l2304
l2305:
	push $6
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomy
	push 1.0
	push rzoomy
	pop $b
	popax
	sub $a,$b
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepy
l2304:
	cthis getname
	call ftroto,link
	push 0
	pop idrotos
	cthis rototaker_setroto
	cmp0
	je l2307
	call timrotocenter,play
l2307:
	end method
	end class

	class CalcFPS
	method init
	new real,rfps1
	new real,rfps2
	new real,rfps3
	new real,rsec
	push 1000.0
	pop rsec
	new real,rstart
	push 1.0
	pop rstart
	push "tickfps"
	push "CalcFPS0"
	cthis cycle=
	end method
	method CalcFPS0
	cthis getbuildername
	spushs
	spop $a
	call [$a],tick
	cthis play
	end method
	method stdset
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis stdfont
	cthis white
	push $2
	push $3
	push 1000
	cthis set
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "txtfps"
	push 0
	push $1
	push $2
	push $3
	push $4
	cthis newtext
	push $7
	call txtfps,setz
	push $5
	push $6
	cthis setpos
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txtfps,setpos
	end method
	method tick
	localreal $1
	call engine,getticks
	pop $1
	push $1
	push rstart
	cmpja
	cmp0
	je l2309
	push rfps2
	pop rfps1
	push rfps3
	pop rfps2
	push rsec
	push $1
	push rstart
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop rfps3
	push "delay: "
	push $1
	push rstart
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push " fps: "
	pop $b
	popax
	add $a,$b
	push rfps1
	push rfps2
	pop $b
	popax
	add $a,$b
	push rfps3
	pop $b
	popax
	add $a,$b
	push 3
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	call txtfps,txtset
	jmp l2308
l2309:
	push "inf"
	call txtfps,txtset
l2308:
	push $1
	pop rstart
	end method
	method play
	call tickfps,play
	end method
	method stop
	push 0
	call tickfps,stop
	end method
	end class

	class Film
	parent gfxObject
	method init
	new img,imfilm
	push "imfilm"
	clparent gfxObject,init
	new string,sfilmpath
	new db,dbfilm
	new db,dbfilm2
	new int,istartklatka
	new int,iklatka
	new int,iendklatka
	new string,sprefilm
	new int,ifilmcycle
	new string,smusic
	new int,igameloopdelay
	push 33
	pop igameloopdelay
	new gmobjvec,grsfx
	new gmimgvec,grbuf
	push A
	push "bcenter"
	push 0
	push "bborders"
	push 0
	push "musicclass"
	push "null"
	push "bbuffer"
	push 0
	cthis vars2
	push "timfilm"
	push "Film0"
	cthis cycle=
	end method
	method Film0
	cthis load
	push iklatka
	push iendklatka
	cmpjle
	cmp0
	je l2311
	call timfilm,play
	jmp l2310
l2311:
	cthis retfps
	localdef $1
	cthis getbuildername
	pop $1
	push $1
	spushs
	push "onfinish"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2313
	push $1
	spushs
	spop $a
	call [$a],onfinish
l2313:
l2310:
	end method
	method bufferfilm
	end method
	method retfps
	push igameloopdelay
	call engine,setloopdelay
	end method
	method setcycle
	localint $1
	pop $1
	push $1
	call timfilm,setcycle
	push $1
	pop ifilmcycle
	end method
	method load
	localdef $1
	push iklatka
	call dbfilm,findbyrow
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l2315
	localint $2
	push 1
	pop $2
l2316:
	push $2
	push $1
	call dbfilm,getcolsno
	cmpjl
	cmp0
	je l2317
	jmp l2319
l2318:
	add $2,1
	pop $2
	jmp l2316
l2319:
	push $1
	push $2
	call dbfilm,get
	spushs
	push "fadeout:"
	cmpst
	jne l2321
	spop $a
	add $2,1
	pop $2
	push musicclass
	push "null"
	cmpjne
	cmp0
	je l2323
	push musicclass
	spushs
	push $1
	push $2
	call dbfilm,get
	spop $a
	call [$a],fadeout
l2323:
	jmp l2320
l2321:
	spop $a
	push $1
	push $2
	call dbfilm,get
	spushs
	spop $a
	call [$a],play
l2320:
	jmp l2318
l2317:
l2315:
	localdef $3
	call imfilm,getz
	pop $3
	localdef $4
	call imfilm,getpx
	pop $4
	localdef $5
	call imfilm,getpy
	pop $5
	push bbuffer
	cmp0
	je l2325
	localdef $6
	push iklatka
	push istartklatka
	pop $b
	popax
	sub $a,$b
	call grbuf,get
	pop $6
	push $6
	spushs
	spop $a
	call [$a],createfrombuffer
	push $6
	call imfilm,copy
	push $6
	spushs
	spop $a
	call [$a],hide
	call imfilm,show
	push iklatka
	push istartklatka
	cmpja
	cmp0
	je l2327
	push iklatka
	push istartklatka
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuf,get
	spushs
	spop $a
	call [$a],free
l2327:
	jmp l2324
l2325:
	push sfilmpath
	push sprefilm
	pop $b
	popax
	add $a,$b
	push iklatka
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	call imfilm,load
	call imfilm,show
l2324:
	push $3
	call imfilm,setz
	push bcenter
	cmp0
	je l2329
	push igmappw
	call imfilm,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	call imfilm,geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imfilm,setpos
	jmp l2328
l2329:
	push $4
	push $5
	call imfilm,setpos
l2328:
	add iklatka,1
	pop iklatka
	end method
	method playfilm
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis isplaying
	cmp0
	je l2331
	cthis free
l2331:
	push $1
	pop sfilmpath
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push ".db"
	pop $b
	popax
	add $a,$b
	call dbfilm,load
	push "start:"
	call dbfilm,dbgetint
	pop istartklatka
	push istartklatka
	pop iklatka
	push "end:"
	call dbfilm,dbgetint
	pop iendklatka
	push "prefix:"
	call dbfilm,dbget
	pop sprefilm
	push "music:"
	call dbfilm,dbget
	pop smusic
	push "buffer:"
	call dbfilm,dbgetint
	pop bbuffer
	push bbuffer
	cmp0
	je l2333
	localint $3
	push istartklatka
	pop $3
l2334:
	push $3
	push iendklatka
	cmpjle
	cmp0
	je l2335
	jmp l2337
l2336:
	add $3,1
	pop $3
	jmp l2334
l2337:
	localdef $4
	push "imbuf"
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	spop $e
	new img,[$e]
	push $4
	spushs
	push sfilmpath
	push sprefilm
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],loadbuffer
	push $4
	call grbuf,add
	jmp l2336
l2335:
l2333:
	call engine,getloopdelay
	pop igameloopdelay
	localint $5
	push "fps:"
	call dbfilm,dbgetint
	pop $5
	push $5
	push 0
	cmpja
	cmp0
	je l2339
	push $5
	call engine,setfps
l2339:
	localint $3
	push 0
	pop $3
l2340:
	push $3
	call dbfilm,getrowsno
	cmpjl
	cmp0
	je l2341
	jmp l2343
l2342:
	add $3,1
	pop $3
	jmp l2340
l2343:
	localdef $4
	push $3
	push 0
	call dbfilm,get
	pop $4
	push $4
	clparent StringChecker,isdigit
	cmp0
	je l2345
	localint $6
	push 1
	pop $6
l2346:
	push $6
	push $3
	call dbfilm,getcolsno
	cmpjl
	cmp0
	je l2347
	jmp l2349
l2348:
	add $6,1
	pop $6
	jmp l2346
l2349:
	localdef $7
	push $3
	push $6
	call dbfilm,get
	pop $7
	push $7
	spushs
	push "fadeout:"
	cmpst
	jne l2351
	spop $a
	add $6,1
	pop $6
	jmp l2350
l2351:
	spop $a
	push $7
	cthis sfx=
	push "fx"
	push " "
	call $7,strgetto
	pop $b
	popax
	add $a,$b
	pop $7
	push $3
	push $6
	push $7
	call dbfilm,set
	push $7
	call grsfx,add
l2350:
	jmp l2348
l2347:
l2345:
	jmp l2342
l2341:
	cthis play
	end method
	method play
	push istartklatka
	pop iklatka
	cthis load
	push bborders
	cmp0
	je l2353
	push "imramkaup"
	cthis hasvar
	neg
	jmp l2355
l2353:
	push 0
	jmp l2355
l2354:
	push 1
l2355:
	cmp0
	je l2356
	new img,imramkaup
	new img,imramkadown
	new img,imramkaleft
	new img,imramkaright
	localint $1
	push 0.5
	push igmapph
	call imfilm,geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l2358
	push igmappw
	push $1
	cthis black
	push 255
	call imramkaup,create
	push 10
	popax
	sub 0,$a
	call imramkaup,setz
	push "imramkaup"
	call imramkadown,copy
	push 0
	push igmapph
	push $1
	pop $b
	popax
	sub $a,$b
	call imramkadown,setpos
l2358:
	localint $2
	push 0.5
	push igmappw
	call imfilm,getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l2360
	push $2
	push igmapph
	cthis black
	push 255
	call imramkaleft,create
	push 10
	popax
	sub 0,$a
	call imramkaleft,setz
	push "imramkaleft"
	call imramkaright,copy
	push igmappw
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	call imramkaright,setpos
l2360:
l2356:
	push smusic
	push "null"
	cmpjne
	cmp0
	je l2362
	push musicclass
	push "null"
	cmpjne
	jmp l2364
l2362:
	push 0
	jmp l2364
l2363:
	push 1
l2364:
	cmp0
	je l2365
	push musicclass
	spushs
	push smusic
	spop $a
	call [$a],playstr
l2365:
	call timfilm,play
	end method
	method free
	delete imfilm
	new img,imfilm
	localint $1
	push 0
	pop $1
l2366:
	push $1
	call grsfx,size
	cmpjl
	cmp0
	je l2367
	jmp l2369
l2368:
	add $1,1
	pop $1
	jmp l2366
l2369:
	push $1
	call grsfx,get
	spushs
	spop $d
	delete [$d]
	jmp l2368
l2367:
	push 0
	pop $1
l2370:
	push $1
	call grbuf,size
	cmpjl
	cmp0
	je l2371
	jmp l2373
l2372:
	add $1,1
	pop $1
	jmp l2370
l2373:
	push $1
	call grbuf,get
	spushs
	spop $d
	delete [$d]
	jmp l2372
l2371:
	call grbuf,free
	call grsfx,free
	cthis retfps
	end method
	method isplaying
	call timfilm,isplaying
	end method
	method stop
	localint $1
	pop $1
	cthis retfps
	push $1
	cmp0
	je l2375
	push iendklatka
	pop iklatka
l2375:
	push $1
	call timfilm,stop
	end method
	end class

	class classadvobject
	method init
	cthis addasadvobject
	end method
	method addasadvobject
	push AdventureGame
	neg
	cmp0
	je l2377
	ret
l2377:
	localstring $1
	cthis getname
	pop $1
	push $1
	call grmsmove,addonce
	push $1
	call grmslrel,addonce
	push $1
	call grmslclick,addonce
	push $1
	call grmsrclick,addonce
	end method
	method removefromadvobjs
	push AdventureGame
	neg
	cmp0
	je l2379
	ret
l2379:
	localstring $1
	cthis getname
	pop $1
	push $1
	call grmsmove,remove
	push $1
	call grmslrel,remove
	push $1
	call grmslclick,remove
	push $1
	call grmsrclick,remove
	end method
	method onmousemove
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method onmouselclick
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method onmouselrel
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method onmouserclick
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	end class

	class advDelayMover
	parent DelayImgMover
	parent classadvobject
	method init
	clparent classadvobject,init
	clparent DelayImgMover,init
	push 1
	pop b2clicks
	end method
	method onmousemove
	localint $1
	localint $2
	pop $2
	pop $1
	clparent DelayImgMover,onmousemove
	end method
	method onmouselclick
	localint $1
	localint $2
	pop $2
	pop $1
	clparent DelayImgMover,onmouselclick
	end method
	method onmouselrel
	localint $1
	localint $2
	pop $2
	pop $1
	clparent DelayImgMover,onmouselrel
	end method
	end class

	class classadvanhero
	method init
	end method
	method setashero
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "buildhero"
	push "buildhero"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onendframe"
	push "heroendframe1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildhero
	push $1
	spushs
	push "buildheroframe"
	push "buildheroframe"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onfinish"
	push "herofinish"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getdir"
	push "getdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setdir"
	push "setdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "thisfinish"
	push "thisfinish"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "playspec"
	push "playspec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "playspec2"
	push "playspec2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostop"
	push "herostop"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostart"
	push "herostart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostand"
	push "herostand"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstdfin"
	push "setstdfin"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getpocket"
	push "getpocket"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "haspocket"
	push "haspocket"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstandbase"
	push "setstandbase"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	spop $a
	call [$a],setstdfin
	end method
	method buildheroframe
	localstring $1
	pop $1
	push $1
	spushs
	push "onendframe"
	push "heroendframe"
	spop $a
	call [$a],addmethod
	end method
	method setstdfin
	localstring $1
	pop $1
	push "onstdfinish"
	push $1
	cthis addmethod
	end method
	method setstandbase
	localstring $1
	pop $1
	push $1
	pop _sstandbase
	end method
	method buildhero
	new string,_sbase
	new int,_istate
	push 0
	pop _istate
	new string,_sfinfun
	new string,_sobfin
	new int,_bplaystop
	new int,_iiloscsek
	new int,_itypsort
	new int,idsort
	new string,_sobstart
	new string,_sfunfinstart
	new int,bthisfin
	push 0
	pop bthisfin
	new string,_sstandbase
	push "stand"
	pop _sstandbase
	end method
	method getpocket
	push _spocketpref
	cthis getname
	pop $b
	popax
	add $a,$b
	ret
	end method
	method haspocket
	push _spocketpref
	cthis getname
	pop $b
	popax
	add $a,$b
	call engine,varexist
	ret
	end method
	method thisfinish
	localint $1
	pop $1
	push $1
	pop bthisfin
	end method
	method getdir
	cthis actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	ret
	end method
	method setdir
	localstring $1
	pop $1
	cthis actionname
	spushs
	push 2
	spop $h
	call $h,strsube
	push $1
	pop $b
	popax
	add $a,$b
	cthis framenr
	cthis setframe
	end method
	method playspec
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop _sbase
	push $2
	pop _iiloscsek
	push $3
	pop _itypsort
	push $7
	pop _bplaystop
	push $8
	pop _sobfin
	push $9
	pop _sfinfun
	push $5
	pop _sobstart
	push $6
	pop _sfunfinstart
	push $2
	push 0
	cmpja
	cmp0
	je l2381
	push $3
	push 0
	cmpje
	cmp0
	je l2383
	push 1
	pop idsort
	jmp l2382
l2383:
	push $3
	push 1
	cmpje
	cmp0
	je l2385
	call $2,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
l2385:
l2382:
l2381:
	push $4
	cmp0
	je l2387
	push 1
	pop _istate
	push $1
	push "start"
	pop $b
	popax
	add $a,$b
	push $10
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l2386
l2387:
	push $1
	push $2
	push 0
	cmpja
	cmp0
	je l2389
	push "1"
	push $10
	pop $b
	popax
	add $a,$b
	jmp l2388
l2389:
	push $10
l2388:
	pop $b
	popax
	add $a,$b
	push 0
	cthis setframe
	cthis herostart
l2386:
	end method
	method playspec2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call $1,length
	push 2
	cmpjl
	cmp0
	je l2391
	push ""
	jmp l2390
l2391:
	push 2
	call $1,strsube
l2390:
	pop $4
	push $4
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	push $2
	push $3
	push 0
	push 2
	call $1,gete
	cthis playspec
	end method
	method herostop
	push 3
	pop _istate
	push _bplaystop
	cmp0
	je l2393
	push 0
	pop _bplaystop
	push 1
	cthis thisfinish
	push _sbase
	push "stop"
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l2392
l2393:
	push 1
	cthis stop
l2392:
	end method
	method herostart
	push 2
	pop _istate
	push _sbase
	push _iiloscsek
	push 0
	cmpja
	cmp0
	je l2395
	push idsort
	jmp l2394
l2395:
	push ""
l2394:
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
	end method
	method herofinish
	push _istate
	push 2
	cmpje
	cmp0
	je l2397
	push bthisfin
	jmp l2399
l2397:
	push 0
	jmp l2399
l2398:
	push 1
l2399:
	cmp0
	je l2400
	push 3
	pop _istate
l2400:
	push _istate
	push 0
	cmpje
	cmp0
	je l2402
	cthis herostand
	cthis onstdfinish
	localstring $1
	cthis getname
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push $1
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $1
	push "_ACTION_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l2401
l2402:
	push _istate
	push 1
	cmpje
	cmp0
	je l2404
	cthis herostart
	push _sobstart
	push _sfunfinstart
	cthis callfun
	jmp l2403
l2404:
	push _istate
	push 2
	cmpje
	cmp0
	je l2406
	localstring $3
	push _iiloscsek
	push 0
	cmpja
	cmp0
	je l2408
	push _itypsort
	push 0
	cmpje
	cmp0
	je l2410
	push idsort
	push _iiloscsek
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
	jmp l2409
l2410:
	push _itypsort
	push 1
	cmpje
	cmp0
	je l2412
	call _iiloscsek,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
l2412:
l2409:
	push _sbase
	push idsort
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l2407
l2408:
	cthis actionname
	pop $3
l2407:
	push $3
	cthis play
	jmp l2405
l2406:
	push _istate
	push 3
	cmpje
	cmp0
	je l2414
	push 0
	pop _istate
	cthis herostand
	push 1
	cthis thisfinish
	push _sobfin
	push _sfinfun
	cthis callfun
l2414:
l2405:
l2403:
l2401:
	end method
	method herostand
	localstring $1
	push _sstndpref
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l2416
	push _sstandbase
	cthis actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	pop $b
	popax
	add $a,$b
	cthis play
	push $1
	spushs
	spop $a
	call [$a],play
l2416:
	end method
	method heroendframe1
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method heroendframe
	cthis getposy
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	cthis setz
	cthis haspocket
	cmp0
	je l2418
	cthis getpocket
	spushs
	cthis getposx
	cthis getposy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],pocketpos
l2418:
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classadvhero
	method init
	new string,_sanim
	new int,_bisvecile
	push 0
	pop _bisvecile
	new string,_sbase
	push "null"
	pop _sbase
	new string,_sbase2
	push "null"
	pop _sbase2
	new int,izakres
	push 0
	pop izakres
	new string,_sbs2
	new string,_sbutoper
	new string,_smetpart
	new string,_simgbut
	new string,_sptfname
	cthis getname
	pop _sptfname
	end method
	method getptfname
	push _sptfname
	ret
	end method
	method link
	localstring $1
	pop $1
	push $1
	pop _sanim
	end method
	method link2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis link
	push $2
	cthis checkamounts
	end method
	method anstand
	push _sanim
	spushs
	push "stand"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method ansay
	push _sanim
	spushs
	push "talk"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method getdir
	push _sanim
	spushs
	spop $a
	call [$a],actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	end method
	method nofpieces
	cthis getdir
	cthis nofpiecesdir
	ret
	end method
	method nofpiecesdir
	localstring $1
	pop $1
	push _bisvecile
	cmp0
	je l2420
	push $1
	call vecdirs,find
	call vecile,get
	jmp l2419
l2420:
	push 0
l2419:
	ret
	end method
	method setbase2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis setbase
	push $2
	pop _sbase2
	end method
	method setbase
	localstring $1
	pop $1
	push $1
	pop _sbase
	call $1,length
	pop izakres
	end method
	method getpropdir
	localstring $1
	pop $1
	push $1
	push "auto"
	cmpje
	cmp0
	je l2422
	cthis getdir
	jmp l2421
l2422:
	push $1
l2421:
	ret
	end method
	method _buildamounts
	push _bisvecile
	neg
	cmp0
	je l2424
	push 1
	pop _bisvecile
	new vector,vecdirs
	push "string"
	call vecdirs,type
	push "begin"
	push "uu"
	push "ru"
	push "rr"
	push "rd"
	push "dd"
	push "ld"
	push "ll"
	push "lu"
	call vecdirs,beginadd
	new vector,vecile
l2424:
	end method
	method _clearvecile
	call vecile,free
	push 8
	push 0
	call vecile,resize
	end method
	method checkamounts
	localstring $1
	pop $1
	push $1
	cthis setbase
	cthis _buildamounts
	cthis _clearvecile
	push _sanim
	push "null"
	cmpje
	cmp0
	je l2426
	ret
l2426:
	localint $2
	push _sanim
	spushs
	spop $a
	call [$a],nofactions
	pop $2
	localstring $3
	localint $4
	localint $5
	push 0
	pop $5
l2427:
	push $5
	push $2
	cmpjl
	cmp0
	je l2428
	jmp l2430
l2429:
	add $5,1
	pop $5
	jmp l2427
l2430:
	push _sanim
	spushs
	push $5
	spop $a
	call [$a],nameofaction
	pop $3
	push 0
	push izakres
	call $3,getb
	push $1
	cmpje
	cmp0
	je l2432
	push izakres
	push 10
	call $3,getb
	pop $4
	push $4
	push 0
	cmpja
	cmp0
	je l2434
	push 0
	push 2
	call $3,gete
	call vecdirs,find
	call vecile,vecinc
l2434:
l2432:
	jmp l2429
l2428:
	end method
	method getanim
	push _sanim
	end method
	method calllastfun
	cthis getcallfin
	spushs
	spop $d
	cthis [$d]
	push _simgbut
	spushs
	spop $a
	call [$a],checkonce
	end method
	method _calllastfunfin
	cthis calllastfunfin
	cthis advmsunlock
	end method
	method calllastfunfin
	cthis getcallfin
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method getcallfin
	push _sanim
	push _smetpart
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	ret
	end method
	method _cplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	cthis advmslock
	push _sanim
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push $1
	push "null"
	cmpje
	cmp0
	je l2436
	push _sanim
	spushs
	push $3
	cthis getpropdir
	spop $a
	call [$a],setdir
	push $2
	push "null"
	cmpjne
	cmp0
	je l2438
	push $2
	spushs
	spop $d
	cthis [$d]
l2438:
	jmp l2435
l2436:
	push _sanim
	spushs
	push $1
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	cthis getname
	push $2
	push $3
	cthis getpropdir
	spop $a
	call [$a],playspec
l2435:
	end method
	method _cplay1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "_cplay1_2"
	push $2
	cthis _cplay
	end method
	method _cplay1_2
	cthis calllastfun
	cthis _callbehs
	end method
	method _callbehs
	cthis advmsunlock
	cthis callbehs
	end method
	method callbehs
	localstring $1
	cthis getcallfin
	pop $1
	push "beh_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l2440
	push "beh_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getname
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l2439
l2440:
	cthis _calllastfunfin
l2439:
	end method
	method _cplay2_2
	cthis calllastfun
	push _sbs2
	push "_callbehs"
	cthis getdir
	cthis _cplay
	end method
	method _cplay2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	pop _sbs2
	push $1
	push "_cplay2_2"
	push $3
	cthis _cplay
	end method
	method no_turn
	localstring $1
	pop $1
	localstring $2
	push _spathpref
	push _sanim
	pop $b
	popax
	add $a,$b
	pop $2
	localstring $3
	push _simgbut
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	pop $3
	push $2
	call engine,varexist
	cmp0
	je l2442
	cthis getdir
	push $3
	cmpjne
	jmp l2444
l2442:
	push 0
	jmp l2444
l2443:
	push 1
l2444:
	cmp0
	je l2445
	push $2
	spushs
	push $3
	cthis getname
	push $1
	spop $a
	call [$a],heroturn
	push 0
	jmp l2441
l2445:
	push 1
l2441:
	end method
	method _heroplay1
	push _simgbut
	cthis heroplay1
	end method
	method _heroplay2
	push _simgbut
	cthis heroplay2
	end method
	method heroplay1
	localstring $1
	pop $1
	push $1
	pop _simgbut
	push "_heroplay1"
	cthis no_turn
	cmp0
	je l2447
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $1
	spushs
	spop $a
	call [$a],getbase1
	push $1
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay1
l2447:
	end method
	method heroplay2
	localstring $1
	pop $1
	push $1
	pop _simgbut
	push "_heroplay2"
	cthis no_turn
	cmp0
	je l2449
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $1
	spushs
	spop $a
	call [$a],getbase1
	push $1
	spushs
	spop $a
	call [$a],getbase2
	push $1
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay2
l2449:
	end method
	method _setbase2
	localstring $1
	pop $1
	push $1
	push 1
	call modadv,get
	push $1
	push 2
	call modadv,get
	cthis setbase2
	end method
	method _setbase
	localstring $1
	pop $1
	push $1
	push 1
	call modadv,get
	cthis setbase
	end method
	method heroplay3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push 1
	call modadv,get
	spop $a
	call [$a],setbutbase1
	push $1
	spushs
	push $2
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase2
	push $1
	cthis heroplay2
	end method
	end class

	new snd,_fxtakeitem
	class classherotaker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "_PICKUP_"
	pop _smetpart
	end method
	method herotake
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method calllastfun
	push _sanim
	spushs
	spop $a
	call [$a],haspocket
	cmp0
	je l2451
	call _fxtakeitem,play
	push _simgbut
	spushs
	spop $a
	call [$a],hideontake
	cmp0
	je l2453
	push _simgbut
	spushs
	spop $a
	call [$a],hide
	jmp l2452
l2453:
	push _simgbut
	spushs
	push "but"
	spop $a
	call [$a],setbuttyp
l2452:
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	push _sbutoper
	push _simgbut
	spushs
	spop $a
	call [$a],getpocket
	spop $a
	call [$a],additem
l2451:
	clparent classadvhero,calllastfun
	end method
	end class

	class classherolooker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "_OPERATE_"
	pop _smetpart
	end method
	method herolook
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method herooperate
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method heroopendoor
	localstring $1
	pop $1
	push $1
	push "open:"
	cthis heroplay3
	end method
	method heroclosedoor
	localstring $1
	pop $1
	push $1
	push "close:"
	cthis heroplay3
	end method
	end class

	class classherouser
	parent classadvhero
	method init
	clparent classadvhero,init
	new string,_stool
	end method
	method herouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _stool
	push "_USE_"
	push _stool
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	pop _smetpart
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	spop $a
	call [$a],itemhide
	push $2
	pop _simgbut
	push $2
	spushs
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $2
	spushs
	spop $a
	call [$a],baseuse1
	push $2
	spushs
	spop $a
	call [$a],baseuse2
	push $2
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay2
	end method
	method calllastfun
	push _sanim
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis getcallfin
	spushs
	spop $d
	cthis [$d]
	end method
	method calllastfunfin
	push _sanim
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis getcallfin
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method callbehs
	localstring $1
	cthis getname
	pop $1
	push "beh_"
	cthis getcallfin
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l2455
	push "beh_"
	cthis getcallfin
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l2454
l2455:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l2457
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l2456
l2457:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l2459
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l2458
l2459:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE"
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l2461
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE"
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l2460
l2461:
	cthis _calllastfunfin
l2460:
l2458:
l2456:
l2454:
	end method
	end class

	class classpathf
	parent classadvhero
	method init
	clparent classadvhero,init
	new path,ptf
	new string,swalkto
	push "null"
	pop swalkto
	new string,_sfunnopath
	push "null"
	pop _sfunnopath
	new string,_sfunvisit
	push "null"
	pop _sfunvisit
	new int,destx
	new int,desty
	new int,bzmien
	push 0
	pop bzmien
	new int,bzatrzym
	push 0
	pop bzatrzym
	new string,_sitem
	push "null"
	pop _sitem
	new string,_sobzmien
	push "null"
	pop _sobzmien
	new string,_sfunzmien
	push "null"
	pop _sfunzmien
	new int,_istep
	new int,_itmpspeed
	push A
	push "ispathto"
	push 1
	cthis vars2
	push "onfinish"
	push "_cptffin"
	call ptf,addmethod
	push "onvisit"
	push "_cptvisit"
	call ptf,addmethod
	push "_cptfstdreach"
	push "_cptfstdarrive"
	cthis addsigs
	push "go:"
	cthis _setbase
	end method
	method _buildan
	localstring $1
	pop $1
	push $1
	call ptf,linkanima
	push $1
	cthis link
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	pop _istep
	push $2
	push $3
	push $4
	push $5
	push $6
	call ptf,build
	push $1
	cthis _buildan
	end method
	method buildfrom
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	pop _istep
	push $2
	push $3
	call ptf,copy
	push $1
	cthis _buildan
	end method
	method addsigs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l2463
	push "onreach"
	push $1
	call ptf,addmethod
l2463:
	push $2
	push "null"
	cmpjne
	cmp0
	je l2465
	push "onarrive"
	push $2
	call ptf,addmethod
l2465:
	end method
	method sigonnopath
	localstring $1
	pop $1
	push $1
	pop _sfunnopath
	end method
	method sigonvisit
	localstring $1
	pop $1
	push $1
	pop _sfunvisit
	end method
	method _cptfstdreach
	localstring $1
	pop $1
	end method
	method _cptfstdarrive
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,move
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,setpos
	end method
	method show
	call ptf,show
	end method
	method hide
	call ptf,hide
	end method
	method enable
	localint $1
	pop $1
	push $1
	call ptf,enable
	end method
	method disable
	localint $1
	pop $1
	push $1
	call ptf,disable
	end method
	method setanstep
	localint $1
	pop $1
	push $1
	pop _istep
	push $1
	call ptf,setanstep
	end method
	method mulspeed
	localint $1
	pop $1
	push $1
	push _istep
	pop $b
	popax
	mul $a,$b
	pop _itmpspeed
	push _itmpspeed
	call ptf,setanstep
	end method
	method retstep
	push _istep
	cthis setanstep
	end method
	method getanstep
	push _istep
	ret
	end method
	method getposx
	call ptf,getposx
	ret
	end method
	method getposy
	call ptf,getposy
	ret
	end method
	method getpx
	call ptf,getpx
	ret
	end method
	method getpy
	call ptf,getpy
	ret
	end method
	method getidan
	call ptf,getidan
	ret
	end method
	method getidan2
	call ptf,getidan2
	ret
	end method
	method getidgo
	call ptf,getidgo
	ret
	end method
	method getidanpath
	call ptf,getidanpath
	ret
	end method
	method getidan2path
	call ptf,getidan2path
	ret
	end method
	method getidgopath
	call ptf,getidgopath
	ret
	end method
	method excludev
	localint $1
	pop $1
	push $1
	call ptf,excludev
	end method
	method linkfilter
	call ptf,linkfilter
	end method
	method unlinkfilter
	call ptf,unlinkfilter
	end method
	method unlinkanima
	call ptf,unlinkanima
	end method
	method linkanima
	localstring $1
	pop $1
	push $1
	call ptf,linkanima
	end method
	method setscalepower
	localreal $1
	pop $1
	push $1
	call ptf,setscalepower
	end method
	method setzsize
	localreal $1
	pop $1
	push $1
	call ptf,setzsize
	end method
	method iswayto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,iswayto
	ret
	end method
	method scalean
	call ptf,scalean
	end method
	method getfromver
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	call ptf,getfromver
	ret
	end method
	method getgover
	localint $1
	pop $1
	push $1
	call ptf,getgover
	ret
	end method
	method getanver
	localint $1
	pop $1
	push $1
	call ptf,getanver
	ret
	end method
	method getxver
	localint $1
	pop $1
	push $1
	call ptf,getxver
	ret
	end method
	method getyver
	localint $1
	pop $1
	push $1
	call ptf,getyver
	ret
	end method
	method getbyname
	localint $1
	pop $1
	push $1
	call ptf,getbyname
	ret
	end method
	method walkbase
	localstring $1
	pop $1
	push $1
	call ptf,setbase
	end method
	method letturn
	localint $1
	pop $1
	push $1
	call ptf,letturn
	end method
	method canturn
	call ptf,canturn
	end method
	method vecdir
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,vecdir
	end method
	method ptfgoto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,goto
	end method
	method setmovetype
	localint $1
	pop $1
	push $1
	call ptf,setmovetype
	end method
	method walkto2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop swalkto
	push $2
	push $3
	cthis cangoto
	cmp0
	je l2467
	push $2
	push $3
	call ptf,goto
	pop $2
	jmp l2466
l2467:
	push _sfunnopath
	push "null"
	cmpjne
	cmp0
	je l2469
	push _sfunnopath
	spushs
	spop $d
	cthis [$d]
l2469:
l2466:
	end method
	method walkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop swalkto
	push $1
	push "null"
	cmpje
	cthis letturn
	cthis iswalking
	cmp0
	je l2471
	push $2
	push $3
	call ptf,iswayto
	cmp0
	je l2473
	push 1
	pop bzmien
	push $2
	pop destx
	push $3
	pop desty
	push 0
	ret
	jmp l2472
l2473:
	push 1
	pop bzatrzym
	push 1
	popax
	sub 0,$a
	ret
l2472:
	jmp l2470
l2471:
	push $2
	push $3
	call ptf,goto
	ret
l2470:
	end method
	method iswaytover
	localint $1
	pop $1
	push slastpathf
	spushs
	push $1
	spop $a
	call [$a],getbyname
	pop $1
	push $1
	cthis getxver
	cthis getposx
	pop $b
	popax
	sub $a,$b
	push $1
	cthis getyver
	cthis getposy
	pop $b
	popax
	sub $a,$b
	call ptf,iswayto
	end method
	method length
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,length
	end method
	method lengthver
	localint $1
	pop $1
	push slastpathf
	spushs
	push $1
	spop $a
	call [$a],getbyname
	pop $1
	push $1
	cthis getxver
	cthis getposx
	pop $b
	popax
	sub $a,$b
	push $1
	cthis getyver
	cthis getposy
	pop $b
	popax
	sub $a,$b
	cthis length
	end method
	method goto
	localint $1
	localint $2
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	cthis walkto
	ret
	end method
	method gotorel
	localint $1
	localint $2
	pop $2
	pop $1
	push _sanim
	spushs
	spop $a
	call [$a],getpx
	push $1
	pop $b
	popax
	add $a,$b
	push _sanim
	spushs
	spop $a
	call [$a],getey
	push $2
	pop $b
	popax
	add $a,$b
	cthis goto
	ret
	end method
	method turn
	localstring $1
	pop $1
	push $1
	call ptf,turn
	end method
	method iswalking
	call ptf,iswalking
	ret
	end method
	method stand
	call ptf,stand
	end method
	method stop
	localint $1
	pop $1
	push $1
	call ptf,stop
	end method
	method getidpath
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,getidpath
	ret
	end method
	method cangoto
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	call ptf,getidpath
	pop $3
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l2475
	push 0
	jmp l2474
l2475:
	push $3
	call ptf,isenabled
l2474:
	ret
	end method
	method _cptfreachpocket
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herolook
	end method
	method _cptfreachbut
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herolook
	end method
	method _cptfreachdoors
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herooperate
	end method
	method _cptfreachitem
	cthis getptfname
	push "take"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herotake
	end method
	method _cptfherofin
	cthis herostand
	push swalkto
	push "null"
	cmpjne
	cmp0
	je l2477
	push _sanim
	push "_REACH_"
	pop $b
	popax
	add $a,$b
	push swalkto
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	cthis ismainhero
	cmp0
	je l2479
	localstring $1
	push "null"
	pop $1
	push _sanim
	spushs
	spop $a
	call [$a],haspocket
	cmp0
	je l2481
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	spop $a
	call [$a],getitem
	pop $1
l2481:
	push $1
	push "null"
	cmpjne
	cmp0
	je l2483
	cthis getptfname
	push "use"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push swalkto
	spop $a
	call [$a],herouse
	jmp l2482
l2483:
	push "_cptfreach"
	push swalkto
	spushs
	spop $a
	call [$a],gettyp
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2482:
l2479:
	push "null"
	pop swalkto
	jmp l2476
l2477:
	push _sanim
	push "_ARRIVE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis _cptheroendpath
l2476:
	end method
	method sigonzmien
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sobzmien
	push $2
	pop _sfunzmien
	end method
	method _cptheroendpath
	push _sfinob
	push _sfinfun
	cthis callfun
	push _bylfin
	cmp0
	je l2485
	push 0
	pop _bylfin
	jmp l2484
l2485:
	push "null"
	pop _sfinfun
	push "null"
	pop _sfinob
l2484:
	end method
	method _cptfnopath
	push _sanim
	push "_NOPATH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _cptfvisit
	push _sanim
	push "_VISIT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method prepareforhero
	push "onfinish"
	push "_cptfherofin"
	call ptf,addmethod
	new string,_sfinob
	new string,_sfinfun
	new int,_bylfin
	push "_cptfnopath"
	cthis sigonnopath
	push "_cptfvisit"
	cthis sigonvisit
	end method
	method herowalkto2
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	push $3
	push $4
	cthis herowalkto
	end method
	method herowalkto
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push _sstndpref
	push _sanim
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],stop
	push $4
	pop _sfinob
	push $5
	pop _sfinfun
	push $5
	push "null"
	cmpjne
	cmp0
	je l2487
	push 1
	pop _bylfin
l2487:
	push $1
	push $2
	push $3
	cthis walkto
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l2489
	push 0
	pop ispathto
	jmp l2488
l2489:
	push 1
	pop ispathto
l2488:
	end method
	method heroturn
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	pop _sfinob
	push $3
	pop _sfinfun
	push $3
	push "null"
	cmpjne
	cmp0
	je l2491
	push 1
	pop _bylfin
l2491:
	push $1
	cthis turn
	end method
	method advgoto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	push "null"
	cthis herowalkto2
	end method
	method advwalkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	push "null"
	cthis herowalkto
	end method
	method advvisit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],reachable
	cmp0
	je l2493
	push $1
	push $1
	spushs
	spop $a
	call [$a],getgox
	push $1
	spushs
	spop $a
	call [$a],getgoy
	cthis advwalkto
l2493:
	end method
	method herostand
	cthis retstep
	cthis stand
	push _sanim
	spushs
	spop $a
	call [$a],herostand
	end method
	method stophero
	cthis herostand
	push 1
	pop bzatrzym
	end method
	method _cptvisit
	push _sfunvisit
	spushs
	spop $d
	cthis [$d]
	push bzmien
	cmp0
	je l2495
	push 0
	pop bzmien
	push destx
	push desty
	cthis goto
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l2497
	push _sfunnopath
	spushs
	spop $d
	cthis [$d]
	jmp l2496
l2497:
	push _sobzmien
	push _sfunzmien
	cthis callfun
l2496:
	jmp l2494
l2495:
	push bzatrzym
	cmp0
	je l2499
	push 0
	pop bzatrzym
	push 1
	cthis stop
l2499:
l2494:
	end method
	method _cptffin
	push swalkto
	push "null"
	cmpjne
	cmp0
	je l2501
	push swalkto
	call ptf,onreach
	push "null"
	pop swalkto
	jmp l2500
l2501:
	call ptf,onarrive
l2500:
	end method
	method anposx
	push _sanim
	spushs
	spop $a
	call [$a],getposx
	end method
	method anposy
	push _sanim
	spushs
	spop $a
	call [$a],getposy
	end method
	method bzmien
	push bzmien
	end method
	method bzmien=
	localint $1
	pop $1
	push $1
	pop bzmien
	end method
	method checkreach
	localstring $1
	pop $1
	push ispathto
	neg
	cmp0
	je l2503
	push $1
	push "null"
	cmpjne
	cmp0
	je l2503
	cthis behplaying
	neg
	jmp l2505
l2503:
	push 0
	jmp l2505
l2504:
	push 1
l2505:
	cmp0
	je l2506
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_NOPATH_"
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	cthis playbehif
	neg
	pop _b_rewind
l2506:
	end method
	end class

	class classwalkerqueue
	method init
	new timer,timwq
	push 1
	call timwq,settick
	push 1
	call timwq,setcycle
	push "onfinish"
	push "_timwqfin"
	call timwq,addmethod
	new vector,vecpt
	push "string"
	call vecpt,type
	new int,iverlen
	push 1
	pop iverlen
	new int,igox
	new int,igoy
	new string,_simg
	new int,bniezmien
	push 1
	pop bniezmien
	end method
	method _timwqfin
	cthis checkqueue
	cthis play
	end method
	method start
	end method
	method ptpos
	localstring $1
	pop $1
	push $1
	call vecpt,find
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	cthis ptpos
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l2508
	push $2
	push 0
	cmpje
	cmp0
	je l2510
	call vecpt,first
	spushs
	push "null"
	push "null"
	spop $a
	call [$a],sigonzmien
	push 0
	call vecpt,removeat
	call vecpt,size
	cmp0
	je l2512
	call vecpt,first
	spushs
	cthis getname
	push "ptzmien"
	spop $a
	call [$a],sigonzmien
l2512:
	jmp l2509
l2510:
	push $2
	call vecpt,removeat
l2509:
l2508:
	end method
	method stop
	push 0
	call timwq,stop
	end method
	method add
	localstring $1
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],anposx
	push $1
	spushs
	spop $a
	call [$a],anposy
	spop $a
	call [$a],iswayto
	popax
	push $1
	call vecpt,add
	call vecpt,size
	push 1
	cmpje
	cmp0
	je l2514
	call vecpt,first
	spushs
	cthis getname
	push "ptzmien"
	spop $a
	call [$a],sigonzmien
l2514:
	end method
	method ptzmien
	push 0
	pop bniezmien
	push _simg
	push igox
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push igoy
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	cthis walkto
	call vecpt,first
	spushs
	push 0
	spop $a
	call [$a],bzmien=
	push 1
	pop bniezmien
	end method
	method goto
	localint $1
	localint $2
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	cthis walkto
	end method
	method visit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],reachable
	cmp0
	je l2516
	call vecpt,size
	jmp l2518
l2516:
	push 0
	jmp l2518
l2517:
	push 1
l2518:
	cmp0
	je l2519
	call vecpt,first
	push "_WALKTO_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $1
	push $1
	spushs
	spop $a
	call [$a],getgox
	push $1
	spushs
	spop $a
	call [$a],getgoy
	cthis walkto
l2519:
	end method
	method setverlen
	localint $1
	pop $1
	push $1
	pop iverlen
	end method
	method stand
	localint $1
	push 0
	pop $1
l2520:
	push $1
	call vecpt,size
	cmpjl
	cmp0
	je l2521
	jmp l2523
l2522:
	add $1,1
	pop $1
	jmp l2520
l2523:
	push $1
	call vecpt,get
	spushs
	push 0
	spop $a
	call [$a],stop
	push $1
	call vecpt,get
	spushs
	spop $a
	call [$a],herostand
	jmp l2522
l2521:
	end method
	method mulspeed
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l2524:
	push $2
	call vecpt,size
	cmpjl
	cmp0
	je l2525
	jmp l2527
l2526:
	add $2,1
	pop $2
	jmp l2524
l2527:
	push $2
	call vecpt,get
	spushs
	push $1
	spop $a
	call [$a],mulspeed
	jmp l2526
l2525:
	end method
	method walkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop igox
	push $3
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop igoy
	push $1
	pop _simg
	push 1
	pop iverlen
	localint $4
	call vecpt,size
	pop $4
	push $4
	push 0
	cmpjle
	cmp0
	je l2529
	ret
l2529:
	localstring $5
	call vecpt,first
	pop $5
	push $5
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],advwalkto
	localint $6
	localint $7
	localstring $8
	localint $9
	push 1
	pop $9
l2530:
	push $9
	push $4
	cmpjl
	cmp0
	je l2531
	jmp l2533
l2532:
	add $9,1
	pop $9
	jmp l2530
l2533:
	push $9
	call vecpt,get
	pop $8
	push $5
	spushs
	spop $a
	call [$a],getidgo
	pop $7
	push bniezmien
	cmp0
	je l2535
	push $5
	spushs
	push iverlen
	spop $a
	call [$a],getgover
	pop $6
	jmp l2534
l2535:
	push $8
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],advwalkto
	push $8
	spushs
	push $9
	push iverlen
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],getgover
	pop $6
l2534:
	push $6
	push 0
	cmpjl
	cmp0
	je l2537
	push $5
	spushs
	push iverlen
	spop $a
	call [$a],getgover
	pop $6
	push $6
	push 0
	cmpjl
	cmp0
	je l2539
	push $5
	spushs
	spop $a
	call [$a],getidan
	pop $6
l2539:
l2537:
	push $6
	push $7
	cmpje
	cmp0
	je l2541
	push bniezmien
	jmp l2543
l2541:
	push 0
	jmp l2543
l2542:
	push 1
l2543:
	cmp0
	je l2544
	push 1
	popax
	sub 0,$a
	pop $6
l2544:
	push $8
	pop $5
	push $6
	push 0
	cmpjae
	cmp0
	je l2546
	push $8
	spushs
	push "null"
	push $8
	spushs
	push $6
	spop $a
	call [$a],getxver
	push $8
	spushs
	push $6
	spop $a
	call [$a],getyver
	spop $a
	call [$a],advwalkto
	jmp l2545
l2546:
	push $8
	spushs
	push 0
	spop $a
	call [$a],stop
	push $8
	spushs
	spop $a
	call [$a],herostand
l2545:
	jmp l2532
l2531:
	push $5
	spushs
	push $1
	spop $a
	call [$a],checkreach
	end method
	method checkqueue
	localint $1
	call vecpt,size
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l2548
	ret
l2548:
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localint $7
	push 0
	pop $7
l2549:
	push $7
	push $1
	cmpjl
	cmp0
	je l2550
	jmp l2552
l2551:
	add $7,1
	pop $7
	jmp l2549
l2552:
	push $7
	call vecpt,get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],iswalking
	cmp0
	je l2554
	push $3
	spushs
	spop $a
	call [$a],getidan
	pop $5
	push $3
	spushs
	spop $a
	call [$a],getidan2
	pop $6
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $2
l2555:
	push $2
	push $1
	cmpjl
	cmp0
	je l2556
	jmp l2558
l2557:
	add $2,1
	pop $2
	jmp l2555
l2558:
	push $2
	call vecpt,get
	pop $4
	push $4
	spushs
	spop $a
	call [$a],iswalking
	cmp0
	je l2560
	push $4
	spushs
	push $5
	spop $a
	call [$a],excludev
	push $4
	spushs
	push $6
	spop $a
	call [$a],excludev
l2560:
	jmp l2557
l2556:
l2554:
	jmp l2551
l2550:
	end method
	end class

	class classstndgroup
	method init
	new gmobjvec,grstnd
	end method
	method pause
	push "lock"
	call grstnd,eval
	cthis stop
	end method
	method resume
	cthis advstdstate
	cmp0
	je l2562
	push "unlock"
	call grstnd,eval
	cthis play
l2562:
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grstnd,add
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call grstnd,remove
	end method
	method stop
	push "stop"
	call grstnd,eval
	end method
	method play
	push "play"
	call grstnd,eval
	end method
	method reset
	push "reset"
	call grstnd,eval
	end method
	end class

	class classadvstander
	parent classlocker
	method init
	clparent classlocker,init
	new timer,timstand
	push 1
	call timstand,settick
	new int,_i_idle
	push 12000
	pop _i_idle
	push "onfinish"
	push "_timstandfin"
	call timstand,addmethod
	new string,sanim
	cthis getname
	pop sanim
	push _sstndpref
	call sanim,strsubbs
	pop sanim
	cthis _make_idle
	new string,_sbeh
	push "beh_"
	push sanim
	pop $b
	popax
	add $a,$b
	push "_IDLE"
	pop $b
	popax
	add $a,$b
	pop _sbeh
	cthis getname
	call modstnd,add
	end method
	method _make_idle
	push _i_idle
	call _i_idle,rand
	pop $b
	popax
	add $a,$b
	call timstand,delay
	end method
	method _timstandfin
	cthis _make_idle
	localstring $1
	call gameapi,getgamename
	pop $1
	push $1
	spushs
	push _sbeh
	spop $a
	call [$a],behexist
	cmp0
	je l2564
	cthis getlock
	neg
	jmp l2566
l2564:
	push 0
	jmp l2566
l2565:
	push 1
l2566:
	cmp0
	je l2567
	push $1
	spushs
	push _sbeh
	spop $a
	call [$a],playbeh
l2567:
	end method
	method play
	cthis getlock
	neg
	cmp0
	je l2569
	call timstand,isplaying
	neg
	jmp l2571
l2569:
	push 0
	jmp l2571
l2570:
	push 1
l2571:
	cmp0
	je l2572
	call timstand,play
l2572:
	end method
	method stop
	push 0
	call timstand,stop
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	pop _i_idle
	push _i_idle
	push 0
	cmpjle
	cmp0
	je l2574
	push 1
	pop _i_idle
l2574:
	push $1
	call timstand,setdelay
	end method
	method reset
	cthis stop
	cthis play
	end method
	end class

	class classtalker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "talk:"
	cthis _setbase
	new snd,sndtalk
	call sndtalk,buildfullname
	push 0
	push 1
	call sndtalk,setstartstopflag
	push "onfinish"
	push "_ctalkfin"
	call sndtalk,addmethod
	new timer,timtalk
	push 1
	call timtalk,settick
	new real,rdelay
	push 1.0
	pop rdelay
	push "onfinish"
	push "_ctalkfin"
	call timtalk,addmethod
	new gmimgvec,txttalk
	new int,_iletxt
	push 10
	pop _iletxt
	localstring $1
	localint $2
	push 0
	pop $2
l2575:
	push $2
	push _iletxt
	cmpjl
	cmp0
	je l2576
	jmp l2578
l2577:
	add $2,1
	pop $2
	jmp l2575
l2578:
	push "txttalk"
	push $2
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	call txttalk,add
	jmp l2577
l2576:
	new font,fonttalk
	call txttalk,hide
	new vector,vecpom
	push "string"
	call vecpom,type
	new int,iTxtLim
	push 30
	pop iTxtLim
	new int,irtxt
	new int,igtxt
	new int,ibtxt
	new string,stextdb
	new string,_swav
	cthis buildfullname
	new string,stalktype
	push "snd"
	cthis settalktype
	end method
	method set
	localstring $1
	pop $1
	push $1
	cthis link
	end method
	method settextdb
	localstring $1
	pop $1
	push $1
	pop stextdb
	end method
	method setfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call fonttalk,load
	push "setfont"
	push "fonttalk"
	call txttalk,eval1
	end method
	method setsnd
	localstring $1
	pop $1
	push $1
	call sndtalk,advloadsnd
	end method
	method herosay1
	localstring $1
	pop $1
	push 1
	push 1
	push 1
	push "null"
	push $1
	cthis herosay
	end method
	method herosay
	localint $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis getdir
	cthis herosaydir
	end method
	method herosaydir
	localint $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push _sanim
	spushs
	push 0
	spop $a
	call [$a],thisfinish
	push $2
	neg
	cmp0
	je l2580
	push _sanim
	spushs
	push _sbase
	push $6
	cthis nofpiecesdir
	push $1
	push $2
	push "null"
	push "null"
	push $3
	push $4
	push $5
	push $6
	spop $a
	call [$a],playspec
	push stalktype
	spushs
	spop $d
	cthis [$d]
	jmp l2579
l2580:
	push _sanim
	spushs
	push _sbase
	push $6
	cthis nofpiecesdir
	push $1
	push $2
	cthis getfullname
	push "_ctalkstart"
	push $3
	push $4
	push $5
	push $6
	spop $a
	call [$a],playspec
l2579:
	end method
	method thisfinish
	localint $1
	pop $1
	push _sanim
	spushs
	push $1
	spop $a
	call [$a],thisfinish
	end method
	method stop
	localint $1
	pop $1
	push "snd"
	call stalktype,contains
	cmp0
	je l2582
	push $1
	call sndtalk,stop
	push 0
	call timtalk,stop
	jmp l2581
l2582:
	push $1
	call timtalk,stop
l2581:
	end method
	method settalktype
	localstring $1
	pop $1
	push "_cplay"
	pop stalktype
	push "snd"
	call $1,contains
	cmp0
	je l2584
	push "snd"
	popax
	add stalktype,$a
	pop stalktype
l2584:
	push "txt"
	call $1,contains
	cmp0
	je l2586
	push "txt"
	popax
	add stalktype,$a
	pop stalktype
l2586:
	push "film"
	call $1,contains
	cmp0
	je l2588
	push "film"
	popax
	add stalktype,$a
	pop stalktype
l2588:
	end method
	method _csay
	push stextdb
	push "null"
	cmpjne
	cmp0
	je l2590
	localint $1
	push stextdb
	spushs
	push _swav
	spop $a
	call [$a],findbyrow
	pop $1
	push $1
	push 0
	cmpjl
	cmp0
	je l2592
	ret
l2592:
	push stextdb
	spushs
	push $1
	push 2
	spop $a
	call [$a],get
	push " "
	call vecpom,vecbuildfromstring
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push "txt"
	call stalktype,contains
	cmp0
	je l2594
	push _sanim
	spushs
	spop $a
	call [$a],getcx
	pop $4
	push _sanim
	spushs
	spop $a
	call [$a],getpy
	pop $5
	jmp l2593
l2594:
	push 400
	pop $4
	push 590
	pop $5
l2593:
	localint $6
	push 0
	pop $6
	localint $7
	push iResX
	pop $7
	localint $8
	push 0
	pop $8
	localint $9
	push iResY
	pop $9
	localstring $10
	localint $11
	push 0
	pop $11
l2595:
	push $11
	call vecpom,size
	cmpjl
	cmp0
	je l2596
	jmp l2598
l2597:
	add $11,1
	pop $11
	jmp l2595
l2598:
	push $11
	call vecpom,get
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $2,$a
	pop $2
	call $2,length
	push iTxtLim
	cmpja
	cmp0
	je l2600
	push "txttalk"
	push $3
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $2
	push $4
	push $5
	push $3
	spop $a
	call [$a],_cprinttxt
	push $10
	spushs
	spop $a
	call [$a],getpx
	push $6
	cmpjl
	cmp0
	je l2602
	push $10
	spushs
	spop $a
	call [$a],getpx
	pop $6
l2602:
	push $10
	spushs
	spop $a
	call [$a],getex
	push $7
	cmpja
	cmp0
	je l2604
	push $10
	spushs
	spop $a
	call [$a],getex
	pop $7
l2604:
	push $10
	spushs
	spop $a
	call [$a],getpy
	push $8
	cmpjl
	cmp0
	je l2606
	push $10
	spushs
	spop $a
	call [$a],getpy
	pop $8
l2606:
	push $10
	spushs
	spop $a
	call [$a],getey
	push $9
	cmpja
	cmp0
	je l2608
	push $10
	spushs
	spop $a
	call [$a],getey
	pop $9
l2608:
	push ""
	pop $2
	add $3,1
	pop $3
l2600:
	jmp l2597
l2596:
	call $2,length
	push 0
	cmpja
	cmp0
	je l2610
	push "txttalk"
	push $3
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $2
	push $4
	push $5
	push $3
	spop $a
	call [$a],_cprinttxt
	push $10
	spushs
	spop $a
	call [$a],getpx
	push $6
	cmpjl
	cmp0
	je l2612
	push $10
	spushs
	spop $a
	call [$a],getpx
	pop $6
l2612:
	push $10
	spushs
	spop $a
	call [$a],getex
	push $7
	cmpja
	cmp0
	je l2614
	push $10
	spushs
	spop $a
	call [$a],getex
	pop $7
l2614:
	push $10
	spushs
	spop $a
	call [$a],getpy
	push $8
	cmpjl
	cmp0
	je l2616
	push $10
	spushs
	spop $a
	call [$a],getpy
	pop $8
l2616:
	push $10
	spushs
	spop $a
	call [$a],getey
	push $9
	cmpja
	cmp0
	je l2618
	push $10
	spushs
	spop $a
	call [$a],getey
	pop $9
l2618:
	add $3,1
	pop $3
l2610:
	push iResX
	popax
	sub $7,$a
	pop $7
	push iResY
	popax
	sub $9,$a
	pop $9
	push $6
	push 0
	cmpja
	cmp0
	je l2620
	push 0
	pop $6
l2620:
	push $8
	push 0
	cmpja
	cmp0
	je l2622
	push 0
	pop $6
l2622:
	push 0
	push $6
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	push $3
	popax
	sub 0,$a
	call txttalk0,geth
	pop $b
	popax
	mul $a,$b
	push $8
	pop $b
	popax
	sub $a,$b
	push $9
	pop $b
	popax
	add $a,$b
	call txttalk,move
	call txttalk0,getpy
	push 0
	cmpjl
	cmp0
	je l2624
	push 0
	call txttalk0,getpy
	popax
	sub 0,$a
	call txttalk,move
l2624:
	push rdelay
	push 500
	pop $b
	popax
	mul $a,$b
	call vecpom,size
	pop $b
	popax
	mul $a,$b
	call timtalk,delay
l2590:
	end method
	method _cprinttxt
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push irtxt
	push igtxt
	push ibtxt
	cthis createtxt
	push $2
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis setpos
	push 2000
	cthis setz
	cthis show
	end method
	method _cplaysnd
	call sndtalk,getfullname
	cthis cbsplay
	end method
	method _cplaysndtxt
	cthis _cplaysnd
	cthis _csay
	end method
	method _cplaysndtxtfilm
	cthis _cplaysnd
	cthis _csay
	end method
	method _cplaysndfilm
	cthis _csay
	end method
	method _cplaytxt
	cthis _csay
	call timtalk,play
	end method
	method _cplaytxtfilm
	cthis _csay
	call timtalk,play
	end method
	method _cplayfilm
	cthis _csay
	call timtalk,play
	end method
	method setdelay
	localreal $1
	pop $1
	push $1
	pop rdelay
	end method
	method settxtcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop irtxt
	push $2
	pop igtxt
	push $3
	pop ibtxt
	end method
	method _ctalkstart
	push stalktype
	spushs
	spop $d
	cthis [$d]
	end method
	method _ctalkfin
	call txttalk,hide
	push _sanim
	spushs
	spop $a
	call [$a],herostop
	end method
	end class

	class classtxttalker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "talk:"
	cthis _setbase
	new int,iR
	new int,iG
	new int,iB
	new int,ibR
	new int,ibG
	new int,ibB
	new int,ibA
	new int,ibrr
	new int,ibrg
	new int,ibrb
	new int,ibra
	new int,ibw
	new db,dbtxt
	new int,iSize
	new gmimgvec,grtxt
	new gmimgvec,grtxt2
	localstring $1
	localint $2
	push 0
	pop $2
l2625:
	push $2
	push 25
	cmpjl
	cmp0
	je l2626
	jmp l2628
l2627:
	add $2,1
	pop $2
	jmp l2625
l2628:
	push "txt"
	push $2
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	call grtxt,add
	push $1
	spushs
	spop $a
	call [$a],hide
	jmp l2627
l2626:
	new text,imgtxt
	call imgtxt,hide
	new int,bplaying
	push 0
	pop bplaying
	new string,slang
	push "pol"
	cthis setlang
	end method
	method setlang
	localstring $1
	pop $1
	push $1
	pop slang
	end method
	method isplaying
	push bplaying
	ret
	end method
	method setfont
	localstring $1
	pop $1
	push "setfont"
	push $1
	call grtxt,eval1
	push $1
	spushs
	spop $a
	call [$a],getsize
	pop iSize
	end method
	method setfontcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop iR
	push $2
	pop iG
	push $3
	pop iB
	end method
	method setfontbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ibR
	push $2
	pop ibG
	push $3
	pop ibB
	push $4
	pop ibA
	end method
	method setbgframe
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	pop ibrr
	push $3
	pop ibrg
	push $4
	pop ibrb
	push 255
	pop ibra
	push $1
	pop ibw
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis link
	push $2
	call grtxt,setz
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call imgtxt,setz
	end method
	method herosay
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis getdir
	cthis herosaydir
	end method
	method herosaydir
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push "auto"
	cmpje
	cmp0
	je l2630
	cthis getdir
	pop $4
l2630:
	push 1
	pop bplaying
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push slang
	pop $b
	popax
	add $a,$b
	call dbtxt,load
	localstring $5
	call grtxt2,free
	localint $6
	push 0
	pop $6
	localint $7
	call dbtxt,getrowsno
	pop $7
	localint $8
	push 0
	pop $8
l2631:
	push $8
	push $7
	cmpjl
	cmp0
	je l2632
	jmp l2634
l2633:
	add $8,1
	pop $8
	jmp l2631
l2634:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $8
	push 0
	call dbtxt,get
	spop $a
	call [$a],set
	push $5
	spushs
	push iR
	push iG
	push iB
	spop $a
	call [$a],createtxt
	push $5
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push iSize
	popax
	add $3,$a
	pop $3
	push $5
	spushs
	spop $a
	call [$a],show
	push $5
	spushs
	spop $a
	call [$a],getw
	push $6
	cmpja
	cmp0
	je l2636
	push $5
	spushs
	spop $a
	call [$a],getw
	pop $6
l2636:
	push $5
	call grtxt2,add
	jmp l2633
l2632:
	call txt0,getpx
	push iSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt0,getpy
	push iSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $6
	push iSize
	pop $b
	popax
	add $a,$b
	push iSize
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	push ibR
	push ibG
	push ibB
	push ibA
	call imgtxt,setbkg
	push ibw
	push ibrr
	push ibrg
	push ibrb
	push ibra
	call imgtxt,setborders
	call imgtxt,show
	push _sanim
	push "null"
	cmpjne
	cmp0
	je l2638
	push _sanim
	spushs
	push 0
	spop $a
	call [$a],thisfinish
	push _sanim
	spushs
	push _sbase
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	push "null"
	push "null"
	push $4
	spop $a
	call [$a],playspec
l2638:
	end method
	method stop
	push 0
	pop bplaying
	call grtxt2,hide
	call imgtxt,hide
	push _sanim
	push "null"
	cmpjne
	cmp0
	je l2640
	push _sanim
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push _sanim
	spushs
	push "stand"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
l2640:
	end method
	end class

	class classbgplan
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,rpx
	new real,rpy
	new real,scalex
	new real,scaley
	new int,_ix
	new int,_iy
	end method
	method setscale
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	push $2
	pop scaley
	pop scalex
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add rpx,$a
	pop rpx
	push $2
	popax
	add rpy,$a
	pop rpy
	localint $3
	push rpx
	pop $3
	localint $4
	push rpy
	pop $4
	push $3
	popax
	sub rpx,$a
	pop rpx
	push $4
	popax
	sub rpy,$a
	pop rpy
	push $3
	cmp0
	jne l2643
	push $4
	jmp l2644
l2642:
	push 0
	jmp l2644
l2643:
	push 1
l2644:
	cmp0
	je l2645
	push $3
	popax
	add _ix,$a
	pop _ix
	push $4
	popax
	add _iy,$a
	pop _iy
	push $3
	push $4
	clparent gmobjvec,move
l2645:
	end method
	method movebgr
	localreal $1
	localreal $2
	pop $2
	pop $1
	push scalex
	push $1
	pop $b
	popax
	mul $a,$b
	push scaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	method getpx
	push _ix
	end method
	method getpy
	push _iy
	end method
	end class

	class classgrplans
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,_rxp
	new real,_ryp
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "movebgr"
	push $1
	push $2
	cthis eval2
	end method
	method getposx
	push _rxp
	ret
	end method
	method getposy
	push _ryp
	ret
	end method
	method shift
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	end class

	class CameraPos
	method init
	localreal $1
	localreal $2
	pop $2
	pop $1
	new real,_x
	new real,_y
	push $1
	push $2
	cthis setpos
	end method
	method setpos
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	pop _x
	push $2
	pop _y
	end method
	method getposx
	push _x
	end method
	method getposy
	push _y
	end method
	end class

	class classadvcamera
	method init
	new classgrplans,grbgrs
	new string,sancamera
	push "null"
	pop sancamera
	new string,smsmvfun
	push "null"
	pop smsmvfun
	new real,_rxmod
	new real,_rymod
	push 0.05
	push 0.05
	pop _rymod
	pop _rxmod
	new real,rleft
	new real,rtop
	new real,rright
	new real,rbottom
	push 0.0
	push 0.0
	push iResX
	push 1
	pop $b
	popax
	sub $a,$b
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbottom
	pop rright
	pop rtop
	pop rleft
	new int,icamx
	new int,icamy
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamy
	pop icamx
	new real,rborx
	new real,rbory
	push iResX
	push 1
	pop $b
	popax
	sub $a,$b
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbory
	pop rborx
	new real,_lastx
	push 0
	pop _lastx
	new real,_lasty
	push 0
	pop _lasty
	new string,_sfunxedge
	push "null"
	pop _sfunxedge
	new string,_sfunyedge
	push "null"
	pop _sfunyedge
	push 0
	push 0
	new CameraPos,_campos
	new timer,timcamera
	push 1
	call timcamera,settick
	push 1
	call timcamera,setcycle
	push "onfinish"
	push "_camerafin"
	call timcamera,addmethod
	end method
	method _camerafin
	cthis checkcamera
	cthis play
	end method
	method setscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop rleft
	push $2
	pop rtop
	push $3
	pop rright
	push $4
	pop rbottom
	push $3
	pop rborx
	push $4
	pop rbory
	push $1
	pop _lastx
	push $2
	pop _lasty
	push $1
	push $3
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamx
	push $2
	push $4
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamy
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l2646:
	push $2
	call grbgrs,size
	cmpjl
	cmp0
	je l2647
	jmp l2649
l2648:
	add $2,1
	pop $2
	jmp l2646
l2649:
	push $2
	call grbgrs,get
	spushs
	push $1
	spop $a
	call [$a],remove
	jmp l2648
l2647:
	end method
	method funxedge
	localstring $1
	pop $1
	push $1
	pop _sfunxedge
	end method
	method funyedge
	localstring $1
	pop $1
	push $1
	pop _sfunyedge
	end method
	method setcenter
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop icamy
	pop icamx
	end method
	method setborders
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbottom
	pop rright
	end method
	method countcenter
	push rleft
	push rright
	push rleft
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push rtop
	push rbottom
	push rtop
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	cthis setcenter
	end method
	method getposx
	call grbgrs,getposx
	ret
	end method
	method getposy
	call grbgrs,getposy
	ret
	end method
	method setmetonmsmove
	localstring $1
	pop $1
	push $1
	pop smsmvfun
	end method
	method start
	call timcamera,play
	end method
	method stop
	push 0
	call timcamera,stop
	end method
	method setactor
	localstring $1
	pop $1
	push $1
	pop sancamera
	end method
	method setcampos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call _campos,setpos
	push "_campos"
	cthis setactor
	end method
	method isactor
	localstring $1
	pop $1
	push $1
	push sancamera
	cmpje
	ret
	end method
	method getactor
	push sancamera
	ret
	end method
	method scalemodifiers
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	push $2
	pop _rymod
	pop _rxmod
	end method
	method newbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbgplan,[$e]
	push $1
	push $2
	push $3
	cthis addbgr
	end method
	method addbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setscale
	push $1
	call grbgrs,add
	end method
	method findinbgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l2650:
	push $2
	call grbgrs,size
	cmpjl
	cmp0
	je l2651
	jmp l2653
l2652:
	add $2,1
	pop $2
	jmp l2650
l2653:
	push $2
	call grbgrs,get
	spushs
	push $1
	spop $a
	call [$a],contains
	cmp0
	je l2655
	push $2
	call grbgrs,get
	ret
l2655:
	jmp l2652
l2651:
	push "null"
	end method
	method removefrombgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l2656:
	push $2
	call grbgrs,size
	cmpjl
	cmp0
	je l2657
	jmp l2659
l2658:
	add $2,1
	pop $2
	jmp l2656
l2659:
	push $2
	call grbgrs,get
	spushs
	push $1
	spop $a
	call [$a],remove
	jmp l2658
l2657:
	end method
	method addtobgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],add
	end method
	method setscene
	push 1.0
	push 1.0
	cthis _setscene
	end method
	method _setscene
	localreal $1
	localreal $2
	pop $2
	pop $1
	push sancamera
	push "null"
	cmpje
	cmp0
	je l2661
	ret
l2661:
	localreal $3
	push icamx
	push sancamera
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	push $1
	popax
	mul $3,$a
	pop $3
	localreal $4
	push icamy
	push sancamera
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $2
	popax
	mul $4,$a
	pop $4
	localreal $5
	cthis getposx
	push $3
	pop $b
	popax
	add $a,$b
	pop $5
	localreal $6
	cthis getposy
	push $4
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push rleft
	cmpjae
	cmp0
	je l2663
	cthis getposx
	popax
	sub 0,$a
	pop $3
	jmp l2662
l2663:
	push $5
	push rright
	pop $b
	popax
	add $a,$b
	push rborx
	cmpjle
	cmp0
	je l2665
	push rborx
	cthis getposx
	push rright
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $3
l2665:
l2662:
	push $6
	push rtop
	cmpjae
	cmp0
	je l2667
	cthis getposy
	popax
	sub 0,$a
	pop $4
	jmp l2666
l2667:
	push $6
	push rbottom
	pop $b
	popax
	add $a,$b
	push rbory
	cmpjle
	cmp0
	je l2669
	push rbory
	cthis getposy
	push rbottom
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $4
l2669:
l2666:
	push $3
	cmp0
	jne l2672
	push $4
	jmp l2673
l2671:
	push 0
	jmp l2673
l2672:
	push 1
l2673:
	cmp0
	je l2674
	push $3
	push $4
	call grbgrs,move
	push smsmvfun
	push "null"
	cmpjne
	cmp0
	je l2676
	push smsmvfun
	spushs
	spop $d
	cthis [$d]
l2676:
l2674:
	push $3
	push 0
	cmpje
	cmp0
	je l2678
	push _lastx
	push 0
	cmpjne
	cmp0
	je l2678
	push _sfunxedge
	push "null"
	cmpjne
	jmp l2680
l2678:
	push 0
	jmp l2680
l2679:
	push 1
l2680:
	cmp0
	je l2681
	push _sfunxedge
	spushs
	spop $d
	cthis [$d]
l2681:
	push $4
	push 0
	cmpje
	cmp0
	je l2683
	push _lasty
	push 0
	cmpjne
	cmp0
	je l2683
	push _sfunyedge
	push "null"
	cmpjne
	jmp l2685
l2683:
	push 0
	jmp l2685
l2684:
	push 1
l2685:
	cmp0
	je l2686
	push _sfunyedge
	spushs
	spop $d
	cthis [$d]
l2686:
	push $3
	pop _lastx
	push $4
	pop _lasty
	end method
	method checkcamera
	push sancamera
	push "null"
	cmpje
	cmp0
	je l2688
	ret
l2688:
	push _rxmod
	push _rymod
	cthis _setscene
	end method
	method moveplans
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add rleft,$a
	pop rleft
	push $1
	popax
	add rright,$a
	pop rright
	push $2
	popax
	add rtop,$a
	pop rtop
	push $2
	popax
	add rbottom,$a
	pop rbottom
	push $1
	popax
	add rborx,$a
	pop rborx
	push $2
	popax
	add rbory,$a
	pop rbory
	push $1
	popax
	add icamx,$a
	pop icamx
	push $2
	popax
	add icamy,$a
	pop icamy
	push $1
	push $2
	call grbgrs,shift
	end method
	end class

	class classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "but"
	cthis setadvbutmets
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "but"
	clparent classadvbut,setasbutton2
	end method
	method setasbutton2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "setadvbutmets"
	push "setadvbutmets"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbuttyp"
	push "setbuttyp"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "updatemousecursor"
	push "updatemousecursor"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setadvbutpos"
	push "setadvbutpos"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutdir"
	push "setbutdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase1"
	push "setbutbase1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase2"
	push "setbutbase2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase"
	push "setbutbase"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbase1"
	push "getbase1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbase2"
	push "getbase2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbutdir"
	push "getbutdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbutname"
	push "getbutname"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettyp"
	push "gettyp"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "reachable"
	push "reachable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setreach"
	push "setreach"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getgox"
	push "getgox"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getgoy"
	push "getgoy"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "enable"
	push "enable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "disable"
	push "disable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "enabled"
	push "enabled"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setonce"
	push "setonce"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "checkonce"
	push "checkonce"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpocket"
	push "classadvbut0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getpocket"
	push "classadvbut1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "moveon"
	push "moveon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "moveoff"
	push "moveoff"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "clickon"
	push "clickon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "lrel"
	push "lrel"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "becomebut"
	push "classadvbut2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "becomeitem"
	push "classadvbut3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "becomedoors"
	push "classadvbut4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "copyposfrompt"
	push "classadvbut5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butisin"
	push "classadvbut6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "ismask"
	push "classadvbut7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbmask"
	push "classadvbut8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "preparetosort"
	push "preparetosort"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setadvbutmets
	push $1
	spushs
	push 1
	spop $a
	call [$a],setreach
	end method
	method classadvbut0
	localstring $1
	pop $1
	push $1
	pop _spocket
	end method
	method classadvbut1
	push _spocket
	end method
	method classadvbut2
	cthis getname
	clparent classadvbut,setasbut
	end method
	method classadvbut3
	cthis getname
	clparent classadvbut,setasitem
	end method
	method classadvbut4
	cthis getname
	clparent classadvbut,setasdoors
	end method
	method classadvbut5
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getbyname
	pop $3
	push $1
	spushs
	push $3
	spop $a
	call [$a],getxver
	push $1
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],getyver
	push $1
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	cthis setadvbutpos
	end method
	method classadvbut6
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push balpha
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l2690
	push $1
	push $2
	push $3
	push $4
	cthis isin
	jmp l2689
l2690:
	push $1
	push $2
	push $3
	push balpha
	cthis isin
l2689:
	end method
	method classadvbut7
	push bismask
	end method
	method classadvbut8
	localint $1
	pop $1
	push $1
	pop bismask
	end method
	method setonce
	localstring $1
	pop $1
	push $1
	pop _sonce
	end method
	method checkonce
	push _sonce
	push "null"
	cmpjne
	cmp0
	je l2692
	push _sonce
	call clsave,bis
	neg
	jmp l2694
l2692:
	push 0
	jmp l2694
l2693:
	push 1
l2694:
	cmp0
	je l2695
	push _sonce
	call clsave,bset
	cthis disable
l2695:
	end method
	method setadvbutmets
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_styp
	push $2
	pop _styp
	new string,_sname
	push $1
	pop _sname
	new int,igox
	cthis getposx
	pop igox
	new int,igoy
	cthis getposy
	pop igoy
	new string,sgox
	push "null"
	pop sgox
	new string,sgoy
	push "null"
	pop sgoy
	new string,_sbutdir
	push "auto"
	pop _sbutdir
	new string,_sbase1
	push "look:"
	push 1
	call modadv,get
	pop _sbase1
	new string,_sbase2
	push "look:"
	push 2
	call modadv,get
	pop _sbase2
	new int,breachable
	push 0
	pop breachable
	new string,_spocket
	push $1
	pop _spocket
	new string,_sonce
	push "null"
	pop _sonce
	new int,bismask
	push 0
	pop bismask
	push A
	push "baseuse1"
	push _sbase1
	push "baseuse2"
	push _sbase2
	push "hideontake"
	push 1
	push "smousecursor"
	push "active"
	push "balpha"
	push 1
	popax
	sub 0,$a
	cthis vars2
	cthis updatemousecursor
	cthis enable
	end method
	method setasmask
	localstring $1
	pop $1
	push $1
	spushs
	push "butisin"
	push "classadvbut9"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push 1
	spop $a
	call [$a],setbmask
	end method
	method classadvbut9
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push balpha
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l2697
	push $1
	push $2
	push 0
	push $4
	cthis isin
	jmp l2696
l2697:
	push $1
	push $2
	push 0
	push balpha
	cthis isin
l2696:
	end method
	method enable
	push AdventureGame
	neg
	cmp0
	je l2699
	ret
l2699:
	cthis getname
	call grbuts,addonce
	end method
	method disable
	push AdventureGame
	neg
	cmp0
	je l2701
	ret
l2701:
	cthis getname
	call grbuts,remove
	end method
	method enabled
	push AdventureGame
	neg
	cmp0
	je l2703
	ret
l2703:
	cthis getname
	call grbuts,contains
	ret
	end method
	method setbutbase
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis setbutbase1
	push $2
	cthis setbutbase2
	end method
	method setreach
	localint $1
	pop $1
	push $1
	pop breachable
	end method
	method reachable
	push breachable
	ret
	end method
	method setbuttyp
	localstring $1
	pop $1
	push $1
	pop _styp
	end method
	method updatemousecursor
	push _styp
	spushs
	push "but"
	cmpst
	jne l2705
	spop $a
	push "active"
	jmp l2704
l2705:
	push "doors"
	cmpst
	jne l2706
	spop $a
	push "exit"
	jmp l2704
l2706:
	push "item"
	cmpst
	jne l2707
	spop $a
	push "take"
	jmp l2704
l2707:
	spop $a
	push smousecursor
l2704:
	pop smousecursor
	end method
	method lrel
	end method
	method clickon
	cthis reachable
	cmp0
	je l2709
	cthis getname
	call clwalkq,visit
l2709:
	end method
	method moveon
	push sItemMover
	push "null"
	cmpje
	cmp0
	je l2711
	push smousecursor
	call advmouse,set
	jmp l2710
l2711:
	push sItemMover
	spushs
	cthis getname
	push "setactive"
	spop $a
	call [$a],checkusebutton
l2710:
	end method
	method moveoff
	call advmouse,setstd
	end method
	method setadvbutpos
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sgox
	push $2
	pop sgoy
	push $1
	pop igox
	push $2
	pop igoy
	end method
	method setbutdir
	localstring $1
	pop $1
	push $1
	pop _sbutdir
	end method
	method setbutbase1
	localstring $1
	pop $1
	push $1
	pop _sbase1
	push $1
	pop baseuse1
	end method
	method setbutbase2
	localstring $1
	pop $1
	push $1
	pop _sbase2
	push $1
	pop baseuse2
	end method
	method getbase1
	push _sbase1
	ret
	end method
	method getbase2
	push _sbase2
	ret
	end method
	method getbutdir
	push _sbutdir
	ret
	end method
	method getbutname
	push _sname
	ret
	end method
	method gettyp
	push _styp
	ret
	end method
	method getgox
	push sgox
	push "-hero"
	cmpje
	cmp0
	je l2713
	push sgoy
	push "-main"
	cmpje
	cmp0
	je l2715
	push smainhero
	spushs
	spop $a
	call [$a],getposx
	jmp l2714
l2715:
	push sgoy
	spushs
	spop $a
	call [$a],getposx
l2714:
	jmp l2712
l2713:
	push sgox
	push "-but"
	cmpje
	cmp0
	je l2717
	push sgoy
	spushs
	spop $a
	call [$a],getcx
	jmp l2716
l2717:
	push igox
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
l2716:
l2712:
	end method
	method getgoy
	push sgox
	push "-hero"
	cmpje
	cmp0
	je l2719
	push sgoy
	push "-main"
	cmpje
	cmp0
	je l2721
	push smainhero
	spushs
	spop $a
	call [$a],getposy
	jmp l2720
l2721:
	push sgoy
	spushs
	spop $a
	call [$a],getposy
l2720:
	jmp l2718
l2719:
	push sgox
	push "-but"
	cmpje
	cmp0
	je l2723
	push sgoy
	spushs
	spop $a
	call [$a],getey
	jmp l2722
l2723:
	push igoy
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
l2722:
l2718:
	end method
	method getposx
	push 0
	ret
	end method
	method getposy
	push 0
	ret
	end method
	method getz
	push 0
	ret
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 0
	ret
	end method
	method preparetosort
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method endsort
	end method
	method setasbut
	localstring $1
	pop $1
	push $1
	spushs
	push "active"
	spop $a
	call [$a],smousecursor=
	end method
	method setasitem
	localstring $1
	pop $1
	push $1
	spushs
	push "take:"
	push 1
	call modadv,get
	push "take:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	push $1
	spushs
	push "take"
	spop $a
	call [$a],smousecursor=
	end method
	method setasdoors
	localstring $1
	pop $1
	push $1
	spushs
	push "doors:"
	push 1
	call modadv,get
	push "doors:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	push $1
	spushs
	push "exit"
	spop $a
	call [$a],smousecursor=
	end method
	end class

	class classadvitem
	parent classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "item"
	clparent classadvbut,init
	push "take:"
	push 1
	call modadv,get
	push "take:"
	push 2
	call modadv,get
	cthis setbutbase
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "item"
	clparent classadvbut,setasbutton2
	push $1
	spushs
	push "take:"
	push 1
	call modadv,get
	push "take:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	end method
	end class

	class classadvdoors
	parent classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "doors"
	clparent classadvbut,init
	push "doors:"
	push 1
	call modadv,get
	push "doors:"
	push 2
	call modadv,get
	cthis setbutbase
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "doors"
	clparent classadvbut,setasbutton2
	push $1
	spushs
	push "active"
	spop $a
	call [$a],smousecursor=
	push $1
	spushs
	push "doors:"
	push 1
	call modadv,get
	push "doors:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	end method
	end class

	class classbehhero
	method init
	new string,_snextbeh
	push "null"
	pop _snextbeh
	new string,_stdfinfun
	push "null"
	pop _stdfinfun
	new string,_stdfinobj
	push "null"
	pop _stdfinobj
	new string,_stype
	push "null"
	pop _stype
	new string,_scaller
	new int,bblock
	push 1
	pop bblock
	new int,bparal
	push 0
	pop bparal
	end method
	method gonext
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	push bparal
	cmp0
	je l2725
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],behret
	pop $2
	jmp l2724
l2725:
	push _sstarter
	spushs
	spop $a
	call [$a],isenumer
	cmp0
	je l2727
	push _sstarter
	cthis getname
	cmpjne
	jmp l2729
l2727:
	push 0
	jmp l2729
l2728:
	push 1
l2729:
	cmp0
	je l2730
	push 1
	pop $2
	jmp l2726
l2730:
	push _snextbeh
	push "null"
	cmpjne
	cmp0
	je l2732
	push _snextbeh
	spushs
	push $1
	spop $a
	call [$a],eval
	jmp l2731
l2732:
	push 1
	pop $2
l2731:
l2726:
l2724:
	push $2
	cmp0
	je l2734
	push $1
	cthis finishbeh
l2734:
	end method
	method finishbeh
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l2736
	push $1
	spushs
	spop $a
	call [$a],reteval
	jmp l2735
l2736:
	call modstnd,resume
	localstring $2
	cthis getactbeh
	pop $2
	push _sstarter
	spushs
	spop $a
	call [$a],callbehfin
	cthis getactbeh
	push $2
	cmpje
	cmp0
	je l2738
	push "null"
	cthis setactbeh
l2738:
l2735:
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setfinfun
	cthis advgetlock
	pop _bmslock
	push bblock
	cmp0
	je l2740
	push bblock
	cthis advmssetlock
l2740:
	call modstnd,pause
	push "null"
	cthis eval
	end method
	method eval
	localstring $1
	pop $1
	cthis getname
	cthis setactbeh
	push $1
	pop _scaller
	cthis _eval
	end method
	method rewind
	push "_rew"
	cthis hasaddedmet
	cmp0
	je l2742
	cthis _rew
l2742:
	end method
	method reteval
	push _scaller
	cthis gonext
	end method
	method callbehfin
	push bblock
	cmp0
	je l2744
	push _bmslock
	cthis advmssetlock
l2744:
	push _stdfinobj
	push _stdfinfun
	cthis callfun
	push "null"
	pop _stdfinobj
	push "null"
	pop _stdfinfun
	cthis getname
	spushs
	push _sbeh
	spop $a
	call $a,strsubbs
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _evalenter
	cthis getname
	push "reteval"
	call ccs,obenter
	end method
	method _evalclose
	cthis getname
	push "reteval"
	call ccs,obclose
	end method
	method _evalmusic
	call vmus,getfullname
	push 0
	call _music,playvec
	cthis reteval
	end method
	method _evalscript
	push _id
	push 0
	cmpjae
	cmp0
	je l2746
	localint $1
	push _id
	pop $1
	localdef $2
	push _sdb
	spushs
	push _row
	push $1
	spop $a
	call [$a],get
	pop $2
l2747:
	push $2
	push ")"
	cmpjne
	cmp0
	je l2748
	push _sscr
	spushs
	push $1
	push _id
	pop $b
	popax
	sub $a,$b
	push $2
	spop $a
	call [$a],ARG=
	add $1,1
	pop $1
	push _sdb
	spushs
	push _row
	push $1
	spop $a
	call [$a],get
	pop $2
	jmp l2747
l2748:
l2746:
	push _sscr
	spushs
	push _sfun2
	spop $a
	call [$a],call
	cthis reteval
	end method
	method _evalmet
	push _icol
	push 0
	cmpjae
	cmp0
	je l2750
	localint $1
	push _icol
	pop $1
	localdef $2
	push _sdb
	spushs
	push _irow
	push $1
	spop $a
	call [$a],get
	pop $2
l2751:
	push $2
	push ")"
	cmpjne
	cmp0
	je l2752
	push $2
	add $1,1
	pop $1
	push _sdb
	spushs
	push _irow
	push $1
	spop $a
	call [$a],get
	pop $2
	jmp l2751
l2752:
l2750:
	push _sob2
	push _sfun2
	cthis callfun
	cthis reteval
	end method
	method _evalsave
	push 0
	push 1
	call ssavval,getb
	push "@"
	cmpje
	cmp0
	je l2754
	localint $1
	push 1
	call ssavval,strsubb
	pop $1
	push ssavvar
	push $1
	push ssavvar
	call clsave,get
	pop $b
	popax
	add $a,$b
	call clsave,set
	jmp l2753
l2754:
	push ssavvar
	push ssavval
	call clsave,set
l2753:
	cthis reteval
	end method
	method _evalgame
	localstring $1
	call gameapi,getgamename
	pop $1
	push _styp
	spushs
	push "-def"
	cmpst
	jne l2756
	spop $a
	push $1
	spushs
	push _spath
	push _sgame
	spop $a
	call [$a],playfromscript
	jmp l2755
l2756:
	push "-adv"
	cmpst
	jne l2757
	spop $a
	push $1
	spushs
	push _sgame
	push _spath
	spop $a
	call [$a],playnewgamepath
	jmp l2755
l2757:
	spop $a
	push $1
	spushs
	push _sgame
	spop $a
	call [$a],playnewgame
l2755:
	cthis reteval
	end method
	method _evalread
	push _sread
	push _ix
	push _iy
	push _sdir
	call clhilarytxt,herosaydir
	end method
	method _rewread
	call clhilarytxt,stop
	cthis reteval
	end method
	method _evalwait
	call timwait,play
	end method
	method _evaltalk
	localstring $1
	push _spathpref
	push _san
	pop $b
	popax
	add $a,$b
	pop $1
	localstring $2
	push _stalkpref
	push _san
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	call engine,varexist
	cmp0
	je l2759
	push $2
	spushs
	spop $a
	call [$a],getdir
	push $2
	spushs
	push _sdir
	spop $a
	call [$a],getpropdir
	cmpjne
	jmp l2761
l2759:
	push 0
	jmp l2761
l2760:
	push 1
l2761:
	cmp0
	je l2762
	push $1
	spushs
	push _sdir
	cthis getname
	push "_evaltalk"
	spop $a
	call [$a],heroturn
	ret
l2762:
	push _san
	cthis advanstand
	push $2
	spushs
	call modadv,gettalktype
	spop $a
	call [$a],settalktype
	push $2
	spushs
	push __swav
	spop $a
	call [$a],setsnd
	push $2
	spushs
	push __sbase
	spop $a
	call [$a],checkamounts
	push $2
	spushs
	push isort
	push bstt
	push bstp
	cthis getname
	push "reteval"
	push $2
	spushs
	push _sdir
	spop $a
	call [$a],getpropdir
	spop $a
	call [$a],herosaydir
	end method
	method _rewtalk
	push _stalkpref
	push _san
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	spop $a
	call [$a],stop
	end method
	method _evalsetpos
	localint $1
	localint $2
	localstring $3
	push _spathpref
	push _san
	pop $b
	popax
	add $a,$b
	pop $3
	push _idestx
	push "-id"
	cmpje
	cmp0
	je l2764
	push $3
	spushs
	push _idesty
	spop $a
	call [$a],getbyname
	pop $2
	push $3
	spushs
	push $2
	spop $a
	call [$a],getxver
	pop $1
	push $3
	spushs
	push $2
	spop $a
	call [$a],getyver
	pop $2
	push _san
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	jmp l2763
l2764:
	push _idestx
	pop $1
	push _idesty
	pop $2
	push _san
	spushs
	push $1
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
l2763:
	push _bssc
	cmp0
	je l2766
	call clcamera,setscene
l2766:
	push $3
	call engine,varexist
	cmp0
	je l2768
	push $3
	spushs
	spop $a
	call [$a],scalean
l2768:
	push _san
	spushs
	push _san
	spushs
	spop $a
	call [$a],getposy
	spop $a
	call [$a],setz
	push _sdir
	push "auto"
	cmpjne
	cmp0
	je l2770
	push _san
	spushs
	push _sdir
	spop $a
	call [$a],setdir
l2770:
	cthis reteval
	end method
	method _evalwalk
	localint $1
	localint $2
	push _idestx
	push "-id"
	cmpje
	cmp0
	je l2772
	push _sptf
	spushs
	push _idesty
	spop $a
	call [$a],getbyname
	pop $2
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getxver
	push _sptf
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $1
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getyver
	push _sptf
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $2
	jmp l2771
l2772:
	push _idestx
	push "-hero"
	cmpje
	cmp0
	je l2774
	push _idesty
	spushs
	spop $a
	call [$a],getposx
	pop $1
	push _idesty
	spushs
	spop $a
	call [$a],getposy
	pop $2
	localint $3
	push 1
	pop $3
	push _sptf
	spushs
	push $1
	push $2
	spop $a
	call [$a],ptfgoto
	push 0
	cmpjae
	cmp0
	je l2776
	push _sptf
	spushs
	push 1
	spop $a
	call [$a],getgover
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l2778
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getxver
	pop $1
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getyver
	pop $2
	push 0
	pop $3
l2778:
l2776:
	push _sptf
	spushs
	push 0
	spop $a
	call [$a],stop
	push $3
	cmp0
	je l2780
	localdef $4
	push _spathpref
	call _sptf,strsubbs
	pop $4
	push $4
	spushs
	spop $a
	call [$a],getposx
	pop $1
	push $4
	spushs
	spop $a
	call [$a],getposy
	pop $2
l2780:
	jmp l2773
l2774:
	push _idestx
	pop $1
	push _idesty
	pop $2
l2773:
l2771:
	push _sptf
	spushs
	push $1
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	cthis getname
	push "reteval"
	spop $a
	call [$a],herowalkto2
	end method
	method _evalturn
	localstring $1
	push _sdir
	pop $1
	push A
	push "uu"
	push "ru"
	push "rr"
	push "rd"
	push "dd"
	push "ld"
	push "ll"
	push "lu"
	call $1,in
	neg
	cmp0
	je l2782
	localstring $2
	push _sptf
	spushs
	spop $a
	call [$a],getanim
	pop $2
	push _sptf
	spushs
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $2
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $2
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],vecdir
	pop $1
l2782:
	push _sptf
	spushs
	push $1
	cthis getname
	push "reteval"
	spop $a
	call [$a],heroturn
	end method
	method _evalanorder
	push _san
	cthis advanstand
	push _sdb
	push _irow
	push _icol
	push _san
	cthis analizeaninstr
	popax
	cthis reteval
	end method
	method _evalanplay
	push _san
	spushs
	push "bthisfin"
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l2784
	push _san
	spushs
	spop $a
	call [$a],setasadvanima
l2784:
	push _san
	cthis advanstand
	push _san
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push _sact
	clparent StringChecker,isdigit
	cmp0
	je l2786
	push _san
	spushs
	push _sact
	spop $a
	call [$a],nameofaction
	pop _sact
l2786:
	push _san
	spushs
	push _sact
	cthis getname
	push "reteval"
	spop $a
	call [$a],playspec2
	end method
	method _rewanplay
	end method
	method _evalsndbg
	call _sndbg,getfullname
	cthis cbsplay
	cthis reteval
	end method
	method _evalsndplay
	localint $1
	push igmlektor
	pop $1
	call sndp,file_loaded
	neg
	cmp0
	je l2788
	push 0
	pop igmlektor
l2788:
	call sndp,getfullname
	cthis cbsplay
	push $1
	pop igmlektor
	end method
	method _rewsndplay
	call sndp,getfullname
	cthis cisactsnd
	cmp0
	je l2790
	push 1
	cthis csplaystop
	jmp l2789
l2790:
	push 1
	call sndp,stop
l2789:
	end method
	method _evalcall
	localstring $1
	push scallobj
	pop $1
	push "$"
	call $1,contains
	cmp0
	je l2792
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l2794
	push $1
	popax
	mov $a,[$a]
	psax
	jmp l2793
l2794:
	push sscript
	spushs
	push $1
	spop $a
	call [$a],get
l2793:
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l2796
	cthis reteval
	ret
l2796:
l2792:
	push $1
	cthis getbeh
	pop $1
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],eval
	end method
	method _evalnull
	cthis reteval
	end method
	method _evalstart
	localint $1
	localstring $2
	call vbif,free
	push bonce
	push "null"
	cmpjne
	cmp0
	je l2798
	push bonce
	call clsave,bis
	neg
	cmp0
	je l2800
	push bonce
	call clsave,bset
	jmp l2799
l2800:
	push _scaller
	cthis finishbeh
	ret
l2799:
l2798:
	push iisifsave
	push 0
	cmpje
	cmp0
	je l2802
	push sisifsave
	push sisifvar
	call clsave,is
	jmp l2804
l2802:
	push 0
	jmp l2804
l2803:
	push 1
l2804:
	cmp0
	jne l2806
	push iisifsave
	push 1
	cmpje
	cmp0
	je l2807
	push sisifsave
	push sisifvar
	call clsave,is
	neg
	jmp l2809
l2807:
	push 0
	jmp l2809
l2808:
	push 1
l2809:
	jmp l2810
l2805:
	push 0
	jmp l2810
l2806:
	push 1
l2810:
	cmp0
	je l2811
	push _scaller
	cthis finishbeh
	ret
l2811:
	push brand
	cmp0
	je l2813
	call vecbehs,size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l2815
	call $1,rand
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l2814
l2815:
	cthis reteval
l2814:
	jmp l2812
l2813:
	push bparal
	cmp0
	je l2817
	push "vecbehs"
	call vecbehs2,veccopy
	push 0
	pop $1
l2818:
	push $1
	call vecbehs,size
	cmpjl
	cmp0
	je l2819
	jmp l2821
l2820:
	add $1,1
	pop $1
	jmp l2818
l2821:
	push $1
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l2820
l2819:
	jmp l2816
l2817:
	push ienumer
	push 0
	cmpja
	cmp0
	je l2823
	cthis nextenum
	push 1
	pop $b
	popax
	sub $a,$b
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l2822
l2823:
	cthis reteval
l2822:
l2816:
l2812:
	end method
	method _ifst
	localint $1
	localint $2
	pop $2
	pop $1
	push ifst
	spushs
	push 1
	cmpst
	jne l2825
	spop $a
	push $1
	cmp0
	je l2826
	push $2
	jmp l2828
l2826:
	push 0
	jmp l2828
l2827:
	push 1
l2828:
	jmp l2824
l2825:
	push 2
	cmpst
	jne l2829
	spop $a
	push $1
	cmp0
	jne l2831
	push $2
	jmp l2832
l2830:
	push 0
	jmp l2832
l2831:
	push 1
l2832:
	jmp l2824
l2829:
	spop $a
	push $1
l2824:
	end method
	method _oper_check
	localstring $1
	pop $1
	push $1
	spushs
	push "|"
	cmpst
	jne l2834
	spop $a
	push 2
	jmp l2833
l2834:
	push "&"
	cmpst
	jne l2835
	spop $a
	push 1
	jmp l2833
l2835:
	spop $a
	push 0
l2833:
	end method
	method _ifcheck
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	push istart
	pop $5
	push 0
	pop ifst
l2836:
	push $5
	push istop
	cmpjl
	cmp0
	je l2837
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],get
	pop $3
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],dbchecknext
	pop $4
	push $4
	spushs
	push "="
	cmpst
	jne l2839
	spop $a
	push 2
	popax
	add $5,$a
	pop $5
	push $3
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],get
	call clsave,is
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],dbchecknext
	cthis _oper_check
	pop ifst
	push ifst
	cmp0
	je l2841
	add $5,1
	pop $5
l2841:
	jmp l2838
l2839:
	push "!="
	cmpst
	jne l2842
	spop $a
	push 2
	popax
	add $5,$a
	pop $5
	push $3
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],get
	call clsave,is
	neg
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
	push _db
	spushs
	push irow
	push $5
	spop $a
	call [$a],dbchecknext
	cthis _oper_check
	pop ifst
	push ifst
	cmp0
	je l2844
	add $5,1
	pop $5
l2844:
	jmp l2838
l2842:
	push "&"
	cmpst
	jne l2845
	spop $a
	add $5,1
	pop $5
	push 0
	push 1
	call $3,getb
	push "!"
	cmpje
	cmp0
	je l2847
	push 1
	call $3,strsubb
	call clsave,bis
	neg
	jmp l2846
l2847:
	push $3
	call clsave,bis
l2846:
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
	push 1
	pop ifst
	jmp l2838
l2845:
	push "|"
	cmpst
	jne l2848
	spop $a
	add $5,1
	pop $5
	push 0
	push 1
	call $3,getb
	push "!"
	cmpje
	cmp0
	je l2850
	push 1
	call $3,strsubb
	call clsave,bis
	neg
	jmp l2849
l2850:
	push $3
	call clsave,bis
l2849:
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
	push 2
	pop ifst
	jmp l2838
l2848:
	spop $a
	push 0
	push 1
	call $3,getb
	push "!"
	cmpje
	cmp0
	je l2852
	push 1
	call $3,strsubb
	call clsave,bis
	neg
	jmp l2851
l2852:
	push $3
	call clsave,bis
l2851:
	pop $2
	push $2
	push $1
	cthis _ifst
	pop $1
l2838:
	add $5,1
	pop $5
	jmp l2836
l2837:
	push _sstarter
	spushs
	push $1
	spop $a
	call [$a],bif=
	push $1
	end method
	method _checkif
	cthis _ifcheck
	cmp0
	je l2854
	cthis reteval
	jmp l2853
l2854:
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],classbehhero0
l2853:
	end method
	method classbehhero0
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call vecbehs,size
	pop $3
	localint $4
	push 0
	pop $4
	localint $5
	push $1
	call vecbehs,find
	push 1
	pop $b
	popax
	add $a,$b
	pop $5
l2855:
	push $5
	push $3
	cmpjl
	cmp0
	je l2856
	jmp l2858
l2857:
	add $5,1
	pop $5
	jmp l2855
l2858:
	push $5
	call vecbehs,get
	spushs
	spop $a
	call [$a],gettyp
	spushs
	push "IF"
	cmpst
	jne l2860
	spop $a
	add $2,1
	pop $2
	jmp l2859
l2860:
	push "FI"
	cmpst
	jne l2861
	spop $a
	push $2
	push 0
	cmpje
	cmp0
	je l2863
	push $5
	pop $4
	push $3
	pop $5
	jmp l2862
l2863:
	sub $2,1
	pop $2
l2862:
	jmp l2859
l2861:
	push "ELSE"
	cmpst
	je l2865
	push "ELIF"
	cmpst
	je l2865
	jmp l2864
l2865:
	spop $a
	push $2
	push 0
	cmpje
	cmp0
	je l2867
	push $5
	pop $4
	push $3
	pop $5
l2867:
	jmp l2859
l2864:
	spop $a
l2859:
	jmp l2857
l2856:
	push $4
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	end method
	method _evalIF
	push _sstarter
	spushs
	spop $a
	call [$a],ifpush
	cthis _checkif
	end method
	method _gotofi
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	push $1
	call vecbehs,find
	push 1
	pop $b
	popax
	add $a,$b
	pop $3
l2868:
	push $3
	call vecbehs,size
	cmpjl
	cmp0
	je l2869
	jmp l2871
l2870:
	add $3,1
	pop $3
	jmp l2868
l2871:
	push $3
	call vecbehs,get
	spushs
	spop $a
	call [$a],gettyp
	spushs
	push "IF"
	cmpst
	jne l2873
	spop $a
	add $2,1
	pop $2
	jmp l2872
l2873:
	push "FI"
	cmpst
	jne l2874
	spop $a
	push $2
	push 0
	cmpje
	cmp0
	je l2876
	push $3
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	ret
	jmp l2875
l2876:
	sub $2,1
	pop $2
l2875:
	jmp l2872
l2874:
	spop $a
l2872:
	jmp l2870
l2869:
	end method
	method _evalELIF
	push _sstarter
	spushs
	spop $a
	call [$a],bif
	cmp0
	je l2878
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],_gotofi
	jmp l2877
l2878:
	cthis _checkif
l2877:
	end method
	method _evalELSE
	push _sstarter
	spushs
	spop $a
	call [$a],bif
	cmp0
	je l2880
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],_gotofi
	jmp l2879
l2880:
	cthis reteval
l2879:
	end method
	method _evalFI
	push _sstarter
	spushs
	spop $a
	call [$a],ifpop
	cthis reteval
	end method
	method gettyp
	push _stype
	end method
	method settype
	localstring $1
	pop $1
	push $1
	pop _stype
	push "_eval"
	push "_eval"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addmethod
	push "_rew"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasmet
	cmp0
	je l2882
	push "_rew"
	push "_rew"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addmethod
l2882:
	end method
	method setflags
	localstring $1
	pop $1
	push $1
	pop _snextbeh
	end method
	method setfinfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _stdfinobj
	push $2
	pop _stdfinfun
	end method
	method setasstarter
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "start"
	cthis settype
	new string,_sstarter
	cthis getname
	pop _sstarter
	new int,brand
	push $2
	pop brand
	new int,_bmslock
	new vector,vecbehs
	push $4
	pop bblock
	push "string"
	call vecbehs,type
	new string,bonce
	push $1
	pop bonce
	push $3
	pop bparal
	new int,ienumer
	push $5
	pop ienumer
	push $5
	push 0
	cmpja
	cmp0
	je l2884
	new int,_iencnt
	push 1
	pop _iencnt
	jmp l2883
l2884:
	push $3
	cmp0
	je l2886
	new vector,vecbehs2
	push "string"
	call vecbehs2,type
l2886:
l2883:
	new int,iisifsave
	push $6
	pop iisifsave
	push $6
	push 0
	cmpjae
	cmp0
	je l2888
	new string,sisifsave
	push $7
	pop sisifsave
	push $8
	push "null"
	cmpjne
	cmp0
	je l2890
	new string,sisifvar
	push $8
	pop sisifvar
l2890:
l2888:
	new vector,vbif
	end method
	method bif
	call vbif,last
	end method
	method bif=
	localint $1
	pop $1
	call vbif,size
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	call vbif,set
	end method
	method ifpush
	push 1
	call vbif,add
	end method
	method ifpop
	call vbif,pop
	popax
	end method
	method isenumer
	push ienumer
	ret
	end method
	method nextenum
	push _iencnt
	call vecbehs,size
	cmpja
	cmp0
	je l2892
	push ienumer
	push 1
	pop $b
	popax
	add $a,$b
	pop _iencnt
	jmp l2891
l2892:
	add _iencnt,1
	pop _iencnt
l2891:
	push _iencnt
	push 1
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method addtostarter
	localstring $1
	pop $1
	push $1
	call vecbehs,add
	end method
	method getblock
	push bblock
	ret
	end method
	method addflags
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,_sstarter
	push $1
	pop _sstarter
	push _stype
	push "read"
	cmpje
	cmp0
	je l2894
	push 0
	jmp l2893
l2894:
	push $2
l2893:
	pop bblock
	push $3
	pop bparal
	end method
	method behret
	localstring $1
	pop $1
	push $1
	call vecbehs2,remove
	call vecbehs2,size
	push 0
	cmpje
	ret
	end method
	method _setasif
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,istart
	push $3
	pop istart
	new int,istop
	push $4
	pop istop
	new string,_db
	push $1
	pop _db
	new int,irow
	push $2
	pop irow
	new int,ifst
	push 0
	pop ifst
	end method
	method setasIF
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "IF"
	cthis settype
	push $1
	push $2
	push $3
	push $4
	cthis _setasif
	end method
	method setasELIF
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "ELIF"
	cthis settype
	push $1
	push $2
	push $3
	push $4
	cthis _setasif
	end method
	method setas
	localstring $1
	pop $1
	push $1
	cthis settype
	end method
	method setasscript
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "script"
	cthis settype
	new string,_sscr
	push $1
	pop _sscr
	new string,_sfun2
	push $2
	pop _sfun2
	new int,_id
	push $5
	pop _id
	new string,_sdb
	push $3
	pop _sdb
	new int,_row
	push $4
	pop _row
	end method
	method setasuse
	localstring $1
	pop $1
	push "use"
	cthis settype
	new string,_sitem
	push $1
	pop _sitem
	end method
	method _evaluse
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	spushs
	push _sitem
	spop $a
	call [$a],pckremove
	cthis reteval
	end method
	method _evaltopck
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	spushs
	push _sitem
	push _sfile
	spop $a
	call [$a],additem
	cthis reteval
	end method
	method setastopck
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "topck"
	cthis settype
	new string,_sitem
	push $1
	pop _sitem
	new string,_sfile
	push $2
	pop _sfile
	end method
	method setasmet
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "met"
	cthis settype
	new string,_sob2
	push $1
	pop _sob2
	new string,_sfun2
	push $2
	pop _sfun2
	new string,_sdb
	push $3
	pop _sdb
	new int,_irow
	push $4
	pop _irow
	new int,_icol
	push $5
	pop _icol
	end method
	method setassaver
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "save"
	cthis settype
	new string,ssavvar
	push $1
	pop ssavvar
	new string,ssavval
	push $2
	pop ssavval
	end method
	method setasnewgamer
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "game"
	cthis settype
	new string,_sgame
	push $3
	pop _sgame
	new string,_styp
	push $1
	pop _styp
	new string,_spath
	push $2
	pop _spath
	end method
	method setasreader
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "read"
	cthis settype
	new string,_sread
	push $1
	pop _sread
	new int,_ix
	push $2
	pop _ix
	new int,_iy
	push $3
	pop _iy
	new string,_sdir
	push $4
	pop _sdir
	end method
	method setaswaiter
	localint $1
	pop $1
	push "wait"
	cthis settype
	new timer,timwait
	push 1
	call timwait,settick
	push $1
	call timwait,delay
	cthis getname
	push "reteval"
	call timwait,_csplbuild
	push "onfinish"
	push "_csplfinish"
	call timwait,addmethod
	end method
	method setassndbg
	localstring $1
	localint $2
	pop $2
	pop $1
	push "sndbg"
	cthis settype
	new snd,_sndbg
	call _sndbg,buildfullname
	push 0
	push 1
	call _sndbg,setstartstopflag
	localdef $3
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	call engine,fileexist
	neg
	cmp0
	je l2896
	push $1
	push ".ogg"
	pop $b
	popax
	add $a,$b
	pop $3
l2896:
	push $3
	call _sndbg,advloadsnd
	push $2
	call _sndbg,setvol
	end method
	method _loadsnd
	end method
	method setasanorder
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "anorder"
	cthis settype
	new string,_sdb
	push $1
	pop _sdb
	new int,_irow
	push $2
	pop _irow
	new int,_icol
	push $3
	pop _icol
	new string,_san
	push $4
	pop _san
	end method
	method setascaller
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "call"
	cthis settype
	new string,scallobj
	push $1
	pop scallobj
	new string,sscript
	push $2
	pop sscript
	end method
	method _csplbuild
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sobj
	push $1
	pop _sobj
	new string,_sfinfun
	push $2
	pop _sfinfun
	end method
	method _csplfinish
	push _sobj
	push _sfinfun
	cthis callfun
	end method
	method setassndplayer
	localstring $1
	localint $2
	pop $2
	pop $1
	push "sndplay"
	cthis settype
	new snd,sndp
	call sndp,buildfullname
	push 0
	push 1
	call sndp,setstartstopflag
	localdef $3
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	call engine,fileexist
	neg
	cmp0
	je l2898
	push $1
	push ".ogg"
	pop $b
	popax
	add $a,$b
	pop $3
l2898:
	push $3
	call sndp,advloadsnd
	cthis getname
	push "reteval"
	call sndp,_csplbuild
	push "onfinish"
	push "_csplfinish"
	call sndp,addmethod
	push $2
	call sndp,setvol
	end method
	method setasposer
	localstring $1
	localstring $2
	localint $3
	localint $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "setpos"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,_idestx
	push $2
	pop _idestx
	new int,_idesty
	push $3
	pop _idesty
	new int,_bssc
	push $4
	pop _bssc
	new string,_sdir
	push $5
	pop _sdir
	end method
	method setasturn
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "turn"
	cthis settype
	new string,_sptf
	push $1
	pop _sptf
	new string,_sdir
	push $2
	pop _sdir
	end method
	method setaswalker
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "walk"
	cthis settype
	new string,_sptf
	push $1
	pop _sptf
	new string,_idestx
	push $2
	pop _idestx
	new string,_idesty
	push $3
	pop _idesty
	end method
	method setasanplayer
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "anplay"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,_sact
	push $2
	pop _sact
	end method
	method setastalker
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "talk"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,__swav
	push $2
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop __swav
	push __swav
	call engine,fileexist
	neg
	cmp0
	je l2900
	push $2
	push ".ogg"
	pop $b
	popax
	add $a,$b
	pop __swav
l2900:
	new string,__sbase
	push $3
	pop __sbase
	new int,isort
	push $4
	pop isort
	new int,bstt
	push $5
	pop bstt
	new int,bstp
	push $6
	pop bstp
	new string,_sdir
	push $7
	pop _sdir
	end method
	method setasenter
	push "enter"
	cthis settype
	end method
	method setasclose
	push "close"
	cthis settype
	end method
	method setasmusic
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "music"
	cthis settype
	new vector,vmus
	push "string"
	call vmus,type
	call vmus,buildfullname
l2901:
	push $3
	push 0
	cmpjae
	cmp0
	je l2902
	push $3
	push $4
	cmpjl
	jmp l2904
l2902:
	push 0
	jmp l2904
l2903:
	push 1
l2904:
	cmp0
	je l2905
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l2901
l2905:
	end method
	end class

	new snd,_fx_pocket
	push "sounds/sfx/harfa.wav"
	call _fx_pocket,load
	new string,sItemMover
	push "null"
	pop sItemMover
	class classadvpocket
	parent classadvobject
	parent classadvbut
	parent gmimgvec
	method init
	localstring $1
	pop $1
	clparent classadvobject,init
	push $1
	clparent classadvbut,init
	clparent gmimgvec,init
	push "pocket"
	cthis setbuttyp
	push 1
	cthis setreach
	push "-hero"
	push "-main"
	cthis setadvbutpos
	new int,iX
	new int,iY
	new int,iNumItems
	push 0
	pop iNumItems
	new int,iMaxItems
	push 14
	pop iMaxItems
	new int,iScale
	new string,sState
	push "closed"
	pop sState
	new string,_sanim
	cthis getname
	pop _sanim
	push _spocketpref
	call _sanim,strsubbs
	pop _sanim
	new string,sItem
	push "null"
	pop sItem
	new string,sFocusItem
	push "null"
	pop sFocusItem
	new string,_sbase
	push "anpocket"
	pop _sbase
	new int,_ibase
	call _sbase,length
	pop _ibase
	new int,_ipcz
	push 1000
	pop _ipcz
	push _ipcz
	cthis setz
	new string,sitempath
	new vector,arPocket
	push "string"
	call arPocket,type
	new vector,arPocketFile
	push "string"
	call arPocketFile,type
	push "tim"
	push 1
	push 1
	push "evalpocket"
	cthis cnewtimercyclefin
	push "itempath:"
	push 1
	call modadv,get
	pop sitempath
	localint $2
	cthis getz
	pop $2
	new anima,imitem
	call imitem,anloopfin
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	call imitem,setz
	new img,immarker
	push sitempath
	push "itemmarker.png"
	pop $b
	popax
	add $a,$b
	call immarker,load
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call immarker,setz
	call immarker,hide
	cthis hide
	new int,bskip
	push 0
	pop bskip
	end method
	method addtoadv
	cthis getname
	cthis addtogamevars
	cthis enable
	cthis addasadvobject
	end method
	method removefromadv
	cthis disable
	cthis removefromadvobjs
	end method
	method hidepocket
	push sState
	push "closed"
	cmpjne
	cmp0
	je l2907
	push sState
	push "close"
	cmpjne
	cmp0
	je l2909
	cthis pockettoggle
	push 0
	call tim,stop
l2909:
l2910:
	push sState
	push "closed"
	cmpjne
	cmp0
	je l2911
	call tim,evalpocket
	push 0
	call tim,stop
	jmp l2910
l2911:
l2907:
	end method
	method exitpocket
	push "closed"
	pop sState
	push 0
	call tim,stop
	cthis hide
	end method
	method skip
	push 1
	pop bskip
	end method
	method skipitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2913
	push 1
	pop bskip
l2913:
	end method
	method additem
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call arPocket,contains
	cmp0
	je l2915
	ret
l2915:
	push $1
	call arPocket,add
	push $2
	call arPocketFile,add
	localstring $3
	push _sbase
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new anima,[$e]
	push $3
	cthis add
	push $3
	spushs
	push sitempath
	push $2
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $3
	spushs
	push 0
	spop $a
	call [$a],play
	push $3
	spushs
	cthis getz
	spop $a
	call [$a],setz
	push $3
	spushs
	spop $a
	call [$a],hide
	add iNumItems,1
	pop iNumItems
	end method
	method savestate
	localstring $1
	pop $1
	push "saves/"
	cthis getname
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_name.txt"
	pop $b
	popax
	add $a,$b
	call arPocket,vecsave
	push "saves/"
	cthis getname
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_file.txt"
	pop $b
	popax
	add $a,$b
	call arPocketFile,vecsave
	end method
	method loadstate
	localstring $1
	pop $1
	new vector,vpcp
	push "string"
	call vpcp,type
	new vector,vpcf
	push "string"
	call vpcf,type
	push "saves/"
	cthis getname
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_name.txt"
	pop $b
	popax
	add $a,$b
	call vpcp,vecload
	push "saves/"
	cthis getname
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_file.txt"
	pop $b
	popax
	add $a,$b
	call vpcf,vecload
	localint $2
	push 0
	pop $2
l2916:
	push $2
	call vpcp,size
	cmpjl
	cmp0
	je l2917
	jmp l2919
l2918:
	add $2,1
	pop $2
	jmp l2916
l2919:
	push $2
	call vpcp,get
	push $2
	call vpcf,get
	cthis additem
	jmp l2918
l2917:
	delete vpcp
	delete vpcf
	end method
	method removeitem
	localstring $1
	pop $1
	localdef $2
	push _sbase
	call $1,strsubbs
	call arPocket,find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l2921
	ret
l2921:
	push $2
	call arPocket,removeat
	push $2
	call arPocketFile,removeat
	push $1
	cthis remove
	push $1
	spushs
	spop $d
	delete [$d]
	sub iNumItems,1
	pop iNumItems
	push sState
	push "opened"
	cmpje
	cmp0
	je l2923
	cthis hide
l2923:
	end method
	method useitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2925
	push sItem
	cthis removeitem
	cthis itemhide
l2925:
	end method
	method pckremove
	localstring $1
	pop $1
	push _sbase
	push $1
	pop $b
	popax
	add $a,$b
	cthis removeitem
	end method
	method evalpocket
	cthis play
	push sState
	push "open"
	cmpje
	cmp0
	je l2927
	push 16
	popax
	add iScale,$a
	pop iScale
	jmp l2926
l2927:
	push sState
	push "close"
	cmpje
	cmp0
	je l2929
	push 16
	popax
	sub iScale,$a
	pop iScale
l2929:
l2926:
	push iScale
	push 116
	cmpja
	cmp0
	je l2931
	push 0
	cthis stop
	push 116
	pop iScale
	push "opened"
	pop sState
	jmp l2930
l2931:
	push iScale
	push 0
	cmpjl
	cmp0
	je l2933
	push 0
	cthis stop
	push 0
	pop iScale
	push "closed"
	pop sState
l2933:
l2930:
	localreal $1
	push iScale
	push iScale
	pop $b
	popax
	mul $a,$b
	push 550
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	localreal $2
	localstring $3
	localint $4
	push 0
	pop $4
l2934:
	push $4
	push iNumItems
	cmpjl
	cmp0
	je l2935
	jmp l2937
l2936:
	add $4,1
	pop $4
	jmp l2934
l2937:
	push $1
	push $4
	pop $b
	popax
	mul $a,$b
	push $1
	push iNumItems
	pop $b
	popax
	mul $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push 90.0
	pop $b
	popax
	sub $a,$b
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $2
	push $4
	cthis get
	pop $3
	push $3
	spushs
	call $2,cos
	push iScale
	pop $b
	popax
	mul $a,$b
	push iX
	pop $b
	popax
	add $a,$b
	push 76
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call $2,sin
	push iScale
	pop $b
	popax
	mul $a,$b
	push iY
	pop $b
	popax
	add $a,$b
	push 75
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $3
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l2939
	push $3
	spushs
	push 0
	spop $a
	call [$a],play
l2939:
	jmp l2936
l2935:
	push sState
	push "closed"
	cmpje
	cmp0
	je l2941
	cthis hide
l2941:
	end method
	method pocketpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push iX
	pop $b
	popax
	sub $a,$b
	pop $3
	localint $4
	push $2
	push iY
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	cthis move
	push $1
	pop iX
	push $2
	pop iY
	end method
	method pockettoggle
	push sState
	push "opened"
	cmpje
	cmp0
	je l2943
	push "close"
	pop sState
	call immarker,hide
	call tim,play
	jmp l2942
l2943:
	push sState
	push "closed"
	cmpje
	cmp0
	je l2945
	push "open"
	pop sState
	call arPocket,size
	push 0
	cmpja
	cmp0
	je l2947
	call _fx_pocket,play
l2947:
	push _sanim
	spushs
	spop $a
	call [$a],getposx
	pop iX
	push _sanim
	spushs
	spop $a
	call [$a],getposy
	push _sanim
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop iY
	cthis itemhide
	cthis show
	call tim,evalpocket
	call tim,play
	jmp l2944
l2945:
	push sState
	push "open"
	cmpje
	cmp0
	je l2949
	push "close"
	pop sState
	jmp l2948
l2949:
	push sState
	push "close"
	cmpje
	cmp0
	je l2951
	push "open"
	pop sState
l2951:
l2948:
l2944:
l2942:
	end method
	method getitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2953
	push _sbase
	call sItem,strsubbs
	jmp l2952
l2953:
	push "null"
l2952:
	ret
	end method
	method itemhide
	push "null"
	pop sFocusItem
	push "null"
	pop sItem
	push 0
	call imitem,stop
	call imitem,hide
	push "null"
	pop sItemMover
	end method
	method printstate
	call sState,print
	call bskip,print
	end method
	method itemclick
	cthis skip
	push sState
	push "closed"
	cmpje
	cmp0
	je l2955
	cthis pockettoggle
	jmp l2954
l2955:
	push sState
	push "opened"
	cmpje
	cmp0
	je l2957
	push sFocusItem
	push "null"
	cmpjne
	cmp0
	je l2959
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2961
	cthis pockettoggle
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sItem,strsubbs
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sFocusItem,strsubbs
	pop $b
	popax
	add $a,$b
	cthis playbehif
	neg
	pop _b_rewind
	cthis itemhide
	jmp l2960
l2961:
	push sFocusItem
	pop sItem
	push sItem
	call imitem,copy
	push sFocusItem
	spushs
	spop $a
	call [$a],hide
	push 1
	call imitem,play
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call imitem,setz
	cthis setitempos
	cthis getname
	pop sItemMover
l2960:
	jmp l2958
l2959:
	cthis pockettoggle
l2958:
	jmp l2956
l2957:
	push sState
	push "open"
	cmpje
	cmp0
	je l2963
	cthis pockettoggle
	jmp l2962
l2963:
	push sState
	push "close"
	cmpje
	cmp0
	je l2965
	cthis pockettoggle
l2965:
l2962:
l2956:
l2954:
	end method
	method preparetosort
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	clparent gmimgvec,isin
	pop $3
	push $3
	push 0
	cmpje
	cmp0
	je l2967
	push _sanim
	spushs
	spop $a
	call [$a],getz
	cthis setz
l2967:
	end method
	method endsort
	push _ipcz
	cthis setz
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	push $2
	push $3
	push $4
	clparent gmimgvec,isin
	pop $5
	push $5
	cmp0
	je l2969
	push $5
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	pop sFocusItem
	jmp l2968
l2969:
	push "null"
	pop sFocusItem
	push _sanim
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	pop $5
l2968:
	push $5
	ret
	end method
	method hide
	push "stop"
	push 0
	cthis eval1
	push "hide"
	cthis eval
	call immarker,hide
	end method
	method setitempos
	call mouse,getpx
	push 76
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call mouse,getpy
	push 75
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call imitem,setpos
	end method
	method itemmoveoff
	push sState
	push "opened"
	cmpje
	cmp0
	je l2971
	call immarker,hide
l2971:
	end method
	method itemmoveon
	push sState
	push "opened"
	cmpje
	cmp0
	je l2973
	push sFocusItem
	push "null"
	cmpjne
	cmp0
	je l2975
	call immarker,show
	push sFocusItem
	spushs
	spop $a
	call [$a],getcx
	call immarker,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push sFocusItem
	spushs
	spop $a
	call [$a],getcy
	call immarker,geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call immarker,setpos
l2975:
l2973:
	end method
	method checkusebutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sItem,strsubbs
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	jne l2978
	push sFocusItem
	push "null"
	cmpjne
	cmp0
	je l2979
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sItem,strsubbs
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sFocusItem,strsubbs
	pop $b
	popax
	add $a,$b
	cthis behexist
	jmp l2981
l2979:
	push 0
	jmp l2981
l2980:
	push 1
l2981:
	jmp l2982
l2977:
	push 0
	jmp l2982
l2978:
	push 1
l2982:
	cmp0
	je l2983
	push $2
	spushs
	spop $d
	call advmouse,[$d]
l2983:
	end method
	method moveon
	push sItemMover
	push "null"
	cmpje
	cmp0
	je l2985
	cthis ismainhero
	cmp0
	jne l2988
	push "beh_"
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	push "_OPERATE_"
	pop $b
	popax
	add $a,$b
	push _sanim
	pop $b
	popax
	add $a,$b
	cthis behexist
	jmp l2989
l2987:
	push 0
	jmp l2989
l2988:
	push 1
l2989:
	cmp0
	je l2990
	call advmouse,setactive
l2990:
	jmp l2984
l2985:
	push sItemMover
	spushs
	cthis getname
	push "setactive"
	spop $a
	call [$a],checkusebutton
l2984:
	end method
	method onmouselclick
	localint $1
	localint $2
	pop $2
	pop $1
	push bskip
	cmp0
	je l2992
	push 0
	pop bskip
	push sItem
	push "null"
	cmpjne
	cmp0
	je l2994
	push sState
	push "opened"
	cmpje
	cmp0
	je l2994
	push sFocusItem
	push "null"
	cmpje
	jmp l2996
l2994:
	push 0
	jmp l2996
l2995:
	push 1
l2996:
	cmp0
	je l2997
	cthis pockettoggle
l2997:
	jmp l2991
l2992:
	cthis ismainhero
	cmp0
	je l2999
	push sState
	push "opened"
	cmpje
	cmp0
	jne l3001
	push sState
	push "open"
	cmpje
	jmp l3002
l3000:
	push 0
	jmp l3002
l3001:
	push 1
l3002:
	cmp0
	je l3004
	cthis pockettoggle
	jmp l3003
l3004:
	cthis itemhide
l3003:
l2999:
l2991:
	end method
	method onmouserclick
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis butisin
	cmp0
	je l3006
	push sState
	push "opened"
	cmpje
	cmp0
	je l3008
	push sFocusItem
	push "null"
	cmpjne
	jmp l3010
l3008:
	push 0
	jmp l3010
l3009:
	push 1
l3010:
	cmp0
	je l3011
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_ITEM_"
	pop $b
	popax
	add $a,$b
	push _sbase
	call sFocusItem,strsubbs
	pop $b
	popax
	add $a,$b
	cthis playbehif
	popax
	jmp l3007
l3011:
	cthis ismainhero
	cmp0
	je l3013
	push "beh_RCLICK_"
	push _sanim
	pop $b
	popax
	add $a,$b
	cthis playbehif
	popax
l3013:
l3007:
l3006:
	end method
	method onmousemove
	localint $1
	localint $2
	pop $2
	pop $1
	push sItem
	push "null"
	cmpjne
	cmp0
	je l3015
	cthis setitempos
l3015:
	push sState
	push "opened"
	cmpje
	cmp0
	je l3017
	push $1
	push $2
	push 1
	push 1
	cthis butisin
	jmp l3019
l3017:
	push 0
	jmp l3019
l3018:
	push 1
l3019:
	cmp0
	je l3020
	cthis itemmoveon
l3020:
	end method
	method moveoff
	call advmouse,setstd
	cthis itemmoveoff
	end method
	method ismainhero
	cthis getmainhero
	push _sanim
	cmpje
	end method
	method clickon
	cthis ismainhero
	cmp0
	je l3022
	call clwalkq,stand
	cthis itemclick
	jmp l3021
l3022:
	cthis getname
	call clwalkq,visit
l3021:
	end method
	end class

	new string,sgmlastscene
	push "null"
	pop sgmlastscene
	new string,sgmglobpath
	push "null"
	pop sgmglobpath
	new string,sgmgame
	push "null"
	pop sgmgame
	new db,gdbsound
	push "save.txt"
	new classfullsave,clsave
	new string,_slhpref
	push "cllh"
	pop _slhpref
	new string,_spathpref
	push "pt"
	pop _spathpref
	new string,_spocketpref
	push "pc"
	pop _spocketpref
	new string,_sstndpref
	push "stnd"
	pop _sstndpref
	new string,_stalkpref
	push "ctlk"
	pop _stalkpref
	new int,AdventureGame
	push 0
	push 0
	push igmappw
	push igmapph
	new CutScene,ccs
	push 2000
	call ccs,setz
	method advgetscreenshoot
	call gameapi,getgamename
	spushs
	cthis getsavepath
	push "slot"
	pop $b
	popax
	add $a,$b
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	push ".bmp"
	pop $b
	popax
	add $a,$b
	push 0.3
	spop $a
	call [$a],cgetscreenshoot
	end method
	module modadv
	method init
	new db,dbload
	new string,stalktype
	push "snd"
	cthis settalktype
	push "null"
	new Script,scrl
	new string,_stalk
	end method
	method execute
	localstring $1
	pop $1
	push $1
	call scrl,call
	end method
	method loadscript
	localstring $1
	pop $1
	push $1
	call scrl,load
	end method
	method loadsounds
	localstring $1
	pop $1
	push $1
	call gdbsound,load
	push igmdebug
	cmp0
	je l3024
	push "exports/adv.dlg"
	call gdbsound,save
l3024:
	end method
	method gettalktype
	push stalktype
	ret
	end method
	method settalktype
	localstring $1
	pop $1
	push $1
	pop stalktype
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbload,loadscript
	push "talk:"
	push 1
	cthis get
	pop _stalk
	end method
	method get
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbload,findbyrow
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l3026
	push "modadv.dbload: can't find "
	push $1
	pop $b
	popax
	add $a,$b
	call engine,print
	push "null"
	ret
	jmp l3025
l3026:
	push $3
	push $2
	call dbload,get
	ret
l3025:
	end method
	end module

	module modadvglob
	method init
	new gmobjvec,grhero
	new gmobjvec,grfiles
	new gmobjvec,grpck
	end method
	method addhero
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push "hero_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_active"
	pop $b
	popax
	add $a,$b
	push 1
	call clsave,set
	localint $4
	push $1
	call grhero,find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l3028
	push $4
	call grfiles,get
	push $2
	cmpjne
	cmp0
	je l3030
	push $4
	push $2
	call grfiles,set
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
l3030:
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $3
	cmp0
	je l3032
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],addtoadv
l3032:
	push 0
	ret
	jmp l3027
l3028:
	push $1
	push $2
	push 0
	cthis newanima
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	call grhero,add
	push $2
	call grfiles,add
	push $3
	cmp0
	je l3034
	localstring $5
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	cthis hasvar
	neg
	cmp0
	je l3036
	push $5
	spushs
	push $1
	spop $e
	new classadvpocket,[$e]
	push $5
	call grpck,add
	push $5
	spushs
	spop $a
	call [$a],addtoadv
	jmp l3035
l3036:
	push $5
	spushs
	spop $a
	call [$a],addtoadv
l3035:
l3034:
	push 1
	ret
l3027:
	end method
	method reloadhero
	localstring $1
	pop $1
	localint $2
	push $1
	call grhero,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l3038
	localstring $3
	push $2
	call grfiles,get
	pop $3
	push $1
	push 0
	cthis _delhero
	push $1
	push $3
	push 0
	cthis addhero
	popax
l3038:
	end method
	method delhero
	localstring $1
	pop $1
	push $1
	push 1
	cthis _delhero
	end method
	method delheros
l3039:
	call grhero,size
	cmp0
	je l3040
	call grhero,first
	cthis delhero
	jmp l3039
l3040:
	end method
	method _delhero
	localstring $1
	localint $2
	pop $2
	pop $1
	push "hero_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_active"
	pop $b
	popax
	add $a,$b
	push 0
	call clsave,set
	localint $3
	push $1
	call grhero,find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l3042
	localstring $4
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	cthis hasvar
	cmp0
	je l3044
	push $2
	jmp l3046
l3044:
	push 0
	jmp l3046
l3045:
	push 1
l3046:
	cmp0
	je l3047
	push $4
	call grpck,remove
	push $4
	spushs
	spop $a
	call [$a],removefromadv
	push $4
	spushs
	spop $d
	delete [$d]
l3047:
	push $3
	call grhero,removeat
	push $3
	call grfiles,removeat
	push $1
	spushs
	spop $d
	delete [$d]
l3042:
	end method
	method savepck
	localstring $1
	pop $1
	push "grpck_"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call grpck,vecsave
	localint $2
	push 0
	pop $2
l3048:
	push $2
	call grpck,size
	cmpjl
	cmp0
	je l3049
	jmp l3051
l3050:
	add $2,1
	pop $2
	jmp l3048
l3051:
	push $2
	call grpck,get
	spushs
	push $1
	spop $a
	call [$a],savestate
	jmp l3050
l3049:
	end method
	method loadpck
	localstring $1
	pop $1
	localdef $2
	localdef $3
	localint $4
	push 0
	pop $4
l3052:
	push $4
	call grpck,size
	cmpjl
	cmp0
	je l3053
	jmp l3055
l3054:
	add $4,1
	pop $4
	jmp l3052
l3055:
	push $4
	call grpck,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],removefromadv
	push $2
	spushs
	spop $d
	delete [$d]
	jmp l3054
l3053:
	push "grpck_"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call grpck,vecload
	push 0
	pop $4
l3056:
	push $4
	call grpck,size
	cmpjl
	cmp0
	je l3057
	jmp l3059
l3058:
	add $4,1
	pop $4
	jmp l3056
l3059:
	push $4
	call grpck,get
	pop $2
	push $2
	spushs
	push _spocketpref
	call $2,strsubbs
	spop $e
	new classadvpocket,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],loadstate
	push $2
	spushs
	spop $a
	call [$a],removefromadv
	jmp l3058
l3057:
	end method
	method onexit
	localstring $1
	localint $2
	push 0
	pop $2
l3060:
	push $2
	call grhero,size
	cmpjl
	cmp0
	je l3061
	jmp l3063
l3062:
	add $2,1
	pop $2
	jmp l3060
l3063:
	push $2
	call grhero,get
	pop $1
	push $1
	spushs
	push 0
	spop $a
	call [$a],stop
	push $1
	spushs
	spop $a
	call [$a],hide
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	cmp0
	je l3065
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],exitpocket
l3065:
	push _spathpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $a
	call [$a],unlinkanima
	jmp l3062
l3061:
	end method
	method print
	call grhero,print
	call grfiles,print
	call grpck,print
	end method
	end module

	class classloadedhero
	method init
	new string,sanhero
	new int,bplaystart
	push 0
	pop bplaystart
	new int,bplaystop
	push 0
	pop bplaystop
	end method
	method setplaystart
	localint $1
	pop $1
	push $1
	pop bplaystart
	end method
	method setplaystop
	localint $1
	pop $1
	push $1
	pop bplaystop
	end method
	method getstartstop
	push bplaystart
	push bplaystop
	ret
	end method
	end class

	class classadvcontroller
	parent classadv
	method init
	push 1
	pop AdventureGame
	clparent classadv,init
	push SNDPATH
	cthis setwavpath
	new snd,__sndplay
	call __sndplay,classadvcontroller0
	cthis advsetstdstate
	new classstndgroup,modstnd
	new Music,_music
	push "engine"
	call _music,smixer=
	new timer,_tim_dbclk
	push 200
	call _tim_dbclk,setdelay
	new int,_if_pos
	push 1
	popax
	sub 0,$a
	pop _if_pos
	push "_dbbh"
	new classobjcounter,clcbeh
	new string,_sbeh
	push "clbeh"
	pop _sbeh
	new int,iidbeh
	push "dbadv"
	new classobjcounter,clcadv
	new db,dbmacros
	new vector,_vecarg
	push "string"
	call _vecarg,type
	new classadvcamera,clcamera
	push "advmsmove"
	call clcamera,setmetonmsmove
	new classwalkerqueue,clwalkq
	new gmadvvec,grbuts
	new gmimgvec,grmsmove
	new gmimgvec,grmslclick
	new gmimgvec,grmsrclick
	new gmimgvec,grmslrel
	new gmobjvec,grsndsrcs
	push "csndsrc"
	new classobjcounter,csndsrc
	push "_timsndsrc"
	push "classadvcontroller2"
	cthis cycle=
	call _timsndsrc,play
	new string,_susetool
	push "null"
	pop _susetool
	new string,_slastms
	push "null"
	pop _slastms
	new int,bmslock
	push 0
	pop bmslock
	new int,_b_rewind
	push 1
	pop _b_rewind
	new string,sactbeh
	push "null"
	pop sactbeh
	new string,slastpathf
	new int,licznik
	push 0
	pop licznik
	new string,smainhero
	push "null"
	pop smainhero
	cthis advsaveonstart
	push sgmgame
	push "null"
	cmpje
	cmp0
	je l3071
	cthis getname
	pop sgmgame
l3071:
	new string,sprivgame
	push sgmgame
	pop sprivgame
	push "null"
	pop sgmgame
	end method
	method classadvcontroller0
	push A
	push "sfun"
	push "null"
	push "sob"
	push "null"
	cthis vars2
	push 0
	push 1
	cthis setstartstopflag
	push "onfinish"
	push "classadvcontroller1"
	cthis addmethod
	end method
	method classadvcontroller1
	push sob
	push sfun
	cthis callfun
	end method
	method classadvcontroller2
	push "classadvcontroller3"
	call grsndsrcs,eval
	cthis play
	end method
	method classadvcontroller3
	localint $1
	localint $2
	localdef $3
	cthis getmainhero
	pop $3
	push $3
	push "null"
	cmpje
	cmp0
	je l3067
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $2
	jmp l3066
l3067:
	push $3
	spushs
	spop $a
	call [$a],getposx
	pop $1
	push $3
	spushs
	spop $a
	call [$a],getposy
	pop $2
l3066:
	localreal $4
	push slinkedobj
	push "-pos"
	cmpje
	cmp0
	je l3069
	push iobjx
	push $1
	pop $b
	popax
	sub $a,$b
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push iobjy
	push $2
	pop $b
	popax
	sub $a,$b
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	call $4,length
	pop $4
	jmp l3068
l3069:
	push slinkedobj
	spushs
	spop $a
	call [$a],getcx
	push $1
	pop $b
	popax
	sub $a,$b
	push slinkedobj
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	call $4,length
	pop $4
l3068:
	push slinkedfx
	push slinkedfx
	spushs
	spop $a
	call [$a],getvol
	push ioutervol
	push rradious
	push $4
	clparent SoundSource,setvol
	end method
	method initadventure
	localstring $1
	localstring $2
	push "game"
	call sprivgame,strsubbs
	pop $2
	push sgmglobpath
	push "null"
	cmpjne
	cmp0
	je l3073
	push sgmglobpath
	pop $1
	push "null"
	pop sgmglobpath
	jmp l3072
l3073:
	push $2
	pop $1
l3072:
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	push $2
	push ".adv"
	pop $b
	popax
	add $a,$b
	cthis loadadventure
	call grbuts,sortimgs
	push smainhero
	push "null"
	cmpje
	cmp0
	je l3075
	call clcamera,getactor
	pop smainhero
l3075:
	call clcamera,start
	call clcamera,setscene
	call clwalkq,start
	push 1
	call clwalkq,setverlen
	call advmouse,setstd
	cthis playbehoninit
	call grbuts,sortimgs
	push "_advtimmove"
	push "classadvcontroller4"
	cthis cycle=
	call _advtimmove,play
	end method
	method classadvcontroller4
	cthis advmsmove
	cthis play
	end method
	method playbehoninit
	push "preinit"
	cthis behexist
	cmp0
	je l3077
	push "preinit"
	cthis getname
	push "playbehinit"
	cthis playbehobfin
	jmp l3076
l3077:
	cthis playbehinit
l3076:
	end method
	method playbehinit
	push sprivgame
	push "visited"
	pop $b
	popax
	add $a,$b
	call clsave,bis
	cmp0
	je l3079
	push "behinit_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l3081
	jmp l3080
l3081:
	push "behinit"
	cthis playpostinit
	cmp0
	je l3083
l3083:
l3080:
	jmp l3078
l3079:
	push sprivgame
	push "visited"
	pop $b
	popax
	add $a,$b
	call clsave,bset
	push "behinit0_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l3085
	jmp l3084
l3085:
	push "behinit0"
	cthis playpostinit
	cmp0
	je l3087
	jmp l3086
l3087:
	push "behinit_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l3089
	jmp l3088
l3089:
	push "behinit"
	cthis playpostinit
	cmp0
	je l3091
l3091:
l3088:
l3086:
l3084:
l3078:
	end method
	method getmainhero
	push smainhero
	ret
	end method
	method setmainhero
	localstring $1
	pop $1
	push $1
	pop smainhero
	end method
	method ismainhero
	localstring $1
	pop $1
	push smainhero
	push $1
	cmpje
	ret
	end method
	method setactbeh
	localstring $1
	pop $1
	push $1
	pop sactbeh
	end method
	method getactbeh
	push sactbeh
	ret
	end method
	method advgetlock
	push bmslock
	ret
	end method
	method advmslock
	push 1
	pop bmslock
	call advmouse,setwait
	end method
	method advmsunlock
	push 0
	pop bmslock
	call advmouse,setstd
	end method
	method advmssetlock
	localint $1
	pop $1
	push $1
	cmp0
	je l3093
	cthis advmslock
	jmp l3092
l3093:
	cthis advmsunlock
l3092:
	end method
	method setusetool
	localstring $1
	pop $1
	push $1
	pop _susetool
	end method
	method getusetool
	push _susetool
	ret
	end method
	method playpostinit
	localstring $1
	pop $1
	push $1
	call gameapi,getgamename
	push "postinit"
	cthis playbehobfinif
	ret
	end method
	method playbeh
	localstring $1
	pop $1
	push $1
	push "null"
	cthis playbehfin
	end method
	method playbehif
	localstring $1
	pop $1
	push $1
	cthis behexist
	cmp0
	je l3095
	push $1
	push "null"
	cthis playbehfin
	push 1
	ret
l3095:
	push 0
	ret
	end method
	method playbehfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	push $2
	cthis playbehobfin
	end method
	method playbehfinif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis behexist
	cmp0
	je l3097
	push $1
	push $2
	cthis playbehfin
	push 1
	ret
l3097:
	push 0
	ret
	end method
	method playbehobfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis getbeh
	spushs
	push $2
	push $3
	spop $a
	call [$a],playfin
	end method
	method playbehobfinif
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis behexist
	cmp0
	je l3099
	push $1
	push $2
	push $3
	cthis playbehobfin
	push 1
	ret
l3099:
	push 0
	ret
	end method
	method playnewgamepath
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	pop sgmglobpath
	push sprivgame
	pop sgmlastscene
	push "lastscene"
	push sgmlastscene
	call clsave,set
	push $1
	call gameapi,play
	end method
	method playnewgame
	localstring $1
	pop $1
	push $1
	push "null"
	cthis playnewgamepath
	end method
	method playfromscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	pop sgmgame
	push "defaultadv:"
	push 1
	call modadv,get
	push $1
	cthis playnewgamepath
	end method
	method getheroloader
	localstring $1
	pop $1
	push _slhpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l3101
	push $1
	jmp l3100
l3101:
	push "null"
l3100:
	end method
	method advanstand
	localstring $1
	pop $1
	localstring $2
	push _spathpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l3103
	push $2
	spushs
	spop $a
	call [$a],iswalking
	jmp l3105
l3103:
	push 0
	jmp l3105
l3104:
	push 1
l3105:
	cmp0
	je l3106
	push $2
	spushs
	push 0
	spop $a
	call [$a],stop
	push $2
	spushs
	spop $a
	call [$a],stand
l3106:
	end method
	method reloadhero
	localstring $1
	pop $1
	push $1
	cthis _getheropath
	cthis anreload
	localstring $2
	push _spathpref
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	cthis getname
	spop $a
	call [$a],linkanima
	push $2
	spushs
	spop $a
	call [$a],linkfilter
	push $2
	spushs
	spop $a
	call [$a],scalean
	end method
	method analizeanopts
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $8
	localreal $9
	localstring $10
	localstring $11
	localint $12
	push 0
	pop $12
	localint $13
	push 0
	pop $13
	localint $14
	localint $15
	localint $16
	localint $17
	push 0
	pop $17
l3107:
	push $3
	push $4
	cmpjl
	cmp0
	je l3108
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	spushs
	push "-stt"
	cmpst
	jne l3110
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $12
	add $3,1
	pop $3
	jmp l3109
l3110:
	push "-stp"
	cmpst
	jne l3111
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $13
	add $3,1
	pop $3
	jmp l3109
l3111:
	push "-wav"
	cmpst
	jne l3112
	spop $a
	push _slhpref
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	pop $10
	add $3,1
	pop $3
	push $10
	spushs
	spop $e
	new classloadedhero,[$e]
	push $10
	spushs
	push "sanhero"
	push $5
	spop $a
	call [$a],varset
	push $6
	spushs
	push $10
	spop $a
	call [$a],add
	jmp l3109
l3112:
	push "-path"
	cmpst
	jne l3113
	spop $a
	push $5
	clparent classadvanhero,buildheroframe
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push _spathpref
	push $5
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	push $5
	push $10
	push $8
	cthis newclpathfcopy
	push $11
	spushs
	spop $a
	call [$a],prepareforhero
	push $11
	push "look"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherolooker,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	push $11
	push "use"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherouser,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	push $11
	push "take"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherotaker,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	jmp l3109
l3113:
	push "-ft"
	cmpst
	jne l3114
	spop $a
	push _spathpref
	push $5
	pop $b
	popax
	add $a,$b
	pop $11
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $11
	spushs
	spop $a
	call [$a],linkfilter
	push $11
	spushs
	push $8
	spop $a
	call [$a],setzsize
	push $11
	spushs
	push $9
	spop $a
	call [$a],setscalepower
	jmp l3109
l3114:
	push "-stnd"
	cmpst
	jne l3115
	spop $a
	push _sstndpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setdelay
	add $3,1
	pop $3
	jmp l3109
l3115:
	push "-txt"
	cmpst
	jne l3116
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $14
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $15
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $16
	add $3,1
	pop $3
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $15
	push $16
	spop $a
	call [$a],settxtcolor
	jmp l3109
l3116:
	push "-font"
	cmpst
	jne l3117
	spop $a
	push 1
	pop $17
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $7
	push "hero:"
	cmpje
	cmp0
	je l3119
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $10
	push $11
	spop $a
	call [$a],setfont
l3119:
	jmp l3109
l3117:
	spop $a
	push $1
	push $2
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push $5
	cthis analizeaninstr
	pop $3
l3109:
	jmp l3107
l3108:
	push $17
	neg
	cmp0
	je l3121
	push $7
	push "hero:"
	cmpje
	jmp l3123
l3121:
	push 0
	jmp l3123
l3122:
	push 1
l3123:
	cmp0
	je l3124
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push "font:"
	push 1
	call modadv,get
	push "font:"
	push 2
	call modadv,get
	spop $a
	call [$a],setfont
l3124:
	push $6
	spushs
	push "setplaystart"
	push $12
	spop $a
	call [$a],eval1
	push $6
	spushs
	push "setplaystop"
	push $13
	spop $a
	call [$a],eval1
	push $6
	spushs
	spop $a
	call [$a],free
	end method
	method setasadvanima
	cthis getname
	push "cadvherofinish"
	clparent classadvanhero,setashero
	end method
	method analizebut
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	localint $8
	localint $9
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $6
	add $4,1
	pop $4
	push ".pyz"
	call $6,contains
	cmp0
	je l3126
	push $6
	pop $7
	push "an"
	push 4
	call $6,strsube
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $7
	push 0
	cthis newanima
l3126:
	push 1
	call $1,strsube
	pop $1
	push $6
	push $5
	push $1
	clparent classadvbut,setasbutton2
	push "setas"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spop $d
	clparent classadvbut,[$d]
	push $6
	spushs
	push $6
	spushs
	spop $a
	call [$a],getcx
	push $6
	spushs
	spop $a
	call [$a],getcy
	spop $a
	call [$a],setadvbutpos
l3127:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l3128
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	spushs
	push "-pos"
	cmpst
	jne l3130
	spop $a
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	push $5
	push "-id"
	cmpje
	cmp0
	je l3132
	push slastpathf
	push "null"
	cmpjne
	jmp l3134
l3132:
	push 0
	jmp l3134
l3133:
	push 1
l3134:
	cmp0
	je l3135
	push slastpathf
	spushs
	push $7
	spop $a
	call [$a],getbyname
	pop $8
	push slastpathf
	spushs
	push $8
	spop $a
	call [$a],getxver
	push slastpathf
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $5
	push slastpathf
	spushs
	push $8
	spop $a
	call [$a],getyver
	push slastpathf
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $7
l3135:
	push $6
	spushs
	push $5
	push $7
	spop $a
	call [$a],setadvbutpos
	jmp l3129
l3130:
	push "-bs1"
	cmpst
	jne l3136
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase1
	add $4,1
	pop $4
	jmp l3129
l3136:
	push "-bs2"
	cmpst
	jne l3137
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase2
	add $4,1
	pop $4
	jmp l3129
l3137:
	push "-us1"
	cmpst
	jne l3138
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],baseuse1=
	add $4,1
	pop $4
	jmp l3129
l3138:
	push "-us2"
	cmpst
	jne l3139
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],baseuse2=
	add $4,1
	pop $4
	jmp l3129
l3139:
	push "-useon"
	cmpst
	jne l3140
	spop $a
	push $6
	spushs
	push "use:"
	push 1
	call modadv,get
	spop $a
	call [$a],setbutbase1
	push $6
	spushs
	push "use:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase2
	jmp l3129
l3140:
	push "-dir"
	cmpst
	jne l3141
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutdir
	add $4,1
	pop $4
	jmp l3129
l3141:
	push "-noreach"
	cmpst
	jne l3142
	spop $a
	push $6
	spushs
	push 0
	spop $a
	call [$a],setreach
	jmp l3129
l3142:
	push "-nh"
	cmpst
	jne l3143
	spop $a
	push $6
	spushs
	push 0
	spop $a
	call [$a],hideontake=
	jmp l3129
l3143:
	push "-pck"
	cmpst
	jne l3144
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setpocket
	add $4,1
	pop $4
	jmp l3129
l3144:
	push "-mask"
	cmpst
	jne l3145
	spop $a
	push $6
	clparent classadvbut,setasmask
	push $6
	spushs
	spop $a
	call [$a],hide
	jmp l3129
l3145:
	push "-inpck"
	cmpst
	jne l3146
	spop $a
	push $6
	spushs
	spop $a
	call [$a],hideontake
	cmp0
	je l3148
	push $6
	spushs
	spop $a
	call [$a],hide
	jmp l3147
l3148:
	push $6
	spushs
	push "but"
	spop $a
	call [$a],setbuttyp
l3147:
	cthis getmainhero
	pop $5
	push $5
	push "null"
	cmpje
	cmp0
	je l3150
	call clcamera,getactor
	pop $5
l3150:
	push $5
	spushs
	spop $a
	call [$a],getpocket
	spushs
	push $6
	spushs
	spop $a
	call [$a],getbutname
	push $6
	spushs
	spop $a
	call [$a],getpocket
	spop $a
	call [$a],additem
	jmp l3129
l3146:
	push "-disable"
	cmpst
	jne l3151
	spop $a
	push $6
	spushs
	spop $a
	call [$a],disable
	jmp l3129
l3151:
	push "-once"
	cmpst
	jne l3152
	spop $a
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $6
	spushs
	push $5
	spop $a
	call [$a],setonce
	push $5
	call clsave,bis
	cmp0
	je l3154
	push $6
	spushs
	spop $a
	call [$a],disable
l3154:
	jmp l3129
l3152:
	push "-cursor"
	cmpst
	jne l3155
	spop $a
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $6
	spushs
	push $5
	spop $a
	call [$a],smousecursor=
	jmp l3129
l3155:
	push "-balpha"
	cmpst
	jne l3156
	spop $a
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $8
	add $4,1
	pop $4
	push $6
	spushs
	push $8
	spop $a
	call [$a],balpha=
	jmp l3129
l3156:
	spop $a
	push $6
	push $2
	push $3
	push $4
	push $2
	spushs
	push $3
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	cthis subanalizebut
	pop $4
l3129:
	jmp l3127
l3128:
	end method
	method subanalizebut
	localstring $1
	localstring $2
	localint $3
	localint $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	end method
	method _getheropath
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis getpath
	pop $2
	push $2
	call engine,fileexist
	cmp0
	je l3158
	push "$"
	push $2
	pop $b
	popax
	add $a,$b
	jmp l3157
l3158:
	push "$"
	push "heropath:"
	push 1
	call modadv,get
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
l3157:
	end method
	method loadadventure
	localstring $1
	pop $1
	localstring $2
	call clcadv,get
	pop $2
	localstring $3
	push "grpers"
	call clcadv,size
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	spop $e
	new db,[$e]
	push $2
	spushs
	push $1
	cthis getpath
	spop $a
	call [$a],loadbeh
	localint $4
	push $2
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localstring $10
	localstring $11
	localint $12
	localint $13
	localint $14
	localreal $15
	localreal $16
	push $2
	push "script"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	spushs
	push $2
	spop $e
	new Script,[$e]
	localstring $17
	push ""
	pop $17
	push $3
	spushs
	spop $e
	new gmobjvec,[$e]
	localint $18
	push 0
	pop $18
l3159:
	push $18
	push $4
	cmpjl
	cmp0
	je l3160
	jmp l3162
l3161:
	add $18,1
	pop $18
	jmp l3159
l3162:
	push 0
	pop $5
	push $2
	spushs
	push $18
	spop $a
	call [$a],getcolsno
	pop $6
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	spushs
	push "setpath:"
	cmpst
	jne l3164
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $17
	cthis setgraphpath
	jmp l3163
l3164:
	push "nopath:"
	cmpst
	jne l3165
	spop $a
	push ""
	pop $17
	push $17
	cthis setgraphpath
	jmp l3163
l3165:
	push "func"
	cmpst
	jne l3166
	spop $a
l3167:
	push $2
	spushs
	push $18
	push 0
	spop $a
	call [$a],get
	push "end"
	cmpjne
	cmp0
	je l3168
	add $18,1
	pop $18
	jmp l3167
l3168:
	jmp l3163
l3166:
	push "sndpath:"
	cmpst
	jne l3169
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	cthis setwavpath
	jmp l3163
l3169:
	push "hero:"
	cmpst
	je l3171
	push "an:"
	cmpst
	je l3171
	jmp l3170
l3171:
	spop $a
	push $2
	spushs
	push $18
	push "-global"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push "-pck"
	spop $a
	call [$a],dbdelvar
	pop $8
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push ".pyz"
	call $11,contains
	cmp0
	je l3173
	push $11
	pop $10
	push "an"
	push ".pyz"
	call $11,strsubes
	pop $b
	popax
	add $a,$b
	pop $11
	jmp l3172
l3173:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
l3172:
	push $9
	push "hero:"
	cmpje
	cmp0
	je l3175
	push ".pyz"
	call $10,contains
	cmp0
	je l3177
	push $10
	cthis _getheropath
	pop $10
l3177:
l3175:
	push ".pyz"
	call $10,contains
	cmp0
	je l3179
	push $7
	cmp0
	je l3181
	push $11
	push $10
	push $8
	call modadvglob,addhero
	cmp0
	je l3183
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
l3183:
	sub $6,1
	pop $6
	jmp l3180
l3181:
	push $11
	push $10
	push 0
	cthis newanima
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
	push $9
	push "hero:"
	cmpje
	cmp0
	je l3185
	push $8
	jmp l3187
l3185:
	push 0
	jmp l3187
l3186:
	push 1
l3187:
	cmp0
	je l3188
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	push $11
	spop $e
	new classadvpocket,[$e]
l3188:
l3180:
	jmp l3178
l3179:
	push $10
	push $11
	cthis copyanima
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
	push $9
	push "hero:"
	cmpje
	cmp0
	je l3190
	push $8
	jmp l3192
l3190:
	push 0
	jmp l3192
l3191:
	push 1
l3192:
	cmp0
	je l3193
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	push $11
	spop $e
	new classadvpocket,[$e]
l3193:
l3178:
	push $8
	cmp0
	je l3195
	sub $6,1
	pop $6
l3195:
	push $9
	push "hero:"
	cmpje
	cmp0
	je l3197
	push _sstndpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new classadvstander,[$e]
	push _stalkpref
	push $11
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classtalker,[$e]
	push $10
	spushs
	push $11
	spop $a
	call [$a],set
	push $10
	spushs
	push "gdbsound"
	spop $a
	call [$a],settextdb
l3197:
	push $2
	push $18
	push $5
	push $6
	push $11
	push $3
	push $9
	cthis analizeanopts
	jmp l3163
l3170:
	push "rect:"
	cmpst
	jne l3198
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	spushs
	spop $e
	new ImgRect,[$e]
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	push $10
	clparent StringChecker,isdigit
	neg
	cmp0
	je l3200
	push $9
	spushs
	push $10
	spop $a
	call [$a],operator=
	add $5,1
	pop $5
	jmp l3199
l3200:
	push $9
	spushs
	call $10,to_r
	push igmappw
	pop $b
	popax
	mul $a,$b
	push $2
	spushs
	push $18
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
	push igmapph
	pop $b
	popax
	mul $a,$b
	push $2
	spushs
	push $18
	push $5
	push 2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
	push igmappw
	pop $b
	popax
	mul $a,$b
	push $2
	spushs
	push $18
	push $5
	push 3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
	push igmapph
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],setrect
	push 4
	popax
	add $5,$a
	pop $5
l3199:
	jmp l3163
l3198:
	push "anaac:"
	cmpst
	jne l3201
	spop $a
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push 0
	pop $8
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push ".pyz"
	call $9,contains
	cmp0
	je l3203
	push $9
	pop $10
	push "an"
	push ".pyz"
	call $9,strsubes
	pop $b
	popax
	add $a,$b
	pop $9
	jmp l3202
l3203:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
l3202:
	push $7
	cmp0
	je l3205
	sub $6,1
	pop $6
	push $9
	spushs
	spop $e
	new gmmaskvec,[$e]
	jmp l3204
l3205:
	push $9
	spushs
	spop $e
	new gmadvvec,[$e]
l3204:
	push ".pyz"
	call $10,contains
	cmp0
	je l3207
	push "_"
	push $9
	pop $b
	popax
	add $a,$b
	push $10
	push 0
	cthis newanima
	push "_"
	push $9
	pop $b
	popax
	add $a,$b
	pop $10
	push 1
	pop $8
l3207:
	push $10
	push $9
	push $9
	cthis newanactionsgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	push $8
	cmp0
	je l3209
	push $10
	spushs
	spop $a
	call [$a],hide
l3209:
	jmp l3163
l3201:
	push "anaf:"
	cmpst
	jne l3210
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push ".pyz"
	call $9,contains
	cmp0
	je l3212
	push $9
	pop $10
	push "an"
	push ".pyz"
	call $9,strsubes
	pop $b
	popax
	add $a,$b
	pop $9
	jmp l3211
l3212:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
l3211:
	push $9
	spushs
	spop $e
	new gmimgvec,[$e]
	push ".pyz"
	call $10,contains
	cmp0
	je l3214
	push "_"
	push $9
	pop $b
	popax
	add $a,$b
	push $10
	push 0
	cthis newanima
	push "_"
	push $9
	pop $b
	popax
	add $a,$b
	pop $10
l3214:
	push $10
	push $9
	push $9
	cthis newanfrbyactgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l3163
l3210:
	push "anfac:"
	cmpst
	jne l3215
	spop $a
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $7
	cmp0
	je l3217
	sub $6,1
	pop $6
	push $9
	spushs
	spop $e
	new gmmaskvec,[$e]
	jmp l3216
l3217:
	push $9
	spushs
	spop $e
	new gmadvvec,[$e]
l3216:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $10
	push $9
	push $10
	spushs
	push $11
	spop $a
	call [$a],actionnr
	push $9
	cthis newanframesgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l3163
l3215:
	push "anac:"
	cmpst
	jne l3218
	spop $a
	push $2
	spushs
	push $18
	push "-adv"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $11
	clparent StringChecker,isdigit
	cmp0
	je l3220
	push $10
	spushs
	push $11
	spop $a
	call [$a],nameofaction
	pop $11
l3220:
	push $10
	push $9
	push $11
	cthis copyanimaact
	push $7
	cmp0
	je l3222
	sub $6,1
	pop $6
	push $9
	spushs
	spop $a
	call [$a],setasadvanima
l3222:
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l3163
l3218:
	push "anf:"
	cmpst
	jne l3223
	spop $a
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $10
	push $9
	cthis copyanima
	push $9
	spushs
	push $11
	push $8
	spop $a
	call [$a],setframe
	push $7
	cmp0
	je l3225
	sub $6,1
	pop $6
	push $9
	spushs
	spop $a
	call [$a],setasadvanima
l3225:
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l3163
l3223:
	push "anorder:"
	cmpst
	jne l3226
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l3163
l3226:
	push "behfile:"
	cmpst
	jne l3227
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	cthis loadbehaviours
	add $5,1
	pop $5
	jmp l3163
l3227:
	push "include:"
	cmpst
	jne l3228
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	cthis loadadventure
	add $5,1
	pop $5
	jmp l3163
l3228:
	push "walkqueue:"
	cmpst
	jne l3229
	spop $a
l3230:
	push $5
	push $6
	cmpjl
	cmp0
	je l3231
	push _spathpref
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call clwalkq,add
	add $5,1
	pop $5
	jmp l3230
l3231:
	jmp l3163
l3229:
	push "font:"
	cmpst
	jne l3232
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $9
	spushs
	spop $e
	new font,[$e]
	push $9
	spushs
	push $10
	push $7
	spop $a
	call [$a],load
	jmp l3163
l3232:
	push "bkg:"
	cmpst
	jne l3233
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push ".pyz"
	call $9,contains
	cmp0
	je l3235
	push "imgbkg"
	push $9
	push 0
	cthis newanima
	jmp l3234
l3235:
	push "imgbkg"
	push $9
	push 0
	cthis newimg
l3234:
	push $2
	push $18
	push $5
	push "imgbkg"
	cthis analizeaninstr
	pop $5
	jmp l3163
l3233:
	push "img:"
	cmpst
	jne l3236
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push 0
	push 4
	call $9,gete
	spushs
	push A
	push ".jpg"
	push ".png"
	spop $h
	call $h,in
	cmp0
	je l3238
	push $9
	pop $10
	push "img"
	push 4
	call $9,strsube
	pop $b
	popax
	add $a,$b
	pop $9
	jmp l3237
l3238:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
l3237:
	push $9
	push $10
	push 0
	cthis newimg
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l3163
l3236:
	push "but:"
	cmpst
	je l3240
	push "doors:"
	cmpst
	je l3240
	push "item:"
	cmpst
	je l3240
	jmp l3239
l3240:
	spop $a
	push $9
	push $2
	push $18
	push $5
	cthis analizebut
	jmp l3163
l3239:
	push "camera:"
	cmpst
	jne l3241
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $16
	add $5,1
	pop $5
	push $15
	push $16
	call clcamera,scalemodifiers
l3242:
	push $5
	push $6
	cmpjl
	cmp0
	je l3243
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push "-size"
	cmpje
	cmp0
	je l3245
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $7
	push $8
	call clcamera,setborders
	jmp l3244
l3245:
	push $9
	push "-center"
	cmpje
	cmp0
	je l3247
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $7
	push $8
	call clcamera,setcenter
	jmp l3246
l3247:
	push $9
	push "-sizebg"
	cmpje
	cmp0
	je l3249
	call imgbkg,getw
	call imgbkg,geth
	call clcamera,setborders
	jmp l3248
l3249:
	push $9
	push "-sizescreen"
	cmpje
	cmp0
	je l3251
	push iResX
	push iResY
	call clcamera,setborders
l3251:
l3248:
l3246:
l3244:
	jmp l3242
l3243:
	jmp l3163
l3241:
	push "actor:"
	cmpst
	jne l3252
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	call clcamera,setactor
	add $5,1
	pop $5
	jmp l3163
l3252:
	push "bgr:"
	cmpst
	jne l3253
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $16
	add $5,1
	pop $5
	push $9
	spushs
	spop $e
	new classbgplan,[$e]
	push $9
	push $15
	push $16
	call clcamera,addbgr
	jmp l3163
l3253:
	push "pathfinder:"
	cmpst
	jne l3254
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop slastpathf
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push ".ptf"
	call $10,contains
	cmp0
	je l3256
	push 20
	pop $7
	push 20
	pop $8
	jmp l3255
l3256:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
l3255:
	push slastpathf
	push $10
	push $7
	push $8
	cthis newpathf
	jmp l3163
l3254:
	push "script:"
	cmpst
	jne l3257
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	spushs
	push $10
	spop $e
	new Script,[$e]
	jmp l3163
l3257:
	push "func:"
	cmpst
	jne l3258
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	sub $6,1
	pop $6
	call clcadv,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $7
l3259:
	push $7
	push 0
	cmpjae
	cmp0
	je l3260
	jmp l3262
l3261:
	sub $7,1
	pop $7
	jmp l3259
l3262:
	push $7
	call clcadv,getid
	push "script"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	spushs
	push $10
	spop $a
	call [$a],containsfun
	cmp0
	je l3264
	push 3
	pop $7
l3265:
	push $7
	push $6
	cmpjl
	cmp0
	je l3266
	jmp l3268
l3267:
	add $7,1
	pop $7
	jmp l3265
l3268:
	push $9
	spushs
	push $7
	push 3
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	push $18
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],ARG=
	jmp l3267
l3266:
	push 1
	popax
	sub 0,$a
	pop $7
	push $9
	spushs
	push $10
	spop $a
	call [$a],call
l3264:
	jmp l3261
l3260:
	jmp l3163
l3258:
	push "IF"
	cmpst
	jne l3269
	spop $a
	add _if_pos,1
	pop _if_pos
	push $2
	push $18
	push $5
	push $6
	cthis _found_if
	pop $18
	jmp l3163
l3269:
	push "ELSE"
	cmpst
	jne l3270
	spop $a
	push $2
	push $18
	push 1
	pop $b
	popax
	add $a,$b
	cthis _goto_fi
	pop $18
	jmp l3163
l3270:
	push "FI"
	cmpst
	jne l3271
	spop $a
	sub _if_pos,1
	pop _if_pos
	push _if_pos
	push 1
	popax
	sub 0,$a
	cmpjl
	cmp0
	je l3273
	push "FI error! "
	cthis getname
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	cthis methodname
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
l3273:
	jmp l3163
l3271:
	push "bsave:"
	cmpst
	jne l3274
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	call clsave,bset
	add $5,1
	pop $5
	jmp l3163
l3274:
	push "save:"
	cmpst
	jne l3275
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	push $10
	call clsave,set
	jmp l3163
l3275:
	push "stdptf:"
	cmpst
	jne l3276
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop slastpathf
	add $5,1
	pop $5
	jmp l3163
l3276:
	push "sfxs:"
	cmpst
	jne l3277
	spop $a
l3278:
	push $5
	push $6
	cmpjl
	cmp0
	je l3279
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $11
	push 1
	pop $7
	push 100
	pop $8
	push 0
	pop $12
	push 0
	pop $13
	push 0.0
	pop $15
l3280:
	push $7
	cmp0
	je l3281
	push $5
	push $6
	cmpjl
	jmp l3283
l3281:
	push 0
	jmp l3283
l3282:
	push 1
l3283:
	cmp0
	je l3284
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	push $10
	spushs
	push "-f"
	cmpst
	jne l3286
	spop $a
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $11
	jmp l3285
l3286:
	push "-v"
	cmpst
	jne l3287
	spop $a
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	jmp l3285
l3287:
	push "-l"
	cmpst
	jne l3288
	spop $a
	push 1
	pop $12
	jmp l3285
l3288:
	push "-p"
	cmpst
	jne l3289
	spop $a
	push 1
	pop $13
	jmp l3285
l3289:
	push "-pl"
	cmpst
	jne l3290
	spop $a
	push 1.0
	pop $15
	jmp l3285
l3290:
	spop $a
	sub $5,1
	pop $5
	push 0
	pop $7
l3285:
	add $5,1
	pop $5
	jmp l3280
l3284:
	push $9
	push $11
	cthis newsfx
	push $9
	spushs
	push $8
	spop $a
	call [$a],setvol
	push $12
	cmp0
	je l3292
	push $9
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l3292:
	push $13
	cmp0
	je l3294
	push $9
	spushs
	spop $a
	call [$a],play
	jmp l3293
l3294:
	push $15
	cmp0
	je l3296
	push $9
	spushs
	spop $a
	call [$a],playloop
l3296:
l3293:
	jmp l3278
l3279:
	jmp l3163
l3277:
	push "met:"
	cmpst
	jne l3297
	spop $a
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push "."
	call $10,contains
	cmp0
	je l3299
	push "."
	call $10,strgetto
	pop $11
	push "."
	call $10,strgetfrom
	pop $10
	push $11
	push ""
	cmpje
	cmp0
	jne l3302
	push $11
	push "this"
	cmpje
	jmp l3303
l3301:
	push 0
	jmp l3303
l3302:
	push 1
l3303:
	cmp0
	je l3304
	call gameapi,getgamename
	pop $11
l3304:
	jmp l3298
l3299:
	call gameapi,getgamename
	pop $11
l3298:
	push $11
	call gameapi,getgamename
	cmpje
	cmp0
	je l3306
	push $11
	spushs
	push $10
	spushs
	spop $d
	spop $a
	 clparent [$a],[$d]
	jmp l3305
l3306:
	push $11
	spushs
	push $10
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l3305:
	jmp l3163
l3297:
	push "sndsrc:"
	cmpst
	jne l3307
	spop $a
	call csndsrc,get
	pop $11
	push $11
	spushs
	spop $e
	new int,[$e]
	push $11
	spushs
	push A
	push "slinkedfx"
	push "null"
	push "ioutervol"
	push 0
	push "rradious"
	push 0.0
	push "slinkedobj"
	push "null"
	push "iobjx"
	push 0
	push "iobjy"
	push 0
	spop $a
	call [$a],vars2
	push $11
	spushs
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	spop $a
	call [$a],slinkedfx=
	add $5,1
	pop $5
	push $11
	spushs
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	spop $a
	call [$a],ioutervol=
	add $5,1
	pop $5
	push $11
	spushs
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	spop $a
	call [$a],rradious=
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $11
	spushs
	push $10
	spop $a
	call [$a],slinkedobj=
	push $10
	push "-pos"
	cmpje
	cmp0
	je l3309
	push $11
	spushs
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	spop $a
	call [$a],iobjx=
	add $5,1
	pop $5
	push $11
	spushs
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	spop $a
	call [$a],iobjy=
	add $5,1
	pop $5
l3309:
	push $11
	call grsndsrcs,add
	push 1
	call _timsndsrc,stop
	jmp l3163
l3307:
	spop $a
	call gameapi,getgamename
	spushs
	push $2
	push $18
	push $5
	push $9
	spop $a
	call [$a],subloadadventure
	pop $5
l3163:
	jmp l3161
l3160:
	push $2
	spushs
	spop $a
	call [$a],readonly
	end method
	method subloadadventure
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	end method
	method _found_if
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	add $3,1
	pop $3
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	sub $4,1
	pop $4
	localstring $7
	localstring $8
l3310:
	push $3
	push $4
	cmpjl
	cmp0
	je l3311
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],dbchecknext
	pop $8
	push $8
	spushs
	push ")"
	cmpst
	je l3314
	push "|"
	cmpst
	je l3314
	push "&"
	cmpst
	je l3314
	jmp l3313
l3314:
	spop $a
	push $5
	push $6
	push 0
	push 1
	call $7,getb
	push "!"
	cmpje
	cmp0
	je l3316
	push 1
	call $7,strsubb
	call clsave,bis
	neg
	jmp l3315
l3316:
	push $7
	call clsave,bis
l3315:
	cthis _check_if
	pop $6
	push $8
	push "|"
	cmpje
	cmp0
	je l3318
	push 1
	pop $5
	jmp l3317
l3318:
	push $8
	push "&"
	cmpje
	cmp0
	je l3320
	push 2
	pop $5
l3320:
l3317:
	jmp l3312
l3313:
	push "="
	cmpst
	jne l3321
	spop $a
	push 2
	popax
	add $3,$a
	pop $3
	push $5
	push $6
	push $7
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call clsave,is
	cthis _check_if
	pop $6
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],dbchecknext
	cthis _check_if2
	pop $5
	jmp l3312
l3321:
	push "!="
	cmpst
	jne l3322
	spop $a
	push 2
	popax
	add $3,$a
	pop $3
	push $5
	push $6
	push $7
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call clsave,is
	neg
	cthis _check_if
	pop $6
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],dbchecknext
	cthis _check_if2
	pop $5
	jmp l3312
l3322:
	spop $a
l3312:
	push 2
	popax
	add $3,$a
	pop $3
	jmp l3310
l3311:
	push $6
	neg
	cmp0
	je l3324
	push $1
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis _goto_fi
	jmp l3323
l3324:
	push $2
l3323:
	end method
	method _goto_fi
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push _if_pos
	pop $3
l3325:
	push 1
	cmp0
	je l3326
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	spushs
	push "IF"
	cmpst
	jne l3328
	spop $a
	add $3,1
	pop $3
	jmp l3327
l3328:
	push "ELSE"
	cmpst
	jne l3329
	spop $a
	push $3
	push _if_pos
	cmpje
	cmp0
	je l3331
	push $2
	ret
l3331:
	jmp l3327
l3329:
	push "FI"
	cmpst
	jne l3332
	spop $a
	push $3
	push _if_pos
	cmpje
	cmp0
	je l3334
	sub _if_pos,1
	pop _if_pos
	push $2
	ret
	jmp l3333
l3334:
	sub $3,1
	pop $3
l3333:
	jmp l3327
l3332:
	spop $a
l3327:
	add $2,1
	pop $2
	jmp l3325
l3326:
	end method
	method _check_if2
	localstring $1
	pop $1
	push $1
	spushs
	push "|"
	cmpst
	jne l3336
	spop $a
	push 1
	jmp l3335
l3336:
	push "&"
	cmpst
	jne l3337
	spop $a
	push 2
	jmp l3335
l3337:
	spop $a
	push 0
l3335:
	end method
	method _check_if
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push 1
	cmpst
	jne l3339
	spop $a
	push $2
	cmp0
	jne l3341
	push $3
	jmp l3342
l3340:
	push 0
	jmp l3342
l3341:
	push 1
l3342:
	jmp l3338
l3339:
	push 2
	cmpst
	jne l3343
	spop $a
	push $2
	cmp0
	je l3344
	push $3
	jmp l3346
l3344:
	push 0
	jmp l3346
l3345:
	push 1
l3346:
	jmp l3338
l3343:
	spop $a
	push $3
l3338:
	end method
	method behrewind
	push sactbeh
	push "null"
	cmpjne
	cmp0
	je l3348
	push sactbeh
	spushs
	spop $a
	call [$a],rewind
l3348:
	end method
	method behplaying
	push sactbeh
	push "null"
	cmpjne
	ret
	end method
	method behexist
	localstring $1
	pop $1
	push $1
	cthis getbeh
	call engine,varexist
	ret
	end method
	method getbeh
	localstring $1
	pop $1
	push _sbeh
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method newbehname
	localstring $1
	push _sbeh
	push "_"
	pop $b
	popax
	add $a,$b
	push iidbeh
	pop $b
	popax
	add $a,$b
	pop $1
	add iidbeh,1
	pop iidbeh
	push $1
	ret
	end method
	method newbeh
	localstring $1
	cthis newbehname
	pop $1
	push $1
	spushs
	spop $e
	new classbehhero,[$e]
	push $1
	ret
	end method
	method _checkvol
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],dbchecknext
	push "-v"
	cmpje
	cmp0
	je l3350
	push 2
	popax
	add $3,$a
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	ret
	jmp l3349
l3350:
	push 100
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	ret
l3349:
	end method
	method loadbeh
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $9
	localstring $10
	localstring $11
	localstring $12
	localint $13
	push $5
	spushs
	spop $a
	call [$a],getblock
	pop $13
	localint $14
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	cthis newbeh
	pop $10
	localint $15
	localint $16
	push $9
	spushs
	push "IF"
	cmpst
	je l3353
	push "ELIF"
	cmpst
	je l3353
	jmp l3352
l3353:
	spop $a
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $15
l3354:
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	push ")"
	cmpjne
	cmp0
	je l3355
	add $4,1
	pop $4
	jmp l3354
l3355:
	push $10
	spushs
	push "setas"
	push $9
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	push $15
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	add $4,1
	pop $4
	jmp l3351
l3352:
	push "FI"
	cmpst
	je l3357
	push "ELSE"
	cmpst
	je l3357
	jmp l3356
l3357:
	spop $a
	push $10
	spushs
	push $9
	spop $a
	call [$a],setas
	jmp l3351
l3356:
	push "call:"
	cmpst
	jne l3358
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $1
	push "script"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setascaller
	jmp l3351
l3358:
	push "walk:"
	cmpst
	jne l3359
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	add $4,1
	pop $4
	push $10
	spushs
	push _spathpref
	push $9
	pop $b
	popax
	add $a,$b
	push $11
	push $12
	spop $a
	call [$a],setaswalker
	jmp l3351
l3359:
	push "turn:"
	cmpst
	jne l3360
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push _spathpref
	push $9
	pop $b
	popax
	add $a,$b
	push $11
	spop $a
	call [$a],setasturn
	jmp l3351
l3360:
	push "setpos:"
	cmpst
	jne l3361
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $16
	push 0
	pop $15
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],dbchecknext
	pop $12
	push $12
	push "-ssc"
	cmpje
	cmp0
	je l3363
	push 1
	pop $15
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],dbchecknext
	pop $12
l3363:
	push $12
	push "-dir"
	cmpje
	cmp0
	je l3365
	push 2
	popax
	add $4,$a
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	jmp l3364
l3365:
	push "auto"
	pop $12
l3364:
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	push $16
	push $15
	push $12
	spop $a
	call [$a],setasposer
	jmp l3351
l3361:
	push "game:"
	cmpst
	jne l3366
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $9
	spushs
	push "-def"
	cmpst
	je l3369
	push "-adv"
	cmpst
	je l3369
	jmp l3368
l3369:
	spop $a
	push $10
	spushs
	push $9
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],get
	spop $a
	call [$a],setasnewgamer
	push 2
	popax
	add $4,$a
	pop $4
	jmp l3367
l3368:
	spop $a
	push $10
	spushs
	push "null"
	push "null"
	push $9
	spop $a
	call [$a],setasnewgamer
l3367:
	jmp l3351
l3366:
	push "ref:"
	cmpst
	jne l3370
	spop $a
	push "_"
	push iidbeh
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $4
	cthis buildbeh
	pop $4
	cthis newbehname
	pop $9
	push $10
	spushs
	push _sbeh
	call $9,strsubbs
	push $1
	push "script"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setascaller
	jmp l3351
l3370:
	push "anplay:"
	cmpst
	jne l3371
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setasanplayer
	jmp l3351
l3371:
	push "anorder:"
	cmpst
	jne l3372
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $1
	push $2
	push $4
	push $11
	spop $a
	call [$a],setasanorder
	push $1
	push $2
	push $4
	push "null"
	cthis analizeaninstr
	pop $4
	jmp l3351
l3372:
	push "sndbg:"
	cmpst
	jne l3373
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	push $1
	push $2
	push $4
	cthis _checkvol
	pop $4
	pop $15
	push $10
	spushs
	push SNDPATH
	push $9
	pop $b
	popax
	add $a,$b
	push $15
	spop $a
	call [$a],setassndbg
	jmp l3351
l3373:
	push "sndplay:"
	cmpst
	jne l3374
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	push $1
	push $2
	push $4
	cthis _checkvol
	pop $4
	pop $15
	push $10
	spushs
	push SNDPATH
	push $9
	pop $b
	popax
	add $a,$b
	push $15
	spop $a
	call [$a],setassndplayer
	jmp l3351
l3374:
	push "fxplay:"
	cmpst
	jne l3375
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	push $1
	push $2
	push $4
	cthis _checkvol
	pop $4
	pop $15
	push $10
	spushs
	push SFXPATH
	push $9
	pop $b
	popax
	add $a,$b
	push $15
	spop $a
	call [$a],setassndplayer
	jmp l3351
l3375:
	push "fxbg:"
	cmpst
	jne l3376
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	push $1
	push $2
	push $4
	cthis _checkvol
	pop $4
	pop $15
	push $10
	spushs
	push SFXPATH
	push $11
	pop $b
	popax
	add $a,$b
	push $15
	spop $a
	call [$a],setassndbg
	jmp l3351
l3376:
	push "wait:"
	cmpst
	jne l3377
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $15
	add $4,1
	pop $4
	push $10
	spushs
	push $15
	spop $a
	call [$a],setaswaiter
	jmp l3351
l3377:
	push "read:"
	cmpst
	jne l3378
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $15
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $16
	add $4,1
	pop $4
	push "auto"
	pop $11
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	push $4
	cmpja
	cmp0
	je l3380
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	push $11
	push "-dir"
	cmpje
	cmp0
	je l3382
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
l3382:
l3380:
	push $10
	spushs
	push $9
	push $15
	push $16
	push $11
	spop $a
	call [$a],setasreader
	jmp l3351
l3378:
	push "met:"
	cmpst
	jne l3383
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	call gameapi,getgamename
	pop $12
	push "."
	call $9,contains
	cmp0
	je l3385
	push "."
	call $9,strgetto
	pop $11
	push "."
	call $9,strgetfrom
	pop $9
	push $11
	push ""
	cmpje
	cmp0
	jne l3388
	push $11
	push "this"
	cmpje
	jmp l3389
l3387:
	push 0
	jmp l3389
l3388:
	push 1
l3389:
	cmp0
	je l3390
	push $12
	pop $11
l3390:
	jmp l3384
l3385:
	push $12
	pop $11
l3384:
	push $1
	spushs
	push $2
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],dbchecknext
	pop $12
	push $12
	push "("
	cmpje
	cmp0
	je l3392
	add $4,1
	pop $4
	push $4
	pop $15
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	add $4,1
	pop $4
l3393:
	push $12
	push ")"
	cmpjne
	cmp0
	je l3394
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	add $4,1
	pop $4
	jmp l3393
l3394:
	jmp l3391
l3392:
	push 1
	popax
	sub 0,$a
	pop $15
l3391:
	push $10
	spushs
	push $11
	push $9
	push $1
	push $2
	push $15
	spop $a
	call [$a],setasmet
	jmp l3351
l3383:
	push "bsave:"
	cmpst
	jne l3395
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push "1"
	spop $a
	call [$a],setassaver
	jmp l3351
l3395:
	push "save:"
	cmpst
	jne l3396
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setassaver
	jmp l3351
l3396:
	push "script:"
	cmpst
	jne l3397
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setasscript
	jmp l3351
l3397:
	push "func:"
	cmpst
	jne l3398
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	call clcbeh,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $16
l3399:
	push $16
	push 0
	cmpjae
	cmp0
	je l3400
	jmp l3402
l3401:
	sub $16,1
	pop $16
	jmp l3399
l3402:
	push $16
	call clcbeh,getid
	push "script"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	spushs
	push $11
	spop $a
	call [$a],containsfun
	cmp0
	je l3404
	push 1
	popax
	sub 0,$a
	pop $16
l3404:
	jmp l3401
l3400:
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],dbchecknext
	push "("
	cmpje
	cmp0
	je l3406
	push $4
	push 2
	pop $b
	popax
	add $a,$b
	pop $16
l3407:
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	push ")"
	cmpjne
	cmp0
	je l3408
	add $4,1
	pop $4
	jmp l3407
l3408:
	jmp l3405
l3406:
	push 1
	popax
	sub 0,$a
	pop $16
l3405:
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	push $1
	push $2
	push $16
	spop $a
	call [$a],setasscript
	jmp l3351
l3398:
	push "use:"
	cmpst
	jne l3409
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	spop $a
	call [$a],setasuse
	jmp l3351
l3409:
	push "topck:"
	cmpst
	jne l3410
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],dbchecknext
	push "-pck"
	cmpje
	cmp0
	je l3412
	push 2
	popax
	add $4,$a
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	jmp l3411
l3412:
	push $11
	pop $12
l3411:
	add $4,1
	pop $4
	push $10
	spushs
	push $11
	push $12
	spop $a
	call [$a],setastopck
	jmp l3351
l3410:
	push "enter:"
	cmpst
	jne l3413
	spop $a
	push $10
	spushs
	spop $a
	call [$a],setasenter
	jmp l3351
l3413:
	push "close:"
	cmpst
	jne l3414
	spop $a
	push $10
	spushs
	spop $a
	call [$a],setasclose
	jmp l3351
l3414:
	push "music:"
	cmpst
	jne l3415
	spop $a
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $16
l3416:
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	push ")"
	cmpjne
	cmp0
	je l3417
	add $4,1
	pop $4
	jmp l3416
l3417:
	push $10
	spushs
	push $1
	push $2
	push $16
	push $4
	spop $a
	call [$a],setasmusic
	add $4,1
	pop $4
	jmp l3351
l3415:
	spop $a
	push $9
	push $10
	push $1
	push $2
	push $4
	cthis subloadbeh
	pop $16
	push $16
	push $4
	cmpjae
	cmp0
	je l3419
	push $16
	pop $4
	jmp l3418
l3419:
	push "_"
	call $9,strgetto
	pop $12
	push $12
	cthis getheroloader
	pop $11
	push $11
	push "null"
	cmpje
	cmp0
	je l3421
	push igmdebug
	cmp0
	je l3423
	push $10
	push ": "
	pop $b
	popax
	add $a,$b
	push $9
	pop $b
	popax
	add $a,$b
	push " loadbeh error: no hero linked to "
	pop $b
	popax
	add $a,$b
	push $12
	pop $b
	popax
	add $a,$b
	call engine,print
l3423:
	push $10
	push $3
	ret
	jmp l3420
l3421:
	localint $17
	localint $18
	push $11
	spushs
	spop $a
	call [$a],getstartstop
	pop $18
	pop $17
	localstring $19
	push "auto"
	pop $19
	localstring $20
	push "_stalk"
	call modadv,varget
	pop $20
	localint $21
	push 1
	pop $21
	push $4
	push $3
	cmpjl
	pop $14
l3424:
	push $14
	cmp0
	je l3425
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	add $4,1
	pop $4
	push $12
	spushs
	push "-stt"
	cmpst
	jne l3427
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $17
	add $4,1
	pop $4
	jmp l3426
l3427:
	push "-stp"
	cmpst
	jne l3428
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $18
	add $4,1
	pop $4
	jmp l3426
l3428:
	push "-base"
	cmpst
	jne l3429
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $20
	add $4,1
	pop $4
	jmp l3426
l3429:
	push "-r"
	cmpst
	jne l3430
	spop $a
	push 1
	pop $21
	jmp l3426
l3430:
	push "-nr"
	cmpst
	jne l3431
	spop $a
	push 0
	pop $21
	jmp l3426
l3431:
	push "-dir"
	cmpst
	jne l3432
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $19
	add $4,1
	pop $4
	jmp l3426
l3432:
	spop $a
	push 0
	pop $14
	sub $4,1
	pop $4
l3426:
	push $14
	cmp0
	je l3434
	push $4
	push $3
	cmpjae
	jmp l3436
l3434:
	push 0
	jmp l3436
l3435:
	push 1
l3436:
	cmp0
	je l3437
	push 0
	pop $14
l3437:
	jmp l3424
l3425:
	push $10
	spushs
	push $11
	spushs
	push "sanhero"
	spop $a
	call [$a],varget
	push SNDPATH
	push $9
	pop $b
	popax
	add $a,$b
	push $20
	push $21
	push $17
	push $18
	push $19
	spop $a
	call [$a],setastalker
l3420:
l3418:
l3351:
	push $5
	spushs
	push $10
	spop $a
	call [$a],addtostarter
	push $7
	push 0
	cmpje
	cmp0
	je l3439
	push $6
	spushs
	push $10
	spop $a
	call [$a],setflags
	push $10
	spushs
	push $5
	push $13
	push $8
	spop $a
	call [$a],addflags
	jmp l3438
l3439:
	push $6
	spushs
	push "null"
	spop $a
	call [$a],setflags
	push $10
	spushs
	push $5
	push $13
	push 0
	spop $a
	call [$a],addflags
l3438:
	push $10
	push $4
	ret
	end method
	method subloadbeh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	end method
	method buildbeh
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	call dbmacros,findbyrow
	pop $5
	push $5
	push 0
	cmpjl
	cmp0
	je l3441
	push "no such macro: "
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call engine,print
	push 1
	popax
	sub 0,$a
	ret
l3441:
l3442:
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	push "("
	cmpjne
	cmp0
	je l3443
	add $4,1
	pop $4
	jmp l3442
l3443:
	add $4,1
	pop $4
	localint $6
	push $2
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	localstring $7
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	call _vecarg,free
l3444:
	push $7
	push ")"
	cmpjne
	cmp0
	je l3445
	push $7
	call _vecarg,add
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	jmp l3444
l3445:
	localint $8
	push $5
	call dbmacros,getcolsno
	pop $8
	localint $9
	push $2
	spushs
	push $6
	push $1
	spop $a
	call [$a],add
	localint $10
	push 1
	pop $10
l3446:
	push $10
	push $8
	cmpjl
	cmp0
	je l3447
	jmp l3449
l3448:
	add $10,1
	pop $10
	jmp l3446
l3449:
	push $5
	push $10
	call dbmacros,get
	pop $7
	push 0
	push 1
	call $7,getb
	push "$"
	cmpje
	cmp0
	je l3451
	push 1
	push 10
	call $7,getb
	pop $9
	push $2
	spushs
	push $6
	push $9
	push 1
	pop $b
	popax
	sub $a,$b
	call _vecarg,get
	spop $a
	call [$a],add
	jmp l3450
l3451:
	push $2
	spushs
	push $6
	push $7
	spop $a
	call [$a],add
l3450:
	jmp l3448
l3447:
	push $4
	ret
	end method
	method loadbehaviours
	localstring $1
	pop $1
	localstring $2
	call clcbeh,get
	pop $2
	push $2
	spushs
	spop $e
	new db,[$e]
	push $2
	spushs
	push $1
	cthis getpath
	spop $a
	call [$a],loadbeh
	localstring $3
	push $2
	push "script"
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push $2
	spop $e
	new Script,[$e]
	localint $4
	localint $5
	localstring $6
	localstring $7
	localstring $8
	localstring $9
	localint $10
	localint $11
	localstring $12
	localint $13
	localint $14
	localint $15
	localint $16
	localstring $17
	localstring $18
	localint $19
	push 0
	pop $19
l3452:
	push $19
	push $2
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l3453
	jmp l3455
l3454:
	add $19,1
	pop $19
	jmp l3452
l3455:
	push 0
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $6
	add $5,1
	pop $5
	push $6
	spushs
	push "macro:"
	cmpst
	jne l3457
	spop $a
	push $2
	push $19
	push 1
	call dbmacros,dbaddrowfrom
	jmp l3456
l3457:
	push "include:"
	cmpst
	jne l3458
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	cthis loadbehaviours
	add $5,1
	pop $5
	jmp l3456
l3458:
	push "build:"
	cmpst
	jne l3459
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	push $2
	push $19
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	cthis buildbeh
	pop $5
	jmp l3456
l3459:
	push "func"
	cmpst
	jne l3460
	spop $a
l3461:
	push $2
	spushs
	push $19
	push 0
	spop $a
	call [$a],get
	push "end"
	cmpjne
	cmp0
	je l3462
	add $19,1
	pop $19
	jmp l3461
l3462:
	jmp l3456
l3460:
	push "IF"
	cmpst
	jne l3463
	spop $a
	add _if_pos,1
	pop _if_pos
	push $2
	push $19
	push $5
	push $2
	spushs
	push $19
	spop $a
	call [$a],getcolsno
	cthis _found_if
	pop $19
	jmp l3456
l3463:
	push "ELSE"
	cmpst
	jne l3464
	spop $a
	push $2
	push $19
	push 1
	pop $b
	popax
	add $a,$b
	cthis _goto_fi
	pop $19
	jmp l3456
l3464:
	push "FI"
	cmpst
	jne l3465
	spop $a
	sub _if_pos,1
	pop _if_pos
	push _if_pos
	push 1
	popax
	sub 0,$a
	cmpjl
	cmp0
	je l3467
	push "FI error! "
	cthis getname
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	cthis methodname
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
l3467:
	jmp l3456
l3465:
	spop $a
	push $2
	spushs
	push $19
	spop $a
	call [$a],getcolsno
	pop $4
	push $6
	cthis getbeh
	pop $6
	push $6
	spushs
	spop $e
	new classbehhero,[$e]
	push 0
	pop $10
	push 1
	pop $11
	push "null"
	pop $12
	push 0
	pop $13
	push 1
	pop $14
	push "null"
	pop $18
	push 1
	popax
	sub 0,$a
	pop $16
	push 0
	pop $15
l3468:
	push $11
	cmp0
	je l3469
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $7
	spushs
	push "-nr"
	cmpst
	jne l3471
	spop $a
	push 0
	pop $10
	jmp l3470
l3471:
	push "-once"
	cmpst
	jne l3472
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $12
	add $5,1
	pop $5
	jmp l3470
l3472:
	push "-par"
	cmpst
	jne l3473
	spop $a
	push 1
	pop $13
	jmp l3470
l3473:
	push "-r"
	cmpst
	jne l3474
	spop $a
	push 1
	pop $10
	jmp l3470
l3474:
	push "-nb"
	cmpst
	jne l3475
	spop $a
	push 0
	pop $14
	jmp l3470
l3475:
	push "-b"
	cmpst
	jne l3476
	spop $a
	push 1
	pop $14
	jmp l3470
l3476:
	push "-en"
	cmpst
	jne l3477
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	jmp l3470
l3477:
	push "-bif"
	cmpst
	jne l3478
	spop $a
	push 1
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push 1
	pop $18
	jmp l3470
l3478:
	push "-bnif"
	cmpst
	jne l3479
	spop $a
	push 0
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push 1
	pop $18
	jmp l3470
l3479:
	push "-if"
	cmpst
	jne l3480
	spop $a
	push 1
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $18
	add $5,1
	pop $5
	jmp l3470
l3480:
	push "-nif"
	cmpst
	jne l3481
	spop $a
	push 0
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $18
	add $5,1
	pop $5
	jmp l3470
l3481:
	spop $a
	push 0
	pop $11
	push $6
	spushs
	push $12
	push $10
	push $13
	push $14
	push $15
	push $16
	push $17
	push $18
	spop $a
	call [$a],setasstarter
	sub $5,1
	pop $5
	push $6
	pop $7
l3482:
	push $5
	push $4
	cmpjl
	cmp0
	je l3483
	push $2
	push $19
	push $4
	push $5
	push $6
	push $7
	push $10
	push $13
	cthis loadbeh
	pop $5
	pop $7
	jmp l3482
l3483:
l3470:
	jmp l3468
l3469:
l3456:
	jmp l3454
l3453:
	push $2
	spushs
	spop $a
	call [$a],readonly
	end method
	method analizeaninstr
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 1
	pop $5
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjae
	cmp0
	je l3485
	push 0
	pop $5
l3485:
	localint $6
	push 0
	pop $6
	push $4
	push "null"
	cmpjne
	cmp0
	je l3487
	push 1
	pop $6
	push $4
	cthis advanstand
l3487:
	localint $7
	localint $8
	localint $9
	localstring $10
	localstring $11
	localreal $12
	localreal $13
	localreal $14
l3488:
	push $5
	cmp0
	je l3489
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $11
	spushs
	push "-z"
	cmpst
	jne l3491
	spop $a
	push $6
	cmp0
	je l3493
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	push $10
	clparent StringChecker,isdigit
	cmp0
	je l3495
	push $4
	spushs
	push $10
	spop $a
	call [$a],setz
	jmp l3494
l3495:
	push $4
	spushs
	push $10
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],setz
l3494:
l3493:
	add $3,1
	pop $3
	jmp l3490
l3491:
	push "-pos"
	cmpst
	jne l3496
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $6
	cmp0
	je l3498
	push $10
	push "-id"
	cmpje
	cmp0
	je l3500
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $9
	spop $a
	call [$a],getbyname
	pop $7
	push $10
	spushs
	push $7
	spop $a
	call [$a],getxver
	push $10
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $8
	push $10
	spushs
	push $7
	spop $a
	call [$a],getyver
	push $10
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $9
	jmp l3499
l3500:
	push rgmscalex
	call $10,to_i
	pop $b
	popax
	mul $a,$b
	pop $8
	push rgmscaley
	push $9
	pop $b
	popax
	mul $a,$b
	pop $9
l3499:
	push $4
	spushs
	push $8
	push $9
	spop $a
	call [$a],setpos
l3498:
	jmp l3490
l3496:
	push "-move"
	cmpst
	jne l3501
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $6
	cmp0
	je l3503
	push $4
	spushs
	push rgmscalex
	push $8
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $9
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],move
l3503:
	jmp l3490
l3501:
	push "-putgr"
	cmpst
	jne l3504
	spop $a
	push $6
	cmp0
	je l3506
	push $4
	spushs
	spop $a
	call [$a],anputgr
l3506:
	jmp l3490
l3504:
	push "-vis"
	cmpst
	jne l3507
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l3509
	push $7
	push 0
	cmpje
	cmp0
	je l3511
	push $4
	spushs
	spop $a
	call [$a],hide
	jmp l3510
l3511:
	push $4
	spushs
	spop $a
	call [$a],show
l3510:
l3509:
	jmp l3490
l3507:
	push "-show"
	cmpst
	jne l3512
	spop $a
	push $6
	cmp0
	je l3514
	push $4
	spushs
	spop $a
	call [$a],show
l3514:
	jmp l3490
l3512:
	push "-hide"
	cmpst
	jne l3515
	spop $a
	push $6
	cmp0
	je l3517
	push $4
	spushs
	spop $a
	call [$a],hide
l3517:
	jmp l3490
l3515:
	push "-dir"
	cmpst
	jne l3518
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l3520
	push $4
	spushs
	spop $a
	call [$a],actionname
	pop $11
	push $4
	spushs
	spop $a
	call [$a],framenr
	pop $7
	push $4
	spushs
	push 2
	call $11,strsube
	push $10
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],setframe
l3520:
	jmp l3490
l3518:
	push "-play"
	cmpst
	je l3522
	push "-smplay"
	cmpst
	je l3522
	jmp l3521
l3522:
	spop $a
	push $6
	cmp0
	je l3524
	push $11
	push "-play"
	cmpje
	cmp0
	je l3526
	push "play"
	jmp l3525
l3526:
	push "playsmooth"
l3525:
	pop $10
	push $4
	spushs
	push $10
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $d
	spop $a
	call [$a],[$d]
l3524:
	add $3,1
	pop $3
	jmp l3490
l3521:
	push "-nplay"
	cmpst
	je l3528
	push "-nsmplay"
	cmpst
	je l3528
	jmp l3527
l3528:
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l3530
	push $11
	push "-nplay"
	cmpje
	cmp0
	je l3532
	push "play"
	jmp l3531
l3532:
	push "playsmooth"
l3531:
	pop $10
	push $4
	spushs
	spop $a
	call [$a],gettype
	push "anima"
	cmpje
	cmp0
	je l3534
	push $4
	spushs
	push $10
	spushs
	push $7
	spop $d
	spop $a
	call [$a],[$d]
	jmp l3533
l3534:
	push $4
	spushs
	push $7
	spop $a
	call [$a],nplay
l3533:
l3530:
	jmp l3490
l3527:
	push "-nplayif"
	cmpst
	jne l3535
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l3537
	push $4
	spushs
	push $7
	spop $a
	call [$a],anplayif
l3537:
	jmp l3490
l3535:
	push "-conplay"
	cmpst
	jne l3538
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l3540
	push $4
	spushs
	spop $a
	call [$a],framenr
	pop $8
	push $4
	spushs
	push $7
	spop $a
	call [$a],play
	push $4
	spushs
	push 1
	popax
	sub 0,$a
	push $8
	spop $a
	call [$a],setframe
l3540:
	jmp l3490
l3538:
	push "-lplay"
	cmpst
	jne l3541
	spop $a
	push $6
	cmp0
	je l3543
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],anloopsplay
l3543:
	add $3,1
	pop $3
	jmp l3490
l3541:
	push "-bgr"
	cmpst
	jne l3544
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $6
	cmp0
	je l3546
	push $11
	spushs
	push $4
	spop $a
	call [$a],add
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	call engine,varexist
	cmp0
	je l3548
	push $11
	spushs
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l3548:
l3546:
	jmp l3490
l3544:
	push "-sc"
	cmpst
	jne l3549
	spop $a
	push $6
	cmp0
	je l3551
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	call engine,varexist
	cmp0
	je l3553
	push $11
	spushs
	spop $a
	call [$a],scalean
l3553:
l3551:
	jmp l3490
l3549:
	push "-ssc"
	cmpst
	jne l3554
	spop $a
	push $6
	cmp0
	je l3556
	call clcamera,setscene
l3556:
	jmp l3490
l3554:
	push "-actor"
	cmpst
	jne l3557
	spop $a
	push $6
	cmp0
	je l3559
	push $4
	call clcamera,setactor
l3559:
	jmp l3490
l3557:
	push "-mhero"
	cmpst
	jne l3560
	spop $a
	push $6
	cmp0
	je l3562
	push $4
	cthis setmainhero
l3562:
	jmp l3490
l3560:
	push "-puty"
	cmpst
	jne l3563
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l3565
	push $10
	push "resy"
	cmpje
	cmp0
	je l3567
	push $4
	spushs
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],anputy
	jmp l3566
l3567:
	push $4
	spushs
	push $10
	spop $a
	call [$a],anputy
l3566:
l3565:
	jmp l3490
l3563:
	push "-stopf"
	cmpst
	jne l3568
	spop $a
	push $6
	cmp0
	je l3570
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l3570:
	jmp l3490
l3568:
	push "-stoph"
	cmpst
	jne l3571
	spop $a
	push $6
	cmp0
	je l3573
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
	push $4
	spushs
	spop $a
	call [$a],hide
l3573:
	jmp l3490
l3571:
	push "-setaction"
	cmpst
	jne l3574
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l3576
	push $10
	clparent StringChecker,isdigit
	cmp0
	je l3578
	push $4
	spushs
	call $10,to_i
	push 0
	spop $a
	call [$a],setframe
	jmp l3577
l3578:
	push $4
	spushs
	push $10
	push 0
	spop $a
	call [$a],setframe
l3577:
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l3576:
	jmp l3490
l3574:
	push "-setframe"
	cmpst
	jne l3579
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $6
	cmp0
	je l3581
	push $11
	push "-act"
	cmpje
	cmp0
	je l3583
	cthis framenr
	jmp l3582
l3583:
	push $11
l3582:
	pop $7
	push $10
	clparent StringChecker,isdigit
	cmp0
	je l3585
	push $4
	spushs
	call $10,to_i
	push $7
	spop $a
	call [$a],setframe
	jmp l3584
l3585:
	push $4
	spushs
	push $10
	push $7
	spop $a
	call [$a],setframe
l3584:
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l3581:
	jmp l3490
l3579:
	push "-randfr"
	cmpst
	jne l3586
	spop $a
	push $6
	cmp0
	je l3588
	push $4
	spushs
	spop $a
	call [$a],ansetrandfr
l3588:
	jmp l3490
l3586:
	push "-stand"
	cmpst
	jne l3589
	spop $a
	push $6
	cmp0
	je l3591
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setstandbase
l3591:
	add $3,1
	pop $3
	jmp l3490
l3589:
	push "-delay"
	cmpst
	jne l3592
	spop $a
	push $6
	cmp0
	je l3594
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setdelay
l3594:
	add $3,1
	pop $3
	jmp l3490
l3592:
	push "-step"
	cmpst
	jne l3595
	spop $a
	push $6
	cmp0
	je l3597
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setanstep
l3597:
	add $3,1
	pop $3
	jmp l3490
l3595:
	push "-sb1"
	cmpst
	jne l3598
	spop $a
	push $6
	cmp0
	je l3600
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase1
l3600:
	add $3,1
	pop $3
	jmp l3490
l3598:
	push "-sb2"
	cmpst
	jne l3601
	spop $a
	push $6
	cmp0
	je l3603
	push $4
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase2
l3603:
	add $3,1
	pop $3
	jmp l3490
l3601:
	push "-lineardodge"
	cmpst
	jne l3604
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l3606
	push "_ft"
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	cthis hasvar
	neg
	cmp0
	je l3608
	push $11
	spushs
	spop $e
	new filter,[$e]
	push $11
	spushs
	push $4
	spop $a
	call [$a],link
l3608:
	push $11
	spushs
	push $10
	spop $a
	call [$a],lineardodge
l3606:
	jmp l3490
l3604:
	push "-drawmode"
	cmpst
	jne l3609
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l3611
	push $10
	push "lineardodge"
	cmpje
	cmp0
	je l3613
	push $4
	spushs
	push 1
	spop $a
	call [$a],setdrawmode
l3613:
l3611:
	jmp l3490
l3609:
	push "-anmover"
	cmpst
	jne l3614
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $10
	push "-loop"
	cmpje
	cmp0
	je l3616
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $12
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $13
	add $3,1
	pop $3
	push 1
	pop $9
	jmp l3615
l3616:
	push $10
	pop $12
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $13
	add $3,1
	pop $3
	push 0
	pop $9
l3615:
	push $6
	cmp0
	je l3618
	push $4
	push $12
	push $13
	clparent SetAnMover,setas
	push $9
	cmp0
	je l3620
	push $4
	spushs
	spop $a
	call [$a],sam_copy
l3620:
	push $4
	spushs
	spop $a
	call [$a],sam_addtimer
	push $4
	spushs
	spop $a
	call [$a],sam_playtimer
l3618:
	jmp l3490
l3614:
	push "-hideonstart"
	cmpst
	jne l3621
	spop $a
	push $6
	cmp0
	je l3623
	push $4
	spushs
	spop $a
	call [$a],anhideonsetframe
l3623:
	jmp l3490
l3621:
	push "-transparency"
	cmpst
	jne l3624
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l3626
	push $4
	spushs
	push $10
	spop $a
	call [$a],transparency
l3626:
	jmp l3490
l3624:
	push "-roto"
	cmpst
	jne l3627
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $13
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $12
	add $3,1
	pop $3
	localreal $15
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $15
	add $3,1
	pop $3
	localint $16
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $16
	add $3,1
	pop $3
	push $6
	cmp0
	je l3629
	push $4
	spushs
	spop $a
	call [$a],getpx
	pop $7
	push $4
	spushs
	spop $a
	call [$a],getpy
	pop $8
	push $4
	spushs
	push 1
	push 0
	spop $a
	call [$a],setframe
	push $4
	spushs
	push $7
	push $8
	spop $a
	call [$a],ansetbpos
	push "_ft"
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	cthis hasvar
	neg
	cmp0
	je l3631
	push $11
	spushs
	spop $e
	new filter,[$e]
	push $11
	spushs
	push $4
	spop $a
	call [$a],link
	push $11
	spushs
	push 2
	spop $a
	call [$a],setpivottype
	push $11
	spushs
	push 1
	spop $a
	call [$a],setsmooth
l3631:
	push "_tim"
	push $4
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	push "classadvcontroller5"
	cthis cycle=
	push $10
	spushs
	push $16
	spop $a
	call [$a],setcycle
	push $10
	spushs
	push A
	push "san"
	push $4
	push "ftsan"
	push $11
	push "mkat"
	push $12
	push "pkat"
	push $13
	push "speed"
	push $15
	spop $a
	call [$a],vars2
	push $10
	spushs
	spop $a
	call [$a],play
l3629:
	jmp l3490
l3627:
	push "-opacityframe"
	cmpst
	jne l3642
	spop $a
	push $6
	cmp0
	je l3644
	push $4
	spushs
	spop $a
	call [$a],anopacityframe
l3644:
	jmp l3490
l3642:
	spop $a
	push $3
	pop $7
	push $4
	push $1
	push $2
	push $3
	push $11
	cthis subanalizeaninstr
	pop $3
	push $7
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	cmpje
	cmp0
	je l3646
	push 0
	pop $5
l3646:
l3490:
	push $5
	cmp0
	je l3648
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjae
	jmp l3650
l3648:
	push 0
	jmp l3650
l3649:
	push 1
l3650:
	cmp0
	je l3651
	push 0
	pop $5
l3651:
	jmp l3488
l3489:
	push $3
	ret
	end method
	method classadvcontroller5
	localreal $1
	push pkat
	push mkat
	pop $b
	popax
	sub $a,$b
	pop $1
	localreal $2
	push 1.0
	pop $2
	localreal $3
	push ftsan
	spushs
	spop $a
	call [$a],getangle
	pop $3
	push speed
	push 0.0
	cmpjl
	cmp0
	je l3633
	push $3
	push mkat
	cmpjle
	cmp0
	je l3635
	push speed
	popax
	sub 0,$a
	pop speed
l3635:
	push $3
	push mkat
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	pop $3
	jmp l3632
l3633:
	push $3
	push pkat
	cmpjae
	cmp0
	je l3637
	push speed
	popax
	sub 0,$a
	pop speed
l3637:
	push pkat
	push $3
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	pop $3
l3632:
	push 0.1
	call $3,_rin1
	cmp0
	je l3639
	push 0.4
	pop $2
	jmp l3638
l3639:
	push 0.2
	call $3,_rin1
	cmp0
	je l3641
	push 0.8
	pop $2
l3641:
l3638:
	push ftsan
	spushs
	push $2
	push speed
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],rotate
	cthis play
	end method
	method _rin1
	localreal $1
	pop $1
	cthis get
	push $1
	cmpjl
	cmp0
	jne l3653
	cthis get
	push 1.0
	push $1
	pop $b
	popax
	sub $a,$b
	cmpja
	jmp l3654
l3652:
	push 0
	jmp l3654
l3653:
	push 1
l3654:
	end method
	method subanalizeaninstr
	localstring $1
	localstring $2
	localint $3
	localint $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	end method
	method cadvherofinish
	end method
	method butmoveoff
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],moveoff
	push $1
	spushs
	spop $a
	call [$a],getbutname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis behplaying
	neg
	cmp0
	je l3656
	push "beh_"
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	cthis playbehif
	neg
	pop _b_rewind
l3656:
	end method
	method butmoveon
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],moveon
	push $1
	spushs
	spop $a
	call [$a],getbutname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis behplaying
	neg
	cmp0
	je l3658
	push "beh_"
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	cthis playbehif
	neg
	pop _b_rewind
l3658:
	end method
	method advfocusedbut
	push _slastms
	end method
	method advmsmove
	cthis advgetlock
	neg
	cmp0
	je l3660
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,butisin
	pop $3
	push $3
	cmp0
	je l3662
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	push $4
	push _slastms
	cmpjne
	cmp0
	je l3664
	push _slastms
	push "null"
	cmpjne
	cmp0
	je l3666
	push _slastms
	cthis butmoveoff
l3666:
	push $4
	pop _slastms
	push $4
	cthis butmoveon
l3664:
	jmp l3661
l3662:
	push _slastms
	push "null"
	cmpjne
	cmp0
	je l3668
	push _slastms
	cthis butmoveoff
	push "null"
	pop _slastms
l3668:
l3661:
	push "onmousemove"
	push $1
	push $2
	call grmsmove,eval2
	call moddbg,msmove
l3660:
	end method
	method butclickon
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],clickon
	cthis behplaying
	neg
	cmp0
	je l3670
	push "beh_"
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	push "_LCLICK"
	pop $b
	popax
	add $a,$b
	cthis playbehif
	neg
	pop _b_rewind
l3670:
	end method
	method butrelease
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lrel
	end method
	method advmsclick
	call _tim_dbclk,isplaying
	cmp0
	je l3672
	push 2
	call clwalkq,mulspeed
	ret
	jmp l3671
l3672:
	call _tim_dbclk,play
l3671:
	push 1
	pop _b_rewind
	push bmslock
	neg
	cmp0
	je l3674
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push "preparetosort"
	push $1
	push $2
	call grbuts,eval2
	call grbuts,sortimgs
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,butisin
	pop $3
	push "endsort"
	call grbuts,eval
	push $3
	cmp0
	je l3676
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	cthis butclickon
	jmp l3675
l3676:
	localstring $4
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	call engine,varexist
	cmp0
	je l3678
	push $4
	spushs
	spop $a
	call [$a],itemhide
l3678:
	push $1
	push $2
	call clwalkq,goto
l3675:
	push "onmouselclick"
	push $1
	push $2
	call grmslclick,eval2
l3674:
	push _b_rewind
	cmp0
	je l3680
	cthis behrewind
l3680:
	call moddbg,mslclick
	end method
	method advmsrclick
	push bmslock
	neg
	cmp0
	je l3682
	push "onmouserclick"
	call mouse,getpos
	call grmsrclick,eval2
l3682:
	end method
	method advmslrel
	push bmslock
	neg
	cmp0
	je l3684
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,butisin
	pop $3
	push $3
	cmp0
	je l3686
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	cthis butrelease
l3686:
	push "onmouselrel"
	push $1
	push $2
	call grmslrel,eval2
l3684:
	call moddbg,mslrel
	end method
	method advstdstate
	push sgmstate
	push "stdadv"
	cmpje
	end method
	method advsetstdstate
	push "stdadv"
	cthis advsetstate
	end method
	method advsetstate
	localstring $1
	pop $1
	push $1
	pop sgmstate
	end method
	method mousemove
	cthis advstdstate
	cmp0
	je l3688
	cthis advmsmove
l3688:
	cthis mouse_MOVE
	end method
	method mouselclick
	cthis advstdstate
	cmp0
	je l3690
	cthis advmsclick
l3690:
	cthis mouse_LCLICK
	end method
	method mouselrel
	cthis advstdstate
	cmp0
	je l3692
	cthis advmslrel
l3692:
	cthis mouse_LREL
	end method
	method mouserclick
	cthis advstdstate
	cmp0
	je l3694
	cthis advmsrclick
l3694:
	cthis mouse_RCLICK
	end method
	method keydown
	call moddbg,dbkeydown
	cthis keyboard_KEYDOWN
	end method
	method exit
	call modadvglob,onexit
	push igmsubtitle
	cmp0
	je l3696
	call subtitle,reset
l3696:
	end method
	method onmusicfin
	call _music,play
	end method
	method sndplayobfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call __sndplay,load
	push igmsubtitle
	cmp0
	je l3698
	push "__sndplay"
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call subtitle,register
l3698:
	push $2
	call __sndplay,sob=
	push $3
	call __sndplay,sfun=
	push "__sndplay"
	cthis cbsplay
	end method
	method sndplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	push $2
	cthis sndplayobfin
	end method
	method sndplay
	localstring $1
	pop $1
	push $1
	push "null"
	push "null"
	cthis sndplayobfin
	end method
	method advsaveonstart
	push "GAME_game"
	call gameapi,getgamename
	call clsave,set
	push "GAME_sgmgame"
	push sgmgame
	call clsave,set
	push "GAME_sgmglobpath"
	push sgmglobpath
	call clsave,set
	push "GAME_sgmlastscene"
	push sgmlastscene
	call clsave,set
	push "GAME_ccs"
	call ccs,isvisible
	call clsave,set
	cthis advautosave
	end method
	method advautosave
	push "autosave.txt"
	call clsave,save
	push "autosave"
	call modadvglob,savepck
	end method
	method advautoload
	push "autosave"
	cthis _advload
	end method
	method advcacheload
	push "cache"
	cthis _advload
	end method
	method advcachesave
	push "cache"
	cthis _advsave
	end method
	method _advload
	localstring $1
	pop $1
	call modadvglob,delheros
	push $1
	call modadvglob,loadpck
	push $1
	push ".txt"
	pop $b
	popax
	add $a,$b
	call clsave,load
	push "GAME_sgmgame"
	call clsave,get
	pop sgmgame
	push "GAME_sgmglobpath"
	call clsave,get
	pop sgmglobpath
	push "GAME_sgmlastscene"
	call clsave,get
	pop sgmlastscene
	push "GAME_ccs"
	call clsave,bis
	cmp0
	je l3700
	call ccs,show
	jmp l3699
l3700:
	call ccs,hide
l3699:
	push "GAME_game"
	call clsave,get
	call gameapi,play
	end method
	method _advsave
	localstring $1
	pop $1
	push $1
	push ".txt"
	pop $b
	popax
	add $a,$b
	new classfullsave,_saver
	push "autosave.txt"
	call _saver,load
	call _saver,stdsave
	delete _saver
	new vector,_vcsave
	push "string"
	call _vcsave,type
	new vector,_vcsv2
	push "string"
	call _vcsv2,type
	push "grpck_autosave.txt"
	call _vcsave,vecload
	push "grpck_"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call _vcsave,vecsave
	localdef $2
	localint $3
	push 0
	pop $3
l3701:
	push $3
	call _vcsave,size
	cmpjl
	cmp0
	je l3702
	jmp l3704
l3703:
	add $3,1
	pop $3
	jmp l3701
l3704:
	push $3
	call _vcsave,get
	pop $2
	push $2
	push "autosave_name.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecload
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push "_name.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecsave
	push $2
	push "autosave_file.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecload
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push "_file.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecsave
	jmp l3703
l3702:
	delete _vcsave
	delete _vcsv2
	end method
	method advloadsnd
	localstring $1
	pop $1
	push "file_loaded"
	cthis hasvar
	neg
	cmp0
	je l3706
	push "file_loaded"
	push 1
	cthis var2
l3706:
	push $1
	call engine,fileexist
	cmp0
	je l3708
	push $1
	cthis load
	jmp l3707
l3708:
	push 0
	pop file_loaded
l3707:
	push igmsubtitle
	cmp0
	je l3710
	cthis getfullname
	push $1
	call subtitle,register
l3710:
	end method
	end class

	module moddbg
	parent classlocker
	method init
	clparent classlocker,init
	new string,sstate
	push "init"
	pop sstate
	new int,ilastx
	new int,ilasty
	new text,txtpos
	push 5000
	call txtpos,setz
	push 0
	push 0
	call txtpos,setpos
	push 0
	push 0
	push 64
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpos,setbkg
	new text,txtswin
	push 5000
	call txtswin,setz
	push 0
	push 0
	push 64
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtswin,setbkg
	new text,txtpod
	push 5000
	call txtpod,setz
	push 0
	push 0
	push 128
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpod,setbkg
	cthis disable
	end method
	method enable
	cthis unlock
	call txtpos,show
	call txtswin,show
	call txtpod,show
	end method
	method disable
	cthis lock
	call txtpos,hide
	call txtswin,hide
	call txtpod,hide
	end method
	method updatetxtpos
	localint $1
	localint $2
	pop $2
	pop $1
	push ""
	push $1
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtpos,set
	push $1
	call txtpos,getw
	pop $b
	popax
	sub $a,$b
	call advmouse,lodx
	pop $b
	popax
	sub $a,$b
	push $2
	call txtpos,geth
	pop $b
	popax
	sub $a,$b
	call advmouse,lody
	pop $b
	popax
	sub $a,$b
	call txtpos,setpos
	push $1
	call txtpod,getw
	pop $b
	popax
	sub $a,$b
	call advmouse,lodx
	pop $b
	popax
	sub $a,$b
	push $2
	push 2
	call txtpod,geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call advmouse,lody
	pop $b
	popax
	sub $a,$b
	call txtpod,setpos
	push $1
	push $2
	push 1
	push 1
	push 2000
	popax
	sub 0,$a
	push 2000
	call engine,getimg
	call txtpod,set
	call txtpos,getey
	push iResY
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l3712
	push 0
	push $2
	popax
	sub 0,$a
	call txtpos,move
	push 0
	push $2
	popax
	sub 0,$a
	call txtpod,move
l3712:
	call txtpod,getex
	push iResX
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l3714
	push $1
	popax
	sub 0,$a
	push 0
	call txtpos,move
	push $1
	popax
	sub 0,$a
	push 0
	call txtpod,move
l3714:
	call txtpod,getpx
	popax
	sub 0,$a
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l3716
	push $1
	push 0
	call txtpos,move
	push $1
	push 0
	call txtpod,move
l3716:
	end method
	method updateswin
	push " "
	call swinka,getposx
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	call swinka,getposy
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtswin,set
	call swinka,getposx
	push 32
	pop $b
	popax
	sub $a,$b
	call swinka,getposy
	call txtswin,setpos
	end method
	method msminit
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmmove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push ilastx
	pop $b
	popax
	sub $a,$b
	push $2
	push ilasty
	pop $b
	popax
	sub $a,$b
	call clcamera,moveplans
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmove
	cthis getlock
	cmp0
	je l3718
	ret
l3718:
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	push "msm"
	push sstate
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $d
	cthis [$d]
	push $1
	pop ilastx
	push $2
	pop ilasty
	end method
	method mslclick
	cthis getlock
	cmp0
	je l3720
	ret
l3720:
	push "space"
	call keyboard,iskeydown
	push 1
	cmpje
	cmp0
	je l3722
	push "move"
	pop sstate
l3722:
	end method
	method mslrel
	cthis getlock
	push 1
	cmpje
	cmp0
	je l3724
	ret
l3724:
	push "init"
	pop sstate
	end method
	method msrclick
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	push 0
	cmpjne
	cmp0
	je l3726
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	call $4,print
l3726:
	end method
	method dbkeydown
	push igmdebug
	neg
	cmp0
	je l3728
	ret
l3728:
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l3730
	push "l"
	call keyboard,iskey
	cmp0
	je l3732
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],advcacheload
	jmp l3731
l3732:
	push "s"
	call keyboard,iskey
	cmp0
	je l3734
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],advcachesave
	jmp l3733
l3734:
	push "b"
	call keyboard,iskey
	cmp0
	je l3736
	call gameapi,getgamename
	spushs
	push "debug/cache.bmp"
	push 1
	spop $a
	call [$a],cgetscreenshoot
l3736:
l3733:
l3731:
l3730:
	push "d"
	call keyboard,iskey
	cmp0
	je l3738
	cthis getlock
	cmp0
	je l3740
	cthis enable
	jmp l3739
l3740:
	cthis disable
l3739:
l3738:
	cthis getlock
	cmp0
	je l3742
	ret
l3742:
	push "s"
	call keyboard,iskey
	push 1
	cmpje
	cmp0
	je l3744
	cthis updateswin
l3744:
	end method
	end module

	game Tclassmenu
	method init
	new db,_dbl
	new gmobjvec,gr1
	push "bkg"
	call gr1,add
	end method
	method tload
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis setgraphpath
	push $3
	push "null"
	cmpjne
	cmp0
	je l3746
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	call _dbl,loadscript
	localint $4
	push 0
	pop $4
l3747:
	push $4
	call _dbl,getrowsno
	cmpjl
	cmp0
	je l3748
	jmp l3750
l3749:
	add $4,1
	pop $4
	jmp l3747
l3750:
	push "snd"
	push $4
	push 0
	call _dbl,get
	pop $b
	popax
	add $a,$b
	push $4
	push 1
	call _dbl,get
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsnd
	jmp l3749
l3748:
l3746:
	new classbutton,_clb
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push 10
	push "imglobcurs"
	push "gr1"
	call _clb,build2
	push "_gmbutclick"
	call _clb,clickfunc
	push "_gmbutmove"
	call _clb,movonfunc
	push "sndintro"
	call engine,varexist
	cmp0
	je l3752
	push "sndintro"
	cthis cbplay
l3752:
	end method
	method mouselclick
	push 1
	cthis cactsndstop
	end method
	method _gmbutmove
	localstring $1
	pop $1
	call sndakskermovon,play
	push "sndintro"
	call engine,varexist
	cmp0
	je l3754
	call sndintro,isplaying
	jmp l3756
l3754:
	push 0
	jmp l3756
l3755:
	push 1
l3756:
	cmp0
	je l3757
	ret
l3757:
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	call engine,varexist
	cmp0
	je l3759
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	cthis crselfplay
l3759:
	end method
	method _gmbutclick
	localstring $1
	pop $1
	push $1
	push "_BUTCLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end game

	class TMenu
	method init
	end method
	method tinit
	localstring $1
	pop $1
	push $1
	new Buttons,but1
	end method
	method mousel_click
	push 1
	cthis cactsndstop
	end method
	method but1_moveon
	localstring $1
	call but1,sobject
	pop $1
	call sndakskermovon,play
	push "sndintro"
	call engine,varexist
	cmp0
	je l3761
	call sndintro,isplaying
	jmp l3763
l3761:
	push 0
	jmp l3763
l3762:
	push 1
l3763:
	neg
	cmp0
	je l3764
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	call engine,varexist
	cmp0
	je l3766
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	cthis cbselfplay
l3766:
l3764:
	push $1
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method but1_moveoff
	call but1,sobject
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method but1_lclick
	call but1,sobject
	push "_BUTCLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class TPainter
	method init
	end method
	method tinit
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	localstring $6
	localdef $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l3768
	push $1
	clparent GameController,init
l3768:
	cthis unlock
	push $2
	push "null"
	cmpjne
	cmp0
	je l3770
	push $2
	cthis setgraphpath
l3770:
	push $3
	push "null"
	cmpjne
	cmp0
	je l3772
	push "anbkg"
	push $3
	push 0
	cthis newanima
l3772:
	push "anbrush1"
	push $4
	push 3000
	cthis newanima
	push "anbrush1"
	push "anbrush2"
	cthis copyanima
	push 0
	push 1
	call anbrush2,setframe
	call anbrush1,getz
	push 1
	pop $b
	popax
	sub $a,$b
	call anbrush2,setz
	push "anbrush1"
	clparent anima_pack,resizemethods
	push "anbrush2"
	clparent anima_pack,resizemethods
	localint $9
	localint $10
	push $7
	spushs
	push "ru"
	cmpst
	jne l3774
	spop $a
	call anbrush2,getex
	pop $9
	call anbrush2,getpy
	pop $10
	jmp l3773
l3774:
	push "rd"
	cmpst
	jne l3775
	spop $a
	call anbrush2,getex
	pop $9
	call anbrush2,getey
	pop $10
	jmp l3773
l3775:
	push "ld"
	cmpst
	jne l3776
	spop $a
	call anbrush2,getpx
	pop $9
	call anbrush2,getey
	pop $10
	jmp l3773
l3776:
	spop $a
	call anbrush2,getpx
	pop $9
	call anbrush2,getpy
	pop $10
l3773:
	push $9
	push $10
	call anbrush1,saverelpos
	push $9
	push $10
	call anbrush2,saverelpos
	call mouse,hide
	push "anfg"
	push $5
	push 100
	cthis newanima
	push "foreground"
	push 0
	call anfg,setframe
	new gmimgvec,grdraw
	push "anfg"
	push "andraw"
	push "draw"
	call anfg,actionnr
	push "grdraw"
	cthis newanframesgr
	popax
	push 10
	call grdraw,setz
	new gmimgvec,grpaleta
	push "grpaleta"
	push $6
	popax
	pop $b
	psax
	call [$b],operator<
	push 20
	call grpaleta,setz
	new int,_ibrx
	call anbrush2,getpx
	pop _ibrx
	new int,_ibry
	call anbrush2,getpy
	pop _ibry
l3777:
	push _ibrx
	push _ibry
	push 0
	push 1
	call anbrush2,isin
	neg
	cmp0
	je l3778
	add _ibrx,1
	pop _ibrx
	push _ibrx
	call anbrush2,getex
	cmpje
	cmp0
	je l3780
	call anbrush2,getpx
	pop _ibrx
	add _ibry,1
	pop _ibry
l3780:
	jmp l3777
l3778:
	call anbrush2,getpx
	popax
	sub _ibrx,$a
	pop _ibrx
	call anbrush2,getpy
	popax
	sub _ibry,$a
	pop _ibry
	clparent TPainter,tp_mouse_move
	push $8
	push "null"
	cmpjne
	cmp0
	je l3782
	new string,savefile
	push $8
	pop savefile
	new db,dbkolory
	localdef $11
	push $8
	pop $11
	push $11
	cthis saveexist
	cmp0
	je l3784
	push $11
	call dbkolory,vecload
	push "TPainter0"
	call grdraw,each
	jmp l3783
l3784:
	push "TPainter1"
	call grdraw,each
	cthis tp_savekols
l3783:
l3782:
	end method
	method TPainter0
	localdef $1
	pop $1
	push $1
	push 0
	call dbkolory,get
	push $1
	push 1
	call dbkolory,get
	push $1
	push 2
	call dbkolory,get
	push 255
	push 0
	cthis paint
	end method
	method TPainter1
	localdef $1
	pop $1
	cthis white
	push 255
	push 0
	cthis paint
	push "255 255 255"
	push " "
	call dbkolory,dbaddstringrow
	end method
	method game_exit
	call mouse,show
	clparent GameController,game_exit
	end method
	method tp_exit
	call mouse,show
	end method
	method tp_mouse_move
	call anbrush1,mssetrelpos
	call anbrush2,mssetrelpos
	end method
	method tp_mouse_lclick
	cthis getlock
	neg
	cmp0
	je l3786
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	call grdraw,isin
	cmp0
	je l3788
	call grdraw,getsfound
	spushs
	call anbrush2,getpx
	push _ibrx
	pop $b
	popax
	add $a,$b
	call anbrush2,getpy
	push _ibry
	pop $b
	popax
	add $a,$b
	call anbrush2,getrgba
	push 0
	spop $a
	call [$a],paint
	cthis onpaint
	jmp l3787
l3788:
	push $1
	push $2
	push 0
	push 1
	call grpaleta,isin
	cmp0
	je l3790
	localdef $3
	localdef $4
	localdef $5
	localdef $6
	call grpaleta,getsfound
	spushs
	push $1
	push $2
	spop $a
	call [$a],getrgba
	pop $6
	pop $5
	pop $4
	pop $3
	push 255
	pop $6
	push $3
	push $4
	push $5
	push $6
	push 0
	call anbrush2,paint
	cthis onsetbrush
l3790:
l3787:
l3786:
	end method
	method tp_savekols
	push GAME
	spushs
	push "dbkolory"
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l3792
	ret
l3792:
	push "TPainter2"
	call grdraw,each
	push savefile
	call dbkolory,vecsave
	end method
	method TPainter2
	localdef $1
	pop $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	cthis getex
	pop $6
	localint $7
	cthis getey
	pop $7
	localint $8
	cthis getpx
	pop $8
	localint $9
	cthis getpy
	pop $9
l3793:
	push $8
	push $6
	cmpjne
	cmp0
	je l3794
	push $9
	push $7
	cmpjne
	jmp l3796
l3794:
	push 0
	jmp l3796
l3795:
	push 1
l3796:
	cmp0
	je l3797
	push $8
	push $9
	push 0
	push 1
	cthis isin
	cmp0
	je l3799
	push $8
	pop $2
	push $9
	pop $3
	push $6
	pop $8
	jmp l3798
l3799:
	add $8,1
	pop $8
l3798:
	jmp l3793
l3797:
	push $2
	push $3
	cthis getrgba
	popax
	pop $4
	pop $3
	pop $2
	push $1
	push 0
	push $2
	call dbkolory,set
	push $1
	push 1
	push $3
	call dbkolory,set
	push $1
	push 2
	push $4
	call dbkolory,set
	end method
	method tp_default_erase
	cthis white
	push 255
	cthis tp_erase
	end method
	method tp_erase
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l3800:
	push $5
	call grdraw,size
	cmpjl
	cmp0
	je l3801
	jmp l3803
l3802:
	add $5,1
	pop $5
	jmp l3800
l3803:
	push $5
	call grdraw,get
	spushs
	push $1
	push $2
	push $3
	push $4
	push 0
	spop $a
	call [$a],paint
	push $5
	push 0
	push 255
	call dbkolory,set
	push $5
	push 1
	push 255
	call dbkolory,set
	push $5
	push 2
	push 255
	call dbkolory,set
	jmp l3802
l3801:
	cthis tp_savekols
	end method
	end class

	class TPainterCon
	parent TPainter
	parent GameController
	method init
	end method
	end class

	new int,iMemoTryb
	push 1
	pop iMemoTryb
	new int,iMemoW
	new int,iMemoH
	new int,iMemoAI
	push 0
	pop iMemoAI
	class TMemo
	method init
	end method
	method tinit
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 0
	push 3
	call $1,gete
	push "pyz"
	cmpje
	cmp0
	je l3805
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l3804
l3805:
	push "anbkg"
	push $1
	push 0
	cthis newimg
l3804:
	push "antaf"
	push $2
	push 20
	cthis newanima
	push "annak"
	push $3
	push 20
	cthis newanima
	new int,ipredkosc
	push 25
	pop ipredkosc
	new gmimgvec,grtaf
	new gmimgvec,grnak
	new vector,veci
	call veci,TMemo0
	localstring $5
	localint $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $6
	localint $10
	push 0
	pop $10
l3806:
	push $10
	push iMemoW
	cmpjl
	cmp0
	je l3807
	jmp l3809
l3808:
	add $10,1
	pop $10
	jmp l3806
l3809:
	push 0
	pop $9
l3810:
	push $9
	push iMemoH
	cmpjl
	cmp0
	je l3811
	jmp l3813
l3812:
	add $9,1
	pop $9
	jmp l3810
l3813:
	push "antaf"
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spop $e
	new anima,[$e]
	call [$e],TMemo1
	push "annak"
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spop $e
	new anima,[$e]
	call [$e],TMemo2
	add $6,1
	pop $6
	jmp l3812
l3811:
	jmp l3808
l3807:
	call antaf,hide
	call annak,hide
	call grtaf,hash
	push 0
	pop $6
	call antaf,getw
	push $4
	pop $b
	popax
	add $a,$b
	pop $7
	call antaf,geth
	push $4
	pop $b
	popax
	add $a,$b
	pop $8
	push 0
	pop $10
l3814:
	push $10
	push iMemoW
	cmpjl
	cmp0
	je l3815
	jmp l3817
l3816:
	add $10,1
	pop $10
	jmp l3814
l3817:
	push 0
	pop $9
l3818:
	push $9
	push iMemoH
	cmpjl
	cmp0
	je l3819
	jmp l3821
l3820:
	add $9,1
	pop $9
	jmp l3818
l3821:
	push $6
	call grtaf,get
	pop $5
	push $5
	spushs
	push $7
	push $10
	pop $b
	popax
	mul $a,$b
	push $8
	push $9
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],ansetbpos
	push $5
	spushs
	push $7
	push $10
	pop $b
	popax
	mul $a,$b
	push $8
	push $9
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],ansetbpos
	push $5
	spushs
	push A
	push "col"
	push $10
	push "row"
	push $9
	spop $a
	call [$a],vars2
	push $5
	spushs
	push 10
	push 2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	call grnak,get
	spushs
	push 10
	push 2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	add $6,1
	pop $6
	jmp l3820
l3819:
	jmp l3816
l3815:
	push "link"
	call grtaf,eval
	push "link"
	call grnak,eval
	push iResX
	call grtaf,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $7
	push iResY
	call grtaf,geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $8
	push $7
	push $8
	call grtaf,move
	push $7
	push $8
	call grnak,move
	new int,iplayer
	push 1
	pop iplayer
	new int,icompplayer
	push 0
	pop icompplayer
	new classfadeinout,clfio
	new classfadeinout,clfio2
	new int,imemostate
	push 0
	pop imemostate
	new string,staf1
	new string,staf2
	new string,snak1
	new string,snak2
	new int,ileai
	push 1
	push 5
	push iMemoW
	push iMemoH
	pop $b
	popax
	mul $a,$b
	push 0.2
	pop $b
	popax
	mul $a,$b
	push 10
	cthis between
	push iMemoAI
	pop $b
	popax
	add $a,$b
	push 20
	cthis between
	pop ileai
	new string,sset1
	new string,sset2
	new vector,vecai
	call vecai,TMemo3
	new int,iaistate
	push 0
	pop iaistate
	push "timwait"
	push 500
	push 1
	cthis newtimer
	call timwait,mresize
	push "timpoka"
	push 500
	push 1
	push "endset22"
	cthis cnewtimerfin
	end method
	method TMemo0
	push 0
	call antaf,nofframes
	cthis vecnewint
	cthis hash
	end method
	method TMemo1
	localint $1
	pop $1
	push "antaf"
	cthis copy
	push 0
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call veci,get
	cthis setframe
	cthis anaddfilter
	cthis unlink
	cthis getname
	call grtaf,add
	end method
	method TMemo2
	localint $1
	pop $1
	push "annak"
	cthis copy
	cthis anaddfilter
	cthis unlink
	cthis getname
	call grnak,add
	end method
	method TMemo3
	cthis mresize
	push "string"
	cthis type
	end method
	method tm_start
	push 1
	pop imemostate
	push iMemoTryb
	push 1
	cmpje
	cmp0
	je l3823
	push 2
	pop icompplayer
l3823:
	end method
	method aigo
	push 11
	pop imemostate
	push sset1
	cthis tclicks
	end method
	method aigo2
	push sset2
	cthis tclicks
	end method
	method aifind1
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l3825
	push 1
	popax
	sub 0,$a
	ret
l3825:
	localint $4
	push $1
	spushs
	spop $a
	call [$a],framenr
	pop $4
	localstring $5
l3826:
	push $2
	push $3
	cmpjl
	cmp0
	je l3827
	jmp l3829
l3828:
	add $2,1
	pop $2
	jmp l3826
l3829:
	push $2
	cthis get
	pop $5
	push $5
	push "null"
	cmpjne
	cmp0
	je l3831
	push $5
	push $1
	cmpjne
	cmp0
	je l3831
	push $4
	push $5
	spushs
	spop $a
	call [$a],framenr
	cmpje
	cmp0
	je l3831
	push $2
	cthis tstats
	jmp l3833
l3831:
	push 0
	jmp l3833
l3832:
	push 1
l3833:
	cmp0
	je l3834
	push $2
	ret
l3834:
	jmp l3828
l3827:
	push 1
	popax
	sub 0,$a
	end method
	method tstats
	localint $1
	pop $1
	push 100
	push $1
	push 10
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	cthis stats
	end method
	method startai
	localstring $1
	pop $1
	push iplayer
	push icompplayer
	cmpje
	cmp0
	je l3836
	localint $2
	call vecai,size
	push ileai
	cthis min
	pop $2
	push $1
	push "aigo"
	cmpje
	cmp0
	je l3838
	push 11
	pop imemostate
	localint $3
	localint $4
	localint $5
	push 1
	popax
	sub 0,$a
	pop $5
	push 0
	pop $3
l3839:
	push $3
	push $2
	cmpjl
	cmp0
	je l3840
	jmp l3842
l3841:
	add $3,1
	pop $3
	jmp l3839
l3842:
	push $3
	call vecai,get
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	call vecai,aifind1
	pop $5
	push $5
	push 0
	cmpjae
	cmp0
	je l3844
	push $3
	cthis tstats
	jmp l3846
l3844:
	push 0
	jmp l3846
l3845:
	push 1
l3846:
	cmp0
	je l3847
	push $3
	pop $4
	push $2
	pop $3
	jmp l3843
l3847:
	push 1
	popax
	sub 0,$a
	pop $5
l3843:
	jmp l3841
l3840:
	push $5
	push 0
	cmpjae
	cmp0
	je l3849
	push $4
	call vecai,get
	pop sset1
	push $5
	call vecai,get
	pop sset2
	jmp l3848
l3849:
	call grtaf,rand
	pop sset1
	push "null"
	pop sset2
l3848:
	jmp l3837
l3838:
	push sset2
	push "null"
	cmpje
	cmp0
	je l3851
	localint $6
	push sset1
	push 0
	push $2
	call vecai,aifind1
	pop $6
	push $6
	push 0
	cmpjae
	cmp0
	je l3853
	push $6
	cthis tstats
	jmp l3855
l3853:
	push 0
	jmp l3855
l3854:
	push 1
l3855:
	cmp0
	je l3856
	push $6
	call vecai,get
	pop sset2
	jmp l3852
l3856:
	push sset1
	call grtaf,randdiff
	pop sset2
l3852:
l3851:
l3837:
	push "timwait"
	push $1
	popax
	pop $b
	psax
	call [$b],operator<
	call timwait,play
l3836:
	end method
	method endset3
	push 1
	pop imemostate
	push iMemoTryb
	push 0
	cmpja
	cmp0
	je l3858
	cthis tnextplayer
	push "aigo"
	cthis startai
l3858:
	end method
	method endset2
	call timpoka,play
	end method
	method endset22
	push 3
	pop imemostate
	push snak2
	spushs
	spop $a
	call [$a],hide
	push staf1
	spushs
	spop $a
	call [$a],framenr
	push staf2
	spushs
	spop $a
	call [$a],framenr
	cmpje
	cmp0
	je l3860
	push "grnak"
	push snak1
	popax
	pop $b
	psax
	call [$b],operator-
	push snak2
	popax
	pop $b
	psax
	call [$b],operator-
	popax
	push "grtaf"
	push staf1
	popax
	pop $b
	psax
	call [$b],operator-
	push staf2
	popax
	pop $b
	psax
	call [$b],operator-
	popax
	push staf1
	call vecai,find
	push "null"
	call vecai,set
	push staf2
	call vecai,find
	push "null"
	call vecai,set
	call grtaf,empty
	cmp0
	je l3862
	push 5
	pop imemostate
	push 1
	push ipredkosc
	popax
	sub 0,$a
	push staf1
	push "null"
	call clfio,setopacity
	push 1
	push ipredkosc
	popax
	sub 0,$a
	push staf2
	push "null"
	call clfio2,setopacity
	cthis tfinish
	jmp l3861
l3862:
	push 1
	push ipredkosc
	popax
	sub 0,$a
	push staf1
	push "TMemo4"
	call clfio,setopacity
	push 1
	push ipredkosc
	popax
	sub 0,$a
	push staf2
	push "null"
	call clfio2,setopacity
	cthis tpoint
l3861:
	jmp l3859
l3860:
	push snak1
	spushs
	spop $a
	call [$a],show
	push snak2
	spushs
	spop $a
	call [$a],show
	push 1
	push ipredkosc
	push snak1
	push "endset3"
	call clfio,setopacity
	push 1
	push ipredkosc
	push snak2
	push "null"
	call clfio2,setopacity
	cthis terror
l3859:
	end method
	method TMemo4
	push staf1
	spushs
	spop $a
	call [$a],hide
	push staf2
	spushs
	spop $a
	call [$a],hide
	push iplayer
	push icompplayer
	cmpjne
	cmp0
	je l3864
	push 1
	pop imemostate
l3864:
	push "aigo"
	cthis startai
	end method
	method tclicks
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis tclick
	end method
	method tclick
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	call grnak,isin
	cmp0
	je l3866
	localstring $3
	call grnak,getsfound
	pop $3
	jmp l3865
l3866:
	ret
l3865:
	cthis tchoose
	push imemostate
	push 1
	cmpje
	cmp0
	jne l3869
	push imemostate
	push 11
	cmpje
	jmp l3870
l3868:
	push 0
	jmp l3870
l3869:
	push 1
l3870:
	cmp0
	je l3871
	sub imemostate,1
	pop imemostate
	push $3
	pop snak1
	push $3
	spushs
	spop $a
	call [$a],getcx
	push $3
	spushs
	spop $a
	call [$a],getcy
	push 1
	push 1
	call grtaf,getimg
	pop staf1
	push staf1
	push "null"
	call vecai,vecset
	push staf1
	call vecai,addbegin
	push 30
	call vecai,veclimes
	push 1
	push ipredkosc
	popax
	sub 0,$a
	push $3
	push "TMemo5"
	call clfio,setopacity
	jmp l3867
l3871:
	push imemostate
	push 2
	cmpje
	cmp0
	jne l3874
	push imemostate
	push 12
	cmpje
	jmp l3875
l3873:
	push 0
	jmp l3875
l3874:
	push 1
l3875:
	cmp0
	je l3876
	push 2
	popax
	sub imemostate,$a
	pop imemostate
	push $3
	pop snak2
	push $3
	spushs
	spop $a
	call [$a],getcx
	push $3
	spushs
	spop $a
	call [$a],getcy
	push 1
	push 1
	call grtaf,getimg
	pop staf2
	push staf2
	push "null"
	call vecai,vecset
	push staf2
	call vecai,addbegin
	push 30
	call vecai,veclimes
	push 1
	push ipredkosc
	popax
	sub 0,$a
	push $3
	push "endset2"
	call clfio,setopacity
l3876:
l3867:
	end method
	method TMemo5
	push snak1
	spushs
	spop $a
	call [$a],hide
	push 2
	popax
	add imemostate,$a
	pop imemostate
	push "aigo2"
	cthis startai
	end method
	method tnextplayer
	push iplayer
	push 1
	cmpje
	cmp0
	je l3878
	push 2
	jmp l3877
l3878:
	push 1
l3877:
	pop iplayer
	end method
	method tfitinsurf
	localint $1
	localint $2
	pop $2
	pop $1
	push "unlink"
	call grtaf,eval
	push "unlink"
	call grnak,eval
	localdef $3
	push $1
	push iMemoW
	pop $b
	popax
	div $a,$b
	psax
	pop $3
	localdef $4
	push $2
	push iMemoH
	pop $b
	popax
	div $a,$b
	psax
	pop $4
	localdef $5
	call grtaf,first
	spushs
	spop $a
	call [$a],getw
	pop $5
	localdef $6
	call grtaf,first
	spushs
	spop $a
	call [$a],geth
	pop $6
	localdef $7
	push $4
	push $6
	pop $b
	popax
	sub $a,$b
	pop $7
	localdef $8
	push $3
	push $5
	pop $b
	popax
	sub $a,$b
	pop $8
	localdef $9
	push 0
	pop $9
	localint $10
	push 0
	pop $10
l3879:
	push $10
	push iMemoW
	cmpjl
	cmp0
	je l3880
	jmp l3882
l3881:
	add $10,1
	pop $10
	jmp l3879
l3882:
	localint $11
	push 0
	pop $11
l3883:
	push $11
	push iMemoH
	cmpjl
	cmp0
	je l3884
	jmp l3886
l3885:
	add $11,1
	pop $11
	jmp l3883
l3886:
	localdef $12
	push $9
	call grtaf,get
	pop $12
	push $12
	spushs
	push $3
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	push $11
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],ansetbpos
	push $8
	push 0
	cmpjl
	cmp0
	je l3888
	push $10
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	jmp l3890
l3888:
	push 0
	jmp l3890
l3889:
	push 1
l3890:
	cmp0
	je l3891
	push $12
	spushs
	push 0
	push $7
	push 2
	pop $b
	popax
	div $a,$b
	psax
	spop $a
	call [$a],move
l3891:
	push $9
	call grnak,get
	spushs
	push $12
	spushs
	spop $a
	call [$a],getpx
	push $12
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],ansetbpos
	add $9,1
	pop $9
	jmp l3885
l3884:
	jmp l3881
l3880:
	push iResX
	call grnak,getex
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	push iResY
	call grnak,getey
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $2
	push $1
	push $2
	call grnak,move
	push $1
	push $2
	call grtaf,move
	push "link"
	call grtaf,eval
	push "link"
	call grnak,eval
	end method
	method tm_mouselclick
	push A
	push 1
	push 2
	call imemostate,in
	cmp0
	je l3893
	call mouse,getpos
	cthis tclick
l3893:
	end method
	method tfinish
	end method
	method tpoint
	end method
	method terror
	end method
	method tchoose
	end method
	end class

	new int,PrzygodaNumer
	push 1
	pop PrzygodaNumer
	new int,PrzygodaMode
	push "PrzygodaMode:"
	call dbconf,dbgetint
	pop PrzygodaMode
	class classadvstdgame
	parent classadvcontroller
	method init
	call clbuts,reset
	clparent classadvcontroller,init
	cthis advsave_game
	new img,_im_podbg
	push iResX
	push 1
	cthis black
	push 255
	call _im_podbg,create
	push 0
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	call _im_podbg,setpos
	push 2000
	popax
	sub 0,$a
	call _im_podbg,setz
	new img,_im_podbg2
	push 1
	push iResY
	cthis black
	push 255
	call _im_podbg2,create
	push iResX
	push 1
	pop $b
	popax
	sub $a,$b
	push 0
	call _im_podbg2,setpos
	push 2000
	popax
	sub 0,$a
	call _im_podbg2,setz
	end method
	method advload_game
	push "save"
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	cthis _advload
	end method
	method advsave_game
	push "save"
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	cthis _advsave
	end method
	method add_helps
	new gmimgvec,__grhelp
	new anima,__anhp
	push "scripts/common/aktywny.pyz"
	call __anhp,load
	call __anhp,hide
	localint $1
	push 0
	pop $1
l3894:
	push $1
	push 100
	cmpjl
	cmp0
	je l3895
	jmp l3897
l3896:
	add $1,1
	pop $1
	jmp l3894
l3897:
	localstring $2
	push "__anhp"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push "__anhp"
	push $2
	cthis copyanima
	push $2
	spushs
	push 2700
	spop $a
	call [$a],setz
	push $2
	call __grhelp,add
	jmp l3896
l3895:
	end method
	method clbuts_help_butclick
	localint $1
	push 0
	pop $1
	localint $2
	push 0
	pop $2
l3898:
	push $2
	call grbuts,size
	cmpjl
	cmp0
	je l3899
	jmp l3901
l3900:
	add $2,1
	pop $2
	jmp l3898
l3901:
	localstring $3
	push $2
	call grbuts,get
	pop $3
	localstring $4
	localstring $5
	push $3
	spushs
	spop $a
	call [$a],gettyp
	pop $5
	push $5
	push "item"
	cmpje
	cmp0
	jne l3904
	push $5
	push "but"
	cmpje
	cmp0
	jne l3904
	push $5
	push "doors"
	cmpje
	jmp l3905
l3903:
	push 0
	jmp l3905
l3904:
	push 1
l3905:
	cmp0
	je l3906
	push $3
	spushs
	spop $a
	call [$a],enabled
	cmp0
	je l3906
	push $3
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	jne l3909
	push $3
	spushs
	spop $a
	call [$a],ismask
	jmp l3910
l3908:
	push 0
	jmp l3910
l3909:
	push 1
l3910:
	jmp l3911
l3906:
	push 0
	jmp l3911
l3907:
	push 1
l3911:
	cmp0
	je l3912
	push $1
	call __grhelp,get
	pop $4
	add $1,1
	pop $1
	push $4
	spushs
	push $3
	spushs
	spop $a
	call [$a],getcx
	push $3
	spushs
	spop $a
	call [$a],getcy
	spop $a
	call [$a],setpos
	push $5
	push "doors"
	cmpje
	cmp0
	je l3914
	push $4
	spushs
	push 1
	spop $a
	call [$a],play
	jmp l3913
l3914:
	call gameapi,getgamename
	spushs
	push _stalkpref
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],hasvar
	cmp0
	je l3916
	push $4
	spushs
	push 2
	spop $a
	call [$a],play
	jmp l3915
l3916:
	push $4
	spushs
	push 0
	spop $a
	call [$a],play
l3915:
l3913:
	push $4
	call clcamera,removefrombgr
	push $3
	call clcamera,findinbgr
	pop $5
	push $5
	push "null"
	cmpjne
	cmp0
	je l3918
	push $5
	push $4
	call clcamera,addtobgr
l3918:
l3912:
	jmp l3900
l3899:
	end method
	end class

	new string,sAskerGame
	class StdGame
	parent classadv
	parent GameController
	parent Localize
	method init
	localstring $1
	pop $1
	push 0
	pop AdventureGame
	push 0
	pop igmstate
	push "init"
	pop sgmstate
	clparent classadv,init
	push $1
	clparent GameController,init
	clparent Localize,init
	push 0
	push 0
	call clbuts,setcursorpos
	push 0
	push 0
	call claskexit,setcursorpos
	push $1
	cthis path=
	push SNDPATH
	cthis setwavpath
	call clmusic,play
	call clbuts,reset
	call claskexit,reset
	call advmouse,setstd
	new Music,mus
	new Button,butgame
	new string,sNextGamePath
	new string,sNextGame
	new string,sNextGameType
	push PrzygodaMode
	cmp0
	je l3920
	clparent classadvcontroller,advsaveonstart
	clparent classadvstdgame,advsave_game
l3920:
	end method
	method cutscene
	push 0
	push 0
	push iResX
	push iResY
	new CutScene,ccs
	push 2000
	call ccs,setz
	end method
	method stdstart
	push "advsetstdstate"
	call ccs,enter
	end method
	method stdexitdefadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	pop sNextGame
	push $1
	pop sNextGamePath
	push "-def"
	pop sNextGameType
	cthis _stdexit
	end method
	method stdexitadvadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	pop sNextGame
	push $1
	pop sNextGamePath
	push "-adv"
	pop sNextGameType
	cthis _stdexit
	end method
	method stdexit
	localstring $1
	pop $1
	push $1
	pop sNextGame
	push "null"
	pop sNextGamePath
	push "-mg"
	pop sNextGameType
	cthis _stdexit
	end method
	method _stdexit
	push "end"
	pop sgmstate
	push sNextGameType
	spushs
	push "-def"
	cmpst
	jne l3922
	spop $a
	push sNextGamePath
	push sNextGame
	cthis gotoadv
	jmp l3921
l3922:
	push "-adv"
	cmpst
	jne l3923
	spop $a
	push sNextGamePath
	push sNextGame
	cthis gotoadv2
	jmp l3921
l3923:
	spop $a
	push sNextGame
	call gameapi,play
l3921:
	call ccs,buildfromscreen
	end method
	method gotoadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push $2
	pop sgmgame
	push "gameadvdef"
	call gameapi,play
	end method
	method gotoadv2
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push "null"
	pop sgmgame
	push $2
	call gameapi,play
	end method
	method Button_stdoff
	push "butmoveoff"
	push "StdGame0"
	cthis addmethod
	end method
	method StdGame0
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l3925
	ret
l3925:
	call advmouse,setstd
	end method
	method crect
	push 600
	push 196
	push 403
	push 497
	new Rect,rec
	end method
	method crect2
	push 6
	push 174
	push 1012
	push 530
	new Rect,rec2
	end method
	method cshowbut
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call clbuts,StdGame1
	end method
	method StdGame1
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	push "getcx"
	call buts,callimgfun
	push $1
	push "getcy"
	call buts,callimgfun
	push $2
	call clp,show
	end method
	method key_down
	push igmdebug
	cmp0
	je l3927
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l3927
	push "r"
	call keyboard,iskey
	jmp l3929
l3927:
	push 0
	jmp l3929
l3928:
	push 1
l3929:
	cmp0
	je l3930
	cthis crestart
l3930:
	end method
	method askrestart
	call claskexit,askrestart
	end method
	method onmusicfin
	call mus,play
	end method
	method exit
	cthis game_exit
	push igmsubtitle
	cmp0
	je l3932
	call subtitle,reset
l3932:
	end method
	end class

	new string,HiddenPath
	push "null"
	pop HiddenPath
	new string,HiddenExclude
	push "null"
	pop HiddenExclude
	new string,HiddenEls
	push "null"
	pop HiddenEls
	class Hidden
	method init_hidden
	push HiddenPath
	push "null"
	cmpjne
	cmp0
	je l3934
	push HiddenPath
	cthis path=
	push "null"
	pop HiddenPath
l3934:
	new int,ihoclickdelay
	push "hoclick_delay:"
	call dbconf,dbget
	pop ihoclickdelay
	new int,ihoclicktimes
	push "hoclick_times:"
	call dbconf,dbget
	pop ihoclicktimes
	new int,ihoclickkara
	push "hoclick_kara:"
	call dbconf,dbget
	pop ihoclickkara
	new int,ihoclicker
	push 0
	pop ihoclicker
	push "timhoclicker"
	push ihoclickdelay
	push "Hidden0"
	cthis timer=
	push "timhokara"
	push ihoclickkara
	push "Hidden1"
	cthis timer=
	new img,imgkara
	push igmappw
	push igmapph
	cthis black
	push 128
	call imgkara,create
	push 2222
	call imgkara,setz
	call imgkara,hide
	push A
	push "tolist0 70"
	push "tolist1 70"
	push "tolist2 50"
	cthis sfxs=
	push "grels"
	push "els"
	push 10
	cthis newgrimg
	new gmimgvec,grelscopy
	push "grels"
	call grelscopy,copy
	push HiddenExclude
	push "null"
	cmpjne
	cmp0
	je l3936
	new gmimgvec,grexclude
	push "dbexc"
	push HiddenExclude
	cthis lang_db
	localint $1
	push 0
	pop $1
l3937:
	push $1
	call dbexc,getrowsno
	cmpjl
	cmp0
	je l3938
	jmp l3940
l3939:
	add $1,1
	pop $1
	jmp l3937
l3940:
	localdef $2
	push $1
	push 0
	call dbexc,get
	call grels,getsac
	pop $2
	push $2
	spushs
	spop $a
	call [$a],hide
	push $2
	call grels,remove
	push $2
	call grexclude,add
	jmp l3939
l3938:
	push "null"
	pop HiddenExclude
l3936:
	cthis mpanel
	new string,sclickedho
	push "null"
	pop sclickedho
	push HiddenEls
	push "null"
	cmpjne
	cmp0
	je l3942
	push "dbtxts"
	push HiddenEls
	cthis lang_db
	push "null"
	pop HiddenEls
	jmp l3941
l3942:
	push "dbtxts"
	push "els_"
	cthis lang_db
l3941:
	new gmimgvec,grtxt
	new vector,vtexts
	push "string"
	call vtexts,type
	new gmimgvec,grtxtgrey
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	new int,itxtheight
	push 16
	pop itxtheight
	push "hoguifont:"
	call dbconf,dbget
	pop $7
	push $7
	push "null"
	cmpje
	cmp0
	je l3944
	push sgmfontitalic
	pop $7
l3944:
	push "fnttxts"
	push $7
	push itxtheight
	cthis newfont
	localint $1
	push 0
	pop $1
l3945:
	push $1
	call dbtxts,getrowsno
	cmpjl
	cmp0
	je l3946
	jmp l3948
l3947:
	add $1,1
	pop $1
	jmp l3945
l3948:
	push $1
	call dbtxts,getcolsno
	push 1
	cmpja
	cmp0
	je l3950
	push 0
	pop $11
	push $1
	push 0
	call dbtxts,get
	pop $7
	push $7
	push "<external>"
	cmpje
	cmp0
	je l3952
	push $1
	push 1
	call dbtxts,get
	pop $9
	push $1
	push 2
	call dbtxts,get
	pop $8
	push $9
	pop $7
	push 1
	popax
	sub 0,$a
	pop $3
	jmp l3951
l3952:
	push $7
	push "<virtual>"
	cmpje
	cmp0
	je l3954
	push 1
	pop $11
	push $1
	push 1
	call dbtxts,get
	pop $7
	push $7
	call grels,getsac
	pop $9
	push 1
	popax
	sub 0,$a
	pop $3
	jmp l3953
l3954:
	push $7
	call grels,getsac
	pop $9
	push $1
	push 1
	call dbtxts,get
	pop $8
	push $8
	call vtexts,find
	pop $3
l3953:
l3951:
	push $3
	push 0
	cmpjae
	cmp0
	je l3956
	push 0
	pop $4
l3957:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l3958
	jmp l3960
l3959:
	add $4,1
	pop $4
	jmp l3957
l3960:
	push $4
	call grtxt,get
	pop $10
	push $10
	spushs
	spop $a
	call [$a],idvtext
	push $3
	cmpje
	cmp0
	je l3962
	push $9
	spushs
	push "stxtview"
	push $10
	spop $a
	call [$a],var2
	push $10
	spushs
	push 1
	spop $a
	call [$a],mupdatetxt
l3962:
	jmp l3959
l3958:
	jmp l3955
l3956:
	push $11
	cmp0
	je l3964
	push $9
	spushs
	push "stxtview"
	push "<virtual>"
	spop $a
	call [$a],var2
	jmp l3963
l3964:
	push $8
	call vtexts,add
	push "txtel_"
	push $7
	pop $b
	popax
	add $a,$b
	pop $7
	push $1
	push 0
	call dbtxts,get
	push "<external>"
	cmpje
	cmp0
	je l3966
	push $7
	push $8
	push "fnttxts"
	cthis hoexternalcol
	cthis newtext
	jmp l3965
l3966:
	push $7
	push $8
	push "fnttxts"
	cthis guifontcolor
	cthis newtext
l3965:
	push $7
	spushs
	spop $a
	call [$a],hide
	push $7
	spushs
	push 507
	spop $a
	call [$a],setz
	push $7
	spushs
	push A
	push "stekst"
	push $8
	push "icnt"
	push 1
	push "iidtxt"
	push 0
	push "idvtext"
	call vtexts,size
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],vars2
	push $7
	spushs
	push "mupdatetxt"
	push "Hidden2"
	spop $a
	call [$a],addmethod
	push $7
	spushs
	push "mupdatetxt2"
	push "Hidden3"
	spop $a
	call [$a],addmethod
	push $7
	call grtxt,add
	push $9
	spushs
	push "stxtview"
	push $7
	spop $a
	call [$a],var2
l3963:
l3955:
l3950:
	jmp l3947
l3946:
	push A
	push "irows"
	push 3
	push "icols"
	push 4
	call grtxt,vars2
	push "lastid"
	push "Hidden4"
	call grtxt,addmethod
	push "shownext"
	push "Hidden5"
	call grtxt,addmethod
	push 0
	pop $1
l3976:
	push $1
	push 12
	cmpjl
	cmp0
	je l3977
	jmp l3979
l3978:
	add $1,1
	pop $1
	jmp l3976
l3979:
	call grtxt,shownext
	jmp l3978
l3977:
	new int,ilehonaraz
	push 35
	pop ilehonaraz
	new classancounter,ctcen
	push "timcenter"
	push ilehonaraz
	call ctcen,set
	new int,idtimcenter
	push 0
	pop idtimcenter
	new real,rcykcenter
	push 16.0
	pop rcykcenter
	new string,shidenmov
	push "null"
	pop shidenmov
	localint $1
	push 0
	pop $1
l3980:
	push $1
	push ilehonaraz
	cmpjl
	cmp0
	je l3981
	jmp l3983
l3982:
	add $1,1
	pop $1
	jmp l3980
l3983:
	localdef $12
	push 3
	pop $12
	push "timcenter"
	push $1
	pop $b
	popax
	add $a,$b
	push "Hidden6"
	cthis cycle=
	push "timcenter"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push "mstart"
	push "Hidden7"
	spop $a
	call [$a],addmethod
	push "timcenter"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],Hidden8
	push "timcenterb"
	push $1
	pop $b
	popax
	add $a,$b
	push 500
	push "Hidden9"
	cthis timer=
	push "timcenterb"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push A
	push "myid"
	push $1
	spop $a
	call [$a],vars2
	jmp l3982
l3981:
	localdef $2
	cthis getgraphpath
	pop $2
	push "common"
	cthis path=
	localdef $13
	push 60
	pop $13
	push "anhodym"
	push "dymki.pyz"
	push 600
	cthis newanima
	call anhodym,hide
	new gmimgvec,grdym
	push "anhodym"
	push $13
	call grdym,ancopies
	new classancounter,ctdym
	push "anhodym_"
	push $13
	call ctdym,set
	push A
	push "gwiazdkif.pyzH"
	push "gwiazdki1.pyzGH"
	push "bable.pyzH"
	cthis imgs=
	push "anbable"
	push "anbable2"
	cthis copyanima
	push $2
	cthis setgraphpath
	new int,izels
	push 10
	pop izels
	push "Hidden10"
	call grelscopy,each
	push "Hidden11"
	call grels,each
	push igmdebug
	cmp0
	je l4028
	new string,smovedfont
	push 14
	cthis stdfont
	pop smovedfont
	push "txtmovedho"
	push ""
	push smovedfont
	push 240
	cthis grey
	cthis newtext
	push 1500
	call txtmovedho,setz
	push "txtmovedho2"
	push ""
	push smovedfont
	push 2
	cthis grey
	cthis newtext
	push 1499
	call txtmovedho2,setz
l4028:
	end method
	method Hidden0
	push 0
	pop ihoclicker
	end method
	method Hidden1
	call imgkara,hide
	push 1
	pop igmstate
	end method
	method Hidden2
	localint $1
	pop $1
	push $1
	popax
	add icnt,$a
	pop icnt
	push stekst
	push " 0/"
	pop $b
	popax
	add $a,$b
	push icnt
	pop $b
	popax
	add $a,$b
	cthis txtset
	end method
	method Hidden3
	localint $1
	pop $1
	push $1
	popax
	add iidtxt,$a
	pop iidtxt
	push stekst
	push " "
	pop $b
	popax
	add $a,$b
	push iidtxt
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push icnt
	pop $b
	popax
	add $a,$b
	cthis txtset
	end method
	method Hidden4
	localint $1
	push 0
	pop $1
l3967:
	push $1
	cthis size
	cmpjl
	cmp0
	je l3968
	push $1
	cthis get
	spushs
	spop $a
	call [$a],isvisible
	jmp l3970
l3968:
	push 0
	jmp l3970
l3969:
	push 1
l3970:
	cmp0
	je l3971
	add $1,1
	pop $1
	jmp l3967
l3971:
	push $1
	end method
	method Hidden5
	localint $1
	cthis lastid
	pop $1
	push $1
	cthis size
	cmpje
	cmp0
	je l3973
	ret
l3973:
	push $1
	push irows
	push icols
	pop $b
	popax
	mul $a,$b
	cmpjl
	cmp0
	je l3975
	localdef $2
	push $1
	cthis get
	pop $2
	localint $3
	push $1
	push icols
	pop $b
	popax
	div $a,$b
	psax
	pop $3
	localint $4
	push $1
	push icols
	pop $b
	popax
	div $a,$b
	push $d
	pop $4
	push $2
	spushs
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call icols,to_r
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	call $4,to_r
	pop $b
	popax
	sub $a,$b
	push 0.5
	pop $b
	popax
	sub $a,$b
	push 120
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call guihoinventory,getpy
	push 50
	pop $b
	popax
	add $a,$b
	push $3
	push itxtheight
	push 2
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $2
	spushs
	spop $a
	call [$a],show
l3975:
	end method
	method Hidden6
	add icyk,1
	pop icyk
	push rpx
	popax
	add rdx,$a
	pop rdx
	push rpy
	popax
	add rdy,$a
	pop rdy
	push ietap
	push 2
	cmpje
	cmp0
	je l3985
	push shidenmov
	spushs
	push icyk
	call vhox,get
	push icyk
	call vhoy,get
	spop $a
	call [$a],ansetbpos
	push icyk
	call vhox,get
	push icyk
	call vhoy,get
	call grgwiazdki1,setpos
	jmp l3984
l3985:
	push shidenmov
	spushs
	push rdx
	push rdy
	spop $a
	call [$a],move
l3984:
	push rdx
	spushs
	spop $h
	call $h,to_i
	popax
	sub rdx,$a
	pop rdx
	push rdy
	spushs
	spop $h
	call $h,to_i
	popax
	sub rdy,$a
	pop rdy
	localdef $1
	call ctdym,get
	pop $1
	push $1
	spushs
	push shidenmov
	spushs
	spop $a
	call [$a],getcx
	push shidenmov
	spushs
	spop $a
	call [$a],getcy
	spop $a
	call [$a],setpos
	push $1
	spushs
	push shidenmov
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push icyk
	push rcykcenter
	cmpjae
	cmp0
	je l3987
	push ietap
	push 1
	cmpje
	cmp0
	je l3989
	push idestx2
	pop idestx
	push idesty2
	pop idesty
	push 2
	pop ietap
	push shidenmov
	spushs
	spop $a
	call [$a],getcx
	push shidenmov
	spushs
	spop $a
	call [$a],getcy
	call grgwiazdki1,setpos
	push shidenmov
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	call grgwiazdki1,setz
	push 1
	popax
	sub 0,$a
	call grgwiazdki1,nplay
	push shidenmov
	spushs
	spop $a
	call [$a],getcx
	push shidenmov
	spushs
	spop $a
	call [$a],getcy
	call anbable2,setpos
	push shidenmov
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	call anbable2,setz
	push 0
	call anbable2,play
	call fxtolist2,playif
	cthis mstart
	push "timcenterb"
	push myid
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
	jmp l3988
l3989:
	cthis getname
	call ctcen,retf
	call ctcen,allfree
	cmp0
	je l3991
	cthis advsetstdstate
	push 1
	pop igmstate
l3991:
	push shidenmov
	spushs
	spop $a
	call [$a],hide
	push shidenmov
	call grels,remove
	localdef $2
	call grtxt,irows
	call grtxt,icols
	pop $b
	popax
	mul $a,$b
	pop $2
	localdef $3
	push shidenmov
	spushs
	spop $a
	call [$a],actionname
	pop $3
	push sclickedho
	spushs
	spop $a
	call [$a],icnt
	push sclickedho
	spushs
	spop $a
	call [$a],iidtxt
	push 1
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l3993
	push sclickedho
	spushs
	push 1
	spop $a
	call [$a],mupdatetxt2
	jmp l3992
l3993:
	push sclickedho
	spushs
	spop $a
	call [$a],icnt
	push 1
	cmpja
	cmp0
	je l3995
	push sclickedho
	spushs
	push 1
	spop $a
	call [$a],mupdatetxt2
l3995:
	push sclickedho
	call grtxt,remove
	push sclickedho
	call grtxtgrey,add
	push sclickedho
	spushs
	push 128
	cthis grey
	spop $a
	call [$a],createtxt
	call grtxtgrey,size
	push $2
	cmpje
	cmp0
	je l3997
	call grtxt,size
	push 0
	cmpja
	jmp l3999
l3997:
	push 0
	jmp l3999
l3998:
	push 1
l3999:
	cmp0
	je l4000
	call grtxtgrey,hide
	call grtxtgrey,free
	localint $4
	push 0
	pop $4
l4001:
	push $4
	push $2
	cmpjl
	cmp0
	je l4002
	call grtxt,size
	push 0
	cmpja
	jmp l4004
l4002:
	push 0
	jmp l4004
l4003:
	push 1
l4004:
	cmp0
	je l4005
	call grtxt,shownext
	add $4,1
	pop $4
	jmp l4001
l4005:
l4000:
l3992:
	push $1
	spushs
	push sclickedho
	spushs
	spop $a
	call [$a],getpx
	push sclickedho
	spushs
	spop $a
	call [$a],getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push sclickedho
	spushs
	spop $a
	call [$a],getpy
	push sclickedho
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push "end"
	spop $a
	call [$a],play
	push $3
	push "_put"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis hiddenobj_put
l3988:
	jmp l3986
l3987:
	push ietap
	push 1
	cmpje
	cmp0
	jne l4008
	push ietap
	push 2
	cmpje
	jmp l4009
l4007:
	push 0
	jmp l4009
l4008:
	push 1
l4009:
	cmp0
	je l4010
	push $1
	spushs
	push "go"
	spop $a
	call [$a],play
l4010:
	cthis play
l3986:
	end method
	method Hidden7
	localdef $1
	push shidenmov
	spushs
	spop $a
	call [$a],getcx
	pop $1
	localdef $2
	push shidenmov
	spushs
	spop $a
	call [$a],getcy
	pop $2
	push idestx
	push $1
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push rcykcenter
	pop $b
	popax
	div $a,$b
	psax
	pop rpx
	push idesty
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push rcykcenter
	pop $b
	popax
	div $a,$b
	psax
	pop rpy
	push 0.0
	pop rdx
	push 0.0
	pop rdy
	push 0
	pop icyk
	push ietap
	push 2
	cmpje
	cmp0
	je l4012
	push 0
	push $1
	push $1
	push shidenmov
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	sub $a,$b
	call vhox,set
	push 0
	push $2
	push $2
	push shidenmov
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	sub $a,$b
	call vhoy,set
	push rpx
	push 0
	cmpjl
	cmp0
	je l4014
	localint $3
	push 1
	pop $3
l4015:
	push $3
	push rcykcenter
	cmpjle
	cmp0
	je l4016
	jmp l4018
l4017:
	add $3,1
	pop $3
	jmp l4015
l4018:
	push $3
	push rpx
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call vhox,get
	pop $b
	popax
	add $a,$b
	push $3
	call rcykcenter,to_i
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push 5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call vhox,set
	push $3
	push rpy
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call vhoy,get
	pop $b
	popax
	add $a,$b
	push $3
	call rcykcenter,to_i
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push 5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call vhoy,set
	jmp l4017
l4016:
	jmp l4013
l4014:
	localint $3
	push 1
	pop $3
l4019:
	push $3
	push rcykcenter
	cmpjle
	cmp0
	je l4020
	jmp l4022
l4021:
	add $3,1
	pop $3
	jmp l4019
l4022:
	push $3
	push rpx
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call vhox,get
	pop $b
	popax
	add $a,$b
	push $3
	call rcykcenter,to_i
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push 5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call vhox,set
	push $3
	push rpy
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call vhoy,get
	pop $b
	popax
	add $a,$b
	push $3
	call rcykcenter,to_i
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push 5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call vhoy,set
	jmp l4021
l4020:
l4013:
	localreal $4
	localreal $5
	localreal $6
	localreal $7
	push idesty
	push $2
	pop $b
	popax
	sub $a,$b
	pop $4
	push rcykcenter
	push 1
	pop $b
	popax
	sub $a,$b
	call vhoy,get
	push 0
	call vhoy,get
	pop $b
	popax
	sub $a,$b
	pop $5
	push $4
	push $5
	pop $b
	popax
	div $a,$b
	psax
	pop $6
	push 1
	pop $3
l4023:
	push $3
	push rcykcenter
	cmpjle
	cmp0
	je l4024
	jmp l4026
l4025:
	add $3,1
	pop $3
	jmp l4023
l4026:
	push $3
	push $3
	call vhoy,get
	push $6
	pop $b
	popax
	mul $a,$b
	call vhoy,set
	jmp l4025
l4024:
l4012:
	end method
	method Hidden8
	localdef $1
	pop $1
	new vector,vhox
	push "real"
	call vhox,type
	push rcykcenter
	push 1
	pop $b
	popax
	add $a,$b
	push 0.0
	call vhox,resize
	new vector,vhoy
	push "real"
	call vhoy,type
	push rcykcenter
	push 1
	pop $b
	popax
	add $a,$b
	push 0.0
	call vhoy,resize
	push A
	push "rdx"
	push "rdy"
	push "rpx"
	push "rpy"
	push "icyk"
	push "idestx"
	push "idesty"
	push "idestx2"
	push "idesty2"
	push "ietap"
	push "shidenmov"
	push "myid"
	push "sclickedho"
	cthis vars
	push $1
	pop myid
	push "null"
	pop shidenmov
	push "null"
	pop sclickedho
	end method
	method Hidden9
	push "timcenter"
	push myid
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],mstart
	call fxtolist1,playif
	push "timcenter"
	push myid
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
	end method
	method Hidden10
	localdef $1
	pop $1
	push izels
	push $1
	push 5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method Hidden11
	localdef $1
	pop $1
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
	cthis mhobut
	end method
	method hoexternalcol
	push 255
	push 220
	push 0
	ret
	end method
	method mhobutmask
	push 0
	cthis _mhobut
	end method
	method mhobut
	push 1
	cthis _mhobut
	end method
	method _mhobut
	localint $1
	pop $1
	push $1
	cmp0
	je l4030
	push "isbutin"
	push "Hidden12"
	cthis addmethod
	jmp l4029
l4030:
	push "isbutin"
	push "Hidden13"
	cthis addmethod
l4029:
	push "butmoveon"
	push "Hidden14"
	cthis addmethod
	push "butmoveoff"
	push "Hidden15"
	cthis addmethod
	push "myz"
	cthis getz
	cthis var2
	push "butclick"
	push "Hidden16"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method Hidden12
	localdef $1
	localdef $2
	pop $2
	pop $1
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	push $1
	push $2
	push 1
	push 1
	cthis isin
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
	end method
	method Hidden13
	localdef $1
	localdef $2
	pop $2
	pop $1
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	push $1
	push $2
	push 0
	push 1
	cthis isin
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
	end method
	method Hidden14
	push igmdebug
	cmp0
	je l4032
	localdef $1
	cthis actionname
	pop $1
	call txtmovedho,get
	push $1
	cmpjne
	cmp0
	je l4034
	push $1
	call txtmovedho,txtset
	push $1
	call txtmovedho2,txtset
l4034:
	call mouse,getpx
	call mouse,getpy
	call txtmovedho,geth
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	call txtmovedho,setpos
	call mouse,getpx
	push 1
	pop $b
	popax
	add $a,$b
	call mouse,getpy
	call txtmovedho,geth
	pop $b
	popax
	sub $a,$b
	call txtmovedho2,setpos
	call txtmovedho,show
	call txtmovedho2,show
l4032:
	end method
	method Hidden15
	push igmdebug
	cmp0
	je l4036
	call txtmovedho,hide
	call txtmovedho2,hide
l4036:
	end method
	method Hidden16
	localdef $1
	cthis actionname
	pop $1
	push GAME
	spushs
	push $1
	push "_preclick"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],hasmet
	cmp0
	je l4038
	push $1
	push "_preclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l4037
l4038:
	push igmstate
	push 1
	cmpje
	cmp0
	jne l4041
	push sgmstate
	push "hoout"
	cmpje
	jmp l4042
l4040:
	push 0
	jmp l4042
l4041:
	push 1
l4042:
	cmp0
	je l4043
	cthis mho_click
	push $1
	push "_click"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	call butgame,onmousemove
l4043:
l4037:
	end method
	method mmasks
	cthis getgraphpath
	push "masks.pyz"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l4045
	push "grmasks"
	push "masks"
	push 0
	cthis newgrimg
	push "Hidden17"
	call grmasks,eval
	jmp l4044
l4045:
	new gmimgvec,grmasks
l4044:
	end method
	method Hidden17
	cthis actionname
	cthis mmask
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l4047
	push 1
	popax
	sub 0,$a
	cthis play
l4047:
	end method
	method mmask
	localstring $1
	pop $1
	push 0
	push 5
	call $1,getb
	push "_prev"
	cmpje
	cmp0
	je l4049
	localdef $2
	cthis getname
	call grmasks,find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l4051
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call grmasks,get
	spushs
	spop $a
	call [$a],getz
	cthis setz
	jmp l4050
l4051:
	push 2
	cthis setz
l4050:
	jmp l4048
l4049:
	localstring $3
	localdef $2
	push $1
	call grelscopy,findsac
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l4053
	push $1
	call grexclude,getsac
	pop $3
	jmp l4052
l4053:
	push $2
	call grelscopy,get
	pop $3
l4052:
	push $3
	spushs
	spop $a
	call [$a],getz
	push 2
	pop $b
	popax
	add $a,$b
	cthis setz
l4048:
	end method
	method mhider
	localstring $1
	pop $1
	localdef $2
	push $1
	call grels,getsac
	pop $2
	push $2
	spushs
	spop $a
	call [$a],getz
	push 2
	pop $b
	popax
	sub $a,$b
	cthis setz
	push $2
	spushs
	spop $a
	call [$a],hide
	push "maskedobj"
	push $2
	cthis var2
	push "hidemask"
	push "Hidden18"
	cthis addmethod
	push "showmask"
	push "Hidden19"
	cthis addmethod
	end method
	method Hidden18
	push maskedobj
	call grels,contains
	cmp0
	je l4055
	push maskedobj
	spushs
	spop $a
	call [$a],hide
l4055:
	end method
	method Hidden19
	push maskedobj
	call grels,contains
	cmp0
	je l4057
	push maskedobj
	spushs
	spop $a
	call [$a],show
l4057:
	end method
	method mhiderclick
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 0
	cmpje
	cmp0
	je l4059
	push 1
	push 0
	cthis setframe
	cthis showmask
	jmp l4058
l4059:
	push 0
	push 0
	cthis setframe
	cthis hidemask
l4058:
	end method
	method mho_click
	push "stxtview"
	cthis hasvar
	cmp0
	je l4061
	push stxtview
	spushs
	spop $a
	call [$a],isvisible
	jmp l4063
l4061:
	push 0
	jmp l4063
l4062:
	push 1
l4063:
	cmp0
	je l4064
	push stxtview
	pop sclickedho
	jmp l4060
l4064:
	push "null"
	pop sclickedho
l4060:
	push sclickedho
	push "null"
	cmpjne
	cmp0
	je l4066
	push igmstate
	push 1
	cmpje
	cmp0
	jne l4069
	push sgmstate
	push "hoout"
	cmpje
	jmp l4070
l4068:
	push 0
	jmp l4070
l4069:
	push 1
l4070:
	jmp l4071
l4066:
	push 0
	jmp l4071
l4067:
	push 1
l4071:
	cmp0
	je l4072
	localdef $1
	call ctcen,getf
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l4074
	push 0
	pop ihoclicker
	cthis getname
	call butgame,removebut
	call angwiazdkif,anhide
	cthis getname
	pop shidenmov
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],shidenmov=
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	push 600
	cthis setz
	push 2
	pop igmstate
	push GAME
	spushs
	cthis actionname
	push "_put"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],hasmet
	cmp0
	je l4076
	cthis advsetstdstate
	jmp l4075
l4076:
	push "hoout"
	pop sgmstate
l4075:
	push $1
	spushs
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	spop $a
	call [$a],idestx=
	push $1
	spushs
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	spop $a
	call [$a],idesty=
	push $1
	spushs
	push sclickedho
	spushs
	spop $a
	call [$a],getpx
	push sclickedho
	spushs
	spop $a
	call [$a],getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],idestx2=
	push $1
	spushs
	push sclickedho
	spushs
	spop $a
	call [$a],getpy
	push sclickedho
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],idesty2=
	push $1
	spushs
	push 1
	spop $a
	call [$a],ietap=
	push $1
	spushs
	push sclickedho
	spop $a
	call [$a],sclickedho=
	push $1
	spushs
	spop $a
	call [$a],mstart
	localdef $2
	call ctdym,get
	pop $2
	push $2
	spushs
	push shidenmov
	spushs
	spop $a
	call [$a],getcx
	push shidenmov
	spushs
	spop $a
	call [$a],getcy
	spop $a
	call [$a],setpos
	push $2
	spushs
	push "start"
	spop $a
	call [$a],play
	call fxtolist0,playif
	push $1
	spushs
	spop $a
	call [$a],play
	jmp l4073
l4074:
	push "null"
	pop sclickedho
l4073:
l4072:
	end method
	method butgame_lclick
	push igmstate
	push 1
	cmpje
	cmp0
	je l4078
	call grtxt,empty
	neg
	jmp l4080
l4078:
	push 0
	jmp l4080
l4079:
	push 1
l4080:
	cmp0
	je l4081
	call timhoclicker,isplaying
	cmp0
	je l4083
	add ihoclicker,1
	pop ihoclicker
l4083:
	push ihoclicker
	push ihoclicktimes
	cmpje
	cmp0
	je l4085
	push 0
	pop ihoclicker
	push 0
	call timhoclicker,stop
	push "null"
	pop sobject
	push 12345
	pop igmstate
	call imgkara,show
	call timhokara,play
	push "ho_ukarany"
	call clsave,bis
	neg
	cmp0
	je l4087
	push "ho_ukarany"
	call clsave,bset
	push "lektorclicks"
	cthis txtplay
l4087:
	jmp l4084
l4085:
	call timhoclicker,play
l4084:
	jmp l4077
l4081:
	push 0
	pop ihoclicker
l4077:
	end method
	method HINT_CLICK
	new gmobjvec,_grtmp
	localstring $1
	localint $2
	push 0
	pop $2
l4088:
	push $2
	call grels,size
	cmpjl
	cmp0
	je l4089
	jmp l4091
l4090:
	add $2,1
	pop $2
	jmp l4088
l4091:
	push $2
	call grels,get
	pop $1
	push $1
	spushs
	push "stxtview"
	spop $a
	call [$a],hasvar
	cmp0
	je l4093
	push $1
	spushs
	spop $a
	call [$a],stxtview
	spushs
	push 0
	push 1
	spop $h
	call $h,getb
	push "<"
	cmpjne
	cmp0
	je l4093
	push $1
	spushs
	spop $a
	call [$a],stxtview
	spushs
	spop $a
	call [$a],isvisible
	jmp l4095
l4093:
	push 0
	jmp l4095
l4094:
	push 1
l4095:
	cmp0
	je l4096
	push $1
	call _grtmp,add
l4096:
	jmp l4090
l4089:
	call _grtmp,rand
	cthis mhintonobj
	delete _grtmp
	end method
	method mhintonobj
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l4098
	ret
l4098:
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	call angwiazdkif,setpos
	push 600
	call angwiazdkif,setz
	push 0
	call angwiazdkif,play
	end method
	method mgetel
	localstring $1
	pop $1
	localdef $2
	push $1
	call grels,findsac
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l4100
	push $2
	call grels,get
	jmp l4099
l4100:
	push "null"
l4099:
	end method
	method mouse_move
	clparent StdGame,mouse_move
	end method
	end class

	new real,rBehPopupStep
	push "popup_speed:"
	call dbconf,dbget
	pop rBehPopupStep
	push rBehPopupStep
	push 0
	cmpjle
	cmp0
	je l4102
	push 0.1
	pop rBehPopupStep
l4102:
	class advbanbeh
	parent classbehhero
	method init
	clparent classbehhero,init
	end method
	method _evalpopup
	push _icol
	push 0
	cmpjae
	cmp0
	je l4104
	localint $1
	push _icol
	pop $1
	localdef $2
	push _sdb
	spushs
	push _irow
	push $1
	spop $a
	call [$a],get
	pop $2
l4105:
	push $2
	push ")"
	cmpjne
	cmp0
	je l4106
	push $1
	push _icol
	cmpje
	cmp0
	je l4108
	push $2
	call imgpopup,clone
	jmp l4107
l4108:
	push $2
	call imgpopup,blit
l4107:
	add $1,1
	pop $1
	push _sdb
	spushs
	push _irow
	push $1
	spop $a
	call [$a],get
	pop $2
	jmp l4105
l4106:
	call imgpopup,hide
	push $1
	push _icol
	cmpja
	cmp0
	je l4110
	push "imgpopup"
	call ftpopup,link
	push 0
	call ftpopup,setpivottype
	call timpopup,setstart
	call timpopup,play
	jmp l4109
l4110:
	cthis reteval
l4109:
	jmp l4103
l4104:
	cthis reteval
l4103:
	end method
	method setaspopup
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "popup"
	cthis settype
	new string,_spoptype
	push $4
	pop _spoptype
	new string,_sdb
	push $1
	pop _sdb
	new int,_irow
	push $2
	pop _irow
	new int,_icol
	push $3
	pop _icol
	push "timpopup"
	push "advbanbeh0"
	cthis cycle=
	push A
	push "rzoom"
	push rBehPopupStep
	push "sbehaviour"
	cthis getname
	push "idir"
	push $4
	push "popin"
	cmpje
	cmp0
	je l4123
	push 1
	jmp l4122
l4123:
	push 1
	popax
	sub 0,$a
l4122:
	call timpopup,vars2
	push "setstart"
	push "advbanbeh1"
	call timpopup,addmethod
	new img,imgpopup
	new filter,ftpopup
	end method
	method advbanbeh0
	push idir
	push 0
	cmpja
	cmp0
	je l4112
	push rzoom
	push 1.0
	cmpja
	jmp l4114
l4112:
	push 0
	jmp l4114
l4113:
	push 1
l4114:
	cmp0
	jne l4116
	push idir
	push 0
	cmpjl
	cmp0
	je l4117
	push rzoom
	push rBehPopupStep
	cmpjle
	jmp l4119
l4117:
	push 0
	jmp l4119
l4118:
	push 1
l4119:
	jmp l4120
l4115:
	push 0
	jmp l4120
l4116:
	push 1
l4120:
	cmp0
	je l4121
	call ftpopup,unlink
	push 2
	push 2
	cthis transparent
	call imgpopup,create
	call imgpopup,hide
	push sbehaviour
	spushs
	spop $a
	call [$a],reteval
	call engine,redraw
	jmp l4111
l4121:
	push rzoom
	call ftpopup,setzoom
	call imgpopup,show
	push rBehPopupStep
	push idir
	pop $b
	popax
	mul $a,$b
	popax
	add rzoom,$a
	pop rzoom
	cthis play
l4111:
	end method
	method advbanbeh1
	push idir
	push 0
	cmpja
	cmp0
	je l4125
	push rBehPopupStep
	jmp l4124
l4125:
	push 1.0
l4124:
	pop rzoom
	end method
	method _evalopenbook
	cthis getname
	call ansysbook,sbehaviour=
	push schapter
	push "-last"
	cmpjne
	cmp0
	je l4127
	push "guibook_lastchapter"
	push schapter
	call clsave,set
	push "guibook_enabled_"
	push schapter
	pop $b
	popax
	add $a,$b
	call clsave,bset
l4127:
	cthis gui_openbook
	end method
	method _evalclosebook
	cthis getname
	call ansysbook,sbehaviour=
	cthis gui_closebook
	end method
	method setasopenbook
	localstring $1
	pop $1
	push "openbook"
	cthis settype
	new string,schapter
	push $1
	pop schapter
	end method
	method setasclosebook
	push "closebook"
	cthis settype
	end method
	end class

	new gmimgvec,grguipck
	new int,iGuiZ
	push 1234
	pop iGuiZ
	new int,iBookZ
	push 1240
	pop iBookZ
	new int,iHintStarZ
	push 1300
	pop iHintStarZ
	new int,iTakeZ
	push 1324
	pop iTakeZ
	new int,iSlotZ
	push 1230
	pop iSlotZ
	new int,iRotoIleRot
	push 20
	pop iRotoIleRot
	new int,iRotoIleObrotow
	push 2
	pop iRotoIleObrotow
	new int,iSzkielkoZ
	push 1340
	pop iSzkielkoZ
	new int,iPopupZ
	push 1100
	pop iPopupZ
	new int,bHOInventory
	new int,ishowpouptime
	push "showpopup_time:"
	call dbconf,dbget
	pop ishowpouptime
	class BanGuiSrc
	method init
	new anima,guihint
	push "scripts/sys_gui/hint.pyz"
	call guihint,load
	call guihint,hide
	push iGuiZ
	call guihint,setz
	new anima,guirose
	push "scripts/sys_gui/roza.pyz"
	call guirose,load
	push iGuiZ
	call guirose,setz
	call guirose,hide
	new anima,gguimenu
	push "scripts/sys_gui/menu.pyz"
	call gguimenu,load
	push iGuiZ
	call gguimenu,setz
	call gguimenu,hide
	new anima,gguishowhint
	push "scripts/sys_gui/showhintb.pyz"
	call gguishowhint,load
	push iHintStarZ
	call gguishowhint,setz
	call gguishowhint,hide
	new anima,guiloupe
	push "scripts/sys_gui/reka.pyz"
	call guiloupe,load
	call guiloupe,hide
	new anima,anpopexit
	push "scripts/sys_gui/popexit.pyz"
	call anpopexit,load
	call anpopexit,hide
	new anima,guipiorko
	push "scripts/sys_gui/piorko.pyz"
	call guipiorko,load
	call guipiorko,hide
	push iBookZ
	push 10
	pop $b
	popax
	add $a,$b
	call guipiorko,setz
	new anima,gguiglass
	push "scripts/sys_gui/szkielko.pyz"
	call gguiglass,load
	push iSzkielkoZ
	call gguiglass,setz
	call gguiglass,hide
	new anima,gguipopup
	push "scripts/sys_gui/popup.pyz"
	call gguipopup,load
	push iPopupZ
	call gguipopup,setz
	call gguipopup,hide
	push A
	push "guihint"
	push "guirose"
	push "gguiglass"
	push "movoffsetl"
	cthis with
	push A
	push "gguimenu"
	push "guipiorko"
	push "movoffsetr"
	cthis with
	new db,dbitems
	push LANGDIR
	push "popup_items.db"
	pop $b
	popax
	add $a,$b
	call dbitems,load
	new font,fnthogui
	push "hoguifont:"
	call dbconf,dbget
	push "item_txtname_size:"
	call dbconf,dbget
	call fnthogui,load
	end method
	method load
	push "dbitems"
	call dbitems,addtogamevars
	push "globalhint"
	call guihint,addtogamevars
	push "globalrose"
	call guirose,addtogamevars
	push "globalmenu"
	call gguimenu,addtogamevars
	push "globalshowhint"
	call gguishowhint,addtogamevars
	push "globalloupe"
	call guiloupe,addtogamevars
	push "globalpopexit"
	call anpopexit,addtogamevars
	push "globalpiorko"
	call guipiorko,addtogamevars
	push "globalpopup"
	call gguipopup,addtogamevars
	push "globalglass"
	call gguiglass,addtogamevars
	push "fnthogui"
	call fnthogui,addtogamevars
	call banbook,load
	end method
	end class

	new BanGuiSrc,banguisrc
	class BanBook
	method init
	new anima,ansysbook
	push "scripts/sys_book/book2.pyz"
	call ansysbook,load
	call ansysbook,hide
	new db,dbbook
	push LANGDIR
	push "sys_book_story.db"
	pop $b
	popax
	add $a,$b
	call dbbook,loadscript
	new img,imgrozkladl
	new img,imgrozkladr
	new int,bookfontsize
	push "bookfontsize:"
	call dbconf,dbgetint
	pop bookfontsize
	new int,ibookodstep
	push "ibookodstep:"
	call dbconf,dbgetint
	pop ibookodstep
	new int,ilettersinrow
	push "ilettersinrow:"
	call dbconf,dbgetint
	pop ilettersinrow
	new font,ftbook
	push "bookfont:"
	call dbconf,dbget
	push bookfontsize
	call ftbook,load
	new font,ftitalic
	push "bookitalic:"
	call dbconf,dbget
	push bookfontsize
	call ftitalic,load
	new font,ftbold
	push "bookbold:"
	call dbconf,dbget
	push bookfontsize
	call ftbold,load
	new font,ftitalicbold
	push "bookitalicbold:"
	call dbconf,dbget
	push bookfontsize
	call ftitalicbold,load
	new int,irbook
	push "bookfontcolor:"
	push 1
	call dbconf,dbgets
	pop irbook
	new int,igbook
	push "bookfontcolor:"
	push 2
	call dbconf,dbgets
	pop igbook
	new int,ibbook
	push "bookfontcolor:"
	push 3
	call dbconf,dbgets
	pop ibbook
	new real,rmargin
	push "bookmargin:"
	call dbconf,dbget
	pop rmargin
	new text,txttest
	push "ftbook"
	call txttest,setfont
	new int,icurpage
	push 1
	pop icurpage
	new vector,vakap
	push "string"
	call vakap,type
	new string,sakappref
	push "s"
	pop sakappref
	new int,ilepages
	push 0
	pop ilepages
	new vector,vparse
	push "string"
	call vparse,type
	new int,ipagew
	push 1.0
	push rmargin
	push 2
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call ansysbook,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	mul $a,$b
	pop ipagew
	new int,ipageh
	push 1.0
	push rmargin
	push 2
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call ansysbook,geth
	pop $b
	popax
	mul $a,$b
	pop ipageh
	new int,ilpagex
	call ansysbook,getpx
	push rmargin
	call ansysbook,getw
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop ilpagex
	new int,ilpagey
	call ansysbook,getpy
	push rmargin
	call ansysbook,geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop ilpagey
	localint $1
	call ansysbook,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	localint $2
	call ansysbook,geth
	pop $2
	new int,irpagex
	push ilpagex
	push $1
	pop $b
	popax
	add $a,$b
	pop irpagex
	new int,irpagey
	push ilpagey
	pop irpagey
	push $1
	push $2
	cthis transparent
	call imgrozkladl,create
	call ansysbook,getpx
	call ansysbook,getpy
	call imgrozkladl,setpos
	push $1
	push $2
	cthis transparent
	call imgrozkladr,create
	call imgrozkladl,getex
	call imgrozkladl,getpy
	call imgrozkladr,setpos
	new anima,angguibook
	push "scripts/sys_book/guibook.pyz"
	call angguibook,load
	call angguibook,hide
	push iBookZ
	call angguibook,setz
	call angguibook,movoffsetr
	end method
	method load
	push "globalsysbook"
	call ansysbook,addtogamevars
	push "bookpagel"
	call imgrozkladl,addtogamevars
	push "bookpager"
	call imgrozkladr,addtogamevars
	push A
	push "ipagelw"
	call imgrozkladl,getw
	push "ipagerw"
	call imgrozkladr,getw
	cthis vars2
	push "globalguibook"
	call angguibook,addtogamevars
	end method
	method parse
	localint $1
	push 0
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	push 1
	pop $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	push ""
	pop $12
	push ""
	pop $13
	localint $15
	push 0
	pop $15
	localint $16
	push ipageh
	cthis rowh
	pop $b
	popax
	div $a,$b
	psax
	pop $16
	localint $17
	push 0
	pop $17
l4128:
	push $17
	call dbbook,getrowsno
	cmpjl
	cmp0
	je l4129
	jmp l4131
l4130:
	add $17,1
	pop $17
	jmp l4128
l4131:
	localint $18
	push 0
	pop $18
l4132:
	push $18
	push $17
	call dbbook,getcolsno
	cmpjl
	cmp0
	je l4133
	jmp l4135
l4134:
	add $18,1
	pop $18
	jmp l4132
l4135:
	push $17
	push $18
	call dbbook,get
	pop $11
	push $1
	push 0
	cmpje
	cmp0
	je l4137
	push 0
	push 1
	call $11,getb
	push "<"
	cmpje
	cmp0
	je l4139
	push sakappref
	push 1
	call $11,strsubb
	spushs
	push 1
	spop $h
	call $h,strsube
	pop $b
	popax
	add $a,$b
	pop $14
	push 0
	pop $6
	push 0
	pop $7
	push " "
	call $14,contains
	cmp0
	je l4141
	push $14
	push " "
	call vparse,vecbuildfromstring
	push "italic"
	call vparse,contains
	pop $6
	push "bold"
	call vparse,contains
	pop $7
l4141:
	push $14
	spushs
	spop $e
	new string,[$e]
	push "    "
	pop $12
	push $12
	pop $13
	push 0
	pop $7
	push $14
	spushs
	push A
	push "sakapit"
	push sakappref
	call $14,strsubbs
	push "pageside"
	push $2
	push "page"
	push $3
	push "irow"
	push $15
	push "bitalic"
	push $6
	push "bbold"
	push $7
	push "stresc"
	push ""
	push "ilines"
	push 0
	spop $a
	call [$a],vars2
	push $14
	call vakap,add
	push 1
	pop $1
l4139:
	jmp l4136
l4137:
	push $1
	push 1
	cmpje
	cmp0
	je l4143
	push $11
	push "<end>"
	cmpje
	cmp0
	je l4145
	push 0
	pop $1
	push $14
	spushs
	push $12
	spop $a
	call [$a],stresc=
	push $14
	spushs
	push "sline"
	push $7
	pop $b
	popax
	add $a,$b
	push $13
	spop $a
	call [$a],var2
	push $14
	spushs
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ilines=
	push ""
	pop $12
	push $14
	spushs
	spop $a
	call [$a],irow
	push $7
	pop $b
	popax
	add $a,$b
	push $16
	cmpja
	cmp0
	je l4147
	push $14
	spushs
	push 0
	spop $a
	call [$a],irow=
	push $2
	push 0
	cmpje
	cmp0
	je l4149
	push 1
	pop $2
	push $14
	spushs
	push 1
	spop $a
	call [$a],pageside=
	jmp l4148
l4149:
	push 0
	pop $2
	push $14
	spushs
	push 0
	spop $a
	call [$a],pageside=
	add $3,1
	pop $3
	push $14
	spushs
	push $3
	spop $a
	call [$a],page=
l4148:
	push $7
	push 2
	pop $b
	popax
	add $a,$b
	pop $15
	jmp l4146
l4147:
	push $14
	spushs
	spop $a
	call [$a],irow
	push $7
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	add $a,$b
	pop $15
l4146:
	push 0
	pop $7
	push $3
	pop ilepages
	jmp l4144
l4145:
	push $11
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	push $13
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,length
	push ilettersinrow
	cmpja
	cmp0
	je l4151
	push $14
	spushs
	push "sline"
	push $7
	pop $b
	popax
	add $a,$b
	push $13
	spop $a
	call [$a],var2
	push $11
	push " "
	pop $b
	popax
	add $a,$b
	pop $13
	add $7,1
	pop $7
	jmp l4150
l4151:
	push $11
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $13,$a
	pop $13
l4150:
l4144:
l4143:
l4136:
	jmp l4134
l4133:
	jmp l4130
l4129:
	end method
	method rowh
	push bookfontsize
	push ibookodstep
	pop $b
	popax
	add $a,$b
	end method
	method nextpage
	push icurpage
	push 1
	pop $b
	popax
	add $a,$b
	cthis openpage
	end method
	method prevpage
	push icurpage
	push 1
	pop $b
	popax
	sub $a,$b
	cthis openpage
	end method
	method openpage
	localint $1
	pop $1
	push ilepages
	push 0
	cmpjle
	cmp0
	je l4153
	ret
l4153:
	push $1
	push 0
	cmpjle
	cmp0
	je l4155
	push ilepages
	pop $1
	jmp l4154
l4155:
	push $1
	push ilepages
	cmpja
	cmp0
	je l4157
	push 1
	pop $1
l4157:
l4154:
	push $1
	pop icurpage
	localint $2
	push 0
	pop $2
l4158:
	push $2
	call vakap,size
	cmpjl
	cmp0
	je l4159
	jmp l4161
l4160:
	add $2,1
	pop $2
	jmp l4158
l4161:
	push $2
	call vakap,get
	spushs
	spop $a
	call [$a],page
	push $1
	cmpje
	cmp0
	je l4163
	push $2
	call vakap,get
	cthis open
	call imgrozkladl,show
	call imgrozkladr,show
	ret
l4163:
	jmp l4160
l4159:
	end method
	method openlastpage
	push "guibook_curpage"
	call clsave,get
	pop icurpage
	push icurpage
	push 0
	cmpjle
	cmp0
	je l4165
	push 1
	pop icurpage
l4165:
	push icurpage
	cthis openpage
	end method
	method openchapter
	localstring $1
	pop $1
	push sakappref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call vakap,contains
	neg
	cmp0
	je l4167
	ret
l4167:
	push $1
	cthis open
	end method
	method openlast
	call vakap,empty
	cmp0
	je l4169
	ret
l4169:
	localdef $1
	push "guibook_lastchapter"
	call clsave,get
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l4171
	call vakap,first
	spushs
	push sakappref
	spop $h
	call $h,strsubbs
	pop $1
l4171:
	push $1
	cthis openchapter
	end method
	method open
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],page
	pop icurpage
	push "guibook_curpage"
	push icurpage
	call clsave,set
	new text,txt1
	localdef $2
	call imgrozkladl,getpx
	pop $2
	localdef $3
	call imgrozkladl,getpy
	pop $3
	call imgrozkladl,getw
	call imgrozkladl,geth
	cthis transparent
	call imgrozkladl,create
	push iBookZ
	push 1
	pop $b
	popax
	add $a,$b
	call imgrozkladl,setz
	push $2
	push $3
	call imgrozkladl,setpos
	call imgrozkladl,hide
	localdef $2
	call imgrozkladr,getpx
	pop $2
	localdef $3
	call imgrozkladr,getpy
	pop $3
	call imgrozkladr,getw
	call imgrozkladr,geth
	cthis transparent
	call imgrozkladr,create
	call imgrozkladr,hide
	push iBookZ
	push 1
	pop $b
	popax
	add $a,$b
	call imgrozkladr,setz
	push $2
	push $3
	call imgrozkladr,setpos
	localdef $4
	push $1
	spushs
	spop $a
	call [$a],page
	pop $4
	localint $5
	push 0
	pop $5
l4172:
	push $5
	call vakap,size
	cmpjl
	cmp0
	je l4173
	jmp l4175
l4174:
	add $5,1
	pop $5
	jmp l4172
l4175:
	localdef $6
	push $5
	call vakap,get
	pop $6
	push $6
	spushs
	spop $a
	call [$a],page
	push $4
	cmpje
	cmp0
	je l4177
	push "guibook_enabled_"
	push $6
	spushs
	spop $a
	call [$a],sakapit
	pop $b
	popax
	add $a,$b
	call clsave,bis
	jmp l4179
l4177:
	push 0
	jmp l4179
l4178:
	push 1
l4179:
	cmp0
	je l4180
	push $6
	spushs
	spop $a
	call [$a],bitalic
	cmp0
	je l4182
	push $6
	spushs
	spop $a
	call [$a],bbold
	cmp0
	je l4184
	push "ftitalicbold"
	call txt1,setfont
	jmp l4183
l4184:
	push "ftitalic"
	call txt1,setfont
l4183:
	jmp l4181
l4182:
	push $6
	spushs
	spop $a
	call [$a],bbold
	cmp0
	je l4186
	push "ftbold"
	call txt1,setfont
	jmp l4185
l4186:
	push "ftbook"
	call txt1,setfont
l4185:
l4181:
	localdef $7
	push $6
	spushs
	spop $a
	call [$a],ilines
	pop $7
	localint $8
	push 0
	pop $8
l4187:
	push $8
	push $7
	cmpjl
	cmp0
	je l4188
	jmp l4190
l4189:
	add $8,1
	pop $8
	jmp l4187
l4190:
	push $6
	spushs
	push "sline"
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	call txt1,set
	push irbook
	push igbook
	push ibbook
	call txt1,createtxt
	push $6
	spushs
	spop $a
	call [$a],pageside
	push 0
	cmpje
	cmp0
	je l4192
	push ilpagex
	push ilpagey
	push $6
	spushs
	spop $a
	call [$a],irow
	push $8
	pop $b
	popax
	add $a,$b
	cthis rowh
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call txt1,setpos
	push "txt1"
	call imgrozkladl,blit
	jmp l4191
l4192:
	push irpagex
	push ilpagey
	push $6
	spushs
	spop $a
	call [$a],irow
	push $8
	pop $b
	popax
	add $a,$b
	cthis rowh
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call txt1,setpos
	push "txt1"
	call imgrozkladr,blit
l4191:
	jmp l4189
l4188:
l4180:
	jmp l4174
l4173:
	delete txt1
	end method
	method close
	call imgrozkladl,hide
	call imgrozkladr,hide
	end method
	end class

	new BanBook,banbook
	class BanGui
	method init
	new gmimgvec,grguiloupe
	end method
	method isadvclass
	call gameapi,getgamename
	spushs
	push "clcamera"
	spop $a
	call [$a],hasvar
	end method
	method initgui
	localdef $1
	cthis getgraphpath
	pop $1
	push "sys_gui"
	cthis path=
	new int,iItemSlots
	push 8
	pop iItemSlots
	push "guinventory"
	push "inventory.pyz"
	push iGuiZ
	cthis newanima
	push "guitemslot"
	push "items.pyz"
	push iGuiZ
	cthis newanima
	push "guileft"
	push "itemleft.pyz"
	push iGuiZ
	cthis newanima
	push "guiright"
	push "itemright.pyz"
	push iGuiZ
	cthis newanima
	call guileft,hide
	call guiright,hide
	push "globalhint"
	push "guihint"
	cthis copyanima
	call guihint,show
	push iGuiZ
	call guihint,setz
	push "guihint"
	push "guihinsub"
	cthis copyanima
	push 1
	call guihinsub,play
	push "globalrose"
	push "guirose"
	cthis copyanima
	call guirose,show
	push "globalmenu"
	push "guimenu"
	cthis copyanima
	call guimenu,show
	push "globalshowhint"
	push "guishowhint"
	cthis copyanima
	call guishowhint,hide
	push "guishowhint"
	push "guishowhint2"
	cthis copyanima
	push "guishowhint"
	push "guishowhint3"
	cthis copyanima
	push "globalglass"
	push "guiglass"
	cthis copyanima
	call guiglass,show
	push "globalloupe"
	push "guiloupe"
	cthis copyanima
	push iSzkielkoZ
	call guiloupe,setz
	call guiloupe,hide
	push "guiloupe"
	push "guiloupemask"
	cthis copyanima
	push 1
	push 0
	call guiloupemask,setframe
	call guiloupe,getz
	push 1
	pop $b
	popax
	sub $a,$b
	call guiloupemask,setz
	new filter,ftguiloupe
	new gmimgvec,grgotopckstack
	new gmimgvec,grguitemslots
	localdef $2
	push 3
	pop $2
	call guitemslot,hide
	push bHOInventory
	cmp0
	je l4194
	push "guihoinventory"
	push "hoinventory.pyz"
	push 505
	cthis newanima
	push 505
	call guinventory,setz
	call guinventory,hide
	jmp l4193
l4194:
	localint $3
	push 0
	pop $3
l4195:
	push $3
	push iItemSlots
	cmpjl
	cmp0
	je l4196
	jmp l4198
l4197:
	add $3,1
	pop $3
	jmp l4195
l4198:
	cthis additemslot
	jmp l4197
l4196:
	push A
	push "blockout"
	push 0
	push "sitemshow"
	push "null"
	call guinventory,vars2
	call guinventory,show
l4193:
	localstring $4
	cthis isadvclass
	cmp0
	je l4200
	push "clickon"
	pop $4
	push "guinventory"
	push "guinventory"
	push "guinventory"
	clparent classadvbut,setasbutton2
	push "butisin"
	push "BanGui0"
	call guinventory,addmethod
	jmp l4199
l4200:
	push bHOInventory
	neg
	cmp0
	je l4205
	call guinventory,BanGui1
l4205:
l4199:
	push "_timinv"
	push "BanGui4"
	cthis cycle=
	push A
	push "dir"
	push 1
	popax
	sub 0,$a
	push "speed"
	push 15
	call _timinv,vars2
	push "timunblockinventory"
	push 2000
	push "BanGui5"
	cthis timer=
	cthis isadvclass
	cmp0
	je l4225
	push "clickon"
	pop $4
	push "guihint"
	push "guihint"
	push "guihint"
	clparent classadvbut,setasbutton2
	push "guiglass"
	push "guiglass"
	push "guiglass"
	clparent classadvbut,setasbutton2
	push "loupe"
	call guiglass,smousecursor=
	jmp l4224
l4225:
	call guinventory,BanGui6
	call guiglass,BanGui9
	call guihint,BanGui12
	push "butclick"
	pop $4
l4224:
	push $4
	push "BanGui15"
	call guiglass,addmethod
	push $4
	push "BanGui17"
	call guihint,addmethod
	push "onfinish"
	push "BanGui18"
	call guihint,addmethod
	push $1
	cthis setgraphpath
	new string,_clicked_guiitem
	cthis freeactitem
	cthis isadvclass
	cmp0
	je l4266
	new advDelayMover,guimov
	jmp l4265
l4266:
	new DelayMover,guimov
	push 1
	call guimov,b2clicks=
l4265:
	call guimov,unlock
	new gmimgvec,grguitems
	new string,sanitemprefix
	push "anitem_"
	pop sanitemprefix
	cthis book_load
	push bHOInventory
	neg
	cmp0
	je l4268
	localint $3
	push 0
	pop $3
l4269:
	push $3
	call grguipck,size
	cmpjl
	cmp0
	je l4270
	jmp l4272
l4271:
	add $3,1
	pop $3
	jmp l4269
l4272:
	push $3
	call grguipck,get
	cthis _addtopck
	jmp l4271
l4270:
	cthis inventory_show
	push 0
	push 0
	push 0
	push 0
	new Rect,invhide
	push 0
	call guinventory,getpy
	push igmappw
	push igmapph
	call invhide,setborders
	cthis inventory_hide
	push 0
	push 0
	push 0
	push 0
	new Rect,invshow
	call guileft,getex
	call guinventory,getpy
	call guiright,getpx
	push igmapph
	call invshow,setborders
l4268:
	end method
	method BanGui0
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l4201
	push $1
	cthis getex
	cmpjl
	cmp0
	je l4201
	push $2
	cthis getpy
	cmpjae
	jmp l4203
l4201:
	push 0
	jmp l4203
l4202:
	push 1
l4203:
	end method
	method BanGui1
	cthis Button_isin
	push "butmoveon"
	push "BanGui2"
	cthis addmethod
	push "butmoveoff"
	push "BanGui3"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method BanGui2
	cthis advstdstate
	neg
	cmp0
	je l4207
	ret
l4207:
	call advmouse,setact
	end method
	method BanGui3
	cthis advstdstate
	neg
	cmp0
	je l4209
	ret
l4209:
	call advmouse,setstd
	end method
	method BanGui4
	localdef $1
	push dir
	push speed
	pop $b
	popax
	mul $a,$b
	pop $1
	push dir
	push 0
	cmpja
	cmp0
	je l4211
	cthis inventory_hidden
	cmp0
	je l4213
	jmp l4212
l4213:
	push $1
	cthis inventory_move
	cthis play
l4212:
	jmp l4210
l4211:
	cthis inventory_showed
	cmp0
	je l4215
	localint $2
	push 0
	pop $2
l4216:
	push $2
	call grgotopckstack,size
	cmpjl
	cmp0
	je l4217
	jmp l4219
l4218:
	add $2,1
	pop $2
	jmp l4216
l4219:
	push $2
	call grgotopckstack,get
	spushs
	spop $a
	call [$a],_item_gotopck2
	jmp l4218
l4217:
	cthis isretitemstate
	cmp0
	je l4221
	cthis item_gotopck
	jmp l4220
l4221:
	call guinventory,sitemshow
	push "null"
	cmpjne
	cmp0
	je l4223
	call guinventory,sitemshow
	cthis getanitem
	cthis showhint
	push "null"
	call guinventory,sitem=
l4223:
l4220:
	jmp l4214
l4215:
	push $1
	cthis inventory_move
	cthis inventory_showed
	popax
	cthis play
l4214:
l4210:
	end method
	method BanGui5
	push 0
	call guinventory,blockout=
	end method
	method BanGui6
	cthis Button_isinalpha
	push "butmoveon"
	push "BanGui7"
	cthis addmethod
	push "butmoveoff"
	push "BanGui8"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method BanGui7
	cthis advstdstate
	neg
	cmp0
	je l4227
	ret
l4227:
	call advmouse,setact
	end method
	method BanGui8
	cthis advstdstate
	neg
	cmp0
	je l4229
	ret
l4229:
	call advmouse,setstd
	end method
	method BanGui9
	cthis Button_isinalpha
	push "butmoveon"
	push "BanGui10"
	cthis addmethod
	push "butmoveoff"
	push "BanGui11"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method BanGui10
	cthis advstdstate
	neg
	cmp0
	je l4231
	ret
l4231:
	call advmouse,setact
	end method
	method BanGui11
	cthis advstdstate
	neg
	cmp0
	je l4233
	ret
l4233:
	call advmouse,setstd
	end method
	method BanGui12
	cthis Button_isinalpha
	push "butmoveon"
	push "BanGui13"
	cthis addmethod
	push "butmoveoff"
	push "BanGui14"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method BanGui13
	cthis advstdstate
	neg
	cmp0
	je l4235
	ret
l4235:
	call advmouse,setact
	end method
	method BanGui14
	cthis advstdstate
	neg
	cmp0
	je l4237
	ret
l4237:
	call advmouse,setstd
	end method
	method BanGui15
	cthis LOUPE_CLICK
	cthis isadvclass
	cmp0
	je l4239
	push "beh_LOUPE_CLICK"
	cthis playbehif
	popax
l4239:
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 0
	cmpje
	cmp0
	je l4241
	push 1
	push 0
	cthis setframe
	call guiloupe,show
	call grguiloupe,size
	cmp0
	je l4243
	call guiloupemask,show
	push "guiloupemask"
	call ftguiloupe,link
	localint $1
	push 0
	pop $1
l4244:
	push $1
	call grguiloupe,size
	cmpjl
	cmp0
	je l4245
	jmp l4247
l4246:
	add $1,1
	pop $1
	jmp l4244
l4247:
	localdef $2
	push $1
	call grguiloupe,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],mtype
	push "loupe"
	cmpje
	cmp0
	je l4249
	push $2
	call ftguiloupe,loupe
	jmp l4248
l4249:
	push $2
	spushs
	spop $a
	call [$a],mtype
	push "umask"
	cmpje
	cmp0
	je l4251
	push $2
	spushs
	spop $a
	call [$a],startumask
l4251:
l4248:
	jmp l4246
l4245:
l4243:
	cthis update_loupepos
	jmp l4240
l4241:
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	cmpje
	cmp0
	je l4253
	call ftguiloupe,removeallblend
	call ftguiloupe,unlink
	call guiloupe,hide
	call guiloupemask,hide
	push "BanGui16"
	call grguiloupe,eval
	push 0
	push 0
	cthis setframe
l4253:
l4240:
	end method
	method BanGui16
	push mtype
	push "umask"
	cmpje
	cmp0
	je l4255
	cthis stopumask
l4255:
	end method
	method BanGui17
	cthis isadvclass
	cmp0
	je l4257
	cthis actionname
	push "hint"
	cmpje
	cmp0
	je l4259
	call guihinsub,anhide
	call guirose,anhide
	push "click"
	cthis play
	push "beh_HINT_CLICK"
	cthis playbehif
	popax
l4259:
	jmp l4256
l4257:
	cthis advstdstate
	neg
	cmp0
	je l4261
	ret
l4261:
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],HINT_CLICK
l4256:
	end method
	method BanGui18
	cthis actionname
	spushs
	push "click"
	cmpst
	jne l4263
	spop $a
	push "grow"
	cthis play
	jmp l4262
l4263:
	push "grow"
	cmpst
	jne l4264
	spop $a
	push "hint"
	cthis play
	push 1
	call guihinsub,play
	push 0
	call guirose,play
	jmp l4262
l4264:
	spop $a
l4262:
	end method
	method loupe_visible
	call guiloupe,isvisible
	end method
	method update_loupepos
	cthis loupe_visible
	cmp0
	je l4274
	call mouse,getpos
	call guiloupe,setpos
	call mouse,getpos
	call guiloupemask,setpos
l4274:
	end method
	method showhint
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis showhintxy
	end method
	method showhintxy
	localint $1
	localint $2
	pop $2
	pop $1
	push 1
	popax
	sub 0,$a
	call guishowhint,isplaying
	cmp0
	je l4276
	push 1
	popax
	sub 0,$a
	call guishowhint2,isplaying
	cmp0
	je l4278
	push 1
	popax
	sub 0,$a
	call guishowhint3,isplaying
	cmp0
	je l4280
	push $1
	push $2
	call guishowhint,_showhint
	jmp l4279
l4280:
	push $1
	push $2
	call guishowhint3,_showhint
l4279:
	jmp l4277
l4278:
	push $1
	push $2
	call guishowhint2,_showhint
l4277:
	jmp l4275
l4276:
	push $1
	push $2
	call guishowhint,_showhint
l4275:
	end method
	method _showhint
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method showhintitem
	localstring $1
	pop $1
	push 1
	call guinventory,blockout=
	push $1
	call guinventory,sitemshow=
	cthis inventory_playing
	cmp0
	jne l4283
	cthis inventory_hidden
	jmp l4284
l4282:
	push 0
	jmp l4284
l4283:
	push 1
l4284:
	cmp0
	je l4285
	cthis inventory_in
	jmp l4281
l4285:
	push $1
	cthis getanitem
	cthis showhint
l4281:
	end method
	method book_load
	localdef $1
	cthis getgraphpath
	pop $1
	push "sys_book"
	cthis path=
	push "globalsysbook"
	push "ansysbook"
	cthis copyanima
	push iBookZ
	call ansysbook,setz
	call ansysbook,hide
	push "guibooknext"
	push "next.pyz"
	push iBookZ
	cthis newanima
	push "guibookprev"
	push "prev.pyz"
	push iBookZ
	cthis newanima
	push "guibookexit"
	push "exit.pyz"
	push iBookZ
	cthis newanima
	new gmimgvec,grguibook
	push A
	push "guibookexit"
	push "guibooknext"
	push "guibookprev"
	call grguibook,addlist
	call grguibook,hide
	push "Button_isin"
	call grguibook,eval
	call guibookexit,Button_moveonms
	call guibookexit,Button_moveoffms
	push "butclick"
	push "BanGui19"
	call guibookexit,addmethod
	push "butclick"
	push "BanGui20"
	call guibooknext,addmethod
	push "butclick"
	push "BanGui21"
	call guibookprev,addmethod
	push "grguibook"
	call butgame,addgroup
	push "globalguibook"
	push "anguibook"
	cthis copyanima
	call anguibook,show
	localstring $2
	cthis isadvclass
	cmp0
	je l4293
	push "clickon"
	pop $2
	push "anguibook"
	push "guibook"
	push "book"
	clparent classadvbut,setasbutton2
	jmp l4292
l4293:
	call anguibook,BanGui22
	push "butclick"
	pop $2
l4292:
	push $2
	push "BanGui26"
	call anguibook,addmethod
	push "ansysbook"
	push iRotoIleRot
	push iRotoIleObrotow
	clparent GuiItem,setasrototaker
	new img,imbookpage1
	push iBookZ
	call imbookpage1,setz
	call ansysbook,BanGui27
	push $1
	cthis setgraphpath
	end method
	method BanGui19
	push sgmstate
	push "state_bookopened"
	cmpje
	cmp0
	je l4287
	cthis gui_closebook
l4287:
	end method
	method BanGui20
	push sgmstate
	push "state_bookopened"
	cmpje
	cmp0
	je l4289
	call banbook,nextpage
l4289:
	end method
	method BanGui21
	push sgmstate
	push "state_bookopened"
	cmpje
	cmp0
	je l4291
	call banbook,prevpage
l4291:
	end method
	method BanGui22
	push "isbutin"
	push "BanGui23"
	cthis addmethod
	push "butmoveon"
	push "BanGui24"
	cthis addmethod
	push "butmoveoff"
	push "BanGui25"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method BanGui23
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $3
	localdef $4
	cthis framenr
	pop $4
	push 0
	push 0
	cthis setframe
	push $1
	push $2
	push 1
	push 1
	cthis isin
	push $3
	push $4
	cthis setframe
	end method
	method BanGui24
	cthis advstdstate
	neg
	cmp0
	je l4295
	ret
l4295:
	call advmouse,setact
	end method
	method BanGui25
	cthis advstdstate
	neg
	cmp0
	je l4297
	ret
l4297:
	call advmouse,setstd
	end method
	method BanGui26
	cthis advstdstate
	cmp0
	je l4299
	cthis gui_openbook
l4299:
	end method
	method BanGui27
	push A
	push "bookstate"
	push "bookstate_init"
	push "sbehaviour"
	push "null"
	cthis vars2
	push "showbook"
	push "BanGui28"
	cthis addmethod
	push "hidebook"
	push "BanGui30"
	cthis addmethod
	end method
	method BanGui28
	push bookstate
	push "bookstate_init"
	cmpje
	cmp0
	je l4301
	push "bookstate_open"
	pop bookstate
	call banbook,openlastpage
	cthis buildimgbook
	call bookpagel,hide
	call bookpager,hide
	push ishowpouptime
	push "BanGui29"
	call imbookpage1,anzoomfadein
l4301:
	end method
	method BanGui29
	cthis hide
	call ansysbook,show
	call bookpagel,show
	call bookpager,show
	localdef $1
	call ansysbook,sbehaviour
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l4303
	push "null"
	call ansysbook,sbehaviour=
	push $1
	spushs
	spop $a
	call [$a],reteval
	jmp l4302
l4303:
	push "state_bookopened"
	cthis advsetstate
	call grguibook,show
l4302:
	end method
	method BanGui30
	push "bookstate_close"
	pop bookstate
	cthis buildimgbook
	cthis hide
	call grguibook,hide
	call bookpagel,hide
	call bookpager,hide
	push ishowpouptime
	push "null"
	call anguibook,anfadein
	push ishowpouptime
	push "BanGui31"
	call imbookpage1,anzoomfadeout
	end method
	method BanGui31
	cthis hide
	push "bookstate_init"
	call ansysbook,bookstate=
	call ansysbook,sbehaviour
	push "null"
	cmpjne
	cmp0
	je l4305
	localdef $1
	call ansysbook,sbehaviour
	pop $1
	push "null"
	call ansysbook,sbehaviour=
	push $1
	spushs
	spop $a
	call [$a],reteval
	jmp l4304
l4305:
	cthis advinitial
l4304:
	end method
	method buildimgbook
	push A
	push "ansysbook"
	push "bookpagel"
	push "bookpager"
	push "guibooknext"
	push "guibookprev"
	push "guibookexit"
	call imbookpage1,imgbuildfromlist
	end method
	method gui_openbook
	cthis advmslock
	call globalpiorko,anhide
	call ansysbook,sbehaviour
	push "null"
	cmpje
	cmp0
	je l4307
	push "state_bookopen"
	cthis advsetstate
l4307:
	push ishowpouptime
	push "null"
	call anguibook,anfadeout
	call ansysbook,showbook
	end method
	method gui_closebook
	cthis advmslock
	call ansysbook,sbehaviour
	push "null"
	cmpje
	cmp0
	je l4309
	push "state_bookclose"
	cthis advsetstate
l4309:
	call bookpagel,hide
	call grguibook,hide
	call ansysbook,hidebook
	end method
	method gui_toloupe
	localstring $1
	pop $1
	push $1
	spushs
	push "mtype"
	push "loupe"
	spop $a
	call [$a],var2
	push $1
	call grguiloupe,add
	call grguiloupe,sortimgs
	end method
	method subanalizeaninstr
	localstring $1
	localstring $2
	localint $3
	localint $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	push "null"
	cmpjne
	pop $6
	localint $7
	localint $8
	push $5
	spushs
	push "-toloupe"
	cmpst
	jne l4311
	spop $a
	push $6
	cmp0
	je l4313
	push $1
	cthis gui_toloupe
l4313:
	jmp l4310
l4311:
	push "-loupeumask"
	cmpst
	jne l4314
	spop $a
	push $6
	cmp0
	je l4316
	push $1
	spushs
	spop $a
	call [$a],BanGui32
	push $1
	call grguiloupe,add
l4316:
	jmp l4310
l4314:
	push "-popz"
	cmpst
	jne l4317
	spop $a
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	push $6
	cmp0
	je l4319
	push $1
	spushs
	push iPopupZ
	push $7
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
l4319:
	jmp l4310
l4317:
	spop $a
	sub $4,1
	pop $4
l4310:
	push $4
	end method
	method BanGui32
	push "mtype"
	push "umask"
	cthis var2
	new filter,ftumask
	push "startumask"
	push "BanGui33"
	cthis addmethod
	push "stopumask"
	push "BanGui34"
	cthis addmethod
	end method
	method BanGui33
	cthis getname
	call ftumask,link
	push "guiloupemask"
	call ftumask,umask
	end method
	method BanGui34
	call ftumask,removeallblend
	call ftumask,unlink
	end method
	method subanalizebut
	localstring $1
	localstring $2
	localint $3
	localint $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	spushs
	push "-inloupe"
	cmpst
	jne l4321
	spop $a
	push $1
	spushs
	push "butisin"
	push "BanGui35"
	spop $a
	call [$a],addmethod
	jmp l4320
l4321:
	push "-rotopck"
	cmpst
	jne l4326
	spop $a
	push $1
	cthis setasitemtopck
	jmp l4320
l4326:
	push "-topck"
	cmpst
	jne l4327
	spop $a
	push $1
	cthis setasitemtopck
	push $1
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],sitemtopck=
	add $4,1
	pop $4
	jmp l4320
l4327:
	push "-popup"
	cmpst
	jne l4328
	spop $a
	push "globalpopexit"
	push $1
	push "popexit"
	pop $b
	popax
	add $a,$b
	cthis copyanima
	push $1
	spushs
	spop $a
	call [$a],BanGui36
	jmp l4320
l4328:
	spop $a
l4320:
	push $4
	end method
	method BanGui35
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	call guiloupe,isvisible
	cmp0
	je l4323
	push balpha
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l4325
	push $1
	push $2
	push 0
	push $4
	cthis isin
	jmp l4324
l4325:
	push $1
	push $2
	push 0
	push balpha
	cthis isin
l4324:
	jmp l4322
l4323:
	push 0
l4322:
	end method
	method BanGui36
	push "loupe"
	pop smousecursor
	push A
	push "state"
	push "hidden"
	push "spopexit"
	cthis getname
	push "popexit"
	pop $b
	popax
	add $a,$b
	push "spopwnd"
	cthis getname
	push "_window"
	pop $b
	popax
	add $a,$b
	cthis vars2
	cthis hide
	push spopwnd
	spushs
	spop $a
	call [$a],hide
	push spopwnd
	spushs
	push iPopupZ
	spop $a
	call [$a],setz
	push spopexit
	spushs
	push iPopupZ
	push 100
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push "butisin"
	push "BanGui37"
	cthis addmethod
	push "moveon"
	push "BanGui38"
	cthis addmethod
	push "moveoff"
	push "BanGui39"
	cthis addmethod
	push "clickon"
	push "BanGui40"
	cthis addmethod
	push "hidepopup"
	push "BanGui41"
	cthis addmethod
	push "showpopup"
	push "BanGui42"
	cthis addmethod
	end method
	method BanGui37
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push state
	push "hidden"
	cmpje
	cmp0
	je l4330
	push $1
	push $2
	push 0
	push $4
	cthis isin
	jmp l4329
l4330:
	push spopexit
	spushs
	push $1
	push $2
	push 1
	push 0
	spop $a
	call [$a],isin
	cmp0
	jne l4332
	push spopwnd
	spushs
	push $1
	push $2
	push 1
	push 0
	spop $a
	call [$a],isin
	neg
	jmp l4333
l4331:
	push 0
	jmp l4333
l4332:
	push 1
l4333:
l4329:
	end method
	method BanGui38
	push state
	push "shown"
	cmpje
	cmp0
	je l4335
	call advmouse,setbut
	push spopexit
	spushs
	push 0
	push 1
	spop $a
	call [$a],setframe
	jmp l4334
l4335:
	push smousecursor
	call advmouse,set
l4334:
	end method
	method BanGui39
	call advmouse,setstd
	push state
	push "shown"
	cmpje
	cmp0
	je l4337
	push spopexit
	spushs
	push 0
	push 0
	spop $a
	call [$a],setframe
l4337:
	end method
	method BanGui40
	push state
	push "shown"
	cmpje
	cmp0
	je l4339
	push "beh_"
	cthis getbutname
	pop $b
	popax
	add $a,$b
	push "_QUIT"
	pop $b
	popax
	add $a,$b
	cthis playbehif
	popax
l4339:
	end method
	method BanGui41
	push spopexit
	spushs
	spop $a
	call [$a],hide
	push spopwnd
	spushs
	spop $a
	call [$a],hide
	push "hidden"
	pop state
	end method
	method BanGui42
	push spopexit
	spushs
	spop $a
	call [$a],show
	push spopwnd
	spushs
	spop $a
	call [$a],show
	push spopexit
	spushs
	push spopwnd
	spushs
	spop $a
	call [$a],getex
	push 2
	pop $b
	popax
	sub $a,$b
	push spopwnd
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],setpos
	push "shown"
	pop state
	end method
	method setasitemtopck
	localstring $1
	pop $1
	push $1
	push iRotoIleRot
	push iRotoIleObrotow
	clparent GuiItem,setasrototaker
	push $1
	spushs
	push A
	push "styperoto"
	push "init"
	push "sbehstate"
	push "behstate_playbeh"
	push "sitemtopck"
	push "null"
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "rototaker_endroto"
	push "BanGui43"
	spop $a
	call [$a],addmethod
	cthis isadvclass
	cmp0
	je l4361
	push $1
	spushs
	push "clickon"
	push "BanGui44"
	spop $a
	call [$a],addmethod
	jmp l4360
l4361:
	push $1
	spushs
	spop $a
	call [$a],BanGui45
	push $1
	call butgame,add
l4360:
	end method
	method BanGui43
	push styperoto
	push "startroto"
	cmpje
	cmp0
	je l4341
	cthis isadvclass
	cmp0
	je l4343
	push sbehstate
	push "behstate_nobeh"
	cmpje
	cmp0
	je l4345
	cthis _item_gotopck
	jmp l4344
l4345:
	localdef $1
	push "beh_"
	cthis getbutname
	pop $b
	popax
	add $a,$b
	push "_TAKEN"
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis behexist
	cmp0
	je l4347
	push $1
	cthis playbeh
	jmp l4346
l4347:
	push sgmstate
	push "state_itemgotocenter"
	cmpje
	cmp0
	je l4349
	push "state_itemgotopck"
	cthis advsetstate
l4349:
	cthis _item_gotopck
l4346:
l4344:
	jmp l4342
l4343:
	cthis _item_gotopck
l4342:
	jmp l4340
l4341:
	push styperoto
	push "endroto"
	cmpje
	cmp0
	je l4351
	cthis freeactitem
	push "inpck"
	pop styperoto
	cthis hide
	cthis isadvclass
	cmp0
	je l4353
	push sbehstate
	push "behstate_nobeh"
	cmpjne
	cmp0
	je l4355
	cthis advinitial
	localdef $1
	push "beh_"
	cthis getbutname
	pop $b
	popax
	add $a,$b
	push "_INPCK"
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis behexist
	cmp0
	je l4357
	push $1
	cthis playbeh
	jmp l4356
l4357:
l4356:
l4355:
	push sitemtopck
	push "null"
	cmpjne
	cmp0
	je l4359
	push sitemtopck
	cthis addtopck
l4359:
	cthis getname
	call grgotopckstack,remove
	jmp l4352
l4353:
	cthis advinitial
	push GAME
	spushs
	cthis getname
	push "_INPCK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l4352:
l4351:
l4340:
	end method
	method BanGui44
	push styperoto
	push "init"
	cmpje
	cmp0
	je l4363
	localdef $1
	push "beh_"
	cthis getbutname
	pop $b
	popax
	add $a,$b
	push "_TAKE"
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis behexist
	cmp0
	je l4365
	push "behstate_playbeh"
	pop sbehstate
	push $1
	cthis playbeh
	jmp l4364
l4365:
	push "behstate_nobeh"
	pop sbehstate
	cthis _item_gotocenter
l4364:
	jmp l4362
l4363:
	push styperoto
	push "inpck"
	cmpje
	cmp0
	je l4367
l4367:
l4362:
	end method
	method BanGui45
	push A
	push "gettyp"
	push "itemtotake"
	push "disable"
	push 0
	push "bignoralpha"
	push 0
	cthis vars2
	cthis Button_isinalpha
	push "isbutin"
	push "BanGui46"
	cthis addmethod
	push "butmoveon"
	push "BanGui47"
	cthis addmethod
	push "butmoveoff"
	push "BanGui48"
	cthis addmethod
	push "butclick"
	push "BanGui49"
	cthis addmethod
	end method
	method BanGui46
	localdef $1
	localdef $2
	pop $2
	pop $1
	push disable
	neg
	cmp0
	je l4368
	push $1
	push $2
	push 1
	push bignoralpha
	cthis isin
	jmp l4370
l4368:
	push 0
	jmp l4370
l4369:
	push 1
l4370:
	end method
	method BanGui47
	cthis advstdstate
	neg
	cmp0
	je l4372
	ret
l4372:
	push "take"
	call advmouse,set
	end method
	method BanGui48
	cthis advstdstate
	neg
	cmp0
	je l4374
	ret
l4374:
	call advmouse,setstd
	end method
	method BanGui49
	cthis advstdstate
	neg
	cmp0
	je l4376
	ret
l4376:
	push GAME
	spushs
	cthis getname
	push "_TAKE"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],hasmet
	cmp0
	je l4378
	push GAME
	spushs
	cthis getname
	push "_TAKE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l4377
l4378:
	cthis item_gotocenter
l4377:
	end method
	method setactitem
	localstring $1
	pop $1
	push $1
	pop _clicked_guiitem
	end method
	method getactitem
	push _clicked_guiitem
	end method
	method freeactitem
	push "null"
	cthis setactitem
	end method
	method item_gotocenter
	cthis advmslock
	push "state_itemgotocenter"
	cthis advsetstate
	cthis _item_gotocenter
	end method
	method _item_gotocenter
	cthis isadvclass
	cmp0
	je l4380
	localdef $1
	call grbuts,getsfound
	pop $1
	jmp l4379
l4380:
	localdef $1
	call butgame,sclicked
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l4382
	ret
l4382:
l4379:
	push sgmstate
	push "state_itemgotocenter"
	cmpje
	cmp0
	je l4384
	push $1
	spushs
	push "behstate_playbeh"
	spop $a
	call [$a],sbehstate=
	push $1
	cthis setactitem
l4384:
	push $1
	call grguiloupe,contains
	cmp0
	je l4386
	push $1
	spushs
	spop $a
	call [$a],show
	push $1
	cthis remove_from_loupe
l4386:
	push $1
	spushs
	push "rotostart"
	push 0
	spop $a
	call [$a],setframe
	push $1
	spushs
	push "startroto"
	spop $a
	call [$a],styperoto=
	push $1
	spushs
	push iTakeZ
	spop $a
	call [$a],setz
	push $1
	spushs
	cthis getappcenter
	push "rotocenter"
	spop $a
	call [$a],rototaker_startact
	end method
	method item_gotopck
	localdef $1
	cthis getactitem
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l4388
	push $1
	spushs
	spop $a
	call [$a],_item_gotopck2
l4388:
	end method
	method _item_gotopck2
	cthis gettyp
	push "pckitem"
	cmpje
	cmp0
	je l4390
	cthis _pckitem_gotopck
	jmp l4389
l4390:
	cthis _item_gotopck
l4389:
	end method
	method _item_gotopck
	cthis isretitemstate
	cmp0
	je l4392
	cthis advmslock
	push "state_itemgotopck"
	cthis advsetstate
	jmp l4391
l4392:
	cthis getname
	call grgotopckstack,addonce
l4391:
	push bHOInventory
	neg
	cmp0
	je l4394
	cthis inventory_playing
	cmp0
	jne l4397
	cthis inventory_hidden
	jmp l4398
l4396:
	push 0
	jmp l4398
l4397:
	push 1
l4398:
	jmp l4399
l4394:
	push 0
	jmp l4399
l4395:
	push 1
l4399:
	cmp0
	je l4400
	cthis inventory_in
	jmp l4393
l4400:
	push bHOInventory
	cmp0
	je l4402
	localdef $1
	push "guihoinventory"
	pop $1
	jmp l4401
l4402:
	call grguitems,size
	push 1
	pop $b
	popax
	add $a,$b
	call grguitemslots,size
	cmpja
	cmp0
	je l4404
	cthis additemslot
l4404:
	localdef $1
	cthis lastemptyslot
	pop $1
l4401:
	push "endroto"
	pop styperoto
	localdef $2
	cthis actionname
	pop $2
	push "rotopck"
	push 0
	cthis setframe
	localdef $3
	cthis getw
	pop $3
	localdef $4
	cthis geth
	pop $4
	push $2
	push 0
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis getw
	cthis geth
	push $3
	push $4
	cthis rototaker_startwh
l4393:
	end method
	method _pckitem_gotopck
	cthis isretitemstate
	cmp0
	je l4406
	cthis advmslock
	push "state_pckitemgotopck"
	cthis advsetstate
	jmp l4405
l4406:
	cthis getname
	call grgotopckstack,addonce
l4405:
	cthis inventory_playing
	cmp0
	jne l4409
	cthis inventory_hidden
	jmp l4410
l4408:
	push 0
	jmp l4410
l4409:
	push 1
l4410:
	cmp0
	je l4411
	cthis inventory_in
	jmp l4407
l4411:
	cthis saveitemtolastslot
	cthis getname
	call grguitems,addonce
	push 0
	push 0
	cthis setframe
	localdef $1
	cthis getw
	pop $1
	localdef $2
	cthis geth
	pop $2
	push 1
	push 0
	cthis setframe
	push myslot
	spushs
	spop $a
	call [$a],getcx
	push myslot
	spushs
	spop $a
	call [$a],getcy
	cthis getw
	cthis geth
	push $1
	push $2
	cthis rototaker_startwh
l4407:
	end method
	method saveitemtolastslot
	cthis lastemptyslot
	cthis saveitemtoslot
	end method
	method saveitemtoslot
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l4413
	push "sslot = null!"
	spushs
	spop $h
	call $h,print
	jmp l4412
l4413:
	push $1
	pop myslot
	push myslot
	spushs
	cthis getname
	spop $a
	call [$a],myitem=
l4412:
	end method
	method guimov_GET
	cthis advstdstate
	cmp0
	je l4415
	cthis advgetlock
	neg
	cmp0
	je l4415
	call mouse,getpos
	push "BanGui50"
	call grguitems,isinfunc
	jmp l4420
l4415:
	push 0
	jmp l4420
l4416:
	push 1
l4420:
	cmp0
	je l4421
	localdef $1
	call grguitems,getsfound
	pop $1
	push $1
	call grguitems,remove
	push $1
	spushs
	spop $a
	call [$a],myslot
	spushs
	push "null"
	spop $a
	call [$a],myitem=
	push $1
	spushs
	push "null"
	spop $a
	call [$a],myslot=
	push $1
	spushs
	push 1
	spop $a
	call [$a],play
	push $1
	cthis setactitem
	push $1
	cthis mssetobj
	cthis isadvclass
	neg
	cmp0
	je l4423
	push "getitem"
	cthis advsetstate
l4423:
l4421:
	end method
	method BanGui50
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	cmp0
	jne l4418
	push $1
	cthis getcx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getcy
	pop $b
	popax
	sub $a,$b
	call $1,length
	push 25
	cmpjle
	jmp l4419
l4417:
	push 0
	jmp l4419
l4418:
	push 1
l4419:
	end method
	method guimov_PUT
	localdef $1
	cthis getfree
	pop $1
	cthis advgetlock
	neg
	cmp0
	je l4425
	cthis isadvclass
	cmp0
	je l4427
	localdef $2
	cthis advfocusedbut
	pop $2
	localdef $3
	push "beh_USE_"
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	push "null"
	cmpjne
	cmp0
	je l4429
	push $3
	push "_ON_"
	pop $b
	popax
	add $a,$b
	push $2
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	cthis playbehif
	jmp l4431
l4429:
	push 0
	jmp l4431
l4430:
	push 1
l4431:
	cmp0
	je l4432
	jmp l4428
l4432:
	push $3
	cthis playbehif
	neg
	cmp0
	je l4434
	push $1
	spushs
	push "behstate_nobeh"
	spop $a
	call [$a],sbehstate=
	cthis freeactitem
	push $1
	spushs
	spop $a
	call [$a],_pckitem_gotopck
l4434:
l4428:
	jmp l4426
l4427:
	localdef $4
	push "USE_"
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	pop $4
	push GAME
	spushs
	push $4
	spop $a
	call [$a],hasmet
	cmp0
	je l4436
	push GAME
	spushs
	push $4
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l4435
l4436:
	cthis advsetstdstate
	cthis item_gotopck
l4435:
l4426:
l4425:
	end method
	method getanitem
	localstring $1
	pop $1
	push sanitemprefix
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method addtopck
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	spop $a
	call [$a],_addtopck
	end method
	method _addtopck
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis getanitem
	pop $2
	push $2
	call grguitems,contains
	neg
	cmp0
	je l4438
	push bHOInventory
	neg
	cmp0
	je l4440
	push $2
	push "$scripts/adv_items/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	push iTakeZ
	cthis newanima
	push $2
	push iRotoIleRot
	push iRotoIleObrotow
	clparent GuiItem,setasrototaker
	push $2
	spushs
	push A
	push "getbutname"
	push $1
	push "myslot"
	push "null"
	push "gettyp"
	push "pckitem"
	push "sbehstate"
	push "behstate_nobeh"
	spop $a
	call [$a],vars2
	push $2
	spushs
	spop $a
	call [$a],saveitemtolastslot
	push $2
	spushs
	push "rototaker_endroto"
	push "BanGui51"
	spop $a
	call [$a],addmethod
	localdef $3
	push $2
	spushs
	spop $a
	call [$a],myslot
	pop $3
	push $2
	spushs
	push $3
	spushs
	spop $a
	call [$a],getcx
	push $3
	spushs
	spop $a
	call [$a],getcy
	spop $a
	call [$a],setpos
	push $2
	spushs
	push 0
	spop $a
	call [$a],play
l4440:
	push $2
	call grguitems,add
l4438:
	push $1
	cthis saveitemtopck
	end method
	method BanGui51
	push sgmstate
	push "state_pckitemgotopck"
	cmpje
	cmp0
	jne l4443
	push sbehstate
	push "behstate_nobeh"
	cmpje
	jmp l4444
l4442:
	push 0
	jmp l4444
l4443:
	push 1
l4444:
	cmp0
	je l4445
	cthis getname
	call grgotopckstack,remove
	cthis freeactitem
	push 0
	cthis play
	push sgmstate
	push "state_pckitemgotopck"
	cmpje
	cmp0
	je l4447
	cthis advinitial
l4447:
l4445:
	end method
	method saveitemtopck
	localstring $1
	pop $1
	push "ma_"
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	call clsave,set
	push "taken_"
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	call clsave,set
	push $1
	call grguipck,addonce
	end method
	method isretitemstate
	push sgmstate
	push "state_pckitemgotopck"
	cmpje
	cmp0
	jne l4449
	push sgmstate
	push "state_itemgotopck"
	cmpje
	jmp l4450
l4448:
	push 0
	jmp l4450
l4449:
	push 1
l4450:
	end method
	method removefrompck
	localstring $1
	pop $1
	localdef $2
	cthis getactitem
	pop $2
	localdef $3
	push sanitemprefix
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	push $2
	cmpje
	cmp0
	je l4452
	cthis freeactitem
l4452:
	push $3
	spushs
	spop $a
	call [$a],anhide
	push $3
	call grguitems,remove
	push $1
	call grguipck,remove
	push "ma_"
	push $1
	pop $b
	popax
	add $a,$b
	push 0
	call clsave,set
	end method
	method additemslot
	localdef $1
	call grguitemslots,size
	pop $1
	localdef $2
	push "guitemslot"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push "guitemslot"
	push $2
	cthis copyanima
	push $2
	spushs
	spop $a
	call [$a],setslotpos
	push $2
	spushs
	push "myitem"
	push "null"
	spop $a
	call [$a],var2
	cthis isadvclass
	cmp0
	je l4454
	push $2
	push "guislot"
	push $1
	pop $b
	popax
	add $a,$b
	push "guislot"
	clparent classadvbut,setasbutton2
	push $2
	spushs
	push "normal"
	spop $a
	call [$a],smousecursor=
l4454:
	push $2
	call grguitemslots,add
	end method
	method setslotpos
	cthis cliptoguislot
	call grguitemslots,size
	push 1
	cmpjae
	cmp0
	je l4456
	localdef $1
	push 0
	pop $1
	call grguitemslots,size
	push 1
	pop $b
	popax
	sub $a,$b
	call grguitemslots,get
	spushs
	spop $a
	call [$a],getex
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	cthis ansetbpos
l4456:
	end method
	method cliptoguislot
	localdef $1
	push 3
	pop $1
	call guileft,getex
	push $1
	pop $b
	popax
	add $a,$b
	push 0
	call guiright,getpx
	push $1
	pop $b
	popax
	sub $a,$b
	push igmapph
	cthis clip
	end method
	method lastemptyslot
	localint $1
	push 0
	pop $1
l4457:
	push $1
	call grguitemslots,size
	cmpjl
	cmp0
	je l4458
	jmp l4460
l4459:
	add $1,1
	pop $1
	jmp l4457
l4460:
	localdef $2
	push $1
	call grguitemslots,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],myitem
	push "null"
	cmpje
	cmp0
	je l4462
	push $2
	ret
l4462:
	jmp l4459
l4458:
	push "null"
	end method
	method load_pocket
	push "guipocket_"
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	push ".db"
	pop $b
	popax
	add $a,$b
	call grguipck,vecload
	end method
	method save_pocket
	push "guipocket_"
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	push ".db"
	pop $b
	popax
	add $a,$b
	call grguipck,vecsave
	end method
	method inventory_check
	cthis inventory_hidden
	cmp0
	je l4464
	cthis inventory_in
	jmp l4463
l4464:
	cthis inventory_out
l4463:
	end method
	method inventory_out
	push 1
	cthis inventory_start
	end method
	method inventory_in
	push 1
	popax
	sub 0,$a
	cthis inventory_start
	end method
	method inventory_start
	localint $1
	pop $1
	call _timinv,isplaying
	cmp0
	je l4466
	call _timinv,dir
	push $1
	cmpje
	cmp0
	je l4468
	ret
l4468:
	push 0
	call _timinv,stop
l4466:
	push $1
	call _timinv,dir=
	call _timinv,play
	end method
	method inventory_playing
	call _timinv,isplaying
	end method
	method inventory_move
	localint $1
	pop $1
	push 0
	push $1
	call grguitemslots,move
	push 0
	push $1
	call guinventory,move
	push 0
	push $1
	call guileft,move
	push 0
	push $1
	call guiright,move
	push 0
	push $1
	call grguitems,move
	end method
	method inventory_hidden
	localint $1
	call grguitemslots,first
	spushs
	spop $a
	call [$a],getpy
	push igmapph
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l4470
	push $1
	popax
	sub 0,$a
	cthis inventory_move
	push 1
	jmp l4469
l4470:
	push $1
	push 0
	cmpje
l4469:
	end method
	method inventory_showed
	call guinventory,getposy
	push 0
	cmpjl
	cmp0
	je l4472
	call guinventory,getposy
	popax
	sub 0,$a
	cthis inventory_move
	push 1
	jmp l4471
l4472:
	call guinventory,getposy
	push 0
	cmpje
l4471:
	end method
	method inventory_hide
l4473:
	cthis inventory_hidden
	neg
	cmp0
	je l4474
	push 1
	cthis inventory_move
	jmp l4473
l4474:
	end method
	method inventory_show
l4475:
	cthis inventory_showed
	neg
	cmp0
	je l4476
	push 1
	popax
	sub 0,$a
	cthis inventory_move
	jmp l4475
l4476:
	end method
	method gui_mousemove
	push bHOInventory
	neg
	cmp0
	je l4478
	cthis advstdstate
	cmp0
	je l4478
	call grgotopckstack,empty
	cmp0
	je l4478
	cthis inventory_playing
	neg
	jmp l4480
l4478:
	push 0
	jmp l4480
l4479:
	push 1
l4480:
	cmp0
	je l4481
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	cthis inventory_hidden
	cmp0
	je l4483
	push $1
	push $2
	call invshow,isin
	jmp l4485
l4483:
	push 0
	jmp l4485
l4484:
	push 1
l4485:
	cmp0
	je l4486
	cthis inventory_in
	jmp l4482
l4486:
	cthis inventory_showed
	cmp0
	je l4488
	push $1
	push $2
	call invhide,isin
	neg
	cmp0
	je l4488
	cthis inventory_unblocked
	jmp l4490
l4488:
	push 0
	jmp l4490
l4489:
	push 1
l4490:
	cmp0
	je l4491
	cthis inventory_out
l4491:
l4482:
l4481:
	cthis update_loupepos
	end method
	method inventory_unblocked
	call guinventory,blockout
	push 0
	cmpje
	end method
	method unblock_inventory
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l4493
	push 0
	call guinventory,blockout=
	jmp l4492
l4493:
	push $1
	call timunblockinventory,setdelay
	call timunblockinventory,play
l4492:
	end method
	method gui_mouselclick
	call guimov,moving
	cmp0
	je l4495
	cthis isadvclass
	cmp0
	je l4497
	push 0
	push 0
	call guimov,onmouselclick
	jmp l4496
l4497:
	call guimov,onmouselclick
l4496:
	push 0
	jmp l4494
l4495:
	push 1
l4494:
	end method
	method advinitial
	cthis advmsunlock
	cthis advsetstdstate
	end method
	method subloadadventure
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	localdef $6
	push $4
	spushs
	push "popup:"
	cmpst
	jne l4499
	spop $a
	jmp l4498
l4499:
	spop $a
l4498:
	push $3
	end method
	method remove_from_loupe
	localstring $1
	pop $1
	push $1
	call ftguiloupe,removeblend
	push $1
	call grguiloupe,remove
	call grguiloupe,empty
	cmp0
	je l4501
	call guiloupemask,hide
l4501:
	end method
	method show_itempopup
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	spop $a
	call [$a],BanGui52
	end method
	method BanGui52
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push "anpopup_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	localdef $4
	push $3
	push "_blysk"
	pop $b
	popax
	add $a,$b
	pop $4
	localdef $5
	push "_img"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	localdef $6
	push "_txtnewitem"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	localdef $7
	push "_txtitem"
	push $1
	pop $b
	popax
	add $a,$b
	pop $7
	localdef $8
	push "_gr_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $8
	localdef $9
	push $3
	push "_exit"
	pop $b
	popax
	add $a,$b
	pop $9
	push $3
	cthis hasvar
	neg
	cmp0
	je l4503
	push "globalpopup"
	push $3
	cthis copyanima
	push $3
	spushs
	spop $a
	call [$a],Button_isin
	push $3
	call butgame,add
	push "globalpopup"
	push $4
	cthis copyanima
	push $4
	spushs
	push 1
	push 0
	spop $a
	call [$a],setframe
	push $5
	spushs
	spop $e
	new img,[$e]
	push $5
	spushs
	push A
	push "swnd"
	push $3
	push "sblysk"
	push $4
	push "sanima"
	push $2
	push "sgr"
	push $8
	push "sitem"
	push $1
	push "spopexit"
	push $9
	spop $a
	call [$a],vars2
	push $6
	push "newitem"
	call dbgame,dbget
	push "fnthogui"
	cthis guifontcolor
	cthis newtext
	push $7
	push $1
	call dbitems,dbget
	push "fnthogui"
	cthis guifontcolor
	cthis newtext
	push $8
	spushs
	spop $e
	new gmimgvec,[$e]
	push $8
	spushs
	push A
	push $3
	push $4
	push $6
	push $7
	spop $a
	call [$a],addlist
	push "globalpopup"
	push $9
	cthis copyanima
	push $9
	spushs
	push 2
	push 0
	spop $a
	call [$a],setframe
	push $9
	spushs
	spop $a
	call [$a],hide
	push $9
	spushs
	push $3
	push $1
	spop $a
	call [$a],BanGui53
l4503:
	localint $10
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $3
	spushs
	spop $a
	call [$a],getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $10
	localint $11
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $11
	push $3
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	push $4
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	push $9
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	localdef $12
	push 0.12
	pop $12
	push $6
	spushs
	push $3
	spushs
	spop $a
	call [$a],getcx
	push $6
	spushs
	spop $a
	call [$a],getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $12
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $7
	spushs
	push $3
	spushs
	spop $a
	call [$a],getcx
	push $7
	spushs
	spop $a
	call [$a],getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push $12
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $7
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	localdef $13
	push $4
	spushs
	spop $a
	call [$a],getz
	push 5
	pop $b
	popax
	add $a,$b
	pop $13
	push $2
	spushs
	push $13
	spop $a
	call [$a],setz
	push $5
	spushs
	push $13
	spop $a
	call [$a],setz
	push $6
	spushs
	push $13
	spop $a
	call [$a],setz
	push $7
	spushs
	push $13
	spop $a
	call [$a],setz
	push $9
	spushs
	push $13
	spop $a
	call [$a],setz
	call butgame,sort
	push $8
	spushs
	spop $a
	call [$a],show
	push $5
	spushs
	push A
	push $3
	push $4
	push $6
	push $7
	push $2
	spop $a
	call [$a],imgbuildfromlist
	push $8
	spushs
	spop $a
	call [$a],hide
	push $2
	spushs
	spop $a
	call [$a],hide
	push $5
	spushs
	push ishowpouptime
	push 1
	push 1
	push "BanGui58"
	spop $a
	call [$a],anzoomfadeinout
	end method
	method BanGui53
	localdef $1
	localdef $2
	pop $2
	pop $1
	push A
	push "swnd"
	push $1
	push "sitem"
	push $2
	cthis vars2
	push "isbutin"
	push "BanGui54"
	cthis addmethod
	push "butmoveon"
	push "BanGui55"
	cthis addmethod
	push "butmoveoff"
	push "BanGui56"
	cthis addmethod
	push "butclick"
	push "BanGui57"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method BanGui54
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	cmp0
	jne l4505
	push swnd
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l4506
	push swnd
	spushs
	push $1
	push $2
	push 1
	push 0
	spop $a
	call [$a],isin
	neg
	jmp l4508
l4506:
	push 0
	jmp l4508
l4507:
	push 1
l4508:
	jmp l4509
l4504:
	push 0
	jmp l4509
l4505:
	push 1
l4509:
	end method
	method BanGui55
	call advmouse,setact
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
	end method
	method BanGui56
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method BanGui57
	localdef $1
	push "popup_"
	push sitem
	pop $b
	popax
	add $a,$b
	push "_clickexit"
	pop $b
	popax
	add $a,$b
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	spop $a
	call [$a],hasmet
	cmp0
	je l4511
	call gameapi,getgamename
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l4510
l4511:
	push sitem
	cthis hide_itempopup
l4510:
	end method
	method BanGui58
	cthis hide
	push sgr
	spushs
	spop $a
	call [$a],show
	push sanima
	spushs
	spop $a
	call [$a],show
	push spopexit
	spushs
	spop $a
	call [$a],show
	call butgame,onmousemove
	call gameapi,getgamename
	spushs
	push "popup_"
	push sitem
	pop $b
	popax
	add $a,$b
	push "_in"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method hide_itempopup
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	spop $a
	call [$a],BanGui59
	end method
	method BanGui59
	localstring $1
	pop $1
	localdef $2
	push "anpopup_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	localdef $3
	push $2
	push "_blysk"
	pop $b
	popax
	add $a,$b
	pop $3
	localdef $4
	push "_img"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	localdef $5
	push "_txtnewitem"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	localdef $6
	push "_txtitem"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	localdef $7
	push "_gr_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $7
	localdef $8
	push $2
	push "_exit"
	pop $b
	popax
	add $a,$b
	pop $8
	push "taken_"
	push $1
	pop $b
	popax
	add $a,$b
	call clsave,bis
	cmp0
	je l4513
	push $4
	spushs
	push A
	push $2
	push $5
	push $6
	spop $a
	call [$a],imgbuildfromlist
	jmp l4512
l4513:
	push $4
	spushs
	push A
	push $2
	push $3
	push $5
	push $6
	push $4
	spushs
	spop $a
	call [$a],sanima
	spop $a
	call [$a],imgbuildfromlist
	push $4
	spushs
	spop $a
	call [$a],sanima
	spushs
	spop $a
	call [$a],hide
l4512:
	push $7
	spushs
	spop $a
	call [$a],hide
	push $8
	spushs
	spop $a
	call [$a],hide
	push $4
	spushs
	push ishowpouptime
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	push "BanGui60"
	spop $a
	call [$a],anzoomfadeinout
	end method
	method BanGui60
	cthis hide
	call gameapi,getgamename
	spushs
	push "popup_"
	push sitem
	pop $b
	popax
	add $a,$b
	push "_out"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method isvisible_itempopup
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	push "anpopup_"
	push $1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],hasvar
	cmp0
	je l4514
	push "anpopup_"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],isvisible
	jmp l4516
l4514:
	push 0
	jmp l4516
l4515:
	push 1
l4516:
	end method
	method getitempopupshadow
	localstring $1
	pop $1
	push "anpopup_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_blysk"
	pop $b
	popax
	add $a,$b
	end method
	method hideitempopupshadow
	localstring $1
	pop $1
	push $1
	cthis getitempopupshadow
	spushs
	spop $a
	call [$a],hide
	end method
	method guifontcolor
	push 240
	cthis grey
	end method
	end class

	class classadvstdgame2
	parent ClassGameController
	parent classadvstdgame
	parent BanGui
	method init
	push 0
	pop bHOInventory
	clparent ClassGameController,init
	new Button,butgame
	clparent BanGui,init
	call banguisrc,load
	clparent classadvstdgame,init
	cthis initadventure
	cthis initgui
	new Film,film1
	push "onfinish"
	push "classadvstdgame20"
	call film1,addmethod
	clparent classadvcontroller,playbehoninit
	end method
	method classadvstdgame20
	cthis advsetstdstate
	cthis free
	push "beh_END_FILM"
	cthis playbehif
	popax
	end method
	method playbehoninit
	end method
	method playfilm
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "state_playfilm"
	cthis advsetstate
	push "film"
	push $1
	call clsave,set
	push $3
	push $4
	call film1,setpos
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push $2
	call film1,playfilm
	end method
	method setasbanbeh
	localstring $1
	pop $1
	push "setas"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	clparent advbanbeh,[$d]
	end method
	method subloadbeh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localstring $7
	localint $8
	localint $9
	push ":"
	call $1,strsubes
	pop $1
	push $1
	spushs
	push "popin"
	cmpst
	je l4519
	push "popout"
	cmpst
	je l4519
	jmp l4518
l4519:
	spop $a
	push $3
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $7
	push "("
	cmpje
	cmp0
	je l4521
	push $5
	pop $8
	push $3
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	pop $7
l4522:
	push $7
	push ")"
	cmpjne
	cmp0
	je l4523
	push $3
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	jmp l4522
l4523:
	jmp l4520
l4521:
	push "beh popin: no ( error"
	spushs
	spop $h
	call $h,print
l4520:
	push $2
	spushs
	push $3
	push $4
	push $8
	push $1
	push "popup"
	spop $a
	call [$a],setasbanbeh
	jmp l4517
l4518:
	push "openbook"
	cmpst
	jne l4524
	spop $a
	push $3
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $7
	push $1
	spop $a
	call [$a],setasbanbeh
	jmp l4517
l4524:
	push "closebook"
	cmpst
	jne l4525
	spop $a
	push $2
	spushs
	push $1
	spop $a
	call [$a],setasbanbeh
	jmp l4517
l4525:
	spop $a
	sub $5,1
	pop $5
l4517:
	push $5
	end method
	method mousemove
	clparent ClassGameController,mousemove
	cthis gui_mousemove
	clparent classadvstdgame,mousemove
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis advstdstate
	cmp0
	je l4527
	cthis gui_mouselclick
	jmp l4529
l4527:
	push 0
	jmp l4529
l4528:
	push 1
l4529:
	cmp0
	je l4530
	cthis advmsclick
l4530:
	cthis mouse_LCLICK
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	clparent classadvcontroller,mouselrel
	end method
	end class

	new db,dbgame
	push LANGDIR
	push "gametxts.db"
	pop $b
	popax
	add $a,$b
	call dbgame,load
	class BansheeStd
	parent StdGame
	parent BanGui
	method init
	localstring $1
	pop $1
	push $1
	clparent StdGame,init
	push PrzygodaMode
	cmp0
	je l4532
	clparent BanGui,save_pocket
	clparent BanGui,init
	call banguisrc,load
	new int,bmouselock
	push 0
	pop bmouselock
	cthis initgui
	push bHOInventory
	neg
	cmp0
	je l4534
	cthis inventory_show
l4534:
l4532:
	end method
	method advmslock
	push 1
	pop bmouselock
	call advmouse,setwait
	end method
	method advmsunlock
	push 0
	pop bmouselock
	call advmouse,setstd
	end method
	method advgetlock
	push bmouselock
	end method
	method advstdstate
	push sgmstate
	push "play"
	cmpje
	end method
	method advsetstdstate
	push "play"
	cthis advsetstate
	end method
	method advsetstate
	localstring $1
	pop $1
	push $1
	pop sgmstate
	end method
	method butpopexit
	call anpopexit,BansheeStd0
	end method
	method BansheeStd0
	cthis Button_isinalpha
	push A
	push "bholdon"
	push 0
	cthis vars2
	push "butmoveon"
	push "BansheeStd1"
	cthis addmethod
	push "butmoveoff"
	push "BansheeStd2"
	cthis addmethod
	push "butclick"
	push "BansheeStd3"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method BansheeStd1
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
	end method
	method BansheeStd2
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method BansheeStd3
	cthis advstdstate
	neg
	cmp0
	jne l4537
	push bholdon
	jmp l4538
l4536:
	push 0
	jmp l4538
l4537:
	push 1
l4538:
	cmp0
	je l4539
	ret
l4539:
	cthis mend
	end method
	method mousemove
	cthis gmcontrol_mousemove
	push PrzygodaMode
	cmp0
	je l4541
	cthis gui_mousemove
l4541:
	end method
	end class

	class Banshee
	parent BansheeStd
	method init
	localstring $1
	pop $1
	push 0
	pop bHOInventory
	push $1
	clparent BansheeStd,init
	end method
	end class

	class HOBanshee
	parent Hidden
	parent BansheeStd
	method init
	localstring $1
	pop $1
	push 1
	pop bHOInventory
	push $1
	clparent BansheeStd,init
	cthis init_hidden
	end method
	method mtoloupe
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis mgetel
	pop $2
	push $2
	cthis gui_toloupe
	call grguiloupe,last
	spushs
	spop $a
	call [$a],getz
	call guiloupemask,setz
	push $2
	spushs
	spop $a
	call [$a],hide
	push $2
	spushs
	push "myz"
	push $2
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],var2
	push $2
	spushs
	spop $a
	call [$a],stxtview
	spushs
	cthis holoupecol
	spop $a
	call [$a],createtxt
	push $2
	spushs
	push "isbutin"
	push "HOBanshee0"
	spop $a
	call [$a],addmethod
	push $2
	spushs
	push "butmoveon"
	push "HOBanshee1"
	spop $a
	call [$a],addmethod
	push $2
	spushs
	push "butmoveoff"
	push "HOBanshee2"
	spop $a
	call [$a],addmethod
	end method
	method HOBanshee0
	localdef $1
	localdef $2
	pop $2
	pop $1
	cthis loupe_visible
	cmp0
	je l4543
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	push $1
	push $2
	push 0
	push 1
	cthis isin
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
	jmp l4542
l4543:
	push 0
l4542:
	end method
	method holoupecol
	push 0
	push 202
	push 1
	ret
	end method
	end class

	game BanFilm
	parent StdGame
	method init
	push "film"
	clparent StdGame,init
	push "empty"
	call advmouse,set
	push PrzygodaMode
	cmp0
	je l4545
	clparent BanGui,save_pocket
l4545:
	new Film,film1
	push 1
	call film1,bcenter=
	push 1
	call film1,bborders=
	push "mus"
	call film1,musicclass=
	push "onfinish"
	push "BanFilm0"
	call film1,addmethod
	new string,slastframe
	call film1,BanFilm1
	end method
	method BanFilm0
	call ccs,buildfromscreen
	localstring $1
	call gameapi,getgamename
	pop $1
	push "nextgame_type"
	call clsave,get
	spushs
	push "-def"
	cmpst
	jne l4547
	spop $a
	push "nextgame_path"
	call clsave,get
	push "nextgame"
	call clsave,get
	cthis gotoadv
	jmp l4546
l4547:
	push "-adv"
	cmpst
	jne l4548
	spop $a
	push "nextgame_path"
	call clsave,get
	push "nextgame"
	call clsave,get
	cthis gotoadv2
	jmp l4546
l4548:
	spop $a
	push "nextgame"
	call clsave,get
	call gameapi,play
l4546:
	end method
	method BanFilm1
	push "scripts/"
	push "filmpath"
	call clsave,get
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push "filmdb"
	call clsave,get
	cthis playfilm
	push sprefilm
	push iendklatka
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	pop slastframe
	end method
	method mouse_lclick
	call film1,isplaying
	cmp0
	je l4550
	push 1
	call film1,stop
l4550:
	end method
	method showfps
	push "cfps"
	cthis hasvar
	neg
	cmp0
	je l4552
	new CalcFPS,cfps
	push 14
	push 10
	push 10
	call cfps,stdset
l4552:
	call cfps,play
	end method
	end game

	game StartBanshee
	parent StdGame
	method init
	push "startbanshee"
	clparent StdGame,init
	push "filmpath"
	push "cs02_kinnatbook"
	call clsave,set
	push "filmdb"
	push "film"
	call clsave,set
	push "nextgame_type"
	push "-def"
	call clsave,set
	push "nextgame_path"
	push "ad00_endintro"
	call clsave,set
	push "nextgame"
	push "gamead00_endintro0"
	call clsave,set
	push "BanFilm"
	call gameapi,play
	end method
	end game

	new classgamepause,clpause
	new classgamemusic,clmusic
	push "sounds/bgr/"
	call clmusic,sndbgrpath
	push "sounds/music/"
	call clmusic,musicpath
	push "sounds/music.db"
	call clmusic,load
	new snd,sndakskermovon
	push "sounds/sfx/butmovon.wav"
	call sndakskermovon,load
	push 50
	call sndakskermovon,setvol
	class classasker2
	parent classasker
	method init
	clparent classasker,init
	new snd,sndaskexit
	push 0
	push 1
	call sndaskexit,setstartstopflag
	new snd,sndaskexitgame
	push 0
	push 1
	call sndaskexitgame,setstartstopflag
	new snd,sndyes
	push 0
	push 1
	call sndyes,setstartstopflag
	new snd,sndno
	push 0
	push 1
	call sndno,setstartstopflag
	new snd,sndaskrestart
	push 0
	push 1
	call sndaskrestart,setstartstopflag
	new snd,sndaskrestart2
	push 0
	push 1
	call sndaskrestart2,setstartstopflag
	cthis reload
	push "scripts/common/asker.pyz"
	push 12000
	cthis load
	push "sndakskermovon"
	cthis fxonmovon
	end method
	method reload
	push SNDPATH
	cthis setwavpath
	localdef $1
	cthis getsndpath
	pop $1
	push $1
	push "narexit.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexit,load
	push $1
	push "narexitgame.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexitgame,load
	push $1
	push "naryes.wav"
	pop $b
	popax
	add $a,$b
	call sndyes,load
	push $1
	push "narno.wav"
	pop $b
	popax
	add $a,$b
	call sndno,load
	push $1
	push "narrestart.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart,load
	push $1
	push "narrestart.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart2,load
	end method
	method askexittomenu
	push "sndaskexit"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askexitgame
	push "sndaskexitgame"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askrestart
	push "sndaskrestart"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method askrestart2
	push "sndaskrestart2"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method mnotomenu
	end method
	method myestomenu
	push GAME
	spushs
	push "clsave"
	spop $a
	call [$a],hasvar
	cmp0
	je l4554
	call clsave,free
l4554:
	call gameapi,getgamename
	spushs
	push "MainMenu"
	cmpst
	jne l4556
	spop $a
	push "exit"
	jmp l4555
l4556:
	spop $a
	push "MainMenu"
l4555:
	call gameapi,play
	end method
	method mnorestart
	call gameapi,getgamename
	spushs
	push "SubMenu"
	cmpst
	jne l4558
	spop $a
	push "MenuGry"
	jmp l4557
l4558:
	spop $a
	push "MainMenu"
l4557:
	call gameapi,play
	end method
	method myesrestart
	cthis crestart
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call ccs,isplaying
	neg
	cmp0
	je l4560
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent classasker,ask
l4560:
	end method
	end class

	new classasker2,claskexit
	method LANG=
	localdef $1
	pop $1
	push $1
	pop LANG
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l4562
	push ""
	pop LANG
l4562:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l4564
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l4564:
	call claskexit,reload
	end method
	new img,imglobcurs
	module clbuts
	method init
	end method
	method load
	new classbutton,buts
	push "scripts/common/buttons.pyz"
	push 4000
	push "imglobcurs"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call engine,actclassname
	push "butmovoff"
	call buts,transmovofffunc
	call buts,disableall
	new db,dbb
	push "scripts/common/buts.db"
	call dbb,load
	new snd,sndfxglobon
	push "sounds/sfx/globbutmovon.wav"
	call sndfxglobon,load
	push 50
	call sndfxglobon,setvol
	new def,bvisible
	push 1
	pop bvisible
	end method
	method reset
	call buts,disableall
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push $1
	call dbb,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l4566
	localint $3
	push $2
	call dbb,getcolsno
	pop $3
	localint $4
	push 1
	pop $4
l4567:
	push $4
	push $3
	cmpjl
	cmp0
	je l4568
	jmp l4570
l4569:
	add $4,1
	pop $4
	jmp l4567
l4570:
	push $2
	push $4
	call dbb,get
	call buts,enable
	jmp l4569
l4568:
l4566:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	method enable
	localstring $1
	pop $1
	push $1
	call buts,enable
	end method
	method butmovon
	localstring $1
	pop $1
	call sndfxglobon,play
	call mouse,isvisible
	pop bvisible
	call mouse,show
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovoff
	localstring $1
	pop $1
	push bvisible
	neg
	cmp0
	je l4572
	call mouse,hide
l4572:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "pause"
	cmpje
	cmp0
	je l4574
	call clpause,pause
	jmp l4573
l4574:
	push $1
	push "menu"
	cmpje
	cmp0
	je l4576
	call gameapi,getgamename
	spushs
	push "MainMenu"
	cmpst
	jne l4578
	spop $a
	call claskexit,askexitgame
	jmp l4577
l4578:
	spop $a
	call claskexit,askexittomenu
l4577:
	jmp l4575
l4576:
	push $1
	push "restart"
	cmpje
	cmp0
	je l4580
	call claskexit,askrestart
l4580:
l4575:
l4573:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end module

	class classplacepointer2
	parent classplacepointer
	method init
	clparent classplacepointer,init
	push "scripts/common/strzalka.pyz"
	cthis load
	end method
	end class

	call clbuts,load
	push "MainLoader"
	call gameapi,play
	game MainLoader
	parent StdGame
	method init
	push "mainloader"
	clparent StdGame,init
	push "scripts/scripts/defaults.adv"
	call modadv,load
	push "scripts/scripts/sounds.db"
	call modadv,loadsounds
	push "snd"
	call modadv,settalktype
	push "scripts/scripts/initscript.dsc"
	call modadv,loadscript
	push "saves/global.txt"
	call clsave,load
	cthis getname
	pop sgmlastscene
	call banbook,parse
	push "startgame:"
	call dbconf,dbget
	call gameapi,play
	end method
	end game

	game gameadvdef
	parent classadvstdgame2
	method init
	clparent classadvstdgame2,init
	new int,ifullscreen
	push 0
	pop ifullscreen
	end method
	method e1_load_loupe_brama
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],gameadvdef0
	end method
	method gameadvdef0
	push "anczachy2w"
	cthis hasvar
	neg
	cmp0
	je l4582
	push "anczachy2w"
	push "$scripts/ad02_brama/czachy2w.pyz"
	push 0
	cthis newanima
	push "anczachy2w"
	call bgr1,add
	call anczachy2w,anhideonsetframe
	push 0
	call anczachy2w,play
	push "anczachy2w"
	cthis gui_toloupe
l4582:
	end method
	method keyboard_KEYDOWN
	push igmdebug
	cmp0
	je l4584
	push "f"
	call keyboard,iskeydown
	jmp l4586
l4584:
	push 0
	jmp l4586
l4585:
	push 1
l4586:
	cmp0
	je l4587
	push ifullscreen
	neg
	pop ifullscreen
	push ifullscreen
	call engine,setfullscreen
l4587:
	end method
	end game

	game gamead00_endintro0
	parent classadvstdgame2
	method init
	clparent classadvstdgame2,init
	push A
	push "e1rekator.pyzH"
	push "e1rekaset.pyzGH 20"
	cthis imgs=
	push "gamead00_endintro00"
	call gre1rekaset,each
	localint $1
	push 0
	pop $1
l4588:
	push $1
	push 4
	cmpjl
	cmp0
	je l4589
	jmp l4591
l4590:
	add $1,1
	pop $1
	jmp l4588
l4591:
	push "e1_reka_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_play"
	pop $b
	popax
	add $a,$b
	call clsave,bis
	cmp0
	je l4593
	push $1
	cthis rekaplay
l4593:
	jmp l4590
l4589:
	end method
	method gamead00_endintro00
	localint $1
	pop $1
	push "myid"
	push $1
	push 1
	pop $b
	popax
	add $a,$b
	cthis var2
	push "onsetframe"
	push "gamead00_endintro01"
	cthis addmethod
	end method
	method gamead00_endintro01
	push myid
	push 1
	pop $b
	popax
	sub $a,$b
	push "ane1reka"
	push myid
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],framenr
	call ane1rekator,setframe
	call ane1rekator,getcx
	call ane1rekator,getcy
	cthis setpos
	end method
	method e1_getrekaid
	localstring $1
	pop $1
	push $1
	spushs
	push "zolty"
	cmpst
	jne l4595
	spop $a
	push 0
	jmp l4594
l4595:
	push "red"
	cmpst
	jne l4596
	spop $a
	push 1
	jmp l4594
l4596:
	push "blue"
	cmpst
	jne l4597
	spop $a
	push 2
	jmp l4594
l4597:
	push "miedz"
	cmpst
	jne l4598
	spop $a
	push 3
	jmp l4594
l4598:
	spop $a
	push 1
	popax
	sub 0,$a
l4594:
	end method
	method e1_dymki_loadhint
	new int,iddymekhint
	push 1
	pop iddymekhint
	push "onendframe"
	push "gamead00_endintro02"
	call andymki2,addmethod
	call andymki2,onendframe
	end method
	method gamead00_endintro02
	localint $1
	cthis framename
	cthis e1_getrekaid
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l4600
	push $1
	pop iddymekhint
l4600:
	end method
	method e1_click_dzwon
	localstring $1
	push "e1_click_dzwon"
	call clsave,get
	pop $1
	localint $2
	push "e1_dzwonki"
	call clsave,get
	pop $2
	push "e1_dzwon"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	call clsave,set
	push $2
	push 4
	cmpje
	cmp0
	je l4602
	push 1
	pop $2
	cthis recehide
	jmp l4601
l4602:
	push $1
	cthis e1_getrekaid
	localint $3
	pop $3
	push $3
	cthis rekaplay
	push "e1_reka_"
	push $3
	pop $b
	popax
	add $a,$b
	push "_play"
	pop $b
	popax
	add $a,$b
	call clsave,bset
	add $2,1
	pop $2
l4601:
	push "e1_dzwonki"
	push $2
	call clsave,set
	localdef $4
	push "e1_dzwon1"
	call clsave,get
	pop $4
	localdef $5
	push "e1_dzwon2"
	call clsave,get
	pop $5
	localdef $6
	push "e1_dzwon3"
	call clsave,get
	pop $6
	localdef $7
	push "e1_dzwon4"
	call clsave,get
	pop $7
	push $4
	push "blue"
	cmpje
	cmp0
	je l4604
	push $5
	push "miedz"
	cmpje
	cmp0
	je l4604
	push $6
	push "red"
	cmpje
	cmp0
	je l4604
	push $7
	push "zolty"
	cmpje
	jmp l4606
l4604:
	push 0
	jmp l4606
l4605:
	push 1
l4606:
	cmp0
	jne l4608
	push $7
	push "blue"
	cmpje
	cmp0
	je l4609
	push $4
	push "miedz"
	cmpje
	cmp0
	je l4609
	push $5
	push "red"
	cmpje
	cmp0
	je l4609
	push $6
	push "zolty"
	cmpje
	jmp l4611
l4609:
	push 0
	jmp l4611
l4610:
	push 1
l4611:
	cmp0
	jne l4608
	push $6
	push "blue"
	cmpje
	cmp0
	je l4612
	push $7
	push "miedz"
	cmpje
	cmp0
	je l4612
	push $4
	push "red"
	cmpje
	cmp0
	je l4612
	push $5
	push "zolty"
	cmpje
	jmp l4614
l4612:
	push 0
	jmp l4614
l4613:
	push 1
l4614:
	cmp0
	jne l4608
	push $5
	push "blue"
	cmpje
	cmp0
	je l4615
	push $6
	push "miedz"
	cmpje
	cmp0
	je l4615
	push $7
	push "red"
	cmpje
	cmp0
	je l4615
	push $4
	push "zolty"
	cmpje
	jmp l4617
l4615:
	push 0
	jmp l4617
l4616:
	push 1
l4617:
	jmp l4618
l4607:
	push 0
	jmp l4618
l4608:
	push 1
l4618:
	cmp0
	je l4619
	push "e1_zgadla_dzwonki"
	call clsave,bset
	cthis recehide
l4619:
	end method
	method rekaplay
	localint $1
	pop $1
	push $1
	call gre1rekaset,get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
	end method
	method recehide
	push "anhide"
	call gre1rekaset,eval
	localint $1
	push 0
	pop $1
l4620:
	push $1
	push 4
	cmpjl
	cmp0
	je l4621
	jmp l4623
l4622:
	add $1,1
	pop $1
	jmp l4620
l4623:
	push "e1_reka_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_play"
	pop $b
	popax
	add $a,$b
	push 0
	call clsave,set
	jmp l4622
l4621:
	end method
	method e1_hint_rece
	push "andymki2"
	cthis showhint
	push "ane1reka"
	push iddymekhint
	pop $b
	popax
	add $a,$b
	cthis showhint
	end method
	end game

	game gamead06_posagmamy0
	parent classadvstdgame2
	method init
	clparent classadvstdgame2,init
	end method
	method mousemove
	clparent classadvstdgame2,mousemove
	cthis loupe_visible
	cmp0
	je l4625
	call mouse,getpos
	push 0
	push 1
	call anposag_mamy,isin
	cmp0
	je l4625
	push "e1_bylkomentposagmatki"
	call clsave,bis
	neg
	jmp l4627
l4625:
	push 0
	jmp l4627
l4626:
	push 1
l4627:
	cmp0
	je l4628
	push "beh_posag_matki_FOCUS"
	cthis playbehif
	popax
l4628:
	end method
	end game

	game MainMenu
	parent StdGame
	method init
	push "mainmenu"
	clparent StdGame,init
	push "carmillas_masque.ogg -l"
	call mus,playstr
	push A
	push "bgrwiatrN 50"
	push "bgrlas2N 30"
	cthis sfxs=
	push A
	push "bkg.jpg"
	push "szkielko.pyz 100"
	push "sciezka.pyz"
	push "buts.pyzG 50"
	push "maska.pyz 5"
	cthis imgs=
	call ansciezka,anhideonsetframe
	new filter,ftmaska
	push "anmaska"
	call ftmaska,link
	push "animy.adv"
	cthis animaloader_load
	localdef $1
	push "bonus"
	call grbuts,getsac
	pop $1
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call ftmaska,loupe
	push "credits"
	call grbuts,getsac
	pop $1
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call ftmaska,loupe
	push "MainMenu0"
	call grbuts,eval
	push "play"
	call grbuts,getsac
	spushs
	push "butclick"
	push "MainMenu2"
	spop $a
	call [$a],addmethod
	push "quit"
	call grbuts,getsac
	spushs
	push "butclick"
	push "MainMenu4"
	spop $a
	call [$a],addmethod
	push "onendframe"
	push "MainMenu6"
	call ansciezka,addmethod
	push "onfinish"
	push "MainMenu7"
	call ansciezka,addmethod
	new CalcFPS,cfps
	push 14
	push 10
	push 10
	call cfps,stdset
	call cfps,play
	new int,istep
	push 0
	pop istep
	push "timstep"
	push "MainMenu8"
	cthis cycle=
	call timstep,play
	push "MainMenu9"
	call ccs,enter
	end method
	method MainMenu0
	push "isbutin"
	push "MainMenu1"
	cthis addmethod
	cthis Button_moveon
	cthis Button_moveoff
	cthis getname
	call butgame,add
	end method
	method MainMenu1
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	cthis actionname
	pop $3
	push $3
	push "bonus"
	cmpje
	cmp0
	jne l4631
	push $3
	push "credits"
	cmpje
	jmp l4632
l4630:
	push 0
	jmp l4632
l4631:
	push 1
l4632:
	cmp0
	je l4633
	push $1
	push $2
	push 0
	push 1
	call anmaska,isin
	cmp0
	je l4634
	push $1
	push $2
	push 0
	push 0
	cthis isin
	jmp l4636
l4634:
	push 0
	jmp l4636
l4635:
	push 1
l4636:
	jmp l4629
l4633:
	push $1
	push $2
	push 1
	push 0
	cthis isin
l4629:
	end method
	method MainMenu2
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4638
	ret
l4638:
	push "MainMenu3"
	call ccs,close
	end method
	method MainMenu3
	push "StartBanshee"
	call gameapi,play
	end method
	method MainMenu4
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4640
	ret
l4640:
	push "MainMenu5"
	call ccs,close
	end method
	method MainMenu5
	call gameapi,exit
	end method
	method MainMenu6
	cthis getcx
	call anszkielko,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis getcy
	call anszkielko,geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call anszkielko,ansetbpos
	call anszkielko,getposx
	call anszkielko,getposy
	call anmaska,setpos
	call butgame,onmousemove
	end method
	method MainMenu7
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis play
	end method
	method MainMenu8
	localint $1
	call ansciezka,getcx
	pop $1
	localint $2
	call ansciezka,getcy
	pop $2
	push istep
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	cmp0
	je l4642
	call ansciezka,ansetnextfr
	push $1
	call ansciezka,getcx
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	push $2
	call ansciezka,getcy
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $2
l4642:
	push $1
	call anszkielko,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	call anszkielko,geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call anszkielko,ansetbpos
	call anszkielko,getposx
	call anszkielko,getposy
	call anmaska,setpos
	call butgame,onmousemove
	add istep,1
	pop istep
	cthis play
	end method
	method MainMenu9
	push "play"
	pop sgmstate
	end method
	method animaloader_an
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spushs
	push "-toloupe"
	cmpst
	jne l4644
	spop $a
	push $1
	call ftmaska,loupe
	jmp l4643
l4644:
	spop $a
l4643:
	push $4
	end method
	end game

	game BanTest
	parent StdGame
	method init
	push "bantest"
	clparent StdGame,init
	push A
	push "niebo.pyz"
	push "slonce.pyz 1"
	push "chmury.pyzG 3"
	push "drzewo.pyzP 10"
	push "wdali1.pyz 12"
	push "wod1.pyzP 15"
	push "wod2.pyzP 20"
	push "wod3.pyzP 25"
	push "wod4.pyzP 30"
	push "wod5.pyzP 35"
	push "wod6.pyzP 40"
	push "wzgorze.pyz 45"
	push "wdali2.pyz 50"
	push "fog1.pyz 55"
	push "ogrodzenie.pyz 60"
	push "fire1.pyzP 65"
	push "fire2.pyzP 70"
	push "woda.pyzP 75"
	push "krople.pyzP 80"
	push "fogslow.pyzH 85"
	push "krzak1.pyzP 90"
	push "drzewo1.pyzP 95"
	push "altana.pyz 100"
	push "cien1.pyzP 105"
	push "galaz.pyzP 110"
	push "mglagora.pyz 115"
	push "liscie2.pyzG 116"
	push "lupamask.pyz 20"
	push "lupa.pyz 125"
	cthis imgs=
	push A
	push "bgrlas2N"
	push "bgrdeszczN 0"
	push "bgrrzeka1N 0"
	push "ogien2N 0"
	push "bgrwiatrN 0"
	cthis sfxs=
	call grliscie2,hide
	push 0
	push 50
	popax
	sub 0,$a
	call anslonce,move
	push "fxogien1"
	push "ogien2.ogg"
	cthis newsfx
	push 0
	call fxogien1,setvol
	call fxogien1,playloop
	new filter,ftlupa
	push "anlupamask"
	call ftlupa,link
	push 4
	call grchmury,get
	call ftlupa,loupe
	push 4
	call grchmury,get
	spushs
	spop $a
	call [$a],hide
	push "anwzgorze"
	call ftlupa,loupe
	call anwzgorze,hide
	push "angalaz"
	call ftlupa,loupe
	call angalaz,hide
	push "onfinish"
	push "BanTest0"
	call angalaz,addmethod
	push "andrzewo"
	call ftlupa,loupe
	call andrzewo,hide
	cthis ustaw_dzwieki
	push 1
	call grchmury,get
	push 0.25
	push 0
	clparent SetAnMover,setas
	push 3
	call grchmury,get
	push 0.5
	push 0
	clparent SetAnMover,setas
	push 4
	call grchmury,get
	push 1
	push 0
	clparent SetAnMover,setas
	push 5
	call grchmury,get
	push 1.5
	push 0
	clparent SetAnMover,setas
	push 1
	call grchmury,sortz
	push 1
	call grchmury,get
	spushs
	spop $a
	call [$a],sam_copy
	push 3
	call grchmury,get
	spushs
	spop $a
	call [$a],sam_copy
	push 4
	call grchmury,get
	spushs
	spop $a
	call [$a],sam_copy
	push "anfog1"
	push 0.55
	push 0
	clparent SetAnMover,setas
	call anfog1,sam_copy
	push "timgla"
	push "BanTest1"
	cthis cycle=
	call timgla,play
	call advmouse,setstd
	end method
	method BanTest0
	push 1
	popax
	sub 0,$a
	cthis play
	cthis hide
	end method
	method BanTest1
	call anfog1,sam_move
	push "sam_move"
	call grchmury,eval
	cthis ustaw_dzwieki
	cthis play
	end method
	method sam_move
	end method
	method ustaw_dzwieki
	push "fxbgrdeszcz"
	push 70
	push 22
	push 550
	push 0
	spushs
	call mouse,getposx
	call andrzewo,getcx
	pop $b
	popax
	sub $a,$b
	call mouse,getposy
	call andrzewo,getcy
	call andrzewo,geth
	push 4
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	sub $a,$b
	spop $h
	call $h,length
	clparent SoundSource,setvol
	push "fxbgrrzeka1"
	push 70
	push 12
	push 350
	push 0
	spushs
	call mouse,getposx
	push 343
	pop $b
	popax
	sub $a,$b
	call mouse,getposy
	push 574
	pop $b
	popax
	sub $a,$b
	spop $h
	call $h,length
	clparent SoundSource,setvol
	push "fxogien1"
	push 40
	push 2
	push 200
	push 0
	spushs
	call mouse,getposx
	call anfire1,getcx
	pop $b
	popax
	sub $a,$b
	call mouse,getposy
	call anfire1,getcy
	pop $b
	popax
	sub $a,$b
	spop $h
	call $h,length
	clparent SoundSource,setvol
	push "fxogien2"
	push 40
	push 2
	push 200
	push 0
	spushs
	call mouse,getposx
	call anfire2,getcx
	pop $b
	popax
	sub $a,$b
	call mouse,getposy
	call anfire2,getcy
	pop $b
	popax
	sub $a,$b
	spop $h
	call $h,length
	clparent SoundSource,setvol
	push "fxbgrwiatr"
	push 80
	push 12
	push 600
	push 0
	spushs
	call mouse,getposx
	push iResX
	pop $b
	popax
	sub $a,$b
	call mouse,getposy
	push 0.2
	push iResY
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	spop $h
	call $h,length
	clparent SoundSource,setvol
	end method
	method key_down
	push "space"
	call keyboard,iskey
	cmp0
	je l4646
	localdef $1
	cthis getgraphpath
	push "chmura1/"
	pop $b
	popax
	add $a,$b
	pop $1
	call grchmury,srcanima
	spushs
	push $1
	spop $a
	call [$a],saveimages
l4646:
	end method
	method mouse_move
	call mouse,getpos
	call anlupa,setpos
	call mouse,getpos
	call anlupamask,setpos
	end method
	method mouse_lclick
	end method
	end game

	game BanTest2
	parent StdGame
	method init
	push "bantest"
	clparent StdGame,init
	push "ban1366.jpg"
	cthis img=
	end method
	end game

	game MojTest
	parent StdGame
	method init
	push "bantest"
	clparent StdGame,init
	new img,imgbg
	push igmappw
	push igmapph
	push 22
	push 108
	push 237
	push 255
	call imgbg,create
	push "$scripts/ad00_endintro/perun1b.pyz"
	cthis img=
	push 0
	push 11
	call anperun1b,setframe
	push "anp2"
	push "$scripts/ad00_endintro/perun1b.pyz"
	push 10
	cthis newanima
	push 200
	push 0
	call anp2,move
	push 0
	push 11
	call anp2,setframe
	push 1
	call anp2,setdrawmode
	end method
	end game

	game HO07_Gruz
	parent HOBanshee
	method init
	new anima,ankrasy
	push "scripts/ho07_gruz/krasy.pyz"
	call ankrasy,load
	call ankrasy,hide
	push "ho07_gruz"
	clparent HOBanshee,init
	push "banshee2.ogg -v 70 -l"
	call mus,playstr
	push A
	push "bkg.jpg"
	push "puszka.pyz 600"
	cthis imgs=
	push "onfinish"
	push "mend"
	call anpuszka,addmethod
	push "anpuszka"
	cthis setasitemtopck
	cthis mmasks
	new DelayMover,cmov
	call cmov,unlock
	new string,scmov
	push "null"
	pop scmov
	new int,bignoremsclick
	push 0
	pop bignoremsclick
	push "onfinish"
	push "HO07_Gruz0"
	call ankrasy,addmethod
	push "ho_shovel"
	cthis mtoloupe
	push "HO07_Gruz1"
	call ccs,enter
	end method
	method HO07_Gruz0
	push 0
	push 0
	cthis setframe
	push 1
	pop igmstate
	cthis mho_click
	end method
	method HO07_Gruz1
	push 1
	pop igmstate
	cthis advsetstdstate
	end method
	method ho_shovel_click
	cthis show
	cthis getname
	cthis remove_from_loupe
	end method
	method ho_dwarf_preclick
	cthis dwarfcrown_preclick
	end method
	method ho_crown_preclick
	cthis dwarfcrown_preclick
	end method
	method dwarfcrown_preclick
	localdef $1
	call cmov,getfree
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l4648
	push "null"
	pop scmov
	cthis hide
	push $1
	spushs
	spop $a
	call [$a],hide
	cthis getname
	call butgame,removebut
	push 1
	call ankrasy,play
	push 610
	call ankrasy,setz
	cthis getpx
	cthis getpy
	call ankrasy,ansetbpos
	jmp l4647
l4648:
	cthis getname
	pop scmov
	push 1
	pop bignoremsclick
	push 6
	pop igmstate
	push 600
	cthis setz
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	push scmov
	call cmov,mssetobj
	push scmov
	call butgame,removebut
l4647:
	end method
	method hiddenobj_put
	call grtxt,empty
	cmp0
	je l4650
	push 20
	pop igmstate
	push 0
	call anpuszka,play
	call anpuszka,getcx
	call anpuszka,getcy
	call grgwiazdki1,setpos
	push 600
	call grgwiazdki1,setz
	push 1
	popax
	sub 0,$a
	call grgwiazdki1,nplay
l4650:
	end method
	method mend
	push "puszka"
	cthis saveitemtopck
	push "ad03_placglowny"
	push "gamead03_placglowny0"
	cthis stdexitdefadv
	end method
	method mouse_lclick
	push bignoremsclick
	cmp0
	je l4652
	push 0
	pop bignoremsclick
	jmp l4651
l4652:
	push scmov
	push "null"
	cmpjne
	cmp0
	je l4654
	call cmov,getfree
	popax
	push 1
	pop igmstate
	push scmov
	spushs
	push 0
	push 0
	spop $a
	call [$a],setpos
	push scmov
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	push scmov
	spushs
	push scmov
	spushs
	spop $a
	call [$a],myz
	spop $a
	call [$a],setz
	push scmov
	call butgame,add
	push "null"
	pop scmov
l4654:
l4651:
	end method
	method mouse_rclick
	push "puszka"
	cthis isvisible_itempopup
	cmp0
	je l4656
	push "puszka"
	cthis hide_itempopup
	jmp l4655
l4656:
	push "puszka"
	push "anpuszka"
	cthis show_itempopup
l4655:
	end method
	method popup_puszka_in
	end method
	method popup_puszka_out
	call anpuszka,show
	end method
	method HINT_CLICK
	clparent Hidden,HINT_CLICK
	push 1
	popax
	sub 0,$a
	call angwiazdkif,isplaying
	neg
	cmp0
	je l4658
	push 2
	spushs
	spop $h
	call $h,rand
	cmp0
	je l4660
	push "ho_dwarf"
	jmp l4659
l4660:
	push "ho_crown"
l4659:
	cthis mgetel
	cthis mhintonobj
l4658:
	end method
	end game

	game mg00Dzban
	parent Banshee
	method init
	push "mg00_dzban"
	clparent Banshee,init
	push A
	push "bgdzban.jpg"
	push "elsc.pyzG 30"
	push "maski.pyzH 40"
	push "korek.pyz 5"
	push "dzbanspod.pyz 7"
	push "ksiezyc.pyzH 10"
	push "dzban.pyz 15"
	push "zlozone.pyzH 12"
	push "animopen.pyzH 14"
	push "blink.pyzH 35"
	push "dymek.pyzH 50"
	push "grall"
	cthis imgsgr=
	push 0
	push 0
	call imgbgdzban,setpos
	push "andymek"
	push "andymek2"
	cthis copyanima
	push "ananimopen"
	push "animopen2"
	cthis copyanima
	call ananimopen,show
	push 40
	call ananimopen,setz
	push "onfinish"
	push "mopen_dzban"
	call animopen2,addmethod
	push "anksiezyc"
	cthis setasitemtopck
	push "anmaski"
	push "anmaski2"
	cthis copyanima
	push "anmaski1"
	call anmaski,addtogamevars
	new int,iilekat
	push 4
	pop iilekat
	call grelsc,first
	push "anrot1"
	cthis copyanima
	call grelsc,first
	push "anrot2"
	cthis copyanima
	call anrot1,hide
	call anrot2,hide
	new filter,ftrot1
	new filter,ftrot2
	new real,robrot
	new int,ilesteps
	call anzlozone,getcx
	call anzlozone,getcy
	call anrot1,setpos
	call anzlozone,getcx
	call anzlozone,getcy
	call anrot2,setpos
	new vector,vpos
	push "mg00Dzban0"
	call grelsc,eval
	call vpos,hash
	push "mg00Dzban1"
	call grelsc,each
	new int,idclick
	push 0
	pop idclick
	new string,sclicked1
	new string,sclicked2
	push "mg00Dzban2"
	call grelsc,eval
	push "timcheck"
	push 500
	push "mg00Dzban6"
	cthis timer=
	push "timrot"
	push 50
	push "mg00Dzban7"
	cthis timer=
	cthis stdstart
	end method
	method mg00Dzban0
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	cthis actionnr
	cthis setframe
	call vpos,size
	call vpos,add
	call anzlozone,getcx
	call anzlozone,getcy
	cthis setpos
	end method
	method mg00Dzban1
	localdef $1
	pop $1
	push $1
	push $1
	call vpos,get
	cthis mchange
	end method
	method mg00Dzban2
	cthis Button_isinalpha
	push "butmoveon"
	push "mg00Dzban3"
	cthis addmethod
	push "butmoveoff"
	push "mg00Dzban4"
	cthis addmethod
	push "butclick"
	push "mg00Dzban5"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg00Dzban3
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4662
	ret
l4662:
	push 1
	popax
	sub 0,$a
	cthis framenr
	call anblink,setframe
	cthis getposx
	cthis getposy
	call anblink,setpos
	call anblink,show
	end method
	method mg00Dzban4
	call anblink,hide
	end method
	method mg00Dzban5
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4664
	ret
l4664:
	push idclick
	push 0
	cmpje
	cmp0
	je l4666
	add idclick,1
	pop idclick
	cthis getname
	cthis mmask
	jmp l4665
l4666:
	push idclick
	push 1
	cmpje
	cmp0
	je l4668
	push sclicked1
	cthis getname
	cmpjne
	cmp0
	je l4670
	add idclick,1
	pop idclick
	cthis getname
	cthis mmask
	push "check"
	pop sgmstate
	call timcheck,play
l4670:
l4668:
l4665:
	end method
	method mg00Dzban6
	push 0
	pop idclick
	push sclicked1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push sclicked2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	cthis mrot
	call anmaski1,hide
	call anmaski2,hide
	end method
	method mg00Dzban7
	push ilesteps
	push 0
	cmpja
	cmp0
	je l4672
	push robrot
	popax
	sub 0,$a
	call ftrot1,rotate
	push robrot
	call ftrot2,rotate
	call anzlozone,getcx
	call anzlozone,getcy
	call anrot1,setpos
	call anzlozone,getcx
	call anzlozone,getcy
	call anrot2,setpos
	sub ilesteps,1
	pop ilesteps
	cthis play
	jmp l4671
l4672:
	call ftrot1,unlink
	call ftrot2,unlink
	call anrot1,hide
	call anrot2,hide
	push sclicked1
	spushs
	spop $a
	call [$a],show
	push sclicked2
	spushs
	spop $a
	call [$a],show
	push sclicked1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push sclicked2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	cthis mchange
	cthis mcheckend
l4671:
	end method
	method mcheckend
	localint $1
	push 1
	pop $1
	localint $2
	push 0
	pop $2
l4673:
	push $2
	call grelsc,size
	cmpjl
	cmp0
	je l4674
	jmp l4676
l4675:
	add $2,1
	pop $2
	jmp l4673
l4676:
	localdef $3
	push $2
	call grelsc,get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpjne
	cmp0
	je l4678
	push 0
	pop $1
l4678:
	jmp l4675
l4674:
	push $1
	cmp0
	je l4680
	push "state_open"
	pop sgmstate
	push "grelsc"
	call butgame,remove
	push 1
	call animopen2,play
	call grelsc,hide
	call anksiezyc,show
	jmp l4679
l4680:
	push "play"
	pop sgmstate
l4679:
	end method
	method mchange
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	je l4682
	ret
l4682:
	localdef $3
	push $1
	call grelsc,get
	pop $3
	localdef $4
	push $2
	call grelsc,get
	pop $4
	localdef $5
	push $3
	spushs
	spop $a
	call [$a],framenr
	pop $5
	push $3
	spushs
	push 1
	popax
	sub 0,$a
	push $4
	spushs
	spop $a
	call [$a],framenr
	spop $a
	call [$a],setframe
	push $4
	spushs
	push 1
	popax
	sub 0,$a
	push $5
	spop $a
	call [$a],setframe
	end method
	method mrot
	localint $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	call grelsc,get
	pop $3
	localdef $4
	push $2
	call grelsc,get
	pop $4
	push $3
	spushs
	spop $a
	call [$a],hide
	push $4
	spushs
	spop $a
	call [$a],hide
	call anrot1,show
	call anrot2,show
	localdef $5
	push sclicked1
	spushs
	spop $a
	call [$a],framenr
	pop $5
	localdef $6
	push sclicked2
	spushs
	spop $a
	call [$a],framenr
	pop $6
	push $3
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $5
	call anrot1,setframe
	push $4
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $6
	call anrot2,setframe
	push "anrot1"
	call ftrot1,link
	push "anrot2"
	call ftrot2,link
	push 2
	call ftrot1,setpivottype
	push 2
	call ftrot2,setpivottype
	localdef $7
	push 1
	popax
	sub 0,$a
	call anrot1,nofframes
	pop $7
	push $5
	push $6
	cmpja
	cmp0
	je l4684
	localdef $8
	push $5
	push $6
	pop $b
	popax
	sub $a,$b
	pop $8
	localdef $9
	push $6
	push $7
	push $5
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	pop $9
	push $8
	push $9
	cmpjl
	cmp0
	je l4686
	push $8
	push 1
	popax
	sub 0,$a
	cthis mupdate
	jmp l4685
l4686:
	push $9
	push 1
	cthis mupdate
l4685:
	jmp l4683
l4684:
	localdef $8
	push $6
	push $5
	pop $b
	popax
	sub $a,$b
	pop $8
	localdef $9
	push $5
	push $7
	push $6
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	pop $9
	push $8
	push $9
	cmpjl
	cmp0
	je l4688
	push $8
	push 1
	cthis mupdate
	jmp l4687
l4688:
	push $9
	push 1
	popax
	sub 0,$a
	cthis mupdate
l4687:
l4683:
	call timrot,play
	end method
	method mupdate
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push iilekat
	pop $b
	popax
	mul $a,$b
	pop ilesteps
	push $2
	push 360
	pop $b
	popax
	mul $a,$b
	push 1
	popax
	sub 0,$a
	call anrot1,nofframes
	push iilekat
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop robrot
	end method
	method mmask
	localstring $1
	pop $1
	localint $2
	localint $3
	call mouse,getpos
	pop $3
	pop $2
	push idclick
	push 1
	cmpje
	cmp0
	je l4690
	push $2
	push $3
	call andymek,setpos
	push 0
	call andymek,play
	jmp l4689
l4690:
	push $2
	push $3
	call andymek2,setpos
	push 0
	call andymek2,play
l4689:
	push "sclicked"
	push idclick
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],set
	localdef $4
	push "anmaski"
	push idclick
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],framenr
	spop $a
	call [$a],setframe
	push $4
	spushs
	spop $a
	call [$a],show
	end method
	method mopen_dzban
	push "play"
	pop sgmstate
	end method
	method anksiezyc_TAKE
	cthis item_gotocenter
	end method
	method anksiezyc_INPCK
	push "kolatka"
	cthis addtopck
	push "end"
	pop sgmstate
	push "timend"
	push 1000
	push "mg00Dzban8"
	cthis timplay
	end method
	method mg00Dzban8
	push "ad00_endintro"
	push "gamead00_endintro0"
	cthis gotoadv
	call ccs,buildfromscreen
	end method
	method mouse_rclick
	push igmdebug
	cmp0
	je l4692
	call anksiezyc,show
	push 200
	call anksiezyc,setz
l4692:
	end method
	end game

	game TestFilm2
	parent StdGame
	method init
	push "film"
	clparent StdGame,init
	push "empty"
	call advmouse,set
	new Film,film1
	push 1
	call film1,bcenter=
	push 1
	call film1,bborders=
	push "mus"
	call film1,musicclass=
	push "scripts/cs01_barghest/"
	push "film"
	call film1,playfilm
	end method
	method mouse_lclick
	call film1,isplaying
	cmp0
	je l4694
	push 1
	call film1,stop
l4694:
	end method
	end game

	game TestFilm
	parent StdGame
	method init
	push "testfilm2"
	clparent StdGame,init
	new Film,film1
	push "onfinish"
	push "film1_filmend"
	call film1,addmethod
	cthis showfps
	new TicksCounter,tc1
	new img,imgbg
	push iResX
	push iResY
	cthis black
	push 255
	call imgbg,create
	push 1
	popax
	sub 0,$a
	call imgbg,setz
	end method
	method key_down
	push "1"
	call keyboard,iskey
	cmp0
	je l4696
	push 2
	call film1,setcycle
	call tc1,start
	push "scripts/testfilm/"
	push "film"
	call film1,playfilm
	jmp l4695
l4696:
	push "2"
	call keyboard,iskey
	cmp0
	je l4698
	push 2
	call film1,setcycle
	call tc1,start
	push "scripts/testfilm2/"
	push "film"
	call film1,playfilm
	jmp l4697
l4698:
	push "3"
	call keyboard,iskey
	cmp0
	je l4700
	call film1,play
l4700:
l4697:
l4695:
	end method
	method showfps
	push "cfps"
	cthis hasvar
	neg
	cmp0
	je l4702
	new CalcFPS,cfps
	push 14
	push 10
	push 10
	call cfps,stdset
l4702:
	call cfps,play
	end method
	method film1_filmend
	cthis free
	push "film time: "
	call tc1,print
	end method
	end game

	game mg01Fontanna
	parent Banshee
	method init
	push "mg01_fontanna"
	clparent Banshee,init
	push A
	push "bkg.jpg"
	push "woda.pyzP 5"
	push "wodamask.pyz 10"
	push "dzwonekblue.pyz 60"
	push "oczy.pyzG 25"
	push "czachy.pyzGH 30"
	push "bluszcz.pyz 35"
	push "medalfontanna.pyz 40"
	push "popexit.pyz 45"
	push "ramka.pyzG 42"
	cthis imgs=
	push "e1_dzwonekblue_taken"
	call clsave,bis
	cmp0
	je l4704
	call andzwonekblue,hide
	jmp l4703
l4704:
	push "andzwonekblue"
	cthis setasitemtopck
l4703:
	push "e1_medalfontanna_taken"
	call clsave,bis
	cmp0
	je l4706
	call anmedalfontanna,hide
	jmp l4705
l4706:
	push "anmedalfontanna"
	cthis setasitemtopck
l4705:
	cthis butpopexit
	new int,idclick
	push 0
	pop idclick
	call grczachy,first
	spushs
	spop $a
	call [$a],show
	call grczachy,first
	spushs
	push 31
	spop $a
	call [$a],setz
	push "mg01Fontanna0"
	call grczachy,eval
	push 0
	call grczachy,removeat
	localint $1
	push 1
	pop $1
l4727:
	push $1
	push 3
	cmpjle
	cmp0
	je l4728
	jmp l4730
l4729:
	add $1,1
	pop $1
	jmp l4727
l4730:
	push "e1_czaszka"
	push $1
	pop $b
	popax
	add $a,$b
	push "_put"
	pop $b
	popax
	add $a,$b
	call clsave,bis
	cmp0
	je l4732
	push $1
	push "e1_czaszka"
	push $1
	pop $b
	popax
	add $a,$b
	push "_putplace"
	pop $b
	popax
	add $a,$b
	call clsave,get
	cthis wstaw_czaszke
l4732:
	jmp l4729
l4728:
	push "banshee1.ogg -v 70 -l"
	call mus,playstr
	cthis stdstart
	end method
	method mg01Fontanna0
	push "isbutin"
	push "mg01Fontanna1"
	cthis addmethod
	push "butmoveon"
	push "mg01Fontanna2"
	cthis addmethod
	push "butmoveoff"
	push "mg01Fontanna3"
	cthis addmethod
	push "butclick"
	push "mg01Fontanna4"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg01Fontanna1
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method mg01Fontanna2
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4708
	push sgmstate
	push "getitem"
	cmpjne
	jmp l4710
l4708:
	push 0
	jmp l4710
l4709:
	push 1
l4710:
	cmp0
	je l4711
	ret
l4711:
	push "take"
	call advmouse,set
	end method
	method mg01Fontanna3
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4713
	push sgmstate
	push "getitem"
	cmpjne
	jmp l4715
l4713:
	push 0
	jmp l4715
l4714:
	push 1
l4715:
	cmp0
	je l4716
	ret
l4716:
	call advmouse,setstd
	end method
	method mg01Fontanna4
	push sgmstate
	push "play"
	cmpjne
	cmp0
	jne l4719
	cthis isvisible
	neg
	jmp l4720
l4718:
	push 0
	jmp l4720
l4719:
	push 1
l4720:
	cmp0
	je l4721
	ret
l4721:
	localdef $1
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	pop $1
	localdef $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	push 1
	popax
	sub 0,$a
	push $1
	cthis setframe
	push $2
	call groczy,get
	spushs
	push 1
	popax
	sub 0,$a
	push $1
	spop $a
	call [$a],setframe
	localdef $3
	push ""
	push $2
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push idclick
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push "2_0"
	cmpst
	jne l4723
	spop $a
	push 1
	cthis mgoclick
	jmp l4722
l4723:
	push "1_1"
	cmpst
	jne l4724
	spop $a
	push 2
	cthis mgoclick
	jmp l4722
l4724:
	push "3_2"
	cmpst
	jne l4725
	spop $a
	push 3
	cthis mgoclick
	jmp l4722
l4725:
	push "0_3"
	cmpst
	jne l4726
	spop $a
	call anwoda,anhide
	add idclick,1
	pop idclick
	push 0
	push idclick
	call anmedalfontanna,setframe
	jmp l4722
l4726:
	spop $a
	push 0
	call anwoda,play
	push 0
	pop idclick
	push 0
	push idclick
	call anmedalfontanna,setframe
l4722:
	end method
	method mgoclick
	localint $1
	pop $1
	cthis framenr
	push 1
	cmpje
	cmp0
	je l4734
	push $1
	call anwoda,play
	add idclick,1
	pop idclick
	jmp l4733
l4734:
	push 0
	call anwoda,play
	push 0
	pop idclick
l4733:
	push 0
	push idclick
	call anmedalfontanna,setframe
	end method
	method USE_czaszka1
	push 1
	cthis _check_use
	end method
	method USE_czaszka2
	push 2
	cthis _check_use
	end method
	method USE_czaszka3
	push 3
	cthis _check_use
	end method
	method _check_use
	localint $1
	pop $1
	cthis advsetstdstate
	call mouse,getpos
	push 0
	push 0
	call grczachy,isin
	cmp0
	je l4736
	push "czaszka"
	push $1
	pop $b
	popax
	add $a,$b
	cthis removefrompck
	push $1
	call grczachy,getsfound
	cthis wstaw_czaszke
	jmp l4735
l4736:
	cthis item_gotopck
l4735:
	end method
	method wstaw_czaszke
	localint $1
	localstring $2
	pop $2
	pop $1
	push $2
	call grczachy,remove
	push $2
	spushs
	spop $a
	call [$a],show
	push "e1_czaszka"
	push $1
	pop $b
	popax
	add $a,$b
	push "_put"
	pop $b
	popax
	add $a,$b
	call clsave,bset
	push "e1_czaszka"
	push $1
	pop $b
	popax
	add $a,$b
	push "_putplace"
	pop $b
	popax
	add $a,$b
	push $2
	call clsave,set
	end method
	method anmedalfontanna_TAKE
	call anmedalfontanna,framenr
	push 4
	cmpje
	cmp0
	je l4738
	cthis item_gotocenter
l4738:
	end method
	method anmedalfontanna_INPCK
	push "e1_medalfontanna_taken"
	call clsave,bset
	push "medalfontanna"
	cthis addtopck
	end method
	method andzwonekblue_INPCK
	push "e1_dzwonekblue_taken"
	call clsave,bset
	push "dzwonekblue"
	cthis addtopck
	end method
	method mend
	push "ad01_widokogolny"
	push "gamead01_widokogolny0"
	cthis stdexitdefadv
	end method
	method HINT_CLICK
	push "e1_wyciagnela_kolatke"
	call clsave,bis
	neg
	cmp0
	je l4740
	push "e1_dzwonekblue_taken"
	call clsave,bis
	neg
	cmp0
	je l4742
	push "andzwonekblue"
	cthis showhint
	jmp l4741
l4742:
	push "anpopexit"
	cthis showhint
l4741:
	jmp l4739
l4740:
	push "e1_medalfontanna_taken"
	call clsave,bis
	cmp0
	je l4744
	push "anpopexit"
	cthis showhint
	jmp l4743
l4744:
	push "anmedalfontanna"
	cthis showhint
l4743:
l4739:
	end method
	end game

	game mg01Schody
	parent Banshee
	method init
	push "mg01_schody"
	clparent Banshee,init
	push A
	push "bkg.jpg"
	push "jezyk.pyzP 5"
	push "jaszczur.pyz 10"
	push "przycisk.pyz 20"
	push "klucz.pyz 25"
	push "dolcien.pyz 30"
	push "klapa.pyz 35"
	push "klapamask.pyz 40"
	push "dolekputmedal.pyz 45"
	push "medalput.pyzH 50"
	push "medalpck.pyzH 55"
	push "lisc1.pyz 60"
	push "lisc2.pyz 60"
	push "lisc3.pyz 60"
	push "lisc4.pyz 60"
	push "cienmask.pyz 70"
	push "motyl.pyzP 115"
	push "ramka.pyzG 80"
	push "popexit.pyz 90"
	cthis imgs=
	cthis butpopexit
	push "anklucz"
	cthis setasitemtopck
	push "e1_mg01_klucz_odkryty"
	call clsave,bis
	neg
	cmp0
	je l4746
	push 1
	call anklucz,disable=
	jmp l4745
l4746:
	call anklapa,hide
l4745:
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 250
	pop $b
	popax
	add $a,$b
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call anmotyl,ansetbpos
	new filter,ftmotyl
	push "anmotyl"
	call ftmotyl,link
	new int,ilicz
	push 0
	pop ilicz
	push "onendframe"
	push "mg01Schody0"
	call anmotyl,addmethod
	push "e1_zabrana_czaszka3"
	call clsave,bis
	neg
	cmp0
	je l4750
	push A
	push "czaszka3.pyz 75"
	cthis imgs=
	push "anczaszka3"
	cthis setasitemtopck
l4750:
	localint $1
	push 1
	pop $1
l4751:
	push $1
	push 4
	cmpjle
	cmp0
	je l4752
	jmp l4754
l4753:
	add $1,1
	pop $1
	jmp l4751
l4754:
	push "e1_mg01_lisc_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_odsuniety"
	pop $b
	popax
	add $a,$b
	call clsave,bis
	cmp0
	je l4756
	push "anlisc"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	spop $a
	call [$a],ansetlastframe
	jmp l4755
l4756:
	push "anlisc"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],mg01Schody1
l4755:
	jmp l4753
l4752:
	call andolekputmedal,mg01Schody5
	push "e1_medalfontanna_is_put"
	call clsave,bis
	cmp0
	je l4779
	call anmedalput,show
l4779:
	push "e1_mg01_klucz_odkryty"
	call clsave,bis
	neg
	cmp0
	je l4781
	call anprzycisk,mg01Schody9
l4781:
	push "timzasuwa"
	push "mg01Schody14"
	cthis cycle=
	cthis stdstart
	end method
	method mg01Schody0
	add ilicz,1
	pop ilicz
	push ilicz
	push 1
	cmpje
	cmp0
	je l4748
	push 0
	pop ilicz
	localreal $1
	push 12
	push 21
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	sub $a,$b
	pop $1
	localreal $2
	push 5
	pop $2
	localreal $3
	call ftmotyl,getangle
	pop $3
	localreal $4
	push $3
	spushs
	spop $h
	call $h,sin
	push $2
	pop $b
	popax
	mul $a,$b
	pop $4
	localreal $5
	push $3
	spushs
	spop $h
	call $h,cos
	push $2
	pop $b
	popax
	mul $a,$b
	pop $5
	push $1
	call ftmotyl,rotate
	push $4
	popax
	sub 0,$a
	push $5
	popax
	sub 0,$a
	cthis move
l4748:
	end method
	method mg01Schody1
	cthis Button_isinalpha
	push "butmoveon"
	push "mg01Schody2"
	cthis addmethod
	push "butmoveoff"
	push "mg01Schody3"
	cthis addmethod
	push "butclick"
	push "mg01Schody4"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg01Schody2
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4758
	ret
l4758:
	call advmouse,setact
	end method
	method mg01Schody3
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4760
	ret
l4760:
	call advmouse,setstd
	end method
	method mg01Schody4
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4762
	ret
l4762:
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 0
	cmpje
	cmp0
	je l4764
	cthis getname
	call butgame,removebut
	call butgame,onmousemove
	push "e1_mg01_lisc_"
	cthis getname
	spushs
	push 0
	push 1
	spop $h
	call $h,gete
	pop $b
	popax
	add $a,$b
	push "_odsuniety"
	pop $b
	popax
	add $a,$b
	call clsave,bset
	push 1
	cthis play
l4764:
	end method
	method mg01Schody5
	push "isbutin"
	push "mg01Schody6"
	cthis addmethod
	push "butmoveon"
	push "mg01Schody7"
	cthis addmethod
	push "butmoveoff"
	push "mg01Schody8"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg01Schody6
	localdef $1
	localdef $2
	pop $2
	pop $1
	push 1
	popax
	sub 0,$a
	call anlisc1,actionnr
	push 1
	cmpje
	cmp0
	je l4765
	push $1
	push $2
	push 0
	push 0
	cthis isin
	jmp l4767
l4765:
	push 0
	jmp l4767
l4766:
	push 1
l4767:
	end method
	method mg01Schody7
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4769
	push sgmstate
	push "getitem"
	cmpjne
	jmp l4771
l4769:
	push 0
	jmp l4771
l4770:
	push 1
l4771:
	cmp0
	je l4772
	ret
l4772:
	push "take"
	call advmouse,set
	end method
	method mg01Schody8
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4774
	push sgmstate
	push "getitem"
	cmpjne
	jmp l4776
l4774:
	push 0
	jmp l4776
l4775:
	push 1
l4776:
	cmp0
	je l4777
	ret
l4777:
	call advmouse,setstd
	end method
	method mg01Schody9
	push "isbutin"
	push "mg01Schody10"
	cthis addmethod
	push "butmoveon"
	push "mg01Schody11"
	cthis addmethod
	push "butmoveoff"
	push "mg01Schody12"
	cthis addmethod
	push "butclick"
	push "mg01Schody13"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg01Schody10
	localdef $1
	localdef $2
	pop $2
	pop $1
	cthis przyciskodkryty
	cmp0
	je l4782
	push $1
	push $2
	push 0
	push 0
	cthis isin
	jmp l4784
l4782:
	push 0
	jmp l4784
l4783:
	push 1
l4784:
	end method
	method mg01Schody11
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4786
	ret
l4786:
	push "take"
	call advmouse,set
	end method
	method mg01Schody12
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4788
	ret
l4788:
	call advmouse,setstd
	end method
	method mg01Schody13
	push sgmstate
	push "play"
	cmpjne
	cmp0
	je l4790
	ret
l4790:
	push 1
	popax
	sub 0,$a
	cthis actionnr
	cmp0
	je l4792
	push 0
	push 0
	cthis setframe
	jmp l4791
l4792:
	push 1
	push 0
	cthis setframe
l4791:
	call anmedalput,isvisible
	cmp0
	je l4794
	push 1
	popax
	sub 0,$a
	cthis actionnr
	jmp l4796
l4794:
	push 0
	jmp l4796
l4795:
	push 1
l4796:
	cmp0
	je l4797
	cthis getname
	call butgame,removebut
	call butgame,onmousemove
	push "odsun"
	pop sgmstate
	call timzasuwa,play
l4797:
	end method
	method mg01Schody14
	push 0
	push 10
	popax
	sub 0,$a
	call anklapa,move
	call anklapa,getpy
	push 0
	cmpjl
	cmp0
	je l4799
	push "play"
	pop sgmstate
	push 0
	call anklucz,disable=
	push "e1_mg01_klucz_odkryty"
	call clsave,bset
	jmp l4798
l4799:
	cthis play
l4798:
	end method
	method anklucz_TAKE
	cthis item_gotocenter
	end method
	method anklucz_INPCK
	push "kluczschodek"
	cthis addtopck
	push "e1_end_schody"
	call clsave,bset
	end method
	method mend
	push "ad01_widokogolny"
	push "gamead01_widokogolny0"
	cthis stdexitdefadv
	end method
	method przyciskodkryty
	push 1
	popax
	sub 0,$a
	call anlisc2,actionnr
	cmp0
	je l4800
	push 1
	popax
	sub 0,$a
	call anlisc3,actionnr
	cmp0
	je l4800
	push 1
	popax
	sub 0,$a
	call anlisc4,actionnr
	jmp l4802
l4800:
	push 0
	jmp l4802
l4801:
	push 1
l4802:
	end method
	method anczaszka3_INPCK
	push "czaszka3"
	cthis addtopck
	push "e1_zabrana_czaszka3"
	call clsave,bset
	end method
	method USE_medalfontanna
	cthis advsetstdstate
	call mouse,getpos
	call andolekputmedal,isbutin
	cmp0
	je l4804
	push "andolekputmedal"
	call butgame,removebut
	push "medalfontanna"
	cthis removefrompck
	call anmedalput,show
	push "e1_medalfontanna_is_put"
	call clsave,bset
	jmp l4803
l4804:
	cthis item_gotopck
l4803:
	end method
	method HINT_CLICK
	push "e1_wyciagnela_kolatke"
	call clsave,bis
	neg
	cmp0
	je l4806
	push "anpopexit"
	cthis showhint
	jmp l4805
l4806:
	push "e1_medalfontanna_taken"
	call clsave,bis
	neg
	cmp0
	je l4808
	push "e1_zabrana_czaszka3"
	call clsave,bis
	cmp0
	je l4810
	push "anpopexit"
	cthis showhint
	jmp l4809
l4810:
	push "anczaszka3"
	cthis showhint
l4809:
	jmp l4807
l4808:
	push "e1_mg01_lisc_1_odsuniety"
	call clsave,bis
	neg
	cmp0
	je l4812
	push "anlisc1"
	cthis showhint
	jmp l4811
l4812:
	push "e1_mg01_lisc_2_odsuniety"
	call clsave,bis
	neg
	cmp0
	je l4814
	push "anlisc2"
	cthis showhint
	jmp l4813
l4814:
	push "e1_mg01_lisc_3_odsuniety"
	call clsave,bis
	neg
	cmp0
	je l4816
	push "anlisc3"
	cthis showhint
	jmp l4815
l4816:
	push "e1_mg01_lisc_4_odsuniety"
	call clsave,bis
	neg
	cmp0
	je l4818
	push "anlisc4"
	cthis showhint
	jmp l4817
l4818:
	push "e1_medalfontanna_is_put"
	call clsave,bis
	neg
	cmp0
	je l4820
	push "andolekputmedal"
	cthis showhint
	push "medalfontanna"
	cthis showhintitem
	jmp l4819
l4820:
	push "e1_mg01_klucz_odkryty"
	call clsave,bis
	neg
	cmp0
	je l4822
	push "anprzycisk"
	cthis showhint
	jmp l4821
l4822:
	push "e1_end_schody"
	call clsave,bis
	neg
	cmp0
	je l4824
	push "anklucz"
	cthis showhint
	jmp l4823
l4824:
	push "anpopexit"
	cthis showhint
l4823:
l4821:
l4819:
l4817:
l4815:
l4813:
l4811:
l4807:
l4805:
	end method
	end game

	game mg02Klodkabrama
	parent Banshee
	method init
	push "mg02_klodkabrama"
	clparent Banshee,init
	push A
	push "bkg.jpg"
	push "lew.pyz 30"
	push "oczy.pyzH 40"
	push "box.pyzH 5"
	push "els.pyzGH 10"
	push "forklucz.pyzH 15"
	push "kolatka.pyzH 40"
	push "klucz.pyzH 20"
	push "popexit.pyz 50"
	cthis imgs=
	cthis butpopexit
	push "e1_lew_losuj"
	call clsave,bis
	neg
	cmp0
	je l4826
	push "e1_lew_losuj"
	call clsave,bset
	localint $1
	push 0
	pop $1
l4827:
	push $1
	call grels,size
	cmpjl
	cmp0
	je l4828
	jmp l4830
l4829:
	add $1,1
	pop $1
	jmp l4827
l4830:
	localdef $2
	push $1
	call grels,get
	pop $2
	push $2
	spushs
	push $1
	push 1
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],nofframes
	push 1
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setframe
	push "e1_lew_els_"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	spushs
	spop $a
	call [$a],framenr
	call clsave,set
	jmp l4829
l4828:
	jmp l4825
l4826:
	localint $1
	push 0
	pop $1
l4831:
	push $1
	call grels,size
	cmpjl
	cmp0
	je l4832
	jmp l4834
l4833:
	add $1,1
	pop $1
	jmp l4831
l4834:
	push $1
	call grels,get
	spushs
	push $1
	push "e1_lew_els_"
	push $1
	pop $b
	popax
	add $a,$b
	call clsave,get
	spop $a
	call [$a],setframe
	jmp l4833
l4832:
l4825:
	push A
	push "odklucza2"
	cthis sfxs=
	new int,bkoniecmech
	cthis mcheckels
	push "onfinish"
	push "mg02Klodkabrama0"
	call anklucz,addmethod
	call ankolatka,mg02Klodkabrama1
	call anlew,mg02Klodkabrama4
	push "mg02Klodkabrama8"
	call grels,eval
	call anforklucz,mg02Klodkabrama11
	push "e1_lew_mech"
	call clsave,bis
	cmp0
	je l4874
	push "opened"
	push 0
	call anlew,setframe
	cthis mlewmech
	jmp l4873
l4874:
	push "e1_lew_kolatka"
	call clsave,bis
	cmp0
	je l4876
	push "sleep"
	push 0
	call anlew,setframe
	call ankolatka,show
	jmp l4875
l4876:
	push 0
	call anoczy,play
l4875:
l4873:
	cthis stdstart
	end method
	method mg02Klodkabrama0
	push "e1_lew_otworzony"
	call clsave,bset
	cthis mend
	end method
	method mg02Klodkabrama1
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg02Klodkabrama2"
	cthis addmethod
	push "onfinish"
	push "mg02Klodkabrama3"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg02Klodkabrama2
	cthis advstdstate
	neg
	cmp0
	je l4836
	ret
l4836:
	push "lewopen"
	pop sgmstate
	push 0
	cthis play
	end method
	method mg02Klodkabrama3
	cthis hide
	push "e1_lew_mech"
	call clsave,bset
	cthis mlewmech
	push "open"
	call anlew,playsmooth
	end method
	method mg02Klodkabrama4
	push "isbutin"
	push "mg02Klodkabrama5"
	cthis addmethod
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg02Klodkabrama6"
	cthis addmethod
	push "onfinish"
	push "mg02Klodkabrama7"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg02Klodkabrama5
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	cmp0
	je l4837
	cthis actionname
	push "normal"
	cmpje
	cmp0
	jne l4840
	cthis actionname
	push "sleep"
	cmpje
	cmp0
	je l4841
	call ankolatka,isvisible
	neg
	jmp l4843
l4841:
	push 0
	jmp l4843
l4842:
	push 1
l4843:
	jmp l4844
l4839:
	push 0
	jmp l4844
l4840:
	push 1
l4844:
	jmp l4845
l4837:
	push 0
	jmp l4845
l4838:
	push 1
l4845:
	end method
	method mg02Klodkabrama6
	cthis advstdstate
	neg
	cmp0
	je l4847
	ret
l4847:
	cthis actionname
	push "normal"
	cmpje
	cmp0
	je l4849
	push "angrylew"
	pop sgmstate
	push "angry"
	cthis playsmooth
	push "angry"
	call anoczy,play
l4849:
	end method
	method mg02Klodkabrama7
	cthis actionname
	push "angry"
	cmpje
	cmp0
	je l4851
	push "angry2"
	cthis play
	jmp l4850
l4851:
	cthis actionname
	push "angry2"
	cmpje
	cmp0
	je l4853
	push "angry3"
	cthis playsmooth
	jmp l4852
l4853:
	cthis actionname
	push "angry3"
	cmpje
	cmp0
	je l4855
	cthis advsetstdstate
	push "normal"
	cthis play
	push "normal"
	call anoczy,play
	jmp l4854
l4855:
	cthis actionname
	push "open"
	cmpje
	cmp0
	je l4857
	cthis advsetstdstate
	push "opened"
	push 0
	cthis setframe
	jmp l4856
l4857:
	cthis actionname
	push "sleep"
	cmpje
	cmp0
	je l4859
	cthis advsetstdstate
l4859:
l4856:
l4854:
l4852:
l4850:
	end method
	method mg02Klodkabrama8
	push "isbutin"
	push "mg02Klodkabrama9"
	cthis addmethod
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg02Klodkabrama10"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg02Klodkabrama9
	localint $1
	localint $2
	pop $2
	pop $1
	push bkoniecmech
	neg
	cmp0
	je l4860
	push $1
	push $2
	push 1
	push 1
	cthis isin
	jmp l4862
l4860:
	push 0
	jmp l4862
l4861:
	push 1
l4862:
	end method
	method mg02Klodkabrama10
	cthis advstdstate
	neg
	cmp0
	jne l4865
	push bkoniecmech
	jmp l4866
l4864:
	push 0
	jmp l4866
l4865:
	push 1
l4866:
	cmp0
	je l4867
	ret
l4867:
	cthis ansetnextfr
	push "e1_lew_els_"
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $b
	popax
	add $a,$b
	cthis framenr
	call clsave,set
	cthis mcheckels
	push bkoniecmech
	cmp0
	je l4869
	call fxodklucza2,play
l4869:
	end method
	method mg02Klodkabrama11
	push "isbutin"
	push "mg02Klodkabrama12"
	cthis addmethod
	cthis Button_moveonms
	cthis Button_moveoffms
	cthis getname
	call butgame,add
	end method
	method mg02Klodkabrama12
	localint $1
	localint $2
	pop $2
	pop $1
	push bkoniecmech
	cmp0
	je l4870
	push $1
	push $2
	push 1
	push 0
	cthis isin
	jmp l4872
l4870:
	push 0
	jmp l4872
l4871:
	push 1
l4872:
	end method
	method mlewmech
	call anbox,show
	call grels,show
	call anforklucz,show
	end method
	method mcheckels
	localint $1
	push 0
	pop $1
l4877:
	push $1
	call grels,size
	cmpjl
	cmp0
	je l4878
	jmp l4880
l4879:
	add $1,1
	pop $1
	jmp l4877
l4880:
	push $1
	call grels,get
	spushs
	spop $a
	call [$a],framename
	spushs
	push "ok"
	spop $h
	call $h,contains
	neg
	cmp0
	je l4882
	push 0
	pop bkoniecmech
	ret
l4882:
	jmp l4879
l4878:
	push 1
	pop bkoniecmech
	end method
	method USE_kolatka
	call mouse,getpos
	push 1
	push 1
	call anlew,isin
	cmp0
	je l4884
	push "kolatka"
	cthis removefrompck
	push "sleep"
	call anlew,play
	call anoczy,anhide
	call ankolatka,show
	push "e1_lew_kolatka"
	call clsave,bset
	jmp l4883
l4884:
	cthis advsetstdstate
	cthis item_gotopck
l4883:
	end method
	method USE_kluczschodek
	push bkoniecmech
	cmp0
	je l4886
	call mouse,getpos
	push 1
	push 0
	call anforklucz,isin
	jmp l4888
l4886:
	push 0
	jmp l4888
l4887:
	push 1
l4888:
	cmp0
	je l4889
	push "kluczschodek"
	cthis removefrompck
	push "kluczotwiera"
	pop sgmstate
	push 0
	call anklucz,play
	jmp l4885
l4889:
	cthis advsetstdstate
	cthis item_gotopck
l4885:
	end method
	method mend
	push "ad02_brama"
	push "gamead02_brama0"
	cthis stdexitdefadv
	end method
	end game

	game mg02Gniazdo
	parent Banshee
	method init
	push "mg02_gniazdo"
	clparent Banshee,init
	push A
	push "bkg.jpg"
	push "ptak.pyzH 20"
	push "ptak2.pyzH 10"
	push "tlo.pyz 5"
	push "jajko.pyzH 15"
	push "ziarno.pyzH 15"
	push "popexit.pyz 50"
	cthis imgs=
	push "e1_jajko_taken"
	call clsave,bis
	neg
	cmp0
	je l4891
	call anjajko,show
	push "anjajko"
	cthis setasitemtopck
l4891:
	push "e1_ziarno_taken"
	call clsave,bis
	neg
	cmp0
	je l4893
	call anziarno,show
	push "anziarno"
	cthis setasitemtopck
l4893:
	push "e1_ptok_odslonil_jajco"
	call clsave,bis
	cmp0
	je l4895
	push "anptak2"
	push "anptakcorp"
	cthis copyanima
	push 1
	call anptak2,play
	push 9
	call anptakcorp,setz
	call anptakcorp,show
	jmp l4894
l4895:
	push 0
	call anptak,play
	push "onfinish"
	push "mg02Gniazdo0"
	call anptak,addmethod
l4894:
	cthis butpopexit
	cthis stdstart
	end method
	method mg02Gniazdo0
	push 0
	cthis play
	end method
	method anjajko_TAKE
	push "e1_ptok_odslonil_jajco"
	call clsave,bis
	cmp0
	je l4897
	cthis item_gotocenter
	jmp l4896
l4897:
	push 1
	call anptak,isplaying
	neg
	cmp0
	je l4899
	push 1
	call anptak,play
l4899:
l4896:
	end method
	method anziarno_TAKE
	push "e1_ptok_odslonil_jajco"
	call clsave,bis
	cmp0
	je l4901
	cthis item_gotocenter
	jmp l4900
l4901:
	push 1
	call anptak,isplaying
	neg
	cmp0
	je l4903
	push 1
	call anptak,play
l4903:
l4900:
	end method
	method anziarno_INPCK
	push "ziarno"
	cthis addtopck
	push "e1_ziarno_taken"
	call clsave,bset
	end method
	method anjajko_INPCK
	push "jajko"
	cthis addtopck
	push "e1_jajko_taken"
	call clsave,bset
	end method
	method mend
	push "ad02_brama"
	push "gamead02_brama0"
	cthis stdexitdefadv
	end method
	end game

	game mg02SkrytkaL
	parent Banshee
	method init
	push "mg02_skrytkal"
	clparent Banshee,init
	end method
	end game

	game mg03_pnacza
	parent Banshee
	method init
	push "mg03_pnacza"
	clparent Banshee,init
	push A
	push "bkg.jpg 0"
	push "base.pyz 1"
	push "rama_win.pyzH 2"
	push "cegla_1.pyzH 3"
	push "cegla_2.pyzH 3"
	push "cegla_3.pyzH 3"
	push "cegla_1_fall.pyzH 3"
	push "cegla_2_fall.pyzH 3"
	push "cegla_3_fall.pyzH 3"
	push "diamond_1.pyzH 4"
	push "diamond_2.pyzH 5"
	push "diamond_3.pyzH 5"
	push "1.pyzH 6"
	push "2.pyzH 6"
	push "3.pyzH 6"
	push "4.pyzH 6"
	push "5.pyzH 6"
	push "6.pyzH 6"
	push "7.pyzH 6"
	push "8.pyzH 6"
	push "9.pyzH 6"
	push "rama.pyz 7"
	push "cut_1.pyz 8"
	push "cut_2.pyz 9"
	push "cut_3.pyz 10"
	push "cut_4.pyz 11"
	push "cut_5.pyz 12"
	push "cut_6.pyz 13"
	push "frame.pyz 14"
	push "popexit.pyz 15"
	cthis imgs=
	cthis butpopexit
	new int,computer_turn
	push 1
	pop computer_turn
	new int,shake1
	push 0
	pop shake1
	new int,shake2
	push 0
	pop shake2
	new int,shake3
	push 0
	pop shake3
	localint $1
	push 1
	pop $1
l4904:
	push $1
	push 9
	cmpjle
	cmp0
	je l4905
	jmp l4907
l4906:
	add $1,1
	pop $1
	jmp l4904
l4907:
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],mg03_pnacza0
	jmp l4906
l4905:
	localint $1
	push 1
	pop $1
l4924:
	push $1
	push 6
	cmpjle
	cmp0
	je l4925
	jmp l4927
l4926:
	add $1,1
	pop $1
	jmp l4924
l4927:
	push "ancut_"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],mg03_pnacza2
	jmp l4926
l4925:
	call ancegla_1,mg03_pnacza4
	call ancegla_2,mg03_pnacza6
	call ancegla_3,mg03_pnacza8
	push "andiamond_1"
	cthis setasitemtopck
	push "andiamond_2"
	cthis setasitemtopck
	push "andiamond_3"
	cthis setasitemtopck
	localint $1
	push 1
	pop $1
l4944:
	push $1
	push 6
	cmpjle
	cmp0
	je l4945
	jmp l4947
l4946:
	add $1,1
	pop $1
	jmp l4944
l4947:
	push "bn03pnacza_cuted_"
	push $1
	pop $b
	popax
	add $a,$b
	call clsave,bis
	cmp0
	je l4949
	push "ancut_"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
l4949:
	jmp l4946
l4945:
	cthis stdstart
	push "bn03pnacza_player_won"
	call clsave,bis
	cmp0
	je l4951
	call anrama,hide
	call anrama_win,show
	push "burned"
	call anrama_win,play
	push "bn03pnacza_cegla_1_pushed"
	call clsave,bis
	cmp0
	je l4953
	call ancegla_1,show
	push "pushed"
	call ancegla_1,play
	push "taken_krysztal_red_1"
	call clsave,bis
	neg
	cmp0
	je l4955
	call andiamond_1,show
l4955:
	jmp l4952
l4953:
	call ancegla_1,show
	push "ancegla_1"
	call butgame,add
l4952:
	push "bn03pnacza_cegla_2_pushed"
	call clsave,bis
	cmp0
	je l4957
	call ancegla_2,show
	push "pushed"
	call ancegla_2,play
	push "taken_krysztal_red_2"
	call clsave,bis
	neg
	cmp0
	je l4959
	call andiamond_2,show
l4959:
	jmp l4956
l4957:
	call ancegla_2,show
	push "ancegla_2"
	call butgame,add
l4956:
	push "bn03pnacza_cegla_3_pushed"
	call clsave,bis
	cmp0
	je l4961
	call ancegla_3,show
	push "pushed"
	call ancegla_3,play
	push "taken_krysztal_blue_1"
	call clsave,bis
	neg
	cmp0
	je l4963
	call andiamond_3,show
l4963:
	jmp l4960
l4961:
	call ancegla_3,show
	push "ancegla_3"
	call butgame,add
l4960:
	jmp l4950
l4951:
	cthis check_game_can_start
l4950:
	end method
	method mg03_pnacza0
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg03_pnacza1"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg03_pnacza1
	cthis advstdstate
	neg
	cmp0
	je l4909
	ret
l4909:
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 0
	cmpje
	cmp0
	je l4911
	push 1
	cthis play
	cthis check_won
	push 0
	cmpje
	cmp0
	je l4913
	cthis computer_turn
	cthis check_won
	push 0
	cmpja
	cmp0
	je l4915
	cthis check_won
	push 1
	cmpje
	cmp0
	je l4917
	cthis player_won
	jmp l4916
l4917:
	cthis start_game
l4916:
	jmp l4914
l4915:
	cthis table_full
	cmp0
	je l4919
	cthis start_game
l4919:
l4914:
	jmp l4912
l4913:
	cthis check_won
	push 1
	cmpje
	cmp0
	je l4921
	cthis player_won
	ret
	jmp l4920
l4921:
	cthis start_game
	ret
l4920:
	cthis table_full
	cmp0
	je l4923
	cthis start_game
l4923:
l4912:
l4911:
	end method
	method mg03_pnacza2
	call anrama_win,getpx
	call anrama_win,getpy
	call anrama_win,getex
	call anrama_win,getey
	cthis clip
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg03_pnacza3"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg03_pnacza3
	cthis advstdstate
	neg
	cmp0
	je l4929
	ret
l4929:
	push 0
	cthis play
	cthis getname
	call butgame,removebut
	call butgame,onmousemove
	push "bn03pnacza_cuted_"
	cthis getname
	spushs
	push 0
	push 1
	spop $h
	call $h,gete
	pop $b
	popax
	add $a,$b
	call clsave,bset
	cthis check_game_can_start
	cmp0
	je l4931
	cthis start_game
l4931:
	end method
	method mg03_pnacza4
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg03_pnacza5"
	cthis addmethod
	end method
	method mg03_pnacza5
	cthis advstdstate
	neg
	cmp0
	je l4933
	ret
l4933:
	push shake1
	push 2
	cmpjl
	cmp0
	je l4935
	push shake1
	push 1
	pop $b
	popax
	add $a,$b
	pop shake1
	push "shake"
	cthis play
	jmp l4934
l4935:
	push "push"
	cthis play
	call ancegla_1_fall,show
	push "fall"
	call ancegla_1_fall,play
	call andiamond_1,show
	push "bn03pnacza_cegla_1_pushed"
	call clsave,bset
	call advmouse,setstd
	cthis getname
	call butgame,removebut
	call butgame,onmousemove
l4934:
	end method
	method mg03_pnacza6
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg03_pnacza7"
	cthis addmethod
	end method
	method mg03_pnacza7
	cthis advstdstate
	neg
	cmp0
	je l4937
	ret
l4937:
	push shake2
	push 2
	cmpjl
	cmp0
	je l4939
	push shake2
	push 1
	pop $b
	popax
	add $a,$b
	pop shake2
	push "shake"
	cthis play
	jmp l4938
l4939:
	call ancegla_2_fall,show
	push "fall"
	call ancegla_2_fall,play
	push "push"
	cthis play
	call andiamond_2,show
	push "bn03pnacza_cegla_2_pushed"
	call clsave,bset
	call advmouse,setstd
	cthis getname
	call butgame,removebut
	call butgame,onmousemove
l4938:
	end method
	method mg03_pnacza8
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg03_pnacza9"
	cthis addmethod
	end method
	method mg03_pnacza9
	cthis advstdstate
	neg
	cmp0
	je l4941
	ret
l4941:
	push shake3
	push 2
	cmpjl
	cmp0
	je l4943
	push shake3
	push 1
	pop $b
	popax
	add $a,$b
	pop shake3
	push "shake"
	cthis play
	jmp l4942
l4943:
	push "push"
	cthis play
	call ancegla_3_fall,show
	push "fall"
	call ancegla_3_fall,play
	call andiamond_3,show
	push "bn03pnacza_cegla_3_pushed"
	call clsave,bset
	call advmouse,setstd
	cthis getname
	call butgame,removebut
	call butgame,onmousemove
l4942:
	end method
	method mend
	push "ad03_placglowny"
	push "gamead03_placglowny0"
	cthis stdexitdefadv
	end method
	method check_game_can_start
	localint $1
	push 1
	pop $1
l4964:
	push $1
	push 6
	cmpjle
	cmp0
	je l4965
	jmp l4967
l4966:
	add $1,1
	pop $1
	jmp l4964
l4967:
	push "bn03pnacza_cuted_"
	push $1
	pop $b
	popax
	add $a,$b
	call clsave,bis
	neg
	cmp0
	je l4969
	push 0
	ret
l4969:
	jmp l4966
l4965:
	cthis start_game
	end method
	method start_game
	localint $1
	push 1
	pop $1
l4970:
	push $1
	push 9
	cmpjle
	cmp0
	je l4971
	jmp l4973
l4972:
	add $1,1
	pop $1
	jmp l4970
l4973:
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push "empty"
	spop $a
	call [$a],play
	jmp l4972
l4971:
	localint $2
	push 7
	pop $2
	push computer_turn
	cmp0
	je l4975
	push "an"
	push $2
	spushs
	spop $a
	call $a,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	spushs
	push "x"
	spop $a
	call [$a],play
	push 0
	pop computer_turn
	jmp l4974
l4975:
	push 1
	pop computer_turn
l4974:
	end method
	method act_anim
	localint $1
	pop $1
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	ret
	end method
	method check_won
	push 1
	cthis act_anim
	push 2
	cthis act_anim
	cmpje
	cmp0
	je l4977
	push 2
	cthis act_anim
	push 3
	cthis act_anim
	cmpje
	cmp0
	je l4977
	push 1
	cthis act_anim
	push 0
	cmpja
	jmp l4979
l4977:
	push 0
	jmp l4979
l4978:
	push 1
l4979:
	cmp0
	je l4980
	push 1
	cthis act_anim
	ret
l4980:
	push 4
	cthis act_anim
	push 5
	cthis act_anim
	cmpje
	cmp0
	je l4982
	push 5
	cthis act_anim
	push 6
	cthis act_anim
	cmpje
	cmp0
	je l4982
	push 4
	cthis act_anim
	push 0
	cmpja
	jmp l4984
l4982:
	push 0
	jmp l4984
l4983:
	push 1
l4984:
	cmp0
	je l4985
	push 4
	cthis act_anim
	ret
l4985:
	push 7
	cthis act_anim
	push 8
	cthis act_anim
	cmpje
	cmp0
	je l4987
	push 8
	cthis act_anim
	push 9
	cthis act_anim
	cmpje
	cmp0
	je l4987
	push 7
	cthis act_anim
	push 0
	cmpja
	jmp l4989
l4987:
	push 0
	jmp l4989
l4988:
	push 1
l4989:
	cmp0
	je l4990
	push 7
	cthis act_anim
	ret
l4990:
	push 1
	cthis act_anim
	push 4
	cthis act_anim
	cmpje
	cmp0
	je l4992
	push 4
	cthis act_anim
	push 7
	cthis act_anim
	cmpje
	cmp0
	je l4992
	push 1
	cthis act_anim
	push 0
	cmpja
	jmp l4994
l4992:
	push 0
	jmp l4994
l4993:
	push 1
l4994:
	cmp0
	je l4995
	push 1
	cthis act_anim
	ret
l4995:
	push 2
	cthis act_anim
	push 5
	cthis act_anim
	cmpje
	cmp0
	je l4997
	push 5
	cthis act_anim
	push 8
	cthis act_anim
	cmpje
	cmp0
	je l4997
	push 2
	cthis act_anim
	push 0
	cmpja
	jmp l4999
l4997:
	push 0
	jmp l4999
l4998:
	push 1
l4999:
	cmp0
	je l5000
	push 2
	cthis act_anim
	ret
l5000:
	push 3
	cthis act_anim
	push 6
	cthis act_anim
	cmpje
	cmp0
	je l5002
	push 6
	cthis act_anim
	push 9
	cthis act_anim
	cmpje
	cmp0
	je l5002
	push 3
	cthis act_anim
	push 0
	cmpja
	jmp l5004
l5002:
	push 0
	jmp l5004
l5003:
	push 1
l5004:
	cmp0
	je l5005
	push 3
	cthis act_anim
	ret
l5005:
	push 1
	cthis act_anim
	push 5
	cthis act_anim
	cmpje
	cmp0
	je l5007
	push 5
	cthis act_anim
	push 9
	cthis act_anim
	cmpje
	cmp0
	je l5007
	push 1
	cthis act_anim
	push 0
	cmpja
	jmp l5009
l5007:
	push 0
	jmp l5009
l5008:
	push 1
l5009:
	cmp0
	je l5010
	push 1
	cthis act_anim
	ret
l5010:
	push 3
	cthis act_anim
	push 5
	cthis act_anim
	cmpje
	cmp0
	je l5012
	push 5
	cthis act_anim
	push 7
	cthis act_anim
	cmpje
	cmp0
	je l5012
	push 3
	cthis act_anim
	push 0
	cmpja
	jmp l5014
l5012:
	push 0
	jmp l5014
l5013:
	push 1
l5014:
	cmp0
	je l5015
	push 3
	cthis act_anim
	ret
l5015:
	push 0
	ret
	end method
	method computer_turn
	push 1
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5017
	push 2
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5017
	push 3
	cthis act_anim
	push 1
	cmpje
	jmp l5019
l5017:
	push 0
	jmp l5019
l5018:
	push 1
l5019:
	cmp0
	je l5020
	push "an2"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5020:
	push 4
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5022
	push 5
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5022
	push 6
	cthis act_anim
	push 1
	cmpje
	jmp l5024
l5022:
	push 0
	jmp l5024
l5023:
	push 1
l5024:
	cmp0
	je l5025
	push "an5"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5025:
	push 7
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5027
	push 8
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5027
	push 9
	cthis act_anim
	push 1
	cmpje
	jmp l5029
l5027:
	push 0
	jmp l5029
l5028:
	push 1
l5029:
	cmp0
	je l5030
	push "an8"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5030:
	push 1
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5032
	push 4
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5032
	push 7
	cthis act_anim
	push 1
	cmpje
	jmp l5034
l5032:
	push 0
	jmp l5034
l5033:
	push 1
l5034:
	cmp0
	je l5035
	push "an4"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5035:
	push 2
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5037
	push 5
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5037
	push 8
	cthis act_anim
	push 1
	cmpje
	jmp l5039
l5037:
	push 0
	jmp l5039
l5038:
	push 1
l5039:
	cmp0
	je l5040
	push "an5"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5040:
	push 3
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5042
	push 6
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5042
	push 9
	cthis act_anim
	push 1
	cmpje
	jmp l5044
l5042:
	push 0
	jmp l5044
l5043:
	push 1
l5044:
	cmp0
	je l5045
	push "an6"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5045:
	push 1
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5047
	push 5
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5047
	push 9
	cthis act_anim
	push 1
	cmpje
	jmp l5049
l5047:
	push 0
	jmp l5049
l5048:
	push 1
l5049:
	cmp0
	je l5050
	push "an5"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5050:
	push 1
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5052
	push 5
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5052
	push 9
	cthis act_anim
	push 0
	cmpje
	jmp l5054
l5052:
	push 0
	jmp l5054
l5053:
	push 1
l5054:
	cmp0
	je l5055
	push "an9"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5055:
	push 1
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5057
	push 5
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5057
	push 9
	cthis act_anim
	push 1
	cmpje
	jmp l5059
l5057:
	push 0
	jmp l5059
l5058:
	push 1
l5059:
	cmp0
	je l5060
	push "an1"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5060:
	push 3
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5062
	push 5
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5062
	push 7
	cthis act_anim
	push 1
	cmpje
	jmp l5064
l5062:
	push 0
	jmp l5064
l5063:
	push 1
l5064:
	cmp0
	je l5065
	push "an5"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5065:
	push 3
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5067
	push 5
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5067
	push 7
	cthis act_anim
	push 0
	cmpje
	jmp l5069
l5067:
	push 0
	jmp l5069
l5068:
	push 1
l5069:
	cmp0
	je l5070
	push "an7"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5070:
	push 3
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5072
	push 5
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5072
	push 7
	cthis act_anim
	push 1
	cmpje
	jmp l5074
l5072:
	push 0
	jmp l5074
l5073:
	push 1
l5074:
	cmp0
	je l5075
	push "an3"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5075:
	push 1
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5077
	push 2
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5077
	push 3
	cthis act_anim
	push 0
	cmpje
	jmp l5079
l5077:
	push 0
	jmp l5079
l5078:
	push 1
l5079:
	cmp0
	je l5080
	push "an3"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5080:
	push 1
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5082
	push 2
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5082
	push 3
	cthis act_anim
	push 1
	cmpje
	jmp l5084
l5082:
	push 0
	jmp l5084
l5083:
	push 1
l5084:
	cmp0
	je l5085
	push "an1"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5085:
	push 4
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5087
	push 5
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5087
	push 6
	cthis act_anim
	push 0
	cmpje
	jmp l5089
l5087:
	push 0
	jmp l5089
l5088:
	push 1
l5089:
	cmp0
	je l5090
	push "an6"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5090:
	push 4
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5092
	push 5
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5092
	push 6
	cthis act_anim
	push 1
	cmpje
	jmp l5094
l5092:
	push 0
	jmp l5094
l5093:
	push 1
l5094:
	cmp0
	je l5095
	push "an4"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5095:
	push 7
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5097
	push 8
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5097
	push 9
	cthis act_anim
	push 0
	cmpje
	jmp l5099
l5097:
	push 0
	jmp l5099
l5098:
	push 1
l5099:
	cmp0
	je l5100
	push "an9"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5100:
	push 7
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5102
	push 8
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5102
	push 9
	cthis act_anim
	push 1
	cmpje
	jmp l5104
l5102:
	push 0
	jmp l5104
l5103:
	push 1
l5104:
	cmp0
	je l5105
	push "an7"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5105:
	push 1
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5107
	push 4
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5107
	push 7
	cthis act_anim
	push 0
	cmpje
	jmp l5109
l5107:
	push 0
	jmp l5109
l5108:
	push 1
l5109:
	cmp0
	je l5110
	push "an7"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5110:
	push 1
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5112
	push 4
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5112
	push 7
	cthis act_anim
	push 1
	cmpje
	jmp l5114
l5112:
	push 0
	jmp l5114
l5113:
	push 1
l5114:
	cmp0
	je l5115
	push "an1"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5115:
	push 2
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5117
	push 5
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5117
	push 8
	cthis act_anim
	push 0
	cmpje
	jmp l5119
l5117:
	push 0
	jmp l5119
l5118:
	push 1
l5119:
	cmp0
	je l5120
	push "an8"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5120:
	push 2
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5122
	push 5
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5122
	push 8
	cthis act_anim
	push 1
	cmpje
	jmp l5124
l5122:
	push 0
	jmp l5124
l5123:
	push 1
l5124:
	cmp0
	je l5125
	push "an2"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5125:
	push 3
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5127
	push 6
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5127
	push 9
	cthis act_anim
	push 0
	cmpje
	jmp l5129
l5127:
	push 0
	jmp l5129
l5128:
	push 1
l5129:
	cmp0
	je l5130
	push "an9"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5130:
	push 3
	cthis act_anim
	push 0
	cmpje
	cmp0
	je l5132
	push 6
	cthis act_anim
	push 1
	cmpje
	cmp0
	je l5132
	push 9
	cthis act_anim
	push 1
	cmpje
	jmp l5134
l5132:
	push 0
	jmp l5134
l5133:
	push 1
l5134:
	cmp0
	je l5135
	push "an3"
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5135:
	localint $1
	push 1
	pop $1
l5136:
	push $1
	push 9
	cmpjle
	cmp0
	je l5137
	jmp l5139
l5138:
	add $1,1
	pop $1
	jmp l5136
l5139:
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push 0
	cmpje
	cmp0
	je l5141
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push "x"
	spop $a
	call [$a],play
	ret
l5141:
	jmp l5138
l5137:
	end method
	method table_full
	localint $1
	push 1
	pop $1
l5142:
	push $1
	push 9
	cmpjle
	cmp0
	je l5143
	jmp l5145
l5144:
	add $1,1
	pop $1
	jmp l5142
l5145:
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push 0
	cmpje
	cmp0
	je l5147
	push 0
	ret
l5147:
	jmp l5144
l5143:
	push 1
	ret
	end method
	method player_won
	cthis clear_table
	call anrama,hide
	call anrama_win,show
	push 0
	call anrama_win,play
	cthis show_bricks
	push "bn03pnacza_player_won"
	call clsave,bset
	end method
	method clear_table
	call advmouse,setstd
	localint $1
	push 1
	pop $1
l5148:
	push $1
	push 9
	cmpjle
	cmp0
	je l5149
	jmp l5151
l5150:
	add $1,1
	pop $1
	jmp l5148
l5151:
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	call butgame,removebut
	jmp l5150
l5149:
	call butgame,onmousemove
	end method
	method show_bricks
	call advmouse,setstd
	call ancegla_1,show
	push "start"
	call ancegla_1,play
	call ancegla_2,show
	push "start"
	call ancegla_2,play
	call ancegla_3,show
	push "start"
	call ancegla_3,play
	push "ancegla_1"
	call butgame,add
	push "ancegla_2"
	call butgame,add
	push "ancegla_3"
	call butgame,add
	call butgame,onmousemove
	end method
	method andiamond_1_TAKE
	push "krysztal_red_1"
	cthis isvisible_itempopup
	neg
	cmp0
	je l5153
	push "krysztal_red_1"
	push "andiamond_1"
	cthis show_itempopup
	push "rotostart"
	push 0
	call andiamond_1,setframe
	jmp l5152
l5153:
	push "krysztal_red_1"
	cthis saveitemtopck
	push "krysztal_red_1"
	cthis hide_itempopup
	cthis item_gotocenter
	call butgame,onmousemove
l5152:
	end method
	method popup_krysztal_red_1_out
	push "taken_krysztal_red_1"
	call clsave,bis
	neg
	cmp0
	je l5155
	call andiamond_1,show
l5155:
	end method
	method popup_krysztal_red_1_clickexit
	push "andiamond_1"
	cthis setactitem
	push "andiamond_1"
	call butgame,sclicked=
	cthis andiamond_1_TAKE
	end method
	method andiamond_1_INPCK
	push "krysztal_red_1"
	cthis addtopck
	end method
	method andiamond_2_TAKE
	push "krysztal_red_2"
	cthis isvisible_itempopup
	neg
	cmp0
	je l5157
	push "krysztal_red_2"
	push "andiamond_2"
	cthis show_itempopup
	push "rotostart"
	call andiamond_2,play
	jmp l5156
l5157:
	push "krysztal_red_2"
	cthis saveitemtopck
	push "krysztal_red_2"
	cthis hide_itempopup
	cthis item_gotocenter
	call butgame,onmousemove
l5156:
	end method
	method popup_krysztal_red_2_out
	push "taken_krysztal_red_2"
	call clsave,bis
	neg
	cmp0
	je l5159
	call andiamond_1,show
l5159:
	end method
	method popup_krysztal_red_2_clickexit
	push "andiamond_2"
	cthis setactitem
	push "andiamond_2"
	call butgame,sclicked=
	cthis andiamond_2_TAKE
	end method
	method andiamond_2_INPCK
	push "krysztal_red_2"
	cthis addtopck
	end method
	method andiamond_3_TAKE
	push "krysztal_blue_1"
	cthis isvisible_itempopup
	neg
	cmp0
	je l5161
	push "krysztal_blue_1"
	push "andiamond_3"
	cthis show_itempopup
	push "rotostart"
	call andiamond_3,play
	jmp l5160
l5161:
	push "krysztal_blue_1"
	cthis saveitemtopck
	push "krysztal_blue_1"
	cthis hide_itempopup
	cthis item_gotocenter
	call butgame,onmousemove
l5160:
	end method
	method popup_krysztal_blue_1_out
	push "taken_krysztal_blue_1"
	call clsave,bis
	neg
	cmp0
	je l5163
	call andiamond_3,show
l5163:
	end method
	method popup_krysztal_blue_1_clickexit
	push "andiamond_3"
	cthis setactitem
	push "andiamond_3"
	call butgame,sclicked=
	cthis andiamond_3_TAKE
	end method
	method andiamond_3_INPCK
	push "krysztal_blue_1"
	cthis addtopck
	end method
	method HINT_CLICK
	localint $1
	push 1
	pop $1
l5164:
	push $1
	push 6
	cmpjle
	cmp0
	je l5165
	jmp l5167
l5166:
	add $1,1
	pop $1
	jmp l5164
l5167:
	push "bn03pnacza_cuted_"
	push $1
	pop $b
	popax
	add $a,$b
	call clsave,bis
	neg
	cmp0
	je l5169
	push "ancut_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis showhint
	ret
l5169:
	jmp l5166
l5165:
	push "bn03pnacza_player_won"
	call clsave,bis
	neg
	cmp0
	je l5171
	push "anbase"
	cthis showhint
	jmp l5170
l5171:
	push "taken_krysztal_red_1"
	call clsave,bis
	neg
	cmp0
	je l5173
	push "andiamond_1"
	cthis showhint
	ret
l5173:
	push "taken_krysztal_red_2"
	call clsave,bis
	neg
	cmp0
	je l5175
	push "andiamond_2"
	cthis showhint
	ret
l5175:
	push "taken_krysztal_blue_1"
	call clsave,bis
	neg
	cmp0
	je l5177
	push "andiamond_3"
	cthis showhint
	ret
l5177:
	push "anpopexit"
	cthis showhint
l5170:
	end method
	end game

	game mg04_glowa1
	parent Banshee
	method init
	push "mg04_glowa1"
	clparent Banshee,init
	push A
	push "bkg.jpg "
	push "bkg.pyz 0"
	push "wnetrze_czaszki.pyz 1"
	push "baza.pyz 2"
	push "grom_normal_g.pyzH 4"
	push "oko_l.pyz 5"
	push "oko_p.pyz 6"
	push "czaszka_l.pyz 7"
	push "czaszka_p.pyz 7"
	push "ramka.pyz 8"
	push "grom_normal_l.pyzH 10"
	push "grom_normal_p.pyzH 11"
	push "grom_normal_d.pyzH 12"
	push "krysztal.pyzH 13"
	push "krysztal_mask.pyzH 14"
	push "glowa1_element.pyzH 15"
	push "popexit.pyz 50"
	cthis imgs=
	cthis butpopexit
	push "anglowa1_element"
	cthis setasitemtopck
	new filter,ftl
	push "angrom_normal_l"
	call ftl,link
	new int,opacity
	push 0
	pop opacity
	push "onendframe"
	push "mg04_glowa10"
	call angrom_normal_l,addmethod
	new filter,ftl2
	push "angrom_normal_p"
	call ftl2,link
	new int,opacity2
	push 0
	pop opacity2
	push "onendframe"
	push "mg04_glowa11"
	call angrom_normal_p,addmethod
	new vector,crystal_states
	push "string"
	call crystal_states,type
	push "begin"
	push "redblue"
	push "blue"
	push "blue"
	push "red"
	push "empty"
	push "blue"
	push "blue"
	push "blue"
	call crystal_states,beginadd
	new vector,crystal_states_2
	push "string"
	call crystal_states_2,type
	push "begin"
	push "red"
	push "empty"
	push "empty"
	push "blue"
	push "red"
	push "red"
	push "red"
	call crystal_states_2,beginadd
	cthis init_crystals
	push "mg04_glowa1_saved"
	call clsave,bis
	cmp0
	je l5183
	cthis load_ring
l5183:
	push "bn_04_glowa_1_lewe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5185
	call anoko_l,hide
l5185:
	push "bn_04_glowa_1_prawe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5187
	call anoko_p,hide
l5187:
	push "bn_04_glowa1_czaszka_otwarta"
	call clsave,bis
	cmp0
	je l5189
	push "taken_glowa1_element"
	call clsave,bis
	neg
	jmp l5191
l5189:
	push 0
	jmp l5191
l5190:
	push 1
l5191:
	cmp0
	je l5192
	call angrom_normal_g,show
	call angrom_normal_d,show
	call anczaszka_l,show
	push "opened"
	call anczaszka_l,play
	call anczaszka_p,show
	push "opened"
	call anczaszka_p,play
	call anglowa1_element,show
	jmp l5188
l5192:
	call angrom_normal_g,hide
	call angrom_normal_d,hide
l5188:
	call anoko_l,mg04_glowa12
	call anoko_p,mg04_glowa15
	call angrom_normal_l,mg04_glowa18
	call angrom_normal_p,mg04_glowa110
	cthis stdstart
	end method
	method mg04_glowa10
	localint $1
	cthis framenr
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	call angrom_normal_l,nofframes
	pop $2
	push $1
	push $2
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cmpjle
	cmp0
	je l5179
	push opacity
	push 2
	pop $b
	popax
	add $a,$b
	pop opacity
	jmp l5178
l5179:
	push opacity
	push 2
	pop $b
	popax
	sub $a,$b
	pop opacity
l5178:
	push opacity
	push 4
	pop $b
	popax
	mul $a,$b
	call ftl,setopacity
	end method
	method mg04_glowa11
	localint $1
	cthis framenr
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	call angrom_normal_p,nofframes
	pop $2
	push $1
	push $2
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cmpjle
	cmp0
	je l5181
	push opacity
	push 2
	pop $b
	popax
	add $a,$b
	pop opacity2
	jmp l5180
l5181:
	push opacity
	push 2
	pop $b
	popax
	sub $a,$b
	pop opacity2
l5180:
	push opacity2
	push 4
	pop $b
	popax
	mul $a,$b
	call ftl2,setopacity
	end method
	method mg04_glowa12
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg04_glowa13"
	cthis addmethod
	push "onfinish"
	push "mg04_glowa14"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg04_glowa13
	cthis advstdstate
	neg
	cmp0
	je l5194
	ret
l5194:
	push "bn_04_glowa_1_lewe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5196
	ret
l5196:
	push "bn_04_glowa_1_kregi_rozwiazane"
	call clsave,bis
	neg
	cmp0
	je l5198
	cthis rotate_circle_1
	jmp l5197
l5198:
	push "push"
	call anoko_l,play
l5197:
	end method
	method mg04_glowa14
	cthis hide
	push "bn_04_glowa_1_lewe_oko_zamkniete"
	call clsave,bset
	push "bn_04_glowa_1_prawe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5200
	push "bn_04_glowa_1_czaszka_otwarta"
	call clsave,bis
	neg
	jmp l5202
l5200:
	push 0
	jmp l5202
l5201:
	push 1
l5202:
	cmp0
	je l5203
	cthis open_skull
l5203:
	end method
	method mg04_glowa15
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg04_glowa16"
	cthis addmethod
	push "onfinish"
	push "mg04_glowa17"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg04_glowa16
	cthis advstdstate
	neg
	cmp0
	je l5205
	ret
l5205:
	push "bn_04_glowa_1_prawe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5207
	ret
l5207:
	push "bn_04_glowa_1_kregi_rozwiazane"
	call clsave,bis
	neg
	cmp0
	je l5209
	cthis rotate_circle_2
	jmp l5208
l5209:
	push "push"
	call anoko_p,play
l5208:
	end method
	method mg04_glowa17
	cthis hide
	push "bn_04_glowa_1_prawe_oko_zamkniete"
	call clsave,bset
	push "bn_04_glowa_1_lewe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5211
	push "bn_04_glowa_1_czaszka_otwarta"
	call clsave,bis
	neg
	jmp l5213
l5211:
	push 0
	jmp l5213
l5212:
	push 1
l5213:
	cmp0
	je l5214
	cthis open_skull
l5214:
	end method
	method mg04_glowa18
	push "onfinish"
	push "mg04_glowa19"
	cthis addmethod
	end method
	method mg04_glowa19
	cthis hide
	end method
	method mg04_glowa110
	push "onfinish"
	push "mg04_glowa111"
	cthis addmethod
	end method
	method mg04_glowa111
	cthis hide
	end method
	method init_crystals
	push "ankrysztal_0"
	push 665
	push 278
	cthis init_crystal
	push "ankrysztal_1"
	push 636
	push 348
	cthis init_crystal
	push "ankrysztal_2"
	push 571
	push 376
	cthis init_crystal
	push "ankrysztal_3"
	push 500
	push 347
	cthis init_crystal
	push "ankrysztal_4"
	push 473
	push 279
	cthis init_crystal
	push "ankrysztal_5"
	push 502
	push 212
	cthis init_crystal
	push "ankrysztal_6"
	push 569
	push 184
	cthis init_crystal
	push "ankrysztal_7"
	push 637
	push 210
	cthis init_crystal
	push "ankrysztal_8"
	push 694
	push 212
	cthis init_crystal
	push "ankrysztal_9"
	push 761
	push 186
	cthis init_crystal
	push "ankrysztal_10"
	push 829
	push 212
	cthis init_crystal
	push "ankrysztal_11"
	push 857
	push 282
	cthis init_crystal
	push "ankrysztal_12"
	push 830
	push 351
	cthis init_crystal
	push "ankrysztal_13"
	push 761
	push 377
	cthis init_crystal
	push "ankrysztal_14"
	push 695
	push 351
	cthis init_crystal
	cthis update_crystals
	end method
	method update_crystals
	localint $1
	push 0
	pop $1
l5215:
	push $1
	call crystal_states,size
	cmpjl
	cmp0
	je l5216
	jmp l5218
l5217:
	add $1,1
	pop $1
	jmp l5215
l5218:
	localstring $2
	push $1
	call crystal_states,get
	pop $2
	push "ankrysztal_"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],play
	jmp l5217
l5216:
	localint $1
	push 0
	pop $1
l5219:
	push $1
	call crystal_states_2,size
	cmpjl
	cmp0
	je l5220
	jmp l5222
l5221:
	add $1,1
	pop $1
	jmp l5219
l5222:
	localstring $2
	push $1
	call crystal_states_2,get
	pop $2
	localint $3
	push $1
	push 8
	pop $b
	popax
	add $a,$b
	pop $3
	push "ankrysztal_"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],play
	jmp l5221
l5220:
	cthis check_rings
	end method
	method init_crystal
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push "ankrysztal"
	push $1
	cthis copyanima
	push "ankrysztal_mask"
	push $1
	push "_mask"
	pop $b
	popax
	add $a,$b
	cthis copyanima
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $1
	spushs
	push "empty"
	spop $a
	call [$a],play
	push $1
	push "_mask"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	push 8
	pop $b
	popax
	add $a,$b
	push $3
	push 5
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	end method
	method rotate_circle_1
	localstring $1
	call crystal_states,size
	push 1
	pop $b
	popax
	sub $a,$b
	call crystal_states,get
	pop $1
	localint $2
	call crystal_states,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l5223:
	push $2
	push 0
	cmpja
	cmp0
	je l5224
	jmp l5226
l5225:
	sub $2,1
	pop $2
	jmp l5223
l5226:
	push $2
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call crystal_states,get
	call crystal_states,set
	jmp l5225
l5224:
	push 0
	push $1
	call crystal_states,set
	cthis update_crystals
	end method
	method rotate_circle_2
	localstring $1
	push 0
	call crystal_states,get
	pop $1
	localstring $2
	call crystal_states_2,size
	push 1
	pop $b
	popax
	sub $a,$b
	call crystal_states_2,get
	pop $2
	localint $3
	call crystal_states_2,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l5227:
	push $3
	push 0
	cmpja
	cmp0
	je l5228
	jmp l5230
l5229:
	sub $3,1
	pop $3
	jmp l5227
l5230:
	push $3
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call crystal_states_2,get
	call crystal_states_2,set
	jmp l5229
l5228:
	push 0
	push $2
	call crystal_states,set
	push 0
	push $1
	call crystal_states_2,set
	cthis update_crystals
	end method
	method check_rings
	push "bn_04_glowa_1_kregi_rozwiazane"
	call clsave,bis
	cmp0
	je l5232
	ret
l5232:
	localint $1
	push 1
	pop $1
l5233:
	push $1
	call crystal_states,size
	cmpjl
	cmp0
	je l5234
	jmp l5236
l5235:
	add $1,1
	pop $1
	jmp l5233
l5236:
	push $1
	call crystal_states,get
	push "red"
	cmpje
	neg
	cmp0
	je l5238
	ret
l5238:
	jmp l5235
l5234:
	localint $1
	push 0
	pop $1
l5239:
	push $1
	call crystal_states_2,size
	cmpjl
	cmp0
	je l5240
	jmp l5242
l5241:
	add $1,1
	pop $1
	jmp l5239
l5242:
	push $1
	call crystal_states_2,get
	push "blue"
	cmpje
	neg
	cmp0
	je l5244
	ret
l5244:
	jmp l5241
l5240:
	call angrom_normal_l,show
	push "blend"
	call angrom_normal_l,play
	call angrom_normal_p,show
	push "blend"
	call angrom_normal_p,play
	push "bn_04_glowa_1_kregi_rozwiazane"
	call clsave,bset
	end method
	method open_skull
	call anglowa1_element,show
	call angrom_normal_g,show
	call angrom_normal_d,show
	push "open"
	call anczaszka_l,play
	push "open"
	call anczaszka_p,play
	push "bn_04_glowa_1_czaszka_otwarta"
	call clsave,bset
	end method
	method USE_krysztal_blue_1
	cthis advsetstdstate
	push "krysztal_blue_1"
	push "blue"
	cthis click_on_empty
	end method
	method USE_krysztal_red_1
	cthis advsetstdstate
	push "krysztal_red_1"
	push "red"
	cthis click_on_empty
	end method
	method USE_krysztal_red_2
	cthis advsetstdstate
	push "krysztal_red_2"
	push "red"
	cthis click_on_empty
	end method
	method click_on_empty
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 1
	popax
	sub 0,$a
	pop $3
	localint $4
	push 0
	pop $4
l5245:
	push $4
	push 14
	cmpjl
	cmp0
	je l5246
	jmp l5248
l5247:
	add $4,1
	pop $4
	jmp l5245
l5248:
	localdef $5
	push "ankrysztal_"
	push $4
	pop $b
	popax
	add $a,$b
	push "_mask"
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	call mouse,getpos
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l5250
	push $4
	pop $3
l5250:
	jmp l5247
l5246:
	push $3
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l5252
	push "ankrysztal_"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push 3
	cmpje
	cmp0
	je l5254
	push $3
	push $1
	push $2
	cthis put_crystal
	jmp l5253
l5254:
	cthis item_gotopck
l5253:
	jmp l5251
l5252:
	cthis item_gotopck
l5251:
	end method
	method put_crystal
	localint $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "ankrysztal_"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	spop $a
	call [$a],play
	push $2
	cthis removefrompck
	push $1
	push 8
	cmpjl
	cmp0
	je l5256
	push $1
	push $3
	call crystal_states,set
	jmp l5255
l5256:
	push $1
	push 8
	pop $b
	popax
	sub $a,$b
	push $3
	call crystal_states_2,set
l5255:
	cthis check_rings
	end method
	method save_ring
	localint $1
	push 0
	pop $1
l5257:
	push $1
	push 15
	cmpjl
	cmp0
	je l5258
	jmp l5260
l5259:
	add $1,1
	pop $1
	jmp l5257
l5260:
	push $1
	push 8
	cmpjl
	cmp0
	je l5262
	push "ankrysztal_"
	push $1
	pop $b
	popax
	add $a,$b
	push $1
	call crystal_states,get
	call clsave,set
	jmp l5261
l5262:
	push "ankrysztal_"
	push $1
	pop $b
	popax
	add $a,$b
	push $1
	push 8
	pop $b
	popax
	sub $a,$b
	call crystal_states_2,get
	call clsave,set
l5261:
	jmp l5259
l5258:
	push "mg04_glowa1_saved"
	call clsave,bset
	end method
	method load_ring
	localint $1
	push 0
	pop $1
l5263:
	push $1
	push 8
	cmpjl
	cmp0
	je l5264
	jmp l5266
l5265:
	add $1,1
	pop $1
	jmp l5263
l5266:
	push $1
	push "ankrysztal_"
	push $1
	pop $b
	popax
	add $a,$b
	call clsave,get
	call crystal_states,set
	jmp l5265
l5264:
	push 0
	push "ankrysztal_0"
	call clsave,get
	call crystal_states_2,set
	localint $1
	push 8
	pop $1
l5267:
	push $1
	push 14
	cmpjl
	cmp0
	je l5268
	jmp l5270
l5269:
	add $1,1
	pop $1
	jmp l5267
l5270:
	push $1
	push 8
	pop $b
	popax
	sub $a,$b
	push "ankrysztal_"
	push $1
	pop $b
	popax
	add $a,$b
	call clsave,get
	call crystal_states_2,set
	jmp l5269
l5268:
	cthis update_crystals
	end method
	method find_empty_slot
	localint $1
	push 1
	popax
	sub 0,$a
	pop $1
	localint $2
	push 0
	pop $2
l5271:
	push $2
	push 15
	cmpjl
	cmp0
	je l5272
	jmp l5274
l5273:
	add $2,1
	pop $2
	jmp l5271
l5274:
	push "ankrysztal_"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push 3
	cmpje
	cmp0
	je l5276
	push $2
	ret
l5276:
	jmp l5273
l5272:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method mend
	cthis save_ring
	push "ad04_brzegjeziora"
	push "gamead04_brzegjeziora0"
	cthis stdexitdefadv
	end method
	method anglowa1_element_TAKE
	cthis item_gotocenter
	end method
	method anglowa1_element_INPCK
	call angrom_normal_g,hide
	call angrom_normal_d,hide
	push "close"
	call anczaszka_l,play
	push "close"
	call anczaszka_p,play
	push "glowa1_element"
	cthis addtopck
	end method
	method HINT_CLICK
	localint $1
	cthis find_empty_slot
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l5278
	push "ankrysztal_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_mask"
	pop $b
	popax
	add $a,$b
	cthis showhint
	jmp l5277
l5278:
	push "bn_04_glowa_1_lewe_oko_zamkniete"
	call clsave,bis
	neg
	cmp0
	je l5280
	push "anoko_l"
	cthis showhint
	ret
	jmp l5279
l5280:
	push "bn_04_glowa_1_prawe_oko_zamkniete"
	call clsave,bis
	neg
	cmp0
	je l5282
	push "anoko_p"
	cthis showhint
	ret
l5282:
l5279:
	push "taken_glowa1_element"
	call clsave,bis
	neg
	cmp0
	je l5284
	push "anglowa1_element"
	cthis showhint
	jmp l5283
l5284:
	push "anpopexit"
	cthis showhint
l5283:
l5277:
	end method
	end game

	game mg04_glowa2
	parent Banshee
	method init
	push "mg04_glowa2"
	clparent Banshee,init
	push A
	push "bkg.jpg "
	push "bkg_game.pyz 1"
	push "base.pyz 2"
	push "diamenty.pyz 3"
	push "wnetrze_czaszki.pyz 4"
	push "grom_normal_g.pyz 5"
	push "oko.pyz 6"
	push "oko_l.pyz 7"
	push "oko_p.pyz 8"
	push "czaszka_l.pyz 9"
	push "czaszka_p.pyz 10"
	push "element.pyzH 11"
	push "grom_normal_l.pyzH 12"
	push "grom_normal_p.pyzH 13"
	push "grom_normal_d.pyzH 14"
	push "ramka.pyz 18"
	push "popexit.pyz 50"
	cthis imgs=
	cthis butpopexit
	push "anoko"
	cthis setasitemtopck
	push 1
	call anoko,disable=
	new filter,ftl
	push "angrom_normal_l"
	call ftl,link
	new int,opacity
	push 0
	pop opacity
	push "onendframe"
	push "mg04_glowa20"
	call angrom_normal_l,addmethod
	new filter,ftl2
	push "angrom_normal_p"
	call ftl2,link
	new int,opacity2
	push 0
	pop opacity2
	push "onendframe"
	push "mg04_glowa21"
	call angrom_normal_p,addmethod
	push "bn_04_glowa_2_element_on"
	call clsave,bis
	cmp0
	je l5290
	call anelement,show
l5290:
	push "bn_04_glowa_2_lewe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5292
	call anoko_l,hide
l5292:
	push "bn_04_glowa_2_prawe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5294
	call anoko_p,hide
l5294:
	push "bn_04_glowa2_czaszka_otwarta"
	call clsave,bis
	cmp0
	je l5296
	push "taken_oko"
	call clsave,bis
	neg
	jmp l5298
l5296:
	push 0
	jmp l5298
l5297:
	push 1
l5298:
	cmp0
	je l5299
	call angrom_normal_d,show
	call anczaszka_l,show
	push "opened"
	call anczaszka_l,play
	call anczaszka_p,show
	push "opened"
	call anczaszka_p,play
	call angrom_normal_g,show
	push 0
	call anoko,disable=
	jmp l5295
l5299:
	call angrom_normal_g,hide
	call angrom_normal_d,hide
l5295:
	call anoko_l,mg04_glowa22
	call anoko_p,mg04_glowa25
	call angrom_normal_l,mg04_glowa28
	call angrom_normal_p,mg04_glowa210
	cthis stdstart
	end method
	method mg04_glowa20
	localint $1
	cthis framenr
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	call angrom_normal_l,nofframes
	pop $2
	push $1
	push $2
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cmpjle
	cmp0
	je l5286
	push opacity
	push 2
	pop $b
	popax
	add $a,$b
	pop opacity
	jmp l5285
l5286:
	push opacity
	push 2
	pop $b
	popax
	sub $a,$b
	pop opacity
l5285:
	push opacity
	push 4
	pop $b
	popax
	mul $a,$b
	call ftl,setopacity
	end method
	method mg04_glowa21
	localint $1
	cthis framenr
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	call angrom_normal_p,nofframes
	pop $2
	push $1
	push $2
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cmpjle
	cmp0
	je l5288
	push opacity
	push 2
	pop $b
	popax
	add $a,$b
	pop opacity2
	jmp l5287
l5288:
	push opacity
	push 2
	pop $b
	popax
	sub $a,$b
	pop opacity2
l5287:
	push opacity2
	push 4
	pop $b
	popax
	mul $a,$b
	call ftl2,setopacity
	end method
	method mg04_glowa22
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg04_glowa23"
	cthis addmethod
	push "onfinish"
	push "mg04_glowa24"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg04_glowa23
	cthis advstdstate
	neg
	cmp0
	je l5301
	ret
l5301:
	push "bn_04_glowa_2_element_on"
	call clsave,bis
	cmp0
	je l5303
	push "bn_04_glowa_2_lewe_oko_zamkniete"
	call clsave,bis
	neg
	jmp l5305
l5303:
	push 0
	jmp l5305
l5304:
	push 1
l5305:
	cmp0
	je l5306
	push "push"
	call anoko_l,play
	push "bn_04_glowa_2_lewe_oko_zamkniete"
	call clsave,bset
l5306:
	end method
	method mg04_glowa24
	cthis hide
	push "bn_04_glowa_2_prawe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5308
	push "bn_04_glowa_2_czaszka_otwarta"
	call clsave,bis
	neg
	jmp l5310
l5308:
	push 0
	jmp l5310
l5309:
	push 1
l5310:
	cmp0
	je l5311
	cthis open_skull
l5311:
	end method
	method mg04_glowa25
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg04_glowa26"
	cthis addmethod
	push "onfinish"
	push "mg04_glowa27"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg04_glowa26
	cthis advstdstate
	neg
	cmp0
	je l5313
	ret
l5313:
	push "bn_04_glowa_2_element_on"
	call clsave,bis
	cmp0
	je l5315
	push "bn_04_glowa_2_prawe_oko_zamkniete"
	call clsave,bis
	neg
	jmp l5317
l5315:
	push 0
	jmp l5317
l5316:
	push 1
l5317:
	cmp0
	je l5318
	push "bn_04_glowa_2_prawe_oko_zamkniete"
	call clsave,bset
	push "push"
	call anoko_p,play
l5318:
	end method
	method mg04_glowa27
	cthis hide
	push "bn_04_glowa_2_lewe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5320
	push "bn_04_glowa_2_czaszka_otwarta"
	call clsave,bis
	neg
	jmp l5322
l5320:
	push 0
	jmp l5322
l5321:
	push 1
l5322:
	cmp0
	je l5323
	cthis open_skull
l5323:
	end method
	method mg04_glowa28
	push "onfinish"
	push "mg04_glowa29"
	cthis addmethod
	end method
	method mg04_glowa29
	cthis hide
	end method
	method mg04_glowa210
	push "onfinish"
	push "mg04_glowa211"
	cthis addmethod
	end method
	method mg04_glowa211
	cthis hide
	end method
	method open_skull
	call angrom_normal_g,show
	call anoko,show
	push "open"
	call anczaszka_l,play
	push "open"
	call anczaszka_p,play
	call angrom_normal_d,show
	push 0
	call anoko,disable=
	push "bn_04_glowa_2_czaszka_otwarta"
	call clsave,bset
	end method
	method mend
	push "ad04_brzegjeziora"
	push "gamead04_brzegjeziora0"
	cthis stdexitdefadv
	end method
	method anoko_TAKE
	cthis item_gotocenter
	end method
	method anoko_INPCK
	call angrom_normal_g,hide
	call angrom_normal_d,hide
	push "close"
	call anczaszka_l,play
	push "close"
	call anczaszka_p,play
	push "oko"
	cthis addtopck
	end method
	method USE_glowa1_element
	cthis advsetstdstate
	call mouse,getpos
	push 1
	push 1
	call anbase,isin
	cmp0
	je l5325
	push "glowa1_element"
	cthis removefrompck
	call anelement,show
	call angrom_normal_l,show
	push "blend"
	call angrom_normal_l,play
	call angrom_normal_p,show
	push "blend"
	call angrom_normal_p,play
	push "bn_04_glowa_2_element_on"
	call clsave,bset
	jmp l5324
l5325:
	cthis advsetstdstate
	cthis item_gotopck
l5324:
	end method
	method HINT_CLICK
	push "bn_04_glowa_2_element_on"
	call clsave,bis
	neg
	cmp0
	je l5327
	push "anelement"
	cthis showhint
	jmp l5326
l5327:
	push "bn_04_glowa_2_lewe_oko_zamkniete"
	call clsave,bis
	neg
	cmp0
	je l5329
	push "anoko_l"
	cthis showhint
	ret
	jmp l5328
l5329:
	push "bn_04_glowa_2_prawe_oko_zamkniete"
	call clsave,bis
	neg
	cmp0
	je l5331
	push "anoko_p"
	cthis showhint
	ret
l5331:
l5328:
	push "taken_oko"
	call clsave,bis
	neg
	cmp0
	je l5333
	push "anoko"
	cthis showhint
	jmp l5332
l5333:
	push "anpopexit"
	cthis showhint
l5332:
l5326:
	end method
	end game

	game mg04_glowa3
	parent Banshee
	method init
	push "mg04_glowa3"
	clparent Banshee,init
	push A
	push "bkg.jpg"
	push "bkg_game.pyz 1"
	push "wnetrze_czaszki.pyz 2"
	push "baza.pyz 3"
	push "oko_l.pyz 4"
	push "oko_p.pyzH 4"
	push "szczeka_break.pyz 5"
	push "grom_normal_d.pyzH 6"
	push "grom_normal_g.pyzH 6"
	push "grom_normal_p.pyzH 7"
	push "grom_normal_l.pyzH 8"
	push "lopatka.pyzH 9"
	push "czaszka_l.pyz  10"
	push "czaszka_p.pyz 11"
	push "krysztaly.pyz 12"
	push "ramka.pyz 18"
	push "popexit.pyz 20"
	cthis imgs=
	cthis butpopexit
	push "anlopatka"
	cthis setasitemtopck
	new filter,ftl
	push "angrom_normal_l"
	call ftl,link
	new int,opacity
	push 0
	pop opacity
	push "onendframe"
	push "mg04_glowa30"
	call angrom_normal_l,addmethod
	new filter,ftl2
	push "angrom_normal_p"
	call ftl2,link
	new int,opacity2
	push 0
	pop opacity2
	push "onendframe"
	push "mg04_glowa31"
	call angrom_normal_p,addmethod
	push "bn_04_glowa3_czaszka_otwarta"
	call clsave,bis
	cmp0
	je l5339
	push "taken_lopatka"
	call clsave,bis
	neg
	jmp l5341
l5339:
	push 0
	jmp l5341
l5340:
	push 1
l5341:
	cmp0
	je l5342
	call angrom_normal_d,show
	call anczaszka_l,show
	push "opened"
	call anczaszka_l,play
	call anczaszka_p,show
	push "opened"
	call anczaszka_p,play
	call angrom_normal_g,show
	call anlopatka,show
	jmp l5338
l5342:
	call angrom_normal_g,hide
	call angrom_normal_d,hide
l5338:
	push "bn_04_glowa_3_oko_on"
	call clsave,bis
	cmp0
	je l5344
	push "bn_04_glowa_3_prawe_oko_zamkniete"
	call clsave,bis
	neg
	jmp l5346
l5344:
	push 0
	jmp l5346
l5345:
	push 1
l5346:
	cmp0
	je l5347
	call anoko_p,show
	jmp l5343
l5347:
	call anoko_p,hide
l5343:
	push "bn_04_glowa_3_lewe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5349
	call anoko_l,hide
l5349:
	push "bn_04_glowa3_szczeka_faza"
	call clsave,bis
	cmp0
	je l5351
	localint $1
	push "bn_04_glowa3_szczeka_faza"
	call clsave,get
	pop $1
	push "faza"
	push $1
	pop $b
	popax
	add $a,$b
	call anszczeka_break,play
l5351:
	call anoko_l,mg04_glowa32
	call anoko_p,mg04_glowa35
	call anszczeka_break,mg04_glowa38
	cthis stdstart
	end method
	method mg04_glowa30
	localint $1
	cthis framenr
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	call angrom_normal_l,nofframes
	pop $2
	push $1
	push $2
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cmpjle
	cmp0
	je l5335
	push opacity
	push 2
	pop $b
	popax
	add $a,$b
	pop opacity
	jmp l5334
l5335:
	push opacity
	push 2
	pop $b
	popax
	sub $a,$b
	pop opacity
l5334:
	push opacity
	push 4
	pop $b
	popax
	mul $a,$b
	call ftl,setopacity
	end method
	method mg04_glowa31
	localint $1
	cthis framenr
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	call angrom_normal_p,nofframes
	pop $2
	push $1
	push $2
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cmpjle
	cmp0
	je l5337
	push opacity
	push 2
	pop $b
	popax
	add $a,$b
	pop opacity2
	jmp l5336
l5337:
	push opacity
	push 2
	pop $b
	popax
	sub $a,$b
	pop opacity2
l5336:
	push opacity2
	push 4
	pop $b
	popax
	mul $a,$b
	call ftl2,setopacity
	end method
	method mg04_glowa32
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg04_glowa33"
	cthis addmethod
	push "onfinish"
	push "mg04_glowa34"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg04_glowa33
	cthis advstdstate
	neg
	cmp0
	je l5353
	ret
l5353:
	push "bn_04_glowa_3_oko_on"
	call clsave,bis
	cmp0
	je l5355
	push "bn_04_glowa_3_lewe_oko_zamkniete"
	call clsave,bis
	neg
	jmp l5357
l5355:
	push 0
	jmp l5357
l5356:
	push 1
l5357:
	cmp0
	je l5358
	push "push"
	call anoko_l,play
	push "bn_04_glowa_3_lewe_oko_zamkniete"
	call clsave,bset
l5358:
	end method
	method mg04_glowa34
	cthis hide
	push "bn_04_glowa_3_prawe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5360
	push "bn_04_glowa_3_czaszka_otwarta"
	call clsave,bis
	neg
	jmp l5362
l5360:
	push 0
	jmp l5362
l5361:
	push 1
l5362:
	cmp0
	je l5363
	cthis open_skull
l5363:
	end method
	method mg04_glowa35
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg04_glowa36"
	cthis addmethod
	push "onfinish"
	push "mg04_glowa37"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg04_glowa36
	cthis advstdstate
	neg
	cmp0
	je l5365
	ret
l5365:
	push "bn_04_glowa_3_prawe_oko_zamkniete"
	call clsave,bis
	neg
	cmp0
	je l5367
	push "bn_04_glowa_3_prawe_oko_zamkniete"
	call clsave,bset
	push "push"
	call anoko_p,play
l5367:
	end method
	method mg04_glowa37
	cthis hide
	push "bn_04_glowa_3_lewe_oko_zamkniete"
	call clsave,bis
	cmp0
	je l5369
	push "bn_04_glowa_3_czaszka_otwarta"
	call clsave,bis
	neg
	jmp l5371
l5369:
	push 0
	jmp l5371
l5370:
	push 1
l5371:
	cmp0
	je l5372
	cthis open_skull
l5372:
	end method
	method mg04_glowa38
	cthis Button_isin
	cthis Button_moveonms
	cthis Button_moveoffms
	push "butclick"
	push "mg04_glowa39"
	cthis addmethod
	push "onfinish"
	push "mg04_glowa310"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method mg04_glowa39
	cthis advstdstate
	neg
	cmp0
	je l5374
	ret
l5374:
	localint $1
	push "bn_04_glowa3_szczeka_faza"
	call clsave,bis
	cmp0
	je l5376
	push "bn_04_glowa3_szczeka_faza"
	call clsave,get
	pop $1
	jmp l5375
l5376:
	push 0
	pop $1
l5375:
	push "bn_04_glowa3_szczeka_urwana"
	call clsave,bis
	neg
	cmp0
	je l5378
	push $1
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	push 2
	cmpja
	cmp0
	je l5380
	push "bn_04_glowa3_szczeka_urwana"
	call clsave,bset
	push 3
	pop $1
l5380:
	push "break"
	push $1
	pop $b
	popax
	add $a,$b
	call anszczeka_break,play
	push "bn_04_glowa3_szczeka_faza"
	push $1
	call clsave,set
l5378:
	end method
	method mg04_glowa310
	push "bn_04_glowa3_szczeka_faza"
	call clsave,bis
	cmp0
	je l5382
	localint $1
	push "bn_04_glowa3_szczeka_faza"
	call clsave,get
	pop $1
	push "faza"
	push $1
	pop $b
	popax
	add $a,$b
	call anszczeka_break,play
l5382:
	end method
	method open_skull
	call angrom_normal_g,show
	call anlopatka,show
	push "open"
	call anczaszka_l,play
	push "open"
	call anczaszka_p,play
	call angrom_normal_d,show
	push "bn_04_glowa3_czaszka_otwarta"
	call clsave,bset
	end method
	method mend
	push "ad04_brzegjeziora"
	push "gamead04_brzegjeziora0"
	cthis stdexitdefadv
	end method
	method USE_oko
	cthis advsetstdstate
	call mouse,getpos
	push 1
	push 1
	call anbaza,isin
	cmp0
	je l5384
	push "oko"
	cthis removefrompck
	call anoko_p,show
	call angrom_normal_l,show
	push "blend"
	call angrom_normal_l,play
	call angrom_normal_p,show
	push "blend"
	call angrom_normal_p,play
	push "bn_04_glowa_3_oko_on"
	call clsave,bset
	jmp l5383
l5384:
	cthis advsetstdstate
	cthis item_gotopck
l5383:
	end method
	method anlopatka_TAKE
	push "bn_04_glowa3_szczeka_urwana"
	call clsave,bis
	neg
	cmp0
	je l5386
	push "closeopen"
	call anczaszka_l,play
	push "closeopen"
	call anczaszka_p,play
	push "smile"
	call anszczeka_break,play
	jmp l5385
l5386:
	cthis item_gotocenter
l5385:
	end method
	method anlopatka_INPCK
	push "lopatka"
	cthis addtopck
	end method
	method HINT_CLICK
	push "bn_04_glowa_3_oko_on"
	call clsave,bis
	neg
	cmp0
	je l5388
	push "anoko_p"
	cthis showhint
	jmp l5387
l5388:
	push "bn_04_glowa_3_lewe_oko_zamkniete"
	call clsave,bis
	neg
	cmp0
	je l5390
	push "anoko_l"
	cthis showhint
	ret
	jmp l5389
l5390:
	push "bn_04_glowa_3_prawe_oko_zamkniete"
	call clsave,bis
	neg
	cmp0
	je l5392
	push "anoko_p"
	cthis showhint
	ret
l5392:
l5389:
	push "bn_04_glowa3_szczeka_urwana"
	call clsave,bis
	neg
	cmp0
	je l5394
	push "anszczeka_break"
	cthis showhint
	ret
l5394:
	push "taken_lopatka"
	call clsave,bis
	neg
	cmp0
	je l5396
	push "anlopatka"
	cthis showhint
	jmp l5395
l5396:
	push "anpopexit"
	cthis showhint
l5395:
l5387:
	end method
	end game

