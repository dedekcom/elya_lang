game mgProfiles : StdGame	{
	init	{
		StdGame::init("mg_profiles"); 
		 
		if (.checktouchpad) 
		{
			.imgs = (A, "bkg_pad.jpg 1",  "pien.pyz 2", "ok_button.pyz 3", "slot1.pyz 3", "slot2.pyz 3", "slot3.pyz 3", "slot4.pyz 3", "slot5.pyz 3", "but1.pyz 4", "but2.pyz 4", "but3.pyz 4", "but4.pyz 4", "but5.pyz 4",
			"ask_enter_bkg.pyzH 15","askokbtn.pyzH 16","askcancelbtn.pyzH 16" ,
			"ask_del_bkg.pyzH 15","askdelete.pyzH 16", "askno.pyzH 16", "input.pyzH 2"); 	
		}	
		else
		{
			.imgs = (A, "bkg.jpg 1",  "pien.pyz 2", "ok_button.pyz 3", "slot1.pyz 3", "slot2.pyz 3", "slot3.pyz 3", "slot4.pyz 3", "slot5.pyz 3", "but1.pyz 4", "but2.pyz 4", "but3.pyz 4", "but4.pyz 4", "but5.pyz 4",
			"ask_enter_bkg.pyzH 15","askokbtn.pyzH 16","askcancelbtn.pyzH 16" ,
			"ask_del_bkg.pyzH 15","askdelete.pyzH 16", "askno.pyzH 16", "input.pyzH 2"); 
		}	
		
		 
		
		 
		
		
		//mus.playstr("ck1_start.ogg -v 40 ck1_loop.ogg -v 40 -l");
		
		
		new img img_enter_name; 
		new img img_delete_name; 
		
		new font fntprnom;
		fntprnom.load( dbconf.dbget("bookfont:"), 40);  
		
		new ConTextTyper input("fntprnom", 40, 255,255,255, "a0 ", 9);
		input.setpos( <"aninput">.getcx - <"aninput">.getw /2  , <"aninput">.getcy - <"aninput">.geth /2);
		input.setz(30);
		//input.Sdir = ("center");
		new bool p_znak = true;	 
		 
		input.txtset(dbgame.dbget("newplayer"));
		input.hide;
		input.disable;

		new int slot_selected = 0;	
		new int slot_selected_tmp = 0;	
		new  bool bFullScreen = false;	
		
		clsmen.saveonset = (true);
		
		if( clsmen.has("currentprofile") ) 
		{
			slot_selected = clsmen.get("currentprofile");
			bFullScreen =  clsmen.get("fullscreen");
		}
		
		new font fntprofile;
		fntprofile.load( dbconf.dbget("menufont:"), 40);  
		 
		anok_button{ 
			.addmethod("isbutin", func { (@x, @y)
				.advstdstate && .isin(x,y,1,1);
			} );
			
			.addmethod("butmoveon", func {
				if( .advstdstate )
				{
					.setframe(-1,1); 
					//advmouse.setbut;
				}
				 
			} );
			.addmethod("butmoveoff", func {
				.setframe(-1,0); 
				advmouse.setstd; 
			} );
			
			.addmethod("butclick", func {
					 
					clsmen.set("currentprofile",slot_selected);
					 
					.mend ;
				} );
			butgame.add(this);	 
		} ;
		
		
		for (int i = 1; i<6; i++)
		{
			<"anbut"+i>(i){ 
				(int id)
				.var2("myid", id); 
				.addmethod("isbutin", func { (@x, @y)
					.advstdstate && .isin(x,y,1,1);
				} );
				.addmethod("butmoveon", func {
					if( .advstdstate )
					{
						.but_over(.myid);
						//advmouse.setbut;
					}
					 
				} );
				.addmethod("butmoveoff", func {
					.but_off(.myid);
					advmouse.setstd; 
				} );
				.addmethod("butclick", func {
					.but_clicked(.myid);
				} );
				
				if( .hasprofile(.myid) )
					<"anbut"+.myid>.setframe(-1,2); 
				
				butgame.add(this);	 
			} ;
			
			<"anslot"+i>(i){ 
				(int id)
				.var2("myid", id); 
				.Button_isinalpha;
				 
				.addmethod("butmoveoff", func {
					 
					advmouse.setstd; 
				} );
				.addmethod("butclick", func {
					.slot_clicked(.myid);
				} );
				butgame.add(this);	 
			} ;
			
			.newtext("txtslot"+i, "empty", "fntprofile", 240,109,13); 
			 
			<"txtslot"+i>.setz(5);
			if( .hasprofile(i) )
			{
				<"txtslot"+i>.txtset( clsmen.get("profilename_"+i));
				<"txtslot"+i>.show;
				<"txtslot"+i>.setpos(<"anslot"+i>.getcx  - <"txtslot"+i>.getw /2 -15 , <"anslot"+i>.getcy - <"txtslot"+i>.geth/2 + 5); 
			}
			else
			{
				<"txtslot"+i>.hide;
			}
				 
		}
		
		if (slot_selected > 0 )
		{
			if (.monly_profile)
			{
				<"anbut"+slot_selected>.hide;	
			}
			<"anslot"+slot_selected>.setframe(-1,1);  
				
		}
			
		ccs.enter( func {
			ccs.buildblack;
			.advsetstdstate;
			mus.smixer = ("engine");
			mus.playstr("ck1_loop.ogg -v 40 -l");
		} ); 
		
		new gmimgvec grenter_name;
		grenter_name.addlist(A, "anask_enter_bkg",   "anaskokbtn", "anaskcancelbtn", "input");
		
		//"ask_del_bkg.pyzH 15","askdelete.pyzH 16","askno.pyzH 16"
		new gmimgvec grdelete;
		grdelete.addlist(A, "anask_del_bkg",   "anaskdelete", "anaskno");
		
		
		anaskokbtn.Button_isinalpha;
		anaskokbtn.Button_moveon_std;
		anaskokbtn.Button_moveoff;
		anaskokbtn.addmethod("butclick", func {
			.refresh_slots(true);
			slot_selected = slot_selected_tmp;
			<"anslot"+slot_selected_tmp>.setframe(-1,1); 
			clsmen.set("profilename_"+slot_selected_tmp, input.get());
			clsmen.set("currentprofile",slot_selected_tmp);
			clsmen.set("difficulty_"+slot_selected_tmp , 1);
			clsave.set("GAME_diflevel", 1);	
			<"txtslot"+slot_selected_tmp>.txtset( clsmen.get("profilename_"+slot_selected_tmp));
			<"txtslot"+slot_selected_tmp>.setpos(<"anslot"+slot_selected_tmp>.getcx  - <"txtslot"+slot_selected_tmp>.getw /2 -15, <"anslot"+slot_selected_tmp>.getcy - <"txtslot"+slot_selected_tmp>.geth/2 + 5); 
			<"txtslot"+slot_selected_tmp>.show;
			<"anbut"+slot_selected_tmp>.setframe(-1,2);
			 .hide_enter_name();
			 keyboard.hide;
			 img_enter_name.anzoomfadeinout(300,-1,-1, func {
				.advsetstdstate;
				 
			} ); 
				 
		
		});
		butgame.add("anaskokbtn");
		
		anaskcancelbtn.Button_isinalpha;
		anaskcancelbtn.Button_moveoff;
		anaskcancelbtn.Button_moveon_std;
		anaskcancelbtn.addmethod("butclick", func {
			.hide_enter_name();
			 img_enter_name.anzoomfadeinout(200,-1,-1, func {
			.advsetstdstate;
				 
			} ); 
		} );
		butgame.add("anaskcancelbtn");
		
		//////
		
		anaskdelete.Button_isinalpha;
		anaskdelete.Button_moveon_std;
		anaskdelete.Button_moveoff;
		anaskdelete.addmethod("butclick", func {
			clsmen.remove("profilename_"+slot_selected_tmp);
			clsmen.remove("difficulty_"+slot_selected_tmp);
			clsmen.set("profile_"+slot_selected_tmp+"_started_game",0);
			
			<"txtslot"+slot_selected_tmp>.txtset("");
			<"txtslot"+slot_selected_tmp>.hide;
			<"anbut"+slot_selected_tmp>.setframe(-1,0);
			slot_selected = .mfirstprofile;
			clsmen.set("currentprofile",slot_selected);
			.refresh_slots(false);
			if (slot_selected > 0 )
			{
				<"anslot"+slot_selected>.setframe(-1,1);  
				
				if (.monly_profile)
				{
					<"anbut"+slot_selected>.hide;	
				}
			}
			.hide_ask_delete();
			 img_delete_name.anzoomfadeinout(200,-1,-1, func {
				.advsetstdstate;
				.hide; 	
			} ); 			
			 
		});
		butgame.add("anaskdelete");
		
		anaskno.Button_isinalpha;
		anaskno.Button_moveoff;
		anaskno.Button_moveon_std;
		anaskno.addmethod("butclick", func {
			//slot_selected = slot_selected;
			slot_selected->print;
			clsmen.set("currentprofile",slot_selected);
			 
			<"anslot"+slot_selected>.setframe(-1,1);  
			
			if (.monly_profile)
			{
				<"anbut"+slot_selected>.hide;	
			}
			 
			//.refresh_slots(false);
			.hide_ask_delete();
			 img_delete_name.anzoomfadeinout(200,-1,-1, func {
				.advsetstdstate;
				.hide; 	
			} ); 
		} );
		butgame.add("anaskno");
		
		 
		
	}
	
	hasprofile(int id)	{	clsmen.has("profilename_"+id); }
	
	but_over(int id)
	{
		if (id  == slot_selected && .monly_profile)
			return;
		if( .hasprofile(id) )
			<"anbut"+id>.setframe(-1,3); 
		else
			<"anbut"+id>.setframe(-1,1); 
		 
		 
	}
	
	but_off(int id)
	{
		if( .hasprofile(id) )
			<"anbut"+id>.setframe(-1,2); 
		else
			<"anbut"+id>.setframe(-1,0); 
	}
	
	but_clicked(int id)
	{
		if(clsmen.has("profilename_"+id) )
		{
			if (.monly_profile)
				return;	
			 
			slot_selected_tmp = id;
			.show_ask_delete();
			
		}			
		else
		{
			slot_selected_tmp = id;
			.show_enter_name();
			
		}
	}
	
	slot_clicked(int id)
	{
		if( .hasprofile(id) && clsmen.get("profilename_"+id))
		{
			slot_selected = id;
			.refresh_slots(false);
			<"anslot"+id>.setframe(-1,1); 
		}
	
	}
	
	mfirstprofile	{
		for (int i = 1; i<6; i++)	{
			if( .hasprofile(i) && clsmen.get("profilename_"+i))
				return i;
		}
		 
	}
	
	 
	
	monly_profile	{
		int count = 0;
		for (int i = 1; i<6; i++)	{
			if( .hasprofile(i) )
				count++; 
		}
		 
		if (count == 1)
			return true;
		else
			return false;
	}
	
	refresh_slots(bool showall)
	{
		for (int i = 1; i<6; i++)
		{
			 
			if(!.monly_profile || showall)
			{
				<"anbut"+i>.show;
			}
			<"anslot"+i>.setframe(-1,0); 	
		}
		
	}
	
	input_ontype	{ 
		if(p_znak)
		{
			@znakl = input.get(0);
			input.txtset("");
			p_znak =  false;
		}
	}
	input_onenter{
		this.enable();
		.mcheckname();
	}
	
	input_ontyped	{	.mcheckname;	}
	mcheckname	{
		@s = input.get;
		s.clear;
		s.length>0 && !.check_duplicate(s) ? anaskokbtn.show : anaskokbtn.hide;
	}
	
	check_duplicate(string name)
	{
		for (int i = 1; i<6; i++)
		{
			if (clsmen.get("profilename_" +i) == name)
				return true;
		}
		return false;	
	}
	 
	//////////////////
	hide_enter_name	{	grenter_name.hide; input.disable; .advsetstdstate;}
	buildimg_enter_name	{
		img_enter_name.imgbuildfromlist(A, "anask_enter_bkg",  "anaskokbtn", "anaskcancelbtn");
	}
	 
	
	show_enter_name	{
		p_znak =  true;
		.buildimg_enter_name;
		.hide_enter_name;
		sgmstate = "state_popup"; 
		img_enter_name.anzoomfadeinout(200,1,1, func {
			string name = dbgame.dbget("newplayer"); 
			input.txtset(name);	
			input.enable;
			keyboard.show(<"aninput">.getpx , <"aninput">.getpy,<"aninput">.getw,<"aninput">.geth);
			grenter_name.show;
			if (!.check_duplicate(name))
			{
				anaskokbtn.show; 
			}
			else
				 anaskokbtn.hide;
		} );
	}
	
	/////////////////////
	hide_ask_delete	{	grdelete.hide;	.advsetstdstate;}
	buildimg_ask_delete	{
		img_delete_name.imgbuildfromlist(A, "anask_del_bkg",  "anaskdelete", "anaskno");
	}
	 
	show_ask_delete	{
		.buildimg_ask_delete;
		.hide_ask_delete;
		sgmstate = "state_popup"; 
		img_delete_name.anzoomfadeinout(200,1,1, func {
			grdelete.show;
		} );
	}
	 
	mend	{
		ccs.buildfromscreen;
		gameapi.play("MainMenu"); 
	}	
}
