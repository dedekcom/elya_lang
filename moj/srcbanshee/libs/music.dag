
/***************************************************************************/
class classgamemusic : classdbreader	{
	init()	{
		classdbreader::init();
		new string smuspath = "";
		new string sbgrpath = "";
		new snd _sndbgr;
		_sndbgr.addmethod("onfinish", "_stdsndloop");
	}
	reset()	{
		if( engine.islocalmusic )
			gameapi.stopmusic();
		this.stopbgr();
	}
	_stdsndloop()	{	this.play(); }
	load(string sfile)	{	dbl.loadscript( sfile );	}
	musicpath(string s)	{	smuspath = s;	}
	sndbgrpath(string s)	{	sbgrpath=s;	}
	_play(int ipos)	{
		int i[3], string s[2];
		i0 = 1;
		i1 = dbl.getcolsno( ipos );
		while( i0 < i1 )	{
			s0 = dbl.get( ipos, i0 );	i0++;
			if( s0 == "music" )	{
				s1 = smuspath + dbl.get( ipos, i0 );
				if( !engine.fileexist(s1) )	{
					s1 = sbgrpath + dbl.get( ipos, i0 );
				}
				i0++;
				if( i0 < i1 )	{
					if( dbl.get( ipos, i0 )=="vol" )	{
						i0++;
						gameapi.setmusicvol( dbl.get( ipos, i0 ) );
						i0++;
					}
				} else {
					gameapi.setmusicvol( 100 );
				}
				gameapi.playmusic( s1 );
			} else if (s0 == "bgr")	{
				_sndbgr.load( sbgrpath + dbl.get( ipos, i0 ) );
				i0++;
				if( i0 < i1 )	{
					if( dbl.get( ipos, i0 )=="vol" )	{
						i0++;
						_sndbgr.setvol( dbl.get( ipos, i0 ) );
						i0++;
					}
				} else {
					_sndbgr.setvol( 100 );
				}
				this.playbgr();
			} else {	i0++;	}
		}
	}
	play()	{
		this.reset();
		this.readrow( gameapi.getgamename(), "_play" );
	}
	playbgr()		{	_sndbgr.play();	}
	stopbgr()	{	_sndbgr.stop(false);	}
}

class Music	{
	init	{
		new vector vmus;
		vmus.type("string");
		new int ilastid;
		.vars2(A, "musicvolume", 100, /*"smixer", "gameapi",*/ "globalvolume", 100);
		new string smixer = "gameapi";
		//onmusicfin      {       mus.play;       }
	}
	smixer	{	 smixer;	}
	smixer=(string s)	{
		smixer = s;
		.updatevolume;
	}
	playdb(string s, int row, int icol)	{
		vmus.free;
		while (icol < <s>.getcolsno(row) )	{
			vmus.add( <s>.get(row, icol) );
			icol++;
		}
		ilastid = 0;
		.play;
	}
	playvec(string s, int id)	{
		vmus.free;
		while( id< <s>.size )	{
			vmus.add( <s>.get(id) );
			id++;
		}
		ilastid = 0;
		.play;
	}
	playstr(string s)	{
		vmus.vecbuildfromstring(s, " ");
		ilastid = 0;
		.play;
	}
	play	{
		if( ilastid >= vmus.size ) return;
		
		string s = MUSICPATH + vmus.get(ilastid);
		if( s.gete(0,3)!="ogg" && s.gete(0,3)!="wav" ) s+=".ogg";
		if( !engine.fileexist(s) )	{
			s = SFXPATH + vmus.get(ilastid);
		}
		
		ilastid++;
		
		bool bloop=false;
		int fin=0;
		int fout = 0;
		musicvolume = globalvolume;
		
		for( int i=ilastid; i<vmus.size; i++)	{
			@s1 = vmus.get(i);
			match(s1)	{
				"-l" => bloop = true;
				"-v", "-vol" => { i++;
					musicvolume = vmus.get(i);
					}
				"-fin" => { i++; fin = vmus.get(i); }
				"-fout" => { i++; fout = vmus.get(i); }
				"-p" => ;
				? => { ilastid=i; i = vmus.size; }
			}
		}
		.updatevolume;
		if( bloop ) {
			ilastid = vmus.size;
			if( smixer=="engine" && engine.ismusicplaying && engine.getactmusic==s ) {
			} else {
				<smixer>.playmusic(s);
			}
		} else {
			<smixer>.loadmusic(s);
			if (fin) <smixer>.fadeinmusic(fin);
			else {
				<smixer>.startmusic;
			}
			if (fout) <smixer>.fadeoutmusic(fout);
		}
	}
	getvol	{	(globalvolume * musicvolume) / 100;	}
	fadeout(int ms)	{
		if( <smixer>.ismusicplaying ) {
			<smixer>.fadeoutmusic(ms);
			ilastid=vmus.size;
		}
	}
	updatevolume	{
		<smixer>.setmusicvol(.getvol);
	}
	isplaying	{	<smixer>.ismusicplaying;	}
	getactmusic	{	engine.getactmusic;	}
	stop	{
		<smixer>.endmusic(false);
	}
}
