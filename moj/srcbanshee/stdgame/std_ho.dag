
new string HiddenPath = null;
new string HiddenExclude = null;
new string HiddenEls = null;
new bool HiddenShape = false;

class Hidden	{
	init_hidden(string su ){
		if( HiddenPath!=null )	{
			.path = (HiddenPath);
			HiddenPath = null;
		}
		
		if (!su)
			su = "";
		
		new bool bhoshape = HiddenShape;
		HiddenShape = false;
		new int ihoclickdelay = dbconf.dbget("hoclick_delay:");
		new int ihoclicktimes = dbconf.dbget("hoclick_times:");
		new int ihoclickkara = dbconf.dbget("hoclick_kara:");
		
		new string stakeitemtype = "direct";	// direct, center, 
		
		new int ihotxtz = 507;
		
		new int ihoclicker = 0;
		.timer = ("timhoclicker", ihoclickdelay, func {
				ihoclicker=0;
			} );
		.timer = ("timhokara", ihoclickkara, func {
			imgkara.hide;
			/*if( lektorclicks.pogadal )
				igmstate = 1;*/
			igmstate = 1;
			} );
		new img imgkara;
		imgkara.create(igmappw, igmapph, .black, 128);
		imgkara.setz(2222);
		imgkara.hide;
// 		.debug = (1);
		
		.sfxs = (A, "tolist0 60", "tolist1 60"/*, "tolist2 50"*/, "clickoblok");
		.newsfx("fxtolist2", "tolist0.ogg");
		.newsfx("fxtolist3", "tolist1.ogg");
		.newsfx("fxtolist4", "tolist2.ogg");
		.newsfx("fxtolist5", "tolist3.ogg");
		.newsfx("fxtolist6", "tolist4.ogg");
		
		.newgrimg("grels", "els"+su, 10);
		
		new gmimgvec grelscopy;
		grelscopy.copy("grels");
		
		if( HiddenExclude!=null )	{
			new gmimgvec grexclude;
			.lang_db("dbexc", HiddenExclude);
			for( int i=0; i< dbexc.getrowsno; i++)	{
				@s = grels.getsac( dbexc.get(i,0) );
				<s>.hide;
				grels.remove(s);
				grexclude.add(s);
			}
			HiddenExclude = null;
		}
		.mpanel;
		
		new string sclickedho = null;
		
		int i[4], string s[4];
		new gmimgvec grtxt;
		
		if( bhoshape ) {
			for( int i=0; i< grels.size; i++)	{
				s2 = grels.get(i);
				if( <s2>.nofframes(-1) > 2 )	{
					s0 = "anshadow_"+s2;
					.copyanima(s2, s0);
					<s0>.setframe(-1, 2);	// cien
					<s0>.setz(ihotxtz);
					<s0>.show;
					
					<s2>.var2("stxtview", s0);
					
					grtxt.add(s0);
				}
			}
		} else {
			if( HiddenEls!=null )	{
				.lang_db("dbtxts", HiddenEls);
				HiddenEls=null;
			} else {
				.lang_db("dbtxts", "els_");
			}
			
			new vector vtexts; vtexts.type("string");
			new gmimgvec grtxtgrey;
			
			
			int bvirtual;
			new int itxtheight = 16->igetsc;
			
			s0 = dbconf.dbget("hoguifont:");
			if( s0==null ) s0 = sgmfontitalic;
			.newfont("fnttxts", s0, itxtheight);
			
			for( int i=0; i<dbtxts.getrowsno; i++)	{
				if( dbtxts.getcolsno(i)>1 )	{
					bvirtual = false;
					s0 = dbtxts.get(i,0);
					if( s0=="<external>" )	{
						s2 = dbtxts.get(i,1);
						s1 = dbtxts.get(i,2);
						s0 = s2;
						i0 = -1;
					} else if  (s0=="<virtual>")	{
						bvirtual = true;
						s0 = dbtxts.get(i,1);
						s2 = grels.getsac(s0);
						i0 = -1;
					} else {
						s2 = grels.getsac(s0);
						s1 = dbtxts.get(i,1);
						i0 = vtexts.find(s1);
					}
					if( i0>=0 )	{
						for( i1=0; i1 < grtxt.size; i1++)	{
							s3 = grtxt.get(i1);
							if( <s3>.idvtext==i0 )	{
								<s2>.var2("stxtview", s3);
								<s3>.mupdatetxt(1);
							}
						}
					} else if ( bvirtual )	{
						<s2>.var2("stxtview", "<virtual>");
					} else {
						vtexts.add(s1);
						
						s0 = "txtel_" + s0;
						if( dbtxts.get(i,0) == "<external>" )	{
							.newtext(s0, s1, "fnttxts", .hoexternalcol );
							<s0>.var2("externalan", s2);
							<s2>.var2("externaltxt", s0);
						} else {
							.newtext(s0, s1, "fnttxts", .guifontcolor );
						}
						<s0>.hide;
						<s0>.setz(ihotxtz);
						<s0>.vars2(A, "stekst", s1, "icnt", 1, "iidtxt", 0, "idvtext", vtexts.size-1);
						<s0>.addmethod("mupdatetxt", func { (int ile)
							icnt+=ile;
							.txtset( stekst + " 0/" + icnt );
							} );
						<s0>.addmethod("mupdatetxt2", func { (int ile)
							iidtxt+=ile;
							.txtset( stekst + " " +iidtxt+ "/" + icnt );
							} );
						grtxt.add(s0);
						
						<s2>.var2("stxtview", s0);
					}
				}
			}
			grtxt.vars2(A, "irows", 3, "icols", 4 );
			grtxt.addmethod("lastid", func {
				int id = 0;
				while( id<.size && <.get(id)>.isvisible )	{
					id++;
				}
				id;
				} );
			grtxt.addmethod("shownext", func {
				int id = .lastid;
				if( id==.size ) return;
				
				if( id < irows*icols )	{
					@s = .get(id);
					int row = id/icols;
					int col = id%icols;
					<s>.setpos( igmappw/2   - (icols.to_r/2.0 - col.to_r - 0.5)*rgmscalex*120 - <s>.getw/2,
						guihoinventory.getpy +10 + rgmscaley*50 + row * ( itxtheight + 2) );
					
					<s>.show;
				}
				} );
			for( i=0; i<12; i++)
				grtxt.shownext;
		}	// bhoshape
		
		new int ilehonaraz = 35;
		new classancounter ctcen;
		ctcen.set("timcenter",ilehonaraz);
		new int idtimcenter = 0;
		new real rcykcenter = 18.0;
		new string shidenmov = null;
		for (int i=0; i<ilehonaraz; i++)	{
			/*new vector <"vhox"+i>; <"vhox"+i>.type("real"); <"vhox"+i>.resize(rcykcenter+1, 0.0);
			new vector <"vhoy"+i>; <"vhoy"+i>.type("real"); <"vhoy"+i>.resize(rcykcenter+1, 0.0);*/
			@dt = 3;
			
			.cycle= ("timcenter"+i, func {
				icyk++;
				
				rdx += rpx;
				rdy += rpy;
				if( ietap==2 )	{
					<shidenmov>.ansetbpos(vhox.get(icyk), vhoy.get(icyk));
					//grgwiazdki1.setpos( vhox.get(icyk), vhoy.get(icyk) );
				} else {
					<shidenmov>.move(rdx, rdy);
				}
				rdx -= rdx->to_i;
				rdy -= rdy->to_i;
				
				@sdym = ctdym.get;
				<sdym>.setpos( <shidenmov>.getcx, <shidenmov>.getcy );
				<sdym>.setz( <shidenmov>.getz-1 );
				
				if( icyk>=rcykcenter )	{
					if( ietap==1 )	{
						idestx = idestx2;
						idesty = idesty2;
						ietap = 2;
						
						/*grgwiazdki1.setpos( <shidenmov>.getcx, <shidenmov>.getcy );
						grgwiazdki1.setz( <shidenmov>.getz-1 );
						grgwiazdki1.nplay(-1);*/
						
						anbable2.setpos( <shidenmov>.getcx, <shidenmov>.getcy );
						anbable2.setz( <shidenmov>.getz-1 );
						anbable2.play(0);
						
						if( stakeitemtype=="center" )
							fxtolist2.playif;
						
						.mstart;
						if( stakeitemtype=="center" )
							<"timcenterb"+myid>.play;
						else if ( stakeitemtype=="direct")
							.play;
					} else {
						fxclickoblok.play;
						ctcen.retf(this);
						if( ctcen.allfree )	{
							.advsetstdstate;
							igmstate = 1;
						}
						string s2;
						if( <shidenmov>.hasvar("externaltxt") ) {
							s2=shidenmov;
						} else {
							s2 = <shidenmov>.actionname;
						}
						//clsave.bset( .getakenho(s2) );
						.saveastaken( s2 );
						
						.removehobject(shidenmov);
						/*<sdym>.setpos( <sclickedho>.getpx + <sclickedho>.getw/2,
							<sclickedho>.getpy + <sclickedho>.geth/2 );
						<sdym>.play("end");*/
						.<s2 + "_put">;
						.hiddenobj_put;
					}
				} else {
					/*if( (ietap==1 && icyk%2) || ietap==2 )
						<sdym>.play("go");*/
					if( ietap==1 || ietap==2 )	{
						<sdym>.play("go");
					}
					.play;
				}
				} );
			<"timcenter"+i>.addmethod("mstart", func {
				@x = <shidenmov>.getcx;
				@y = <shidenmov>.getcy;
				rpx = (idestx - x)->to_r/rcykcenter;
				rpy = (idesty - y)->to_r/rcykcenter;
				rdx = 0.0;
				rdy = 0.0;
				icyk = 0;
				if( ietap==2 )	{
					
					vhox.set(0, x - (x-<shidenmov>.getpx));
					vhoy.set(0, y - (y-<shidenmov>.getpy));
					
					if( rpx<0 )	{
						for( int i=1; i<=rcykcenter; i++)	{
							vhox.set( i, rpx + vhox.get(i-1) - (i-rcykcenter.to_i/2)*5 );
							vhoy.set( i, rpy + vhoy.get(i-1) - (i-rcykcenter.to_i/2)*5 );
						}
					} else {
						for( int i=1; i<=rcykcenter; i++)	{
							vhox.set( i, rpx + vhox.get(i-1) + (i-rcykcenter.to_i/2)*5 );
							vhoy.set( i, rpy + vhoy.get(i-1) - (i-rcykcenter.to_i/2)*5 );
						}
					}
					
					real r[4];
					r0 = idesty - y;
					r1 = vhoy.get( rcykcenter-1 )  - vhoy.get( 0 );
					r2 = r0/r1;
					for( i=1; i<=rcykcenter; i++)
						vhoy.set( i, vhoy.get(i)*r2 );
					
				}
				} );
			<"timcenter"+i> (i) { (@id)
				new vector vhox; vhox.type("real"); vhox.resize(rcykcenter+1, 0.0);
				new vector vhoy; vhoy.type("real"); vhoy.resize(rcykcenter+1, 0.0);
				.vars(A, "rdx", "rdy", "rpx", "rpy", "icyk", "idestx", "idesty", "idestx2", "idesty2",
				"ietap", "shidenmov", "myid", "sclickedho");
				myid = id;
				shidenmov=null;
				sclickedho=null;
			};
			.timer = ("timcenterb"+i, 500, func {
				<"timcenter"+myid>.mstart;
				fxtolist1.playif;
				<"timcenter"+myid>.play;
				} );
			<"timcenterb"+i>.vars2(A, "myid", i);
		}
		
		@s = .getgraphpath;
		.path = ("common");
		@iledymu = 60;
		.newanima("anhodym", "dymki.pyz", 600);
		anhodym.hide;
		new gmimgvec grdym;
		grdym.ancopies("anhodym", iledymu);
		new classancounter ctdym;
		ctdym.set("anhodym_",iledymu);
		
		.imgs = (A, /*"gwiazdkif.pyzH",*/ "gwiazdki1.pyzGH", "bable.pyzH");
		.copyanima("guishowhint", "angwiazdkif");
		
		.copyanima("anbable", "anbable2");
		new gmimgvec grgwiazdkif;
		for( int i=0; i<4; i++ )	{
			.copyanima("angwiazdkif", "angwiazdkif"+i);
			grgwiazdkif.add("angwiazdkif"+i);
		}
		
		.setgraphpath(s);
		
		new int izels = 10;
		grelscopy.each( func { (@id)
			.setz(izels + id*5);
			} );
		grels.each( func { (@id)
			//.setz(izels + id*5);
			.setframe(-1,1);
			.mhobut;
			} );
		/*grtxt.eval( func {
			if( .nofframes(-1) < 2 )
				.hide;
			} );*/
		
		i = 0;
		while( i < grels.size )	{
			@s = grels.get(i);
			if( .istakenhobject(s) && <s>.hasvar("stxtview") )	{
				sclickedho = <s>.stxtview;
				.removehobject(s);
				sclickedho = null;
			} else i++;
		}
		i = 0;
		while ( i < grtxt.size )	{
			@s = grtxt.get(i);
			if( <s>.hasvar("externalan") && .istakenhoitem( <s>.externalan ) )
				.checkexternalobj( <s>.externalan );
			else i++;
		}
		
		if( igmdebug )	{
			new string smovedfont = .stdfont(14);
			.newtext("txtmovedho", "", smovedfont, .grey(240) );
			txtmovedho.setz(1500);
			.newtext("txtmovedho2", "", smovedfont, .grey(2) );
			txtmovedho2.setz(1499);
		}
	}
	/************ hidden ******************/
	hoexternalcol	{	return 255,220,0;	}
	mhobutmask	{	._mhobut(0);	}
	mhobut		{	._mhobut(1);	}
	_mhobut(bool bvis)      {
		if( bvis )	{
			.addmethod("isbutin", func { (@x, @y)
				if( .nofframes(-1)>1 )	{
					.setframe(-1,0);
					.isin(x,y,1,1);
					.setframe(-1,1);
				} else .isin(x,y,1,1);
				} );
		} else   {
			.addmethod("isbutin", func { (@x, @y)
				if( .nofframes(-1)>1 )	{
					.setframe(-1,0);
					.isin(x,y,0,1);
					.setframe(-1,1);
				} else .isin(x,y,1,0);
				} );
		}
		
		.addmethod("butmoveon", func {
			if( igmdebug )	{
				@s = .actionname;
				if( txtmovedho.get != s )	{
					txtmovedho.txtset(s);
					txtmovedho2.txtset(s);
				}
				txtmovedho.setpos( mouse.getpx, mouse.getpy - txtmovedho.geth - 1 );
				txtmovedho2.setpos( mouse.getpx + 1, mouse.getpy - txtmovedho.geth );
				txtmovedho.show;
				txtmovedho2.show;
			}
			if( .hasvar("smovedcursor") )
				advmouse.set(smovedcursor);
			} );
		.addmethod("butmoveoff", func {
			if( igmdebug )	{
				txtmovedho.hide;
				txtmovedho2.hide;
			}
			advmouse.setstd;
			} );
		.var2("myz", .getz);
		.addmethod("butclick", func {
			@s = .actionname;
			if( <GAME>.hasmet( s + "_preclick") )	{
				.<s+"_preclick">;
			} else if( igmstate==1 || sgmstate=="hoout" ) {
				.mho_click;
				.<s + "_click">;
				butgame.onmousemove;
			}
			} );
			
		.addmethod("butrel", func {
			if (.checktouchpad)
				.butclick;
			} );	
		butgame.add(this);
	}
	setmovedcursor(string sitem, string scursor)	{	.setanmovedcursor(.mgetel(sitem),scursor);	}
	setanmovedcursor(string san, string scursor)	{
		if( san!=null )
			<san>.var2("smovedcursor",scursor);	
	}
	mmasks	{
		if( engine.fileexist(.getgraphpath + "masks.pyz") )	{
			.newgrimg("grmasks", "masks", 0);
			grmasks.eval( func {
				.mmask( .actionname );
				if( .nofframes(-1)>1 )
					.play(-1);
				} );
		} else {
			new gmimgvec grmasks;
		}
	}
	mmask(string s)	{
		if( s.getb(0,5)=="_prev" )	{
			@id = grmasks.find(this);
			if( id>0 )
				.setz( <grmasks.get( id-1 )>.getz );
			else .setz( 2 );
		} else {
			string sob;
			//@id = grels.findsac(s);
			@id = grelscopy.findsac(s);
			if( id<0 )	{
				sob = grexclude.getsac(s);
			} else	{
				//sob = grels.get(id);
				sob = grelscopy.get(id);
			}
			.setz( <sob>.getz + 2 );
		}
	}
	mhider(string s)	{
		@sob = grels.getsac(s);
		.setz( <sob>.getz - 2 );
		<sob>.hide;
		.var2("maskedobj", sob);
		.addmethod("hidemask", func {
			if( grels.contains(maskedobj) )
				<maskedobj>.hide;
			} );
		.addmethod("showmask", func {
			if( grels.contains(maskedobj) )
				<maskedobj>.show;
			} );
	}
	mhiderclick	{
		if( .actionnr(-1)==0 )	{
			.setframe(1,0);
			.showmask;
		} else {
			.setframe(0,0);
			.hidemask;
		}
	}
	mho_click	{
		//@id = grtxt.findsac(.actionname);
		/*@s = .actionname;
		sclickedho = null;
		for( int i=0; i<grtxt.size; i++)	{
			if( grtxt.get(i)->strsubbs("txtel_")==s && <grtxt.get(i)>.isvisible )
				sclickedho = grtxt.get(i);
		}*/
		
		if( .hasvar("stxtview") && <stxtview>.isvisible )
			sclickedho = stxtview;
		else sclickedho = null;
		
		//if( id>=0 )	{
		if( sclickedho!=null && (igmstate==1 || sgmstate=="hoout") )	{
			@s = ctcen.getf;
			if( s!=null )	{
				ihoclicker = 0;
				butgame.removebut(this);
		
				//angwiazdkif.anhide;
				grgwiazdkif.eval("anhide");
				
				shidenmov = this;
				<s>.shidenmov = (this);
				.setframe(-1,0);
				.setz(600);
				igmstate = 2;
				
				if( <GAME>.hasmet( .actionname+"_put" ) )
					.advsetstdstate;
				else sgmstate="hoout";
				<s>.idestx = ( igmappw/2 );
				<s>.idesty = ( igmapph/2 );
				<s>.idestx2 = ( <sclickedho>.getpx + <sclickedho>.getw/2 );
				<s>.idesty2 = ( <sclickedho>.getpy + <sclickedho>.geth/2 );
				<s>.ietap = (1);
				<s>.sclickedho = (sclickedho);
				<s>.mstart;
				
				@sdym = ctdym.get;
				<sdym>.setpos( <shidenmov>.getcx, <shidenmov>.getcy );
				<sdym>.play("start");
				
				/*angwiazdkif.setpos( <shidenmov>.getcx, <shidenmov>.getcy );
				angwiazdkif.setz( <shidenmov>.getz-1 );
				angwiazdkif.play(0);*/
				/*anbable.setpos( <shidenmov>.getcx, <shidenmov>.getcy );
				anbable.setz( <shidenmov>.getz-1 );
				anbable.play(0);*/
				
				<s> {
					.play;
					if( stakeitemtype=="direct" )	{
						icyk=rcykcenter;
						.stop(true);
						.fxplayifgr("fxtolist",0,6);
					} else if ( stakeitemtype=="center" )	{
						fxtolist0.playif;
					}
				};
			} else sclickedho=null;
		}
	}
	butgame_lclick	{
		if( igmstate==1 && !grtxt.empty )	{
			if( timhoclicker.isplaying ) {
				ihoclicker++;
			}
			if( ihoclicker==ihoclicktimes )	{
				ihoclicker=0;
				timhoclicker.stop(false);
				sobject = null;
				igmstate = 12345;
				imgkara.show;
				timhokara.play;
				if( !clsave.bis("ho_ukarany") )	{
					clsave.bset("ho_ukarany");
					//.txtplay("lektorclicks");
				}
			} else {
				timhoclicker.play;
			}
		} else ihoclicker=0;
	}
	bool ho_hint_click	{
// 		fxshowhint.playif;
		new gmobjvec _grtmp;
		string s;
		for( int i=0; i<grels.size; i++)	{
			s = grels.get(i);
			if( <s>.hasvar("stxtview") && <s>.stxtview->getb(0,1)!="<" && < <s>.stxtview >.isvisible && 
				!(<s>.hasvar("bnohint") && <s>.bnohint) )
				_grtmp.add(s);
		}
		bool b;
		if( _grtmp.empty ) b = false;
		else b = .mhintonobj(_grtmp.rand);
		delete _grtmp;
		b;
	}
	mgetfirsthint	{
		string s2 = grgwiazdkif.first;
		int i=1;
		while( <s2>.isplaying(-1)!=false && i<grgwiazdkif.size )	{
			s2 = grgwiazdkif.get(i);
			i++;
		}
		if( i==grgwiazdkif.size ) grgwiazdkif.first;
		else s2;
	}
	mishintplaying	{
		for( int i=0; i<grgwiazdkif.size; i++ )
			if( <grgwiazdkif.get(i)>.isplaying(-1) )
				return true;
		false;
	}
	bool mhintonobj(string s)	{
		if( s==null ) return false;
		@actfr = <s>.framenr;
		<s>.setframe(-1,0);
		string s2 = .mgetfirsthint;
		<s2>.setpos( <s>.getcx, <s>.getcy );
		<s>.setframe(-1,actfr);
		<s2>.setz( 600 );
		<s2>.play(0);
		true;
	}
	mgetel(string s)	{
		@id = grels.findsac(s);
		if( id>=0 ) grels.get(id);
		else null;
	}
	mouse_move	{
		StdGame::mouse_move;
		/*if( igmdebug )	{
			if( igmstate==1 )	{
				if( grels.isin(mouse.getpos,1,1) )	{
					@s = <grels.getsfound>.actionname;
					if( txtmovedho.get != s )	{
						txtmovedho.txtset(s);
						txtmovedho2.txtset(s);
					}
					txtmovedho.setpos( mouse.getpx, mouse.getpy - txtmovedho.geth - 1 );
					txtmovedho2.setpos( mouse.getpx + 1, mouse.getpy - txtmovedho.geth );
					txtmovedho.show;
					txtmovedho2.show;
				} else {
					txtmovedho.hide;
					txtmovedho2.hide;
				}
			} else {
				txtmovedho.hide;
				txtmovedho2.hide;
			}
		}*/
	}
	removehobject(string shidenmov)	{
		<shidenmov>.hide;
		grels.remove( shidenmov );
		
		if( bhoshape )	{
			.mputshadow(sclickedho);
		} else {
			@ile = grtxt.irows * grtxt.icols;
			if( <sclickedho>.icnt > <sclickedho>.iidtxt + 1 )	{
				<sclickedho>.mupdatetxt2(1);
			} else {
				if( <sclickedho>.icnt > 1 )
					<sclickedho>.mupdatetxt2(1);
				grtxt.remove( sclickedho );
				grtxtgrey.add( sclickedho );
				<sclickedho>.createtxt( .grey(128) );
				if( grtxtgrey.size == ile && grtxt.size>0 )	{
					grtxtgrey.hide;
					grtxtgrey.free;
					int i = 0;
					while( i<ile && grtxt.size>0 )	{
						grtxt.shownext;
						i++;
					}
				}
			}
		}
	}
	public removehoitem(string sname)	{
		@s = .mgetel(sname);
		<s>.hide;
		grels.remove(s);
	}
	public checkexternalobj(string sob)	{
		if( .istakenhoitem(sob) )	{
			sclickedho = <sob>.externaltxt;
			.removehobject(sob);
			.<"horemoved_"+sob>;
			sclickedho = null;
		}
	}
	public mputshadow(string s)	{
		grtxt.remove( s );
		<s>.setframe(-1, 3);
	}
	public advstdstate			{	igmstate==1 || igmstate==20;	}
	public getakenho(string s)		{	"takenho_" + GAME + "_" + s;	}
	public istakenhobject(string sob)	{	clsave.bis( .getakenho(<sob>.actionname) );	}
	public istakenhoitem(string sitem)	{	clsave.bis( .getakenho(sitem) );	}
	public saveastaken(string sitem)	{	clsave.bset( .getakenho(sitem) );	}
	public canexit	{	igmstate==1 && sgmstate!="hoout";	}
}
