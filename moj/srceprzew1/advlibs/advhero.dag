/*
	klasa bazowa, zawiera podstawowe metody i zmienne bohatera przygodowki
	Dominik Dagiel 3 III 2006
*/

module modulehero	{
	init()	{}
	public setashero(string sanima, string sfunonfinish)	{
		<sanima>.addmethod("buildhero", "buildhero");
// 		<sanima>.addmethod("onendframe", "heroendframe1");
		<sanima>.buildhero();
		<sanima>.addmethod("buildheroframe", "buildheroframe");
		<sanima>.addmethod("onfinish", "herofinish");
		<sanima>.addmethod("getdir", "getdir");
		<sanima>.addmethod("thisfinish", "thisfinish");
		<sanima>.addmethod("playspec", "playspec");
		<sanima>.addmethod("playspec2", "playspec2");
		<sanima>.addmethod("herostop", "herostop");
		<sanima>.addmethod("herostart", "herostart");
		<sanima>.addmethod("setstdfin", "setstdfin");
		<sanima>.addmethod("getpocket", "getpocket");
		<sanima>.setstdfin( sfunonfinish );
	}
	buildheroframe(string san)	{
		<san>.addmethod("onendframe", "heroendframe");
	}
	setstdfin(string s)	{	this.addmethod("onstdfinish", s);	}
	buildhero()	{
		new string _sbase;	// baza akcji
		new int _istate = 0;	// 0 - neutral, 1 - start, 2 - body, 3 - stop
		new string _sfinfun;	// metoda do wywolania na finish akcji bohatera
		new string _sobfin;	// obiekt na ktorym wywolac metode na finish (jak null to this)
		new bool _bplaystop;	// czy odegrac stop
		new int _iiloscsek;	// ilosc sekwencji
		new int _itypsort;		// 0 - po kolei, 1 - random
		new int idsort;		// kolejny nr kawalka
		new string _sobstart;	// obiekt na finish start
		new string _sfunfinstart;	// metoda na finish start
		new bool bthisfin = false;	// czy finish jest w animacji a nie z zewnatrz
	}
	getpocket()	{	return _spocketpref + this.getname(); }
	thisfinish(bool bfin)	{	bthisfin=bfin;	}
	string getdir()	{
		string sdir = this.actionname();
		return sdir.gete(0, 2);
	}
	playspec(string sbase, int iloscsek, int itypsort, bool bstart, string sobstart, string sfunfinstart,
		bool bstop, string sobfin, string sfinfun, string sdir)	{
		_sbase = sbase;
		_iiloscsek = iloscsek;
		_itypsort = itypsort;
		_bplaystop = bstop;
		_sobfin = sobfin;
		_sfinfun = sfinfun;
		_sobstart = sobstart;
		_sfunfinstart = sfunfinstart;
		if( iloscsek > 0 )	{
			if( itypsort==0 )	{	idsort = 1;	}
			else if (itypsort==1)	{	idsort = idsort.rand( _iiloscsek ) + 1; }
		}
		if( bstart==true )	{
			_istate = 1;
			this.play( sbase + "start" + sdir );
		} else {
			if( iloscsek > 0 )	{
				this.setframe( sbase + 1 + sdir, 0 );
			} else {
				this.setframe( sbase + sdir, 0 );
			}
			this.herostart();
		}
	}
	playspec2(string sact, string sobfin, string sfinfun)	{
		string s;
		if( sact.length()<2 )	{	s="";	}
		else {	s = sact.strsube(2);	}
		this.playspec( s, 0, 0, false, null, null, false, sobfin, sfinfun, sact.gete(0,2));
	}
	herostop()	{
		_istate = 3;
		if( _bplaystop == true )	{
			_bplaystop = false;
			this.play( _sbase + "stop" + this.getdir() );
		} else {
			this.stop(true);
		}
	}
	herostart()	{
		_istate = 2;
		if( _iiloscsek > 0 )	{	this.play( _sbase + idsort + this.getdir() );	}
		else {	this.play( _sbase + this.getdir() );	}
	}
	herofinish()	{
		if( _istate==2 && bthisfin==true )	{
			_istate=3;
		}
		if (_istate==0 )	{		// standardowy finish
			this.onstdfinish();
			this.< this.getname() + "_FINISH">();
		} else if( _istate==1)	{
			this.herostart();
			if( _sfunfinstart!=null )	{
				if( _sobstart==null )	{	this.<_sfunfinstart>();	}
				else {	<_sobstart>.<_sfunfinstart>();	}
			}
		} else if( _istate==2 )	{
			string s;
			if( _iiloscsek > 0 )	{
				if( _itypsort==0)	{	idsort = (idsort%_iiloscsek)+1;	}
				else if (_itypsort==1)	{	idsort = idsort.rand( _iiloscsek ) + 1; }
				s = _sbase + idsort + this.getdir();
			} else { s = this.actionname();	}
			this.play( s );
		} else if ( _istate==3 )	{		// koniec stop
			_istate = 0;
			if( _sfinfun!=null )	{
				if( _sobfin==null )	{	this.<_sfinfun>();	}
				else {
//  					engine.print("call: "+_sobfin+"."+_sfinfun+"()");
					<_sobfin>.<_sfinfun>();	
//  					engine.print("call: "+_sobfin+"."+_sfinfun+"()");
				}
			}
		}
	}
	heroendframe1()	{
		this.< this.getname() + "_ENDFRAME" >();
	}
	heroendframe()	{
		this.setz( this.getposy() );
		string s = this.getpocket();
		if( engine.varexist(s)==true )	{
			<s>.pocketpos( this.getposx(), this.getposy() - this.geth()/2);
		}
		this.< this.getname() + "_ENDFRAME" >();
	}
}

/******************************************************/

class classadvhero 	{
	init()	{
		new string _sanim;		// podlinkowana animacja
		new bool _bisvecile = false;	// czy operacja sklada sie z kawalkow
		
		new string _sbase = null;		// bazowa nazwa akcji
		new string _sbase2 = null;
		new int izakres = 0;		// length of string _sbase
		
		new string _sbs2;
		new string _sbutoper;
		new string _smetpart;
		
		new string _simgbut;	// button z ktorego czyta dane
		new string _sptfname = this.getname();
	}
	string getptfname()	{	return _sptfname;	}
	public link(string sanim)	{	_sanim = sanim;	}
	public link2(string sanima, string sbase)	{
		this.link(sanima);
		this._checkamounts( sbase );
	}
	public anstand()	{	<_sanim>.play("stand"+this.getdir());	}
	public ansay()		{	<_sanim>.play("talk"+this.getdir());	}
	public string getdir()	{
		string sdir = <_sanim>.actionname();
		return sdir.gete(0, 2);
	}
	public int nofpieces()	{	return this.nofpiecesdir( this.getdir() ); }
	public int nofpiecesdir(string sdir)	{
		if( _bisvecile==true )	{
			return vecile.get( vecdirs.find(sdir) );
		} else {	return 0;	}
	}
	public setbase2(string sbase, string sbase2)	{
		this.setbase(sbase);
		_sbase2 = sbase2;
	}
	public setbase(string sbase)	{
		_sbase = sbase;
		izakres = sbase.length();
	}
	public getpropdir(string sdir)	{
		if( sdir=="auto")	{
			return this.getdir();
		} else {
			return sdir;
		}
	}
	/*****************************/
	_buildamounts()	{
		if( _bisvecile==false )	{
			_bisvecile = true;
			new vector vecdirs;
			vecdirs.type("string");
			vecdirs.beginadd("begin", "uu", "ru", "rr", "rd", "dd", "ld", "ll", "lu" );
			new vector vecile;
		}
	}
	_clearvecile()	{
		vecile.free();
		vecile.resize( 8, 0 );
	}
	_checkamounts(string sbase)	{
		this._buildamounts();
		this._clearvecile();
		if( _sanim == null )	{	return;	}
		int ile = <_sanim>.nofactions();
		string s1, int i1;
		this.setbase(sbase);
		for(int  i=0; i < ile; i++)	{
			s1 = <_sanim>.nameofaction(i);
			if( s1.getb(0,izakres) == sbase )	{
				i1 = s1.getb( izakres, 10 );
				if( i1>0 )	{	// jest kolejna animacja gadania
					vecile.vecinc( vecdirs.find( s1.gete(0,2) ) );
				}
			}
		}
	}
	/********************************/
	virtual calllastfun()	{
		//engine.print( this.getcallfin() );
		this.< this.getcallfin() >();
	}
	_calllastfunfin()	{
		this.calllastfunfin();
		this.advmsunlock();
// 		engine.print( "finish operate: " + this.getcallfin() );
	}
	virtual calllastfunfin()	{	this.< this.getcallfin() + "_FINISH" >();	}
	virtual string getcallfin()	{	return _sanim+_smetpart+_sbutoper;	}
	_cplay(string sbase, string sfun, string sdir)	{
		this.advmslock();		// blokuj mysz
		<_sanim>.thisfinish(true);
		if( sbase==null )	{
			if( sfun!=null )	{
				this.<sfun>();
			}
		} else {
			<_sanim>.playspec( sbase, 0, 0, false, null, null, false, 
				this.getname(), sfun, this.getpropdir(sdir) );
		}
	}
	_cplay1(string sbase, string sdir)	{
		this._cplay(sbase,"_cplay1_2", sdir);
	}
	_cplay1_2()	{
		this.calllastfun();
		this._callbehs();
	}
	_callbehs()	{
		this.advmsunlock();
		this.callbehs();
	}
	virtual callbehs()	{
		string s = this.getcallfin();
		if( this.behexist( "beh_" + s )==true )	{
			this.playbehobfin( "beh_" + s, this.getname(), "_calllastfunfin" );
		} else {
			this._calllastfunfin();
		}
	}
	_cplay2_2()	{
		this.calllastfun();
		this._cplay(_sbs2, "_callbehs", this.getdir() );
	}
	_cplay2(string sbase1, string sbase2, string sdir)	{
		_sbs2 = sbase2;
		this._cplay(sbase1, "_cplay2_2", sdir);
	}
	public heroplay1(string simg)	{
		_simgbut=simg;
		_sbutoper = <simg>.getbutname();
		this._cplay1( <simg>.getbase1(), this.getpropdir( <simg>.getbutdir() ) );
	}
	public heroplay2(string simg)	{
		_simgbut=simg;
		_sbutoper = <simg>.getbutname();
		this._cplay2( <simg>.getbase1(), <simg>.getbase2(), 
			this.getpropdir( <simg>.getbutdir() ) );
	}
	_setbase2(string styp)	{
		this.setbase2( modadv.get(styp,1), modadv.get(styp,2) );
	}
	_setbase(string styp)	{	this.setbase( modadv.get( styp, 1 ) );	}
	public heroplay3(string simg, string sb)	{
		<simg>.setbutbase1(modadv.get(sb,1));
		<simg>.setbutbase2(modadv.get(sb,2));
		this.heroplay2(simg);
	}
	/********************************/
}

/******************************************************/

class classherotaker : classadvhero	{
	init() {
		classadvhero::init();
		_smetpart = "_PICKUP_";
	}
	public herotake(string simg)	{
		this.heroplay2(simg);
	}
	virtual calllastfun()	{
		<_simgbut>.hide();		// zabranie przedmiotu
		< <_sanim>.getpocket() >.additem( _sbutoper );
		classadvhero::calllastfun();
	}
}

/******************************************************/

class classherolooker : classadvhero	{
	init()	{
		classadvhero::init();
		_smetpart = "_OPERATE_";
	}
	public herolook(string simg)	{
		this.heroplay2(simg);
	}
	public herooperate(string simg)	{
		this.heroplay2(simg);
	}
	public heroopendoor(string simg)	{
		this.heroplay3(simg,"open:");
	}
	public heroclosedoor(string simg)	{
		this.heroplay3(simg,"close:");
	}
}

/******************************************************/

class classherouser : classadvhero	{
	init()	{
		classadvhero::init();
		new string _stool;
	}
	public herouse(string stool, string simg)	{
		//_stool = this.getusetool();
		_stool = stool;
		_smetpart = "_USE_"+_stool+"_ON_";
		< <_sanim>.getpocket() >.itemhide();
		this.heroplay2(simg);
	}
	virtual calllastfun()	{
		this.< _sanim + "_USE_" + _stool>();
		this.< _sanim + "_USE_ON_" + _sbutoper>();
		this.< this.getcallfin() >();
	}
	virtual calllastfunfin()	{
		this.< _sanim + "_USE_" + _stool + "_FINISH">();
		this.< _sanim + "_USE_ON_" + _sbutoper + "_FINISH">();
		this.< this.getcallfin() + "_FINISH" >();
	}
	virtual callbehs()	{
		if( this.behexist( "beh_" + this.getcallfin() )==true )	{
			this.playbehobfin( "beh_" + this.getcallfin(), this.getname(), "_calllastfunfin" );
		} else  if( this.behexist( "beh_" + _sanim + "_USE_ON_" + _sbutoper )==true )	{
			this.playbehobfin( "beh_" + _sanim + "_USE_ON_" + _sbutoper, this.getname(), "_calllastfunfin" );
		} else  if( this.behexist( "beh_" + _sanim + "_USE_" + _stool )==true )	{
			this.playbehobfin( "beh_" + _sanim + "_USE_" + _stool, this.getname(), "_calllastfunfin" );
		} else {
			this._calllastfunfin();
		}
	}
}

/******************************************************/