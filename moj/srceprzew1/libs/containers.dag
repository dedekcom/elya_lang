/**************************************************************/
	// operacje na obrazach, dzwiekach, timerach i animacjach
class gmobjvec {
	init()	{
		new vector lsim;
		lsim.type("string");
	}
	free()	{ lsim.free();	}
	int size()	{ return lsim.size(); }
	hash()	{ lsim.hash(); }
	string first()	{ return lsim.get(0); }
	string last()	{ return lsim.get( lsim.size()-1 ); }
	print()	{	lsim.print();	}
	string get(int i)	{ return lsim.get(i); }
	add(string simg)	{	lsim.add(simg);	}
	addonce(string simg)	{	
		if( lsim.contains(simg)==false )	{
			lsim.add(simg);
		}
	}
	remove(string simg)	{	lsim.remove(simg);	}
	int find(string simg)	{ return lsim.find(simg); }
	int contains(string simg)	{ return lsim.contains(simg); }
	addgroup(string sob, int ile)	{
		this.addgroup2( sob, 0, ile-1 );
	}
	addgroup2(string sob, int ifrom, int ito)	{
		while( ifrom <= ito )	{
			this.add( sob+ifrom );
			ifrom++;
		}
	}
	/******************* metody na obiektach grupy *****************************/
	movefrom(string simg, int x, int y)	{
		int i = this.find(simg);
		if( i>=0 )	{
			while( i<lsim.size() )	{
				<lsim.get(i)>.move(x,y);
				i++;
			}
		}
	}
	move(int x, int y)	{
		this.evalii("move",x,y);
	}
	setpos(int x, int y)	{
		this.evalii("setpos",x,y);
	}
	show()	{	this.eval("show");	}
	hide()	{	this.eval("hide");	}
	stop(int fin)	{	this.evali("stop",fin);	}
	play()	{	this.eval("play");	}
	nplay(int iact)	{	this.evali("nplay",iact);	}
	splay(string sact)	{	this.evals("splay",sact);	}
	setdelay(int d)	{	this.evali("setdelay",d);	}
	graddmethod(string sdest, string ssrc)	{	this.evalss("addmethod",sdest,ssrc);	}
	string getimg(int x, int y, int bignorehidden, int bignorealpha)	{
		for( int i=lsim.size()-1; i>=0; i--)	{
			if( <lsim.get(i)>.isin( x,y,bignorehidden,bignorealpha )==true )	{
				return lsim.get(i);
			}
		}
		return null;
	}
	int isin(int x, int y, bool bignorehidden, bool bignorealpha)	{
		for( int i=lsim.size()-1; i>=0; i--)	{
			if( <lsim.get(i)>.isin( x,y,bignorehidden,bignorealpha )!=false )	{
				return i+1;
			}
		}
		return false;
	}
	ssetframe(string sac, int ifr)	{
		for(int i=0; i<lsim.size(); i++)	{
			<lsim.get(i)>.setframe(sac, ifr);
		}	
	}
	isetframe(int iac, int ifr)	{	this.evalii("setframe",iac,ifr);	}
	setz(int z)	{	this.evali("setz",z);	}
	eval(string sfunc)	{
		for(int i=0; i<lsim.size(); i++)	{
			<lsim.get(i)>.<sfunc>();
		}
	}
	evals(string sfunc, string sarg1)	{
		for(int i=0; i<lsim.size(); i++)	{
			<lsim.get(i)>.<sfunc>(sarg1);
		}
	}
	evali(string sfunc, int iarg1)	{
		for(int i=0; i<lsim.size(); i++)	{
			<lsim.get(i)>.<sfunc>(iarg1);
		}
	}
	evalss(string sfunc, string sarg1, string sarg2)	{
		for(int i=0; i<lsim.size(); i++)	{
			<lsim.get(i)>.<sfunc>(sarg1, sarg2);
		}
	}
	evalii(string sfunc, int iarg1, int iarg2)	{
		for(int i=0; i<lsim.size(); i++)	{
			<lsim.get(i)>.<sfunc>(iarg1, iarg2);
		}
	}
	evalrr(string sfunc, real rarg1, real rarg2)	{
		for(int i=0; i<lsim.size(); i++)	{
			<lsim.get(i)>.<sfunc>(rarg1, rarg2);
		}
	}
	/**************/
	sortimgs()	{	// sortowanie od najmniejszych
		lsim.vecsort("_scmpimg1");
	}
	bool _scmpimg1(string s0, string s1)	{
		if( <s0>.getz() > <s1>.getz() )	{	return true;	}
		else if ( <s0>.getz()==<s1>.getz() )	{
			if( <s0>.getidobj() > <s1>.getidobj() )	{
				return true;	
			}
			else {	return false;	}
		} else {	return false;	}
	}
}

class gmimgvec : gmobjvec	{
	init()	{
		gmobjvec::init();
		new int _ix = 0;
		new int _iy = 0;
		new int _iz = 0;
		new int _ifound = -1;
	}
	int getposx()	{	return _ix;	}
	int getposy()	{	return _iy;	}
	int getpx() {	return _ix;	}
	int getpy() {	return _iy;	}
	int getcx() {	return _ix;	}
	int getcy() {	return _iy;	}
	int getz()	{	return _iz;	}
	setz(int z)	{
		_iz = z;
		this.evali("setz",z);
	}
	move(int x, int y)	{
		_ix +=x;
		_iy +=y;
		this.evalii("move",x,y);
	}
	setpos(int x, int y)	{
		_ix = x;
		_iy = y;
		this.evalii("setpos",x,y);
	}
	anputgr()	{	this.eval("anputgr");	}
	anputy(int ypos)	{	this.evali("anputy", ipos);	}
	int isin(int x, int y, bool bignorehidden, bool bignorealpha)	{
		for( int i=lsim.size()-1; i>=0; i--)	{
			if( <lsim.get(i)>.isin( x,y,bignorehidden,bignorealpha )!=false )	{
				_ifound=i;
				return i+1;
			}
		}
		_ifound = -1;
		return false;
	}
	int getfound()	{	return _ifound;	}
}

class gmmaskvec : gmimgvec	{
	init()	{
		gmimgvec::init();
	}
	int isin(int x, int y, bool bigvis, bool bigalpha)	{
		return gmimgvec::isin(x,y,false,bigalpha);
	}
}
