; Dominik Dagiel   ix 2005

	class classobjcounter
	method init
	new string,_sprefix
	new int,_iile
	push 0
	pop _iile
	end method
	method set
	localstring $1
	pop $1
	push $1
	pop _sprefix
	push 0
	pop _iile
	end method
	method get
	add _iile,1
	pop _iile
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	ret
	end method
	end class

	class classvsigobj
	method init
	new int,bplaying
	push 0
	pop bplaying
	end method
	method play
	push 1
	pop bplaying
	end method
	method stop
	localint $1
	pop $1
	push 0
	pop bplaying
	push $1
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2
	push 0
	jmp l3
l2:
	push 1
l3:
	popax
	cmp $a,0
	je l4
	cthis onfinish
	jmp l1
l4:
l1:
	end method
	method isplaying
	push bplaying
	ret
	end method
	end class

	new int,igmstate
	new int,iResX
	new int,iResY
	module modglobalvars
	method init
	push 800
	pop iResX
	push 600
	pop iResY
	end method
	end module

	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jle l6
	push 0
	jmp l7
l6:
	push 1
l7:
	popax
	cmp $a,0
	je l8
	ret
	jmp l5
l8:
l5:
	sub $3,1
	pop $3
l9:
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l10
	push 0
	jmp l11
l10:
	push 1
l11:
	popax
	cmp $a,0
	je l12
	push $1
	popax
	spush $a
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l9
l12:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	ret
	end method
	method getsndpath
	push _sclwavpath
	ret
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new anima,[$e]
	push $1
	popax
	spush $a
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $1
	popax
	spush $a
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	popax
	spush $a
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	popax
	spush $a
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	popax
	spush $a
	spop $e
	new anima,[$e]
	push $2
	popax
	spush $a
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l14
	push 0
	jmp l15
l14:
	push 1
l15:
	popax
	cmp $a,0
	je l16
	ret
	jmp l13
l16:
l13:
	localint $5
	push 0
	pop $5
l17:
	push $5
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l18
	push 0
	jmp l19
l18:
	push 1
l19:
	popax
	cmp $a,0
	je l20
	jmp l22
l21:
	add $5,1
	pop $5
	jmp l17
l22:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l21
l20:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l24
	push 0
	jmp l25
l24:
	push 1
l25:
	popax
	cmp $a,0
	je l26
	ret
	jmp l23
l26:
l23:
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	popax
	spush $a
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l27:
	push $6
	push $5
	pop $b
	popax
	cmp $a,$b
	jl l28
	push 0
	jmp l29
l28:
	push 1
l29:
	popax
	cmp $a,0
	je l30
	jmp l32
l31:
	add $6,1
	pop $6
	jmp l27
l32:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l34
	push 0
	jmp l35
l34:
	push 1
l35:
	popax
	cmp $a,0
	je l36
	push $4
	popax
	spush $a
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
	jmp l33
l36:
l33:
	jmp l31
l30:
	push $5
	ret
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	ret
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new img,[$e]
	push $1
	popax
	spush $a
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	popax
	spush $a
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new img,[$e]
	push $1
	popax
	spush $a
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $1
	popax
	spush $a
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	popax
	spush $a
	spop $e
	new img,[$e]
	push $2
	popax
	spush $a
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new snd,[$e]
	push $1
	popax
	spush $a
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method _stdsndloop
	cthis play
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	popax
	spush $a
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l37:
	push $8
	push $7
	pop $b
	popax
	cmp $a,$b
	jl l38
	push 0
	jmp l39
l38:
	push 1
l39:
	popax
	cmp $a,0
	je l40
	jmp l42
l41:
	add $8,1
	pop $8
	jmp l37
l42:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	popax
	spush $a
	spop $e
	new snd,[$e]
	push $6
	popax
	spush $a
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l41
l40:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new timer,[$e]
	push $1
	popax
	spush $a
	push $3
	spop $a
	call [$a],settick
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new timer,[$e]
	push $1
	popax
	spush $a
	push $3
	spop $a
	call [$a],settick
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],setcycle
	end method
	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	popax
	spush $a
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l44
	push 0
	jmp l45
l44:
	push 1
l45:
	popax
	cmp $a,0
	je l46
	push $1
	cthis looponfinish
	jmp l43
l46:
	push "H"
	call $2,contains
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l48
	push 0
	jmp l49
l48:
	push 1
l49:
	popax
	cmp $a,0
	je l50
	push $1
	cthis hideonfinish
	jmp l47
l50:
l47:
l43:
	push "P"
	call $2,contains
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l52
	push 0
	jmp l53
l52:
	push 1
l53:
	popax
	cmp $a,0
	je l54
	push $1
	popax
	spush $a
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
	jmp l51
l54:
l51:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	popax
	spush $a
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l55:
	push $6
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l56
	push 0
	jmp l57
l56:
	push 1
l57:
	popax
	cmp $a,0
	je l58
	jmp l60
l59:
	add $6,1
	pop $6
	jmp l55
l60:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	popax
	spush $a
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l62
	push 0
	jmp l63
l62:
	push 1
l63:
	popax
	cmp $a,0
	je l64
	push $3
	popax
	spush $a
	push $5
	spop $a
	call [$a],add
	jmp l61
l64:
l61:
	jmp l59
l58:
	push $4
	ret
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	ret
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	popax
	spush $a
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	localint $6
	push 0
	pop $6
l65:
	push $6
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l66
	push 0
	jmp l67
l66:
	push 1
l67:
	popax
	cmp $a,0
	je l68
	jmp l70
l69:
	add $6,1
	pop $6
	jmp l65
l70:
	push $1
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $6
	push $3
	cthis newanframesgr
	pop $5
	jmp l69
l68:
	push $4
	ret
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	ret
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	popax
	spush $a
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	popax
	spush $a
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	popax
	spush $a
	spop $a
	call [$a],hide
	push $6
	ret
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new button,[$e]
	push $1
	popax
	spush $a
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	popax
	spush $a
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new button,[$e]
	push $1
	popax
	spush $a
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	popax
	spush $a
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new db,[$e]
	push $1
	popax
	spush $a
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new db,[$e]
	push $1
	popax
	spush $a
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],loadscript
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	popax
	mov $a,[$a]
	psax
	pop $3
	push $1
	popax
	spush $a
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	popax
	spush $a
	push $3
	spop $b
	popax
	mov [$b],$a
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	ret
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objplayloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	cthis play
	end method
	method anplayfin
	localint $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l71:
	push $2
	push $1
	popax
	spush $a
	spop $a
	call [$a],size
	pop $b
	popax
	cmp $a,$b
	jl l72
	push 0
	jmp l73
l72:
	push 1
l73:
	popax
	cmp $a,0
	je l74
	jmp l76
l75:
	add $2,1
	pop $2
	jmp l71
l76:
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l75
l74:
	end method
	method vecsort
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 1
	pop $b
	popax
	cmp $a,$b
	jle l78
	push 0
	jmp l79
l78:
	push 1
l79:
	popax
	cmp $a,0
	je l80
	ret
	jmp l77
l80:
l77:
	localstring $3
	localstring $4
	localint $5
	localint $6
	localint $7
	push 0
	pop $6
l81:
	push $6
	push $2
	pop $b
	popax
	cmp $a,$b
	jl l82
	push 0
	jmp l83
l82:
	push 1
l83:
	popax
	cmp $a,0
	je l84
	jmp l86
l85:
	add $6,1
	pop $6
	jmp l81
l86:
	push $6
	cthis get
	pop $3
	push $6
	pop $5
	push $6
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
l87:
	push $7
	push $2
	pop $b
	popax
	cmp $a,$b
	jl l88
	push 0
	jmp l89
l88:
	push 1
l89:
	popax
	cmp $a,0
	je l90
	jmp l92
l91:
	add $7,1
	pop $7
	jmp l87
l92:
	push $7
	cthis get
	pop $4
	push $1
	popax
	spush $a
	push $3
	push $4
	spop $d
	cthis [$d]
	push 1
	pop $b
	popax
	cmp $a,$b
	je l94
	push 0
	jmp l95
l94:
	push 1
l95:
	popax
	cmp $a,0
	je l96
	push $4
	pop $3
	push $7
	pop $5
	jmp l93
l96:
l93:
	jmp l91
l90:
	push $6
	push $5
	cthis swap
	jmp l85
l84:
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	ret
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	ret
	end method
	method strgetto
	localstring $1
	pop $1
	push 0
	push $1
	cthis find
	cthis getb
	ret
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	ret
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l98
	push 0
	jmp l99
l98:
	push 1
l99:
	push $2
	push $1
	popax
	spush $a
	spop $a
	call [$a],getrowsno
	pop $b
	popax
	cmp $a,$b
	jl l100
	push 0
	jmp l101
l100:
	push 1
l101:
	popax
	pop $b
	and $a,$b
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l102
	push 0
	jmp l103
l102:
	push 1
l103:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l104
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l105:
	push $3
	push $5
	pop $b
	popax
	cmp $a,$b
	jl l106
	push 0
	jmp l107
l106:
	push 1
l107:
	popax
	cmp $a,0
	je l108
	push $4
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l105
l108:
	jmp l97
l104:
l97:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	pop $b
	popax
	cmp $a,$b
	jl l110
	push 0
	jmp l111
l110:
	push 1
l111:
	popax
	cmp $a,0
	je l112
	push $1
	push $2
	cthis get
	ret
	jmp l109
l112:
	push "null"
	ret
l109:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis findbyrow
	push $2
	cthis get
	call engine,print
	push $1
	cthis findbyrow
	push $2
	cthis get
	ret
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l113:
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jl l114
	push 0
	jmp l115
l114:
	push 1
l115:
	popax
	cmp $a,0
	je l116
	push $1
	popax
	spush $a
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l113
l116:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l118
	push 0
	jmp l119
l118:
	push 1
l119:
	popax
	cmp $a,0
	je l120
	push $2
	popax
	spush $a
	push $3
	spop $d
	cthis [$d]
	jmp l117
l120:
l117:
	end method
	end module

	new img,imglobcurs
	module bsms
	method init
	new img,imgstd
	new img,imgact
	push "configs/kursorstd.png"
	push "configs/kursoract.png"
	cthis load
	new int,msid
	push 0
	pop msid
	end method
	method load
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call imgstd,load
	push $2
	call imgact,load
	push "imgact"
	call imglobcurs,copy
	call imglobcurs,hide
	call imgstd,hide
	call imgact,hide
	cthis reset
	push "imgstd"
	call engine,stdbutcursor
	end method
	method setinitial
	call mouse,stdcursor
	push 0
	pop msid
	end method
	method setstd
	push "imgstd"
	call mouse,setcursor
	push "imgstd"
	call engine,stdbutcursor
	push 1
	pop msid
	end method
	method setact
	push "imgact"
	call mouse,setcursor
	push 2
	pop msid
	end method
	method setown
	push 3
	pop msid
	end method
	method isinitial
	push msid
	push 0
	pop $b
	popax
	cmp $a,$b
	je l122
	push 0
	jmp l123
l122:
	push 1
l123:
	popax
	cmp $a,0
	je l124
	push 1
	ret
	jmp l121
l124:
	push 0
	ret
l121:
	end method
	method isstd
	push msid
	push 1
	pop $b
	popax
	cmp $a,$b
	je l126
	push 0
	jmp l127
l126:
	push 1
l127:
	popax
	cmp $a,0
	je l128
	push 1
	ret
	jmp l125
l128:
	push 0
	ret
l125:
	end method
	method isact
	push msid
	push 2
	pop $b
	popax
	cmp $a,$b
	je l130
	push 0
	jmp l131
l130:
	push 1
l131:
	popax
	cmp $a,0
	je l132
	push 1
	ret
	jmp l129
l132:
	push 0
	ret
l129:
	end method
	method isown
	push msid
	push 3
	pop $b
	popax
	cmp $a,$b
	je l134
	push 0
	jmp l135
l134:
	push 1
l135:
	popax
	cmp $a,0
	je l136
	push 1
	ret
	jmp l133
l136:
	push 0
	ret
l133:
	end method
	end module

	module clsav
	method init
	new vector,vqsav
	push "string"
	call vqsav,type
	new vector,vvqsav
	push "string"
	call vvqsav,type
	end method
	method free
	call vqsav,free
	call vvqsav,free
	end method
	method load
	localstring $1
	pop $1
	cthis free
	end method
	method save
	localstring $1
	pop $1
	end method
	method qadd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call vqsav,add
	push $2
	call vvqsav,add
	end method
	method qsave
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call vqsav,find
	pop $3
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l138
	push 0
	jmp l139
l138:
	push 1
l139:
	popax
	cmp $a,0
	je l140
	push $1
	push $2
	cthis qadd
	jmp l137
l140:
	push $3
	push $2
	call vvqsav,set
l137:
	end method
	method qload
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call vqsav,find
	pop $3
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l142
	push 0
	jmp l143
l142:
	push 1
l143:
	popax
	cmp $a,0
	je l144
	push $1
	push $2
	cthis qadd
	push $2
	ret
	jmp l141
l144:
	push $3
	call vvqsav,get
	ret
l141:
	end method
	end module

	class classquest
	method init
	new vector,vqst
	push "string"
	call vqst,type
	end method
	method isdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	ret
	end method
	method notdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	push 0
	pop $b
	popax
	cmp $a,$b
	je l146
	push 0
	jmp l147
l146:
	push 1
l147:
	popax
	cmp $a,0
	je l148
	push 1
	ret
	jmp l145
l148:
l145:
	push 0
	ret
	end method
	method done
	localstring $1
	pop $1
	push $1
	call vqst,contains
	push 0
	pop $b
	popax
	cmp $a,$b
	je l150
	push 0
	jmp l151
l150:
	push 1
l151:
	popax
	cmp $a,0
	je l152
	push $1
	call vqst,add
	jmp l149
l152:
l149:
	end method
	method reset
	call vqst,free
	end method
	method save
	localstring $1
	pop $1
	push $1
	call vqst,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call vqst,load
	end method
	end class

	new classquest,clqs
	class classfullsave
	method init
	new db,dbsav
	end method
	method save
	localstring $1
	pop $1
	push $1
	call dbsav,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbsav,load
	end method
	method _set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l154
	push 0
	jmp l155
l154:
	push 1
l155:
	popax
	cmp $a,0
	je l156
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l153
l156:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l153:
	push "saves/save.txt"
	cthis save
	end method
	method _get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l158
	push 0
	jmp l159
l158:
	push 1
l159:
	popax
	cmp $a,0
	je l160
	push $2
	push 1
	call dbsav,get
	ret
	jmp l157
l160:
	push "null"
	ret
l157:
	end method
	method _is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l162
	push 0
	jmp l163
l162:
	push 1
l163:
	popax
	cmp $a,0
	je l164
	push 1
	ret
	jmp l161
l164:
	push 0
	ret
l161:
	end method
	method gmset
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	cthis _set
	end method
	method gmget
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis _get
	ret
	end method
	method gmis
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	cthis _is
	ret
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	cthis _set
	end method
	method get
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	cthis _get
	ret
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	cthis _is
	ret
	end method
	method bset
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push "1"
	cthis _set
	end method
	method bget
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	cthis _get
	ret
	end method
	method bis
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push "1"
	cthis _is
	ret
	end method
	end class

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	ret
	end method
	method ileny
	push ily
	ret
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	call $1,abs
	ret
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $1
	popax
	spush $a
	spop $a
	call [$a],getcy
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $1
	popax
	spush $a
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	ret
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	ret
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getcy
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	ret
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	pop $b
	popax
	cmp $a,$b
	jae l166
	push 0
	jmp l167
l166:
	push 1
l167:
	push ilx
	push $6
	pop $b
	popax
	cmp $a,$b
	jle l168
	push 0
	jmp l169
l168:
	push 1
l169:
	popax
	pop $b
	and $a,$b
	push ily
	push $5
	pop $b
	popax
	cmp $a,$b
	jae l170
	push 0
	jmp l171
l170:
	push 1
l171:
	popax
	pop $b
	and $a,$b
	push ily
	push $7
	pop $b
	popax
	cmp $a,$b
	jle l172
	push 0
	jmp l173
l172:
	push 1
l173:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l174
	push 1
	ret
	jmp l165
l174:
	push 0
	ret
l165:
	end method
	end module

	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	cmp $a,$b
	jae l176
	push 0
	jmp l177
l176:
	push 1
l177:
	push $1
	push $5
	pop $b
	popax
	cmp $a,$b
	jle l178
	push 0
	jmp l179
l178:
	push 1
l179:
	popax
	pop $b
	and $a,$b
	push $2
	push $4
	pop $b
	popax
	cmp $a,$b
	jae l180
	push 0
	jmp l181
l180:
	push 1
l181:
	popax
	pop $b
	and $a,$b
	push $2
	push $6
	pop $b
	popax
	cmp $a,$b
	jle l182
	push 0
	jmp l183
l182:
	push 1
l183:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l184
	push 1
	ret
	jmp l175
l184:
	push 0
	ret
l175:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	ret
	end method
	end module

	module clanpack
	method init
	end method
	method _csetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method _cbuildpomvars
	new int,_ixp
	new int,_iyp
	end method
	method _csaverelpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method _csetrelpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method _cmssaverelpos
	call mouse,getpx
	call mouse,getpy
	cthis saverelpos
	end method
	method _cmssetrelpos
	call mouse,getpx
	call mouse,getpy
	cthis setrelpos
	end method
	method _crplay
	localstring $1
	pop $1
	push $1
	cthis isplaying
	push 0
	pop $b
	popax
	cmp $a,$b
	je l186
	push 0
	jmp l187
l186:
	push 1
l187:
	popax
	cmp $a,0
	je l188
	push $1
	cthis play
	jmp l185
l188:
l185:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	push "_cbuildpomvars"
	push "_cbuildpomvars"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	spop $a
	call [$a],_cbuildpomvars
	push $1
	popax
	spush $a
	push "setbpos"
	push "_csetbpos"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "saverelpos"
	push "_csaverelpos"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "setrelpos"
	push "_csetrelpos"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "mssaverelpos"
	push "_cmssaverelpos"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "mssetrelpos"
	push "_cmssetrelpos"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "rplay"
	push "_crplay"
	spop $a
	call [$a],addmethod
	end method
	end module

	class classbgmover
	method init
	new string,sim1
	new string,sim2
	end method
	method _load
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	popax
	spush $a
	push "im1"
	push $3
	push $4
	spop $d
	clparent newvars,[$d]
	push $1
	popax
	spush $a
	spop $d
	new [$d],im2
	push "im1"
	call im2,copy
	end method
	method loadimg
	localstring $1
	localint $2
	pop $2
	pop $1
	push "img"
	push "newimg"
	push $1
	push $2
	cthis _load
	end method
	method loadan
	localstring $1
	localint $2
	pop $2
	pop $1
	push "anima"
	push "newanima"
	push $1
	push $2
	cthis _load
	end method
	method _set
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $d
	new [$d],im1
	push $1
	popax
	spush $a
	spop $d
	new [$d],im2
	push $2
	call im1,copy
	push $2
	call im2,copy
	end method
	method setimg
	localstring $1
	pop $1
	push "img"
	push $1
	cthis _set
	end method
	method setan
	localstring $1
	pop $1
	push "anima"
	push $1
	cthis _set
	end method
	method setdir
	localstring $1
	pop $1
	push $1
	push "up"
	pop $b
	popax
	cmp $a,$b
	je l190
	push 0
	jmp l191
l190:
	push 1
l191:
	push $1
	push "down"
	pop $b
	popax
	cmp $a,$b
	je l192
	push 0
	jmp l193
l192:
	push 1
l193:
	popax
	pop $b
	or $a,$b
	popax
	cmp $a,0
	je l194
	push 0
	push 0
	call im1,setpos
	push 0
	call im1,getey
	call im2,setpos
	push "im1"
	pop sim1
	push "im2"
	pop sim2
	jmp l189
l194:
	push $1
	push "left"
	pop $b
	popax
	cmp $a,$b
	je l196
	push 0
	jmp l197
l196:
	push 1
l197:
	push $1
	push "right"
	pop $b
	popax
	cmp $a,$b
	je l198
	push 0
	jmp l199
l198:
	push 1
l199:
	popax
	pop $b
	or $a,$b
	popax
	cmp $a,0
	je l200
	push 0
	push 0
	call im1,setpos
	call im1,getex
	push 0
	call im2,setpos
	push "im1"
	pop sim1
	push "im2"
	pop sim2
	jmp l195
l200:
l195:
l189:
	end method
	method movup
	localint $1
	pop $1
	push 0
	push $1
	call im1,move
	push 0
	push $1
	call im2,move
	push sim2
	popax
	spush $a
	spop $a
	call [$a],getey
	push 600
	pop $b
	popax
	cmp $a,$b
	jl l202
	push 0
	jmp l203
l202:
	push 1
l203:
	popax
	cmp $a,0
	je l204
	push sim1
	popax
	spush $a
	push 0
	push sim2
	popax
	spush $a
	spop $a
	call [$a],getey
	spop $a
	call [$a],setpos
	push "sim1"
	push "sim2"
	clparent newvars,swap
	jmp l201
l204:
l201:
	end method
	method movdown
	localint $1
	pop $1
	push 0
	push $1
	call im1,move
	push 0
	push $1
	call im2,move
	push sim1
	popax
	spush $a
	spop $a
	call [$a],getpy
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l206
	push 0
	jmp l207
l206:
	push 1
l207:
	popax
	cmp $a,0
	je l208
	push sim2
	popax
	spush $a
	push 0
	push sim1
	popax
	spush $a
	spop $a
	call [$a],getpy
	push sim2
	popax
	spush $a
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push "sim1"
	push "sim2"
	clparent newvars,swap
	jmp l205
l208:
l205:
	end method
	method movleft
	localint $1
	pop $1
	push $1
	push 0
	call im1,move
	push $1
	push 0
	call im2,move
	push sim2
	popax
	spush $a
	spop $a
	call [$a],getex
	push 800
	pop $b
	popax
	cmp $a,$b
	jl l210
	push 0
	jmp l211
l210:
	push 1
l211:
	popax
	cmp $a,0
	je l212
	push sim1
	popax
	spush $a
	push sim2
	popax
	spush $a
	spop $a
	call [$a],getex
	push 0
	spop $a
	call [$a],setpos
	push "sim1"
	push "sim2"
	clparent newvars,swap
	jmp l209
l212:
l209:
	end method
	method movright
	localint $1
	pop $1
	push $1
	push 0
	call im1,move
	push $1
	push 0
	call im2,move
	push sim1
	popax
	spush $a
	spop $a
	call [$a],getpx
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l214
	push 0
	jmp l215
l214:
	push 1
l215:
	popax
	cmp $a,0
	je l216
	push sim2
	popax
	spush $a
	push sim1
	popax
	spush $a
	spop $a
	call [$a],getpx
	push sim2
	popax
	spush $a
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],setpos
	push "sim1"
	push "sim2"
	clparent newvars,swap
	jmp l213
l216:
l213:
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l217:
	push $1
	push iile
	pop $b
	popax
	cmp $a,$b
	jl l218
	push 0
	jmp l219
l218:
	push 1
l219:
	popax
	cmp $a,0
	je l220
	jmp l222
l221:
	add $1,1
	pop $1
	jmp l217
l222:
	push $1
	call _vs,get
	push 0
	pop $b
	popax
	cmp $a,$b
	je l224
	push 0
	jmp l225
l224:
	push 1
l225:
	popax
	cmp $a,0
	je l226
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
	jmp l223
l226:
l223:
	jmp l221
l220:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _pos
	push 10
	call $1,getb
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	end class

	class classlives
	method init
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	localint $13
	localint $14
	localstring $15
	pop $15
	pop $14
	pop $13
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new int,iside
	push $15
	push "left"
	pop $b
	popax
	cmp $a,$b
	je l228
	push 0
	jmp l229
l228:
	push 1
l229:
	popax
	cmp $a,0
	je l230
	push 1
	popax
	sub 0,$a
	pop iside
	jmp l227
l230:
	push 1
	pop iside
l227:
	new int,iilezyc
	push $1
	pop iilezyc
	new int,ibum
	push $2
	pop ibum
	localint $16
	push iilezyc
	push ibum
	pop $b
	popax
	mul $a,$b
	pop $16
	new int,iposxsila
	push $3
	pop iposxsila
	new int,iendxsila
	push $3
	push $16
	pop $b
	popax
	add $a,$b
	pop iendxsila
	new int,iposysila
	push $4
	pop iposysila
	push "imgsilapodkladka"
	push $16
	push $5
	push $6
	push $7
	push $8
	push $9
	push $14
	push 1
	pop $b
	popax
	sub $a,$b
	clparent newvars,newcanvas
	push "imgsila"
	push $16
	push $5
	push $10
	push $11
	push $12
	push $13
	push $14
	clparent newvars,newcanvas
	push iposxsila
	push iposysila
	call imgsila,setpos
	push iposxsila
	push 0
	call imgsila,getex
	push 600
	call imgsila,clip
	push iposxsila
	push iposysila
	call imgsilapodkladka,setpos
	end method
	method reset
	push iposxsila
	push iposysila
	call imgsila,setpos
	end method
	method damage
	localint $1
	pop $1
	push iside
	push $1
	pop $b
	popax
	mul $a,$b
	push ibum
	pop $b
	popax
	mul $a,$b
	push 0
	call imgsila,move
	end method
	method destroyed
	push iside
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l232
	push 0
	jmp l233
l232:
	push 1
l233:
	popax
	cmp $a,0
	je l234
	call imgsila,getex
	push iposxsila
	pop $b
	popax
	cmp $a,$b
	jl l236
	push 0
	jmp l237
l236:
	push 1
l237:
	popax
	cmp $a,0
	je l238
	push 1
	ret
	jmp l235
l238:
	push 0
	ret
l235:
	jmp l231
l234:
	call imgsila,getpx
	push iendxsila
	pop $b
	popax
	cmp $a,$b
	ja l240
	push 0
	jmp l241
l240:
	push 1
l241:
	popax
	cmp $a,0
	je l242
	push 1
	ret
	jmp l239
l242:
	push 0
	ret
l239:
l231:
	end method
	method heal
	localint $1
	pop $1
	push iside
	popax
	sub 0,$a
	push $1
	pop $b
	popax
	mul $a,$b
	push ibum
	pop $b
	popax
	mul $a,$b
	push 0
	call imgsila,move
	push iside
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l244
	push 0
	jmp l245
l244:
	push 1
l245:
	popax
	cmp $a,0
	je l246
	call imgsila,getpx
	push iposxsila
	pop $b
	popax
	cmp $a,$b
	jl l248
	push 0
	jmp l249
l248:
	push 1
l249:
	popax
	cmp $a,0
	je l250
	push iposxsila
	push iposysila
	call imgsila,setpos
	jmp l247
l250:
l247:
	jmp l243
l246:
	call imgsila,getpx
	push iposxsila
	pop $b
	popax
	cmp $a,$b
	ja l252
	push 0
	jmp l253
l252:
	push 1
l253:
	popax
	cmp $a,0
	je l254
	push iposxsila
	push iposysila
	call imgsila,setpos
	jmp l251
l254:
l251:
l243:
	end method
	end class

	class classtriangle
	method init
	new real,rdx
	new real,rdy
	end method
	method getdx
	push rdx
	ret
	end method
	method getdy
	push rdy
	ret
	end method
	method talesxy
	localreal $1
	localreal $2
	localreal $3
	localreal $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	sub $3,$a
	pop $3
	push $2
	popax
	sub $4,$a
	pop $4
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	je l256
	push 0
	jmp l257
l256:
	push 1
l257:
	push $4
	push 0
	pop $b
	popax
	cmp $a,$b
	je l258
	push 0
	jmp l259
l258:
	push 1
l259:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l260
	push 0
	pop rdx
	push 0
	pop rdy
	push 0
	ret
	jmp l255
l260:
	push $3
	push $4
	call $1,length
	pop $1
	push $3
	push $1
	pop $b
	popax
	div $a,$b
	psax
	push $5
	pop $b
	popax
	mul $a,$b
	pop rdx
	push $4
	push $1
	pop $b
	popax
	div $a,$b
	psax
	push $5
	pop $b
	popax
	mul $a,$b
	pop rdy
	push $1
	ret
l255:
	end method
	end class

	class classwalker
	parent classtriangle
	method init
	clparent classtriangle,init
	new real,rodleg
	new int,_ix
	new int,_iy
	end method
	method countsteps
	localint $1
	localint $2
	localint $3
	localint $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setdest
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis talesxy
	pop rodleg
	push rodleg
	ret
	end method
	method setdest
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	end method
	method getdestx
	push _ix
	ret
	end method
	method getdesty
	push _iy
	ret
	end method
	method reached
	localint $1
	localint $2
	pop $2
	pop $1
	localreal $3
	push $1
	push _ix
	pop $b
	popax
	sub $a,$b
	push $2
	push _iy
	pop $b
	popax
	sub $a,$b
	call $3,length
	pop $3
	push $3
	push rodleg
	pop $b
	popax
	cmp $a,$b
	jae l262
	push 0
	jmp l263
l262:
	push 1
l263:
	popax
	cmp $a,0
	je l264
	push 1
	ret
	jmp l261
l264:
	push $3
	pop rodleg
	push 0
	ret
l261:
	end method
	method reached2
	localint $1
	localint $2
	pop $2
	pop $1
	localreal $3
	push $1
	push _ix
	pop $b
	popax
	sub $a,$b
	push $2
	push _iy
	pop $b
	popax
	sub $a,$b
	call $3,length
	pop $3
	push $3
	push rodleg
	pop $b
	popax
	cmp $a,$b
	ja l266
	push 0
	jmp l267
l266:
	push 1
l267:
	popax
	cmp $a,0
	je l268
	push 1
	ret
	jmp l265
l268:
	push $3
	pop rodleg
	push 0
	ret
l265:
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	ret
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	ret
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	ret
	end method
	method print
	call lsim,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	ret
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	push 0
	pop $b
	popax
	cmp $a,$b
	je l270
	push 0
	jmp l271
l270:
	push 1
l271:
	popax
	cmp $a,0
	je l272
	push $1
	call lsim,add
	jmp l269
l272:
l269:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	ret
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	ret
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l273:
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jle l274
	push 0
	jmp l275
l274:
	push 1
l275:
	popax
	cmp $a,0
	je l276
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l273
l276:
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l278
	push 0
	jmp l279
l278:
	push 1
l279:
	popax
	cmp $a,0
	je l280
l281:
	push $4
	call lsim,size
	pop $b
	popax
	cmp $a,$b
	jl l282
	push 0
	jmp l283
l282:
	push 1
l283:
	popax
	cmp $a,0
	je l284
	push $4
	call lsim,get
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l281
l284:
	jmp l277
l280:
l277:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis evalii
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis evalii
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis evali
	end method
	method play
	push "play"
	cthis eval
	end method
	method nplay
	localint $1
	pop $1
	push "nplay"
	push $1
	cthis evali
	end method
	method splay
	localstring $1
	pop $1
	push "splay"
	push $1
	cthis evals
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis evali
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis evalss
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l285:
	push $5
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l286
	push 0
	jmp l287
l286:
	push 1
l287:
	popax
	cmp $a,0
	je l288
	jmp l290
l289:
	sub $5,1
	pop $5
	jmp l285
l290:
	push $5
	call lsim,get
	popax
	spush $a
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	push 1
	pop $b
	popax
	cmp $a,$b
	je l292
	push 0
	jmp l293
l292:
	push 1
l293:
	popax
	cmp $a,0
	je l294
	push $5
	call lsim,get
	ret
	jmp l291
l294:
l291:
	jmp l289
l288:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l295:
	push $5
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l296
	push 0
	jmp l297
l296:
	push 1
l297:
	popax
	cmp $a,0
	je l298
	jmp l300
l299:
	sub $5,1
	pop $5
	jmp l295
l300:
	push $5
	call lsim,get
	popax
	spush $a
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l302
	push 0
	jmp l303
l302:
	push 1
l303:
	popax
	cmp $a,0
	je l304
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
	jmp l301
l304:
l301:
	jmp l299
l298:
	push 0
	ret
	end method
	method ssetframe
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l305:
	push $3
	call lsim,size
	pop $b
	popax
	cmp $a,$b
	jl l306
	push 0
	jmp l307
l306:
	push 1
l307:
	popax
	cmp $a,0
	je l308
	jmp l310
l309:
	add $3,1
	pop $3
	jmp l305
l310:
	push $3
	call lsim,get
	popax
	spush $a
	push $1
	push $2
	spop $a
	call [$a],setframe
	jmp l309
l308:
	end method
	method isetframe
	localint $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis evalii
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis evali
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l311:
	push $2
	call lsim,size
	pop $b
	popax
	cmp $a,$b
	jl l312
	push 0
	jmp l313
l312:
	push 1
l313:
	popax
	cmp $a,0
	je l314
	jmp l316
l315:
	add $2,1
	pop $2
	jmp l311
l316:
	push $2
	call lsim,get
	popax
	spush $a
	push $1
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
	jmp l315
l314:
	end method
	method evals
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l317:
	push $3
	call lsim,size
	pop $b
	popax
	cmp $a,$b
	jl l318
	push 0
	jmp l319
l318:
	push 1
l319:
	popax
	cmp $a,0
	je l320
	jmp l322
l321:
	add $3,1
	pop $3
	jmp l317
l322:
	push $3
	call lsim,get
	popax
	spush $a
	push $1
	popax
	spush $a
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l321
l320:
	end method
	method evali
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l323:
	push $3
	call lsim,size
	pop $b
	popax
	cmp $a,$b
	jl l324
	push 0
	jmp l325
l324:
	push 1
l325:
	popax
	cmp $a,0
	je l326
	jmp l328
l327:
	add $3,1
	pop $3
	jmp l323
l328:
	push $3
	call lsim,get
	popax
	spush $a
	push $1
	popax
	spush $a
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l327
l326:
	end method
	method evalss
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l329:
	push $4
	call lsim,size
	pop $b
	popax
	cmp $a,$b
	jl l330
	push 0
	jmp l331
l330:
	push 1
l331:
	popax
	cmp $a,0
	je l332
	jmp l334
l333:
	add $4,1
	pop $4
	jmp l329
l334:
	push $4
	call lsim,get
	popax
	spush $a
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l333
l332:
	end method
	method evalii
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l335:
	push $4
	call lsim,size
	pop $b
	popax
	cmp $a,$b
	jl l336
	push 0
	jmp l337
l336:
	push 1
l337:
	popax
	cmp $a,0
	je l338
	jmp l340
l339:
	add $4,1
	pop $4
	jmp l335
l340:
	push $4
	call lsim,get
	popax
	spush $a
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l339
l338:
	end method
	method evalrr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l341:
	push $4
	call lsim,size
	pop $b
	popax
	cmp $a,$b
	jl l342
	push 0
	jmp l343
l342:
	push 1
l343:
	popax
	cmp $a,0
	je l344
	jmp l346
l345:
	add $4,1
	pop $4
	jmp l341
l346:
	push $4
	call lsim,get
	popax
	spush $a
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l345
l344:
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getz
	push $2
	popax
	spush $a
	spop $a
	call [$a],getz
	pop $b
	popax
	cmp $a,$b
	ja l348
	push 0
	jmp l349
l348:
	push 1
l349:
	popax
	cmp $a,0
	je l350
	push 1
	ret
	jmp l347
l350:
	push $1
	popax
	spush $a
	spop $a
	call [$a],getz
	push $2
	popax
	spush $a
	spop $a
	call [$a],getz
	pop $b
	popax
	cmp $a,$b
	je l352
	push 0
	jmp l353
l352:
	push 1
l353:
	popax
	cmp $a,0
	je l354
	push $1
	popax
	spush $a
	spop $a
	call [$a],getidobj
	push $2
	popax
	spush $a
	spop $a
	call [$a],getidobj
	pop $b
	popax
	cmp $a,$b
	ja l356
	push 0
	jmp l357
l356:
	push 1
l357:
	popax
	cmp $a,0
	je l358
	push 1
	ret
	jmp l355
l358:
	push 0
	ret
l355:
	jmp l351
l354:
	push 0
	ret
l351:
l347:
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	end method
	method getposx
	push _ix
	ret
	end method
	method getposy
	push _iy
	ret
	end method
	method getpx
	push _ix
	ret
	end method
	method getpy
	push _iy
	ret
	end method
	method getcx
	push _ix
	ret
	end method
	method getcy
	push _iy
	ret
	end method
	method getz
	push _iz
	ret
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis evali
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis evalii
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis evalii
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis evali
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l359:
	push $5
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l360
	push 0
	jmp l361
l360:
	push 1
l361:
	popax
	cmp $a,0
	je l362
	jmp l364
l363:
	sub $5,1
	pop $5
	jmp l359
l364:
	push $5
	call lsim,get
	popax
	spush $a
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l366
	push 0
	jmp l367
l366:
	push 1
l367:
	popax
	cmp $a,0
	je l368
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
	jmp l365
l368:
l365:
	jmp l363
l362:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method getfound
	push _ifound
	ret
	end method
	end class

	class gmmaskvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,isin
	ret
	end method
	end class

	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	ret
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	push 0
	pop $b
	popax
	cmp $a,$b
	je l370
	push 0
	jmp l371
l370:
	push 1
l371:
	popax
	cmp $a,0
	je l372
	push $1
	cthis cbplay
	jmp l369
l372:
	cthis cgetactsnd
	push $1
	pop $b
	popax
	cmp $a,$b
	jne l374
	push 0
	jmp l375
l374:
	push 1
l375:
	popax
	cmp $a,0
	je l376
	push $1
	cthis cbplay
	jmp l373
l376:
l373:
l369:
	end method
	method cbplay
	localstring $1
	pop $1
	push _csplay
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l378
	push 0
	jmp l379
l378:
	push 1
l379:
	popax
	cmp $a,0
	je l380
	push _csplay
	popax
	spush $a
	push 1
	spop $a
	call [$a],stop
	jmp l377
l380:
l377:
	push $1
	pop _csplay
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l382
	push 0
	jmp l383
l382:
	push 1
l383:
	popax
	cmp $a,0
	je l384
	push $1
	popax
	spush $a
	spop $a
	call [$a],play
	jmp l381
l384:
l381:
	end method
	method crplay
	localstring $1
	pop $1
	push _csplay
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l386
	push 0
	jmp l387
l386:
	push 1
l387:
	popax
	cmp $a,0
	je l388
	push _csplay
	popax
	spush $a
	spop $a
	call [$a],isplaying
	push 1
	pop $b
	popax
	cmp $a,$b
	je l390
	push 0
	jmp l391
l390:
	push 1
l391:
	popax
	cmp $a,0
	je l392
	ret
	jmp l389
l392:
l389:
	jmp l385
l388:
l385:
	push $1
	pop _csplay
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l394
	push 0
	jmp l395
l394:
	push 1
l395:
	popax
	cmp $a,0
	je l396
	push $1
	popax
	spush $a
	spop $a
	call [$a],play
	jmp l393
l396:
l393:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	call $2,rand
	push 0
	pop $b
	popax
	cmp $a,$b
	je l398
	push 0
	jmp l399
l398:
	push 1
l399:
	popax
	cmp $a,0
	je l400
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $1
	spop $d
	cthis [$d]
	jmp l397
l400:
l397:
	end method
	method cactsndstop
	localint $1
	pop $1
	push _csplay
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l402
	push 0
	jmp l403
l402:
	push 1
l403:
	popax
	cmp $a,0
	je l404
	push _csplay
	popax
	spush $a
	push $1
	spop $a
	call [$a],stop
	jmp l401
l404:
l401:
	end method
	method cisplaying
	push _csplay
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l406
	push 0
	jmp l407
l406:
	push 1
l407:
	popax
	cmp $a,0
	je l408
	push _csplay
	popax
	spush $a
	spop $a
	call [$a],isplaying
	ret
	jmp l405
l408:
	push 0
	ret
l405:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l410
	push 0
	jmp l411
l410:
	push 1
l411:
	popax
	cmp $a,0
	je l412
	ret
	jmp l409
l412:
l409:
	push $1
	popax
	spush $a
	spop $a
	call [$a],isplaying
	push 0
	pop $b
	popax
	cmp $a,$b
	je l414
	push 0
	jmp l415
l414:
	push 1
l415:
	popax
	cmp $a,0
	je l416
	push $1
	popax
	spush $a
	spop $a
	call [$a],play
	jmp l413
l416:
l413:
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	pop $b
	popax
	cmp $a,$b
	jle l418
	push 0
	jmp l419
l418:
	push 1
l419:
	popax
	cmp $a,0
	je l420
	push 0
	pop iile
	ret
	jmp l417
l420:
l417:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l421:
	push $3
	push $2
	pop $b
	popax
	cmp $a,$b
	jl l422
	push 0
	jmp l423
l422:
	push 1
l423:
	popax
	cmp $a,0
	je l424
	jmp l426
l425:
	add $3,1
	pop $3
	jmp l421
l426:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l425
l424:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	pop $b
	popax
	cmp $a,$b
	jle l428
	push 0
	jmp l429
l428:
	push 1
l429:
	popax
	cmp $a,0
	je l430
	push 0
	pop iile
	ret
	jmp l427
l430:
l427:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	pop $b
	popax
	cmp $a,$b
	je l432
	push 0
	jmp l433
l432:
	push 1
l433:
	popax
	cmp $a,0
	je l434
	push iile
	call ilicz,rand
	pop ilicz
	jmp l431
l434:
l431:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l435:
	push $3
	push iile
	pop $b
	popax
	cmp $a,$b
	jl l436
	push 0
	jmp l437
l436:
	push 1
l437:
	popax
	cmp $a,0
	je l438
	jmp l440
l439:
	add $3,1
	pop $3
	jmp l435
l440:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l439
l438:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l442
	push 0
	jmp l443
l442:
	push 1
l443:
	popax
	cmp $a,0
	je l444
	push splay
	popax
	spush $a
	push $1
	spop $a
	call [$a],stop
	jmp l441
l444:
l441:
	end method
	method isplaying
	push splay
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l446
	push 0
	jmp l447
l446:
	push 1
l447:
	popax
	cmp $a,0
	je l448
	push splay
	popax
	spush $a
	spop $a
	call [$a],isplaying
	ret
	jmp l445
l448:
	push 0
	ret
l445:
	end method
	method randplay
	localint $1
	pop $1
	push $1
	call $1,rand
	push 0
	pop $b
	popax
	cmp $a,$b
	je l450
	push 0
	jmp l451
l450:
	push 1
l451:
	popax
	cmp $a,0
	je l452
	cthis play
	jmp l449
l452:
l449:
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method rbgplay
	cthis isplaying
	push 1
	pop $b
	popax
	cmp $a,$b
	je l454
	push 0
	jmp l455
l454:
	push 1
l455:
	popax
	cmp $a,0
	je l456
	ret
	jmp l453
l456:
l453:
	cthis bgplay
	end method
	method rplay
	cthis isplaying
	push 0
	pop $b
	popax
	cmp $a,$b
	je l458
	push 0
	jmp l459
l458:
	push 1
l459:
	popax
	cmp $a,0
	je l460
	cthis play
	jmp l457
l460:
l457:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	popax
	spush $a
	spop $a
	call [$a],play
	push itype
	push 0
	pop $b
	popax
	cmp $a,$b
	je l462
	push 0
	jmp l463
l462:
	push 1
l463:
	popax
	cmp $a,0
	je l464
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l461
l464:
	push itype
	push 1
	pop $b
	popax
	cmp $a,$b
	je l466
	push 0
	jmp l467
l466:
	push 1
l467:
	popax
	cmp $a,0
	je l468
	push iile
	call ilicz,rand
	pop ilicz
	jmp l465
l468:
l465:
l461:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l469:
	push $2
	push iile
	pop $b
	popax
	cmp $a,$b
	jl l470
	push 0
	jmp l471
l470:
	push 1
l471:
	popax
	cmp $a,0
	je l472
	jmp l474
l473:
	add $2,1
	pop $2
	jmp l469
l474:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $1
	spop $a
	call [$a],setvol
	jmp l473
l472:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,__iendstate
	end method
	method csetbkg
	localstring $1
	pop $1
	push "imgbkg"
	push $1
	push 0
	cthis newimg
	end method
	method cstdbkg
	push "bkg.png"
	cthis csetbkg
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	popax
	spush $a
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis csndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	call imgkursor,hide
	push "imgkursor"
	call mouse,setcursor
	push "imgkursor"
	call engine,stdbutcursor
	call bsms,setown
	end method
	method cplayintro
	localstring $1
	pop $1
	push "sndintro"
	push $1
	cthis newsnd
	push "sndintro"
	cthis cbplay
	end method
	method cplayintrofun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis cplayintro
	push "sndintro"
	push $2
	cthis cfinmethod
	end method
	method csavevar
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $2
	spop $b
	popax
	mov [$b],$a
	call gameapi,getgamename
	push $1
	push $2
	call clsav,varsave
	end method
	method cloadvar
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	push $1
	push $2
	call clsav,varload
	end method
	method cputgr
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	push $1
	popax
	spush $a
	spop $a
	call [$a],getey
	spop $a
	call [$a],setz
	end method
	method cputgr2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $1
	popax
	spush $a
	push $1
	popax
	spush $a
	spop $a
	call [$a],getey
	spop $a
	call [$a],setz
	end method
	method cloadbgelem
	localstring $1
	pop $1
	localint $2
	push "anbg"
	push $1
	push 0
	cthis loadanactions
	pop $2
	localint $3
	push 0
	pop $3
l475:
	push $3
	push $2
	pop $b
	popax
	cmp $a,$b
	jl l476
	push 0
	jmp l477
l476:
	push 1
l477:
	popax
	cmp $a,0
	je l478
	jmp l480
l479:
	add $3,1
	pop $3
	jmp l475
l480:
	push "anbg"
	push $3
	pop $b
	popax
	add $a,$b
	cthis cputgr
	jmp l479
l478:
	call _anbg,hide
	end method
	method cnewanimagr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	cthis newanima
	push $1
	cthis cputgr
	end method
	method copyanimaactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	cthis cputgr
	end method
	method __clbplaysnd
	push sclsnd
	cthis cbplay
	end method
	method __clrplaysnd
	push sclsnd
	cthis crplay
	end method
	method __clrbgplaysnd
	push sclsnd
	cthis crbgplay
	end method
	method __clgetsndname
	localstring $1
	pop $1
	new string,sclsnd
	push $1
	pop sclsnd
	end method
	method _cplayonfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],__clgetsndname
	push $1
	popax
	spush $a
	push "onfinish"
	push "__cl"
	push $3
	pop $b
	popax
	add $a,$b
	push "playsnd"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	end method
	method cplayonfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "b"
	cthis _cplayonfin
	end method
	method cbplayonfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "b"
	cthis _cplayonfin
	end method
	method crplayonfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "r"
	cthis _cplayonfin
	end method
	method crbgplayonfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "rbg"
	cthis _cplayonfin
	end method
	method cplayonfinplay
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis cplayonfin
	push $1
	cthis cbplay
	end method
	method csetstate
	localint $1
	pop $1
	push $1
	pop igmstate
	end method
	method cgetstate
	push _igmstate
	ret
	end method
	method _csetstatefin
	cthis cgetendstate
	cthis csetstate
	end method
	method csavestate
	localint $1
	pop $1
	push $1
	pop __iendstate
	end method
	method cgetendstate
	push __iendstate
	ret
	end method
	method cbplaystate
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	cthis csavestate
	push $2
	cthis csetstate
	push $1
	popax
	spush $a
	push "onfinish"
	push "_csetstatefin"
	spop $a
	call [$a],addmethod
	push $1
	cthis cbplay
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cplaywithfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis cfinmethod
	push $1
	popax
	spush $a
	spop $a
	call [$a],play
	end method
	method cbplaywithfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis cfinmethod
	push $1
	cthis cbplay
	end method
	method crplaywithfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis cfinmethod
	push $1
	cthis crplay
	end method
	method cnplaywithfin
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cthis cfinmethod
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],play
	end method
	method csplaywithfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cthis cfinmethod
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],play
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l481:
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jle l482
	push 0
	jmp l483
l482:
	push 1
l483:
	popax
	cmp $a,0
	je l484
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l481
l484:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method canfindaction
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push "actionname"
	clparent clfindfunc,_stdfindfunc
	ret
	end method
	method canfindact2
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "actionname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method cfindframe
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],nofframes
	pop $4
	localint $5
	push 0
	pop $5
l485:
	push $5
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l486
	push 0
	jmp l487
l486:
	push 1
l487:
	popax
	cmp $a,0
	je l488
	jmp l490
l489:
	add $5,1
	pop $5
	jmp l485
l490:
	push $1
	popax
	spush $a
	push $2
	push $5
	spop $a
	call [$a],setframe
	push $1
	popax
	spush $a
	spop $a
	call [$a],framename
	push $3
	pop $b
	popax
	cmp $a,$b
	je l492
	push 0
	jmp l493
l492:
	push 1
l493:
	popax
	cmp $a,0
	je l494
	push $5
	ret
	jmp l491
l494:
l491:
	jmp l489
l488:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method cfindy
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	popax
	spush $a
	spop $a
	call [$a],getpy
	pop $3
	localint $4
	push $1
	popax
	spush $a
	spop $a
	call [$a],getey
	pop $4
l495:
	push $1
	popax
	spush $a
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	push 0
	pop $b
	popax
	cmp $a,$b
	je l496
	push 0
	jmp l497
l496:
	push 1
l497:
	push $3
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l498
	push 0
	jmp l499
l498:
	push 1
l499:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l500
	add $3,1
	pop $3
	jmp l495
l500:
	push $3
	ret
	end method
	method cfinddyactf
	localstring $1
	localint $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],setframe
	push $1
	popax
	spush $a
	push $1
	popax
	spush $a
	spop $a
	call [$a],lodx
	popax
	sub 0,$a
	push $1
	popax
	spush $a
	spop $a
	call [$a],lody
	popax
	sub 0,$a
	spop $a
	call [$a],setpos
	push $1
	push $2
	cthis cfindy
	ret
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	popax
	spush $a
	spop $e
	new classancounter,[$e]
	push $1
	popax
	spush $a
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l501:
	push $6
	push $5
	pop $b
	popax
	cmp $a,$b
	jl l502
	push 0
	jmp l503
l502:
	push 1
l503:
	popax
	cmp $a,0
	je l504
	jmp l506
l505:
	add $6,1
	pop $6
	jmp l501
l506:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $a
	call [$a],hide
	jmp l505
l504:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l507:
	push $7
	push $5
	pop $b
	popax
	cmp $a,$b
	jl l508
	push 0
	jmp l509
l508:
	push 1
l509:
	popax
	cmp $a,0
	je l510
	jmp l512
l511:
	add $7,1
	pop $7
	jmp l507
l512:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l511
l510:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l513:
	push $7
	push $5
	pop $b
	popax
	cmp $a,$b
	jl l514
	push 0
	jmp l515
l514:
	push 1
l515:
	popax
	cmp $a,0
	je l516
	jmp l518
l517:
	add $7,1
	pop $7
	jmp l513
l518:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $a
	call [$a],hide
	jmp l517
l516:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	popax
	spush $a
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	popax
	spush $a
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	popax
	spush $a
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l519:
	push $3
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l520
	push 0
	jmp l521
l520:
	push 1
l521:
	popax
	cmp $a,0
	je l522
	push $1
	popax
	spush $a
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	pop $b
	popax
	cmp $a,$b
	jne l524
	push 0
	jmp l525
l524:
	push 1
l525:
	popax
	cmp $a,0
	je l526
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	pop $b
	popax
	cmp $a,$b
	je l528
	push 0
	jmp l529
l528:
	push 1
l529:
	push $12
	push "sfx"
	pop $b
	popax
	cmp $a,$b
	je l530
	push 0
	jmp l531
l530:
	push 1
l531:
	popax
	pop $b
	or $a,$b
	popax
	cmp $a,0
	je l532
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	pop $b
	popax
	cmp $a,$b
	je l534
	push 0
	jmp l535
l534:
	push 1
l535:
	popax
	cmp $a,0
	je l536
	push $14
	push "sfx/"
	push $13
	pop $b
	popax
	add $a,$b
	cthis newsnd
	jmp l533
l536:
	push $14
	push $13
	cthis newsnd
l533:
	push $7
	push $6
	pop $b
	popax
	cmp $a,$b
	jl l538
	push 0
	jmp l539
l538:
	push 1
l539:
	popax
	cmp $a,0
	je l540
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	pop $b
	popax
	cmp $a,$b
	je l542
	push 0
	jmp l543
l542:
	push 1
l543:
	popax
	cmp $a,0
	je l544
	push $14
	popax
	spush $a
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l541
l544:
	push 0
	push 4
	call $12,gete
	push "play"
	pop $b
	popax
	cmp $a,$b
	je l546
	push 0
	jmp l547
l546:
	push 1
l547:
	popax
	cmp $a,0
	je l548
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l545
l548:
	push $12
	push "vol"
	pop $b
	popax
	cmp $a,$b
	je l550
	push 0
	jmp l551
l550:
	push 1
l551:
	popax
	cmp $a,0
	je l552
	push $14
	popax
	spush $a
	push $13
	spop $a
	call [$a],setvol
	jmp l549
l552:
l549:
l545:
l541:
	jmp l537
l540:
l537:
	jmp l527
l532:
	push $12
	push "group"
	pop $b
	popax
	cmp $a,$b
	je l554
	push 0
	jmp l555
l554:
	push 1
l555:
	popax
	cmp $a,0
	je l556
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	pop $b
	popax
	cmp $a,$b
	jl l558
	push 0
	jmp l559
l558:
	push 1
l559:
	popax
	cmp $a,0
	je l560
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	pop $b
	popax
	cmp $a,$b
	je l562
	push 0
	jmp l563
l562:
	push 1
l563:
	popax
	cmp $a,0
	je l564
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
	jmp l561
l564:
l561:
	jmp l557
l560:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l557:
	jmp l553
l556:
	push $12
	push "bank"
	pop $b
	popax
	cmp $a,$b
	je l566
	push 0
	jmp l567
l566:
	push 1
l567:
	popax
	cmp $a,0
	je l568
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	popax
	spush $a
	spop $e
	new classsndbank,[$e]
	push $14
	popax
	spush $a
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	pop $b
	popax
	cmp $a,$b
	jl l570
	push 0
	jmp l571
l570:
	push 1
l571:
	popax
	cmp $a,0
	je l572
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	pop $b
	popax
	cmp $a,$b
	je l574
	push 0
	jmp l575
l574:
	push 1
l575:
	popax
	cmp $a,0
	je l576
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	popax
	spush $a
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l573
l576:
	push $12
	push "vol"
	pop $b
	popax
	cmp $a,$b
	je l578
	push 0
	jmp l579
l578:
	push 1
l579:
	popax
	cmp $a,0
	je l580
	push $14
	popax
	spush $a
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
	jmp l577
l580:
l577:
l573:
	jmp l569
l572:
l569:
	jmp l565
l568:
	push $12
	push "method"
	pop $b
	popax
	cmp $a,$b
	je l582
	push 0
	jmp l583
l582:
	push 1
l583:
	popax
	cmp $a,0
	je l584
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l585:
	push $8
	push $9
	pop $b
	popax
	cmp $a,$b
	jle l586
	push 0
	jmp l587
l586:
	push 1
l587:
	popax
	cmp $a,0
	je l588
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l585
l588:
	jmp l581
l584:
	push $12
	push "singlebank"
	pop $b
	popax
	cmp $a,$b
	je l590
	push 0
	jmp l591
l590:
	push 1
l591:
	popax
	cmp $a,0
	je l592
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	popax
	spush $a
	spop $e
	new classsndbank,[$e]
	push $14
	popax
	spush $a
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l589
l592:
	push $12
	push "bgr"
	pop $b
	popax
	cmp $a,$b
	je l594
	push 0
	jmp l595
l594:
	push 1
l595:
	popax
	cmp $a,0
	je l596
	push $14
	cthis csndbgr
	push $7
	push $6
	pop $b
	popax
	cmp $a,$b
	jl l598
	push 0
	jmp l599
l598:
	push 1
l599:
	popax
	cmp $a,0
	je l600
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	pop $b
	popax
	cmp $a,$b
	je l602
	push 0
	jmp l603
l602:
	push 1
l603:
	popax
	cmp $a,0
	je l604
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
	jmp l601
l604:
l601:
	jmp l597
l600:
l597:
	jmp l593
l596:
	push $12
	push "music"
	pop $b
	popax
	cmp $a,$b
	je l606
	push 0
	jmp l607
l606:
	push 1
l607:
	popax
	cmp $a,0
	je l608
	push $14
	cthis playmusic
	push $7
	push $6
	pop $b
	popax
	cmp $a,$b
	jl l610
	push 0
	jmp l611
l610:
	push 1
l611:
	popax
	cmp $a,0
	je l612
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	pop $b
	popax
	cmp $a,$b
	je l614
	push 0
	jmp l615
l614:
	push 1
l615:
	popax
	cmp $a,0
	je l616
	add $7,1
	pop $7
	push $1
	popax
	spush $a
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
	jmp l613
l616:
l613:
	jmp l609
l612:
l609:
	jmp l605
l608:
l605:
l593:
l589:
l581:
l565:
l553:
l527:
	jmp l523
l526:
l523:
	add $3,1
	pop $3
	jmp l519
l522:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	method chideanimas
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push "hide"
	clparent classevalfun,_eval0
	end method
	method cshowanimas
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push "show"
	clparent classevalfun,_eval0
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l617:
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jle l618
	push 0
	jmp l619
l618:
	push 1
l619:
	popax
	cmp $a,0
	je l620
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $5
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	pop $b
	popax
	cmp $a,$b
	je l622
	push 0
	jmp l623
l622:
	push 1
l623:
	popax
	cmp $a,0
	je l624
	push $2
	ret
	jmp l621
l624:
	add $2,1
	pop $2
l621:
	jmp l617
l620:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	ret
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l626
	push 0
	jmp l627
l626:
	push 1
l627:
	popax
	cmp $a,0
	je l628
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $6
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
	jmp l625
l628:
l625:
	end method
	end class

	class classevalfun
	method init
	end method
	method _eval0
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
l629:
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jle l630
	push 0
	jmp l631
l630:
	push 1
l631:
	popax
	cmp $a,0
	je l632
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $4
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
	add $2,1
	pop $2
	jmp l629
l632:
	end method
	method _eval1
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l633:
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jle l634
	push 0
	jmp l635
l634:
	push 1
l635:
	popax
	cmp $a,0
	je l636
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $4
	popax
	spush $a
	push $5
	spop $d
	spop $a
	call [$a],[$d]
	add $2,1
	pop $2
	jmp l633
l636:
	end method
	method _eval2
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l637:
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jle l638
	push 0
	jmp l639
l638:
	push 1
l639:
	popax
	cmp $a,0
	je l640
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $4
	popax
	spush $a
	push $5
	push $6
	spop $d
	spop $a
	call [$a],[$d]
	add $2,1
	pop $2
	jmp l637
l640:
	end method
	method eval0
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l642
	push 0
	jmp l643
l642:
	push 1
l643:
	popax
	cmp $a,0
	je l644
	ret
	jmp l641
l644:
l641:
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l646
	push 0
	jmp l647
l646:
	push 1
l647:
	popax
	cmp $a,0
	je l648
	push $2
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l645
l648:
	push $1
	popax
	spush $a
	push $2
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
l645:
	end method
	method eval1
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l650
	push 0
	jmp l651
l650:
	push 1
l651:
	popax
	cmp $a,0
	je l652
	ret
	jmp l649
l652:
l649:
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l654
	push 0
	jmp l655
l654:
	push 1
l655:
	popax
	cmp $a,0
	je l656
	push $2
	popax
	spush $a
	push $3
	spop $d
	cthis [$d]
	jmp l653
l656:
	push $1
	popax
	spush $a
	push $2
	popax
	spush $a
	push $3
	spop $d
	spop $a
	call [$a],[$d]
l653:
	end method
	end class

	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push 800
	push 600
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class classgamemusic
	parent classdbreader
	method init
	clparent classdbreader,init
	new string,smuspath
	push ""
	pop smuspath
	new string,sbgrpath
	push ""
	pop sbgrpath
	new snd,_sndbgr
	push "onfinish"
	push "_stdsndloop"
	call _sndbgr,addmethod
	end method
	method reset
	call gameapi,stopmusic
	cthis stopbgr
	end method
	method _stdsndloop
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbl,load
	end method
	method musicpath
	localstring $1
	pop $1
	push $1
	pop smuspath
	end method
	method sndbgrpath
	localstring $1
	pop $1
	push $1
	pop sbgrpath
	end method
	method _play
	localint $1
	pop $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	push 1
	pop $2
	push $1
	call dbl,getcolsno
	pop $3
l657:
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jl l658
	push 0
	jmp l659
l658:
	push 1
l659:
	popax
	cmp $a,0
	je l660
	push $1
	push $2
	call dbl,get
	pop $5
	add $2,1
	pop $2
	push $5
	push "music"
	pop $b
	popax
	cmp $a,$b
	je l662
	push 0
	jmp l663
l662:
	push 1
l663:
	popax
	cmp $a,0
	je l664
	push smuspath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	pop $6
	add $2,1
	pop $2
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jl l666
	push 0
	jmp l667
l666:
	push 1
l667:
	popax
	cmp $a,0
	je l668
	push $1
	push $2
	call dbl,get
	push "vol"
	pop $b
	popax
	cmp $a,$b
	je l670
	push 0
	jmp l671
l670:
	push 1
l671:
	popax
	cmp $a,0
	je l672
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call gameapi,setmusicvol
	add $2,1
	pop $2
	jmp l669
l672:
l669:
	jmp l665
l668:
	push 100
	call gameapi,setmusicvol
l665:
	push $6
	call gameapi,playmusic
	jmp l661
l664:
	push $5
	push "bgr"
	pop $b
	popax
	cmp $a,$b
	je l674
	push 0
	jmp l675
l674:
	push 1
l675:
	popax
	cmp $a,0
	je l676
	push sbgrpath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	call _sndbgr,load
	add $2,1
	pop $2
	push $2
	push $3
	pop $b
	popax
	cmp $a,$b
	jl l678
	push 0
	jmp l679
l678:
	push 1
l679:
	popax
	cmp $a,0
	je l680
	push $1
	push $2
	call dbl,get
	push "vol"
	pop $b
	popax
	cmp $a,$b
	je l682
	push 0
	jmp l683
l682:
	push 1
l683:
	popax
	cmp $a,0
	je l684
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call _sndbgr,setvol
	add $2,1
	pop $2
	jmp l681
l684:
l681:
	jmp l677
l680:
	push 100
	call _sndbgr,setvol
l677:
	cthis playbgr
	jmp l673
l676:
	add $2,1
	pop $2
l673:
l661:
	jmp l657
l660:
	end method
	method play
	cthis reset
	call gameapi,getgamename
	push "_play"
	cthis readrow
	end method
	method playbgr
	call _sndbgr,play
	end method
	method stopbgr
	push 0
	call _sndbgr,stop
	end method
	end class

	class classasker
	parent newvars
	method init
	clparent newvars,init
	new string,sfuncyes
	push "null"
	pop sfuncyes
	new string,sfuncno
	push "null"
	pop sfuncno
	new string,ssndask
	new string,ssndyes
	new string,ssndno
	new classsound,clsnd
	end method
	method reset
	push "null"
	pop sfuncyes
	push "null"
	pop sfuncno
	end method
	method setfuncs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sfuncyes
	push $2
	pop sfuncno
	end method
	method fxonmovon
	localstring $1
	pop $1
	push $1
	call buts,sfxonmovon
	end method
	method setmouse
	localstring $1
	pop $1
	push "yes"
	push $1
	call buts,newmouse
	push "no"
	push $1
	call buts,newmouse
	end method
	method load
	localstring $1
	localint $2
	pop $2
	pop $1
	new classbutton,buts
	push $1
	push $2
	push "null"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call buts,disableall
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push $5
	cthis setfuncs
	push $1
	push $2
	push $3
	cthis ask2
	end method
	method ask2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	pop ssndask
	push $2
	pop ssndyes
	push $3
	pop ssndno
	call gameapi,pause
	call buts,benableall
	push "bkg"
	call buts,pause
	call clsnd,creset
	push $1
	call clsnd,cbplay
	end method
	method butmovon
	localstring $1
	pop $1
	push $1
	push "yes"
	pop $b
	popax
	cmp $a,$b
	je l686
	push 0
	jmp l687
l686:
	push 1
l687:
	popax
	cmp $a,0
	je l688
	push ssndask
	popax
	spush $a
	push 0
	spop $a
	call [$a],stop
	push ssndyes
	call clsnd,cbplay
	jmp l685
l688:
	push $1
	push "no"
	pop $b
	popax
	cmp $a,$b
	je l690
	push 0
	jmp l691
l690:
	push 1
l691:
	popax
	cmp $a,0
	je l692
	push ssndask
	popax
	spush $a
	push 0
	spop $a
	call [$a],stop
	push ssndno
	call clsnd,cbplay
	jmp l689
l692:
l689:
l685:
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "bkg"
	pop $b
	popax
	cmp $a,$b
	je l694
	push 0
	jmp l695
l694:
	push 1
l695:
	popax
	cmp $a,0
	je l696
	ret
	jmp l693
l696:
l693:
	call gameapi,resume
	call buts,disableall
	push 0
	call clsnd,cactsndstop
	push $1
	push "yes"
	pop $b
	popax
	cmp $a,$b
	je l698
	push 0
	jmp l699
l698:
	push 1
l699:
	push sfuncyes
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l700
	push 0
	jmp l701
l700:
	push 1
l701:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l702
	push sfuncyes
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l697
l702:
	push $1
	push "no"
	pop $b
	popax
	cmp $a,$b
	je l704
	push 0
	jmp l705
l704:
	push 1
l705:
	push sfuncno
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l706
	push 0
	jmp l707
l706:
	push 1
l707:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l708
	push sfuncno
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l703
l708:
l703:
l697:
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	popax
	spush $a
	push _sfun
	popax
	spush $a
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l710
	push 0
	jmp l711
l710:
	push 1
l711:
	popax
	cmp $a,0
	je l712
	push _sfunfin
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l709
l712:
l709:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	pop $b
	popax
	cmp $a,$b
	jae l714
	push 0
	jmp l715
l714:
	push 1
l715:
	popax
	cmp $a,0
	je l716
	push _ib2
	cthis _cfinito
	jmp l713
l716:
	push _ival
	push _ib1
	pop $b
	popax
	cmp $a,$b
	jle l718
	push 0
	jmp l719
l718:
	push 1
l719:
	popax
	cmp $a,0
	je l720
	push _ib1
	cthis _cfinito
	jmp l717
l720:
	push _sob
	popax
	spush $a
	push _sfun
	popax
	spush $a
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l717:
l713:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $8
	push $2
	call $2,abs
	pop $8
	push $1
	push 0
	pop $b
	popax
	cmp $a,$b
	jle l722
	push 0
	jmp l723
l722:
	push 1
l723:
	push $8
	push $5
	pop $b
	popax
	cmp $a,$b
	je l724
	push 0
	jmp l725
l724:
	push 1
l725:
	popax
	pop $b
	or $a,$b
	push $8
	push $6
	pop $b
	popax
	cmp $a,$b
	ja l726
	push 0
	jmp l727
l726:
	push 1
l727:
	popax
	pop $b
	or $a,$b
	popax
	cmp $a,0
	je l728
	ret
	jmp l721
l728:
l721:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l730
	push 0
	jmp l731
l730:
	push 1
l731:
	popax
	cmp $a,0
	je l732
	push _ib1
	pop _ival
	jmp l729
l732:
	push $2
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l734
	push 0
	jmp l735
l734:
	push 1
l735:
	popax
	cmp $a,0
	je l736
	push _ib2
	pop _ival
	jmp l733
l736:
	ret
l733:
l729:
	push $3
	popax
	spush $a
	push $4
	popax
	spush $a
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push $4
	cthis _play
	end method
	end class

	class classnextgame
	method init
	new db,dbn
	new int,idgame
	push 0
	pop idgame
	end method
	method load
	localstring $1
	pop $1
	push 0
	pop idgame
	push $1
	call dbn,load
	end method
	method next
	localint $1
	pop $1
	call gameapi,getgamename
	call dbn,findbyrow
	push $1
	pop $b
	popax
	add $a,$b
	pop idgame
	localint $2
	call dbn,getrowsno
	pop $2
	push idgame
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l738
	push 0
	jmp l739
l738:
	push 1
l739:
	popax
	cmp $a,0
	je l740
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop idgame
	jmp l737
l740:
	push idgame
	push $2
	pop $b
	popax
	cmp $a,$b
	jae l742
	push 0
	jmp l743
l742:
	push 1
l743:
	popax
	cmp $a,0
	je l744
	push 0
	pop idgame
	jmp l741
l744:
l741:
l737:
	push idgame
	push 0
	call dbn,get
	call gameapi,play
	end method
	method checkkey
	push "n"
	call keyboard,iskey
	push 1
	pop $b
	popax
	cmp $a,$b
	je l746
	push 0
	jmp l747
l746:
	push 1
l747:
	popax
	cmp $a,0
	je l748
	push 1
	cthis next
	jmp l745
l748:
	push "m"
	call keyboard,iskey
	push 1
	pop $b
	popax
	cmp $a,$b
	je l750
	push 0
	jmp l751
l750:
	push 1
l751:
	popax
	cmp $a,0
	je l752
	push 1
	popax
	sub 0,$a
	cthis next
	jmp l749
l752:
l749:
l745:
	end method
	end class

	class classeasysaver
	method init
	new int,ilevel
	push 1
	popax
	sub 0,$a
	pop ilevel
	new db,dbl
	new string,slevelfile
	end method
	method getlevel
	push ilevel
	ret
	end method
	method setlevel
	localint $1
	pop $1
	push $1
	pop ilevel
	end method
	method getgame
	localint $1
	pop $1
	push $1
	push 0
	call dbl,get
	ret
	end method
	method load
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	call ilevel,load
	push $1
	pop slevelfile
	push $2
	call dbl,load
	end method
	method save
	localint $1
	call gameapi,getgamename
	call dbl,findbyrow
	pop $1
	push $1
	push ilevel
	pop $b
	popax
	cmp $a,$b
	ja l754
	push 0
	jmp l755
l754:
	push 1
l755:
	popax
	cmp $a,0
	je l756
	push $1
	pop ilevel
	push slevelfile
	call ilevel,save
	jmp l753
l756:
l753:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	popax
	spush $a
	spop $e
	new anima,[$e]
	push $4
	popax
	spush $a
	push $1
	spop $a
	call [$a],load
	push $4
	popax
	spush $a
	push $2
	spop $a
	call [$a],setz
	localint $5
	push $4
	popax
	spush $a
	spop $a
	call [$a],nofactions
	pop $5
	localint $6
	localint $7
	localint $8
	push 0
	pop $8
	localstring $9
	localstring $10
	localstring $11
	localstring $12
	localint $13
	push 0
	pop $13
l757:
	push $13
	push $5
	pop $b
	popax
	cmp $a,$b
	jl l758
	push 0
	jmp l759
l758:
	push 1
l759:
	popax
	cmp $a,0
	je l760
	jmp l762
l761:
	add $13,1
	pop $13
	jmp l757
l762:
	push "null"
	pop $9
	push "null"
	pop $10
	push "null"
	pop $11
	push $4
	popax
	spush $a
	push $13
	spop $a
	call [$a],nofframes
	pop $6
	push 1
	pop $7
l763:
	push $7
	push $6
	pop $b
	popax
	cmp $a,$b
	jle l764
	push 0
	jmp l765
l764:
	push 1
l765:
	popax
	cmp $a,0
	je l766
	jmp l768
l767:
	add $7,1
	pop $7
	jmp l763
l768:
	push san
	push $8
	pop $b
	popax
	add $a,$b
	pop $12
	push $7
	push 1
	pop $b
	popax
	cmp $a,$b
	je l770
	push 0
	jmp l771
l770:
	push 1
l771:
	popax
	cmp $a,0
	je l772
	push $12
	pop $9
	jmp l769
l772:
	push $7
	push 2
	pop $b
	popax
	cmp $a,$b
	je l774
	push 0
	jmp l775
l774:
	push 1
l775:
	popax
	cmp $a,0
	je l776
	push $12
	pop $10
	jmp l773
l776:
	push $7
	push 3
	pop $b
	popax
	cmp $a,$b
	je l778
	push 0
	jmp l779
l778:
	push 1
l779:
	popax
	cmp $a,0
	je l780
	push $12
	pop $11
	jmp l777
l780:
l777:
l773:
l769:
	push $4
	push $12
	clparent newvars,copyanima
	push $12
	popax
	spush $a
	push $13
	push $7
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $8,1
	pop $8
	jmp l767
l766:
	push $9
	push $10
	push $11
	push $3
	cthis addbut
	jmp l761
l760:
	push $4
	popax
	spush $a
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	popax
	spush $a
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	popax
	spush $a
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l782
	push 0
	jmp l783
l782:
	push 1
l783:
	popax
	cmp $a,0
	je l784
	push sfxmon
	popax
	spush $a
	spop $a
	call [$a],play
	jmp l781
l784:
l781:
	push _sfunmovon
	popax
	spush $a
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	popax
	spush $a
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l786
	push 0
	jmp l787
l786:
	push 1
l787:
	popax
	cmp $a,0
	je l788
	ret
	jmp l785
l788:
l785:
	push $1
	popax
	spush $a
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push $4
	popax
	spush $a
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	popax
	spush $a
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l789:
	push $5
	push iilebut
	pop $b
	popax
	cmp $a,$b
	jl l790
	push 0
	jmp l791
l790:
	push 1
l791:
	popax
	cmp $a,0
	je l792
	jmp l794
l793:
	add $5,1
	pop $5
	jmp l789
l794:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l793
l792:
	end method
	method print
	localint $1
	push 0
	pop $1
l795:
	push $1
	push iilebut
	pop $b
	popax
	cmp $a,$b
	jl l796
	push 0
	jmp l797
l796:
	push 1
l797:
	popax
	cmp $a,0
	je l798
	jmp l800
l799:
	add $1,1
	pop $1
	jmp l795
l800:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l799
l798:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l802
	push 0
	jmp l803
l802:
	push 1
l803:
	popax
	cmp $a,0
	je l804
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	ret
	jmp l801
l804:
	push "null"
	ret
l801:
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l805:
	push $2
	push iilebut
	pop $b
	popax
	cmp $a,$b
	jl l806
	push 0
	jmp l807
l806:
	push 1
l807:
	popax
	cmp $a,0
	je l808
	jmp l810
l809:
	add $2,1
	pop $2
	jmp l805
l810:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $1
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
	jmp l809
l808:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	pop $b
	popax
	cmp $a,$b
	ja l812
	push 0
	jmp l813
l812:
	push 1
l813:
	popax
	cmp $a,0
	je l814
	push iilebut
	pop $2
	jmp l811
l814:
l811:
	localint $3
	push 0
	pop $3
l815:
	push $3
	push $2
	pop $b
	popax
	cmp $a,$b
	jl l816
	push 0
	jmp l817
l816:
	push 1
l817:
	popax
	cmp $a,0
	je l818
	jmp l820
l819:
	add $3,1
	pop $3
	jmp l815
l820:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $1
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
	jmp l819
l818:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l822
	push 0
	jmp l823
l822:
	push 1
l823:
	popax
	cmp $a,0
	je l824
	push $2
	popax
	spush $a
	spop $a
	call [$a],getimg
	ret
	jmp l821
l824:
	push "null"
	ret
l821:
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l826
	push 0
	jmp l827
l826:
	push 1
l827:
	popax
	cmp $a,0
	je l828
	push $3
	popax
	spush $a
	push $2
	spop $a
	call [$a],setmouse
	jmp l825
l828:
l825:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	popax
	spush $a
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	popax
	spush $a
	push $1
	popax
	spush $a
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l830
	push 0
	jmp l831
l830:
	push 1
l831:
	popax
	cmp $a,0
	je l832
	ret
	jmp l829
l832:
l829:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	popax
	spush $a
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	popax
	spush $a
	push _sfcl
	popax
	spush $a
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	popax
	spush $a
	push _sfrl
	popax
	spush $a
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l834
	push 0
	jmp l835
l834:
	push 1
l835:
	popax
	cmp $a,0
	je l836
	push sfxmon
	popax
	spush $a
	spop $a
	call [$a],play
	jmp l833
l836:
l833:
	push _sobmn
	popax
	spush $a
	push _sfmn
	popax
	spush $a
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	popax
	spush $a
	push _sfmf
	popax
	spush $a
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l837:
	push $4
	push $3
	pop $b
	popax
	cmp $a,$b
	jl l838
	push 0
	jmp l839
l838:
	push 1
l839:
	popax
	cmp $a,0
	je l840
	jmp l842
l841:
	add $4,1
	pop $4
	jmp l837
l842:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $a
	call [$a],hide
	jmp l841
l840:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	popax
	spush $a
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l844
	push 0
	jmp l845
l844:
	push 1
l845:
	popax
	cmp $a,0
	je l846
	push $5
	popax
	spush $a
	push $1
	popax
	spush $a
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l843
l846:
	push $5
	popax
	spush $a
	push $2
	spop $a
	call [$a],_cbuildbutname
l843:
	push $4
	push 1
	pop $b
	popax
	cmp $a,$b
	je l848
	push 0
	jmp l849
l848:
	push 1
l849:
	popax
	cmp $a,0
	je l850
	push $5
	popax
	spush $a
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	popax
	spush $a
	spop $a
	call [$a],hide
	jmp l847
l850:
l847:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	module advmouse
	method init
	new anima,anmsc
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	call anmsc,hide
	end method
	method set
	localstring $1
	pop $1
	call anmsc,show
	push $1
	push 0
	call anmsc,setframe
	push "anmsc"
	call mouse,setcursor
	call anmsc,hide
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	ret
	end method
	end module

	module modulehero
	method init
	end method
	method setashero
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push "buildhero"
	push "buildhero"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	spop $a
	call [$a],buildhero
	push $1
	popax
	spush $a
	push "buildheroframe"
	push "buildheroframe"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "onfinish"
	push "herofinish"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "getdir"
	push "getdir"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "thisfinish"
	push "thisfinish"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "playspec"
	push "playspec"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "playspec2"
	push "playspec2"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "herostop"
	push "herostop"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "herostart"
	push "herostart"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "setstdfin"
	push "setstdfin"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "getpocket"
	push "getpocket"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],setstdfin
	end method
	method buildheroframe
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	push "onendframe"
	push "heroendframe"
	spop $a
	call [$a],addmethod
	end method
	method setstdfin
	localstring $1
	pop $1
	push "onstdfinish"
	push $1
	cthis addmethod
	end method
	method buildhero
	new string,_sbase
	new int,_istate
	push 0
	pop _istate
	new string,_sfinfun
	new string,_sobfin
	new int,_bplaystop
	new int,_iiloscsek
	new int,_itypsort
	new int,idsort
	new string,_sobstart
	new string,_sfunfinstart
	new int,bthisfin
	push 0
	pop bthisfin
	end method
	method getpocket
	push _spocketpref
	cthis getname
	pop $b
	popax
	add $a,$b
	ret
	end method
	method thisfinish
	localint $1
	pop $1
	push $1
	pop bthisfin
	end method
	method getdir
	localstring $1
	cthis actionname
	pop $1
	push 0
	push 2
	call $1,gete
	ret
	end method
	method playspec
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop _sbase
	push $2
	pop _iiloscsek
	push $3
	pop _itypsort
	push $7
	pop _bplaystop
	push $8
	pop _sobfin
	push $9
	pop _sfinfun
	push $5
	pop _sobstart
	push $6
	pop _sfunfinstart
	push $2
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l852
	push 0
	jmp l853
l852:
	push 1
l853:
	popax
	cmp $a,0
	je l854
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	je l856
	push 0
	jmp l857
l856:
	push 1
l857:
	popax
	cmp $a,0
	je l858
	push 1
	pop idsort
	jmp l855
l858:
	push $3
	push 1
	pop $b
	popax
	cmp $a,$b
	je l860
	push 0
	jmp l861
l860:
	push 1
l861:
	popax
	cmp $a,0
	je l862
	push _iiloscsek
	call idsort,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
	jmp l859
l862:
l859:
l855:
	jmp l851
l854:
l851:
	push $4
	push 1
	pop $b
	popax
	cmp $a,$b
	je l864
	push 0
	jmp l865
l864:
	push 1
l865:
	popax
	cmp $a,0
	je l866
	push 1
	pop _istate
	push $1
	push "start"
	pop $b
	popax
	add $a,$b
	push $10
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l863
l866:
	push $2
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l868
	push 0
	jmp l869
l868:
	push 1
l869:
	popax
	cmp $a,0
	je l870
	push $1
	push 1
	pop $b
	popax
	add $a,$b
	push $10
	pop $b
	popax
	add $a,$b
	push 0
	cthis setframe
	jmp l867
l870:
	push $1
	push $10
	pop $b
	popax
	add $a,$b
	push 0
	cthis setframe
l867:
	cthis herostart
l863:
	end method
	method playspec2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call $1,length
	push 2
	pop $b
	popax
	cmp $a,$b
	jl l872
	push 0
	jmp l873
l872:
	push 1
l873:
	popax
	cmp $a,0
	je l874
	push ""
	pop $4
	jmp l871
l874:
	push 2
	call $1,strsube
	pop $4
l871:
	push $4
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	push $2
	push $3
	push 0
	push 2
	call $1,gete
	cthis playspec
	end method
	method herostop
	push 3
	pop _istate
	push _bplaystop
	push 1
	pop $b
	popax
	cmp $a,$b
	je l876
	push 0
	jmp l877
l876:
	push 1
l877:
	popax
	cmp $a,0
	je l878
	push 0
	pop _bplaystop
	push _sbase
	push "stop"
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l875
l878:
	push 1
	cthis stop
l875:
	end method
	method herostart
	push 2
	pop _istate
	push _iiloscsek
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l880
	push 0
	jmp l881
l880:
	push 1
l881:
	popax
	cmp $a,0
	je l882
	push _sbase
	push idsort
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l879
l882:
	push _sbase
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
l879:
	end method
	method herofinish
	push _istate
	push 2
	pop $b
	popax
	cmp $a,$b
	je l884
	push 0
	jmp l885
l884:
	push 1
l885:
	push bthisfin
	push 1
	pop $b
	popax
	cmp $a,$b
	je l886
	push 0
	jmp l887
l886:
	push 1
l887:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l888
	push 3
	pop _istate
	jmp l883
l888:
l883:
	push _istate
	push 0
	pop $b
	popax
	cmp $a,$b
	je l890
	push 0
	jmp l891
l890:
	push 1
l891:
	popax
	cmp $a,0
	je l892
	cthis onstdfinish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l889
l892:
	push _istate
	push 1
	pop $b
	popax
	cmp $a,$b
	je l894
	push 0
	jmp l895
l894:
	push 1
l895:
	popax
	cmp $a,0
	je l896
	cthis herostart
	push _sfunfinstart
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l898
	push 0
	jmp l899
l898:
	push 1
l899:
	popax
	cmp $a,0
	je l900
	push _sobstart
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l902
	push 0
	jmp l903
l902:
	push 1
l903:
	popax
	cmp $a,0
	je l904
	push _sfunfinstart
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l901
l904:
	push _sobstart
	popax
	spush $a
	push _sfunfinstart
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
l901:
	jmp l897
l900:
l897:
	jmp l893
l896:
	push _istate
	push 2
	pop $b
	popax
	cmp $a,$b
	je l906
	push 0
	jmp l907
l906:
	push 1
l907:
	popax
	cmp $a,0
	je l908
	localstring $1
	push _iiloscsek
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l910
	push 0
	jmp l911
l910:
	push 1
l911:
	popax
	cmp $a,0
	je l912
	push _itypsort
	push 0
	pop $b
	popax
	cmp $a,$b
	je l914
	push 0
	jmp l915
l914:
	push 1
l915:
	popax
	cmp $a,0
	je l916
	push idsort
	push _iiloscsek
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
	jmp l913
l916:
	push _itypsort
	push 1
	pop $b
	popax
	cmp $a,$b
	je l918
	push 0
	jmp l919
l918:
	push 1
l919:
	popax
	cmp $a,0
	je l920
	push _iiloscsek
	call idsort,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
	jmp l917
l920:
l917:
l913:
	push _sbase
	push idsort
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	pop $1
	jmp l909
l912:
	cthis actionname
	pop $1
l909:
	push $1
	cthis play
	jmp l905
l908:
	push _istate
	push 3
	pop $b
	popax
	cmp $a,$b
	je l922
	push 0
	jmp l923
l922:
	push 1
l923:
	popax
	cmp $a,0
	je l924
	push 0
	pop _istate
	push _sfinfun
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l926
	push 0
	jmp l927
l926:
	push 1
l927:
	popax
	cmp $a,0
	je l928
	push _sobfin
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l930
	push 0
	jmp l931
l930:
	push 1
l931:
	popax
	cmp $a,0
	je l932
	push _sfinfun
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l929
l932:
	push _sobfin
	popax
	spush $a
	push _sfinfun
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
l929:
	jmp l925
l928:
l925:
	jmp l921
l924:
l921:
l905:
l893:
l889:
	end method
	method heroendframe1
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method heroendframe
	cthis getposy
	cthis setz
	localstring $1
	cthis getpocket
	pop $1
	push $1
	call engine,varexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l934
	push 0
	jmp l935
l934:
	push 1
l935:
	popax
	cmp $a,0
	je l936
	push $1
	popax
	spush $a
	cthis getposx
	cthis getposy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],pocketpos
	jmp l933
l936:
l933:
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	end module

	class classadvhero
	method init
	new string,_sanim
	new int,_bisvecile
	push 0
	pop _bisvecile
	new string,_sbase
	push "null"
	pop _sbase
	new string,_sbase2
	push "null"
	pop _sbase2
	new int,izakres
	push 0
	pop izakres
	new string,_sbs2
	new string,_sbutoper
	new string,_smetpart
	new string,_simgbut
	new string,_sptfname
	cthis getname
	pop _sptfname
	end method
	method getptfname
	push _sptfname
	ret
	end method
	method link
	localstring $1
	pop $1
	push $1
	pop _sanim
	end method
	method link2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis link
	push $2
	cthis _checkamounts
	end method
	method anstand
	push _sanim
	popax
	spush $a
	push "stand"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method ansay
	push _sanim
	popax
	spush $a
	push "talk"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method getdir
	localstring $1
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],actionname
	pop $1
	push 0
	push 2
	call $1,gete
	ret
	end method
	method nofpieces
	cthis getdir
	cthis nofpiecesdir
	ret
	end method
	method nofpiecesdir
	localstring $1
	pop $1
	push _bisvecile
	push 1
	pop $b
	popax
	cmp $a,$b
	je l938
	push 0
	jmp l939
l938:
	push 1
l939:
	popax
	cmp $a,0
	je l940
	push $1
	call vecdirs,find
	call vecile,get
	ret
	jmp l937
l940:
	push 0
	ret
l937:
	end method
	method setbase2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis setbase
	push $2
	pop _sbase2
	end method
	method setbase
	localstring $1
	pop $1
	push $1
	pop _sbase
	call $1,length
	pop izakres
	end method
	method getpropdir
	localstring $1
	pop $1
	push $1
	push "auto"
	pop $b
	popax
	cmp $a,$b
	je l942
	push 0
	jmp l943
l942:
	push 1
l943:
	popax
	cmp $a,0
	je l944
	cthis getdir
	ret
	jmp l941
l944:
	push $1
	ret
l941:
	end method
	method _buildamounts
	push _bisvecile
	push 0
	pop $b
	popax
	cmp $a,$b
	je l946
	push 0
	jmp l947
l946:
	push 1
l947:
	popax
	cmp $a,0
	je l948
	push 1
	pop _bisvecile
	new vector,vecdirs
	push "string"
	call vecdirs,type
	push "begin"
	push "uu"
	push "ru"
	push "rr"
	push "rd"
	push "dd"
	push "ld"
	push "ll"
	push "lu"
	call vecdirs,beginadd
	new vector,vecile
	jmp l945
l948:
l945:
	end method
	method _clearvecile
	call vecile,free
	push 8
	push 0
	call vecile,resize
	end method
	method _checkamounts
	localstring $1
	pop $1
	cthis _buildamounts
	cthis _clearvecile
	push _sanim
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l950
	push 0
	jmp l951
l950:
	push 1
l951:
	popax
	cmp $a,0
	je l952
	ret
	jmp l949
l952:
l949:
	localint $2
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],nofactions
	pop $2
	localstring $3
	localint $4
	push $1
	cthis setbase
	localint $5
	push 0
	pop $5
l953:
	push $5
	push $2
	pop $b
	popax
	cmp $a,$b
	jl l954
	push 0
	jmp l955
l954:
	push 1
l955:
	popax
	cmp $a,0
	je l956
	jmp l958
l957:
	add $5,1
	pop $5
	jmp l953
l958:
	push _sanim
	popax
	spush $a
	push $5
	spop $a
	call [$a],nameofaction
	pop $3
	push 0
	push izakres
	call $3,getb
	push $1
	pop $b
	popax
	cmp $a,$b
	je l960
	push 0
	jmp l961
l960:
	push 1
l961:
	popax
	cmp $a,0
	je l962
	push izakres
	push 10
	call $3,getb
	pop $4
	push $4
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l964
	push 0
	jmp l965
l964:
	push 1
l965:
	popax
	cmp $a,0
	je l966
	push 0
	push 2
	call $3,gete
	call vecdirs,find
	call vecile,vecinc
	jmp l963
l966:
l963:
	jmp l959
l962:
l959:
	jmp l957
l956:
	end method
	method calllastfun
	cthis getcallfin
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method _calllastfunfin
	cthis calllastfunfin
	cthis advmsunlock
	end method
	method calllastfunfin
	cthis getcallfin
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method getcallfin
	push _sanim
	push _smetpart
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	ret
	end method
	method _cplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	cthis advmslock
	push _sanim
	popax
	spush $a
	push 1
	spop $a
	call [$a],thisfinish
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l968
	push 0
	jmp l969
l968:
	push 1
l969:
	popax
	cmp $a,0
	je l970
	push $2
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l972
	push 0
	jmp l973
l972:
	push 1
l973:
	popax
	cmp $a,0
	je l974
	push $2
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l971
l974:
l971:
	jmp l967
l970:
	push _sanim
	popax
	spush $a
	push $1
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	cthis getname
	push $2
	push $3
	cthis getpropdir
	spop $a
	call [$a],playspec
l967:
	end method
	method _cplay1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "_cplay1_2"
	push $2
	cthis _cplay
	end method
	method _cplay1_2
	cthis calllastfun
	cthis _callbehs
	end method
	method _callbehs
	cthis advmsunlock
	cthis callbehs
	end method
	method callbehs
	localstring $1
	cthis getcallfin
	pop $1
	push "beh_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis behexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l976
	push 0
	jmp l977
l976:
	push 1
l977:
	popax
	cmp $a,0
	je l978
	push "beh_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getname
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l975
l978:
	cthis _calllastfunfin
l975:
	end method
	method _cplay2_2
	cthis calllastfun
	push _sbs2
	push "_callbehs"
	cthis getdir
	cthis _cplay
	end method
	method _cplay2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	pop _sbs2
	push $1
	push "_cplay2_2"
	push $3
	cthis _cplay
	end method
	method heroplay1
	localstring $1
	pop $1
	push $1
	pop _simgbut
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbase1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay1
	end method
	method heroplay2
	localstring $1
	pop $1
	push $1
	pop _simgbut
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbase1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbase2
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay2
	end method
	method _setbase2
	localstring $1
	pop $1
	push $1
	push 1
	call modadv,get
	push $1
	push 2
	call modadv,get
	cthis setbase2
	end method
	method _setbase
	localstring $1
	pop $1
	push $1
	push 1
	call modadv,get
	cthis setbase
	end method
	method heroplay3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $2
	push 1
	call modadv,get
	spop $a
	call [$a],setbutbase1
	push $1
	popax
	spush $a
	push $2
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase2
	push $1
	cthis heroplay2
	end method
	end class

	class classherotaker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "_PICKUP_"
	pop _smetpart
	end method
	method herotake
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method calllastfun
	push _simgbut
	popax
	spush $a
	spop $a
	call [$a],hide
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],getpocket
	popax
	spush $a
	push _sbutoper
	spop $a
	call [$a],additem
	clparent classadvhero,calllastfun
	end method
	end class

	class classherolooker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "_OPERATE_"
	pop _smetpart
	end method
	method herolook
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method herooperate
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method heroopendoor
	localstring $1
	pop $1
	push $1
	push "open:"
	cthis heroplay3
	end method
	method heroclosedoor
	localstring $1
	pop $1
	push $1
	push "close:"
	cthis heroplay3
	end method
	end class

	class classherouser
	parent classadvhero
	method init
	clparent classadvhero,init
	new string,_stool
	end method
	method herouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _stool
	push "_USE_"
	push _stool
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	pop _smetpart
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],getpocket
	popax
	spush $a
	spop $a
	call [$a],itemhide
	push $2
	cthis heroplay2
	end method
	method calllastfun
	push _sanim
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	push _sanim
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	cthis getcallfin
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method calllastfunfin
	push _sanim
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	push _sanim
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	cthis getcallfin
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method callbehs
	push "beh_"
	cthis getcallfin
	pop $b
	popax
	add $a,$b
	cthis behexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l980
	push 0
	jmp l981
l980:
	push 1
l981:
	popax
	cmp $a,0
	je l982
	push "beh_"
	cthis getcallfin
	pop $b
	popax
	add $a,$b
	cthis getname
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l979
l982:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	cthis behexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l984
	push 0
	jmp l985
l984:
	push 1
l985:
	popax
	cmp $a,0
	je l986
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	cthis getname
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l983
l986:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	cthis behexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l988
	push 0
	jmp l989
l988:
	push 1
l989:
	popax
	cmp $a,0
	je l990
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	cthis getname
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l987
l990:
	cthis _calllastfunfin
l987:
l983:
l979:
	end method
	end class

	class classpathf
	parent classadvhero
	method init
	clparent classadvhero,init
	new path,ptf
	new string,swalkto
	push "null"
	pop swalkto
	new string,_sfunnopath
	push "null"
	pop _sfunnopath
	new string,_sfunvisit
	push "null"
	pop _sfunvisit
	new int,destx
	new int,desty
	new int,bzmien
	push 0
	pop bzmien
	new int,bzatrzym
	push 0
	pop bzatrzym
	new string,_sitem
	push "null"
	pop _sitem
	new int,_istep
	push "onfinish"
	push "_cptffin"
	call ptf,addmethod
	push "onvisit"
	push "_cptvisit"
	call ptf,addmethod
	push "_cptfstdreach"
	push "_cptfstdarrive"
	cthis addsigs
	push "go:"
	cthis _setbase
	end method
	method _buildan
	localstring $1
	pop $1
	push $1
	call ptf,linkanima
	push $1
	cthis link
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	pop _istep
	push $2
	push $3
	push $4
	push $5
	push $6
	call ptf,build
	push $1
	cthis _buildan
	end method
	method buildfrom
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	pop _istep
	push $2
	push $3
	call ptf,copy
	push $1
	cthis _buildan
	end method
	method addsigs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l992
	push 0
	jmp l993
l992:
	push 1
l993:
	popax
	cmp $a,0
	je l994
	push "onreach"
	push $1
	call ptf,addmethod
	jmp l991
l994:
l991:
	push $2
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l996
	push 0
	jmp l997
l996:
	push 1
l997:
	popax
	cmp $a,0
	je l998
	push "onarrive"
	push $2
	call ptf,addmethod
	jmp l995
l998:
l995:
	end method
	method sigonnopath
	localstring $1
	pop $1
	push $1
	pop _sfunnopath
	end method
	method sigonvisit
	localstring $1
	pop $1
	push $1
	pop _sfunvisit
	end method
	method _cptfstdreach
	localstring $1
	pop $1
	end method
	method _cptfstdarrive
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,move
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,setpos
	end method
	method show
	call ptf,show
	end method
	method hide
	call ptf,hide
	end method
	method enable
	localint $1
	pop $1
	push $1
	call ptf,enable
	end method
	method disable
	localint $1
	pop $1
	push $1
	call ptf,disable
	end method
	method setanstep
	localint $1
	pop $1
	push istep
	pop _istep
	push $1
	call ptf,setanstep
	end method
	method getanstep
	push _istep
	ret
	end method
	method getposx
	call ptf,getposx
	ret
	end method
	method getposy
	call ptf,getposy
	ret
	end method
	method getpx
	call ptf,getpx
	ret
	end method
	method getpy
	call ptf,getpy
	ret
	end method
	method getidan
	call ptf,getidan
	ret
	end method
	method getidan2
	call ptf,getidan2
	ret
	end method
	method getidgo
	call ptf,getidgo
	ret
	end method
	method getidanpath
	call ptf,getidanpath
	ret
	end method
	method getidan2path
	call ptf,getidan2path
	ret
	end method
	method getidgopath
	call ptf,getidgopath
	ret
	end method
	method excludev
	localint $1
	pop $1
	push $1
	call ptf,excludev
	end method
	method linkfilter
	call ptf,linkfilter
	end method
	method unlinkfilter
	call ptf,unlinkfilter
	end method
	method setscalepower
	localreal $1
	pop $1
	push $1
	call ptf,setscalepower
	end method
	method setzsize
	localreal $1
	pop $1
	push $1
	call ptf,setzsize
	end method
	method iswayto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,iswayto
	ret
	end method
	method scalean
	call ptf,scalean
	end method
	method walkto2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop swalkto
	push $2
	push $3
	cthis cangoto
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1000
	push 0
	jmp l1001
l1000:
	push 1
l1001:
	popax
	cmp $a,0
	je l1002
	push $2
	push $3
	call ptf,goto
	pop $2
	jmp l999
l1002:
	push _sfunnopath
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1004
	push 0
	jmp l1005
l1004:
	push 1
l1005:
	popax
	cmp $a,0
	je l1006
	push _sfunnopath
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l1003
l1006:
l1003:
l999:
	end method
	method walkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop swalkto
	cthis iswalking
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1008
	push 0
	jmp l1009
l1008:
	push 1
l1009:
	popax
	cmp $a,0
	je l1010
	push $2
	push $3
	call ptf,iswayto
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1012
	push 0
	jmp l1013
l1012:
	push 1
l1013:
	popax
	cmp $a,0
	je l1014
	push 1
	pop bzmien
	push $2
	pop destx
	push $3
	pop desty
	push 0
	ret
	jmp l1011
l1014:
	push 1
	pop bzatrzym
	push 1
	popax
	sub 0,$a
	ret
l1011:
	jmp l1007
l1010:
	push $2
	push $3
	call ptf,goto
	ret
l1007:
	end method
	method goto
	localint $1
	localint $2
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	cthis walkto
	ret
	end method
	method gotorel
	localint $1
	localint $2
	pop $2
	pop $1
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],getpx
	push $1
	pop $b
	popax
	add $a,$b
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],getey
	push $2
	pop $b
	popax
	add $a,$b
	cthis goto
	ret
	end method
	method iswalking
	call ptf,iswalking
	ret
	end method
	method stand
	call ptf,stand
	end method
	method getidpath
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,getidpath
	ret
	end method
	method cangoto
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	call ptf,getidpath
	pop $3
	push $3
	push 1
	popax
	sub 0,$a
	pop $b
	popax
	cmp $a,$b
	je l1016
	push 0
	jmp l1017
l1016:
	push 1
l1017:
	popax
	cmp $a,0
	je l1018
	push 0
	ret
	jmp l1015
l1018:
l1015:
	push $3
	call ptf,isenabled
	ret
	end method
	method _cptfreachbut
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push swalkto
	spop $a
	call [$a],herolook
	end method
	method _cptfreachdoors
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push swalkto
	spop $a
	call [$a],herooperate
	end method
	method _cptfreachitem
	cthis getptfname
	push "take"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push swalkto
	spop $a
	call [$a],herotake
	end method
	method _cptfherofin
	cthis stand
	push swalkto
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1020
	push 0
	jmp l1021
l1020:
	push 1
l1021:
	popax
	cmp $a,0
	je l1022
	push _sanim
	push "_REACH_"
	pop $b
	popax
	add $a,$b
	push swalkto
	popax
	spush $a
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	push _sanim
	cthis ismainhero
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1024
	push 0
	jmp l1025
l1024:
	push 1
l1025:
	popax
	cmp $a,0
	je l1026
	localstring $1
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],getpocket
	popax
	spush $a
	spop $a
	call [$a],getitem
	pop $1
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1028
	push 0
	jmp l1029
l1028:
	push 1
l1029:
	popax
	cmp $a,0
	je l1030
	cthis getptfname
	push "use"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $1
	push swalkto
	spop $a
	call [$a],herouse
	jmp l1027
l1030:
	push "_cptfreach"
	push swalkto
	popax
	spush $a
	spop $a
	call [$a],gettyp
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
l1027:
	jmp l1023
l1026:
l1023:
	push "null"
	pop swalkto
	jmp l1019
l1022:
	push _sanim
	push "_ARRIVE"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	cthis _cptheroendpath
l1019:
	end method
	method _cptheroendpath
	push _sfinfun
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1032
	push 0
	jmp l1033
l1032:
	push 1
l1033:
	popax
	cmp $a,0
	je l1034
	push _sfinob
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l1036
	push 0
	jmp l1037
l1036:
	push 1
l1037:
	popax
	cmp $a,0
	je l1038
	push _sfinfun
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l1035
l1038:
	push _sfinob
	popax
	spush $a
	push _sfinfun
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
l1035:
	push "null"
	pop _sfinfun
	push "null"
	pop _sfinob
	jmp l1031
l1034:
l1031:
	end method
	method _cptfnopath
	push _sanim
	push "_NOPATH"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method _cptfvisit
	push _sanim
	push "_VISIT"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method prepareforhero
	push "onfinish"
	push "_cptfherofin"
	call ptf,addmethod
	new string,_sfinob
	new string,_sfinfun
	push "_cptfnopath"
	cthis sigonnopath
	push "_cptfvisit"
	cthis sigonvisit
	end method
	method herowalkto2
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	push $3
	push $4
	cthis herowalkto
	end method
	method herowalkto
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	pop _sfinob
	push $5
	pop _sfinfun
	localint $6
	push $1
	push $2
	push $3
	cthis walkto
	pop $6
	end method
	method advgoto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	push "null"
	cthis herowalkto2
	end method
	method advwalkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	push "null"
	cthis herowalkto
	end method
	method advvisit
	localstring $1
	pop $1
	push $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getgox
	push $1
	popax
	spush $a
	spop $a
	call [$a],getgoy
	cthis advwalkto
	end method
	method herostand
	push _sanim
	popax
	spush $a
	push _sbase
	push "stop"
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method _cptvisit
	push bzmien
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1040
	push 0
	jmp l1041
l1040:
	push 1
l1041:
	popax
	cmp $a,0
	je l1042
	push 0
	pop bzmien
	localint $1
	push destx
	push desty
	cthis goto
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	pop $b
	popax
	cmp $a,$b
	je l1044
	push 0
	jmp l1045
l1044:
	push 1
l1045:
	popax
	cmp $a,0
	je l1046
	push _sfunnopath
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l1043
l1046:
l1043:
	jmp l1039
l1042:
	push bzatrzym
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1048
	push 0
	jmp l1049
l1048:
	push 1
l1049:
	popax
	cmp $a,0
	je l1050
	push 0
	pop bzatrzym
	push 1
	cthis stop
	jmp l1047
l1050:
	push _sfunvisit
	popax
	spush $a
	spop $d
	cthis [$d]
l1047:
l1039:
	end method
	method _cptffin
	push swalkto
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1052
	push 0
	jmp l1053
l1052:
	push 1
l1053:
	popax
	cmp $a,0
	je l1054
	push swalkto
	call ptf,onreach
	push "null"
	pop swalkto
	jmp l1051
l1054:
	call ptf,onarrive
l1051:
	end method
	end class

	class classwalkerqueue
	method init
	new timer,timwq
	push 1
	call timwq,settick
	push 1
	call timwq,setcycle
	push "onfinish"
	push "_timwqfin"
	call timwq,addmethod
	new vector,vecpt
	push "string"
	call vecpt,type
	end method
	method _timwqfin
	cthis checkqueue
	cthis play
	end method
	method start
	call timwq,play
	end method
	method stop
	push 0
	call timwq,stop
	end method
	method add
	localstring $1
	pop $1
	push $1
	call vecpt,add
	end method
	method goto
	localint $1
	localint $2
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	cthis walkto
	end method
	method visit
	localstring $1
	pop $1
	push $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getgox
	push $1
	popax
	spush $a
	spop $a
	call [$a],getgoy
	cthis walkto
	end method
	method walkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	call vecpt,size
	pop $4
	push $4
	push 0
	pop $b
	popax
	cmp $a,$b
	jle l1056
	push 0
	jmp l1057
l1056:
	push 1
l1057:
	popax
	cmp $a,0
	je l1058
	ret
	jmp l1055
l1058:
l1055:
	localint $5
	localstring $6
	localint $7
	push 0
	pop $7
l1059:
	push $7
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l1060
	push 0
	jmp l1061
l1060:
	push 1
l1061:
	popax
	cmp $a,0
	je l1062
	jmp l1064
l1063:
	add $7,1
	pop $7
	jmp l1059
l1064:
	push $7
	call vecpt,get
	pop $6
	push $6
	popax
	spush $a
	push $1
	push $2
	push $3
	spop $a
	call [$a],advwalkto
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $5
l1065:
	push $5
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l1066
	push 0
	jmp l1067
l1066:
	push 1
l1067:
	popax
	cmp $a,0
	je l1068
	jmp l1070
l1069:
	add $5,1
	pop $5
	jmp l1065
l1070:
	push $5
	call vecpt,get
	popax
	spush $a
	push $6
	popax
	spush $a
	spop $a
	call [$a],getidgo
	spop $a
	call [$a],excludev
	jmp l1069
l1068:
	jmp l1063
l1062:
	end method
	method checkqueue
	localint $1
	call vecpt,size
	pop $1
	push $1
	push 1
	pop $b
	popax
	cmp $a,$b
	jle l1072
	push 0
	jmp l1073
l1072:
	push 1
l1073:
	popax
	cmp $a,0
	je l1074
	ret
	jmp l1071
l1074:
l1071:
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localint $7
	push 0
	pop $7
l1075:
	push $7
	push $1
	pop $b
	popax
	cmp $a,$b
	jl l1076
	push 0
	jmp l1077
l1076:
	push 1
l1077:
	popax
	cmp $a,0
	je l1078
	jmp l1080
l1079:
	add $7,1
	pop $7
	jmp l1075
l1080:
	push $7
	call vecpt,get
	pop $3
	push $3
	popax
	spush $a
	spop $a
	call [$a],iswalking
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1082
	push 0
	jmp l1083
l1082:
	push 1
l1083:
	popax
	cmp $a,0
	je l1084
	push $3
	popax
	spush $a
	spop $a
	call [$a],getidan
	pop $5
	push $3
	popax
	spush $a
	spop $a
	call [$a],getidan2
	pop $6
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $2
l1085:
	push $2
	push $1
	pop $b
	popax
	cmp $a,$b
	jl l1086
	push 0
	jmp l1087
l1086:
	push 1
l1087:
	popax
	cmp $a,0
	je l1088
	jmp l1090
l1089:
	add $2,1
	pop $2
	jmp l1085
l1090:
	push $2
	call vecpt,get
	pop $4
	push $4
	popax
	spush $a
	spop $a
	call [$a],iswalking
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1092
	push 0
	jmp l1093
l1092:
	push 1
l1093:
	popax
	cmp $a,0
	je l1094
	push $4
	popax
	spush $a
	push $5
	spop $a
	call [$a],excludev
	push $4
	popax
	spush $a
	push $6
	spop $a
	call [$a],excludev
	jmp l1091
l1094:
l1091:
	jmp l1089
l1088:
	jmp l1081
l1084:
l1081:
	jmp l1079
l1078:
	end method
	end class

	class classadv
	parent classgame
	method init
	clparent classgame,init
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new classpathf,[$e]
	push $1
	popax
	spush $a
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new classpathf,[$e]
	push $1
	popax
	spush $a
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new path,[$e]
	push $1
	popax
	spush $a
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method cwalkto
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $2
	popax
	spush $a
	spop $a
	call [$a],actionname
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $3
	pop $b
	popax
	add $a,$b
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],walkto
	end method
	method cwalkto2
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $3
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $4
	pop $b
	popax
	add $a,$b
	push $2
	popax
	spush $a
	spop $a
	call [$a],getcy
	push $5
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],walkto
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new classbutton,[$e]
	push $1
	popax
	spush $a
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new classmask,[$e]
	push $1
	popax
	spush $a
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new classmask,[$e]
	push $1
	popax
	spush $a
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	method cherotalk2
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1096
	push 0
	jmp l1097
l1096:
	push 1
l1097:
	popax
	cmp $a,0
	je l1098
	push $5
	popax
	spush $a
	push 0
	spop $a
	call [$a],stop
	push $5
	popax
	spush $a
	push 1
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],setframe
	jmp l1095
l1098:
l1095:
	push $1
	push $2
	push $3
	push $4
	cthis cherotalk
	end method
	method cherotalk
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1100
	push 0
	jmp l1101
l1100:
	push 1
l1101:
	popax
	cmp $a,0
	je l1102
	push $3
	popax
	spush $a
	push $4
	spop $a
	call [$a],play
	jmp l1099
l1102:
l1099:
	push $1
	push $2
	cthis cbplaywithfin
	end method
	method cherosay
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	pop igmstate
	push $3
	cthis cbplay
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1104
	push 0
	jmp l1105
l1104:
	push 1
l1105:
	popax
	cmp $a,0
	je l1106
	push $1
	popax
	spush $a
	push "talk"
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	push $5
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1108
	push 0
	jmp l1109
l1108:
	push 1
l1109:
	popax
	cmp $a,0
	je l1110
	push $5
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l1107
l1110:
l1107:
	jmp l1103
l1106:
	push $6
	push 0
	pop $b
	popax
	cmp $a,$b
	je l1112
	push 0
	jmp l1113
l1112:
	push 1
l1113:
	popax
	cmp $a,0
	je l1114
	push $5
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1116
	push 0
	jmp l1117
l1116:
	push 1
l1117:
	popax
	cmp $a,0
	je l1118
	push $5
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l1115
l1118:
l1115:
	push $1
	popax
	spush $a
	push "stand"
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	jmp l1111
l1114:
l1111:
l1103:
	end method
	method cgetanbyaction
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	push $3
	cthis canfindact2
	pop $4
	push $4
	push 0
	pop $b
	popax
	cmp $a,$b
	jae l1120
	push 0
	jmp l1121
l1120:
	push 1
l1121:
	popax
	cmp $a,0
	je l1122
	push $1
	push $4
	pop $b
	popax
	add $a,$b
	ret
	jmp l1119
l1122:
	push "null"
	ret
l1119:
	end method
	method cgetelembyaction
	localstring $1
	pop $1
	push "anbg"
	call anbg0,nofactions
	push $1
	cthis cgetanbyaction
	ret
	end method
	method caddelemtomask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	popax
	spush $a
	spop $e
	new string,[$e]
	push "anbg"
	call anbg0,nofactions
	push $3
	cthis cgetanbyaction
	pop [$e]
	push $1
	popax
	spush $a
	push $2
	popax
	mov $a,[$a]
	psax
	push $4
	push "imglobcurs"
	push $5
	spop $a
	call [$a],addadvmask
	end method
	method _cstdelemframe
	cthis getey
	cthis setz
	end method
	method cstdelemframe
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	push "onsetframe"
	push "_cstdelemframe"
	spop $a
	call [$a],addmethod
	end method
	method cplayelem
	localstring $1
	pop $1
	push $1
	cthis cstdelemframe
	push $1
	popax
	spush $a
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
	end method
	method cplayelemfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	cthis cplayelem
	end method
	method canplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
	end method
	method _movybkg
	localint $1
	localstring $2
	pop $2
	pop $1
	call imgbkg,getpy
	push $1
	pop $b
	popax
	add $a,$b
	push 0
	pop $b
	popax
	cmp $a,$b
	jle l1124
	push 0
	jmp l1125
l1124:
	push 1
l1125:
	call imgbkg,getey
	push $1
	pop $b
	popax
	add $a,$b
	push 600
	pop $b
	popax
	cmp $a,$b
	jae l1126
	push 0
	jmp l1127
l1126:
	push 1
l1127:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l1128
	push $2
	popax
	spush $a
	push 0
	push $1
	spop $a
	call [$a],move
	jmp l1123
l1128:
l1123:
	end method
	method _movxbkg
	localint $1
	localstring $2
	pop $2
	pop $1
	call imgbkg,getpx
	push $1
	pop $b
	popax
	add $a,$b
	push 0
	pop $b
	popax
	cmp $a,$b
	jle l1130
	push 0
	jmp l1131
l1130:
	push 1
l1131:
	call imgbkg,getex
	push $1
	pop $b
	popax
	add $a,$b
	push 800
	pop $b
	popax
	cmp $a,$b
	jae l1132
	push 0
	jmp l1133
l1132:
	push 1
l1133:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l1134
	push $2
	popax
	spush $a
	push $1
	push 0
	spop $a
	call [$a],move
	jmp l1129
l1134:
l1129:
	end method
	method cmovybkg
	localint $1
	localint $2
	localint $3
	localint $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	cmp $a,$b
	jl l1136
	push 0
	jmp l1137
l1136:
	push 1
l1137:
	popax
	cmp $a,0
	je l1138
	push $4
	push $5
	cthis _movybkg
	jmp l1135
l1138:
	push $1
	push $3
	pop $b
	popax
	cmp $a,$b
	ja l1140
	push 0
	jmp l1141
l1140:
	push 1
l1141:
	popax
	cmp $a,0
	je l1142
	push $4
	popax
	sub 0,$a
	push $5
	cthis _movybkg
	jmp l1139
l1142:
l1139:
l1135:
	end method
	method cmovxbkg
	localint $1
	localint $2
	localint $3
	localint $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	cmp $a,$b
	jl l1144
	push 0
	jmp l1145
l1144:
	push 1
l1145:
	popax
	cmp $a,0
	je l1146
	push $4
	push $5
	cthis _movxbkg
	jmp l1143
l1146:
	push $1
	push $3
	pop $b
	popax
	cmp $a,$b
	ja l1148
	push 0
	jmp l1149
l1148:
	push 1
l1149:
	popax
	cmp $a,0
	je l1150
	push $4
	popax
	sub 0,$a
	push $5
	cthis _movxbkg
	jmp l1147
l1150:
l1147:
l1143:
	end method
	end class

	class classtalker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "talk:"
	cthis _setbase
	new snd,sndtalk
	push 0
	push 1
	call sndtalk,setstartstopflag
	push "onfinish"
	push "_ctalkfin"
	call sndtalk,addmethod
	end method
	method set
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	call sndtalk,load
	push $1
	push $2
	cthis link2
	end method
	method herosay1
	localstring $1
	pop $1
	push 1
	push 1
	push 1
	push "null"
	push $1
	cthis herosay
	end method
	method herosay
	localint $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis getdir
	cthis herosaydir
	end method
	method herosaydir
	localint $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push _sanim
	popax
	spush $a
	push 0
	spop $a
	call [$a],thisfinish
	push _sanim
	popax
	spush $a
	push _sbase
	push $6
	cthis nofpiecesdir
	push $1
	push $2
	push "null"
	push "null"
	push $3
	push $4
	push $5
	push $6
	spop $a
	call [$a],playspec
	call sndtalk,play
	end method
	method thisfinish
	localint $1
	pop $1
	push _sanim
	popax
	spush $a
	push $1
	spop $a
	call [$a],thisfinish
	end method
	method stop
	localint $1
	pop $1
	push $1
	call sndtalk,stop
	end method
	method _ctalkfin
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],herostop
	push _sanim
	popax
	spush $a
	push 1
	spop $a
	call [$a],thisfinish
	end method
	end class

	class classtxttalker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "talk:"
	cthis _setbase
	new int,iR
	new int,iG
	new int,iB
	new int,ibR
	new int,ibG
	new int,ibB
	new int,ibA
	new int,ibrr
	new int,ibrg
	new int,ibrb
	new int,ibra
	new int,ibw
	new db,dbtxt
	new int,iSize
	new gmimgvec,grtxt
	new gmimgvec,grtxt2
	localstring $1
	localint $2
	push 0
	pop $2
l1151:
	push $2
	push 25
	pop $b
	popax
	cmp $a,$b
	jl l1152
	push 0
	jmp l1153
l1152:
	push 1
l1153:
	popax
	cmp $a,0
	je l1154
	jmp l1156
l1155:
	add $2,1
	pop $2
	jmp l1151
l1156:
	push "txt"
	push $2
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new text,[$e]
	push $1
	call grtxt,add
	push $1
	popax
	spush $a
	spop $a
	call [$a],hide
	jmp l1155
l1154:
	new text,imgtxt
	call imgtxt,hide
	new int,bplaying
	push 0
	pop bplaying
	new string,slang
	push "pol"
	cthis setlang
	end method
	method setlang
	localstring $1
	pop $1
	push $1
	pop slang
	end method
	method isplaying
	push bplaying
	ret
	end method
	method setfont
	localstring $1
	pop $1
	push "setfont"
	push $1
	call grtxt,evals
	push $1
	popax
	spush $a
	spop $a
	call [$a],getsize
	pop iSize
	end method
	method setfontcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop iR
	push $2
	pop iG
	push $3
	pop iB
	end method
	method setfontbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ibR
	push $2
	pop ibG
	push $3
	pop ibB
	push $4
	pop ibA
	end method
	method setbgframe
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	pop ibrr
	push $3
	pop ibrg
	push $4
	pop ibrb
	push 255
	pop ibra
	push $1
	pop ibw
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis link
	push $2
	call grtxt,setz
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call imgtxt,setz
	end method
	method herosay
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis getdir
	cthis herosaydir
	end method
	method herosaydir
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push "auto"
	pop $b
	popax
	cmp $a,$b
	je l1158
	push 0
	jmp l1159
l1158:
	push 1
l1159:
	popax
	cmp $a,0
	je l1160
	cthis getdir
	pop $4
	jmp l1157
l1160:
l1157:
	push 1
	pop bplaying
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push slang
	pop $b
	popax
	add $a,$b
	call dbtxt,load
	localstring $5
	call grtxt2,free
	localint $6
	push 0
	pop $6
	localint $7
	call dbtxt,getrowsno
	pop $7
	localint $8
	push 0
	pop $8
l1161:
	push $8
	push $7
	pop $b
	popax
	cmp $a,$b
	jl l1162
	push 0
	jmp l1163
l1162:
	push 1
l1163:
	popax
	cmp $a,0
	je l1164
	jmp l1166
l1165:
	add $8,1
	pop $8
	jmp l1161
l1166:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	popax
	spush $a
	push $8
	push 0
	call dbtxt,get
	spop $a
	call [$a],set
	push $5
	popax
	spush $a
	push iR
	push iG
	push iB
	spop $a
	call [$a],createtxt
	push $5
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],setpos
	push iSize
	popax
	add $3,$a
	pop $3
	push $5
	popax
	spush $a
	spop $a
	call [$a],show
	push $5
	popax
	spush $a
	spop $a
	call [$a],getw
	push $6
	pop $b
	popax
	cmp $a,$b
	ja l1168
	push 0
	jmp l1169
l1168:
	push 1
l1169:
	popax
	cmp $a,0
	je l1170
	push $5
	popax
	spush $a
	spop $a
	call [$a],getw
	pop $6
	jmp l1167
l1170:
l1167:
	push $5
	call grtxt2,add
	jmp l1165
l1164:
	call txt0,getpx
	push iSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt0,getpy
	push iSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $6
	push iSize
	pop $b
	popax
	add $a,$b
	push iSize
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	push ibR
	push ibG
	push ibB
	push ibA
	call imgtxt,setbkg
	push ibw
	push ibrr
	push ibrg
	push ibrb
	push ibra
	call imgtxt,setborders
	call imgtxt,show
	push _sanim
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1172
	push 0
	jmp l1173
l1172:
	push 1
l1173:
	popax
	cmp $a,0
	je l1174
	push _sanim
	popax
	spush $a
	push 0
	spop $a
	call [$a],thisfinish
	push _sanim
	popax
	spush $a
	push _sbase
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	push "null"
	push "null"
	push $4
	spop $a
	call [$a],playspec
	jmp l1171
l1174:
l1171:
	end method
	method stop
	push 0
	pop bplaying
	call grtxt2,hide
	call imgtxt,hide
	push _sanim
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1176
	push 0
	jmp l1177
l1176:
	push 1
l1177:
	popax
	cmp $a,0
	je l1178
	push _sanim
	popax
	spush $a
	push 1
	spop $a
	call [$a],thisfinish
	push _sanim
	popax
	spush $a
	push "stand"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	jmp l1175
l1178:
l1175:
	end method
	end class

	class classbgplan
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,rpx
	push 0.0
	pop rpx
	new real,rpy
	push 0.0
	pop rpy
	new real,scalex
	push 0.0
	pop scalex
	new real,scaley
	push 0.0
	pop scaley
	end method
	method setscale
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	pop scalex
	push $2
	pop scaley
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add rpx,$a
	pop rpx
	push $2
	popax
	add rpy,$a
	pop rpy
	localint $3
	push rpx
	pop $3
	localint $4
	push rpy
	pop $4
	push $3
	popax
	sub rpx,$a
	pop rpx
	push $4
	popax
	sub rpy,$a
	pop rpy
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l1180
	push 0
	jmp l1181
l1180:
	push 1
l1181:
	push $4
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l1182
	push 0
	jmp l1183
l1182:
	push 1
l1183:
	popax
	pop $b
	or $a,$b
	popax
	cmp $a,0
	je l1184
	push $3
	push $4
	clparent gmobjvec,move
	jmp l1179
l1184:
l1179:
	end method
	method movebgr
	localreal $1
	localreal $2
	pop $2
	pop $1
	push scalex
	push $1
	pop $b
	popax
	mul $a,$b
	push scaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	end class

	class classgrplans
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,_rxp
	new real,_ryp
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "movebgr"
	push $1
	push $2
	cthis evalrr
	end method
	method getposx
	push _rxp
	ret
	end method
	method getposy
	push _ryp
	ret
	end method
	method shift
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "move"
	push $1
	push $2
	cthis evalii
	end method
	end class

	class classadvcamera
	method init
	new classgrplans,grbgrs
	new string,sancamera
	push "null"
	pop sancamera
	new string,smsmvfun
	push "null"
	pop smsmvfun
	new real,_rxmod
	push 0.05
	pop _rxmod
	new real,_rymod
	push 0.05
	pop _rymod
	new real,rleft
	push 0.0
	pop rleft
	new real,rtop
	push 0.0
	pop rtop
	new real,rright
	push 799
	pop rright
	new real,rbottom
	push 599
	pop rbottom
	new int,icamx
	push 400
	pop icamx
	new int,icamy
	push 300
	pop icamy
	new real,rborx
	push 799
	pop rborx
	new real,rbory
	push 599
	pop rbory
	new timer,timcamera
	push 1
	call timcamera,settick
	push 1
	call timcamera,setcycle
	push "onfinish"
	push "_camerafin"
	call timcamera,addmethod
	end method
	method _camerafin
	cthis checkcamera
	cthis play
	end method
	method setcenter
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop icamx
	push $2
	pop icamy
	end method
	method setborders
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	pop rright
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbottom
	end method
	method getposx
	call grbgrs,getposx
	ret
	end method
	method getposy
	call grbgrs,getposy
	ret
	end method
	method setmetonmsmove
	localstring $1
	pop $1
	push $1
	pop smsmvfun
	end method
	method start
	call timcamera,play
	end method
	method stop
	push 0
	call timcamera,stop
	end method
	method setactor
	localstring $1
	pop $1
	push $1
	pop sancamera
	end method
	method isactor
	localstring $1
	pop $1
	push $1
	push sancamera
	pop $b
	popax
	cmp $a,$b
	je l1186
	push 0
	jmp l1187
l1186:
	push 1
l1187:
	popax
	cmp $a,0
	je l1188
	push 1
	ret
	jmp l1185
l1188:
l1185:
	push 0
	ret
	end method
	method getactor
	push sancamera
	ret
	end method
	method scalemodifiers
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	pop _rxmod
	push $2
	pop _rymod
	end method
	method newbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new classbgplan,[$e]
	push $1
	push $2
	push $3
	cthis addbgr
	end method
	method addbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],setscale
	push $1
	call grbgrs,add
	end method
	method addtobgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],add
	end method
	method setscene
	push 1.0
	push 1.0
	cthis _setscene
	end method
	method _setscene
	localreal $1
	localreal $2
	pop $2
	pop $1
	localreal $3
	push icamx
	push sancamera
	popax
	spush $a
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	push $1
	popax
	mul $3,$a
	pop $3
	localreal $4
	push icamy
	push sancamera
	popax
	spush $a
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $2
	popax
	mul $4,$a
	pop $4
	localreal $5
	cthis getposx
	push $3
	pop $b
	popax
	add $a,$b
	pop $5
	localreal $6
	cthis getposy
	push $4
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push rleft
	pop $b
	popax
	cmp $a,$b
	jae l1190
	push 0
	jmp l1191
l1190:
	push 1
l1191:
	popax
	cmp $a,0
	je l1192
	cthis getposx
	popax
	sub 0,$a
	pop $3
	jmp l1189
l1192:
	push $5
	push rright
	pop $b
	popax
	add $a,$b
	push rborx
	pop $b
	popax
	cmp $a,$b
	jl l1194
	push 0
	jmp l1195
l1194:
	push 1
l1195:
	popax
	cmp $a,0
	je l1196
	push rborx
	cthis getposx
	push rright
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $3
	jmp l1193
l1196:
l1193:
l1189:
	push $6
	push rtop
	pop $b
	popax
	cmp $a,$b
	jae l1198
	push 0
	jmp l1199
l1198:
	push 1
l1199:
	popax
	cmp $a,0
	je l1200
	cthis getposy
	popax
	sub 0,$a
	pop $4
	jmp l1197
l1200:
	push $6
	push rbottom
	pop $b
	popax
	add $a,$b
	push rbory
	pop $b
	popax
	cmp $a,$b
	jl l1202
	push 0
	jmp l1203
l1202:
	push 1
l1203:
	popax
	cmp $a,0
	je l1204
	push rbory
	cthis getposy
	push rbottom
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $4
	jmp l1201
l1204:
l1201:
l1197:
	push $3
	push $4
	call grbgrs,move
	end method
	method checkcamera
	push sancamera
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l1206
	push 0
	jmp l1207
l1206:
	push 1
l1207:
	popax
	cmp $a,0
	je l1208
	ret
	jmp l1205
l1208:
l1205:
	push _rxmod
	push _rymod
	cthis _setscene
	push smsmvfun
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1210
	push 0
	jmp l1211
l1210:
	push 1
l1211:
	popax
	cmp $a,0
	je l1212
	push smsmvfun
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l1209
l1212:
l1209:
	end method
	method moveplans
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add rleft,$a
	pop rleft
	push $1
	popax
	add rright,$a
	pop rright
	push $2
	popax
	add rtop,$a
	pop rtop
	push $2
	popax
	add rbottom,$a
	pop rbottom
	push $1
	popax
	add rborx,$a
	pop rborx
	push $2
	popax
	add rbory,$a
	pop rbory
	push $1
	popax
	add icamx,$a
	pop icamx
	push $2
	popax
	add icamy,$a
	pop icamy
	push $1
	push $2
	call grbgrs,shift
	end method
	end class

	module modadvbut
	method init
	end method
	method setasbutton
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push "setadvbutmets"
	push "setadvbutmets"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "setbuttyp"
	push "setbuttyp"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "setadvbutpos"
	push "setadvbutpos"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "setbutdir"
	push "setbutdir"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "setbutbase1"
	push "setbutbase1"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "setbutbase2"
	push "setbutbase2"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "getbase1"
	push "getbase1"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "getbase2"
	push "getbase2"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "getbutdir"
	push "getbutdir"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "getbutname"
	push "getbutname"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "gettyp"
	push "gettyp"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "getgox"
	push "getgox"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push "getgoy"
	push "getgoy"
	spop $a
	call [$a],addmethod
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],setadvbutmets
	push $1
	popax
	spush $a
	push $3
	spop $a
	call [$a],setbuttyp
	end method
	method setmet
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	popax
	spush $a
	push $2
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	end method
	method setadvbutmets
	localstring $1
	pop $1
	new string,_styp
	new string,_sname
	push $1
	pop _sname
	new int,igox
	cthis getposx
	pop igox
	new int,igoy
	cthis getposy
	pop igoy
	new string,_sbutdir
	push "auto"
	pop _sbutdir
	new string,_sbase1
	push "null"
	pop _sbase1
	new string,_sbase2
	push "null"
	pop _sbase2
	end method
	method setbuttyp
	localstring $1
	pop $1
	push $1
	pop _styp
	localstring $2
	cthis getname
	pop $2
	push $2
	push "clickon"
	push $1
	call modadvbut,setmet
	push $2
	push "moveon"
	push $1
	call modadvbut,setmet
	push $2
	push "moveoff"
	push $1
	call modadvbut,setmet
	push $1
	push "but"
	pop $b
	popax
	cmp $a,$b
	je l1214
	push 0
	jmp l1215
l1214:
	push 1
l1215:
	popax
	cmp $a,0
	je l1216
	push "look:"
	push 1
	call modadv,get
	pop _sbase1
	push "look:"
	push 2
	call modadv,get
	pop _sbase2
	jmp l1213
l1216:
	push $1
	push "item"
	pop $b
	popax
	cmp $a,$b
	je l1218
	push 0
	jmp l1219
l1218:
	push 1
l1219:
	popax
	cmp $a,0
	je l1220
	push "take:"
	push 1
	call modadv,get
	pop _sbase1
	push "take:"
	push 2
	call modadv,get
	pop _sbase2
	jmp l1217
l1220:
	push $1
	push "doors"
	pop $b
	popax
	cmp $a,$b
	je l1222
	push 0
	jmp l1223
l1222:
	push 1
l1223:
	popax
	cmp $a,0
	je l1224
	push "doors:"
	push 1
	call modadv,get
	pop _sbase1
	push "doors:"
	push 2
	call modadv,get
	pop _sbase2
	jmp l1221
l1224:
	push $1
	push "pocket"
	pop $b
	popax
	cmp $a,$b
	je l1226
	push 0
	jmp l1227
l1226:
	push 1
l1227:
	popax
	cmp $a,0
	je l1228
	jmp l1225
l1228:
l1225:
l1221:
l1217:
l1213:
	end method
	method clickonbut
	cthis getname
	call clwalkq,visit
	end method
	method clickonitem
	cthis getname
	call clwalkq,visit
	end method
	method clickondoors
	cthis getname
	call clwalkq,visit
	end method
	method clickonpocket
	cthis itemclick
	end method
	method moveonbut
	call advmouse,setactive
	end method
	method moveonitem
	call advmouse,setactive
	end method
	method moveondoors
	call advmouse,setexit
	end method
	method moveonpocket
	call advmouse,setactive
	end method
	method moveoff
	call advmouse,setstd
	end method
	method moveoffbut
	call advmouse,setstd
	end method
	method moveoffitem
	call advmouse,setstd
	end method
	method moveoffdoors
	call advmouse,setstd
	end method
	method moveoffpocket
	call advmouse,setstd
	cthis itemmoveoff
	end method
	method setadvbutpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop igox
	push $2
	pop igoy
	end method
	method setbutdir
	localstring $1
	pop $1
	push $1
	pop _sbutdir
	end method
	method setbutbase1
	localstring $1
	pop $1
	push $1
	pop _sbase1
	end method
	method setbutbase2
	localstring $1
	pop $1
	push $1
	pop _sbase2
	end method
	method getbase1
	push _sbase1
	ret
	end method
	method getbase2
	push _sbase2
	ret
	end method
	method getbutdir
	push _sbutdir
	ret
	end method
	method getbutname
	push _sname
	ret
	end method
	method gettyp
	push _styp
	ret
	end method
	method getgox
	push igox
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getgoy
	push igoy
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	ret
	end method
	end module

	class classbehhero
	method init
	new string,_snextbeh
	push "null"
	pop _snextbeh
	new string,_stdfinfun
	push "null"
	pop _stdfinfun
	new string,_stdfinobj
	push "null"
	pop _stdfinobj
	new string,_stype
	push "null"
	pop _stype
	new string,_scaller
	new int,bblock
	push 1
	pop bblock
	new int,bonce
	push 0
	pop bonce
	new int,bparal
	push 0
	pop bparal
	end method
	method gonext
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	push bparal
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1230
	push 0
	jmp l1231
l1230:
	push 1
l1231:
	popax
	cmp $a,0
	je l1232
	push _sstarter
	popax
	spush $a
	cthis getname
	spop $a
	call [$a],behret
	pop $2
	jmp l1229
l1232:
	push _sstarter
	popax
	spush $a
	spop $a
	call [$a],isenumer
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l1234
	push 0
	jmp l1235
l1234:
	push 1
l1235:
	push _sstarter
	cthis getname
	pop $b
	popax
	cmp $a,$b
	jne l1236
	push 0
	jmp l1237
l1236:
	push 1
l1237:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l1238
	push 1
	pop $2
	jmp l1233
l1238:
	push _snextbeh
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1240
	push 0
	jmp l1241
l1240:
	push 1
l1241:
	popax
	cmp $a,0
	je l1242
	push _snextbeh
	popax
	spush $a
	push $1
	spop $a
	call [$a],eval
	jmp l1239
l1242:
	push 1
	pop $2
l1239:
l1233:
l1229:
	push $2
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1244
	push 0
	jmp l1245
l1244:
	push 1
l1245:
	popax
	cmp $a,0
	je l1246
	push $1
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1248
	push 0
	jmp l1249
l1248:
	push 1
l1249:
	popax
	cmp $a,0
	je l1250
	push $1
	popax
	spush $a
	spop $a
	call [$a],reteval
	jmp l1247
l1250:
	push _sstarter
	popax
	spush $a
	spop $a
	call [$a],callbehfin
	cthis getactbeh
	cthis getname
	pop $b
	popax
	cmp $a,$b
	je l1252
	push 0
	jmp l1253
l1252:
	push 1
l1253:
	popax
	cmp $a,0
	je l1254
	push "null"
	cthis setactbeh
	jmp l1251
l1254:
l1251:
l1247:
	jmp l1243
l1246:
l1243:
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setfinfun
	cthis advgetlock
	pop _bmslock
	push bblock
	cthis advmssetlock
	push "null"
	cthis eval
	end method
	method eval
	localstring $1
	pop $1
	cthis getname
	cthis setactbeh
	push $1
	pop _scaller
	push bonce
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1256
	push 0
	jmp l1257
l1256:
	push 1
l1257:
	popax
	cmp $a,0
	je l1258
	push bused
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1260
	push 0
	jmp l1261
l1260:
	push 1
l1261:
	popax
	cmp $a,0
	je l1262
	cthis reteval
	jmp l1259
l1262:
l1259:
	jmp l1255
l1258:
	cthis _eval
l1255:
	end method
	method rewind
	push bblock
	push 0
	pop $b
	popax
	cmp $a,$b
	je l1264
	push 0
	jmp l1265
l1264:
	push 1
l1265:
	popax
	cmp $a,0
	je l1266
	cthis _rew
	jmp l1263
l1266:
l1263:
	end method
	method reteval
	push _scaller
	cthis gonext
	end method
	method callbehfin
	push _bmslock
	cthis advmssetlock
	push _stdfinfun
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1268
	push 0
	jmp l1269
l1268:
	push 1
l1269:
	popax
	cmp $a,0
	je l1270
	push _stdfinobj
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1272
	push 0
	jmp l1273
l1272:
	push 1
l1273:
	popax
	cmp $a,0
	je l1274
	push _stdfinobj
	popax
	spush $a
	push _stdfinfun
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
	jmp l1271
l1274:
	push _stdfinfun
	popax
	spush $a
	spop $d
	cthis [$d]
l1271:
	jmp l1267
l1270:
l1267:
	localstring $1
	cthis getname
	pop $1
	push _sbeh
	call $1,strsubbs
	pop $1
	push $1
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method _evalgame
	call gameapi,getgamename
	pop sgmlastscene
	push "game"
	push _sgame
	pop $b
	popax
	add $a,$b
	pop sgmgamename
	push "gameetourist"
	call gameapi,play
	cthis reteval
	end method
	method _rewgame
	end method
	method _evalread
	push _sread
	push _ix
	push _iy
	push _sdir
	call clhilarytxt,herosaydir
	end method
	method _rewread
	call clhilarytxt,stop
	cthis reteval
	end method
	method _evalwait
	call timwait,play
	end method
	method _rewwait
	push 1
	call timwait,stop
	end method
	method _evaltalk
	push _san
	cthis advanstand
	push isort
	push bstt
	push bstp
	cthis getname
	push "reteval"
	push _sdir
	call clt,getpropdir
	call clt,herosaydir
	end method
	method _rewtalk
	push 1
	call clt,stop
	end method
	method _evalwalk
	push _sptf
	popax
	spush $a
	push _idestx
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push _idesty
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	cthis getname
	push "reteval"
	spop $a
	call [$a],herowalkto2
	end method
	method _rewwalk
	end method
	method _evalanorder
	push _san
	cthis advanstand
	localint $1
	push _sdb
	push _irow
	push _icol
	push _san
	cthis analizeaninstr
	pop $1
	cthis reteval
	end method
	method _rewanorder
	end method
	method _evalanplay
	push _san
	popax
	spush $a
	push 1
	spop $a
	call [$a],thisfinish
	push _san
	cthis advanstand
	push _san
	popax
	spush $a
	push _sact
	cthis getname
	push "reteval"
	spop $a
	call [$a],playspec2
	end method
	method _rewanplay
	push _san
	popax
	spush $a
	push 1
	spop $a
	call [$a],stop
	end method
	method _evalsndbg
	call _sndbg,play
	cthis reteval
	end method
	method _rewsndbg
	end method
	method _evalsndplay
	call sndp,play
	end method
	method _rewsndplay
	push 1
	call sndp,stop
	end method
	method _evalcall
	push scallobj
	popax
	spush $a
	cthis getname
	spop $a
	call [$a],eval
	end method
	method _rewcall
	end method
	method _evalnull
	cthis reteval
	end method
	method _rewnull
	end method
	method _evalstart
	localint $1
	push brand
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1276
	push 0
	jmp l1277
l1276:
	push 1
l1277:
	popax
	cmp $a,0
	je l1278
	call vecbehs,size
	pop $1
	push $1
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l1280
	push 0
	jmp l1281
l1280:
	push 1
l1281:
	popax
	cmp $a,0
	je l1282
	push $1
	call $1,rand
	call vecbehs,get
	popax
	spush $a
	push _scaller
	spop $a
	call [$a],eval
	jmp l1279
l1282:
	cthis reteval
l1279:
	jmp l1275
l1278:
	push bparal
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1284
	push 0
	jmp l1285
l1284:
	push 1
l1285:
	popax
	cmp $a,0
	je l1286
	push "vecbehs"
	call vecbehs2,veccopy
	push 0
	pop $1
l1287:
	push $1
	call vecbehs,size
	pop $b
	popax
	cmp $a,$b
	jl l1288
	push 0
	jmp l1289
l1288:
	push 1
l1289:
	popax
	cmp $a,0
	je l1290
	jmp l1292
l1291:
	add $1,1
	pop $1
	jmp l1287
l1292:
	push $1
	call vecbehs,get
	popax
	spush $a
	push _scaller
	spop $a
	call [$a],eval
	jmp l1291
l1290:
	jmp l1283
l1286:
	push ienumer
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l1294
	push 0
	jmp l1295
l1294:
	push 1
l1295:
	popax
	cmp $a,0
	je l1296
	cthis nextenum
	push 1
	pop $b
	popax
	sub $a,$b
	call vecbehs,get
	popax
	spush $a
	push _scaller
	spop $a
	call [$a],eval
	jmp l1293
l1296:
	cthis reteval
l1293:
l1283:
l1275:
	end method
	method _rewstart
	end method
	method settype
	localstring $1
	pop $1
	push $1
	pop _stype
	push "_eval"
	push "_eval"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addmethod
	push "_rew"
	push "_rew"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addmethod
	end method
	method setflags
	localstring $1
	pop $1
	push $1
	pop _snextbeh
	end method
	method setfinfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _stdfinobj
	push $2
	pop _stdfinfun
	end method
	method setasstarter
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "start"
	cthis settype
	new string,_sstarter
	cthis getname
	pop _sstarter
	new int,brand
	push $2
	pop brand
	new int,_bmslock
	new vector,vecbehs
	push $4
	pop bblock
	push "string"
	call vecbehs,type
	push $1
	pop bonce
	push bonce
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1298
	push 0
	jmp l1299
l1298:
	push 1
l1299:
	popax
	cmp $a,0
	je l1300
	new int,bused
	push 0
	pop bused
	jmp l1297
l1300:
l1297:
	push $3
	pop bparal
	new int,ienumer
	push $5
	pop ienumer
	push $5
	push 0
	pop $b
	popax
	cmp $a,$b
	ja l1302
	push 0
	jmp l1303
l1302:
	push 1
l1303:
	popax
	cmp $a,0
	je l1304
	new int,_iencnt
	push 1
	pop _iencnt
	jmp l1301
l1304:
	push $3
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1306
	push 0
	jmp l1307
l1306:
	push 1
l1307:
	popax
	cmp $a,0
	je l1308
	new vector,vecbehs2
	push "string"
	call vecbehs2,type
	jmp l1305
l1308:
l1305:
l1301:
	end method
	method isenumer
	push ienumer
	ret
	end method
	method nextenum
	push _iencnt
	call vecbehs,size
	pop $b
	popax
	cmp $a,$b
	ja l1310
	push 0
	jmp l1311
l1310:
	push 1
l1311:
	popax
	cmp $a,0
	je l1312
	push ienumer
	push 1
	pop $b
	popax
	add $a,$b
	pop _iencnt
	jmp l1309
l1312:
	add _iencnt,1
	pop _iencnt
l1309:
	push _iencnt
	push 1
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method addtostarter
	localstring $1
	pop $1
	push $1
	call vecbehs,add
	end method
	method getblock
	push bblock
	ret
	end method
	method addflags
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,_sstarter
	push $1
	pop _sstarter
	push _stype
	push "read"
	pop $b
	popax
	cmp $a,$b
	je l1314
	push 0
	jmp l1315
l1314:
	push 1
l1315:
	popax
	cmp $a,0
	je l1316
	push 0
	pop bblock
	jmp l1313
l1316:
	push $2
	pop bblock
l1313:
	push $3
	pop bparal
	end method
	method behret
	localstring $1
	pop $1
	push $1
	call vecbehs2,remove
	call vecbehs2,size
	push 0
	pop $b
	popax
	cmp $a,$b
	je l1318
	push 0
	jmp l1319
l1318:
	push 1
l1319:
	popax
	cmp $a,0
	je l1320
	push 1
	ret
	jmp l1317
l1320:
	push 0
	ret
l1317:
	end method
	method setasnewgamer
	localstring $1
	pop $1
	push "game"
	cthis settype
	new string,_sgame
	push $1
	pop _sgame
	end method
	method setasreader
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "read"
	cthis settype
	new string,_sread
	push $1
	pop _sread
	new int,_ix
	push $2
	pop _ix
	new int,_iy
	push $3
	pop _iy
	new string,_sdir
	push $4
	pop _sdir
	end method
	method setaswaiter
	localint $1
	pop $1
	push "wait"
	cthis settype
	new timer,timwait
	push 1
	call timwait,settick
	push $1
	call timwait,delay
	cthis getname
	push "reteval"
	call timwait,_csplbuild
	push "onfinish"
	push "_csplfinish"
	call timwait,addmethod
	end method
	method setassndbg
	localstring $1
	pop $1
	push "sndbg"
	cthis settype
	new snd,_sndbg
	push 0
	push 1
	call _sndbg,setstartstopflag
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call _sndbg,load
	end method
	method setasanorder
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "anorder"
	cthis settype
	new string,_sdb
	push $1
	pop _sdb
	new int,_irow
	push $2
	pop _irow
	new int,_icol
	push $3
	pop _icol
	new string,_san
	push $4
	pop _san
	end method
	method setascaller
	localstring $1
	pop $1
	push "call"
	cthis settype
	new string,scallobj
	push $1
	pop scallobj
	end method
	method _csplbuild
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sobj
	push $1
	pop _sobj
	new string,_sfinfun
	push $2
	pop _sfinfun
	end method
	method _csplfinish
	push _sfinfun
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1322
	push 0
	jmp l1323
l1322:
	push 1
l1323:
	popax
	cmp $a,0
	je l1324
	push _sobj
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l1326
	push 0
	jmp l1327
l1326:
	push 1
l1327:
	popax
	cmp $a,0
	je l1328
	push _sfinfun
	popax
	spush $a
	spop $d
	cthis [$d]
	jmp l1325
l1328:
	push _sobj
	popax
	spush $a
	push _sfinfun
	popax
	spush $a
	spop $d
	spop $a
	call [$a],[$d]
l1325:
	jmp l1321
l1324:
l1321:
	end method
	method setassndplayer
	localstring $1
	pop $1
	push "sndplay"
	cthis settype
	new snd,sndp
	push 0
	push 1
	call sndp,setstartstopflag
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call sndp,load
	cthis getname
	push "reteval"
	call sndp,_csplbuild
	push "onfinish"
	push "_csplfinish"
	call sndp,addmethod
	end method
	method setaswalker
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push "walk"
	cthis settype
	new string,_sptf
	push $1
	pop _sptf
	new int,_idestx
	push $2
	pop _idestx
	new int,_idesty
	push $3
	pop _idesty
	end method
	method setasanplayer
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "anplay"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,_sact
	push $2
	pop _sact
	end method
	method setastalker
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "talk"
	cthis settype
	new classtalker,clt
	new string,_san
	push $1
	pop _san
	push $1
	push $3
	push $2
	push ".wav"
	pop $b
	popax
	add $a,$b
	call clt,set
	new int,isort
	push $4
	pop isort
	new int,bstt
	push $5
	pop bstt
	new int,bstp
	push $6
	pop bstp
	new string,_sdir
	push $7
	pop _sdir
	end method
	end class

	class classadvpocket
	parent gmimgvec
	method init
	clparent gmimgvec,init
	new int,iX
	new int,iY
	new int,iNumItems
	push 0
	pop iNumItems
	new int,iMaxItems
	push 14
	pop iMaxItems
	new int,iScale
	new string,sState
	push "closed"
	pop sState
	new string,_sanim
	cthis getname
	pop _sanim
	push _spocketpref
	call _sanim,strsubbs
	pop _sanim
	new string,sItem
	push "null"
	pop sItem
	new string,sFocusItem
	push "null"
	pop sFocusItem
	new string,_sbase
	push "imgpocket"
	pop _sbase
	new int,_ibase
	call _sbase,length
	pop _ibase
	push "img"
	push _sbase
	push iMaxItems
	cthis newarray
	push _sbase
	push iMaxItems
	cthis addgroup
	push 1000
	cthis setz
	new string,sitempath
	new vector,arPocket
	push "string"
	call arPocket,type
	push "tim"
	push 1
	push 1
	push "evalpocket"
	cthis cnewtimercyclefin
	push "itempath:"
	push 1
	call modadv,get
	pop sitempath
	localint $1
	cthis getz
	pop $1
	new img,imitem
	push $1
	push 1
	pop $b
	popax
	add $a,$b
	call imitem,setz
	new img,immarker
	push sitempath
	push "itemmarker.png"
	pop $b
	popax
	add $a,$b
	call immarker,load
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	call immarker,setz
	call immarker,hide
	cthis hide
	cthis itemhide
	new int,bskip
	push 0
	pop bskip
	end method
	method skip
	push 1
	pop bskip
	end method
	method skipitem
	push sItem
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1330
	push 0
	jmp l1331
l1330:
	push 1
l1331:
	popax
	cmp $a,0
	je l1332
	push 1
	pop bskip
	jmp l1329
l1332:
l1329:
	end method
	method additem
	localstring $1
	pop $1
	push $1
	call arPocket,add
	localstring $2
	push _sbase
	push iNumItems
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	popax
	spush $a
	push sitempath
	push $1
	pop $b
	popax
	add $a,$b
	push ".png"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $2
	popax
	spush $a
	cthis getz
	spop $a
	call [$a],setz
	push $2
	popax
	spush $a
	spop $a
	call [$a],hide
	add iNumItems,1
	pop iNumItems
	end method
	method removeitem
	localstring $1
	pop $1
	call $1,print
	push $1
	call arPocket,remove
	call arPocket,size
	pop iNumItems
	push sState
	push "opened"
	pop $b
	popax
	cmp $a,$b
	je l1334
	push 0
	jmp l1335
l1334:
	push 1
l1335:
	popax
	cmp $a,0
	je l1336
	cthis hide
	jmp l1333
l1336:
l1333:
	localstring $2
	localstring $3
	localint $4
	push 0
	pop $4
l1337:
	push $4
	push iNumItems
	pop $b
	popax
	cmp $a,$b
	jl l1338
	push 0
	jmp l1339
l1338:
	push 1
l1339:
	popax
	cmp $a,0
	je l1340
	jmp l1342
l1341:
	add $4,1
	pop $4
	jmp l1337
l1342:
	push _sbase
	push $4
	pop $b
	popax
	add $a,$b
	pop $2
	push $4
	call arPocket,get
	pop $3
	push $2
	popax
	spush $a
	push "scripts/ksiezyc/items/"
	push $3
	pop $b
	popax
	add $a,$b
	push ".png"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $2
	popax
	spush $a
	cthis getz
	spop $a
	call [$a],setz
	push sState
	push "closed"
	pop $b
	popax
	cmp $a,$b
	je l1344
	push 0
	jmp l1345
l1344:
	push 1
l1345:
	popax
	cmp $a,0
	je l1346
	push $2
	popax
	spush $a
	spop $a
	call [$a],hide
	jmp l1343
l1346:
l1343:
	jmp l1341
l1340:
	end method
	method useitem
	push sItem
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1348
	push 0
	jmp l1349
l1348:
	push 1
l1349:
	popax
	cmp $a,0
	je l1350
	push sItem
	cthis removeitem
	cthis itemhide
	jmp l1347
l1350:
l1347:
	end method
	method evalpocket
	cthis play
	push sState
	push "open"
	pop $b
	popax
	cmp $a,$b
	je l1352
	push 0
	jmp l1353
l1352:
	push 1
l1353:
	popax
	cmp $a,0
	je l1354
	push 16
	popax
	add iScale,$a
	pop iScale
	jmp l1351
l1354:
	push sState
	push "close"
	pop $b
	popax
	cmp $a,$b
	je l1356
	push 0
	jmp l1357
l1356:
	push 1
l1357:
	popax
	cmp $a,0
	je l1358
	push 16
	popax
	sub iScale,$a
	pop iScale
	jmp l1355
l1358:
l1355:
l1351:
	push iScale
	push 116
	pop $b
	popax
	cmp $a,$b
	ja l1360
	push 0
	jmp l1361
l1360:
	push 1
l1361:
	popax
	cmp $a,0
	je l1362
	push 0
	cthis stop
	push 116
	pop iScale
	push "opened"
	pop sState
	jmp l1359
l1362:
	push iScale
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l1364
	push 0
	jmp l1365
l1364:
	push 1
l1365:
	popax
	cmp $a,0
	je l1366
	push 0
	cthis stop
	push 0
	pop iScale
	push "closed"
	pop sState
	jmp l1363
l1366:
l1363:
l1359:
	localreal $1
	push iScale
	push iScale
	pop $b
	popax
	mul $a,$b
	push 550
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	localreal $2
	localstring $3
	localint $4
	push 0
	pop $4
l1367:
	push $4
	push iNumItems
	pop $b
	popax
	cmp $a,$b
	jl l1368
	push 0
	jmp l1369
l1368:
	push 1
l1369:
	popax
	cmp $a,0
	je l1370
	jmp l1372
l1371:
	add $4,1
	pop $4
	jmp l1367
l1372:
	push $1
	push $4
	pop $b
	popax
	mul $a,$b
	push $1
	push iNumItems
	pop $b
	popax
	mul $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push 90.0
	pop $b
	popax
	sub $a,$b
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $2
	push $4
	cthis get
	pop $3
	push $3
	popax
	spush $a
	push $2
	call $2,cos
	push iScale
	pop $b
	popax
	mul $a,$b
	push iX
	pop $b
	popax
	add $a,$b
	push 76
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	call $2,sin
	push iScale
	pop $b
	popax
	mul $a,$b
	push iY
	pop $b
	popax
	add $a,$b
	push 75
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $3
	popax
	spush $a
	spop $a
	call [$a],show
	jmp l1371
l1370:
	push sState
	push "closed"
	pop $b
	popax
	cmp $a,$b
	je l1374
	push 0
	jmp l1375
l1374:
	push 1
l1375:
	popax
	cmp $a,0
	je l1376
	cthis hide
	jmp l1373
l1376:
l1373:
	end method
	method pocketpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push iX
	pop $b
	popax
	sub $a,$b
	pop $3
	localint $4
	push $2
	push iY
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	cthis move
	push $1
	pop iX
	push $2
	pop iY
	end method
	method pockettoggle
	push sState
	push "opened"
	pop $b
	popax
	cmp $a,$b
	je l1378
	push 0
	jmp l1379
l1378:
	push 1
l1379:
	popax
	cmp $a,0
	je l1380
	push "close"
	pop sState
	call immarker,hide
	call tim,play
	jmp l1377
l1380:
	push sState
	push "closed"
	pop $b
	popax
	cmp $a,$b
	je l1382
	push 0
	jmp l1383
l1382:
	push 1
l1383:
	popax
	cmp $a,0
	je l1384
	push "open"
	pop sState
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],getposx
	pop iX
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],getposy
	push _sanim
	popax
	spush $a
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop iY
	cthis itemhide
	cthis show
	call tim,evalpocket
	call tim,play
	jmp l1381
l1384:
	push sState
	push "open"
	pop $b
	popax
	cmp $a,$b
	je l1386
	push 0
	jmp l1387
l1386:
	push 1
l1387:
	popax
	cmp $a,0
	je l1388
	push "close"
	pop sState
	jmp l1385
l1388:
	push sState
	push "close"
	pop $b
	popax
	cmp $a,$b
	je l1390
	push 0
	jmp l1391
l1390:
	push 1
l1391:
	popax
	cmp $a,0
	je l1392
	push "open"
	pop sState
	jmp l1389
l1392:
l1389:
l1385:
l1381:
l1377:
	end method
	method getitem
	push sItem
	ret
	end method
	method itemhide
	push "null"
	pop sFocusItem
	push "null"
	pop sItem
	call imitem,hide
	end method
	method itemclick
	cthis skip
	push sState
	push "closed"
	pop $b
	popax
	cmp $a,$b
	je l1394
	push 0
	jmp l1395
l1394:
	push 1
l1395:
	popax
	cmp $a,0
	je l1396
	cthis pockettoggle
	jmp l1393
l1396:
	push sState
	push "opened"
	pop $b
	popax
	cmp $a,$b
	je l1398
	push 0
	jmp l1399
l1398:
	push 1
l1399:
	popax
	cmp $a,0
	je l1400
	push sFocusItem
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1402
	push 0
	jmp l1403
l1402:
	push 1
l1403:
	popax
	cmp $a,0
	je l1404
	push sFocusItem
	pop sItem
	push sFocusItem
	popax
	spush $a
	spop $a
	call [$a],hide
	push sitempath
	push _ibase
	push 3
	call sFocusItem,getb
	call arPocket,get
	pop $b
	popax
	add $a,$b
	push "no.png"
	pop $b
	popax
	add $a,$b
	call imitem,load
	call imitem,show
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call imitem,setz
	cthis setitempos
	cthis pockettoggle
	jmp l1401
l1404:
	cthis pockettoggle
l1401:
	jmp l1397
l1400:
	push sState
	push "open"
	pop $b
	popax
	cmp $a,$b
	je l1406
	push 0
	jmp l1407
l1406:
	push 1
l1407:
	popax
	cmp $a,0
	je l1408
	cthis pockettoggle
	jmp l1405
l1408:
	push sState
	push "close"
	pop $b
	popax
	cmp $a,$b
	je l1410
	push 0
	jmp l1411
l1410:
	push 1
l1411:
	popax
	cmp $a,0
	je l1412
	cthis pockettoggle
	jmp l1409
l1412:
l1409:
l1405:
l1397:
l1393:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	push $2
	push $3
	push $4
	clparent gmimgvec,isin
	pop $5
	push $5
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l1414
	push 0
	jmp l1415
l1414:
	push 1
l1415:
	popax
	cmp $a,0
	je l1416
	push $5
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	pop sFocusItem
	jmp l1413
l1416:
	push "null"
	pop sFocusItem
	push _sanim
	popax
	spush $a
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	pop $5
l1413:
	push $5
	ret
	end method
	method setitempos
	call mouse,getpx
	push 76
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call mouse,getpy
	push 75
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call imitem,setpos
	end method
	method itemmoveoff
	push sState
	push "opened"
	pop $b
	popax
	cmp $a,$b
	je l1418
	push 0
	jmp l1419
l1418:
	push 1
l1419:
	popax
	cmp $a,0
	je l1420
	call immarker,hide
	jmp l1417
l1420:
l1417:
	end method
	method itemmoveon
	push sState
	push "opened"
	pop $b
	popax
	cmp $a,$b
	je l1422
	push 0
	jmp l1423
l1422:
	push 1
l1423:
	popax
	cmp $a,0
	je l1424
	push sFocusItem
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1426
	push 0
	jmp l1427
l1426:
	push 1
l1427:
	popax
	cmp $a,0
	je l1428
	push sFocusItem
	popax
	spush $a
	spop $a
	call [$a],getpx
	push sFocusItem
	popax
	spush $a
	spop $a
	call [$a],getpy
	call immarker,setpos
	call immarker,show
	jmp l1425
l1428:
l1425:
	jmp l1421
l1424:
l1421:
	end method
	method onmouselclick
	localint $1
	localint $2
	pop $2
	pop $1
	push bskip
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1430
	push 0
	jmp l1431
l1430:
	push 1
l1431:
	popax
	cmp $a,0
	je l1432
	push 0
	pop bskip
	ret
	jmp l1429
l1432:
l1429:
	push sState
	push "opened"
	pop $b
	popax
	cmp $a,$b
	je l1434
	push 0
	jmp l1435
l1434:
	push 1
l1435:
	push sState
	push "open"
	pop $b
	popax
	cmp $a,$b
	je l1436
	push 0
	jmp l1437
l1436:
	push 1
l1437:
	popax
	pop $b
	or $a,$b
	popax
	cmp $a,0
	je l1438
	cthis pockettoggle
	jmp l1433
l1438:
	cthis itemhide
l1433:
	end method
	method onmousemove
	localint $1
	localint $2
	pop $2
	pop $1
	push sItem
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1440
	push 0
	jmp l1441
l1440:
	push 1
l1441:
	popax
	cmp $a,0
	je l1442
	cthis setitempos
	jmp l1439
l1442:
l1439:
	push sState
	push "opened"
	pop $b
	popax
	cmp $a,$b
	je l1444
	push 0
	jmp l1445
l1444:
	push 1
l1445:
	popax
	cmp $a,0
	je l1446
	push $1
	push $2
	push 1
	push 1
	cthis isin
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l1448
	push 0
	jmp l1449
l1448:
	push 1
l1449:
	popax
	cmp $a,0
	je l1450
	cthis itemmoveon
	jmp l1447
l1450:
l1447:
	jmp l1443
l1446:
l1443:
	end method
	end class

	new string,sgmlastscene
	module modadv
	method init
	new db,dbload
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbload,loadscript
	end method
	method get
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	call dbload,findbyrow
	push $2
	call dbload,get
	ret
	end method
	end module

	class classloadedhero
	method init
	new string,sanhero
	new int,bplaystart
	push 0
	pop bplaystart
	new int,bplaystop
	push 0
	pop bplaystop
	end method
	method gethero
	push sanhero
	ret
	end method
	method sethero
	localstring $1
	pop $1
	push $1
	pop sanhero
	end method
	method setplaystart
	localint $1
	pop $1
	push $1
	pop bplaystart
	end method
	method setplaystop
	localint $1
	pop $1
	push $1
	pop bplaystop
	end method
	method getplaystart
	push bplaystart
	ret
	end method
	method getplaystop
	push bplaystop
	ret
	end method
	end class

	class classadvcontroller
	parent classadv
	method init
	clparent classadv,init
	push "sndpath:"
	push 1
	call modadv,get
	cthis setwavpath
	new string,_slhpref
	push "cllh"
	pop _slhpref
	new string,_spathpref
	push "pt"
	pop _spathpref
	new string,_spocketpref
	push "pc"
	pop _spocketpref
	new classobjcounter,clcbeh
	push "_dbbh"
	call clcbeh,set
	new string,_sbeh
	push "clbeh"
	pop _sbeh
	new int,iidbeh
	new classobjcounter,clcadv
	push "dbadv"
	call clcadv,set
	new db,dbmacros
	new vector,_vecarg
	push "string"
	call _vecarg,type
	new classadvcamera,clcamera
	push "advmsmove"
	call clcamera,setmetonmsmove
	new classwalkerqueue,clwalkq
	new gmimgvec,grbuts
	new gmimgvec,grmsmove
	new gmimgvec,grmslclick
	new string,_susetool
	push "null"
	pop _susetool
	new string,_slastms
	push "null"
	pop _slastms
	new int,bmslock
	push 0
	pop bmslock
	new string,sactbeh
	push "null"
	pop sactbeh
	new int,licznik
	push 0
	pop licznik
	new string,smainhero
	push "null"
	pop smainhero
	localstring $1
	cthis getname
	pop $1
	push "game"
	call $1,strsubbs
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	push $1
	push ".adv"
	pop $b
	popax
	add $a,$b
	cthis loadadventure
	call grbuts,sortimgs
	push smainhero
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l1452
	push 0
	jmp l1453
l1452:
	push 1
l1453:
	popax
	cmp $a,0
	je l1454
	call clcamera,getactor
	pop smainhero
	jmp l1451
l1454:
l1451:
	call clcamera,start
	call clwalkq,start
	call advmouse,setstd
	push "beh_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	push "Init"
	pop $b
	popax
	add $a,$b
	cthis behexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1456
	push 0
	jmp l1457
l1456:
	push 1
l1457:
	popax
	cmp $a,0
	je l1458
	push "beh_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	push "Init"
	pop $b
	popax
	add $a,$b
	cthis playbeh
	jmp l1455
l1458:
	push "behInit"
	cthis behexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1460
	push 0
	jmp l1461
l1460:
	push 1
l1461:
	popax
	cmp $a,0
	je l1462
	push "behInit"
	cthis playbeh
	jmp l1459
l1462:
l1459:
l1455:
	end method
	method getmainhero
	push smainhero
	ret
	end method
	method setmainhero
	localstring $1
	pop $1
	push $1
	pop smainhero
	end method
	method ismainhero
	localstring $1
	pop $1
	push smainhero
	push $1
	pop $b
	popax
	cmp $a,$b
	je l1464
	push 0
	jmp l1465
l1464:
	push 1
l1465:
	popax
	cmp $a,0
	je l1466
	push 1
	ret
	jmp l1463
l1466:
l1463:
	push 0
	ret
	end method
	method setactbeh
	localstring $1
	pop $1
	push $1
	pop sactbeh
	end method
	method getactbeh
	push sactbeh
	ret
	end method
	method advgetlock
	push bmslock
	ret
	end method
	method advmslock
	push 1
	pop bmslock
	end method
	method advmsunlock
	push 0
	pop bmslock
	end method
	method advmssetlock
	localint $1
	pop $1
	push $1
	pop bmslock
	end method
	method setusetool
	localstring $1
	pop $1
	push $1
	pop _susetool
	end method
	method getusetool
	push _susetool
	ret
	end method
	method playbeh
	localstring $1
	pop $1
	push $1
	push "null"
	cthis playbehfin
	end method
	method playbehif
	localstring $1
	pop $1
	push $1
	cthis behexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1468
	push 0
	jmp l1469
l1468:
	push 1
l1469:
	popax
	cmp $a,0
	je l1470
	push $1
	push "null"
	cthis playbehfin
	push 1
	ret
	jmp l1467
l1470:
l1467:
	push 0
	ret
	end method
	method playbehfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	push $2
	cthis playbehobfin
	end method
	method playpostinit
	localstring $1
	pop $1
	push $1
	call gameapi,getgamename
	push "postinit"
	cthis playbehobfinif
	ret
	end method
	method playbehobfinif
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis behexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1472
	push 0
	jmp l1473
l1472:
	push 1
l1473:
	popax
	cmp $a,0
	je l1474
	push $1
	push $2
	push $3
	cthis playbehobfin
	push 1
	ret
	jmp l1471
l1474:
l1471:
	push 0
	ret
	end method
	method playbehobfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis getbeh
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],playfin
	end method
	method playnewgame
	localstring $1
	pop $1
	push "game"
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	call gameapi,play
	end method
	method getheroloader
	localstring $1
	pop $1
	push _slhpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,varexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1476
	push 0
	jmp l1477
l1476:
	push 1
l1477:
	popax
	cmp $a,0
	je l1478
	push $1
	ret
	jmp l1475
l1478:
	push "null"
	ret
l1475:
	end method
	method gethero
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],gethero
	ret
	end method
	method getplaystart
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getplaystart
	ret
	end method
	method getplaystop
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],getplaystop
	ret
	end method
	method advanstand
	localstring $1
	pop $1
	localstring $2
	push _spathpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1480
	push 0
	jmp l1481
l1480:
	push 1
l1481:
	popax
	cmp $a,0
	je l1482
	push $2
	popax
	spush $a
	spop $a
	call [$a],iswalking
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1484
	push 0
	jmp l1485
l1484:
	push 1
l1485:
	popax
	cmp $a,0
	je l1486
	push $2
	popax
	spush $a
	spop $a
	call [$a],stand
	jmp l1483
l1486:
l1483:
	jmp l1479
l1482:
l1479:
	end method
	method analizeanopts
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $7
	localreal $8
	localstring $9
	localstring $10
	localint $11
	push 0
	pop $11
	localint $12
	push 0
	pop $12
l1487:
	push $3
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l1488
	push 0
	jmp l1489
l1488:
	push 1
l1489:
	popax
	cmp $a,0
	je l1490
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $9
	push "-stt"
	pop $b
	popax
	cmp $a,$b
	je l1492
	push 0
	jmp l1493
l1492:
	push 1
l1493:
	popax
	cmp $a,0
	je l1494
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	jmp l1491
l1494:
	push $9
	push "-stp"
	pop $b
	popax
	cmp $a,$b
	je l1496
	push 0
	jmp l1497
l1496:
	push 1
l1497:
	popax
	cmp $a,0
	je l1498
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $12
	add $3,1
	pop $3
	jmp l1495
l1498:
	push $9
	push "-wav"
	pop $b
	popax
	cmp $a,$b
	je l1500
	push 0
	jmp l1501
l1500:
	push 1
l1501:
	popax
	cmp $a,0
	je l1502
	push _slhpref
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	pop $9
	add $3,1
	pop $3
	push $9
	popax
	spush $a
	spop $e
	new classloadedhero,[$e]
	push $9
	popax
	spush $a
	push $5
	spop $a
	call [$a],sethero
	push $6
	popax
	spush $a
	push $9
	spop $a
	call [$a],add
	jmp l1499
l1502:
	push $9
	push "-path"
	pop $b
	popax
	cmp $a,$b
	je l1504
	push 0
	jmp l1505
l1504:
	push 1
l1505:
	popax
	cmp $a,0
	je l1506
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push _spathpref
	push $5
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	push $5
	push $9
	push $7
	cthis newclpathfcopy
	push $10
	popax
	spush $a
	spop $a
	call [$a],prepareforhero
	push $10
	push "look"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	popax
	spush $a
	spop $e
	new classherolooker,[$e]
	push $9
	popax
	spush $a
	push $5
	spop $a
	call [$a],link
	push $10
	push "use"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	popax
	spush $a
	spop $e
	new classherouser,[$e]
	push $9
	popax
	spush $a
	push $5
	spop $a
	call [$a],link
	push $10
	push "take"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	popax
	spush $a
	spop $e
	new classherotaker,[$e]
	push $9
	popax
	spush $a
	push $5
	spop $a
	call [$a],link
	jmp l1503
l1506:
	push $9
	push "-ft"
	pop $b
	popax
	cmp $a,$b
	je l1508
	push 0
	jmp l1509
l1508:
	push 1
l1509:
	popax
	cmp $a,0
	je l1510
	push _spathpref
	push $5
	pop $b
	popax
	add $a,$b
	pop $10
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push $10
	popax
	spush $a
	spop $a
	call [$a],linkfilter
	push $10
	popax
	spush $a
	push $7
	spop $a
	call [$a],setzsize
	push $10
	popax
	spush $a
	push $8
	spop $a
	call [$a],setscalepower
	jmp l1507
l1510:
	push $1
	push $2
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push $5
	cthis analizeaninstr
	pop $3
l1507:
l1503:
l1499:
l1495:
l1491:
	jmp l1487
l1490:
	push $6
	popax
	spush $a
	push "setplaystart"
	push $11
	spop $a
	call [$a],evali
	push $6
	popax
	spush $a
	push "setplaystop"
	push $12
	spop $a
	call [$a],evali
	push $6
	popax
	spush $a
	spop $a
	call [$a],free
	end method
	method setasadvanima
	cthis getname
	push "cadvherofinish"
	call modulehero,setashero
	end method
	method analizebut
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	localint $8
	localint $9
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	pop $6
	add $4,1
	pop $4
	push $6
	call grbuts,add
	push $6
	push $5
	push 1
	call $1,strsube
	call modadvbut,setasbutton
	push $6
	popax
	spush $a
	push $6
	popax
	spush $a
	spop $a
	call [$a],getcx
	push $6
	popax
	spush $a
	spop $a
	call [$a],getcy
	spop $a
	call [$a],setadvbutpos
l1511:
	push $4
	push $2
	popax
	spush $a
	push $3
	spop $a
	call [$a],getcolsno
	pop $b
	popax
	cmp $a,$b
	jl l1512
	push 0
	jmp l1513
l1512:
	push 1
l1513:
	popax
	cmp $a,0
	je l1514
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $5
	push "-pos"
	pop $b
	popax
	cmp $a,$b
	je l1516
	push 0
	jmp l1517
l1516:
	push 1
l1517:
	popax
	cmp $a,0
	je l1518
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	pop $8
	add $4,1
	pop $4
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $6
	popax
	spush $a
	push $8
	push $9
	spop $a
	call [$a],setadvbutpos
	jmp l1515
l1518:
	push $5
	push "-bs1"
	pop $b
	popax
	cmp $a,$b
	je l1520
	push 0
	jmp l1521
l1520:
	push 1
l1521:
	popax
	cmp $a,0
	je l1522
	push $6
	popax
	spush $a
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase1
	add $4,1
	pop $4
	jmp l1519
l1522:
	push $5
	push "-bs2"
	pop $b
	popax
	cmp $a,$b
	je l1524
	push 0
	jmp l1525
l1524:
	push 1
l1525:
	popax
	cmp $a,0
	je l1526
	push $6
	popax
	spush $a
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase2
	add $4,1
	pop $4
	jmp l1523
l1526:
	push $5
	push "-dir"
	pop $b
	popax
	cmp $a,$b
	je l1528
	push 0
	jmp l1529
l1528:
	push 1
l1529:
	popax
	cmp $a,0
	je l1530
	push $6
	popax
	spush $a
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutdir
	add $4,1
	pop $4
	jmp l1527
l1530:
	push $5
	push "-doors"
	pop $b
	popax
	cmp $a,$b
	je l1532
	push 0
	jmp l1533
l1532:
	push 1
l1533:
	popax
	cmp $a,0
	je l1534
	push $6
	popax
	spush $a
	push "doors"
	spop $a
	call [$a],setbuttyp
	jmp l1531
l1534:
	push $5
	push "-item"
	pop $b
	popax
	cmp $a,$b
	je l1536
	push 0
	jmp l1537
l1536:
	push 1
l1537:
	popax
	cmp $a,0
	je l1538
	push $6
	popax
	spush $a
	push "item"
	spop $a
	call [$a],setbuttyp
	jmp l1535
l1538:
l1535:
l1531:
l1527:
l1523:
l1519:
l1515:
	jmp l1511
l1514:
	end method
	method loadadventure
	localstring $1
	pop $1
	localstring $2
	call clcadv,get
	pop $2
	localstring $3
	push "grpers"
	call clcadv,size
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	push $1
	cthis newdbscript
	localint $4
	push $2
	popax
	spush $a
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localstring $10
	localstring $11
	localint $12
	localint $13
	localint $14
	localreal $15
	localreal $16
	localstring $17
	push ""
	pop $17
	push $3
	popax
	spush $a
	spop $e
	new gmobjvec,[$e]
	localint $18
	push 0
	pop $18
l1539:
	push $18
	push $4
	pop $b
	popax
	cmp $a,$b
	jl l1540
	push 0
	jmp l1541
l1540:
	push 1
l1541:
	popax
	cmp $a,0
	je l1542
	jmp l1544
l1543:
	add $18,1
	pop $18
	jmp l1539
l1544:
	push 0
	pop $5
	push $2
	popax
	spush $a
	push $18
	spop $a
	call [$a],getcolsno
	pop $6
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push "setpath:"
	pop $b
	popax
	cmp $a,$b
	je l1546
	push 0
	jmp l1547
l1546:
	push 1
l1547:
	popax
	cmp $a,0
	je l1548
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $17
	cthis setgraphpath
	jmp l1545
l1548:
	push $9
	push "nopath:"
	pop $b
	popax
	cmp $a,$b
	je l1550
	push 0
	jmp l1551
l1550:
	push 1
l1551:
	popax
	cmp $a,0
	je l1552
	push ""
	pop $17
	push $17
	cthis setgraphpath
	jmp l1549
l1552:
	push $9
	push "sndpath:"
	pop $b
	popax
	cmp $a,$b
	je l1554
	push 0
	jmp l1555
l1554:
	push 1
l1555:
	popax
	cmp $a,0
	je l1556
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	cthis setwavpath
	jmp l1553
l1556:
	push $9
	push "hero:"
	pop $b
	popax
	cmp $a,$b
	je l1558
	push 0
	jmp l1559
l1558:
	push 1
l1559:
	push $9
	push "an:"
	pop $b
	popax
	cmp $a,$b
	je l1560
	push 0
	jmp l1561
l1560:
	push 1
l1561:
	popax
	pop $b
	or $a,$b
	popax
	cmp $a,0
	je l1562
	cthis getgraphpath
	pop $17
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	push "hero:"
	pop $b
	popax
	cmp $a,$b
	je l1564
	push 0
	jmp l1565
l1564:
	push 1
l1565:
	popax
	cmp $a,0
	je l1566
	push $10
	push "-path"
	pop $b
	popax
	cmp $a,$b
	je l1568
	push 0
	jmp l1569
l1568:
	push 1
l1569:
	popax
	cmp $a,0
	je l1570
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $10
	cthis setgraphpath
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	jmp l1567
l1570:
	push "heropath:"
	push 1
	call modadv,get
	cthis setgraphpath
l1567:
	jmp l1563
l1566:
l1563:
	push 0
	push 4
	call $10,gete
	push ".pyz"
	pop $b
	popax
	cmp $a,$b
	je l1572
	push 0
	jmp l1573
l1572:
	push 1
l1573:
	popax
	cmp $a,0
	je l1574
	push $11
	push $10
	push 0
	cthis newanima
	jmp l1571
l1574:
	push $10
	push $11
	cthis copyanima
l1571:
	push $17
	cthis setgraphpath
	push $11
	popax
	spush $a
	spop $a
	call [$a],setasadvanima
	push $9
	push "hero:"
	pop $b
	popax
	cmp $a,$b
	je l1576
	push 0
	jmp l1577
l1576:
	push 1
l1577:
	popax
	cmp $a,0
	je l1578
	push $11
	call modulehero,buildheroframe
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	popax
	spush $a
	spop $e
	new classadvpocket,[$e]
	push $9
	call grbuts,add
	push $9
	call grmsmove,add
	push $9
	call grmslclick,add
	push $9
	push $11
	push "pocket"
	call modadvbut,setasbutton
	jmp l1575
l1578:
l1575:
	push $2
	push $18
	push $5
	push $6
	push $11
	push $3
	cthis analizeanopts
	jmp l1557
l1562:
	push $9
	push "anaac:"
	pop $b
	popax
	cmp $a,$b
	je l1580
	push 0
	jmp l1581
l1580:
	push 1
l1581:
	popax
	cmp $a,0
	je l1582
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push "-mask"
	pop $b
	popax
	cmp $a,$b
	je l1584
	push 0
	jmp l1585
l1584:
	push 1
l1585:
	popax
	cmp $a,0
	je l1586
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	popax
	spush $a
	spop $e
	new gmmaskvec,[$e]
	jmp l1583
l1586:
	push $9
	popax
	spush $a
	spop $e
	new gmimgvec,[$e]
l1583:
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $10
	push $9
	push $9
	cthis newanactionsgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1579
l1582:
	push $9
	push "anaf:"
	pop $b
	popax
	cmp $a,$b
	je l1588
	push 0
	jmp l1589
l1588:
	push 1
l1589:
	popax
	cmp $a,0
	je l1590
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	popax
	spush $a
	spop $e
	new gmimgvec,[$e]
	push $10
	push $9
	push $9
	cthis newanfrbyactgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1587
l1590:
	push $9
	push "anfac:"
	pop $b
	popax
	cmp $a,$b
	je l1592
	push 0
	jmp l1593
l1592:
	push 1
l1593:
	popax
	cmp $a,0
	je l1594
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push "-mask"
	pop $b
	popax
	cmp $a,$b
	je l1596
	push 0
	jmp l1597
l1596:
	push 1
l1597:
	popax
	cmp $a,0
	je l1598
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	popax
	spush $a
	spop $e
	new gmmaskvec,[$e]
	jmp l1595
l1598:
	push $9
	popax
	spush $a
	spop $e
	new gmimgvec,[$e]
l1595:
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $10
	push $9
	push $10
	popax
	spush $a
	push $11
	spop $a
	call [$a],actionnr
	push $9
	cthis newanframesgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1591
l1594:
	push $9
	push "anac:"
	pop $b
	popax
	cmp $a,$b
	je l1600
	push 0
	jmp l1601
l1600:
	push 1
l1601:
	popax
	cmp $a,0
	je l1602
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $10
	push $9
	push $11
	cthis copyanimaact
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],dbchecknext
	push "-adv"
	pop $b
	popax
	cmp $a,$b
	je l1604
	push 0
	jmp l1605
l1604:
	push 1
l1605:
	popax
	cmp $a,0
	je l1606
	add $5,1
	pop $5
	push $9
	popax
	spush $a
	spop $a
	call [$a],setasadvanima
	jmp l1603
l1606:
l1603:
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1599
l1602:
	push $9
	push "anf:"
	pop $b
	popax
	cmp $a,$b
	je l1608
	push 0
	jmp l1609
l1608:
	push 1
l1609:
	popax
	cmp $a,0
	je l1610
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $10
	push $9
	cthis copyanima
	push $9
	popax
	spush $a
	push $11
	push $7
	spop $a
	call [$a],setframe
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],dbchecknext
	push "-adv"
	pop $b
	popax
	cmp $a,$b
	je l1612
	push 0
	jmp l1613
l1612:
	push 1
l1613:
	popax
	cmp $a,0
	je l1614
	add $5,1
	pop $5
	push $9
	popax
	spush $a
	spop $a
	call [$a],setasadvanima
	jmp l1611
l1614:
l1611:
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1607
l1610:
	push $9
	push "behfile:"
	pop $b
	popax
	cmp $a,$b
	je l1616
	push 0
	jmp l1617
l1616:
	push 1
l1617:
	popax
	cmp $a,0
	je l1618
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	cthis loadbehaviours
	add $5,1
	pop $5
	jmp l1615
l1618:
	push $9
	push "include:"
	pop $b
	popax
	cmp $a,$b
	je l1620
	push 0
	jmp l1621
l1620:
	push 1
l1621:
	popax
	cmp $a,0
	je l1622
	cthis getgraphpath
	pop $17
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	push "-path"
	pop $b
	popax
	cmp $a,$b
	je l1624
	push 0
	jmp l1625
l1624:
	push 1
l1625:
	popax
	cmp $a,0
	je l1626
	push $2
	popax
	spush $a
	push $18
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],get
	cthis setgraphpath
	push 2
	popax
	add $5,$a
	pop $5
	jmp l1623
l1626:
l1623:
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	cthis loadadventure
	push $17
	cthis setgraphpath
	add $5,1
	pop $5
	jmp l1619
l1622:
	push $9
	push "walkqueue:"
	pop $b
	popax
	cmp $a,$b
	je l1628
	push 0
	jmp l1629
l1628:
	push 1
l1629:
	popax
	cmp $a,0
	je l1630
l1631:
	push $5
	push $6
	pop $b
	popax
	cmp $a,$b
	jl l1632
	push 0
	jmp l1633
l1632:
	push 1
l1633:
	popax
	cmp $a,0
	je l1634
	push _spathpref
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call clwalkq,add
	add $5,1
	pop $5
	jmp l1631
l1634:
	jmp l1627
l1630:
	push $9
	push "font:"
	pop $b
	popax
	cmp $a,$b
	je l1636
	push 0
	jmp l1637
l1636:
	push 1
l1637:
	popax
	cmp $a,0
	je l1638
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $9
	popax
	spush $a
	spop $e
	new font,[$e]
	push $9
	popax
	spush $a
	push $10
	push $7
	spop $a
	call [$a],load
	jmp l1635
l1638:
	push $9
	push "bkg:"
	pop $b
	popax
	cmp $a,$b
	je l1640
	push 0
	jmp l1641
l1640:
	push 1
l1641:
	popax
	cmp $a,0
	je l1642
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	cthis csetbkg
	push $2
	push $18
	push $5
	push "imgbkg"
	cthis analizeaninstr
	pop $5
	jmp l1639
l1642:
	push $9
	push "img:"
	pop $b
	popax
	cmp $a,$b
	je l1644
	push 0
	jmp l1645
l1644:
	push 1
l1645:
	popax
	cmp $a,0
	je l1646
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $9
	push $10
	push $7
	cthis newimg
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1643
l1646:
	push $9
	push "but:"
	pop $b
	popax
	cmp $a,$b
	je l1648
	push 0
	jmp l1649
l1648:
	push 1
l1649:
	push $9
	push "doors:"
	pop $b
	popax
	cmp $a,$b
	je l1650
	push 0
	jmp l1651
l1650:
	push 1
l1651:
	popax
	pop $b
	or $a,$b
	push $9
	push "item:"
	pop $b
	popax
	cmp $a,$b
	je l1652
	push 0
	jmp l1653
l1652:
	push 1
l1653:
	popax
	pop $b
	or $a,$b
	popax
	cmp $a,0
	je l1654
	push $9
	push $2
	push $18
	push $5
	cthis analizebut
	jmp l1647
l1654:
	push $9
	push "camera:"
	pop $b
	popax
	cmp $a,$b
	je l1656
	push 0
	jmp l1657
l1656:
	push 1
l1657:
	popax
	cmp $a,0
	je l1658
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $16
	add $5,1
	pop $5
	push $15
	push $16
	call clcamera,scalemodifiers
l1659:
	push $5
	push $6
	pop $b
	popax
	cmp $a,$b
	jl l1660
	push 0
	jmp l1661
l1660:
	push 1
l1661:
	popax
	cmp $a,0
	je l1662
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push "-size"
	pop $b
	popax
	cmp $a,$b
	je l1664
	push 0
	jmp l1665
l1664:
	push 1
l1665:
	popax
	cmp $a,0
	je l1666
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $7
	push $8
	call clcamera,setborders
	jmp l1663
l1666:
	push $9
	push "-center"
	pop $b
	popax
	cmp $a,$b
	je l1668
	push 0
	jmp l1669
l1668:
	push 1
l1669:
	popax
	cmp $a,0
	je l1670
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $7
	push $8
	call clcamera,setcenter
	jmp l1667
l1670:
	push $9
	push "-sizebg"
	pop $b
	popax
	cmp $a,$b
	je l1672
	push 0
	jmp l1673
l1672:
	push 1
l1673:
	popax
	cmp $a,0
	je l1674
	call imgbkg,getw
	call imgbkg,geth
	call clcamera,setborders
	jmp l1671
l1674:
l1671:
l1667:
l1663:
	jmp l1659
l1662:
	jmp l1655
l1658:
	push $9
	push "actor:"
	pop $b
	popax
	cmp $a,$b
	je l1676
	push 0
	jmp l1677
l1676:
	push 1
l1677:
	popax
	cmp $a,0
	je l1678
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	call clcamera,setactor
	add $5,1
	pop $5
	jmp l1675
l1678:
	push $9
	push "bgr:"
	pop $b
	popax
	cmp $a,$b
	je l1680
	push 0
	jmp l1681
l1680:
	push 1
l1681:
	popax
	cmp $a,0
	je l1682
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $16
	add $5,1
	pop $5
	push $9
	popax
	spush $a
	spop $e
	new classbgplan,[$e]
	push $9
	push $15
	push $16
	call clcamera,addbgr
	jmp l1679
l1682:
	push $9
	push "pathfinder:"
	pop $b
	popax
	cmp $a,$b
	je l1684
	push 0
	jmp l1685
l1684:
	push 1
l1685:
	popax
	cmp $a,0
	je l1686
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push 0
	push 3
	call $10,gete
	push "ptf"
	pop $b
	popax
	cmp $a,$b
	jne l1688
	push 0
	jmp l1689
l1688:
	push 1
l1689:
	popax
	cmp $a,0
	je l1690
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	popax
	spush $a
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	jmp l1687
l1690:
	push 20
	pop $7
	push 20
	pop $8
l1687:
	push $9
	push $10
	push $7
	push $8
	cthis newpathf
	jmp l1683
l1686:
l1683:
l1679:
l1675:
l1655:
l1647:
l1643:
l1639:
l1635:
l1627:
l1619:
l1615:
l1607:
l1599:
l1591:
l1587:
l1579:
l1557:
l1553:
l1549:
l1545:
	jmp l1543
l1542:
	end method
	method behrewind
	push sactbeh
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1692
	push 0
	jmp l1693
l1692:
	push 1
l1693:
	popax
	cmp $a,0
	je l1694
	push sactbeh
	popax
	spush $a
	spop $a
	call [$a],rewind
	jmp l1691
l1694:
l1691:
	end method
	method behplaying
	push sactbeh
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1696
	push 0
	jmp l1697
l1696:
	push 1
l1697:
	popax
	cmp $a,0
	je l1698
	push 1
	ret
	jmp l1695
l1698:
l1695:
	push 0
	ret
	end method
	method behexist
	localstring $1
	pop $1
	push $1
	cthis getbeh
	call engine,varexist
	ret
	end method
	method getbeh
	localstring $1
	pop $1
	push _sbeh
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method newbehname
	localstring $1
	push _sbeh
	push "_"
	pop $b
	popax
	add $a,$b
	push iidbeh
	pop $b
	popax
	add $a,$b
	pop $1
	add iidbeh,1
	pop iidbeh
	push $1
	ret
	end method
	method newbeh
	localstring $1
	cthis newbehname
	pop $1
	push $1
	popax
	spush $a
	spop $e
	new classbehhero,[$e]
	push $1
	ret
	end method
	method loadbeh
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $9
	localstring $10
	localstring $11
	localstring $12
	localint $13
	push $5
	popax
	spush $a
	spop $a
	call [$a],getblock
	pop $13
	localint $14
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	cthis newbeh
	pop $10
	localint $15
	localint $16
	push $9
	push "call:"
	pop $b
	popax
	cmp $a,$b
	je l1700
	push 0
	jmp l1701
l1700:
	push 1
l1701:
	popax
	cmp $a,0
	je l1702
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	popax
	spush $a
	push $9
	cthis getbeh
	spop $a
	call [$a],setascaller
	jmp l1699
l1702:
	push $9
	push "walk:"
	pop $b
	popax
	cmp $a,$b
	je l1704
	push 0
	jmp l1705
l1704:
	push 1
l1705:
	popax
	cmp $a,0
	je l1706
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	localint $17
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $17
	add $4,1
	pop $4
	localint $18
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $18
	add $4,1
	pop $4
	push $10
	popax
	spush $a
	push _spathpref
	push $9
	pop $b
	popax
	add $a,$b
	push $17
	push $18
	spop $a
	call [$a],setaswalker
	jmp l1703
l1706:
	push $9
	push "game:"
	pop $b
	popax
	cmp $a,$b
	je l1708
	push 0
	jmp l1709
l1708:
	push 1
l1709:
	popax
	cmp $a,0
	je l1710
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	popax
	spush $a
	push $9
	spop $a
	call [$a],setasnewgamer
	jmp l1707
l1710:
	push $9
	push "ref:"
	pop $b
	popax
	cmp $a,$b
	je l1712
	push 0
	jmp l1713
l1712:
	push 1
l1713:
	popax
	cmp $a,0
	je l1714
	push "_"
	push iidbeh
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $4
	cthis buildbeh
	pop $4
	push $10
	popax
	spush $a
	cthis newbehname
	spop $a
	call [$a],setascaller
	jmp l1711
l1714:
	push $9
	push "anplay:"
	pop $b
	popax
	cmp $a,$b
	je l1716
	push 0
	jmp l1717
l1716:
	push 1
l1717:
	popax
	cmp $a,0
	je l1718
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	popax
	spush $a
	push $9
	push $11
	spop $a
	call [$a],setasanplayer
	jmp l1715
l1718:
	push $9
	push "anorder:"
	pop $b
	popax
	cmp $a,$b
	je l1720
	push 0
	jmp l1721
l1720:
	push 1
l1721:
	popax
	cmp $a,0
	je l1722
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	popax
	spush $a
	push $1
	push $2
	push $4
	push $11
	spop $a
	call [$a],setasanorder
	push $1
	push $2
	push $4
	push "null"
	cthis analizeaninstr
	pop $4
	jmp l1719
l1722:
	push $9
	push "sndbg:"
	pop $b
	popax
	cmp $a,$b
	je l1724
	push 0
	jmp l1725
l1724:
	push 1
l1725:
	popax
	cmp $a,0
	je l1726
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	popax
	spush $a
	push $11
	spop $a
	call [$a],setassndbg
	jmp l1723
l1726:
	push $9
	push "sndplay:"
	pop $b
	popax
	cmp $a,$b
	je l1728
	push 0
	jmp l1729
l1728:
	push 1
l1729:
	popax
	cmp $a,0
	je l1730
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	popax
	spush $a
	push $9
	spop $a
	call [$a],setassndplayer
	jmp l1727
l1730:
	push $9
	push "wait:"
	pop $b
	popax
	cmp $a,$b
	je l1732
	push 0
	jmp l1733
l1732:
	push 1
l1733:
	popax
	cmp $a,0
	je l1734
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $15
	add $4,1
	pop $4
	push $10
	popax
	spush $a
	push $15
	spop $a
	call [$a],setaswaiter
	jmp l1731
l1734:
	push $9
	push "read:"
	pop $b
	popax
	cmp $a,$b
	je l1736
	push 0
	jmp l1737
l1736:
	push 1
l1737:
	popax
	cmp $a,0
	je l1738
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $15
	add $4,1
	pop $4
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $16
	add $4,1
	pop $4
	push "auto"
	pop $11
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],getcolsno
	push $4
	pop $b
	popax
	cmp $a,$b
	ja l1740
	push 0
	jmp l1741
l1740:
	push 1
l1741:
	popax
	cmp $a,0
	je l1742
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	push $11
	push "-dir"
	pop $b
	popax
	cmp $a,$b
	je l1744
	push 0
	jmp l1745
l1744:
	push 1
l1745:
	popax
	cmp $a,0
	je l1746
	add $4,1
	pop $4
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	jmp l1743
l1746:
l1743:
	jmp l1739
l1742:
l1739:
	push $10
	popax
	spush $a
	push $9
	push $15
	push $16
	push $11
	spop $a
	call [$a],setasreader
	jmp l1735
l1738:
	push "_"
	call $9,strgetto
	pop $12
	push $12
	cthis getheroloader
	pop $11
	push $11
	push "null"
	pop $b
	popax
	cmp $a,$b
	je l1748
	push 0
	jmp l1749
l1748:
	push 1
l1749:
	popax
	cmp $a,0
	je l1750
	push "loadbeh error: no hero linked to "
	push $12
	pop $b
	popax
	add $a,$b
	call engine,print
	ret
	jmp l1747
l1750:
	localint $19
	push $11
	popax
	spush $a
	spop $a
	call [$a],getplaystart
	pop $19
	localint $20
	push $11
	popax
	spush $a
	spop $a
	call [$a],getplaystop
	pop $20
	localstring $21
	push "auto"
	pop $21
	localstring $22
	push "talk:"
	push 1
	call modadv,get
	pop $22
	localint $23
	push 1
	pop $23
	push 1
	pop $14
	push $4
	push $3
	pop $b
	popax
	cmp $a,$b
	jae l1752
	push 0
	jmp l1753
l1752:
	push 1
l1753:
	popax
	cmp $a,0
	je l1754
	push 0
	pop $14
	jmp l1751
l1754:
l1751:
l1755:
	push $14
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1756
	push 0
	jmp l1757
l1756:
	push 1
l1757:
	popax
	cmp $a,0
	je l1758
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	add $4,1
	pop $4
	push $12
	push "-stt"
	pop $b
	popax
	cmp $a,$b
	je l1760
	push 0
	jmp l1761
l1760:
	push 1
l1761:
	popax
	cmp $a,0
	je l1762
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $19
	add $4,1
	pop $4
	jmp l1759
l1762:
	push $12
	push "-stp"
	pop $b
	popax
	cmp $a,$b
	je l1764
	push 0
	jmp l1765
l1764:
	push 1
l1765:
	popax
	cmp $a,0
	je l1766
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $20
	add $4,1
	pop $4
	jmp l1763
l1766:
	push $12
	push "-base"
	pop $b
	popax
	cmp $a,$b
	je l1768
	push 0
	jmp l1769
l1768:
	push 1
l1769:
	popax
	cmp $a,0
	je l1770
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $22
	add $4,1
	pop $4
	jmp l1767
l1770:
	push $12
	push "-r"
	pop $b
	popax
	cmp $a,$b
	je l1772
	push 0
	jmp l1773
l1772:
	push 1
l1773:
	popax
	cmp $a,0
	je l1774
	push 1
	pop $23
	jmp l1771
l1774:
	push $12
	push "-nr"
	pop $b
	popax
	cmp $a,$b
	je l1776
	push 0
	jmp l1777
l1776:
	push 1
l1777:
	popax
	cmp $a,0
	je l1778
	push 0
	pop $23
	jmp l1775
l1778:
	push $12
	push "-dir"
	pop $b
	popax
	cmp $a,$b
	je l1780
	push 0
	jmp l1781
l1780:
	push 1
l1781:
	popax
	cmp $a,0
	je l1782
	push $1
	popax
	spush $a
	push $2
	push $4
	spop $a
	call [$a],get
	pop $21
	add $4,1
	pop $4
	jmp l1779
l1782:
	push 0
	pop $14
	sub $4,1
	pop $4
l1779:
l1775:
l1771:
l1767:
l1763:
l1759:
	push $14
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1784
	push 0
	jmp l1785
l1784:
	push 1
l1785:
	push $4
	push $3
	pop $b
	popax
	cmp $a,$b
	jae l1786
	push 0
	jmp l1787
l1786:
	push 1
l1787:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l1788
	push 0
	pop $14
	jmp l1783
l1788:
l1783:
	jmp l1755
l1758:
	push $10
	popax
	spush $a
	push $11
	popax
	spush $a
	spop $a
	call [$a],gethero
	push $9
	push $22
	push $23
	push $19
	push $20
	push $21
	spop $a
	call [$a],setastalker
l1747:
l1735:
l1731:
l1727:
l1723:
l1719:
l1715:
l1711:
l1707:
l1703:
l1699:
	push $5
	popax
	spush $a
	push $10
	spop $a
	call [$a],addtostarter
	push $7
	push 0
	pop $b
	popax
	cmp $a,$b
	je l1790
	push 0
	jmp l1791
l1790:
	push 1
l1791:
	popax
	cmp $a,0
	je l1792
	push $6
	popax
	spush $a
	push $10
	spop $a
	call [$a],setflags
	push $10
	popax
	spush $a
	push $5
	push $13
	push $8
	spop $a
	call [$a],addflags
	jmp l1789
l1792:
	push $6
	popax
	spush $a
	push "null"
	spop $a
	call [$a],setflags
	push $10
	popax
	spush $a
	push $5
	push $13
	push 0
	spop $a
	call [$a],addflags
l1789:
	push $4
	push $3
	pop $b
	popax
	cmp $a,$b
	jl l1794
	push 0
	jmp l1795
l1794:
	push 1
l1795:
	popax
	cmp $a,0
	je l1796
	push $1
	push $2
	push $3
	push $4
	push $5
	push $10
	push $7
	push $8
	cthis loadbeh
	jmp l1793
l1796:
l1793:
	end method
	method buildbeh
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	call dbmacros,findbyrow
	pop $5
	push $5
	push 0
	pop $b
	popax
	cmp $a,$b
	jl l1798
	push 0
	jmp l1799
l1798:
	push 1
l1799:
	popax
	cmp $a,0
	je l1800
	push "no such macro: "
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call engine,print
	push 1
	popax
	sub 0,$a
	ret
	jmp l1797
l1800:
l1797:
	push 2
	popax
	add $4,$a
	pop $4
	localint $6
	push $2
	popax
	spush $a
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	localstring $7
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	call _vecarg,free
l1801:
	push $7
	push ")"
	pop $b
	popax
	cmp $a,$b
	jne l1802
	push 0
	jmp l1803
l1802:
	push 1
l1803:
	popax
	cmp $a,0
	je l1804
	push $7
	call _vecarg,add
	push $2
	popax
	spush $a
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	jmp l1801
l1804:
	localint $8
	push $5
	call dbmacros,getcolsno
	pop $8
	localint $9
	push $2
	popax
	spush $a
	push $6
	push $1
	spop $a
	call [$a],add
	localint $10
	push 1
	pop $10
l1805:
	push $10
	push $8
	pop $b
	popax
	cmp $a,$b
	jl l1806
	push 0
	jmp l1807
l1806:
	push 1
l1807:
	popax
	cmp $a,0
	je l1808
	jmp l1810
l1809:
	add $10,1
	pop $10
	jmp l1805
l1810:
	push $5
	push $10
	call dbmacros,get
	pop $7
	push 0
	push 1
	call $7,getb
	push "$"
	pop $b
	popax
	cmp $a,$b
	je l1812
	push 0
	jmp l1813
l1812:
	push 1
l1813:
	popax
	cmp $a,0
	je l1814
	push 1
	push 10
	call $7,getb
	pop $9
	push $2
	popax
	spush $a
	push $6
	push $9
	push 1
	pop $b
	popax
	sub $a,$b
	call _vecarg,get
	spop $a
	call [$a],add
	jmp l1811
l1814:
	push $2
	popax
	spush $a
	push $6
	push $7
	spop $a
	call [$a],add
l1811:
	jmp l1809
l1808:
	push $4
	ret
	end method
	method loadbehaviours
	localstring $1
	pop $1
	localstring $2
	call clcbeh,get
	pop $2
	push $2
	push $1
	cthis newdbscript
	localint $3
	localint $4
	localstring $5
	localstring $6
	localstring $7
	localstring $8
	localint $9
	localint $10
	localint $11
	localint $12
	localint $13
	localint $14
	localint $15
	push 0
	pop $15
l1815:
	push $15
	push $2
	popax
	spush $a
	spop $a
	call [$a],getrowsno
	pop $b
	popax
	cmp $a,$b
	jl l1816
	push 0
	jmp l1817
l1816:
	push 1
l1817:
	popax
	cmp $a,0
	je l1818
	jmp l1820
l1819:
	add $15,1
	pop $15
	jmp l1815
l1820:
	push 0
	pop $4
	push $2
	popax
	spush $a
	push $15
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $5
	push "macro:"
	pop $b
	popax
	cmp $a,$b
	je l1822
	push 0
	jmp l1823
l1822:
	push 1
l1823:
	popax
	cmp $a,0
	je l1824
	push $2
	push $15
	push 1
	call dbmacros,dbaddrowfrom
	jmp l1821
l1824:
	push $5
	push "include:"
	pop $b
	popax
	cmp $a,$b
	je l1826
	push 0
	jmp l1827
l1826:
	push 1
l1827:
	popax
	cmp $a,0
	je l1828
	push $2
	popax
	spush $a
	push $15
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $2
	popax
	spush $a
	push $15
	push $4
	spop $a
	call [$a],get
	pop $6
	add $4,1
	pop $4
	cthis getgraphpath
	pop $7
	push $5
	cthis setgraphpath
	push $6
	cthis loadbehaviours
	push $7
	cthis setgraphpath
	jmp l1825
l1828:
	push $5
	push "build:"
	pop $b
	popax
	cmp $a,$b
	je l1830
	push 0
	jmp l1831
l1830:
	push 1
l1831:
	popax
	cmp $a,0
	je l1832
	push $2
	popax
	spush $a
	push $15
	push $4
	spop $a
	call [$a],get
	push $2
	push $15
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis buildbeh
	pop $4
	jmp l1829
l1832:
	push $2
	popax
	spush $a
	push $15
	spop $a
	call [$a],getcolsno
	pop $3
	push $5
	cthis getbeh
	pop $5
	push $5
	popax
	spush $a
	spop $e
	new classbehhero,[$e]
	push 0
	pop $9
	push 1
	pop $10
	push 0
	pop $11
	push 0
	pop $12
	push 1
	pop $13
	push 0
	pop $14
l1833:
	push $10
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1834
	push 0
	jmp l1835
l1834:
	push 1
l1835:
	popax
	cmp $a,0
	je l1836
	push $2
	popax
	spush $a
	push $15
	push $4
	spop $a
	call [$a],get
	pop $6
	add $4,1
	pop $4
	push $6
	push "-nr"
	pop $b
	popax
	cmp $a,$b
	je l1838
	push 0
	jmp l1839
l1838:
	push 1
l1839:
	popax
	cmp $a,0
	je l1840
	push 0
	pop $9
	jmp l1837
l1840:
	push $6
	push "-1"
	pop $b
	popax
	cmp $a,$b
	je l1842
	push 0
	jmp l1843
l1842:
	push 1
l1843:
	popax
	cmp $a,0
	je l1844
	push 1
	pop $11
	jmp l1841
l1844:
	push $6
	push "-par"
	pop $b
	popax
	cmp $a,$b
	je l1846
	push 0
	jmp l1847
l1846:
	push 1
l1847:
	popax
	cmp $a,0
	je l1848
	push 1
	pop $12
	jmp l1845
l1848:
	push $6
	push "-r"
	pop $b
	popax
	cmp $a,$b
	je l1850
	push 0
	jmp l1851
l1850:
	push 1
l1851:
	popax
	cmp $a,0
	je l1852
	push 1
	pop $9
	jmp l1849
l1852:
	push $6
	push "-nb"
	pop $b
	popax
	cmp $a,$b
	je l1854
	push 0
	jmp l1855
l1854:
	push 1
l1855:
	popax
	cmp $a,0
	je l1856
	push 0
	pop $13
	jmp l1853
l1856:
	push $6
	push "-en"
	pop $b
	popax
	cmp $a,$b
	je l1858
	push 0
	jmp l1859
l1858:
	push 1
l1859:
	popax
	cmp $a,0
	je l1860
	push $2
	popax
	spush $a
	push $15
	push $4
	spop $a
	call [$a],get
	pop $14
	add $4,1
	pop $4
	jmp l1857
l1860:
	push 0
	pop $10
	push $5
	popax
	spush $a
	push $11
	push $9
	push $12
	push $13
	push $14
	spop $a
	call [$a],setasstarter
	push $2
	push $15
	push $3
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	push $5
	push $5
	push $9
	push $12
	cthis loadbeh
l1857:
l1853:
l1849:
l1845:
l1841:
l1837:
	jmp l1833
l1836:
l1829:
l1825:
l1821:
	jmp l1819
l1818:
	end method
	method analizeaninstr
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 1
	pop $5
	push $3
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],getcolsno
	pop $b
	popax
	cmp $a,$b
	jae l1862
	push 0
	jmp l1863
l1862:
	push 1
l1863:
	popax
	cmp $a,0
	je l1864
	push 0
	pop $5
	jmp l1861
l1864:
l1861:
	localint $6
	push 0
	pop $6
	push $4
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l1866
	push 0
	jmp l1867
l1866:
	push 1
l1867:
	popax
	cmp $a,0
	je l1868
	push 1
	pop $6
	push $4
	cthis advanstand
	jmp l1865
l1868:
l1865:
	localint $7
	localint $8
	localstring $9
	localstring $10
l1869:
	push $5
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1870
	push 0
	jmp l1871
l1870:
	push 1
l1871:
	popax
	cmp $a,0
	je l1872
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $10
	push "-z"
	pop $b
	popax
	cmp $a,$b
	je l1874
	push 0
	jmp l1875
l1874:
	push 1
l1875:
	popax
	cmp $a,0
	je l1876
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1878
	push 0
	jmp l1879
l1878:
	push 1
l1879:
	popax
	cmp $a,0
	je l1880
	push $4
	popax
	spush $a
	push $8
	spop $a
	call [$a],setz
	jmp l1877
l1880:
l1877:
	jmp l1873
l1876:
	push $10
	push "-pos"
	pop $b
	popax
	cmp $a,$b
	je l1882
	push 0
	jmp l1883
l1882:
	push 1
l1883:
	popax
	cmp $a,0
	je l1884
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1886
	push 0
	jmp l1887
l1886:
	push 1
l1887:
	popax
	cmp $a,0
	je l1888
	push $4
	popax
	spush $a
	push $7
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push $8
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l1885
l1888:
l1885:
	jmp l1881
l1884:
	push $10
	push "-putgr"
	pop $b
	popax
	cmp $a,$b
	je l1890
	push 0
	jmp l1891
l1890:
	push 1
l1891:
	popax
	cmp $a,0
	je l1892
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1894
	push 0
	jmp l1895
l1894:
	push 1
l1895:
	popax
	cmp $a,0
	je l1896
	push $4
	popax
	spush $a
	spop $a
	call [$a],anputgr
	jmp l1893
l1896:
l1893:
	jmp l1889
l1892:
	push $10
	push "-vis"
	pop $b
	popax
	cmp $a,$b
	je l1898
	push 0
	jmp l1899
l1898:
	push 1
l1899:
	popax
	cmp $a,0
	je l1900
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1902
	push 0
	jmp l1903
l1902:
	push 1
l1903:
	popax
	cmp $a,0
	je l1904
	push $7
	push 0
	pop $b
	popax
	cmp $a,$b
	je l1906
	push 0
	jmp l1907
l1906:
	push 1
l1907:
	popax
	cmp $a,0
	je l1908
	push $4
	popax
	spush $a
	spop $a
	call [$a],hide
	jmp l1905
l1908:
	push $4
	popax
	spush $a
	spop $a
	call [$a],show
l1905:
	jmp l1901
l1904:
l1901:
	jmp l1897
l1900:
	push $10
	push "-dir"
	pop $b
	popax
	cmp $a,$b
	je l1910
	push 0
	jmp l1911
l1910:
	push 1
l1911:
	popax
	cmp $a,0
	je l1912
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1914
	push 0
	jmp l1915
l1914:
	push 1
l1915:
	popax
	cmp $a,0
	je l1916
	push $4
	popax
	spush $a
	spop $a
	call [$a],actionname
	pop $10
	push $4
	popax
	spush $a
	spop $a
	call [$a],framenr
	pop $7
	push $4
	popax
	spush $a
	push 2
	call $10,strsube
	push $9
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],setframe
	jmp l1913
l1916:
l1913:
	jmp l1909
l1912:
	push $10
	push "-play"
	pop $b
	popax
	cmp $a,$b
	je l1918
	push 0
	jmp l1919
l1918:
	push 1
l1919:
	popax
	cmp $a,0
	je l1920
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1922
	push 0
	jmp l1923
l1922:
	push 1
l1923:
	popax
	cmp $a,0
	je l1924
	push $4
	popax
	spush $a
	push $10
	spop $a
	call [$a],splay
	jmp l1921
l1924:
l1921:
	jmp l1917
l1920:
	push $10
	push "-nplay"
	pop $b
	popax
	cmp $a,$b
	je l1926
	push 0
	jmp l1927
l1926:
	push 1
l1927:
	popax
	cmp $a,0
	je l1928
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1930
	push 0
	jmp l1931
l1930:
	push 1
l1931:
	popax
	cmp $a,0
	je l1932
	push $4
	popax
	spush $a
	push $7
	spop $a
	call [$a],nplay
	jmp l1929
l1932:
l1929:
	jmp l1925
l1928:
	push $10
	push "-bgr"
	pop $b
	popax
	cmp $a,$b
	je l1934
	push 0
	jmp l1935
l1934:
	push 1
l1935:
	popax
	cmp $a,0
	je l1936
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1938
	push 0
	jmp l1939
l1938:
	push 1
l1939:
	popax
	cmp $a,0
	je l1940
	push $10
	popax
	spush $a
	push $4
	spop $a
	call [$a],add
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	call engine,varexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1942
	push 0
	jmp l1943
l1942:
	push 1
l1943:
	popax
	cmp $a,0
	je l1944
	push $10
	popax
	spush $a
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
	jmp l1941
l1944:
l1941:
	jmp l1937
l1940:
l1937:
	jmp l1933
l1936:
	push $10
	push "-sc"
	pop $b
	popax
	cmp $a,$b
	je l1946
	push 0
	jmp l1947
l1946:
	push 1
l1947:
	popax
	cmp $a,0
	je l1948
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1950
	push 0
	jmp l1951
l1950:
	push 1
l1951:
	popax
	cmp $a,0
	je l1952
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	call engine,varexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1954
	push 0
	jmp l1955
l1954:
	push 1
l1955:
	popax
	cmp $a,0
	je l1956
	push $10
	popax
	spush $a
	spop $a
	call [$a],scalean
	jmp l1953
l1956:
l1953:
	jmp l1949
l1952:
l1949:
	jmp l1945
l1948:
	push $10
	push "-ssc"
	pop $b
	popax
	cmp $a,$b
	je l1958
	push 0
	jmp l1959
l1958:
	push 1
l1959:
	popax
	cmp $a,0
	je l1960
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1962
	push 0
	jmp l1963
l1962:
	push 1
l1963:
	popax
	cmp $a,0
	je l1964
	call clcamera,setscene
	jmp l1961
l1964:
l1961:
	jmp l1957
l1960:
	push $10
	push "-actor"
	pop $b
	popax
	cmp $a,$b
	je l1966
	push 0
	jmp l1967
l1966:
	push 1
l1967:
	popax
	cmp $a,0
	je l1968
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1970
	push 0
	jmp l1971
l1970:
	push 1
l1971:
	popax
	cmp $a,0
	je l1972
	push $4
	call clcamera,setactor
	jmp l1969
l1972:
l1969:
	jmp l1965
l1968:
	push $10
	push "-mhero"
	pop $b
	popax
	cmp $a,$b
	je l1974
	push 0
	jmp l1975
l1974:
	push 1
l1975:
	popax
	cmp $a,0
	je l1976
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1978
	push 0
	jmp l1979
l1978:
	push 1
l1979:
	popax
	cmp $a,0
	je l1980
	push $10
	cthis setmainhero
	jmp l1977
l1980:
l1977:
	jmp l1973
l1976:
	push $10
	push "-puty"
	pop $b
	popax
	cmp $a,$b
	je l1982
	push 0
	jmp l1983
l1982:
	push 1
l1983:
	popax
	cmp $a,0
	je l1984
	push $1
	popax
	spush $a
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $6
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1986
	push 0
	jmp l1987
l1986:
	push 1
l1987:
	popax
	cmp $a,0
	je l1988
	push $9
	push "resy"
	pop $b
	popax
	cmp $a,$b
	je l1990
	push 0
	jmp l1991
l1990:
	push 1
l1991:
	popax
	cmp $a,0
	je l1992
	push $10
	popax
	spush $a
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],anputy
	jmp l1989
l1992:
	push $10
	popax
	spush $a
	push $9
	spop $a
	call [$a],anputy
l1989:
	jmp l1985
l1988:
l1985:
	jmp l1981
l1984:
	push 0
	pop $5
	sub $3,1
	pop $3
l1981:
l1973:
l1965:
l1957:
l1945:
l1933:
l1925:
l1917:
l1909:
l1897:
l1889:
l1881:
l1873:
	push $5
	push 1
	pop $b
	popax
	cmp $a,$b
	je l1994
	push 0
	jmp l1995
l1994:
	push 1
l1995:
	push $3
	push $1
	popax
	spush $a
	push $2
	spop $a
	call [$a],getcolsno
	pop $b
	popax
	cmp $a,$b
	jae l1996
	push 0
	jmp l1997
l1996:
	push 1
l1997:
	popax
	pop $b
	and $a,$b
	popax
	cmp $a,0
	je l1998
	push 0
	pop $5
	jmp l1993
l1998:
l1993:
	jmp l1869
l1872:
	push $3
	ret
	end method
	method cadvherofinish
	end method
	method butmoveoff
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],moveoff
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbutname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method butmoveon
	localstring $1
	pop $1
	push $1
	popax
	spush $a
	spop $a
	call [$a],moveon
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbutname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method advmsmove
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l2000
	push 0
	jmp l2001
l2000:
	push 1
l2001:
	popax
	cmp $a,0
	je l2002
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	push $4
	push _slastms
	pop $b
	popax
	cmp $a,$b
	jne l2004
	push 0
	jmp l2005
l2004:
	push 1
l2005:
	popax
	cmp $a,0
	je l2006
	push _slastms
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l2008
	push 0
	jmp l2009
l2008:
	push 1
l2009:
	popax
	cmp $a,0
	je l2010
	push _slastms
	cthis butmoveoff
	jmp l2007
l2010:
l2007:
	push $4
	pop _slastms
	push $4
	cthis butmoveon
	jmp l2003
l2006:
l2003:
	jmp l1999
l2002:
	push _slastms
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l2012
	push 0
	jmp l2013
l2012:
	push 1
l2013:
	popax
	cmp $a,0
	je l2014
	push _slastms
	cthis butmoveoff
	push "null"
	pop _slastms
	jmp l2011
l2014:
l2011:
l1999:
	push "onmousemove"
	push $1
	push $2
	call grmsmove,evalii
	call moddbg,msmove
	end method
	method butclickon
	localstring $1
	pop $1
	localstring $2
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2016
	push 0
	jmp l2017
l2016:
	push 1
l2017:
	popax
	cmp $a,0
	je l2018
	push $2
	popax
	spush $a
	spop $a
	call [$a],skipitem
	jmp l2015
l2018:
l2015:
	push $1
	popax
	spush $a
	spop $a
	call [$a],clickon
	push $1
	popax
	spush $a
	spop $a
	call [$a],getbutname
	push "_CLICKON"
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	spop $d
	cthis [$d]
	end method
	method advmsclick
	push bmslock
	push 0
	pop $b
	popax
	cmp $a,$b
	je l2020
	push 0
	jmp l2021
l2020:
	push 1
l2021:
	popax
	cmp $a,0
	je l2022
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l2024
	push 0
	jmp l2025
l2024:
	push 1
l2025:
	popax
	cmp $a,0
	je l2026
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	push $4
	cthis butclickon
	jmp l2023
l2026:
	push $1
	push $2
	call clwalkq,goto
l2023:
	push "onmouselclick"
	push $1
	push $2
	call grmslclick,evalii
	jmp l2019
l2022:
l2019:
	cthis behrewind
	call moddbg,mslclick
	end method
	method mousemove
	cthis advmsmove
	cthis mouse_MOVE
	end method
	method mouselclick
	cthis advmsclick
	cthis mouse_LCLICK
	end method
	method mouselrel
	call moddbg,mslrel
	cthis mouse_LREL
	end method
	method mouserclick
	cthis mouse_RCLICK
	end method
	method keydown
	call moddbg,dbkeydown
	cthis keyboard_KEYDOWN
	end method
	end class

	class classadvtourist
	parent classadvcontroller
	method init
	new classtxttalker,clhilarytxt
	new font,_fonttxt
	new db,_dbtour
	push "scripts/common/tourist.tur"
	call _dbtour,loadscript
	localstring $1
	localstring $2
	push "null"
	pop $2
	localint $3
	push 0
	pop $3
l2027:
	push $3
	call _dbtour,getrowsno
	pop $b
	popax
	cmp $a,$b
	jl l2028
	push 0
	jmp l2029
l2028:
	push 1
l2029:
	popax
	cmp $a,0
	je l2030
	jmp l2032
l2031:
	add $3,1
	pop $3
	jmp l2027
l2032:
	push $3
	push 0
	call _dbtour,get
	pop $1
	push $1
	push "font:"
	pop $b
	popax
	cmp $a,$b
	je l2034
	push 0
	jmp l2035
l2034:
	push 1
l2035:
	popax
	cmp $a,0
	je l2036
	push $3
	push 1
	call _dbtour,get
	push $3
	push 2
	call _dbtour,get
	call _fonttxt,load
	push "_fonttxt"
	call clhilarytxt,setfont
	jmp l2033
l2036:
	push $1
	push "fontcolor:"
	pop $b
	popax
	cmp $a,$b
	je l2038
	push 0
	jmp l2039
l2038:
	push 1
l2039:
	popax
	cmp $a,0
	je l2040
	push $3
	push 1
	call _dbtour,get
	push $3
	push 2
	call _dbtour,get
	push $3
	push 3
	call _dbtour,get
	call clhilarytxt,setfontcolor
	jmp l2037
l2040:
	push $1
	push "bgcolor:"
	pop $b
	popax
	cmp $a,$b
	je l2042
	push 0
	jmp l2043
l2042:
	push 1
l2043:
	popax
	cmp $a,0
	je l2044
	push $3
	push 1
	call _dbtour,get
	push $3
	push 2
	call _dbtour,get
	push $3
	push 3
	call _dbtour,get
	push $3
	push 4
	call _dbtour,get
	call clhilarytxt,setfontbg
	jmp l2041
l2044:
	push $1
	push "frame:"
	pop $b
	popax
	cmp $a,$b
	je l2046
	push 0
	jmp l2047
l2046:
	push 1
l2047:
	popax
	cmp $a,0
	je l2048
	push $3
	push 1
	call _dbtour,get
	push $3
	push 2
	call _dbtour,get
	push $3
	push 3
	call _dbtour,get
	push $3
	push 4
	call _dbtour,get
	call clhilarytxt,setbgframe
	jmp l2045
l2048:
	push $1
	push "anima:"
	pop $b
	popax
	cmp $a,$b
	je l2050
	push 0
	jmp l2051
l2050:
	push 1
l2051:
	popax
	cmp $a,0
	je l2052
	push $3
	push 1
	call _dbtour,get
	pop $2
	push $2
	push $3
	push 2
	call _dbtour,get
	call clhilarytxt,set
	jmp l2049
l2052:
l2049:
l2045:
l2041:
l2037:
l2033:
	jmp l2031
l2030:
	clparent classadvcontroller,init
	push $2
	push "null"
	pop $b
	popax
	cmp $a,$b
	jne l2054
	push 0
	jmp l2055
l2054:
	push 1
l2055:
	popax
	cmp $a,0
	je l2056
	jmp l2053
l2056:
l2053:
	end method
	method _anhilarystdfin
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	end class

	module moddbg
	parent classlocker
	method init
	clparent classlocker,init
	new string,sstate
	push "init"
	pop sstate
	new int,ilastx
	new int,ilasty
	new text,txtpos
	push 5000
	call txtpos,setz
	push 0
	push 0
	call txtpos,setpos
	new text,txtswin
	push 5000
	call txtswin,setz
	push 0
	push 16
	call txtswin,setpos
	new text,txtpod
	push 5000
	call txtpod,setz
	push 0
	push 0
	push 128
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpod,setbkg
	cthis disable
	end method
	method enable
	cthis unlock
	call txtpos,show
	call txtswin,show
	call txtpod,show
	end method
	method disable
	cthis lock
	call txtpos,hide
	call txtswin,hide
	call txtpod,hide
	end method
	method updatetxtpos
	localint $1
	localint $2
	pop $2
	pop $1
	push ""
	push $1
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtpos,set
	push $1
	push 64
	pop $b
	popax
	sub $a,$b
	push $2
	push 20
	pop $b
	popax
	sub $a,$b
	call txtpod,setpos
	push $1
	push $2
	push 1
	push 1
	push 1000
	popax
	sub 0,$a
	push 1000
	call engine,getimg
	call txtpod,set
	end method
	method updateswin
	push " "
	call anhilary,getposx
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	call anhilary,getposy
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtswin,set
	call txtswin,get
	push ","
	pop $b
	popax
	add $a,$b
	call anhilary,getz
	pop $b
	popax
	add $a,$b
	call txtswin,set
	end method
	method msminit
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmmove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push ilastx
	pop $b
	popax
	sub $a,$b
	push $2
	push ilasty
	pop $b
	popax
	sub $a,$b
	call clcamera,moveplans
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmove
	cthis getlock
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2058
	push 0
	jmp l2059
l2058:
	push 1
l2059:
	popax
	cmp $a,0
	je l2060
	ret
	jmp l2057
l2060:
l2057:
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	push "msm"
	push sstate
	pop $b
	popax
	add $a,$b
	popax
	spush $a
	push $1
	push $2
	spop $d
	cthis [$d]
	push $1
	pop ilastx
	push $2
	pop ilasty
	end method
	method mslclick
	cthis getlock
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2062
	push 0
	jmp l2063
l2062:
	push 1
l2063:
	popax
	cmp $a,0
	je l2064
	ret
	jmp l2061
l2064:
l2061:
	push "space"
	call keyboard,iskeydown
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2066
	push 0
	jmp l2067
l2066:
	push 1
l2067:
	popax
	cmp $a,0
	je l2068
	push "move"
	pop sstate
	jmp l2065
l2068:
l2065:
	end method
	method mslrel
	cthis getlock
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2070
	push 0
	jmp l2071
l2070:
	push 1
l2071:
	popax
	cmp $a,0
	je l2072
	ret
	jmp l2069
l2072:
l2069:
	push "init"
	pop sstate
	end method
	method msrclick
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	push 0
	pop $b
	popax
	cmp $a,$b
	jne l2074
	push 0
	jmp l2075
l2074:
	push 1
l2075:
	popax
	cmp $a,0
	je l2076
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	call $4,print
	jmp l2073
l2076:
l2073:
	end method
	method dbkeydown
	push "d"
	call keyboard,iskey
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2078
	push 0
	jmp l2079
l2078:
	push 1
l2079:
	popax
	cmp $a,0
	je l2080
	cthis getlock
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2082
	push 0
	jmp l2083
l2082:
	push 1
l2083:
	popax
	cmp $a,0
	je l2084
	cthis enable
	jmp l2081
l2084:
	cthis disable
l2081:
	jmp l2077
l2080:
l2077:
	cthis getlock
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2086
	push 0
	jmp l2087
l2086:
	push 1
l2087:
	popax
	cmp $a,0
	je l2088
	ret
	jmp l2085
l2088:
l2085:
	cthis updateswin
	push "z"
	call keyboard,iskey
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2090
	push 0
	jmp l2091
l2090:
	push 1
l2091:
	popax
	cmp $a,0
	je l2092
	call gameapi,getgamename
	pop sgmlastscene
	push "gamezajezdnia"
	call gameapi,play
	jmp l2089
l2092:
	push "l"
	call keyboard,iskey
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2094
	push 0
	jmp l2095
l2094:
	push 1
l2095:
	popax
	cmp $a,0
	je l2096
	call gameapi,getgamename
	pop sgmlastscene
	localstring $1
	push "scripts/common/fastload"
	push "targ1"
	call $1,load
	push 1
	call $1,strsube
	pop $1
	push "game"
	push $1
	pop $b
	popax
	add $a,$b
	pop sgmgamename
	push "gameetourist"
	call gameapi,play
	jmp l2093
l2096:
l2093:
l2089:
	end method
	end module

	new int,igmdebug
	new int,igmeasy
	new int,igmdemo
	new classgamepause,clpause
	new string,sgmgamename
	game gameetourist
	parent classadvtourist
	method init
	push sgmgamename
	cthis setname
	clparent classadvtourist,init
	end method
	method anhilary_ENDFRAME
	cthis getposy
	call imgbkg,getpy
	pop $b
	popax
	sub $a,$b
	cthis setz
	end method
	method keyboard_KEYDOWN
	push "escape"
	call keyboard,iskey
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2098
	push 0
	jmp l2099
l2098:
	push 1
l2099:
	popax
	cmp $a,0
	je l2100
	push "gameoutro"
	call gameapi,play
	jmp l2097
l2100:
l2097:
	end method
	end game

	game gameoutro
	parent classadv
	method init
	clparent classadv,init
	push "scripts/menu/"
	cthis setgraphpath
	push "imgbkg"
	push "outro.png"
	push 0
	cthis newimg
	new classtxttalker,cltalkout
	new font,_fonttxt
	push "configs/fonts/l2arial.ttf"
	push 16
	call _fonttxt,load
	push "null"
	push 10
	call cltalkout,set
	push 250
	push 250
	push 8
	call cltalkout,setfontcolor
	push 5
	push 5
	push 222
	push 192
	call cltalkout,setfontbg
	push 2
	push 32
	push 32
	push 32
	call cltalkout,setbgframe
	push "_fonttxt"
	call cltalkout,setfont
	push "outro"
	push 290
	push 250
	push "rr"
	call cltalkout,herosaydir
	push "timfin"
	push 5000
	push 1
	push "mfintimfin"
	cthis cnewtimerfin
	call timfin,play
	end method
	method mfintimfin
	call gameapi,exit
	end method
	method mouselclick
	cthis mfintimfin
	end method
	end game

	game gameintro
	parent classadv
	method init
	clparent classadv,init
	new img,imgbkg
	push "scripts/mariacka/mariacka.jpg"
	call imgbkg,load
	push "scripts/menu/"
	cthis setgraphpath
	localint $1
	push "annapis"
	push "napisy.pyz"
	push 0
	push 10
	cthis loadanframes
	pop $1
	new text,txtexit
	new text,txtstart
	new font,_fonttxt
	push "configs/fonts/l2arial.ttf"
	push 16
	call _fonttxt,load
	push "_fonttxt"
	call txtexit,setfont
	push 40
	push 540
	call txtexit,setpos
	push "scripts/menu/wyjscie.txt"
	push 255
	push 255
	push 200
	call txtexit,loadtxt
	push "_fonttxt"
	call txtstart,setfont
	push "scripts/menu/start.txt"
	push 255
	push 255
	push 200
	call txtstart,loadtxt
	push 40
	push 520
	call txtstart,setpos
	end method
	method mouselclick
	push "main"
	pop sgmlastscene
	push "gameetourist"
	call gameapi,play
	end method
	method keydown
	push "escape"
	call keyboard,iskey
	push 1
	pop $b
	popax
	cmp $a,$b
	je l2102
	push 0
	jmp l2103
l2102:
	push 1
l2103:
	popax
	cmp $a,0
	je l2104
	push "gameoutro"
	call gameapi,play
	jmp l2101
l2104:
l2101:
	end method
	end game

	game main
	method init
	push 0
	pop igmstate
	push 1
	pop igmdebug
	push 0
	pop igmeasy
	push 0
	pop igmdemo
	push "scripts/common/cursors.pyz"
	call advmouse,load
	push "scripts/common/defaults.adv"
	call modadv,load
	call moddbg,disable
	cthis getname
	pop sgmlastscene
	push "startgame:"
	push 1
	call modadv,get
	pop sgmgamename
	push "gameintro"
	call gameapi,play
	end method
	end game

