/*
	tworzy z button z obiektu graficznego
*/

class classadvbut	{
	init(string sname)	{
		this.setadvbutmets(sname, "but");
	}
	setasbutton(string san, string sname)	{
		classadvbut::setasbutton2(san,sname,"but");
	}
	setasbutton2(string san, string sname, string styp)	{	// rozszerzanie obiektu o button
		<san>.addmethod("setadvbutmets","setadvbutmets");
		<san>.addmethod("setbuttyp","setbuttyp");
		<san>.addmethod("setadvbutpos","setadvbutpos");
		<san>.addmethod("setbutdir","setbutdir");
		<san>.addmethod("setbutbase1","setbutbase1");
		<san>.addmethod("setbutbase2","setbutbase2");
		<san>.addmethod("setbutbase","setbutbase");
		<san>.addmethod("getbase1","getbase1");
		<san>.addmethod("getbase2","getbase2");
		<san>.addmethod("getbutdir","getbutdir");
		<san>.addmethod("getbutname","getbutname");
		<san>.addmethod("gettyp","gettyp");
		<san>.addmethod("reachable", "reachable");
		<san>.addmethod("setreach", "setreach");
		<san>.addmethod("getgox","getgox");
		<san>.addmethod("getgoy","getgoy");
		
		<san>.addmethod("enable","enable");
		<san>.addmethod("disable","disable");
		<san>.addmethod("enabled","enabled");
		<san>.addmethod("setonce", "setonce" );
		<san>.addmethod("checkonce", "checkonce" );
		
		<san>.addmethod("setpocket", func { (string s) _spocket = s; } );
		<san>.addmethod("getpocket", func { _spocket; } );
		
		<san>.addmethod("moveon","moveon");
		<san>.addmethod("moveoff","moveoff");
		<san>.addmethod("clickon","clickon");
		<san>.addmethod("lrel","lrel");
		
		<san>.addmethod("becomebut", func { classadvbut::setasbut(this); });
		<san>.addmethod("becomeitem", func { classadvbut::setasitem(this); });
		<san>.addmethod("becomedoors", func { classadvbut::setasdoors(this); });
		
		<san>.addmethod("copyposfrompt", func { (string spt, int id)
			int i0 = <spt>.getbyname(id);
			.setadvbutpos(<spt>.getxver(i0) - <spt>.getposx, <spt>.getyver(i0) - <spt>.getposy );
			} );
		
		if( igmipad )	{
			<san>.addmethod("butisin", func { (int x, int y, bool bv, bool ba)
				.isin(x,y,bv,0);
				} );
		} else {
			<san>.addmethod("butisin", func { .isin; } );
		}
		
		<san>.addmethod("ismask", func { bismask; } );
		<san>.addmethod("setbmask", func { (bool b) bismask = b; });
		
		<san>.setadvbutmets(sname, styp);
		<san>.setreach(true);
	}
	setonce(string s)	{ _sonce = s; }
	checkonce	{
		if(_sonce!=null && !clsave.bis(_sonce))	{
			clsave.bset(_sonce);
			.disable;
		}
	}
	setadvbutmets(string sname, string styp)	{
		new string _styp = styp;
		new string _sname = sname;
		new int igox = this.getposx();		// jak dojsc do tego..
		new int igoy = this.getposy();
		new string sgox = null;
		new string sgoy = null;
		new string _sbutdir = "auto";
		new string _sbase1 = modadv.get("look:",1);
		new string _sbase2 = modadv.get("look:",2);
		new bool breachable = false;
		new string _spocket = sname;
		new string _sonce = null;
		new bool bismask = false;
		
		.vars2(A, "baseuse1", _sbase1, "baseuse2", _sbase2, "hideontake", true);
		
		this.enable();
	}
	setasmask(string san)	{
		<san>.addmethod("butisin", func { (int x, int y, bool bv, bool ba) .isin(x, y, false, ba);	} );
		<san>.setbmask(true);
	}
	/*********************************/
	enable()	{
		if( !AdventureGame ) return;
		grbuts.addonce( this.getname() );
	}
	disable()	{
		if( !AdventureGame ) return;
		grbuts.remove(this.getname());
	}
	enabled()	{
		if( !AdventureGame ) return;
		return grbuts.contains(this.getname());
	}
	/*********************************/
	setbutbase(string s1, string s2)	{
		.setbutbase1(s1);
		.setbutbase2(s2);
	}
	setreach(bool b)	{	breachable=b;	}
	reachable()	{	return breachable;	}
	setbuttyp(string s)	{	_styp = s;	}
	/*************************/
	lrel()	{}		// mouselrel
	clickon()	{	if( this.reachable() )	{	clwalkq.visit( this.getname() );	}	}
	moveon()	{	advmouse.setactive();	}
	moveoff()	{	advmouse.setstd();	}
	/*************************/
	setadvbutpos(string x, string y)	{	sgox=x; sgoy=y; igox = x; igoy=y;		}
	setbutdir(string sdir)	{	_sbutdir=sdir;	}
	setbutbase1(string sb1)	{	_sbase1=sb1; baseuse1 = sb1;	}
	setbutbase2(string sb2)	{	_sbase2=sb2; baseuse2 = sb2;	}
	string getbase1()	{	return _sbase1;	}
	string getbase2()	{	return _sbase2;	}
	string getbutdir()	{	return _sbutdir;	}
	string getbutname()	{	return _sname;	}
	string gettyp()	{	return _styp;	}
	int getgox()	{
		if( sgox=="-hero" )	{
			sgoy=="-main" ? <smainhero>.getposx() : <sgoy>.getposx();
		} else if (sgox=="-but")	{
			<sgoy>.getcx;
		} else igox + clcamera.getposx();
	}
	int getgoy()	{
		if( sgox=="-hero" )	{
			sgoy=="-main" ? <smainhero>.getposy() : <sgoy>.getposy();
		} else if (sgox=="-but")	{
			<sgoy>.getey;
		} else igoy + clcamera.getposy();
	}
	/*******  virtuale  ****/
	virtual int getposx()	{	return 0;	}
	virtual int getposy()	{	return 0;	}
	virtual int getz()		{	return 0;	}
	virtual int butisin(int x, int y, bool bigv, bool biga)	{	return 0;	}
	/***************************/
	public setasbut(string san)	{
		//<san>.setbutbase( modadv.get("take:",1), modadv.get("take:",2) );
		<san>.addmethod("moveon", "moveon");
	}
	public setasitem(string san)	{
		<san>.setbutbase( modadv.get("take:",1), modadv.get("take:",2) );
		<san>.addmethod("moveon", "moveon");
	}
	public setasdoors(string san)	{
		<san>.addmethod("moveon", func { advmouse.setexit; } );
		<san>.setbutbase( modadv.get("doors:",1), modadv.get("doors:",2) );
	}
}

class classadvitem : classadvbut	{
	init(string sname)	{
		classadvbut::init(sname, "item");
		this.setbutbase( modadv.get("take:",1), modadv.get("take:",2) );
	}
	setasbutton(string san, string sname)	{
		classadvbut::setasbutton2(san, sname, "item");
		<san>.setbutbase( modadv.get("take:",1), modadv.get("take:",2) );
	}
}

class classadvdoors : classadvbut	{
	init(string sname)	{
		classadvbut::init(sname, "doors");
		this.setbutbase( modadv.get("doors:",1), modadv.get("doors:",2) );
	}
	setasbutton(string san, string sname)	{
		classadvbut::setasbutton2(san, sname, "doors");
		<san>.addmethod("moveon","moveon");
		<san>.setbutbase( modadv.get("doors:",1), modadv.get("doors:",2) );
	}
	moveon()	{	advmouse.setexit();		}
}
