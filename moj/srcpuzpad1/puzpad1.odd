; Dominik Dagiel   ix 2005

	new string,A
	push "!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	new int,BYTE0
	push "0"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE0
	new int,BYTE9
	push "9"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE9
	new int,BYTEa
	push "a"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEa
	new int,BYTEz
	push "z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEz
	new int,BYTEA
	push "A"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEA
	new int,BYTEZ
	push "Z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEZ
	new int,BYTE_
	push "_"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE_
	new int,BYTESPACE
	push " "
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTESPACE
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l2
	push $1
	push $2
	cthis varnew
l2:
	end method
	method vardelif
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l4
	push $1
	cthis vardel
l4:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global0"
	cthis addmethod
	end method
	method global0
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global1"
	cthis addmethod
	end method
	method global1
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l5:
	push A
	push $2
	cmpjne
	cmp0
	je l6
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l5
l6:
	end method
	method withlist2
	localstring $1
	pop $1
	localdef $2
	pop $2
l7:
	push A
	push $2
	cmpjne
	cmp0
	je l8
	localdef $3
	pop $3
	push $1
	spushs
	push $3
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l7
l8:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method vars2
	push "var2"
	cthis withlist2
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l9:
	push A
	push $3
	cmpjne
	cmp0
	je l10
	push $1
	neg
	cmp0
	je l12
	push $2
	push $3
	cmpje
	pop $1
l12:
	localdef $3
	pop $3
	jmp l9
l10:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l13:
	push $2
	push A
	cmpjne
	cmp0
	je l14
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l13
l14:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global2"
	cthis addmethod
	end method
	method global2
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l15:
	push $2
	push A
	cmpjne
	cmp0
	je l16
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l15
l16:
	end method
	method mresize
	cthis gettype
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	cthis getname
	spop $a
	 clparent [$a],resizemethods
	end method
	method times
	localstring $1
	pop $1
	push 0
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis for_plus
	end method
	method upto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_plus
	end method
	method downto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_minus
	end method
	method for_plus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l18
	ret
l18:
l19:
	push $1
	push $2
	cmpjle
	cmp0
	je l20
	jmp l22
l21:
	add $1,1
	pop $1
	jmp l19
l22:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l21
l20:
	end method
	method for_minus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l24
	ret
l24:
l25:
	push $1
	push $2
	cmpjae
	cmp0
	je l26
	jmp l28
l27:
	sub $1,1
	pop $1
	jmp l25
l28:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l27
l26:
	end method
	method double_for
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	push 0
	pop $5
l29:
	push $5
	push $1
	cmpjl
	cmp0
	je l30
	jmp l32
l31:
	add $5,1
	pop $5
	jmp l29
l32:
	push 0
	pop $4
l33:
	push $4
	push $2
	cmpjl
	cmp0
	je l34
	jmp l36
l35:
	add $4,1
	pop $4
	jmp l33
l36:
	push $3
	spushs
	push $5
	push $4
	spop $d
	cthis [$d]
	jmp l35
l34:
	jmp l31
l30:
	end method
	class classobjcounter
	method init
	localstring $1
	pop $1
	new string,_sprefix
	push $1
	pop _sprefix
	new int,_iile
	push 0
	pop _iile
	push "limit"
	push 0
	cthis var2
	end method
	method get
	push limit
	push 0
	cmpja
	cmp0
	je l38
	push _iile
	push limit
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop _iile
	jmp l37
l38:
	add _iile,1
	pop _iile
l37:
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	end method
	method getid
	localint $1
	pop $1
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	end method
	end class

	class classsignals
	method init
	end method
	method stdfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "classsignals0"
	spop $a
	call [$a],addmethod
	end method
	method classsignals0
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdstart
	localstring $1
	pop $1
	push $1
	spushs
	push "onstart"
	push "classsignals1"
	spop $a
	call [$a],addmethod
	end method
	method classsignals1
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdsigs
	localstring $1
	pop $1
	push $1
	cthis stdstart
	push $1
	cthis stdfinish
	end method
	method buildanima
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "onendframe"
	push "classsignals2"
	spop $a
	call [$a],addmethod
	end method
	method classsignals2
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildsnd
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	end method
	method buildtimer
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "ontick"
	push "classsignals3"
	spop $a
	call [$a],addmethod
	end method
	method classsignals3
	cthis getname
	push "_TICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildbut
	localstring $1
	pop $1
	push $1
	spushs
	push "onclick"
	push "classsignals4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onrel"
	push "classsignals5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveon"
	push "classsignals6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveoff"
	push "classsignals7"
	spop $a
	call [$a],addmethod
	end method
	method classsignals4
	cthis getname
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals5
	cthis getname
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals6
	cthis getname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals7
	cthis getname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	method unlocked
	push _block
	push 0
	cmpje
	end method
	method setaslocker
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlocker"
	push "classlocker0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlocker
	push $1
	spushs
	push "lock"
	push "lock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlock"
	push "unlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setlock"
	push "setlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getlock"
	push "getlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlocked"
	push "unlocked"
	spop $a
	call [$a],addmethod
	end method
	method classlocker0
	new int,_block
	push 1
	pop _block
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l39:
	push $2
	push $3
	cmpjl
	cmp0
	je l40
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l39
l40:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l42
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
l42:
	end method
	end module

	class collection
	method init
	localstring $1
	pop $1
	new string,stype
	push $1
	pop stype
	end method
	method type
	push stype
	ret
	end method
	end class

	class array
	parent collection
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	clparent collection,init
	new int,idim
	push $2
	pop idim
	new int,isize
	push $3
	pop isize
	new vector,vec
	push $1
	call vec,type
	push $2
	push 0
	cmpjle
	cmp0
	jne l45
	push $3
	push 0
	cmpjle
	jmp l46
l44:
	push 0
	jmp l46
l45:
	push 1
l46:
	cmp0
	je l47
	ret
l47:
	push $2
	call $3,pow
	push 0
	call vec,resize
	end method
	method getid
	localint $1
	push 0
	pop $1
	localint $2
	push idim
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l48:
	push $2
	push 0
	cmpja
	cmp0
	je l49
	popax
	add $1,$a
	pop $1
	push isize
	popax
	mul $1,$a
	pop $1
	sub $2,1
	pop $2
	jmp l48
l49:
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method get
	cthis getid
	call vec,get
	ret
	end method
	method set
	localdef $1
	pop $1
	cthis getid
	push $1
	call vec,set
	end method
	method getsize
	push isize
	ret
	end method
	method getdim
	push idim
	ret
	end method
	end class

	class stack
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vec
	push $1
	call vec,type
	push $1
	spushs
	spop $d
	new [$d],var
	end method
	method push
	localstring $1
	pop $1
	push $1
	call vec,add
	end method
	method top
	call vec,last
	ret
	end method
	method pop
	cthis top
	pop var
	call vec,size
	push 1
	pop $b
	popax
	sub $a,$b
	call vec,removeat
	push var
	ret
	end method
	method free
	call vec,free
	end method
	end class

	class map
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new int,isize
	push 0
	pop isize
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	neg
	cmp0
	je l51
	push $1
	cthis add
l51:
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],set
	end method
	method add
	localstring $1
	pop $1
	push stype
	spushs
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method get
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method remove
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method contains
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	ret
	end method
	end class

	class map2
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vn
	push "string"
	call vn,type
	new vector,vec
	push $1
	call vec,type
	end method
	method add
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,add
	push $2
	call vec,add
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,find
	push $2
	call vec,set
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call vn,contains
	ret
	end method
	method get
	localstring $1
	pop $1
	push $1
	call vn,find
	call vec,get
	ret
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call vn,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l53
	push $2
	call vec,removeat
	push $2
	call vn,removeat
l53:
	end method
	method free
	call vn,free
	call vec,free
	end method
	method print
	call vec,print
	call vn,print
	end method
	end class

	class classgamemusic
	parent classdbreader
	method init
	clparent classdbreader,init
	new string,smuspath
	push ""
	pop smuspath
	new string,sbgrpath
	push ""
	pop sbgrpath
	new snd,_sndbgr
	push "onfinish"
	push "_stdsndloop"
	call _sndbgr,addmethod
	end method
	method reset
	call gameapi,stopmusic
	cthis stopbgr
	end method
	method _stdsndloop
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbl,loadscript
	end method
	method musicpath
	localstring $1
	pop $1
	push $1
	pop smuspath
	end method
	method sndbgrpath
	localstring $1
	pop $1
	push $1
	pop sbgrpath
	end method
	method _play
	localint $1
	pop $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	push 1
	pop $2
	push $1
	call dbl,getcolsno
	pop $3
l54:
	push $2
	push $3
	cmpjl
	cmp0
	je l55
	push $1
	push $2
	call dbl,get
	pop $5
	add $2,1
	pop $2
	push $5
	push "music"
	cmpje
	cmp0
	je l57
	push smuspath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	pop $6
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l59
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l61
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call gameapi,setmusicvol
	add $2,1
	pop $2
l61:
	jmp l58
l59:
	push 100
	call gameapi,setmusicvol
l58:
	push $6
	call gameapi,playmusic
	jmp l56
l57:
	push $5
	push "bgr"
	cmpje
	cmp0
	je l63
	push sbgrpath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	call _sndbgr,load
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l65
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l67
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call _sndbgr,setvol
	add $2,1
	pop $2
l67:
	jmp l64
l65:
	push 100
	call _sndbgr,setvol
l64:
	cthis playbgr
	jmp l62
l63:
	add $2,1
	pop $2
l62:
l56:
	jmp l54
l55:
	end method
	method play
	cthis reset
	call gameapi,getgamename
	push "_play"
	cthis readrow
	end method
	method playbgr
	call _sndbgr,play
	end method
	method stopbgr
	push 0
	call _sndbgr,stop
	end method
	end class

	class Music
	method init
	new vector,vmus
	push "string"
	call vmus,type
	new int,ilastid
	end method
	method playdb
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	call vmus,free
l68:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l69
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l68
l69:
	push 0
	pop ilastid
	cthis play
	end method
	method playvec
	localstring $1
	localint $2
	pop $2
	pop $1
	call vmus,free
l70:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l71
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	call vmus,add
	add $2,1
	pop $2
	jmp l70
l71:
	push 0
	pop ilastid
	cthis play
	end method
	method playstr
	localstring $1
	pop $1
	push $1
	push " "
	call vmus,vecbuildfromstring
	push 0
	pop ilastid
	cthis play
	end method
	method play
	push ilastid
	call vmus,size
	cmpjae
	cmp0
	je l73
	ret
l73:
	localdef $1
	push MUSICPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
	add ilastid,1
	pop ilastid
	localint $2
	push 0
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	push 0
	pop $4
	localint $5
	push 100
	pop $5
	localint $6
	push ilastid
	pop $6
l74:
	push $6
	call vmus,size
	cmpjl
	cmp0
	je l75
	jmp l77
l76:
	add $6,1
	pop $6
	jmp l74
l77:
	localdef $7
	push $6
	call vmus,get
	pop $7
	push $7
	spushs
	push "-l"
	cmpst
	jne l79
	spop $a
	push 1
	pop $2
	jmp l78
l79:
	push "-v"
	cmpst
	jne l80
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $5
	jmp l78
l80:
	push "-fin"
	cmpst
	jne l81
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $3
	jmp l78
l81:
	push "-fout"
	cmpst
	jne l82
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $4
	jmp l78
l82:
	push "-p"
	cmpst
	jne l83
	spop $a
	jmp l78
l83:
	spop $a
	push $6
	pop ilastid
	call vmus,size
	pop $6
l78:
	jmp l76
l75:
	push $5
	call gameapi,setmusicvol
	push $2
	cmp0
	je l85
	push $1
	call gameapi,playmusic
	call vmus,size
	pop ilastid
	ret
l85:
	push $1
	call gameapi,loadmusic
	push $3
	cmp0
	je l87
	push $3
	call gameapi,fadeinmusic
	jmp l86
l87:
	call gameapi,startmusic
l86:
	push $4
	cmp0
	je l89
	push $4
	call gameapi,fadeoutmusic
l89:
	end method
	method fadeout
	localint $1
	pop $1
	call gameapi,ismusicplaying
	cmp0
	je l91
	push $1
	call gameapi,fadeoutmusic
	call vmus,size
	pop ilastid
l91:
	end method
	method isplaying
	call gameapi,ismusicplaying
	end method
	method stop
	push 0
	call gameapi,endmusic
	end method
	end class

	new int,igmstate
	new int,igmdebug
	new int,igmeasy
	new int,igmdemo
	new int,igmbegin
	new int,igmwinlocal
	new int,igmipad
	push 0
	pop igmipad
	new int,igmmac
	push 1
	pop igmmac
	new int,igmwindows
	push 0
	pop igmwindows
	new int,igmiphone
	push 0
	pop igmiphone
	new int,igmpcdebug
	push 0
	pop igmpcdebug
	push igmipad
	neg
	cmp0
	je l93
	push igmmac
	neg
	cmp0
	je l93
	push igmiphone
	neg
	jmp l95
l93:
	push 0
	jmp l95
l94:
	push 1
l95:
	cmp0
	je l96
	push "getsavepath"
	push "global3"
	call engine,addmethod
l96:
	method global3
	push "saves/"
	end method
	method checktouchpad
	push igmipad
	cmp0
	jne l98
	push igmiphone
	jmp l99
l97:
	push 0
	jmp l99
l98:
	push 1
l99:
	cmp0
	je l100
	push igmpcdebug
	push 0
	cmpje
	jmp l102
l100:
	push 0
	jmp l102
l101:
	push 1
l102:
	end method
	new int,igmsave
	push 0
	pop igmsave
	new string,sgmproject
	push "DagielPuzpad1"
	pop sgmproject
	new string,sgmversion
	push "basniemac"
	pop sgmversion
	new string,sgmfontfile
	push "configs/fonts/normal.ttf"
	pop sgmfontfile
	new string,sgmfontmono
	push "configs/fonts/mono.ttf"
	pop sgmfontmono
	new string,sgmfontmonobold
	push "configs/fonts/monobold.ttf"
	pop sgmfontmonobold
	new string,sgmfontbold
	push "configs/fonts/monobold.ttf"
	pop sgmfontbold
	new string,sgmfontitalic
	push "configs/fonts/timesit.ttf"
	pop sgmfontitalic
	new string,SFXPATH
	push "sounds/sfx/"
	pop SFXPATH
	new string,BGRPATH
	push "sounds/bgr/"
	pop BGRPATH
	new string,MUSICPATH
	push "sounds/music/"
	pop MUSICPATH
	new string,LANG
	push "pl"
	pop LANG
	new string,SNDPATH
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l104
	push ""
	pop LANG
l104:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l106
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l106:
	new int,iResX
	new int,iResY
	call engine,getscreenres
	pop iResY
	pop iResX
	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method _checkfont
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l108
	push sgmfontfile
	pop $1
l108:
	push ".ttf"
	call $1,contains
	cmp0
	je l110
	push $3
	spushs
	spop $e
	new font,[$e]
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	pop $1
l110:
	push $1
	end method
	method checkfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "_fnt"
	cthis _checkfont
	end method
	method begingame
	push igmbegin
	neg
	pop igmbegin
	push igmbegin
	neg
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpjle
	cmp0
	je l112
	ret
l112:
	sub $3,1
	pop $3
l113:
	push $3
	push 0
	cmpjae
	cmp0
	je l114
	push $1
	spushs
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l113
l114:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	ret
	end method
	method getsndpath
	push _sclwavpath
	ret
	end method
	method getpath
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l116
	push 1
	call $1,strsubb
	jmp l115
l116:
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
l115:
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new anima,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	spushs
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l118
	ret
l118:
	localint $5
	push 0
	pop $5
l119:
	push $5
	push $4
	cmpjl
	cmp0
	je l120
	jmp l122
l121:
	add $5,1
	pop $5
	jmp l119
l122:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l121
l120:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l124
	ret
l124:
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	spushs
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l125:
	push $6
	push $5
	cmpjl
	cmp0
	je l126
	jmp l128
l127:
	add $6,1
	pop $6
	jmp l125
l128:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	cmpjne
	cmp0
	je l130
	push $4
	spushs
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l130:
	jmp l127
l126:
	push $5
	ret
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	ret
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	spushs
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new img,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	push MUSICPATH
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method newsndfree
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method snewsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	end method
	method _newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push "."
	call $2,contains
	neg
	cmp0
	je l132
	push ".wav"
	popax
	add $2,$a
	pop $2
l132:
	push $1
	spushs
	push $2
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l134
	push $1
	push $2
	call subtitle,register
l134:
	end method
	method newsfx
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push SFXPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push BGRPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgrloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newbgr
	push $1
	cthis sndplayloop
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l135:
	push $8
	push $7
	cmpjl
	cmp0
	je l136
	jmp l138
l137:
	add $8,1
	pop $8
	jmp l135
l138:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new snd,[$e]
	push $6
	spushs
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l137
l136:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],setcycle
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	cmp0
	je l140
	push $1
	cthis looponfinish
	jmp l139
l140:
	push "H"
	call $2,contains
	cmp0
	je l142
	push $1
	cthis hideonfinish
l142:
l139:
	push "P"
	call $2,contains
	cmp0
	je l144
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l144:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l145:
	push $6
	push $4
	cmpjl
	cmp0
	je l146
	jmp l148
l147:
	add $6,1
	pop $6
	jmp l145
l148:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	cmpjne
	cmp0
	je l150
	push $3
	spushs
	push $5
	spop $a
	call [$a],add
l150:
	jmp l147
l146:
	push $4
	ret
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	ret
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	push 0
	pop $5
l151:
	push $5
	push $4
	cmpjl
	cmp0
	je l152
	jmp l154
l153:
	add $5,1
	pop $5
	jmp l151
l154:
	push $1
	push $2
	push $5
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	push $3
	cthis newanframesgr
	popax
	jmp l153
l152:
	push $4
	ret
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	ret
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	spushs
	spop $a
	call [$a],hide
	push $6
	ret
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],loadscritp
	end method
	method vargmset
	localstring $1
	localdef $2
	pop $2
	pop $1
	localstring $3
	call gameapi,getgamename
	pop $3
	push $3
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l156
	push $3
	spushs
	call $2,gettype
	push $1
	spop $a
	call [$a],varnew
l156:
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	end class

	new img,imglobcurs
	cthis checktouchpad
	cmp0
	je l158
	push "configs/empty.png"
	push "configs/empty.png"
	call bsms,load
	jmp l157
l158:
	push "configs/kursorstd.png"
	push "configs/kursoract.png"
	call bsms,load
l157:
	module bsms
	method init
	new img,imgstd
	new img,imgact
	new int,msid
	push 0
	pop msid
	end method
	method load
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call imgstd,load
	push $2
	call imgact,load
	push "imgact"
	call imglobcurs,copy
	call imglobcurs,hide
	call imgstd,hide
	call imgact,hide
	cthis reset
	push "imgstd"
	call engine,stdbutcursor
	end method
	method setinitial
	call mouse,stdcursor
	push 0
	pop msid
	end method
	method setstd
	push msid
	push 1
	cmpjne
	cmp0
	je l160
	push "imgstd"
	call mouse,setcursor
	push "imgstd"
	call engine,stdbutcursor
	push 1
	pop msid
l160:
	end method
	method setact
	push msid
	push 2
	cmpjne
	cmp0
	je l162
	push "imgact"
	call mouse,setcursor
	push 2
	pop msid
l162:
	end method
	method setown
	push 3
	pop msid
	end method
	method isinitial
	push msid
	push 0
	cmpje
	end method
	method isstd
	push msid
	push 1
	cmpje
	end method
	method isact
	push msid
	push 2
	cmpje
	end method
	method isown
	push msid
	push 3
	cmpje
	end method
	end module

	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l163
	push $1
	push $5
	cmpjle
	cmp0
	je l163
	push $2
	push $4
	cmpjae
	cmp0
	je l163
	push $2
	push $6
	cmpjle
	jmp l165
l163:
	push 0
	jmp l165
l164:
	push 1
l165:
	end method
	method isin2
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l166
	push $1
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l166
	push $2
	push $4
	cmpjae
	cmp0
	je l166
	push $2
	push $4
	push $6
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l168
l166:
	push 0
	jmp l168
l167:
	push 1
l168:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	end method
	method insurf
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $3
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis isin
	end method
	method issurfin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l170
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l170
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l170
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l171
l169:
	push 0
	jmp l171
l170:
	push 1
l171:
	end method
	method commonsurface
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis issurfin
	cmp0
	jne l173
	push $5
	push $6
	push $7
	push $8
	push $1
	push $2
	push $3
	push $4
	cthis issurfin
	jmp l174
l172:
	push 0
	jmp l174
l173:
	push 1
l174:
	end method
	method commonimgs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis commonsurface
	end method
	method surfwithinsurf
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l175
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l175
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l175
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l177
l175:
	push 0
	jmp l177
l176:
	push 1
l177:
	end method
	method imgwithinimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis surfwithinsurf
	end method
	end module

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	ret
	end method
	method ileny
	push ily
	ret
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	ret
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen5
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis ilen
	ret
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	ret
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	ret
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	ret
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	cmpjae
	cmp0
	je l178
	push ilx
	push $6
	cmpjle
	cmp0
	je l178
	push ily
	push $5
	cmpjae
	cmp0
	je l178
	push ily
	push $7
	cmpjle
	jmp l180
l178:
	push 0
	jmp l180
l179:
	push 1
l180:
	ret
	end method
	method ilodlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],lody
	push $2
	spushs
	spop $a
	call [$a],lodx
	push $2
	spushs
	spop $a
	call [$a],lody
	cthis ilen
	end method
	method iposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpos
	push $2
	spushs
	spop $a
	call [$a],getpos
	cthis ilen
	end method
	end module

	class classansearcher
	method init
	end method
	method _findnotr
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $6
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $7
l181:
	push $2
	push $6
	cmpjne
	cmp0
	je l182
	push $3
	push $7
	cmpjne
	jmp l184
l182:
	push 0
	jmp l184
l183:
	push 1
l184:
	cmp0
	je l185
	push $1
	spushs
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l187
	push $2
	push $3
	ret
l187:
	push $4
	popax
	add $2,$a
	pop $2
	push $5
	popax
	add $3,$a
	pop $3
	jmp l181
l185:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method firstnotrx1y
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	method firstnotrexy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrxy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrx1ey
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	end class

	class signal_pack
	method init
	end method
	method addsignals
	localstring $1
	pop $1
	push $1
	spushs
	push "operator<"
	push "signal_pack0"
	spop $a
	call [$a],addmethod
	end method
	method signal_pack0
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	end method
	end class

	class ImagePos
	method init
	end method
	method getex
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	end class

	class ImageVisible
	method init
	new int,_isvisible
	push 1
	pop _isvisible
	end method
	method isvisible
	push _isvisible
	end method
	method show
	push 1
	pop _isvisible
	end method
	method hide
	push 0
	pop _isvisible
	end method
	end class

	class Image
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push A
	push "getz"
	push 0
	push "getpx"
	push 0
	push "getpy"
	push 0
	push "getw"
	push 0
	push "geth"
	push 0
	push "isvisible"
	push 0
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "show"
	push "Image0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "hide"
	push "Image1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setz"
	push "Image2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpos"
	push "Image3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "move"
	push "Image4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getex"
	push "Image5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getey"
	push "Image6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcx"
	push "Image7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcy"
	push "Image8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isin"
	push "Image9"
	spop $a
	call [$a],addmethod
	end method
	method Image0
	push 1
	pop isvisible
	end method
	method Image1
	push 0
	pop isvisible
	end method
	method Image2
	localint $1
	pop $1
	push $1
	pop getz
	end method
	method Image3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop getpx
	push $2
	pop getpy
	end method
	method Image4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add getpx,$a
	pop getpx
	push $2
	popax
	add getpy,$a
	pop getpy
	end method
	method Image5
	push getpx
	push getw
	pop $b
	popax
	add $a,$b
	end method
	method Image6
	push getpy
	push geth
	pop $b
	popax
	add $a,$b
	end method
	method Image7
	push getpx
	push getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image8
	push getpy
	push geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image9
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	neg
	cmp0
	je l189
	push $3
	neg
	cmp0
	jne l192
	push $3
	cmp0
	je l193
	push isvisible
	jmp l195
l193:
	push 0
	jmp l195
l194:
	push 1
l195:
	jmp l196
l191:
	push 0
	jmp l196
l192:
	push 1
l196:
	cmp0
	je l197
	push $1
	push getpx
	cmpjae
	cmp0
	je l198
	push $1
	cthis getex
	cmpjl
	cmp0
	je l198
	push $2
	push getpy
	cmpjae
	cmp0
	je l198
	push $2
	cthis getey
	cmpjl
	jmp l200
l198:
	push 0
	jmp l200
l199:
	push 1
l200:
	jmp l190
l197:
	push 0
l190:
	jmp l188
l189:
	push 0
l188:
	end method
	end class

	class anima_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "_clanbuildpomvars"
	push "anima_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_clanbuildpomvars
	push $1
	spushs
	push "setbpos"
	push "anima_pack1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "saverelpos"
	push "anima_pack2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrelpos"
	push "anima_pack3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssaverelpos"
	push "anima_pack4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssetrelpos"
	push "anima_pack5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rplay"
	push "anima_pack6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setcpos"
	push "anima_pack7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator="
	push "anima_pack8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator=="
	push "anima_pack9"
	spop $a
	call [$a],addmethod
	push $1
	cthis addsignals
	end method
	method anima_pack0
	new int,_ixp
	new int,_iyp
	end method
	method anima_pack1
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anima_pack2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method anima_pack3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack4
	call mouse,getpos
	cthis saverelpos
	end method
	method anima_pack5
	call mouse,getpos
	cthis setrelpos
	end method
	method anima_pack6
	localstring $1
	pop $1
	push $1
	cthis isplaying
	neg
	cmp0
	je l202
	push $1
	cthis play
l202:
	end method
	method anima_pack7
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack8
	localstring $1
	pop $1
	push $1
	cthis copy
	end method
	method anima_pack9
	localstring $1
	pop $1
	cthis actionnr
	push $1
	spushs
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l203
	cthis framenr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l205
l203:
	push 0
	jmp l205
l204:
	push 1
l205:
	end method
	end class

	class timer_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	cthis addsignals
	end method
	end class

	class vector_pack
	method init
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l206:
	push $2
	cthis size
	cmpjl
	cmp0
	je l207
	jmp l209
l208:
	add $2,1
	pop $2
	jmp l206
l209:
	push $1
	spushs
	push $2
	cthis get
	spop $d
	cthis [$d]
	jmp l208
l207:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "each"
	push "each"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator-"
	push "vector_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator+"
	push "vector_pack1"
	spop $a
	call [$a],addmethod
	end method
	method vector_pack0
	localdef $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method vector_pack1
	localdef $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	end class

	method new_object
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $1
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	 clparent [$a],resizemethods
	end method
	method new_anima
	localstring $1
	pop $1
	push "anima"
	push $1
	cthis new_object
	end method
	method new_vector
	localstring $1
	pop $1
	push "vector"
	push $1
	cthis new_object
	end method
	class classanfilter
	method init
	end method
	method buildanfilter
	new filter,ft
	cthis getname
	call ft,link
	push 1
	call ft,setpivottype
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "buildanfilter"
	push "buildanfilter"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildanfilter
	push $1
	spushs
	push "setopacity"
	push "classanfilter0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setzoom"
	push "classanfilter1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setangle"
	push "classanfilter2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getangle"
	push "classanfilter3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rotate"
	push "classanfilter4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpivottype"
	push "classanfilter5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlink"
	push "classanfilter6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "link"
	push "classanfilter7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "blend"
	push "classanfilter8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mask"
	push "classanfilter9"
	spop $a
	call [$a],addmethod
	end method
	method classanfilter0
	localint $1
	pop $1
	push $1
	call ft,setopacity
	end method
	method classanfilter1
	localreal $1
	pop $1
	push $1
	call ft,setzoom
	end method
	method classanfilter2
	localreal $1
	pop $1
	push $1
	call ft,setangle
	end method
	method classanfilter3
	call ft,getangle
	ret
	end method
	method classanfilter4
	localreal $1
	pop $1
	push $1
	call ft,rotate
	end method
	method classanfilter5
	localint $1
	pop $1
	push $1
	call ft,setpivottype
	end method
	method classanfilter6
	call ft,unlink
	end method
	method classanfilter7
	cthis getname
	call ft,link
	end method
	method classanfilter8
	localstring $1
	pop $1
	push $1
	call ft,blend
	end method
	method classanfilter9
	localstring $1
	pop $1
	push $1
	call ft,mask
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l210:
	push $1
	push iile
	cmpjl
	cmp0
	je l211
	jmp l213
l212:
	add $1,1
	pop $1
	jmp l210
l213:
	push $1
	call _vs,get
	neg
	cmp0
	je l215
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
l215:
	jmp l212
l211:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _pos
	push 10
	call $1,getb
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l217
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l219
	spop $a
	push $1
	cthis copy
	jmp l218
l219:
	push "gmobjvec"
	cmpst
	jne l220
	spop $a
	push $1
	cthis copy
	jmp l218
l220:
	push "gmimgvec"
	cmpst
	jne l221
	spop $a
	push $1
	cthis copy
	jmp l218
l221:
	spop $a
	cthis free
	push $1
	cthis add
l218:
	jmp l216
l217:
	cthis free
	push $1
	cthis add
l216:
	end method
	method save
	localstring $1
	pop $1
	push $1
	call lsim,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call lsim,load
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	ret
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	ret
	end method
	method removegr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l222:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l223
	jmp l225
l224:
	add $2,1
	pop $2
	jmp l222
l225:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis remove
	jmp l224
l223:
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l226:
	push $2
	cthis size
	cmpjl
	cmp0
	je l227
	jmp l229
l228:
	add $2,1
	pop $2
	jmp l226
l229:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l228
l227:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l230:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l231
	jmp l233
l232:
	add $2,1
	pop $2
	jmp l230
l233:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l232
l231:
	end method
	method addgroups
	push "addgr"
	cthis withlist
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	ret
	end method
	method empty
	cthis size
	push 0
	cmpje
	ret
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	ret
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	ret
	end method
	method print
	call lsim,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	ret
	end method
	method set
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,set
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method additer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l234:
	push $3
	push 0
	cmpja
	cmp0
	je l235
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	sub $3,1
	pop $3
	jmp l234
l235:
	end method
	method buildarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newarray
	push $2
	push 0
	push $3
	cthis additer
	end method
	method deleteall
	localint $1
	push 0
	pop $1
l236:
	push $1
	cthis size
	cmpjl
	cmp0
	je l237
	jmp l239
l238:
	add $1,1
	pop $1
	jmp l236
l239:
	push $1
	cthis get
	spushs
	spop $d
	delete [$d]
	jmp l238
l237:
	end method
	method deleteallgm
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l240:
	push $2
	cthis size
	cmpjl
	cmp0
	je l241
	jmp l243
l242:
	add $2,1
	pop $2
	jmp l240
l243:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],vardel
	jmp l242
l241:
	end method
	method deleteallgmobj
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l244:
	push $2
	cthis size
	cmpjl
	cmp0
	je l245
	jmp l247
l246:
	add $2,1
	pop $2
	jmp l244
l247:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],deletegmobj
	jmp l246
l245:
	end method
	method lockall
	push "lock"
	cthis eval
	cthis print
	end method
	method unlockall
	push "unlock"
	cthis eval
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l249
	push $1
	call lsim,add
l249:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l250:
	push $2
	push $1
	cmpjne
	cmp0
	je l251
	push $2
	cthis addbegin
	pop $2
	jmp l250
l251:
	end method
	method addlist
	push A
	cthis sepadd
	end method
	method removelist
	push "remove"
	cthis withlist
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l253
	push $1
	cthis addbegin
	jmp l252
l253:
	push $2
	push $3
	cmpjae
	cmp0
	je l255
	push $1
	cthis add
	jmp l254
l255:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l256:
	push $4
	push $2
	cmpja
	cmp0
	je l257
	jmp l259
l258:
	sub $4,1
	pop $4
	jmp l256
l259:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l258
l257:
	push $2
	push $1
	cthis set
l254:
l252:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removefirst
	push 0
	call lsim,removeat
	end method
	method removelast
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l260:
	push $1
	cthis contains
	cmp0
	je l261
	push $1
	cthis remove
	jmp l260
l261:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l262:
	push $2
	cthis size
	cmpjl
	cmp0
	je l263
	jmp l265
l264:
	add $2,1
	pop $2
	jmp l262
l265:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l267
	push $2
	cthis removeat
l267:
	jmp l264
l263:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	ret
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	ret
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l268:
	push $2
	push $3
	cmpjle
	cmp0
	je l269
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l268
l269:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l271
	call $1,rand
	cthis get
	jmp l270
l271:
	push "null"
l270:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l273
	localint $3
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l274:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l275
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l277
	push "null"
	ret
l277:
	jmp l274
l275:
	push $3
	cthis get
	ret
l273:
	push "null"
	end method
	method buildfullvars
	push "gmobjvec0"
	cthis each
	end method
	method gmobjvec0
	localdef $1
	pop $1
	cthis buildfullname
	end method
	method buildvars
	push "gmobjvec1"
	cthis each
	end method
	method gmobjvec1
	localdef $1
	pop $1
	cthis getname
	cthis addtogamevars
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l279
l280:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l281
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l280
l281:
l279:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method isplaying
	localint $1
	push 0
	pop $1
l282:
	push $1
	cthis size
	cmpjl
	cmp0
	je l283
	jmp l285
l284:
	add $1,1
	pop $1
	jmp l282
l285:
	push $1
	cthis get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],isplaying
	cmp0
	je l287
	push 1
	ret
l287:
	jmp l284
l283:
	push 0
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l288:
	push $5
	push 0
	cmpjae
	cmp0
	je l289
	jmp l291
l290:
	sub $5,1
	pop $5
	jmp l288
l291:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l293
	push $5
	call lsim,get
	ret
l293:
	jmp l290
l289:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l294:
	push $5
	push 0
	cmpjae
	cmp0
	je l295
	jmp l297
l296:
	sub $5,1
	pop $5
	jmp l294
l297:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l299
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l299:
	jmp l296
l295:
	push 0
	ret
	end method
	method setframe
	localdef $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l300:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l301
	jmp l303
l302:
	add $2,1
	pop $2
	jmp l300
l303:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l302
l301:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l304:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l305
	jmp l307
l306:
	add $3,1
	pop $3
	jmp l304
l307:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l306
l305:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l308:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l309
	jmp l311
l310:
	add $4,1
	pop $4
	jmp l308
l311:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l310
l309:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l312:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l313
	jmp l315
l314:
	add $5,1
	pop $5
	jmp l312
l315:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l314
l313:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l316:
	push $3
	cthis size
	cmpjl
	cmp0
	je l317
	jmp l319
l318:
	add $3,1
	pop $3
	jmp l316
l319:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l321
	push $3
	ret
l321:
	jmp l318
l317:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l322:
	push $3
	cthis size
	cmpjl
	cmp0
	je l323
	jmp l325
l324:
	add $3,1
	pop $3
	jmp l322
l325:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l327
	push $3
	ret
l327:
	jmp l324
l323:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l328:
	push $2
	cthis size
	cmpjl
	cmp0
	je l329
	jmp l331
l330:
	add $2,1
	pop $2
	jmp l328
l331:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l330
l329:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l332:
	push $3
	cthis size
	cmpjl
	cmp0
	je l333
	jmp l335
l334:
	add $3,1
	pop $3
	jmp l332
l335:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l334
l333:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l336:
	push $4
	cthis size
	cmpjl
	cmp0
	je l337
	jmp l339
l338:
	add $4,1
	pop $4
	jmp l336
l339:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l338
l337:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l340:
	push $2
	cthis size
	cmpjl
	cmp0
	je l341
	jmp l343
l342:
	add $2,1
	pop $2
	jmp l340
l343:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l345
	push 0
	ret
l345:
	jmp l342
l341:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l347
	ret
l347:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l348:
	push $6
	cthis size
	cmpjl
	cmp0
	je l349
	jmp l351
l350:
	add $6,1
	pop $6
	jmp l348
l351:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l353
	push $6
	pop $3
	push $5
	pop $4
l353:
	jmp l350
l349:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l355
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l356
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l358
l356:
	push 0
	jmp l358
l357:
	push 1
l358:
	jmp l359
l354:
	push 0
	jmp l359
l355:
	push 1
l359:
	ret
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	new string,sanload
	push "null"
	pop sanload
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	ret
	end method
	method getposy
	push _iy
	ret
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	ret
	end method
	method getpy
	push _iy
	ret
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getz
	push _iz
	ret
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l361
	push _ix
	ret
l361:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l362:
	push $4
	push $1
	cmpjl
	cmp0
	je l363
	jmp l365
l364:
	add $4,1
	pop $4
	jmp l362
l365:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l367
	push $3
	pop $2
l367:
	jmp l364
l363:
	push $2
	ret
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l369
	push _iy
	ret
l369:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l370:
	push $4
	push $1
	cmpjl
	cmp0
	je l371
	jmp l373
l372:
	add $4,1
	pop $4
	jmp l370
l373:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l375
	push $3
	pop $2
l375:
	jmp l372
l371:
	push $2
	ret
	end method
	method _getpx
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l377
	push _ix
	ret
l377:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l378:
	push $4
	push $1
	cmpjl
	cmp0
	je l379
	jmp l381
l380:
	add $4,1
	pop $4
	jmp l378
l381:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l383
	push $3
	pop $2
l383:
	jmp l380
l379:
	push $2
	ret
	end method
	method _getpy
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l385
	push _iy
	ret
l385:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l386:
	push $4
	push $1
	cmpjl
	cmp0
	je l387
	jmp l389
l388:
	add $4,1
	pop $4
	jmp l386
l389:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l391
	push $3
	pop $2
l391:
	jmp l388
l387:
	push $2
	ret
	end method
	method _getw
	cthis getex
	cthis _getpx
	pop $b
	popax
	sub $a,$b
	end method
	method _geth
	cthis getey
	cthis _getpy
	pop $b
	popax
	sub $a,$b
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l393
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l393:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l394:
	push $3
	cthis size
	cmpjl
	cmp0
	je l395
	jmp l397
l396:
	add $3,1
	pop $3
	jmp l394
l397:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l396
l395:
	end method
	method nplay
	localint $1
	pop $1
	push "play"
	push $1
	cthis eval1
	end method
	method txtreset
	localint $1
	push 0
	pop $1
l398:
	push $1
	cthis size
	cmpjl
	cmp0
	je l399
	jmp l401
l400:
	add $1,1
	pop $1
	jmp l398
l401:
	push $1
	cthis get
	spushs
	push ""
	spop $a
	call [$a],txtset
	jmp l400
l399:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l402:
	push $5
	push 0
	cmpjae
	cmp0
	je l403
	jmp l405
l404:
	sub $5,1
	pop $5
	jmp l402
l405:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l407
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l407:
	jmp l404
l403:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method isinfunc
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l408:
	push $4
	push 0
	cmpjae
	cmp0
	je l409
	jmp l411
l410:
	sub $4,1
	pop $4
	jmp l408
l411:
	push $4
	call lsim,get
	spushs
	push $3
	spushs
	push $1
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l413
	push $4
	pop _ifound
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	ret
l413:
	jmp l410
l409:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method withincut
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push $1
	push "gmimgvec0"
	cthis ineach
	pop $1
	pop $2
	end method
	method gmimgvec0
	localdef $1
	pop $1
	localint $2
	pop $2
	localint $3
	pop $3
	push $2
	push $3
	cthis withincut
	push $3
	push $2
	end method
	method isincut
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l414:
	push $5
	push 0
	cmpjae
	cmp0
	je l415
	jmp l417
l416:
	sub $5,1
	pop $5
	jmp l414
l417:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],withincut
	cmp0
	je l419
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l421
l419:
	push 0
	jmp l421
l420:
	push 1
l421:
	cmp0
	je l422
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l422:
	jmp l416
l415:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method findif
	localstring $1
	pop $1
	push $1
	push 1
	cthis _find
	end method
	method getfound
	push _ifound
	ret
	end method
	method getsfound
	push _ifound
	cthis get
	ret
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findsfr
	localstring $1
	pop $1
	push "framename"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "actionnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec1"
	cthis find_closest
	end method
	method gmimgvec1
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method getsac
	localstring $1
	pop $1
	push $1
	cthis findsac
	cthis get
	end method
	method getsacfr
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l423:
	push $3
	cthis size
	cmpjl
	cmp0
	je l424
	jmp l426
l425:
	add $3,1
	pop $3
	jmp l423
l426:
	push $3
	cthis get
	spushs
	spop $a
	call [$a],actionname
	push $1
	cmpje
	cmp0
	je l428
	push $3
	cthis get
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpje
	jmp l430
l428:
	push 0
	jmp l430
l429:
	push 1
l430:
	cmp0
	je l431
	push $3
	cthis get
	ret
l431:
	jmp l425
l424:
	push "null"
	end method
	method blitto
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l432:
	push $2
	cthis size
	cmpjl
	cmp0
	je l433
	jmp l435
l434:
	add $2,1
	pop $2
	jmp l432
l435:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],blit
	jmp l434
l433:
	end method
	method sortz
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l436:
	push $2
	cthis size
	cmpjl
	cmp0
	je l437
	jmp l439
l438:
	add $2,1
	pop $2
	jmp l436
l439:
	push $2
	cthis get
	spushs
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	jmp l438
l437:
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l441
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l440
l441:
	push $1
	pop $3
l440:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l443
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l442
l443:
	push $1
	pop $3
l442:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	end method
	method deleteloaded
	cthis deleteallgm
	push sanload
	push "null"
	cmpjne
	cmp0
	je l445
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l445:
	end method
	end class

	class gmadvvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l446:
	push $5
	push 0
	cmpjae
	cmp0
	je l447
	jmp l449
l448:
	sub $5,1
	pop $5
	jmp l446
l449:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],butisin
	cmp0
	je l451
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l451:
	jmp l448
l447:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	end class

	class gmmaskvec
	parent gmadvvec
	method init
	clparent gmadvvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,butisin
	end method
	end class

	new int,igmsubtitle
	push 0
	pop igmsubtitle
	class Subtitle
	method init
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $7
	push 0.5
	pop $7
	localint $8
	localint $9
	localint $10
	push 255
	pop $8
	push 255
	pop $9
	push 255
	pop $10
	new int,iborx
	push $5
	pop iborx
	new int,ibory
	push $6
	pop ibory
	new font,fnt
	push $3
	push $4
	call fnt,load
	new int,ifontsize
	push $4
	pop ifontsize
	new db,dbl
	push "lang/"
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,load
	localstring $11
	localstring $12
	new vector,v1
	push "string"
	call v1,type
	localint $13
	push iResX
	push 2
	push $5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $7
	push $4
	pop $b
	popax
	mul $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop $13
	localint $14
	localint $15
	localint $16
	push 0
	pop $16
	localint $17
	push 0
	pop $17
l452:
	push $17
	call dbl,getrowsno
	cmpjl
	cmp0
	je l453
	jmp l455
l454:
	add $17,1
	pop $17
	jmp l452
l455:
	push $17
	push 0
	push $2
	push $17
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call dbl,set
	push $17
	push 1
	call dbl,get
	pop $11
	push $11
	push " "
	call v1,vecbuildfromstring
	push ""
	pop $12
	push 1
	pop $14
	push 0
	pop $15
l456:
	push $15
	call v1,size
	cmpjl
	cmp0
	je l457
	jmp l459
l458:
	add $15,1
	pop $15
	jmp l456
l459:
	call $12,length
	push $15
	call v1,get
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	push $13
	cmpjle
	cmp0
	je l461
	push " "
	push $15
	call v1,get
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	jmp l460
l461:
	push $14
	push 1
	cmpje
	cmp0
	je l463
	push $17
	push $14
	push $12
	call dbl,set
	jmp l462
l463:
	push $17
	push $12
	call dbl,add
l462:
	push $15
	call v1,get
	pop $12
	add $14,1
	pop $14
l460:
	jmp l458
l457:
	push $14
	push 1
	cmpje
	cmp0
	je l465
	push $17
	push $14
	push $12
	call dbl,set
	jmp l464
l465:
	push $17
	push $12
	call dbl,add
l464:
	push $14
	push $16
	cmpja
	cmp0
	je l467
	push $14
	pop $16
l467:
	jmp l454
l453:
	new gmimgvec,grtxt
	localint $17
	push 0
	pop $17
l468:
	push $17
	push $16
	cmpjl
	cmp0
	je l469
	jmp l471
l470:
	add $17,1
	pop $17
	jmp l468
l471:
	push "txt"
	push $17
	pop $b
	popax
	add $a,$b
	pop $11
	push "txts"
	push $17
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	push ""
	push "fnt"
	cthis black
	clparent classgame,newtext
	push $11
	push ""
	push "fnt"
	push $8
	push $9
	push $10
	clparent classgame,newtext
	push $11
	call grtxt,add
	push $12
	call grtxt,add
	jmp l470
l469:
	new db,dbsnd
	new timer,timtxt
	push 1
	call timtxt,settick
	push 1
	call timtxt,setcycle
	push "onfinish"
	push "Subtitle0"
	call timtxt,addmethod
	push 12000
	cthis setz
	end method
	method Subtitle0
	cthis cisplaying
	neg
	cmp0
	je l473
	cthis hidesubs
	jmp l472
l473:
	cthis play
l472:
	end method
	method reset
	cthis stop
	call dbsnd,free
	end method
	method hidesubs
	call grtxt,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	call grtxt,setz
	end method
	method stop
	cthis hidesubs
	push 0
	call timtxt,stop
	end method
	method register
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push $2
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l475
	localdef $4
	push $1
	call dbsnd,findbyrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l477
	push $4
	push 1
	push $3
	call dbsnd,set
	jmp l476
l477:
	localdef $4
	call dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	call dbsnd,add
	push $4
	push $3
	call dbsnd,add
l476:
l475:
	end method
	method play
	localstring $1
	pop $1
	cthis stop
	localdef $2
	push $1
	call dbsnd,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l479
	push $2
	push 1
	call dbsnd,get
	pop $2
	localdef $3
	push $2
	call dbl,getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	localstring $5
	localint $6
	push 0
	push 0
	call grtxt,setpos
	localint $7
	push 2
	pop $7
	localint $8
	push 0
	pop $8
l480:
	push $8
	push $3
	cmpjl
	cmp0
	je l481
	jmp l483
l482:
	add $8,1
	pop $8
	jmp l480
l483:
	push 2
	push $8
	pop $b
	popax
	mul $a,$b
	pop $6
	push $6
	call grtxt,get
	pop $4
	push $4
	spushs
	push $2
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	call dbl,get
	spop $a
	call [$a],txtset
	push $6
	push 1
	pop $b
	popax
	add $a,$b
	call grtxt,get
	pop $5
	push $5
	spushs
	push $4
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],txtset
	push $4
	spushs
	push iResX
	push $4
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $8
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $4
	spushs
	spop $a
	call [$a],show
	push $5
	spushs
	push $4
	spushs
	spop $a
	call [$a],getpx
	push 1
	pop $b
	popax
	add $a,$b
	push $4
	spushs
	spop $a
	call [$a],getpy
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $5
	spushs
	spop $a
	call [$a],show
	jmp l482
l481:
	push 0
	push iResY
	push $3
	push ifontsize
	push $7
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push ibory
	pop $b
	popax
	sub $a,$b
	call grtxt,move
	call timtxt,play
l479:
	end method
	end class

	push igmsubtitle
	cmp0
	je l485
	push "eng_egipt.db"
	push "sounds/"
	push sgmfontbold
	push 24
	push 50
	push 15
	new Subtitle,subtitle
l485:
	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	push igmsubtitle
	cmp0
	je l487
	call subtitle,reset
l487:
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	ret
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l489
	push $1
	cthis cbplay
	jmp l488
l489:
	cthis cgetactsnd
	push $1
	cmpjne
	cmp0
	je l491
	push $1
	cthis cbplay
l491:
l488:
	end method
	method cbselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	jne l494
	cthis cgetactsnd
	push $1
	cmpjne
	jmp l495
l493:
	push 0
	jmp l495
l494:
	push 1
l495:
	cmp0
	je l496
	push $1
	cthis cbplay
l496:
	end method
	method cbplay
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l498
	push _csplay
	spushs
	push 1
	spop $a
	call [$a],stop
l498:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l500
	push $1
	cthis csubplay
l500:
	end method
	method cbsplay
	localstring $1
	pop $1
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l502
	push $1
	cthis csubplay
l502:
	end method
	method cbplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	cthis cbplay
	end method
	method cbplay2
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l504
	push _csplay
	spushs
	push 0
	spop $a
	call [$a],stop
l504:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l506
	push $1
	cthis csubplay
l506:
	end method
	method crplay
	localstring $1
	pop $1
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l508
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l510
l508:
	push 0
	jmp l510
l509:
	push 1
l510:
	cmp0
	je l511
	ret
l511:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l513
	push $1
	cthis csubplay
l513:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l515
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	jmp l517
l515:
	push 0
	jmp l517
l516:
	push 1
l517:
	cmp0
	je l518
	push $1
	cthis csubplay
l518:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call $2,rand
	push 0
	cmpje
	cmp0
	je l520
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
l520:
	end method
	method cplayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "c"
	push $1
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $d
	cthis [$d]
	push $2
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l522
	push $3
	push "null"
	cmpjne
	jmp l524
l522:
	push 0
	jmp l524
l523:
	push 1
l524:
	cmp0
	je l525
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l525:
	end method
	method cactsndstop
	localint $1
	pop $1
	cthis cisplaying
	cmp0
	je l527
	push _csplay
	spushs
	push $1
	spop $a
	call [$a],stop
l527:
	end method
	method cstopsnds
	localint $1
	pop $1
	call _csplay,in
	cmp0
	je l529
	cthis cisplaying
	jmp l531
l529:
	push 0
	jmp l531
l530:
	push 1
l531:
	cmp0
	je l532
	push $1
	cthis cactsndstop
l532:
	end method
	method cisplaying
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l534
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l533
l534:
	push 0
l533:
	end method
	method csubplay
	localstring $1
	pop $1
	push igmsubtitle
	cmp0
	je l536
	push $1
	call subtitle,play
l536:
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	je l538
	push 0
	pop iile
	ret
l538:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l539:
	push $3
	push $2
	cmpjl
	cmp0
	je l540
	jmp l542
l541:
	add $3,1
	pop $3
	jmp l539
l542:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l541
l540:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	cmpjle
	cmp0
	je l544
	push 0
	pop iile
	ret
l544:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	cmpje
	cmp0
	je l546
	call iile,rand
	pop ilicz
l546:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l547:
	push $3
	push iile
	cmpjl
	cmp0
	je l548
	jmp l550
l549:
	add $3,1
	pop $3
	jmp l547
l550:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l549
l548:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	cmpjne
	cmp0
	je l552
	push splay
	spushs
	push $1
	spop $a
	call [$a],stop
l552:
	end method
	method isplaying
	push splay
	push "null"
	cmpjne
	cmp0
	je l554
	push splay
	spushs
	spop $a
	call [$a],isplaying
	jmp l553
l554:
	push 0
l553:
	end method
	method randplay
	localint $1
	pop $1
	call $1,rand
	push 0
	cmpje
	cmp0
	je l556
	cthis play
l556:
	end method
	method playid
	localint $1
	pop $1
	push $1
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	cthis play
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method reset
	push 0
	pop ilicz
	end method
	method rbgplay
	cthis isplaying
	neg
	cmp0
	je l558
	cthis bgplay
l558:
	end method
	method rplay
	cthis isplaying
	neg
	cmp0
	je l560
	cthis play
l560:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	spushs
	spop $a
	call [$a],play
	push itype
	push 0
	cmpje
	cmp0
	je l562
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l561
l562:
	push itype
	push 1
	cmpje
	cmp0
	je l564
	call iile,rand
	pop ilicz
l564:
l561:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l565:
	push $2
	push iile
	cmpjl
	cmp0
	je l566
	jmp l568
l567:
	add $2,1
	pop $2
	jmp l565
l568:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setvol
	jmp l567
l566:
	end method
	end class

	class SoundSource
	method init
	end method
	method setvol
	localstring $1
	localint $2
	localint $3
	localreal $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call $5,abs
	push $4
	cmpjae
	cmp0
	je l570
	push $1
	spushs
	push $3
	spop $a
	call [$a],setvol
	jmp l569
l570:
	push $1
	spushs
	push 1.0
	call $5,abs
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setvol
l569:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,_iconstid
	end method
	method bkg=
	localdef $1
	pop $1
	push ".pyz"
	call $1,contains
	cmp0
	je l572
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l571
l572:
	push "imgbkg"
	push $1
	push 0
	cthis newimg
l571:
	end method
	method bgr=
	localdef $1
	pop $1
	push $1
	cthis csndbgr
	end method
	method path=
	localdef $1
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	end method
	method cycle=
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis cnewtimercyclefin
	end method
	method timer=
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	end method
	method _getflags
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
	push "L"
	call $1,contains
	cmp0
	je l574
	push "L"
	call $1,strremove
	push 1
	pop $2
l574:
	localdef $3
	push 0
	pop $3
	push "P"
	call $1,contains
	cmp0
	je l576
	push "P"
	call $1,strremove
	push 1
	pop $3
l576:
	localdef $4
	push 0
	pop $4
	push "H"
	call $1,contains
	cmp0
	je l578
	push "H"
	call $1,strremove
	push 1
	pop $4
l578:
	push $1
	push $2
	push $3
	push $4
	ret
	end method
	method img=
	localdef $1
	pop $1
	localdef $2
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	push 0
	pop $5
	push " "
	call $1,contains
	cmp0
	je l580
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l580:
	localstring $6
	push "/"
	call $1,contains
	cmp0
	je l582
	new vector,_v_sfile
	push "string"
	call _v_sfile,type
	push $1
	push "/"
	call _v_sfile,vecbuildfromstring
	call _v_sfile,last
	spushs
	push 4
	spop $h
	call $h,strsube
	pop $6
	delete _v_sfile
	jmp l581
l582:
	push 4
	call $1,strsube
	pop $6
l581:
	localstring $7
	push ".pyz"
	call $1,contains
	cmp0
	je l584
	push "an"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	push $1
	push $5
	cthis newanima
	jmp l583
l584:
	push "img"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	push $1
	push $5
	cthis newimg
l583:
	push $2
	cmp0
	je l586
	push $7
	spushs
	spop $a
	call [$a],anloopfin
l586:
	push $3
	cmp0
	je l588
	push $7
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l588:
	push $4
	cmp0
	je l590
	push $7
	spushs
	spop $a
	call [$a],hide
l590:
	end method
	method imgs=
	push "img="
	cthis withlist
	end method
	method clone
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	cthis getname
	cthis gettype
	push $1
	spop $a
	call [$a],classgame0
	end method
	method classgame0
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	push $3
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method clones=
	push "clone"
	cthis withlist
	end method
	method list=
	localdef $1
	pop $1
	localdef $2
	pop $2
	push $1
	spushs
	spop $e
	new gmobjvec,[$e]
l591:
	push A
	push $2
	cmpjne
	cmp0
	je l592
	push $1
	spushs
	push $2
	spop $a
	call [$a],addbegin
	pop $2
	jmp l591
l592:
	end method
	method list2=
	localdef $1
	push "gmobjvec"
	cthis newconst
	pop $1
	push $1
	cthis list=
	push $1
	end method
	method debug=
	localdef $1
	pop $1
	push $1
	call engine,setdebugstate
	end method
	method sfx=
	localstring $1
	pop $1
	localint $2
	push "N"
	call $1,contains
	pop $2
	push $2
	cmp0
	je l594
	push "N"
	call $1,strremove
l594:
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	popax
	pop $4
	pop $3
	pop $1
	localdef $5
	push 100
	pop $5
	push " "
	call $1,contains
	cmp0
	je l596
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l596:
	localstring $6
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsfx
	push $6
	spushs
	push $5
	spop $a
	call [$a],setvol
	push $3
	cmp0
	je l598
	push $6
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l598:
	push $4
	cmp0
	je l600
	push $6
	spushs
	spop $a
	call [$a],play
	jmp l599
l600:
	push $2
	cmp0
	je l602
	push $6
	spushs
	spop $a
	call [$a],playloop
l602:
l599:
	end method
	method sfxs=
	push "sfx="
	cthis withlist
	end method
	method tickstart
	push "__timspeed"
	cthis hasvar
	neg
	cmp0
	je l604
	new TicksCounter,__timspeed
l604:
	call __timspeed,start
	end method
	method tickstop
	push "ticker: "
	call __timspeed,print
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis newbgr
	push "sndbgr"
	cthis sndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l606
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	push "imgkursor"
	pop $1
l606:
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call mouse,setcursor
	push $1
	call engine,stdbutcursor
	call bsms,setown
	end method
	method newimgarray
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildarray
	end method
	method newfont
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new font,[$e]
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],load
	end method
	method monofont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontmono
	push $2
	cthis newfont
	end method
	method newfontbold
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontbold
	push $2
	cthis newfont
	end method
	method snewfont
	localstring $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "font"
	cthis newconst
	pop $3
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	ret
	end method
	method stdfont
	localint $1
	pop $1
	push sgmfontfile
	push $1
	cthis snewfont
	end method
	method stdmono
	localint $1
	pop $1
	push sgmfontmono
	push $1
	cthis snewfont
	end method
	method stdbold
	localint $1
	pop $1
	push sgmfontbold
	push $1
	cthis snewfont
	end method
	method getconstid
	add _iconstid,1
	pop _iconstid
	push _iconstid
	push 1
	pop $b
	popax
	sub $a,$b
	end method
	method newconst
	localstring $1
	pop $1
	localstring $2
	push "const"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getconstid
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $2
	ret
	end method
	method consttext
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $8
	push "text"
	cthis newconst
	pop $8
	localstring $9
	push $4
	cthis stdfont
	pop $9
	push $8
	spushs
	push $9
	spop $a
	call [$a],setfont
	push $8
	spushs
	push $1
	spop $a
	call [$a],set
	push $8
	spushs
	push $5
	push $6
	push $7
	spop $a
	call [$a],createtxt
	push $8
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $8
	ret
	end method
	method newtext
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	spushs
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	spop $a
	call [$a],setfont
	push $1
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	end method
	method newtextposz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	cthis newtext
	push $1
	spushs
	push $7
	push $8
	push $9
	spop $a
	call [$a],anposz
	end method
	method newgrimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	push $2
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l607:
	push $2
	push $3
	cmpjle
	cmp0
	je l608
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l607
l608:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	spushs
	spop $e
	new classancounter,[$e]
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l609:
	push $6
	push $5
	cmpjl
	cmp0
	je l610
	jmp l612
l611:
	add $6,1
	pop $6
	jmp l609
l612:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l611
l610:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l613:
	push $7
	push $5
	cmpjl
	cmp0
	je l614
	jmp l616
l615:
	add $7,1
	pop $7
	jmp l613
l616:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l615
l614:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l617:
	push $7
	push $5
	cmpjl
	cmp0
	je l618
	jmp l620
l619:
	add $7,1
	pop $7
	jmp l617
l620:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l619
l618:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	spushs
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l621:
	push $3
	push $4
	cmpjl
	cmp0
	je l622
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	cmpjne
	cmp0
	je l624
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	cmpje
	cmp0
	jne l627
	push $12
	push "sfx"
	cmpje
	jmp l628
l626:
	push 0
	jmp l628
l627:
	push 1
l628:
	cmp0
	je l629
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	cmpje
	cmp0
	je l631
	push $14
	push $13
	cthis newsfx
	jmp l630
l631:
	push $14
	push $13
	cthis newsnd
l630:
	push $7
	push $6
	cmpjl
	cmp0
	je l633
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l635
	push $14
	spushs
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l634
l635:
	push 0
	push 4
	call $12,gete
	push "play"
	cmpje
	cmp0
	je l637
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l636
l637:
	push $12
	push "vol"
	cmpje
	cmp0
	je l639
	push $14
	spushs
	push $13
	spop $a
	call [$a],setvol
l639:
l636:
l634:
l633:
	jmp l625
l629:
	push $12
	push "group"
	cmpje
	cmp0
	je l641
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	cmpjl
	cmp0
	je l643
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l645
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
l645:
	jmp l642
l643:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l642:
	jmp l640
l641:
	push $12
	push "bank"
	cmpje
	cmp0
	je l647
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	cmpjl
	cmp0
	je l649
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l651
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	spushs
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l650
l651:
	push $12
	push "vol"
	cmpje
	cmp0
	je l653
	push $14
	spushs
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
l653:
l650:
l649:
	jmp l646
l647:
	push $12
	push "method"
	cmpje
	cmp0
	je l655
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l656:
	push $8
	push $9
	cmpjle
	cmp0
	je l657
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l656
l657:
	jmp l654
l655:
	push $12
	push "singlebank"
	cmpje
	cmp0
	je l659
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l658
l659:
	push $12
	push "bgr"
	cmpje
	cmp0
	je l661
	push $14
	cthis csndbgr
	push $7
	push $6
	cmpjl
	cmp0
	je l663
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l665
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l665:
l663:
	jmp l660
l661:
	push $12
	push "music"
	cmpje
	cmp0
	je l667
	push $14
	cthis playmusic
	push $7
	push $6
	cmpjl
	cmp0
	je l669
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l671
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l671:
l669:
l667:
l660:
l658:
l654:
l646:
l640:
l625:
l624:
	add $3,1
	pop $3
	jmp l621
l622:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l672:
	push $2
	push $3
	cmpjle
	cmp0
	je l673
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $5
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	cmpje
	cmp0
	je l675
	push $2
	ret
l675:
	add $2,1
	pop $2
	jmp l672
l673:
	push 1
	popax
	sub 0,$a
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	cmpjae
	cmp0
	je l677
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l677:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis build2
	end method
	method build2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new anima,[$e]
	push $5
	spushs
	push $1
	spop $a
	call [$a],load
	push $5
	spushs
	push $2
	spop $a
	call [$a],setz
	localint $6
	push $5
	spushs
	spop $a
	call [$a],nofactions
	pop $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $9
	localstring $10
	localstring $11
	localstring $12
	localstring $13
	localint $14
	push 0
	pop $14
l678:
	push $14
	push $6
	cmpjl
	cmp0
	je l679
	jmp l681
l680:
	add $14,1
	pop $14
	jmp l678
l681:
	push "null"
	pop $10
	push "null"
	pop $11
	push "null"
	pop $12
	push $5
	spushs
	push $14
	spop $a
	call [$a],nofframes
	pop $7
	push 1
	pop $8
l682:
	push $8
	push $7
	cmpjle
	cmp0
	je l683
	jmp l685
l684:
	add $8,1
	pop $8
	jmp l682
l685:
	push san
	push $9
	pop $b
	popax
	add $a,$b
	pop $13
	push $8
	push 1
	cmpje
	cmp0
	je l687
	push $13
	pop $10
	jmp l686
l687:
	push $8
	push 2
	cmpje
	cmp0
	je l689
	push $13
	pop $11
	jmp l688
l689:
	push $8
	push 3
	cmpje
	cmp0
	je l691
	push $13
	pop $12
l691:
l688:
l686:
	push $5
	push $13
	clparent newvars,copyanima
	push $13
	spushs
	push $14
	push $8
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $9,1
	pop $9
	jmp l684
l683:
	push $4
	push "null"
	cmpjne
	cmp0
	je l693
	push $4
	spushs
	push $5
	spushs
	push $14
	spop $a
	call [$a],nameofaction
	spop $a
	call [$a],contains
	jmp l695
l693:
	push 0
	jmp l695
l694:
	push 1
l695:
	cmp0
	je l696
	push $10
	spushs
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	jmp l692
l696:
	push $10
	push $11
	push $12
	push $3
	cthis addbut
l692:
	jmp l680
l679:
	push $5
	spushs
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l698
	push sfxmon
	spushs
	spop $a
	call [$a],play
l698:
	push _sfunmovon
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpje
	cmp0
	je l700
	ret
l700:
	push $1
	spushs
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $4
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	spushs
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l701:
	push $5
	push iilebut
	cmpjl
	cmp0
	je l702
	jmp l704
l703:
	add $5,1
	pop $5
	jmp l701
l704:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l703
l702:
	end method
	method print
	localint $1
	push 0
	pop $1
l705:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l706
	jmp l708
l707:
	add $1,1
	pop $1
	jmp l705
l708:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l707
l706:
	end method
	method setrect
	localstring $1
	localint $2
	push 0
	pop $2
l709:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l710
	jmp l712
l711:
	add $2,1
	pop $2
	jmp l709
l712:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getimg
	pop $1
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	spop $a
	call [$a],setrect
	jmp l711
l710:
	end method
	method setflags
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l713:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l714
	jmp l716
l715:
	add $3,1
	pop $3
	jmp l713
l716:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setflags
	jmp l715
l714:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l718
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	jmp l717
l718:
	push "null"
l717:
	ret
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l719:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l720
	jmp l722
l721:
	add $2,1
	pop $2
	jmp l719
l722:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l721
l720:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	cmpja
	cmp0
	je l724
	push iilebut
	pop $2
l724:
	localint $3
	push 0
	pop $3
l725:
	push $3
	push $2
	cmpjl
	cmp0
	je l726
	jmp l728
l727:
	add $3,1
	pop $3
	jmp l725
l728:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l727
l726:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method disabled
	push sbut
	push 0
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disabled
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method resetall
	localint $1
	push 0
	pop $1
l729:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l730
	jmp l732
l731:
	add $1,1
	pop $1
	jmp l729
l732:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setcursorpos
	jmp l731
l730:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l733:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l734
	jmp l736
l735:
	add $3,1
	pop $3
	jmp l733
l736:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setcursorpos
	jmp l735
l734:
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l738
	push $2
	spushs
	spop $a
	call [$a],getimg
	jmp l737
l738:
	push "null"
l737:
	ret
	end method
	method callimgfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getimg
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	cmpjne
	cmp0
	je l740
	push $3
	spushs
	push $2
	spop $a
	call [$a],setmouse
l740:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l742
	ret
l742:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	spushs
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	spushs
	push _sfcl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	spushs
	push _sfrl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l744
	push sfxmon
	spushs
	spop $a
	call [$a],play
l744:
	push _sobmn
	spushs
	push _sfmn
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	spushs
	push _sfmf
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classsimplebutton
	method init
	new string,simgob
	push "null"
	pop simgob
	new gmimgvec,grbut
	end method
	method stdbuild
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push 0
	push 0
	push $3
	push 0
	cthis build
	end method
	method getimgfunc
	localstring $1
	pop $1
	push simgob
	push "null"
	cmpje
	cmp0
	je l746
	push 0
	jmp l745
l746:
	push simgob
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l745:
	end method
	method setbutpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grbut,setpos
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new button,but1
	cthis getname
	call but1,classsimplebutton0
	push "onclick"
	push "classsimplebutton1"
	call but1,addmethod
	push "onrel"
	push "classsimplebutton2"
	call but1,addmethod
	push "onmoveon"
	push "classsimplebutton3"
	call but1,addmethod
	push "onmoveoff"
	push "classsimplebutton4"
	call but1,addmethod
	push ".pyz"
	call $1,contains
	cmp0
	je l748
	new anima,anbut0
	push $1
	call anbut0,load
	push $3
	push $4
	call anbut0,setpos
	push $5
	call anbut0,setz
	push $6
	push 0
	call anbut0,setframe
	push "anbut0"
	pop simgob
	push simgob
	call grbut,add
	localstring $7
	push "anbut0"
	pop $7
	localstring $8
	push "null"
	pop $8
	localstring $9
	push "null"
	pop $9
	localint $10
	push $6
	call anbut0,nofframes
	pop $10
	push $10
	push 1
	cmpja
	cmp0
	je l750
	new anima,anbut1
	push "anbut0"
	call anbut1,copy
	push $6
	push 1
	call anbut1,setframe
	push "anbut1"
	pop $8
	push $8
	call grbut,add
l750:
	push $10
	push 2
	cmpja
	cmp0
	je l752
	new anima,anbut2
	push "anbut0"
	call anbut2,copy
	push $6
	push 2
	call anbut2,setframe
	push "anbut2"
	pop $8
	push $8
	call grbut,add
l752:
	push $7
	push $8
	push $9
	call but1,setan
	jmp l747
l748:
	new img,imgbut
	push "imgbut"
	pop simgob
	push simgob
	call grbut,add
	push $1
	call imgbut,load
	push $3
	push $4
	call imgbut,setpos
	push $5
	call imgbut,setz
	push "imgbut"
	push "null"
	push "null"
	call but1,set
l747:
	push $2
	call but1,setmouse
	end method
	method classsimplebutton0
	localstring $1
	pop $1
	new string,sbut
	push $1
	pop sbut
	end method
	method classsimplebutton1
	push sbut
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton2
	push sbut
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton3
	push sbut
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton4
	push sbut
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l753:
	push $4
	push $3
	cmpjl
	cmp0
	je l754
	jmp l756
l755:
	add $4,1
	pop $4
	jmp l753
l756:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l755
l754:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	cmpje
	cmp0
	je l758
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l757
l758:
	push $5
	spushs
	push $2
	spop $a
	call [$a],_cbuildbutname
l757:
	push $4
	cmp0
	je l760
	push $5
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	spushs
	spop $a
	call [$a],hide
l760:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l762
	push $1
	push "null"
	cmpje
	cmp0
	je l764
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l763
l764:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l763:
l762:
	end method
	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method _stdsndloop
	cthis play
	end method
	method __std_finish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	ret
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	ret
	end method
	method strgetto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l766
	cthis get
	jmp l765
l766:
	push 0
	push $2
	cthis getb
l765:
	end method
	method streq
	localstring $1
	pop $1
	cthis get
	push 0
	cthis length
	call $1,getb
	cmpje
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	ret
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	ret
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method strisbetween
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	localint $4
	push 0
	pop $4
l767:
	push $4
	cthis length
	cmpjl
	cmp0
	je l768
	jmp l770
l769:
	add $4,1
	pop $4
	jmp l767
l770:
	push $4
	cthis getbyte
	pop $3
	push $3
	push $1
	cmpjl
	cmp0
	jne l773
	push $3
	push $2
	cmpja
	jmp l774
l772:
	push 0
	jmp l774
l773:
	push 1
l774:
	cmp0
	je l775
	push 0
	ret
l775:
	jmp l769
l768:
	push 1
	end method
	method strisint
	push BYTE0
	push BYTE9
	cthis strisbetween
	end method
	method strisbin
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis strisbetween
	end method
	method strisalpha
	push BYTEa
	push BYTEz
	cthis strisbetween
	end method
	method streach
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l776:
	push $3
	cthis length
	cmpjl
	cmp0
	je l777
	jmp l779
l778:
	add $3,1
	pop $3
	jmp l776
l779:
	push $3
	push 1
	cthis getb
	pop $2
	push $2
	spushs
	push $1
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l778
l777:
	end method
	method strdotpos
	localint $1
	pop $1
	push "."
	cthis strgetto
	push "."
	pop $b
	popax
	add $a,$b
	push "."
	cthis strgetfrom
	spushs
	push 0
	push $1
	spop $h
	call $h,getb
	pop $b
	popax
	add $a,$b
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l781
	push 0
	jmp l780
l781:
	push 100
	spushs
	spop $h
	call $h,rand
	push $1
	cmpjle
l780:
	end method
	method between
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l783
	push $1
	jmp l782
l783:
	push $2
	push $3
	cmpja
	cmp0
	je l785
	push $3
	jmp l784
l785:
	push $2
l784:
l782:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l787
	push $1
	jmp l786
l787:
	push $2
l786:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l789
	push $1
	jmp l788
l789:
	push $2
l788:
	end method
	method imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push "1111"
	cthis imgborderss
	end method
	method imgborderss
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 3
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l791
	push "_img_bor"
	cthis blit
l791:
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push 1
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l793
	push "_img_bor"
	cthis blit
l793:
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 0
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l795
	push "_img_bor"
	cthis blit
l795:
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push 2
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l797
	push "_img_bor"
	cthis blit
l797:
	delete _img_bor
	end method
	method imgroundborder
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis imgborders
	cthis imgerasecorners
	end method
	method imgerasecorners
	localdef $1
	cthis getpx
	pop $1
	localdef $2
	cthis getpy
	pop $2
	push $1
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	push $1
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	end method
	method imgdrawline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "blit"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgeraseline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "erase"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgputoncenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method imgfuncline
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $9
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	pop $9
	localdef $10
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	pop $10
	localreal $11
	push $9
	push 0
	cmpje
	cmp0
	je l799
	push $10
	push 0
	cmpjl
	cmp0
	je l801
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l802:
	push $11
	push $6
	cmpjae
	cmp0
	je l803
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	sub $11,$a
	pop $11
	jmp l802
l803:
	push $6
	push $11
	pop $b
	popax
	sub $a,$b
	jmp l800
l801:
	push $10
	push 0
	cmpja
	cmp0
	je l805
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l806:
	push $11
	push $6
	cmpjle
	cmp0
	je l807
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $11,$a
	pop $11
	jmp l806
l807:
	push $11
	push $6
	pop $b
	popax
	sub $a,$b
	jmp l804
l805:
	push $8
l804:
l800:
	jmp l798
l799:
	push $9
	push $10
	call $8,length
	pop $11
	localreal $12
l808:
	push $8
	push $11
	cmpjle
	cmp0
	je l809
	push 1.0
	push $11
	push $8
	pop $b
	popax
	sub $a,$b
	push $11
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $12
	push $2
	spushs
	push $12
	push $9
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push $12
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $8,$a
	pop $8
	jmp l808
l809:
	push $8
	push $11
	pop $b
	popax
	sub $a,$b
l798:
	end method
	method anresizemets
	cthis getname
	clparent anima_pack,resizemethods
	end method
	method anfirstnontr
	cthis getname
	cthis getpx
	cthis getpy
	push 1
	push 0
	clparent classansearcher,_findnotr
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ancenterscreen
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis ansetcpos
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method ansetsframe
	localdef $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	cthis setframe
	localint $3
	push 0
	pop $3
l810:
	push $3
	push 1
	popax
	sub 0,$a
	cthis nofframes
	cmpjl
	cmp0
	je l811
	cthis framename
	push $2
	cmpjne
	jmp l813
l811:
	push 0
	jmp l813
l812:
	push 1
l813:
	cmp0
	je l814
	add $3,1
	pop $3
	push 1
	popax
	sub 0,$a
	push $3
	cthis setframe
	jmp l810
l814:
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	ret
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	end method
	method objplayloop
	cthis objloop
	cthis play
	end method
	method anplayfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method anposz
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	ret
	end method
	method annextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method ansetnextact
	cthis annextact
	push 0
	cthis setframe
	end method
	method ansetnextfr
	push 1
	popax
	sub 0,$a
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	cthis setframe
	end method
	method anhasaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	cthis nofactions
	cmpjne
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anaddfx
	cthis getname
	clparent AnimaFx,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method angetcpos
	cthis getcx
	cthis getcy
	ret
	end method
	method angetcrgba
	cthis getcx
	cthis getcy
	cthis getrgba
	end method
	method anisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l815:
	push $5
	cthis nofactions
	cmpjl
	cmp0
	je l816
	jmp l818
l817:
	add $5,1
	pop $5
	jmp l815
l818:
	push $5
	push 0
	cthis setframe
	push $1
	push $2
	push $3
	push $4
	cthis isin
	cmp0
	je l820
	push $5
	ret
l820:
	jmp l817
l816:
	push 1
	popax
	sub 0,$a
	end method
	method anreload
	localstring $1
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	localint $3
	cthis framenr
	pop $3
	localint $4
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpjne
	pop $4
	localint $5
	localint $6
	cthis getpos
	pop $6
	pop $5
	localint $7
	cthis getz
	pop $7
	push $1
	cthis getpath
	cthis load
	push $5
	push $6
	cthis setpos
	push $7
	cthis setz
	push $2
	cthis nofactions
	cmpjl
	cmp0
	je l822
	push $4
	cmp0
	je l824
	push $2
	cthis play
l824:
	push $2
	push $3
	cthis setframe
	jmp l821
l822:
	push 0
	push 0
	cthis setframe
l821:
	end method
	method anclipob
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	cthis clip
	end method
	method ancopyan
	localstring $1
	pop $1
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l826
	cthis show
	jmp l825
l826:
	cthis hide
l825:
	push $1
	spushs
	spop $a
	call [$a],getpos
	cthis setpos
	end method
	method anconstmove
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push A
	push "mvx"
	push $2
	push "mvy"
	push $3
	cthis vars2
	push $1
	cthis setdelay
	push 1
	popax
	sub 0,$a
	push "global4"
	cthis anplayfin
	end method
	method global4
	push 1
	popax
	sub 0,$a
	cthis play
	push mvx
	push mvy
	cthis move
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis set
	cthis create
	end method
	method txtsetcol
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push $2
	push $3
	push $4
	cthis createtxt
	end method
	method txtshadow
	localint $1
	localstring $2
	pop $2
	pop $1
	push "txts"
	cthis hasvar
	neg
	cmp0
	je l828
	new text,txts
	push $2
	call txts,setfont
l828:
	cthis get
	call txts,set
	cthis getpx
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $1
	pop $b
	popax
	add $a,$b
	call txts,setpos
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	call txts,setz
	call txts,show
	push 0
	push 0
	push 0
	call txts,createtxt
	end method
	method txthides
	cthis hide
	push "txts"
	cthis hasvar
	cmp0
	je l830
	call txts,hide
l830:
	end method
	method txtisin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l831
	push $1
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l831
	push $2
	cthis getpy
	cmpjae
	cmp0
	je l831
	push $2
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	cmpjle
	jmp l833
l831:
	push 0
	jmp l833
l832:
	push 1
l833:
	end method
	method txtcenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtright
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	cthis getw
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l835
	localint $2
	push 0
	pop $2
l836:
	push $2
	push $1
	cmpjl
	cmp0
	je l837
	jmp l839
l838:
	add $2,1
	pop $2
	jmp l836
l839:
	push $2
	cthis add
	jmp l838
l837:
l835:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l840:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l841
	jmp l843
l842:
	add $2,1
	pop $2
	jmp l840
l843:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l842
l841:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l845
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l845:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l847
	sub $2,1
	pop $2
	jmp l846
l847:
	push $2
	push 0
	cmpje
	cmp0
	je l849
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l849:
l846:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l850
	push $1
	cthis size
	cmpjl
	jmp l852
l850:
	push 0
	jmp l852
l851:
	push 1
l852:
	cmp0
	je l854
	push $1
	cthis get
	jmp l853
l854:
	push "null"
l853:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l856
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l855
l856:
	push "null"
l855:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l857:
	cthis size
	push $1
	cmpja
	cmp0
	je l858
	cthis vecpop
	popax
	jmp l857
l858:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	ret
	end method
	method vecreplace
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l860
	push $3
	push $2
	cthis set
l860:
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l862
	ret
l862:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l863:
	push $8
	push $1
	cmpjl
	cmp0
	je l864
	jmp l866
l865:
	add $8,1
	pop $8
	jmp l863
l866:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l867:
	push $9
	push $1
	cmpjl
	cmp0
	je l868
	jmp l870
l869:
	add $9,1
	pop $9
	jmp l867
l870:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l872
	push $6
	pop $5
	push $9
	pop $7
l872:
	jmp l869
l868:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l865
l864:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l873:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l874
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l873
l874:
	call $1,length
	push 0
	cmpja
	cmp0
	je l876
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l876:
	end method
	method obbuildfromstring2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l877:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l878
	push $4
	push 0
	cmpja
	cmp0
	je l880
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
l880:
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l877
l878:
	call $1,length
	push 0
	cmpja
	cmp0
	je l882
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l882:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecbuildfromstring2
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring2
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l883:
	push $2
	push $1
	cmpjl
	cmp0
	je l884
	jmp l886
l885:
	add $2,1
	pop $2
	jmp l883
l886:
	push 0
	cthis removeat
	jmp l885
l884:
	end method
	method vecremovefrom
	localint $1
	pop $1
l887:
	push $1
	cthis size
	cmpjl
	cmp0
	je l888
	push $1
	cthis removeat
	jmp l887
l888:
	end method
	method vecfindfrom
	localint $1
	localdef $2
	pop $2
	pop $1
l889:
	push $1
	cthis size
	cmpjl
	cmp0
	je l890
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l892
	push $1
	ret
	jmp l891
l892:
	add $1,1
	pop $1
l891:
	jmp l889
l890:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l895
	cthis size
	push 0
	cmpje
	jmp l896
l894:
	push 0
	jmp l896
l895:
	push 1
l896:
	cmp0
	je l897
	ret
l897:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l899
	localint $4
	push $1
	pop $4
l900:
	push $4
	push $2
	cmpja
	cmp0
	je l901
	jmp l903
l902:
	sub $4,1
	pop $4
	jmp l900
l903:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l902
l901:
	jmp l898
l899:
	push $1
	push $2
	cmpjl
	cmp0
	je l905
	localint $4
	push $1
	pop $4
l906:
	push $4
	push $2
	cmpjl
	cmp0
	je l907
	jmp l909
l908:
	add $4,1
	pop $4
	jmp l906
l909:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l908
l907:
l905:
l898:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l911
	push $2
	push 0
	cthis vecposfromto
	jmp l910
l911:
	push $1
	cthis addbegin
l910:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l913
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l912
l913:
	push $1
	cthis addbegin
l912:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l915
	push $3
	push $2
	cthis set
l915:
	end method
	method veceq
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjne
	cmp0
	je l917
	push 0
	ret
l917:
	localint $3
	push 0
	pop $3
l918:
	push $3
	push $2
	cmpjl
	cmp0
	je l919
	jmp l921
l920:
	add $3,1
	pop $3
	jmp l918
l921:
	push $3
	cthis get
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l923
	push 0
	ret
l923:
	jmp l920
l919:
	push 1
	end method
	method vecbuild
	push "addbegin"
	cthis withlist
	end method
	method veceq2
	new vector,___v
	cthis getvectype
	call ___v,type
	call ___v,vecbuild
	localint $1
	push "___v"
	cthis veceq
	pop $1
	delete ___v
	push $1
	end method
	method veccopydbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	cthis vecadddbrow
	end method
	method vecadddbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l924:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l925
	jmp l927
l926:
	add $3,1
	pop $3
	jmp l924
l927:
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l926
l925:
	end method
	method vecchecknext
	localint $1
	pop $1
	add $1,1
	pop $1
	push $1
	cthis size
	cmpjl
	cmp0
	je l929
	push $1
	cthis get
	jmp l928
l929:
	push "null"
l928:
	end method
	method vecsum
	cthis size
	cmp0
	je l931
	localdef $1
	push 0
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
l932:
	push $2
	cthis size
	cmpjl
	cmp0
	je l933
	jmp l935
l934:
	add $2,1
	pop $2
	jmp l932
l935:
	push $2
	cthis get
	popax
	add $1,$a
	pop $1
	jmp l934
l933:
	push $1
	jmp l930
l931:
	push 0
l930:
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l937
	ret
l937:
	sub $1,1
	pop $1
	cthis free
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l938:
	push $2
	push A
	cmpjne
	cmp0
	je l939
	jmp l941
l940:
	jmp l938
l941:
	push $4
	push 0
	cmpje
	cmp0
	je l943
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l943:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l945
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l944
l945:
	push 0
l944:
	pop $4
	jmp l940
l939:
	end method
	method dbbuild2
	cthis free
	localstring $1
	pop $1
l946:
	push $1
	push A
	cmpjne
	cmp0
	je l947
	push $1
	push "null"
	cmpje
	cmp0
	je l949
	cthis addbeginrow
	popax
	jmp l948
l949:
	push 0
	push $1
	cthis addbegin
l948:
	pop $1
	jmp l946
l947:
	end method
	method dbaddvec
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l950:
	push $3
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l951
	jmp l953
l952:
	add $3,1
	pop $3
	jmp l950
l953:
	push $2
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l952
l951:
	end method
	method dbcopy
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis dbcopyfromto
	end method
	method dbcopyrow
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis dbcopyfromto
	end method
	method dbcopyfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis free
	localint $4
	localint $5
	localint $6
	push $2
	pop $4
l954:
	push $4
	push $3
	cmpjl
	cmp0
	je l955
	jmp l957
l956:
	add $4,1
	pop $4
	jmp l954
l957:
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push 0
	pop $5
l958:
	push $5
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l959
	jmp l961
l960:
	add $5,1
	pop $5
	jmp l958
l961:
	push $6
	push $1
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	cthis add
	jmp l960
l959:
	jmp l956
l955:
	end method
	method dbadddbrowtorow
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l962:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l963
	jmp l965
l964:
	add $4,1
	pop $4
	jmp l962
l965:
	push $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	cthis add
	jmp l964
l963:
	end method
	method dbremovecol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l966:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l967
	jmp l969
l968:
	add $2,1
	pop $2
	jmp l966
l969:
	push $2
	cthis getcolsno
	push $1
	cmpja
	cmp0
	je l971
	push $2
	push $1
	cthis removeat
l971:
	jmp l968
l967:
	end method
	method dbcopyfromtos
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis dbcopyfromto
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l973
l974:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l975
	cthis dbremovelast
	jmp l974
l975:
	jmp l972
l973:
	cthis free
l972:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbgetstringrow
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push $1
	cthis getcolsno
	pop $3
	localint $4
	push 0
	pop $4
l976:
	push $4
	push $3
	cmpjl
	cmp0
	je l977
	jmp l979
l978:
	add $4,1
	pop $4
	jmp l976
l979:
	push $1
	push $4
	cthis get
	popax
	add $2,$a
	pop $2
	jmp l978
l977:
	push $2
	end method
	method dbaddrow
	localdef $1
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	pop $2
l980:
	push A
	push $2
	cmpjne
	cmp0
	je l981
	push $1
	push $2
	cthis addbegin
	localdef $2
	pop $2
	jmp l980
l981:
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l983
	push $3
	push 0
	cmpjae
	jmp l985
l983:
	push 0
	jmp l985
l984:
	push 1
l985:
	cmp0
	je l986
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l987:
	push $3
	push $5
	cmpjl
	cmp0
	je l988
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l987
l988:
l986:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l990
	push $1
	push $2
	cthis get
	jmp l989
l990:
	push "null"
l989:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis findbyrow
	push $2
	cthis get
	ret
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l991:
	push $2
	push 0
	cmpjae
	cmp0
	je l992
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l994
	push $2
	ret
l994:
	sub $2,1
	pop $2
	jmp l991
l992:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	ret
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l996
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l996:
	push 0
	ret
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l998
	localint $3
	push 0
	pop $3
l999:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1000
	jmp l1002
l1001:
	add $3,1
	pop $3
	jmp l999
l1002:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l1004
	push $3
	ret
l1004:
	jmp l1001
l1000:
l998:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1005:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l1006
	jmp l1008
l1007:
	add $3,1
	pop $3
	jmp l1005
l1008:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1010
	push $3
	ret
l1010:
	jmp l1007
l1006:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	ret
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	ret
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	ret
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method dbsetall
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1011:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1012
	jmp l1014
l1013:
	add $2,1
	pop $2
	jmp l1011
l1014:
	localdef $3
	push 0
	pop $3
l1015:
	push $3
	push $2
	cthis getcolsno
	cmpjl
	cmp0
	je l1016
	jmp l1018
l1017:
	add $3,1
	pop $3
	jmp l1015
l1018:
	push $2
	push $3
	push $1
	cthis set
	jmp l1017
l1016:
	jmp l1013
l1012:
	end method
	method dbeach_row
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1019:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1020
	jmp l1022
l1021:
	add $2,1
	pop $2
	jmp l1019
l1022:
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	jmp l1021
l1020:
	end method
	method dbeq
	localstring $1
	pop $1
	cthis getrowsno
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjne
	cmp0
	je l1024
	push 0
	ret
l1024:
	localint $2
	localint $3
	localint $4
	push 0
	pop $4
l1025:
	push $4
	cthis getrowsno
	cmpjl
	cmp0
	je l1026
	jmp l1028
l1027:
	add $4,1
	pop $4
	jmp l1025
l1028:
	push $4
	cthis getcolsno
	pop $2
	push $2
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjne
	cmp0
	je l1030
	push 0
	ret
l1030:
	push 0
	pop $3
l1031:
	push $3
	push $2
	cmpjl
	cmp0
	je l1032
	jmp l1034
l1033:
	add $3,1
	pop $3
	jmp l1031
l1034:
	push $4
	push $3
	cthis get
	push $1
	spushs
	push $4
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1036
	push 0
	ret
l1036:
	jmp l1033
l1032:
	jmp l1027
l1026:
	push 1
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1038
	push 1
	popax
	sub 0,$a
	ret
l1038:
	localint $3
	call $1,rand
	pop $3
l1039:
	push $3
	push $2
	cmpje
	cmp0
	je l1040
	jmp l1042
l1041:
	call $1,rand
	pop $3
	jmp l1039
l1042:
	jmp l1041
l1040:
	push $3
	ret
	end method
	method bin_to_i
	localstring $1
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	call $1,length
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1043:
	push $4
	push 0
	cmpjae
	cmp0
	je l1044
	jmp l1046
l1045:
	sub $4,1
	pop $4
	jmp l1043
l1046:
	push $4
	push 1
	call $1,getb
	push "1"
	cmpje
	cmp0
	je l1048
	push $2
	popax
	add $3,$a
	pop $3
l1048:
	push 2
	popax
	mul $2,$a
	pop $2
	jmp l1045
l1044:
	push $3
	end method
	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push 800
	push 600
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class TicksCounter
	method init
	new int,istart
	end method
	method start
	call engine,getticks
	pop istart
	end method
	method stop
	call engine,getticks
	push istart
	pop $b
	popax
	sub $a,$b
	pop istart
	end method
	method get
	push istart
	ret
	end method
	method stopget
	cthis stop
	cthis get
	ret
	end method
	method print
	localstring $1
	pop $1
	push $1
	push " delay: "
	pop $b
	popax
	add $a,$b
	cthis stopget
	pop $b
	popax
	add $a,$b
	push " ms"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method put
	push ""
	cthis print
	end method
	end class

	class ObjController
	method init
	new string,_sme
	cthis getname
	pop _sme
	push GAME
	spushs
	push _sme
	spop $a
	call [$a],addgmobj
	end method
	method removefromgame
	push GAME
	spushs
	push _sme
	spop $a
	call [$a],removegmobj
	end method
	end class

	class LObjController
	parent ObjController
	parent classlocker
	method init
	clparent ObjController,init
	clparent classlocker,init
	end method
	end class

	class gmbankvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	push "iid"
	push 1
	popax
	sub 0,$a
	cthis var2
	end method
	method startrand
	cthis size
	push 0
	cmpja
	cmp0
	je l1050
	cthis size
	spushs
	spop $h
	call $h,rand
	pop iid
l1050:
	end method
	method play
	push 0
	cthis stop
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpje
	cmp0
	je l1052
	ret
l1052:
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	cthis get
	spushs
	spop $a
	call [$a],play
	end method
	method onfinish
	end method
	method stop
	localint $1
	pop $1
	cthis isplaying
	cmp0
	je l1054
	cthis getplay
	spushs
	push $1
	spop $a
	call [$a],stop
	push $1
	cmp0
	je l1056
	cthis onfinish
l1056:
l1054:
	end method
	method isplaying
	push iid
	push 0
	cmpjae
	cmp0
	je l1058
	cthis getplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l1057
l1058:
	push 0
l1057:
	end method
	method getplay
	push iid
	cthis get
	ret
	end method
	end class

	class GameController
	parent classlocker
	method init
	localstring $1
	pop $1
	clparent classlocker,init
	new gmobjvec,__grobj
	new db,_dbsnd
	push "|"
	call _dbsnd,setseparator
	new string,_sndbase
	push $1
	pop _sndbase
	new string,GAME
	cthis getname
	pop GAME
	new timer,__dblclick
	push 250
	call __dblclick,delay
	push 1
	call __dblclick,settick
	push "wavmp3"
	push "wav"
	cthis var2
	end method
	method game_exit
	end method
	method setsndbase
	localstring $1
	pop $1
	push $1
	pop _sndbase
	end method
	method say
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis sayf
	end method
	method sayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push $2
	cthis getsndtxt
	pop $4
	push $4
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	push $4
	push $3
	cthis cplayf
	end method
	method getsndtxt
	localstring $1
	pop $1
	localstring $2
	push "snd"
	push _sndbase
	pop $b
	popax
	add $a,$b
	call _dbsnd,getrowsno
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push $1
	cthis addsnd
	push $2
	ret
	end method
	method _sndtimerstart
	localint $1
	push 1
	cthis getname
	call _dbsnd,dbfindbycol
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1060
	push $1
	push 2
	call _dbsnd,get
	call engine,print
	jmp l1059
l1060:
	cthis getname
	push " not in _dbsnd"
	pop $b
	popax
	add $a,$b
	call engine,print
l1059:
	push ""
	call engine,print
	end method
	method addsndf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis addsnd
	push $3
	push "null"
	cmpjne
	cmp0
	je l1062
	push 0
	push 1
	call $1,getb
	spushs
	push ":"
	cmpst
	je l1065
	push "$"
	cmpst
	je l1065
	jmp l1064
l1065:
	spop $a
	push 1
	call $1,strsubb
	pop $1
	jmp l1063
l1064:
	spop $a
l1063:
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l1062:
	end method
	method asf
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push "end"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addsndff
	end method
	method addsndff
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis addsndf
	end method
	method gmconsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l1067
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	call subtitle,register
l1067:
	end method
	method getwavmp3
	push "."
	cthis wavmp3
	pop $b
	popax
	add $a,$b
	end method
	method addsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	call _dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	push 0
	push 1
	call $1,getb
	spushs
	push "$"
	cmpst
	jne l1069
	spop $a
	push 1
	call $1,strsubb
	pop $1
	push $1
	cthis getwavmp3
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1068
l1069:
	push ":"
	cmpst
	jne l1070
	spop $a
	push 1
	call $1,strsubb
	pop $1
	push _sndbase
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	cthis getwavmp3
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1068
l1070:
	spop $a
	push _sndbase
	push $3
	pop $b
	popax
	add $a,$b
	cthis getwavmp3
	pop $b
	popax
	add $a,$b
	pop $4
l1068:
	localstring $5
	call gameapi,getgamename
	pop $5
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l1072
	push $5
	spushs
	push $1
	push $4
	spop $a
	call [$a],gmconsnd
	jmp l1071
l1072:
	push $5
	spushs
	push $1
	call $2,length
	push 40
	pop $b
	popax
	mul $a,$b
	push 1
	spop $a
	call [$a],newtimer
	push $1
	spushs
	push "onstart"
	push "_sndtimerstart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstartstopflag"
	push "GameController0"
	spop $a
	call [$a],addmethod
l1071:
	push $3
	push $4
	call _dbsnd,add
	push $3
	push $1
	call _dbsnd,add
	push $3
	push $2
	call _dbsnd,add
	end method
	method GameController0
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method addbank
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	localstring $3
	pop $3
	localstring $4
l1073:
	push $3
	push A
	cmpjne
	cmp0
	je l1074
	push $3
	cthis getsndtxt
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],addbegin
	push $2
	push "null"
	cmpjne
	cmp0
	je l1076
	push $4
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
l1076:
	pop $3
	jmp l1073
l1074:
	end method
	method exportbank
	localstring $1
	pop $1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $e
	new db,[$e]
	call [$e],GameController1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method GameController1
	localdef $1
	pop $1
	push 1
	cthis dbbuild
	push "|"
	cthis setseparator
	push "GameController2"
	cthis dbeach_row
	push igmdebug
	cmp0
	je l1078
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis save
l1078:
	end method
	method GameController2
	localdef $1
	pop $1
	localdef $2
	cthis getname
	spushs
	push "__db"
	spop $h
	call $h,strsubbs
	pop $2
	push $1
	push "snd"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis addbegin
	push $1
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis addbegin
	end method
	method importbank
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	push $2
	push $3
	push "null"
	push $1
	cthis importgroupto
	end method
	method exportsnd
	localstring $1
	pop $1
	push igmdebug
	cmp0
	je l1080
	push $1
	call _dbsnd,save
l1080:
	end method
	method stdexportsnd
	push "exports/"
	push _sndbase
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis exportsnd
	end method
	method sounds=
	cthis buildsnds
	end method
	method sounds_from
	localstring $1
	pop $1
	new db,__tmpdb
	localdef $2
	push _sndbase
	pop $2
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localdef $3
	pop $3
	localint $4
	localstring $5
l1081:
	push A
	push $3
	cmpjne
	cmp0
	je l1082
	localdef $6
	pop $6
	push 1
	push $6
	call __tmpdb,dbfindbycol
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1084
	cthis getsndpath
	push $4
	push 0
	call __tmpdb,get
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	cmp0
	je l1086
	push GAME
	spushs
	push $6
	push $4
	push 0
	call __tmpdb,get
	spop $a
	call [$a],gmconsnd
	push $6
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	jmp l1085
l1086:
	push $6
	push $4
	push 1
	call __tmpdb,get
	push $3
	cthis addsndf
l1085:
l1084:
	localdef $3
	pop $3
	jmp l1081
l1082:
	call _dbsnd,free
	delete __tmpdb
	push $2
	cthis setsndbase
	end method
	method buildsnds
	call _dbsnd,free
	new db,__dbsnd
	push 3
	call __dbsnd,dbbuild
	push "__dbsnd"
	cthis buildfromdb
	delete __dbsnd
	end method
	method buildfromdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1087:
	push $2
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1088
	jmp l1090
l1089:
	add $2,1
	pop $2
	jmp l1087
l1090:
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 2
	spop $a
	call [$a],get
	cthis addsndf
	jmp l1089
l1088:
	cthis stdexportsnd
	end method
	method importsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis importgroup
	end method
	method importgroup
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis importgroupto
	end method
	method importgroupto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	new db,__tmpdb
	localdef $5
	push _sndbase
	pop $5
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localstring $6
	localint $7
	push 0
	pop $7
l1091:
	push $7
	call __tmpdb,getrowsno
	cmpjl
	cmp0
	je l1092
	jmp l1094
l1093:
	add $7,1
	pop $7
	jmp l1091
l1094:
	push $7
	push 1
	call __tmpdb,get
	pop $6
	push $3
	push "null"
	cmpje
	cmp0
	jne l1097
	push $3
	spushs
	push $6
	spop $a
	call [$a],contains
	jmp l1098
l1096:
	push 0
	jmp l1098
l1097:
	push 1
l1098:
	cmp0
	je l1099
	push $6
	push $7
	push 2
	call __tmpdb,get
	push $2
	cthis addsndf
	push $4
	push "null"
	cmpjne
	cmp0
	je l1101
	push $4
	spushs
	push $6
	spop $a
	call [$a],add
l1101:
l1099:
	jmp l1093
l1092:
	call _dbsnd,free
	call __tmpdb,free
	delete __tmpdb
	push $5
	cthis setsndbase
	end method
	method freesnd
	call _dbsnd,free
	end method
	method addgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,add
	end method
	method removegmobj
	localstring $1
	pop $1
	push $1
	call __grobj,remove
	end method
	method isgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,contains
	end method
	method deletegmobj
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1103
	push $1
	cthis removegmobj
	push $1
	spushs
	spop $d
	delete [$d]
l1103:
	end method
	method lockall
	push "lock"
	call __grobj,eval
	cthis lock
	end method
	method unlockall
	push "unlock"
	call __grobj,eval
	cthis unlock
	end method
	method gmunlockall
	push GAME
	spushs
	spop $a
	call [$a],unlockall
	end method
	method gmlockall
	push GAME
	spushs
	spop $a
	call [$a],lockall
	end method
	method lock=
	localint $1
	pop $1
	push $1
	cmp0
	je l1105
	cthis gmlockall
	jmp l1104
l1105:
	cthis gmunlockall
l1104:
	end method
	method mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	call __dblclick,isplaying
	cmp0
	je l1107
	cthis mouse_dblclick
	jmp l1106
l1107:
	call __dblclick,play
l1106:
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	method mouserrel
	push "onmouserrel"
	call __grobj,eval
	cthis mouse_rrel
	end method
	method keydown
	push "onkeydown"
	call __grobj,eval
	cthis key_down
	end method
	end class

	class classadv
	parent classgame
	method init
	clparent classgame,init
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new path,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbutton,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	end class

	class classquest
	method init
	new vector,vqst
	push "string"
	call vqst,type
	end method
	method isdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	ret
	end method
	method notdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	ret
	end method
	method done
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	cmp0
	je l1109
	push $1
	call vqst,add
l1109:
	end method
	method reset
	call vqst,free
	end method
	method save
	localstring $1
	pop $1
	push $1
	call vqst,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call vqst,load
	end method
	end class

	new classquest,clqs
	method winsave
	localstring $1
	pop $1
	new db,_db_win
	push "output.db"
	call _db_win,load
	localdef $2
	call _db_win,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	call _db_win,add
	push "output.db"
	call _db_win,save
	delete _db_win
	end method
	method getwinpath
	localstring $1
	pop $1
	localstring $2
	push "appdata"
	call engine,getspecialpath
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l1111
	push $2
	push "\/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	jmp l1110
l1111:
	push $1
l1110:
	end method
	method saveexist
	localstring $1
	pop $1
	push igmwinlocal
	cmp0
	je l1113
	push $1
	cthis getwinpath
	call engine,fileexist
	jmp l1112
l1113:
	push $1
	call engine,fileexist
l1112:
	end method
	method vecsave
	localstring $1
	pop $1
	push igmwinlocal
	cmp0
	je l1115
	push $1
	cthis getwinpath
	cthis save
	jmp l1114
l1115:
	push $1
	cthis save
l1114:
	end method
	method vecload
	localstring $1
	pop $1
	push $1
	cthis saveexist
	cmp0
	je l1117
	push igmwinlocal
	cmp0
	je l1119
	push $1
	cthis getwinpath
	cthis load
	jmp l1118
l1119:
	push $1
	cthis load
l1118:
l1117:
	end method
	class classfullsave
	method init
	localstring $1
	pop $1
	new db,dbsav
	new string,sstdfile
	push $1
	cthis setfile
	end method
	method save
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1121
	ret
	jmp l1120
l1121:
	push $1
	call engine,fileexist
	neg
	cmp0
	je l1123
	ret
l1123:
l1120:
	push igmwinlocal
	cmp0
	je l1125
	push $1
	cthis getwinpath
	call dbsav,save
	jmp l1124
l1125:
	push $1
	call dbsav,save
l1124:
	end method
	method _load
	localstring $1
	pop $1
	push $1
	call engine,fileexist
	cmp0
	je l1127
	call dbsav,free
	push $1
	call dbsav,load
l1127:
	end method
	method load
	localstring $1
	pop $1
	push igmwinlocal
	cmp0
	je l1129
	push $1
	cthis getwinpath
	cthis _load
	jmp l1128
l1129:
	push $1
	cthis _load
l1128:
	end method
	method print
	call dbsav,print
	end method
	method setfile
	localstring $1
	pop $1
	push $1
	pop sstdfile
	end method
	method stdload
	push sstdfile
	cthis load
	end method
	method stdsave
	push sstdfile
	cthis save
	end method
	method free
	call dbsav,free
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1131
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l1130
l1131:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l1130:
	cthis stdsave
	end method
	method bset
	localstring $1
	pop $1
	push $1
	push 1
	cthis set
	end method
	method get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1133
	push $2
	push 1
	call dbsav,get
	jmp l1132
l1133:
	push "null"
l1132:
	ret
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1135
	push $3
	push 1
	call dbsav,get
	push $2
	cmpje
	jmp l1134
l1135:
	push 0
l1134:
	ret
	end method
	method bis
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1137
	push $2
	push 1
	call dbsav,get
	push 0
	cmpjne
	jmp l1136
l1137:
	push 0
l1136:
	ret
	end method
	end class

	class StringChecker
	method init
	end method
	method isdigit
	localstring $1
	pop $1
	call $1,to_i
	push 0
	cmpjne
	cmp0
	jne l1139
	push 0
	push 1
	call $1,getb
	push "0"
	cmpje
	jmp l1140
l1138:
	push 0
	jmp l1140
l1139:
	push 1
l1140:
	ret
	end method
	method getint
	localstring $1
	pop $1
	call $1,to_i
	ret
	end method
	method getreal
	localstring $1
	pop $1
	call $1,to_r
	ret
	end method
	method isreal
	localstring $1
	pop $1
	push $1
	cthis isdigit
	cmp0
	je l1141
	push "."
	call $1,contains
	jmp l1143
l1141:
	push 0
	jmp l1143
l1142:
	push 1
l1143:
	ret
	end method
	method isstring
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "\""
	cmpje
	ret
	end method
	method getstring
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	ret
	end method
	end class

	class Script
	method init
	localstring $1
	pop $1
	new db,__dbcode
	new string,__sdb
	new int,__irow
	new int,__icol
	new string,__sreads
	new vector,__vec
	push "string"
	call __vec,type
	new string,__sarg
	new int,__iarg
	new real,__rarg
	new StringChecker,__csc
	push "int"
	new map2,__mp
	localint $2
	push 0
	pop $2
l1144:
	push $2
	push 10
	cmpjl
	cmp0
	je l1145
	jmp l1147
l1146:
	add $2,1
	pop $2
	jmp l1144
l1147:
	push "ARG"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	jmp l1146
l1145:
	push $1
	cthis load
	end method
	method ARG=
	localint $1
	localstring $2
	pop $2
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method ARG
	localint $1
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	end method
	method load
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1149
	ret
l1149:
	push "."
	call $1,contains
	cmp0
	je l1151
	push "__dbcode"
	pop __sdb
	push $1
	call __dbcode,loadbeh
	jmp l1150
l1151:
	push $1
	pop __sdb
l1150:
	call __mp,free
	localint $2
	push 0
	pop $2
l1152:
	push $2
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1153
	jmp l1155
l1154:
	add $2,1
	pop $2
	jmp l1152
l1155:
	push __sdb
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push "func"
	cmpje
	cmp0
	je l1157
	push __sdb
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $2
	call __mp,add
l1157:
	jmp l1154
l1153:
	push "init"
	cthis call
	end method
	method get
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method isvar
	localstring $1
	pop $1
	push "$"
	call $1,contains
	ret
	end method
	method getvar
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	neg
	cmp0
	je l1159
	push $1
	spushs
	spop $e
	new def,[$e]
l1159:
	push $1
	ret
	end method
	method isfunc
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l1160
	push $1
	call __csc,isreal
	neg
	jmp l1162
l1160:
	push 0
	jmp l1162
l1161:
	push 1
l1162:
	ret
	end method
	method getfunc
	localstring $1
	pop $1
	call __vec,free
	push "."
	call $1,strgetto
	call __vec,add
	push "."
	call $1,strgetfrom
	call __vec,add
	end method
	method _get
	add __icol,1
	pop __icol
	push __sdb
	spushs
	push __irow
	push __icol
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	ret
	end method
	method isnext
	push __icol
	push __sdb
	spushs
	push __irow
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1164
	push __sdb
	spushs
	push __irow
	push __icol
	spop $a
	call [$a],get
	pop __sreads
	push 1
	ret
l1164:
	push 0
	ret
	end method
	method perror
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cmp0
	je l1166
	push "error: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
l1166:
	end method
	method interpcall
	localstring $1
	pop $1
	push $1
	cthis getfunc
	localstring $2
	push 0
	call __vec,get
	pop $2
	push 0
	push 1
	call $2,getb
	push "*"
	cmpje
	cmp0
	je l1168
	push 1
	call $2,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1168:
	localstring $3
	push 1
	call __vec,get
	pop $3
	push 0
	push 1
	call $3,getb
	push "*"
	cmpje
	cmp0
	je l1170
	push 1
	call $3,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1170:
	call __vec,free
	add __icol,1
	pop __icol
	localstring $4
	cthis _get
	pop $4
l1171:
	push $4
	push ")"
	cmpjne
	cmp0
	je l1172
	push $4
	cthis getexpr
	cthis _get
	pop $4
	jmp l1171
l1172:
	push $2
	push "this"
	cmpje
	cmp0
	je l1174
	push "null"
	pop $2
l1174:
	push $2
	push $3
	cthis callfun
	end method
	method getvname
	localstring $1
	pop $1
	push $1
	cthis isvar
	cmp0
	je l1176
	push $1
	cthis getvar
	pop $1
	jmp l1175
l1176:
	push $1
	call __csc,isdigit
	cmp0
	je l1178
	push $1
	pop __iarg
	push "__iarg"
	pop $1
	jmp l1177
l1178:
	push $1
	call __csc,isstring
	cmp0
	je l1180
	push $1
	call __csc,getstring
	pop __sarg
	push "__sarg"
	pop $1
	jmp l1179
l1180:
	push $1
	call __csc,isreal
	cmp0
	je l1182
	call $1,to_r
	pop __rarg
	push "__rarg"
	pop $1
l1182:
l1179:
l1177:
l1175:
	push $1
	ret
	end method
	method isscriptfun
	localstring $1
	pop $1
	push "->"
	call $1,contains
	ret
	end method
	method getscriptfun
	localstring $1
	pop $1
	push 2
	call $1,strsubb
	ret
	end method
	method getexpr
	localstring $1
	pop $1
	push $1
	call __csc,isstring
	cmp0
	je l1184
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
	jmp l1183
l1184:
	push $1
	cthis isfunc
	cmp0
	je l1186
	push $1
	cthis interpcall
	jmp l1185
l1186:
	push $1
	cthis isscriptfun
	cmp0
	je l1188
	localint $2
	push __irow
	pop $2
	localint $3
	push __icol
	pop $3
	push $1
	cthis getscriptfun
	cthis call
	push $2
	pop __irow
	push $3
	pop __icol
	jmp l1187
l1188:
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
l1187:
l1185:
l1183:
	end method
	method cmp
	localint $1
	push 0
	pop $1
	localdef $2
	cthis _get
	cthis getexpr
	pop $2
	localstring $3
	cthis _get
	pop $3
	localdef $4
	cthis _get
	cthis getexpr
	pop $4
	push $3
	spushs
	push "=="
	cmpst
	jne l1190
	spop $a
	push $2
	push $4
	cmpje
	pop $1
	jmp l1189
l1190:
	push "!="
	cmpst
	jne l1191
	spop $a
	push $2
	push $4
	cmpjne
	pop $1
	jmp l1189
l1191:
	push "<"
	cmpst
	jne l1192
	spop $a
	push $2
	push $4
	cmpjl
	pop $1
	jmp l1189
l1192:
	push ">"
	cmpst
	jne l1193
	spop $a
	push $2
	push $4
	cmpja
	pop $1
	jmp l1189
l1193:
	push "<="
	cmpst
	jne l1194
	spop $a
	push $2
	push $4
	cmpjle
	pop $1
	jmp l1189
l1194:
	push ">="
	cmpst
	jne l1195
	spop $a
	push $2
	push $4
	cmpjae
	pop $1
	jmp l1189
l1195:
	spop $a
l1189:
	cthis _get
	pop $3
	push $3
	push "||"
	cmpje
	cmp0
	je l1197
	push $1
	cmp0
	jne l1199
	cthis cmp
	jmp l1200
l1198:
	push 0
	jmp l1200
l1199:
	push 1
l1200:
	ret
	jmp l1196
l1197:
	push $3
	push "&&"
	cmpje
	cmp0
	je l1202
	push $1
	cmp0
	je l1203
	cthis cmp
	jmp l1205
l1203:
	push 0
	jmp l1205
l1204:
	push 1
l1205:
	ret
	jmp l1201
l1202:
	push $1
	ret
l1201:
l1196:
	end method
	method containsfun
	localstring $1
	pop $1
	push $1
	call __mp,contains
	end method
	method call
	localstring $1
	pop $1
	push $1
	call __mp,contains
	neg
	cmp0
	je l1207
	ret
l1207:
	push $1
	call __mp,get
	pop __irow
	add __irow,1
	pop __irow
	push 0
	pop __icol
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	localint $12
	localint $13
l1208:
	push $2
	cmp0
	je l1209
	push 0
	pop __icol
	cthis _get
	pop $8
	push $8
	spushs
	push "new"
	cmpst
	jne l1211
	spop $a
	cthis _get
	pop $8
	cthis _get
	pop $9
	push 1
	call $9,strsubb
	pop $9
	cthis isnext
	cmp0
	je l1213
	push __sreads
	push "["
	cmpje
	cmp0
	je l1215
	add __icol,1
	pop __icol
	cthis _get
	pop $11
	push 0
	pop $12
l1216:
	push $12
	push $11
	cmpjl
	cmp0
	je l1217
	jmp l1219
l1218:
	add $12,1
	pop $12
	jmp l1216
l1219:
	push $8
	spushs
	push $9
	push $12
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	jmp l1218
l1217:
	jmp l1214
l1215:
	add __icol,1
	pop __icol
l1220:
	cthis isnext
	cmp0
	je l1221
	push __sreads
	push ")"
	cmpjne
	jmp l1223
l1221:
	push 0
	jmp l1223
l1222:
	push 1
l1223:
	cmp0
	je l1224
	cthis _get
	cthis getexpr
	jmp l1220
l1224:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1214:
	jmp l1212
l1213:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1212:
	add __irow,1
	pop __irow
	jmp l1210
l1211:
	push "delete"
	cmpst
	jne l1225
	spop $a
	cthis _get
	cthis getvar
	spushs
	spop $d
	delete [$d]
	add __irow,1
	pop __irow
	jmp l1210
l1225:
	push $8
	push "if"
	cmpje
	cmp0
	jne l1227
	push $6
	cmp0
	jne l1227
	push $5
	jmp l1228
l1226:
	push 0
	jmp l1228
l1227:
	push 1
l1228:
	cmp0
	je l1230
	push $8
	jmp l1229
l1230:
	push ""
l1229:
	cmpst
	jne l1231
	spop $a
	add __icol,1
	pop __icol
	cthis cmp
	pop $4
	push $8
	push "if"
	cmpje
	cmp0
	je l1233
	push 1
	pop $3
l1233:
	push 0
	pop $6
	push 0
	pop $5
	add __irow,1
	pop __irow
	push $4
	neg
	cmp0
	je l1235
	push 1
	pop $12
l1236:
	push $12
	cmp0
	je l1237
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	pop $8
	push $8
	push "else"
	cmpje
	cmp0
	jne l1240
	push $8
	push "elif"
	cmpje
	cmp0
	jne l1240
	push $8
	push "fi"
	cmpje
	cmp0
	jne l1240
	push $8
	push "done"
	cmpje
	jmp l1241
l1239:
	push 0
	jmp l1241
l1240:
	push 1
l1241:
	cmp0
	je l1242
	push 0
	pop $12
	jmp l1238
l1242:
	add __irow,1
	pop __irow
l1238:
	jmp l1236
l1237:
l1235:
	jmp l1210
l1231:
	push "else"
	cmpst
	jne l1243
	spop $a
	push $3
	neg
	push "else without if"
	cthis perror
	add __irow,1
	pop __irow
	push $4
	cmp0
	je l1245
l1246:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1247
	add __irow,1
	pop __irow
	jmp l1246
l1247:
l1245:
	jmp l1210
l1243:
	push "fi"
	cmpst
	jne l1248
	spop $a
	push $3
	neg
	push "fi without if"
	cthis perror
	push 0
	pop $3
	push 0
	pop $4
	push 0
	pop $6
	add __irow,1
	pop __irow
	jmp l1210
l1248:
	push "elif"
	cmpst
	jne l1249
	spop $a
	push $4
	cmp0
	je l1251
	add __irow,1
	pop __irow
l1252:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1253
	add __irow,1
	pop __irow
	jmp l1252
l1253:
	jmp l1250
l1251:
	push 1
	pop $6
l1250:
	jmp l1210
l1249:
	push "end"
	cmpst
	jne l1254
	spop $a
	push 0
	pop $2
	jmp l1210
l1254:
	push "while"
	cmpst
	jne l1255
	spop $a
	push __irow
	pop $7
	push 1
	pop $5
	jmp l1210
l1255:
	push "done"
	cmpst
	jne l1256
	spop $a
	push $4
	cmp0
	je l1258
	push $7
	pop __irow
	jmp l1257
l1258:
	add __irow,1
	pop __irow
l1257:
	jmp l1210
l1256:
	push "print"
	cmpst
	jne l1259
	spop $a
	push ""
	pop $8
l1260:
	cthis isnext
	cmp0
	je l1261
	cthis _get
	cthis getexpr
	popax
	add $8,$a
	pop $8
	jmp l1260
l1261:
	push $8
	call engine,print
	add __irow,1
	pop __irow
	jmp l1210
l1259:
	push "return"
	cmpst
	jne l1262
	spop $a
	cthis isnext
	cmp0
	je l1264
	push __sreads
	cthis getexpr
l1264:
	ret
	jmp l1210
l1262:
	spop $a
	push "$"
	call $8,contains
	cmp0
	je l1266
	push $8
	cthis getvar
	pop $8
	add __icol,1
	pop __icol
	push $8
	spushs
	cthis _get
	cthis getexpr
	spop $b
	popax
	mov [$b],$a
l1267:
	cthis isnext
	cmp0
	je l1268
	add __icol,1
	pop __icol
	localdef $14
	cthis _get
	cthis getexpr
	pop $14
	push __sreads
	spushs
	push "+"
	cmpst
	jne l1270
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	add [$b],$a
	pop [$b]
	jmp l1269
l1270:
	push "-"
	cmpst
	jne l1271
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	sub [$b],$a
	pop [$b]
	jmp l1269
l1271:
	push "*"
	cmpst
	jne l1272
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	mul [$b],$a
	pop [$b]
	jmp l1269
l1272:
	push "/"
	cmpst
	jne l1273
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$a
	jmp l1269
l1273:
	push "%"
	cmpst
	jne l1274
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$d
	jmp l1269
l1274:
	spop $a
l1269:
	jmp l1267
l1268:
	jmp l1265
l1266:
	push $8
	cthis getexpr
l1265:
	add __irow,1
	pop __irow
l1210:
	push __irow
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1276
	push 1
	push "function "
	push $1
	pop $b
	popax
	add $a,$b
	push " not finished!"
	pop $b
	popax
	add $a,$b
	cthis perror
	push 0
	pop $2
l1276:
	jmp l1208
l1209:
	end method
	end class

	method transparent
	push 0
	push 0
	push 0
	push 0
	ret
	end method
	method red
	push 255
	push 0
	push 0
	ret
	end method
	method green
	push 0
	push 255
	push 0
	ret
	end method
	method blue
	push 0
	push 0
	push 255
	ret
	end method
	method white
	push 255
	push 255
	push 255
	ret
	end method
	method black
	push 0
	push 0
	push 0
	ret
	end method
	method grey
	localint $1
	pop $1
	push $1
	push $1
	push $1
	ret
	end method
	method yellow
	push 255
	push 255
	push 0
	ret
	end method
	class Color
	method init
	push A
	push "r"
	push "g"
	push "b"
	push "a"
	cthis vars
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],get
	cthis set
	end method
	method img=
	localdef $1
	pop $1
	push $1
	spushs
	push $1
	clparent classansearcher,firstnotrx1y
	spop $a
	call [$a],getrgba
	pop a
	pop b
	pop g
	pop r
	end method
	method get
	push r
	push g
	push b
	push a
	ret
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop a
	pop b
	pop g
	pop r
	end method
	method rgb=
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	pop b
	pop g
	pop r
	end method
	method rgb
	push r
	push g
	push b
	ret
	end method
	method print
	push "Color::"
	cthis getname
	pop $b
	popax
	add $a,$b
	push " (r,g,b,a) = ("
	pop $b
	popax
	add $a,$b
	push r
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push g
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push a
	pop $b
	popax
	add $a,$b
	push ")"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	end class

	class classasker
	parent newvars
	method init
	clparent newvars,init
	new string,sfuncyes
	push "null"
	pop sfuncyes
	new string,sfuncno
	push "null"
	pop sfuncno
	new string,ssndask
	new string,ssndyes
	new string,ssndno
	new classsound,clsnd
	end method
	method reset
	push "null"
	pop sfuncyes
	push "null"
	pop sfuncno
	call buts,resetall
	end method
	method setfuncs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sfuncyes
	push $2
	pop sfuncno
	end method
	method fxonmovon
	localstring $1
	pop $1
	push $1
	call buts,sfxonmovon
	end method
	method setmouse
	localstring $1
	pop $1
	push "yes"
	push $1
	call buts,newmouse
	push "no"
	push $1
	call buts,newmouse
	end method
	method load
	localstring $1
	localint $2
	pop $2
	pop $1
	new classbutton,buts
	push $1
	push $2
	push "null"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call buts,disableall
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push $5
	cthis setfuncs
	push $1
	push $2
	push $3
	cthis ask2
	end method
	method ask2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	pop ssndask
	push $2
	pop ssndyes
	push $3
	pop ssndno
	call gameapi,pause
	call buts,benableall
	push "bkg"
	call buts,pause
	call clsnd,creset
	push $1
	call clsnd,cbplay
	cthis getname
	push "_ask"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovon
	localstring $1
	pop $1
	push $1
	push "yes"
	cmpje
	cmp0
	je l1278
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndyes
	call clsnd,cbplay
	jmp l1277
l1278:
	push $1
	push "no"
	cmpje
	cmp0
	je l1280
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndno
	call clsnd,cbplay
l1280:
l1277:
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "bkg"
	cmpje
	cmp0
	je l1282
	ret
l1282:
	call gameapi,resume
	call buts,disableall
	push 0
	call clsnd,cactsndstop
	push $1
	push "yes"
	cmpje
	cmp0
	je l1284
	push sfuncyes
	push "null"
	cmpjne
	jmp l1286
l1284:
	push 0
	jmp l1286
l1285:
	push 1
l1286:
	cmp0
	je l1287
	push sfuncyes
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_yes"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l1283
l1287:
	push $1
	push "no"
	cmpje
	cmp0
	je l1289
	push sfuncno
	push "null"
	cmpjne
	jmp l1291
l1289:
	push 0
	jmp l1291
l1290:
	push 1
l1291:
	cmp0
	je l1292
	push sfuncno
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_no"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1292:
l1283:
	end method
	method disabled
	call buts,disabled
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	end class

	class classplacepointer
	method init
	new anima,anpointer
	push "onfinish"
	push "classplacepointer0"
	call anpointer,addmethod
	new int,_iz
	push 1000
	pop _iz
	end method
	method classplacepointer0
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anpointer,load
	push _iz
	cthis setz
	call anpointer,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push $1
	call anpointer,setz
	end method
	method stop
	push 0
	call anpointer,stop
	end method
	method stoph
	push 0
	call anpointer,stop
	call anpointer,hide
	end method
	method show
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,setpos
	push $3
	call anpointer,play
	end method
	method move
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,move
	end method
	method showob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	cthis show
	end method
	method showpob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	cthis show
	end method
	end class

	class SimpleCounter
	method init
	localint $1
	pop $1
	push "length"
	push $1
	cthis var2
	new int,iid
	push 0
	pop iid
	end method
	method next
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push length
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	end method
	method set
	localint $1
	pop $1
	push $1
	pop iid
	end method
	method reset
	push 0
	pop iid
	end method
	method get
	push iid
	end method
	end class

	module clstrdigit
	method init
	end method
	method getdigit
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	pop $3
l1293:
	call $3,length
	push $2
	cmpjl
	cmp0
	je l1294
	push "0"
	push $3
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1293
l1294:
	push $3
	ret
	end method
	method gettime
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis geth
	push $1
	cthis getm
	push $1
	cthis gets
	push "h"
	call $2,contains
	push "m"
	call $2,contains
	push "s"
	call $2,contains
	cthis getstime
	ret
	end method
	method getstime
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $7
	push ""
	pop $7
	push $4
	cmp0
	je l1296
	push $1
	popax
	add $7,$a
	pop $7
l1296:
	push $5
	cmp0
	je l1298
	push $4
	cmp0
	je l1300
	push ":"
	jmp l1299
l1300:
	push ""
l1299:
	push $2
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1298:
	push $6
	cmp0
	je l1302
	push $4
	cmp0
	jne l1304
	push $5
	jmp l1305
l1303:
	push 0
	jmp l1305
l1304:
	push 1
l1305:
	cmp0
	je l1307
	push ":"
	jmp l1306
l1307:
	push ""
l1306:
	push $3
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1302:
	push $7
	ret
	end method
	method geth
	localint $1
	pop $1
	push $1
	push 3600
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method getm
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	psax
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method gets
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method getns
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis gets
	push $2
	cthis getdigit
	ret
	end method
	method getnm
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getm
	push $2
	cthis getdigit
	ret
	end method
	method getbinary
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l1308:
	push $1
	push 0
	cmpja
	cmp0
	je l1309
	push ""
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	push 2
	popax
	div $1,$a
	mov $1,$a
	jmp l1308
l1309:
	push $2
	ret
	end method
	method bintohex
	localstring $1
	pop $1
	localstring $2
	call $1,length
	push 4
	pop $b
	popax
	div $a,$b
	push $d
	spushs
	push 3
	cmpst
	jne l1311
	spop $a
	push "0"
	jmp l1310
l1311:
	push 2
	cmpst
	jne l1312
	spop $a
	push "00"
	jmp l1310
l1312:
	push 1
	cmpst
	jne l1313
	spop $a
	push "000"
	jmp l1310
l1313:
	spop $a
	push ""
l1310:
	pop $2
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1314:
	push $3
	call $1,length
	cmpjl
	cmp0
	je l1315
	jmp l1317
l1316:
	push 4
	popax
	add $3,$a
	pop $3
	jmp l1314
l1317:
	push $3
	push 4
	call $1,getb
	spushs
	push "0000"
	cmpst
	jne l1319
	spop $a
	push "0"
	jmp l1318
l1319:
	push "0001"
	cmpst
	jne l1320
	spop $a
	push "1"
	jmp l1318
l1320:
	push "0010"
	cmpst
	jne l1321
	spop $a
	push "2"
	jmp l1318
l1321:
	push "0011"
	cmpst
	jne l1322
	spop $a
	push "3"
	jmp l1318
l1322:
	push "0100"
	cmpst
	jne l1323
	spop $a
	push "4"
	jmp l1318
l1323:
	push "0101"
	cmpst
	jne l1324
	spop $a
	push "5"
	jmp l1318
l1324:
	push "0110"
	cmpst
	jne l1325
	spop $a
	push "6"
	jmp l1318
l1325:
	push "0111"
	cmpst
	jne l1326
	spop $a
	push "7"
	jmp l1318
l1326:
	push "1000"
	cmpst
	jne l1327
	spop $a
	push "8"
	jmp l1318
l1327:
	push "1001"
	cmpst
	jne l1328
	spop $a
	push "9"
	jmp l1318
l1328:
	push "1010"
	cmpst
	jne l1329
	spop $a
	push "A"
	jmp l1318
l1329:
	push "1011"
	cmpst
	jne l1330
	spop $a
	push "B"
	jmp l1318
l1330:
	push "1100"
	cmpst
	jne l1331
	spop $a
	push "C"
	jmp l1318
l1331:
	push "1101"
	cmpst
	jne l1332
	spop $a
	push "D"
	jmp l1318
l1332:
	push "1110"
	cmpst
	jne l1333
	spop $a
	push "E"
	jmp l1318
l1333:
	push "1111"
	cmpst
	jne l1334
	spop $a
	push "F"
	jmp l1318
l1334:
	spop $a
l1318:
	popax
	add $2,$a
	pop $2
	jmp l1316
l1315:
	push $2
	end method
	end module

	method getbinary
	cthis get
	clparent clstrdigit,getbinary
	end method
	method getdigit
	localint $1
	pop $1
	cthis get
	push $1
	clparent clstrdigit,getdigit
	end method
	method getbindigit
	localint $1
	pop $1
	cthis getbinary
	push $1
	clparent clstrdigit,getdigit
	end method
	class Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1336
	push sgmfontfile
	pop $1
l1336:
	push ".ttf"
	call $1,contains
	cmp0
	je l1338
	new font,_fnt
	push $1
	push $2
	call _fnt,load
	push "_fnt"
	pop $1
l1338:
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new int,iFontSize
	push $2
	pop iFontSize
	new text,txt
	push $1
	call txt,setfont
	push $8
	call txt,setz
	push $6
	push $7
	call txt,setpos
	call txt,show
	new text,txtbg
	call txtbg,hide
	end method
	method hide
	call txt,hide
	end method
	method show
	call txt,show
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,setpos
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt,set
	push iR
	push iG
	push iB
	call txt,createtxt
	end method
	method get
	call txt,get
	ret
	end method
	method setbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	call txt,getpx
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getpy
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getw
	push iFontSize
	pop $b
	popax
	add $a,$b
	push iFontSize
	push 2
	pop $b
	popax
	mul $a,$b
	push $1
	push $2
	push $3
	push $4
	call txtbg,setbkg
	push 1
	push 255
	push 255
	push 255
	push 128
	call txtbg,setborders
	call txtbg,show
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	cthis set
	end method
	end class

	class Cypher
	parent Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push 0
	cthis set
	end method
	method add
	localint $1
	pop $1
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method iget
	cthis get
	spushs
	spop $h
	call $h,to_i
	end method
	method operator+
	localint $1
	pop $1
	push $1
	cthis add
	end method
	method operator++
	push 1
	cthis add
	end method
	method operator--
	push 1
	popax
	sub 0,$a
	cthis add
	end method
	method operator-
	localint $1
	pop $1
	push $1
	popax
	sub 0,$a
	cthis add
	end method
	method operator=
	localint $1
	pop $1
	push $1
	cthis set
	end method
	method operator==
	localint $1
	pop $1
	cthis get
	push $1
	cmpje
	end method
	method operator!=
	localint $1
	pop $1
	cthis get
	push $1
	cmpjne
	end method
	method operator>
	localint $1
	pop $1
	cthis get
	push $1
	cmpja
	end method
	method operator<
	localint $1
	pop $1
	cthis get
	push $1
	cmpjl
	end method
	end class

	class SecCounter
	method init
	localstring $1
	pop $1
	new string,sdigit
	push $1
	pop sdigit
	new int,itime
	cthis reset
	push "timcyk"
	push 1000
	push 1
	push "SecCounter0"
	cthis cnewtimerfin
	end method
	method SecCounter0
	push 1
	cthis update
	cthis play
	end method
	method play
	call timcyk,play
	end method
	method stop
	push 0
	call timcyk,stop
	end method
	method sgettime
	push itime
	push sdigit
	call clstrdigit,gettime
	ret
	end method
	method gettime
	push itime
	ret
	end method
	method reset
	push itime
	popax
	sub 0,$a
	cthis update
	end method
	method update
	localint $1
	pop $1
	push $1
	popax
	add itime,$a
	pop itime
	end method
	end class

	class TextTimeCounter
	parent Text
	parent SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push $9
	clparent SecCounter,init
	cthis reset
	end method
	method update
	localint $1
	pop $1
	push $1
	clparent SecCounter,update
	cthis sgettime
	cthis set
	end method
	end class

	class gfxObject
	method init
	localstring $1
	pop $1
	new string,sgfxobj
	push $1
	pop sgfxobj
	end method
	method setpos
	push sgfxobj
	spushs
	spop $a
	call [$a],setpos
	end method
	method move
	push sgfxobj
	spushs
	spop $a
	call [$a],move
	end method
	method getpos
	push sgfxobj
	spushs
	spop $a
	call [$a],getpos
	end method
	method getposx
	push sgfxobj
	spushs
	spop $a
	call [$a],getposx
	end method
	method getposy
	push sgfxobj
	spushs
	spop $a
	call [$a],getposy
	end method
	method getpx
	push sgfxobj
	spushs
	spop $a
	call [$a],getpx
	end method
	method getpy
	push sgfxobj
	spushs
	spop $a
	call [$a],getpy
	end method
	method getw
	push sgfxobj
	spushs
	spop $a
	call [$a],getw
	end method
	method geth
	push sgfxobj
	spushs
	spop $a
	call [$a],geth
	end method
	method getcx
	push sgfxobj
	spushs
	spop $a
	call [$a],getcx
	end method
	method getcy
	push sgfxobj
	spushs
	spop $a
	call [$a],getcy
	end method
	method getex
	push sgfxobj
	spushs
	spop $a
	call [$a],getex
	end method
	method getey
	push sgfxobj
	spushs
	spop $a
	call [$a],getey
	end method
	method lodx
	push sgfxobj
	spushs
	spop $a
	call [$a],lodx
	end method
	method lody
	push sgfxobj
	spushs
	spop $a
	call [$a],lody
	end method
	method setz
	push sgfxobj
	spushs
	spop $a
	call [$a],setz
	end method
	method getz
	push sgfxobj
	spushs
	spop $a
	call [$a],getz
	end method
	method show
	push sgfxobj
	spushs
	spop $a
	call [$a],show
	end method
	method hide
	push sgfxobj
	spushs
	spop $a
	call [$a],hide
	end method
	method isvisible
	push sgfxobj
	spushs
	spop $a
	call [$a],isvisible
	end method
	method isin
	push sgfxobj
	spushs
	spop $a
	call [$a],isin
	end method
	end class

	class gfxSquare
	parent Color
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent Color,init
	push A
	push "w"
	push "h"
	cthis vars
	push $3
	pop w
	push $4
	pop h
	new img,imggfx
	push $1
	push $2
	call imggfx,setpos
	push "imggfx"
	clparent gfxObject,init
	end method
	method build
	push w
	push h
	push r
	push g
	push b
	push a
	call imggfx,create
	end method
	method shadow
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localdef $4
	localdef $5
	call imggfx,getpos
	pop $5
	pop $4
	push 0
	push 0
	call imggfx,setpos
	new img,_img1
	new img,_img2
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1340
	push w
	push h
	cthis transparent
	call _img1,create
	push "imggfx"
	call _img1,blit
	jmp l1339
l1340:
	push w
	push h
	cthis get
	call _img1,create
l1339:
	push w
	push h
	cthis black
	push $3
	call _img2,create
	push $1
	push 0
	cmpjl
	cmp0
	je l1342
	push $1
	popax
	sub 0,$a
	push 0
	call _img1,move
	push $1
	popax
	add $4,$a
	pop $4
	jmp l1341
l1342:
	push $1
	push 0
	call _img2,move
l1341:
	push $2
	push 0
	cmpjl
	cmp0
	je l1344
	push 0
	push $2
	popax
	sub 0,$a
	call _img1,move
	push $2
	popax
	add $5,$a
	pop $5
	jmp l1343
l1344:
	push 0
	push $2
	call _img2,move
l1343:
	call $1,abs
	popax
	add w,$a
	pop w
	call $2,abs
	popax
	add h,$a
	pop h
	push w
	push h
	cthis transparent
	call imggfx,create
	push "_img2"
	call imggfx,blit
	push "_img1"
	call imggfx,blit
	delete _img1
	delete _img2
	push $4
	push $5
	call imggfx,move
	end method
	method blackborder
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $1
	cthis black
	push $2
	cthis border
	end method
	method border
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $7
	localdef $8
	call imggfx,getpos
	pop $8
	pop $7
	push 0
	push 0
	call imggfx,setpos
	new img,_img
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1346
	push w
	push h
	cthis transparent
	call _img,create
	push "imggfx"
	call _img,blit
	jmp l1345
l1346:
	push w
	push h
	cthis get
	call _img,create
l1345:
	push $1
	push $2
	call _img,move
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add w,$a
	pop w
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add h,$a
	pop h
	push w
	push h
	push $3
	push $4
	push $5
	push $6
	call imggfx,create
	push "_img"
	call imggfx,blit
	delete _img
	push $7
	push $8
	call imggfx,move
	end method
	end class

	class Rect
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push A
	push "x"
	push "y"
	push "w"
	push "h"
	cthis vars
	push $1
	push $2
	push $3
	push $4
	cthis set
	new vector,vecgr
	push "string"
	call vecgr,type
	push "gmimgvec"
	call vecgr,add
	end method
	method x2
	push x
	push w
	pop $b
	popax
	add $a,$b
	end method
	method y2
	push y
	push h
	pop $b
	popax
	add $a,$b
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	pop w
	push $4
	pop h
	end method
	method fit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	call vecgr,contains
	cmp0
	je l1348
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],_getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1350
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1350:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],_getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1352
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1352:
	jmp l1347
l1348:
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1354
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1354:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1356
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1356:
l1347:
	cthis x2
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l1358
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1358:
	cthis y2
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1360
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1360:
	end method
	method fitrand
	localstring $1
	pop $1
	push $1
	spushs
	push x
	push w
	push $1
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	push y
	push h
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	end method
	method fitgrouprand
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1361:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1362
	jmp l1364
l1363:
	add $2,1
	pop $2
	jmp l1361
l1364:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fitrand
	jmp l1363
l1362:
	end method
	method fitgroup
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1365:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1366
	jmp l1368
l1367:
	add $2,1
	pop $2
	jmp l1365
l1368:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fit
	jmp l1367
l1366:
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	new string,_sobfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	spushs
	push _sfun
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	cmpjne
	cmp0
	je l1370
	push _sobfin
	push "null"
	cmpje
	cmp0
	je l1372
	push _sfunfin
	spushs
	spop $d
	cthis [$d]
	jmp l1371
l1372:
	push _sobfin
	spushs
	push _sfunfin
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1371:
l1370:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	cmpja
	cmp0
	je l1374
	push _ib2
	cthis _cfinito
	jmp l1373
l1374:
	push _ival
	push _ib1
	cmpjl
	cmp0
	je l1376
	push _ib1
	cthis _cfinito
	jmp l1375
l1376:
	push _sob
	spushs
	push _sfun
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l1375:
l1373:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sobfin
	push $8
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $9
	call $2,abs
	pop $9
	push $1
	push 0
	cmpjle
	cmp0
	jne l1379
	push $9
	push $5
	cmpje
	cmp0
	jne l1379
	push $9
	push $6
	cmpja
	jmp l1380
l1378:
	push 0
	jmp l1380
l1379:
	push 1
l1380:
	cmp0
	je l1381
	ret
l1381:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	cmpja
	cmp0
	je l1383
	push _ib1
	pop _ival
	jmp l1382
l1383:
	push $2
	push 0
	cmpjl
	cmp0
	je l1385
	push _ib2
	pop _ival
	jmp l1384
l1385:
	ret
l1384:
l1382:
	push $3
	spushs
	push $4
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method setopacity
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setopacity"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push "null"
	push $4
	cthis _play
	end method
	method isplaying
	call timf,isplaying
	end method
	end class

	class CutScene
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,X1
	new int,Y1
	new int,X2
	new int,Y2
	new img,_gsq
	push $1
	push $2
	push $3
	push $4
	cthis build
	push "_gsq"
	clparent gfxObject,init
	new string,_sfunc1
	new string,_sob1
	new string,_sfunc2
	new string,_sob2
	cthis checktouchpad
	cmp0
	je l1387
	new int,_idelay
	push 20
	pop _idelay
	jmp l1386
l1387:
	new int,_idelay
	push 10
	pop _idelay
l1386:
	new classfadeinout,_clfio
	end method
	method build
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop Y2
	pop X2
	pop Y1
	pop X1
	push X2
	push X1
	pop $b
	popax
	sub $a,$b
	push Y2
	push Y1
	pop $b
	popax
	sub $a,$b
	cthis black
	push 255
	call _gsq,create
	push X1
	push Y1
	call _gsq,setpos
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method delay
	localint $1
	pop $1
	push $1
	pop _idelay
	end method
	method transparency
	localint $1
	pop $1
	push $1
	call _gsq,transparency
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "null"
	push $1
	push "null"
	push $2
	cthis playobfin
	end method
	method playobfin
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1389
	call gameapi,getgamename
	jmp l1388
l1389:
	push $1
l1388:
	pop _sob1
	push $2
	pop _sfunc1
	push $3
	push "null"
	cmpje
	cmp0
	je l1391
	call gameapi,getgamename
	jmp l1390
l1391:
	push $3
l1390:
	pop _sob2
	push $4
	pop _sfunc2
	call _gsq,show
	push 0
	call _gsq,transparency
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene0"
	call _clfio,_play
	end method
	method CutScene0
	push _sob1
	push _sfunc1
	cthis callfun
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method close
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obclose
	end method
	method obclose
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob1
	push $2
	pop _sfunc1
	push 0
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene1"
	call _clfio,_play
	end method
	method CutScene1
	call _gsq,hide
	push _sob1
	push _sfunc1
	cthis callfun
	end method
	method enter
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obenter
	end method
	method obenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob2
	push $2
	pop _sfunc2
	push 255
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method _callfun2
	call _gsq,hide
	push _sob2
	push _sfunc2
	cthis callfun
	end method
	method isplaying
	call _clfio,isplaying
	end method
	method show
	push 255
	call _gsq,transparency
	call _gsq,show
	end method
	end class

	method allchars
	push "a0 t_!@#$%^&*()_+-=[]\\|}{;':\",./<>?`~"
	end method
	class TextTyper
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new string,sChars
	push $6
	pop sChars
	new int,iLimit
	push $7
	pop iLimit
	push A
	push "Sdir"
	push "left"
	push "W"
	push 0
	push "iFontSize"
	push $2
	push "X"
	push 0
	push "Y"
	push 0
	cthis vars2
	new text,txt1
	push $1
	call txt1,setfont
	push ""
	call txt1,set
	new text,txt2
	push $1
	call txt2,setfont
	push "_"
	call txt2,set
	push iR
	push iG
	push iB
	call txt2,createtxt
	call txt2,hide
	new text,txtpass
	push $1
	call txtpass,setfont
	call txtpass,hide
	new int,bpass
	push 0
	pop bpass
	new string,_sob
	push "null"
	pop _sob
	new string,_sfun
	push "null"
	pop _sfun
	push "timcyk"
	push 300
	push 1
	push "fintimcyk"
	cthis cnewtimerfin
	push "txt1"
	clparent gfxObject,init
	end method
	method setaspasswd
	push 1
	pop bpass
	call txt1,hide
	call txt1,getz
	call txtpass,setz
	call txtpass,show
	cthis copytopass
	end method
	method copytopass
	localdef $1
	call txt1,get
	spushs
	spop $h
	call $h,length
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1392:
	push $3
	push $1
	cmpjl
	cmp0
	je l1393
	jmp l1395
l1394:
	add $3,1
	pop $3
	jmp l1392
l1395:
	push "*"
	popax
	add $2,$a
	pop $2
	jmp l1394
l1393:
	push $2
	call txtpass,txtset
	call txt1,getpx
	call txt1,getpy
	call txtpass,setpos
	end method
	method setastext
	push 0
	pop bpass
	call txt1,show
	call txtpass,hide
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,isin
	end method
	method getcol
	push iR
	push iG
	push iB
	ret
	end method
	method fintimcyk
	cthis getlock
	cmp0
	je l1397
	ret
l1397:
	cthis updatecyk
	cthis play
	end method
	method updatecyk
	call txt2,isvisible
	cmp0
	je l1399
	call txt2,hide
	jmp l1398
l1399:
	call txt1,getex
	call txt1,getpy
	call txt2,setpos
	call txt2,show
l1398:
	end method
	method enable
	cthis unlock
	cthis updatecyk
	call timcyk,play
	end method
	method disable
	call txt2,hide
	push 0
	call timcyk,stop
	cthis lock
	end method
	method onenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob
	push $2
	pop _sfun
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop X
	push $2
	pop Y
	cthis get
	cthis updatetxt
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push X
	push $1
	pop $b
	popax
	add $a,$b
	push Y
	push $2
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method setz
	localint $1
	pop $1
	push $1
	call txt1,setz
	push $1
	call txt2,setz
	end method
	method get
	localstring $1
	call txt1,get
	pop $1
	call $1,length
	push 0
	cmpja
	cmp0
	je l1401
	push $1
	jmp l1400
l1401:
	push ""
l1400:
	end method
	method getpx
	call txt1,getpx
	end method
	method getpy
	call txt1,getpy
	end method
	method getcx
	call txt1,getcx
	end method
	method getcy
	call txt1,getcy
	end method
	method geth
	call txt1,geth
	end method
	method getey
	call txt1,getpy
	push iFontSize
	pop $b
	popax
	add $a,$b
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,clip
	push $1
	push $2
	push $3
	push $4
	call txt2,clip
	end method
	method length
	call txt1,get
	spushs
	spop $h
	call $h,length
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt1,set
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis getcol
	call txt1,txtsetcol
	end method
	method limit=
	localint $1
	pop $1
	push $1
	pop iLimit
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1403
	ret
l1403:
	cthis getname
	push "_ontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1405
	cthis disable
	push _sob
	push _sfun
	cthis callfun
	cthis getname
	push "_onenter"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	ret
l1405:
	localstring $1
	push "t"
	call sChars,contains
	cmp0
	je l1407
	push "tab"
	call keyboard,iskey
	jmp l1409
l1407:
	push 0
	jmp l1409
l1408:
	push 1
l1409:
	cmp0
	je l1410
	push " "
	pop $1
	jmp l1406
l1410:
	call keyboard,getkey
	pop $1
l1406:
	localstring $2
	call txt1,get
	pop $2
	call keyboard,isalpha
	cmp0
	je l1412
	push "a"
	call sChars,contains
	jmp l1414
l1412:
	push 0
	jmp l1414
l1413:
	push 1
l1414:
	cmp0
	jne l1416
	call keyboard,isdigit
	cmp0
	je l1417
	push "0"
	call sChars,contains
	jmp l1419
l1417:
	push 0
	jmp l1419
l1418:
	push 1
l1419:
	cmp0
	jne l1416
	push $1
	call sChars,contains
	jmp l1420
l1415:
	push 0
	jmp l1420
l1416:
	push 1
l1420:
	cmp0
	je l1421
	push iLimit
	push 0
	cmpjle
	cmp0
	jne l1424
	push iLimit
	call $2,length
	cmpja
	jmp l1425
l1423:
	push 0
	jmp l1425
l1424:
	push 1
l1425:
	jmp l1426
l1421:
	push 0
	jmp l1426
l1422:
	push 1
l1426:
	cmp0
	je l1427
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	cthis updatetxt
	cthis updatecyk
	jmp l1411
l1427:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1429
	call $2,length
	push 0
	cmpja
	jmp l1431
l1429:
	push 0
	jmp l1431
l1430:
	push 1
l1431:
	cmp0
	je l1432
	push 1
	call $2,strsube
	cthis updatetxt
	cthis updatecyk
l1432:
l1411:
	end method
	method updatetxt
	localstring $1
	pop $1
	push $1
	call txt1,set
	push iR
	push iG
	push iB
	call txt1,createtxt
	push Sdir
	push "center"
	cmpje
	cmp0
	je l1434
	push X
	push W
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push Y
	call txt1,setpos
	jmp l1433
l1434:
	push Sdir
	push "right"
	cmpje
	cmp0
	je l1436
	push X
	push W
	pop $b
	popax
	add $a,$b
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push Y
	call txt1,setpos
	jmp l1435
l1436:
	push X
	push Y
	call txt1,setpos
l1435:
l1433:
	push bpass
	cmp0
	je l1438
	cthis copytopass
l1438:
	cthis getname
	push "_onwrite"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class ConTextTyper
	parent TextTyper
	parent ObjController
	method init
	clparent TextTyper,init
	clparent ObjController,init
	end method
	end class

	new string,sTextBoxTyperSys
	push "null"
	pop sTextBoxTyperSys
	class TextBoxTyper
	parent LObjController
	parent ImagePos
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent LObjController,init
	clparent ImagePos,init
	new def,Font
	push $1
	push $2
	cthis checkfont
	pop Font
	push A
	push "Cols"
	push $10
	push $3
	pop $b
	popax
	div $a,$b
	psax
	push "Rows"
	push $11
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	push "X"
	push $8
	push "Y"
	push $9
	push "Row"
	push 0
	push "enablemove"
	push 1
	push "W"
	push $10
	push "insystem"
	push 0
	push "H"
	push $11
	push "isvisible"
	push 1
	push "clipx1"
	push $8
	push "clipy1"
	push $9
	push "clipx2"
	push 0
	push "clipy2"
	push 0
	push "clipped"
	push 0
	cthis vars2
	new def,Size
	push $2
	pop Size
	new def,Dy
	push $12
	pop Dy
	new def,Z
	push 0
	pop Z
	localstring $13
	new gmimgvec,grtt
	new gmimgvec,gren
	localint $14
	push 0
	pop $14
l1439:
	push $14
	push Rows
	cmpjl
	cmp0
	je l1440
	jmp l1442
l1441:
	add $14,1
	pop $14
	jmp l1439
l1442:
	push "tt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $13
	push $13
	spushs
	push Font
	push $2
	push $4
	push $5
	push $6
	push $7
	push Cols
	spop $e
	new TextTyper,[$e]
	push $13
	spushs
	push $10
	spop $a
	call [$a],W=
	push $13
	spushs
	push "left"
	spop $a
	call [$a],Sdir=
	push $13
	spushs
	push $8
	push $9
	push $14
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $13
	call grtt,add
	jmp l1441
l1440:
	end method
	method settyper
	localint $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localstring $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $10
	localint $11
	localstring $12
	localstring $13
	push ""
	pop $13
	push $1
	push 0
	cmpjl
	cmp0
	je l1444
	call grtt,last
	spushs
	spop $a
	call [$a],X
	pop $10
	call grtt,last
	spushs
	spop $a
	call [$a],getey
	push Dy
	pop $b
	popax
	add $a,$b
	pop $11
	call grtt,size
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	call grtt,add
	jmp l1443
l1444:
	push $1
	call grtt,get
	pop $12
	push $12
	spushs
	spop $a
	call [$a],X
	pop $10
	push $12
	spushs
	spop $a
	call [$a],getpy
	pop $11
	push $12
	spushs
	spop $a
	call [$a],get
	pop $13
	push $12
	push 0
	push $3
	push $12
	spushs
	spop $a
	call [$a],iFontSize
	pop $b
	popax
	sub $a,$b
	call grtt,movefrom
	push $12
	spushs
	spop $d
	delete [$d]
l1443:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	push $2
	push $3
	push $5
	push $6
	push $7
	push $8
	push W
	push $4
	pop $b
	popax
	div $a,$b
	psax
	spop $e
	new TextTyper,[$e]
	push $12
	spushs
	push W
	spop $a
	call [$a],W=
	push $12
	spushs
	push $9
	spop $a
	call [$a],Sdir=
	push $12
	spushs
	push $13
	spop $a
	call [$a],updatetxt
	push $12
	spushs
	push Z
	spop $a
	call [$a],setz
	push $12
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grtt,move
	push $1
	push $2
	call gren,move
	push $1
	popax
	add X,$a
	pop X
	push $2
	popax
	add Y,$a
	pop Y
	end method
	method size
	call grtt,size
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtt,setz
	push $1
	call gren,setz
	end method
	method getz
	push Z
	end method
	method show
	push 1
	pop isvisible
	call grtt,show
	end method
	method hide
	push 0
	pop isvisible
	call grtt,hide
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 1
	pop clipped
	push $1
	pop clipx1
	push $2
	pop clipy1
	push $3
	pop clipx2
	push $4
	pop clipy2
	localint $5
	push 0
	pop $5
l1445:
	push $5
	call grtt,size
	cmpjl
	cmp0
	je l1446
	jmp l1448
l1447:
	add $5,1
	pop $5
	jmp l1445
l1448:
	push $5
	call grtt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l1447
l1446:
	end method
	method getw
	push W
	end method
	method geth
	push H
	end method
	method enumerate
	localint $1
	pop $1
	localstring $2
	localstring $3
	localint $4
	push 0
	pop $4
l1449:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1450
	jmp l1452
l1451:
	add $4,1
	pop $4
	jmp l1449
l1452:
	push "txte"
	push $4
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new text,[$e]
	push $2
	call gren,add
	push $2
	spushs
	push Z
	spop $a
	call [$a],setz
	push $2
	spushs
	push Font
	spop $a
	call [$a],setfont
	push $2
	spushs
	push ""
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	call tt0,getcol
	spop $a
	call [$a],txtsetcol
	push $2
	spushs
	push X
	push $2
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	push Y
	push $4
	push Size
	push Dy
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l1451
l1450:
	end method
	method cut
	localint $1
	pop $1
	push $1
	pop Rows
	end method
	method enable
	cthis unlock
	cthis activateact
	end method
	method disable
	cthis lock
	push "disable"
	call grtt,eval
	end method
	method actual
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	end method
	method activate
	localint $1
	pop $1
	cthis unlock
	push $1
	push 0
	cmpjae
	cmp0
	je l1454
	push $1
	push Rows
	cmpjl
	jmp l1456
l1454:
	push 0
	jmp l1456
l1455:
	push 1
l1456:
	cmp0
	je l1457
	push insystem
	cmp0
	je l1459
	push GAME
	spushs
	push sTextBoxTyperSys
	spop $a
	call [$a],isgmobj
	cmp0
	je l1461
	push sTextBoxTyperSys
	cthis getname
	cmpjne
	jmp l1463
l1461:
	push 0
	jmp l1463
l1462:
	push 1
l1463:
	cmp0
	je l1464
	push sTextBoxTyperSys
	spushs
	spop $a
	call [$a],deactivate
l1464:
	cthis getname
	pop sTextBoxTyperSys
l1459:
	cthis deactivate
	push $1
	pop Row
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],enable
	cthis getname
	push "_activate"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1457:
	end method
	method activateact
	push Row
	cthis activate
	end method
	method deactivate
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disable
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1466
	ret
l1466:
	cthis getname
	push "_boxontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1468
	localdef $1
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	pop $1
	call $1,clear
	call $1,length
	push 0
	cmpje
	cmp0
	je l1470
	push enablemove
	jmp l1472
l1470:
	push 0
	jmp l1472
l1471:
	push 1
l1472:
	cmp0
	je l1473
	localdef $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l1474:
	push $2
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l1475
	jmp l1477
l1476:
	sub $2,1
	pop $2
	jmp l1474
l1477:
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1476
l1475:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	push Rows
	cmpjl
	cmp0
	je l1479
	push ""
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis setid
l1479:
l1473:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1467
l1468:
	push "up"
	call keyboard,iskey
	cmp0
	je l1481
	push Row
	push 0
	cmpja
	jmp l1483
l1481:
	push 0
	jmp l1483
l1482:
	push 1
l1483:
	cmp0
	je l1484
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1480
l1484:
	push "down"
	call keyboard,iskey
	cmp0
	je l1486
	push Row
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l1488
l1486:
	push 0
	jmp l1488
l1487:
	push 1
l1488:
	cmp0
	je l1489
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1485
l1489:
	push "pgdown"
	call keyboard,iskey
	cmp0
	je l1491
	push Row
	push Rows
	push 10
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1493
	push Row
	push 10
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1492
l1493:
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1492:
	jmp l1490
l1491:
	push "pgup"
	call keyboard,iskey
	cmp0
	je l1495
	push Row
	push 9
	cmpja
	cmp0
	je l1497
	push Row
	push 10
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1496
l1497:
	push 0
	cthis activate
l1496:
	jmp l1494
l1495:
	push "backspace"
	call keyboard,iskey
	cmp0
	jne l1500
	push "delete"
	call keyboard,iskey
	jmp l1501
l1499:
	push 0
	jmp l1501
l1500:
	push 1
l1501:
	cmp0
	je l1502
	cthis actual
	spushs
	spop $a
	call [$a],length
	push 0
	cmpje
	jmp l1504
l1502:
	push 0
	jmp l1504
l1503:
	push 1
l1504:
	cmp0
	je l1505
	push enablemove
	cmp0
	je l1507
	localdef $2
	push Row
	pop $2
l1508:
	push $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1509
	jmp l1511
l1510:
	add $2,1
	pop $2
	jmp l1508
l1511:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1510
l1509:
	push ""
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setid
l1507:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1513
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1513:
	jmp l1498
l1505:
	push "onkeydown"
	call grtt,eval
l1498:
l1494:
l1490:
l1485:
l1480:
l1467:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1515
	ret
l1515:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push clipped
	cmp0
	je l1517
	push $1
	push $2
	push clipx1
	push clipy1
	push clipx2
	push clipy2
	call clsurf,isin
	jmp l1519
l1517:
	push 0
	jmp l1519
l1518:
	push 1
l1519:
	cmp0
	jne l1521
	push clipped
	neg
	cmp0
	je l1522
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	jmp l1524
l1522:
	push 0
	jmp l1524
l1523:
	push 1
l1524:
	jmp l1525
l1520:
	push 0
	jmp l1525
l1521:
	push 1
l1525:
	cmp0
	je l1526
	cthis deactivate
	localint $3
	push 0
	pop $3
l1527:
	push $3
	cthis size
	cmpjl
	cmp0
	je l1528
	jmp l1530
l1529:
	add $3,1
	pop $3
	jmp l1527
l1530:
	push "tt"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getey
	push $2
	cmpja
	cmp0
	je l1532
	push $3
	cthis activate
	ret
l1532:
	jmp l1529
l1528:
	jmp l1516
l1526:
	cthis getname
	push "_OUTSIDE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1516:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	cmp0
	je l1534
	push isvisible
	neg
	jmp l1536
l1534:
	push 0
	jmp l1536
l1535:
	push 1
l1536:
	cmp0
	je l1537
	push 0
	ret
l1537:
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	end method
	method getid
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method getact
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method idpx
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpx
	end method
	method idpy
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpy
	end method
	method getpx
	push X
	end method
	method getpy
	push Y
	end method
	method get
	push 0
	cthis getfrom
	end method
	method getfrom
	localint $1
	pop $1
	push $1
	push ""
	cthis getlinesfrom
	end method
	method getlinesfrom
	localint $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push ""
	pop $3
	localint $4
	push $1
	pop $4
l1538:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1539
	jmp l1541
l1540:
	add $4,1
	pop $4
	jmp l1538
l1541:
	push "tt"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	push $2
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	jmp l1540
l1539:
	push $3
	end method
	method getlines
	push 0
	push " "
	cthis getlinesfrom
	end method
	method nonempty
	localint $1
	pop $1
	localstring $2
l1542:
	push $1
	call grtt,size
	cmpjl
	cmp0
	je l1543
	jmp l1545
l1544:
	add $1,1
	pop $1
	jmp l1542
l1545:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	pop $2
	call $2,clear
	call $2,length
	push 0
	cmpja
	cmp0
	je l1547
	push $1
	ret
l1547:
	jmp l1544
l1543:
	push 1
	popax
	sub 0,$a
	end method
	method clear
	call grtt,txtreset
	end method
	method setid
	localstring $1
	localint $2
	pop $2
	pop $1
	call grtt,size
	push $2
	cmpjae
	cmp0
	je l1549
	push "tt"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],txtset
l1549:
	end method
	method settext
	localint $1
	pop $1
l1550:
	push $1
	push 0
	cmpja
	cmp0
	je l1551
	sub $1,1
	pop $1
	push $1
	cthis setid
	jmp l1550
l1551:
	end method
	method copytodb
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
	localint $2
	push 0
	pop $2
l1552:
	push $2
	call grtt,size
	cmpjl
	cmp0
	je l1553
	jmp l1555
l1554:
	add $2,1
	pop $2
	jmp l1552
l1555:
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	call grtt,get
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],add
	jmp l1554
l1553:
	end method
	method copyfromdb
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis copyfromdbii
	end method
	method copyfromdbss
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis copyfromdbii
	end method
	method copyfromdbii
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1558
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	jmp l1559
l1557:
	push 0
	jmp l1559
l1558:
	push 1
l1559:
	cmp0
	je l1560
	ret
l1560:
	cthis clear
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	cthis size
	cmpja
	cmp0
	je l1562
	push $2
	cthis size
	pop $b
	popax
	add $a,$b
	pop $3
l1562:
	localint $4
	push $2
	pop $4
l1563:
	push $4
	push $3
	cmpjl
	cmp0
	je l1564
	jmp l1566
l1565:
	add $4,1
	pop $4
	jmp l1563
l1566:
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmp0
	je l1568
	push $1
	spushs
	push $4
	push 0
	spop $a
	call [$a],get
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis setid
l1568:
	jmp l1565
l1564:
	end method
	method copyfromdbrow
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $4
	push $4
	cthis size
	cmpja
	cmp0
	je l1570
	cthis size
	pop $4
l1570:
	localint $5
	push $3
	pop $5
l1571:
	push $5
	push $4
	cmpjl
	cmp0
	je l1572
	jmp l1574
l1573:
	add $5,1
	pop $5
	jmp l1571
l1574:
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],get
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	cthis setid
	jmp l1573
l1572:
	end method
	method save
	localstring $1
	pop $1
	new db,__tmpdb
	push "__tmpdb"
	cthis copytodb
	push "|"
	call __tmpdb,setseparator
	push $1
	call __tmpdb,save
	delete __tmpdb
	end method
	method load
	localstring $1
	pop $1
	new db,__tmpdb
	push $1
	call __tmpdb,load
	push "__tmpdb"
	cthis copyfromdb
	delete __tmpdb
	end method
	end class

	class GUITextBoxTyper
	parent TextBoxTyper
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	push $9
	push $10
	push $11
	push $12
	clparent TextBoxTyper,init
	push A
	push "rewinder"
	push "null"
	push "rewinderbg"
	push "null"
	cthis vars2
	end method
	method setrewinder
	localstring $1
	pop $1
	push $1
	pop rewinder
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	pop rewinderbg
	end method
	method activate
	localint $1
	pop $1
	push $1
	clparent TextBoxTyper,activate
	cthis updaterewactual
	end method
	method updaterewactual
	push Row
	cthis updaterewpos
	end method
	method updaterewpos
	localint $1
	pop $1
	push rewinder
	push "null"
	cmpjne
	cmp0
	je l1576
	localdef $2
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $a
	call [$a],getpy
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	cmpjl
	cmp0
	je l1578
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
	jmp l1577
l1578:
	push $2
	spushs
	spop $a
	call [$a],getey
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	cmpja
	cmp0
	je l1580
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
l1580:
l1577:
l1576:
	end method
	end class

	class DelayTaker
	method init
	new int,bonrel
	push 0
	pop bonrel
	new int,bstart
	push 0
	pop bstart
	new int,bclickrel
	push 1
	pop bclickrel
	push "timwez"
	push 300
	push 1
	push "DelayTaker0"
	cthis cnewtimerfin
	end method
	method DelayTaker0
	push 1
	pop bonrel
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	pop bclickrel
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	call timwez,delay
	end method
	method take
	push bclickrel
	cmp0
	je l1582
	call timwez,play
	push 0
	pop bonrel
	jmp l1581
l1582:
	push 1
	pop bonrel
l1581:
	push 1
	pop bstart
	end method
	method ret
	push 0
	pop bonrel
	push 0
	pop bstart
	push 0
	call timwez,stop
	end method
	method isonclick
	cthis stoptimer
	push bstart
	cmp0
	je l1583
	push bonrel
	neg
	jmp l1585
l1583:
	push 0
	jmp l1585
l1584:
	push 1
l1585:
	end method
	method isonrel
	cthis stoptimer
	push bstart
	cmp0
	je l1586
	push bonrel
	jmp l1588
l1586:
	push 0
	jmp l1588
l1587:
	push 1
l1588:
	end method
	method istaken
	push bstart
	end method
	method stoptimer
	push 0
	call timwez,stop
	end method
	end class

	class ImgMover
	method init
	new string,smoved
	push "null"
	pop smoved
	new int,ilastx
	new int,ilasty
	new int,irelx
	new int,irely
	end method
	method mssetobj
	localstring $1
	pop $1
	push $1
	call mouse,getpos
	cthis setobj
	end method
	method setobj
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	push 0
	cthis set
	end method
	method setcobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis setobj
	end method
	method setpobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setobj
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $4
	pop $b
	popax
	sub $a,$b
	pop ilastx
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $5
	pop $b
	popax
	sub $a,$b
	pop ilasty
	push $2
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop irelx
	push $3
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop irely
	push $1
	pop smoved
	end method
	method msmove
	call mouse,getpos
	cthis move
	end method
	method msftmove
	call mouse,getpos
	cthis ftmove
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1590
	push smoved
	spushs
	push $1
	push smoved
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push irelx
	pop $b
	popax
	sub $a,$b
	push $2
	push smoved
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	push irely
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
l1590:
	end method
	method ftmove
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1592
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
l1592:
	end method
	method retobj
	push 0
	push 0
	cthis ret
	end method
	method ret
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push ilastx
	push $1
	pop $b
	popax
	add $a,$b
	push ilasty
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	cthis free
	end method
	method put
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	cthis free
	end method
	method free
	push "null"
	pop smoved
	end method
	method getmover
	push smoved
	ret
	end method
	method getfree
	localdef $1
	push smoved
	pop $1
	cthis free
	push $1
	end method
	method moving
	push smoved
	push "null"
	cmpjne
	ret
	end method
	end class

	class ConImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	push _sme
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1594
	push _sme
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1594:
	end method
	end class

	class DelayMover
	parent ImgMover
	parent LObjController
	method init
	clparent ImgMover,init
	clparent LObjController,init
	new DelayTaker,cldt
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method _put
	call cldt,ret
	push _sme
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	call cldt,take
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1596
	ret
l1596:
	call cldt,isonclick
	cmp0
	je l1598
	cthis _put
	jmp l1597
l1598:
	call cldt,istaken
	neg
	cmp0
	je l1600
	push _sme
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1600:
l1597:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1602
	ret
l1602:
	call cldt,isonrel
	cmp0
	je l1604
	cthis _put
l1604:
	end method
	end class

	class Rewinder
	parent classlocker
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new string,sarrowdir
	new int,ilenx
	new int,ileny
	new string,sgr
	new string,sorientation
	new int,bvertical
	new int,bfilteritem
	push 0
	pop bfilteritem
	new int,ibx1
	push 0
	pop ibx1
	new int,ibx2
	push iResX
	pop ibx2
	new int,iby1
	push 0
	pop iby1
	new int,iby2
	push iResY
	pop iby2
	new int,iodleg
	push 2
	pop iodleg
	new ImgMover,clmv
	push "timtick"
	push 1
	push 1
	push "timfin"
	cthis cnewtimercyclefin
	push A
	push "borx1"
	push $1
	push "bory1"
	push $2
	push "borx2"
	push $3
	push "bory2"
	push $4
	cthis vars2
	new snd,fxrew
	end method
	method movefilter
	push 1
	pop bfilteritem
	end method
	method movenormal
	push 0
	pop bfilteritem
	end method
	method setfxrew
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call fxrew,load
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push $1
	push $2
	push $3
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,set
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1607
	push sorientation
	push "down"
	cmpje
	jmp l1608
l1606:
	push 0
	jmp l1608
l1607:
	push 1
l1608:
	cmp0
	je l1609
	push sgr
	spushs
	push $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	push 0
	spop $a
	call [$a],move
	jmp l1605
l1609:
	push sgr
	spushs
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	spop $a
	call [$a],move
l1605:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],remove
	end method
	method pickup
	localint $1
	localint $2
	pop $2
	pop $1
	push sgr
	spushs
	push $1
	push $2
	push 1
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l1611
	push sgr
	spushs
	spop $a
	call [$a],getsfound
	push $1
	push $2
	cthis getitem
	push 1
	ret
l1611:
	push 0
	ret
	end method
	method mspickup
	call mouse,getpos
	cthis pickup
	ret
	end method
	method freeitem
	call clmv,free
	end method
	method moveitem
	push bfilteritem
	cmp0
	je l1613
	call clmv,msftmove
	jmp l1612
l1613:
	call clmv,msmove
l1612:
	end method
	method retitem
	localstring $1
	call clmv,getmover
	pop $1
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,ret
	push $1
	cthis putitem
	end method
	method putitem
	localstring $1
	pop $1
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1616
	push sorientation
	push "down"
	cmpje
	jmp l1617
l1615:
	push 0
	jmp l1617
l1616:
	push 1
l1617:
	cmp0
	je l1618
	push $1
	spushs
	push sgr
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l1614
l1618:
	push $1
	spushs
	push 0
	push sgr
	spushs
	spop $a
	call [$a],getey
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
l1614:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],add
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $1
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	end method
	method getmoved
	call clmv,getmover
	ret
	end method
	method getbutw
	call anupstd,getw
	ret
	end method
	method getbuth
	call anupstd,geth
	ret
	end method
	method movearrows
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grarrows,move
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $6
	pop sgr
	new anima,anupstd
	push $1
	call anupstd,load
	push $2
	call anupstd,setz
	push "up"
	push 0
	call anupstd,setframe
	push "anupstd"
	push "anupact"
	cthis copyanima
	push "up"
	push 1
	call anupact,setframe
	push "anupstd"
	push "andownact"
	cthis copyanima
	push "down"
	push 1
	call andownact,setframe
	push "anupstd"
	push "andownstd"
	cthis copyanima
	push "down"
	push 0
	call andownstd,setframe
	push "butup"
	push "anupstd"
	push "anupact"
	push "null"
	push $3
	cthis newbutan
	push "butdown"
	push "andownstd"
	push "andownact"
	push "null"
	push $3
	cthis newbutan
	push "onmoveon"
	push "_rewbutmoveon"
	call butup,addmethod
	push "onmoveon"
	push "_rewbutmoveon"
	call butdown,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butup,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butdown,addmethod
	push "onclick"
	push "_rewbutclick"
	call butup,addmethod
	push "onclick"
	push "_rewbutclick"
	call butdown,addmethod
	push "onrel"
	push "_rewbutrel"
	call butup,addmethod
	push "onrel"
	push "_rewbutrel"
	call butdown,addmethod
	push $4
	pop sorientation
	new gmimgvec,grarrows
	push "grarrows"
	push "anupstd"
	popax
	pop $b
	psax
	call [$b],operator+
	push "anupact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownstd"
	popax
	pop $b
	psax
	call [$b],operator+
	popax
	localint $7
	localint $8
	localint $9
	localint $10
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1621
	push sorientation
	push "down"
	cmpje
	jmp l1622
l1620:
	push 0
	jmp l1622
l1621:
	push 1
l1622:
	cmp0
	je l1623
	push 0
	pop bvertical
	push $5
	pop ilenx
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1625
	push borx1
	push bory2
	call anupstd,geth
	pop $b
	popax
	sub $a,$b
	call anupstd,setpos
	push borx1
	push bory2
	call anupact,geth
	pop $b
	popax
	sub $a,$b
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call andownstd,getey
	pop $7
	jmp l1624
l1625:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownact,setpos
	push bory1
	pop $7
l1624:
	call anupstd,getex
	push iodleg
	pop $b
	popax
	add $a,$b
	pop ibx1
	call andownstd,getpx
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop ibx2
	push ibx1
	pop $8
	jmp l1619
l1623:
	push 1
	pop bvertical
	push $5
	pop ileny
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1627
	push borx2
	call anupstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupstd,setpos
	push borx2
	call anupact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call anupstd,getex
	pop $8
	jmp l1626
l1627:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx1
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx1
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	push borx1
	pop $8
l1626:
	call anupstd,getey
	push iodleg
	pop $b
	popax
	add $a,$b
	pop iby1
	call andownstd,getpy
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop iby2
	push iby1
	pop $7
l1619:
	cthis getname
	push "up"
	call butup,_rewbuildbut
	cthis getname
	push "down"
	call butdown,_rewbuildbut
	localint $11
	push $6
	spushs
	spop $a
	call [$a],size
	pop $11
	push $6
	spushs
	push $8
	push $7
	spop $a
	call [$a],_setpos
	new int,ilimx
	push $8
	pop ilimx
	new int,ilimy
	push $7
	pop ilimy
	localstring $12
	localint $13
	push 0
	pop $13
l1628:
	push $13
	push $11
	cmpjl
	cmp0
	je l1629
	jmp l1631
l1630:
	add $13,1
	pop $13
	jmp l1628
l1631:
	push sgr
	spushs
	push $13
	spop $a
	call [$a],get
	pop $12
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1633
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1632
l1633:
	push sorientation
	push "left"
	cmpje
	cmp0
	je l1635
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1634
l1635:
	push sorientation
	push "up"
	cmpje
	cmp0
	je l1637
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	jmp l1636
l1637:
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1639
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
l1639:
l1636:
l1634:
l1632:
	push $12
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	jmp l1630
l1629:
	end method
	method _rewbuildbut
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sob
	push $1
	pop _sob
	new string,_sdir
	push $2
	push "up"
	cmpje
	cmp0
	je l1641
	push bvertical
	push 0
	cmpje
	cmp0
	je l1643
	push "left"
	pop _sdir
	jmp l1642
l1643:
	push "up"
	pop _sdir
l1642:
	jmp l1640
l1641:
	push $2
	push "down"
	cmpje
	cmp0
	je l1645
	push bvertical
	push 0
	cmpje
	cmp0
	je l1647
	push "right"
	pop _sdir
	jmp l1646
l1647:
	push "down"
	pop _sdir
l1646:
l1645:
l1640:
	end method
	method _rewbutmoveon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _rewbutclick
	push _sdir
	cthis mstrzalkaon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method mstrzalkaon
	localstring $1
	pop $1
	push $1
	pop sarrowdir
	call timtick,play
	end method
	method _rewbutrel
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	end method
	method _rewstrzalkaoff
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method timfin
	cthis getlock
	cmp0
	je l1649
	ret
l1649:
	localint $1
	push 0
	pop $1
	push sarrowdir
	push "null"
	cmpjne
	cmp0
	je l1651
	push sgr
	spushs
	spop $a
	call [$a],empty
	neg
	jmp l1653
l1651:
	push 0
	jmp l1653
l1652:
	push 1
l1653:
	cmp0
	je l1654
	push sarrowdir
	push "up"
	cmpje
	cmp0
	je l1656
	push sgr
	spushs
	spop $a
	call [$a],getey
	call andownstd,getpy
	push ileny
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1658
	push sgr
	spushs
	push 0
	push ileny
	popax
	sub 0,$a
	spop $a
	call [$a],move
	push 1
	pop $1
l1658:
	jmp l1655
l1656:
	push sarrowdir
	push "down"
	cmpje
	cmp0
	je l1660
	push sgr
	spushs
	spop $a
	call [$a],getpy
	push ilimy
	cmpjl
	cmp0
	je l1662
	push sgr
	spushs
	push 0
	push ileny
	spop $a
	call [$a],move
	push 1
	pop $1
l1662:
	jmp l1659
l1660:
	push sarrowdir
	push "left"
	cmpje
	cmp0
	je l1664
	push sgr
	spushs
	spop $a
	call [$a],getex
	call andownstd,getpx
	push ilenx
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1666
	push sgr
	spushs
	push ilenx
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1666:
	jmp l1663
l1664:
	push sarrowdir
	push "right"
	cmpje
	cmp0
	je l1668
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push ilimx
	cmpjl
	cmp0
	je l1670
	push sgr
	spushs
	push ilenx
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1670:
l1668:
l1663:
l1659:
l1655:
l1654:
	push $1
	cmp0
	je l1672
	call fxrew,isplaying
	neg
	cmp0
	je l1674
	call fxrew,play
l1674:
	jmp l1671
l1672:
	push 0
	call fxrew,stop
l1671:
	cthis play
	end method
	end class

	class ConRewinder
	parent Rewinder
	parent ObjController
	method init
	clparent Rewinder,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	clparent Rewinder,getitem
	call cldt,take
	end method
	method _put
	call cldt,ret
	push _sme
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmousemove
	cthis moveitem
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1676
	ret
l1676:
	call cldt,isonrel
	cmp0
	je l1678
	cthis _put
l1678:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1680
	ret
l1680:
	call cldt,isonclick
	cmp0
	je l1682
	cthis _put
	jmp l1681
l1682:
	call cldt,istaken
	neg
	cmp0
	je l1684
	push _sme
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1684:
l1681:
	end method
	end class

	class Button
	parent LObjController
	method init
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	push A
	push "sobject"
	push "null"
	push "sclicked"
	push "null"
	cthis vars2
	end method
	method sort
	call grbuts,sortimgs
	end method
	method addgroups
	call grbuts,addgroups
	call grbuts,sortimgs
	end method
	method addgroup
	localstring $1
	pop $1
	push $1
	call grbuts,addgr
	call grbuts,sortimgs
	end method
	method addlist
	call grbuts,addlist
	call grbuts,sortimgs
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grbuts,add
	call grbuts,sortimgs
	end method
	method addlocker
	localstring $1
	pop $1
	push $1
	cthis add
	push $1
	clparent classlocker,setaslocker
	end method
	method removebutlist
	push "removebut"
	cthis withlist
	end method
	method removebut
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	push $1
	push sobject
	cmpje
	cmp0
	je l1686
	push "null"
	pop sobject
l1686:
	push $1
	push sclicked
	cmpje
	cmp0
	je l1688
	push "null"
	pop sclicked
l1688:
	end method
	method load
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push "gmimgvec"
	push $1
	spop $a
	call [$a],varnew
	push $1
	push $2
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],each
	push $1
	cthis addgroup
	end method
	method remove
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	cmp0
	je l1690
	push $1
	call grbuts,removegr
l1690:
	end method
	method loadfrom
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	cthis getgraphpath
	pop $5
	push $2
	cthis setgraphpath
	push $1
	push $3
	push $4
	cthis load
	push $5
	cthis setgraphpath
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1692
	ret
l1692:
	cthis checktouchpad
	cmp0
	je l1694
	cthis onmousemove
	call engine,redraw
l1694:
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1696
	push sobject
	pop sclicked
	push sobject
	spushs
	push "butclick"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1698
	push sobject
	spushs
	spop $a
	call [$a],butclick
l1698:
l1696:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1700
	ret
l1700:
	cthis checktouchpad
	cmp0
	je l1702
	cthis lastoff
l1702:
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1704
	push sclicked
	spushs
	push "butlrel"
	spop $a
	call [$a],hasaddedmet
	jmp l1706
l1704:
	push 0
	jmp l1706
l1705:
	push 1
l1706:
	cmp0
	je l1707
	push sclicked
	spushs
	spop $a
	call [$a],butlrel
	jmp l1703
l1707:
	push "null"
	pop sclicked
l1703:
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1709
	ret
l1709:
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1711
	push sclicked
	spushs
	push "butmoving"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1713
	push sclicked
	spushs
	spop $a
	call [$a],butmoving
l1713:
l1711:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push "isbutin"
	call grbuts,isinfunc
	cmp0
	je l1715
	localdef $3
	call grbuts,getsfound
	pop $3
	push $3
	push sobject
	cmpjne
	cmp0
	je l1717
	cthis lastoff
	push $3
	pop sobject
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $3
	spushs
	push "butmoveon"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1719
	push $3
	spushs
	spop $a
	call [$a],butmoveon
l1719:
l1717:
	jmp l1714
l1715:
	cthis lastoff
l1714:
	end method
	method lastoff
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1721
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	spushs
	push "butmoveoff"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1723
	push sobject
	spushs
	spop $a
	call [$a],butmoveoff
l1723:
	push "null"
	pop sobject
l1721:
	end method
	end class

	method Button_isin
	push "isbutin"
	push "global5"
	cthis addmethod
	end method
	method global5
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 0
	cthis isin
	end method
	method Button_isinvis
	push "isbutin"
	push "global6"
	cthis addmethod
	end method
	method global6
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method Button_isinalpha
	push "isbutin"
	push "global7"
	cthis addmethod
	end method
	method global7
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	end method
	method Button_isinvisalpha
	push "isbutin"
	push "global8"
	cthis addmethod
	end method
	method global8
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 1
	cthis isin
	end method
	method Button_moveon
	push "butmoveon"
	push "global9"
	cthis addmethod
	end method
	method global9
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l1725
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l1725:
	end method
	method Button_moveonplay
	push "butmoveon"
	push "global10"
	cthis addmethod
	end method
	method global10
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l1727
	push 1
	popax
	sub 0,$a
	cthis play
l1727:
	end method
	method Button_moveoff
	push "butmoveoff"
	push "global11"
	cthis addmethod
	end method
	method global11
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method Button_moveonms
	push "butmoveon"
	push "global12"
	cthis addmethod
	end method
	method global12
	call advmouse,setbut
	end method
	method Button_moveoffms
	push "butmoveoff"
	push "global13"
	cthis addmethod
	end method
	method global13
	call advmouse,setstd
	end method
	method Button_std
	cthis Button_isin
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdalpha
	cthis Button_isinalpha
	cthis Button_moveon
	cthis Button_moveoff
	end method
	class Buttons
	parent LObjController
	method init
	localstring $1
	pop $1
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	new int,__id
	push 0
	pop __id
	new string,sanbut
	push "anbut"
	pop sanbut
	push sanbut
	push $1
	push 10
	cthis newanima
	push sanbut
	push sanbut
	push "grbuts"
	cthis newanactionsgr
	popax
	call anbut,hide
	push 10
	call grbuts,setz
	push "Buttons0"
	call grbuts,removeif
	new string,slastb
	push "null"
	pop slastb
	push A
	push "sobject"
	push "null"
	push "bvisible"
	push 1
	push "balpha"
	push 1
	cthis vars2
	cthis checktouchpad
	cmp0
	je l1731
	new int,ipadclick
	push 0
	pop ipadclick
	push "bcheck2klik"
	push 0
	cthis var2
l1731:
	end method
	method Buttons0
	cthis actionname
	push "bkg"
	cmpje
	cmp0
	je l1729
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setz
	push 1
	jmp l1728
l1729:
	push 0
l1728:
	end method
	method _release
	cthis checktouchpad
	cmp0
	je l1733
	push 0
	pop ipadclick
l1733:
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],setframe
	cthis copyobj
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "null"
	pop slastb
	call advmouse,setstd
	end method
	method getbut
	call grbuts,getsfound
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1735
	ret
l1735:
	push 1
	popax
	sub 0,$a
	push 0
	call grbuts,setframe
	localdef $1
	call mouse,getpos
	push bvisible
	push balpha
	call grbuts,isin
	pop $1
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1737
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
l1737:
	push $1
	cmp0
	je l1739
	localstring $2
	call grbuts,getsfound
	pop $2
	push $2
	push slastb
	cmpjne
	cmp0
	je l1741
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1743
	cthis _release
l1743:
	push $2
	pop slastb
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	cthis copyobj
	call advmouse,setact
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1741:
	jmp l1738
l1739:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1745
	cthis _release
l1745:
l1738:
	end method
	method copyobj
	push slastb
	spushs
	spop $a
	call [$a],actionname
	pop sobject
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1747
	ret
l1747:
	cthis checktouchpad
	cmp0
	je l1749
	push bcheck2klik
	jmp l1751
l1749:
	push 0
	jmp l1751
l1750:
	push 1
l1751:
	cmp0
	je l1752
	push ipadclick
	cmp0
	je l1754
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l1753
l1754:
	push 1
	pop ipadclick
	cthis onmousemove
l1753:
	jmp l1748
l1752:
	cthis _butmouselclick
l1748:
	end method
	method _butmouselclick
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1756
	cthis copyobj
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1756:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1758
	ret
l1758:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1760
	cthis copyobj
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1760:
	end method
	method disable
	cthis lock
	call grbuts,hide
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1762
	call advmouse,setstd
	push "null"
	pop slastb
l1762:
	end method
	method enable
	cthis unlock
	call grbuts,show
	end method
	end class

	class TextDb
	parent classlocker
	parent ObjController
	parent gfxObject
	method init
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	clparent ObjController,init
	new string,sFont
	push $1
	pop sFont
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iFontSize
	push $2
	pop iFontSize
	localstring $12
	localint $13
	localint $14
	push "Z"
	push $10
	cthis var2
	push ".db"
	call $3,contains
	cmp0
	je l1764
	push 0
	push 6
	call $3,getb
	push "$path:"
	cmpje
	cmp0
	je l1766
	new db,dbtxt
	push 6
	call $3,strsubb
	call dbtxt,load
	jmp l1765
l1766:
	push "dbtxt"
	push $3
	cthis newdb
l1765:
	jmp l1763
l1764:
	new db,dbtxt
	push 0
	push 5
	call $3,getb
	spushs
	push "$var:"
	cmpst
	jne l1768
	spop $a
	push 5
	call $3,strsubb
	call dbtxt,dbcopy
	jmp l1767
l1768:
	push "$row:"
	cmpst
	jne l1769
	spop $a
	push 5
	call $3,strsubb
	spushs
	push ","
	spop $h
	call $h,strgetto
	pop $12
	push ","
	call $3,strgetfrom
	pop $13
	push 0
	pop $14
l1770:
	push $14
	push $12
	spushs
	push $13
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1771
	jmp l1773
l1772:
	add $14,1
	pop $14
	jmp l1770
l1773:
	call dbtxt,addrow
	popax
	push $14
	push $12
	spushs
	push $13
	push $14
	spop $a
	call [$a],get
	call dbtxt,add
	jmp l1772
l1771:
	jmp l1767
l1769:
	spop $a
	push $3
	call dbtxt,dbaddlast
l1767:
l1763:
	localint $15
	push 0
	pop $15
	localint $16
	call dbtxt,getrowsno
	pop $16
	new gmimgvec,grtxt
	push $7
	push $8
	call grtxt,_setpos
	push 0
	pop $14
l1774:
	push $14
	push $16
	cmpjl
	cmp0
	je l1775
	jmp l1777
l1776:
	add $14,1
	pop $14
	jmp l1774
l1777:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	spop $e
	new text,[$e]
	push $12
	spushs
	push $1
	spop $a
	call [$a],setfont
	push $12
	spushs
	push $14
	push 0
	call dbtxt,get
	spop $a
	call [$a],set
	push $12
	spushs
	push $7
	push $8
	spop $a
	call [$a],setpos
	push $2
	push $9
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	push $12
	spushs
	push $10
	spop $a
	call [$a],setz
	push $12
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	push $12
	spushs
	spop $a
	call [$a],getw
	push $15
	cmpja
	cmp0
	je l1779
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $15
l1779:
	push $12
	call grtxt,add
	jmp l1776
l1775:
	push "Rows"
	push $16
	cthis var2
	push $11
	push "right"
	cmpje
	cmp0
	jne l1782
	push $11
	push "center"
	cmpje
	jmp l1783
l1781:
	push 0
	jmp l1783
l1782:
	push 1
l1783:
	cmp0
	je l1784
	push 0
	pop $14
l1785:
	push $14
	push $16
	cmpjl
	cmp0
	je l1786
	jmp l1788
l1787:
	add $14,1
	pop $14
	jmp l1785
l1788:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $11
	push "center"
	cmpje
	cmp0
	je l1790
	push $12
	spushs
	push $15
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	spop $a
	call [$a],move
	jmp l1789
l1790:
	push $12
	spushs
	push $15
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l1789:
	jmp l1787
l1786:
l1784:
	push "W"
	push $15
	cthis var2
	push "grtxt"
	clparent gfxObject,init
	end method
	method stdshadow
	localint $1
	pop $1
	push 0
	push 0
	push 0
	push $1
	cthis setshadow
	end method
	method setshadow
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	push sFont
	push iFontSize
	push "_fntbrd"
	cthis _checkfont
	pop $7
	localint $8
	push 0
	pop $8
l1791:
	push $8
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l1792
	jmp l1794
l1793:
	add $8,1
	pop $8
	jmp l1791
l1794:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "txts"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new text,[$e]
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],set
	push $6
	spushs
	push $7
	spop $a
	call [$a],setfont
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $4
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	push $6
	call grtxt,add
	jmp l1793
l1792:
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtxt,setz
	end method
	method getz
	push Z
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call grtxt,isin
	end method
	method view
	localdef $1
	pop $1
	localstring $2
l1795:
	push A
	push $1
	cmpjne
	cmp0
	je l1796
	push $1
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push "txts"
	push "txt"
	call $2,strsubbs
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l1798
	push $2
	spushs
	spop $a
	call [$a],show
l1798:
	localdef $1
	pop $1
	jmp l1795
l1796:
	end method
	method blitto
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l1799:
	push $3
	call grtxt,size
	cmpjl
	cmp0
	je l1800
	jmp l1802
l1801:
	add $3,1
	pop $3
	jmp l1799
l1802:
	push $3
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],buildfullname
	push $1
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],blit
	push GAME
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardel
	jmp l1801
l1800:
	end method
	method setcol
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1803:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l1804
	jmp l1806
l1805:
	add $4,1
	pop $4
	jmp l1803
l1806:
	push $4
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	jmp l1805
l1804:
	end method
	end class

	class Lexer
	method init
	end method
	method buildlex
	push A
	push "id"
	push "found"
	cthis vars
	new vector,vconsts
	push "string"
	call vconsts,type
	new vector,vtmp1
	push "string"
	call vtmp1,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	new int,dot
	push "."
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop dot
	new string,_literal_char
	push "\""
	pop _literal_char
	end method
	method setliteralchar
	localstring $1
	pop $1
	push $1
	pop _literal_char
	end method
	method getliteralchar
	push _literal_char
	end method
	method _isvar
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push id
	pop $3
	push ""
	pop found
	localint $4
l1807:
	push $3
	cthis length
	cmpjl
	cmp0
	je l1808
	push $3
	cthis getbyte
	pop $4
	push $4
	push $1
	cmpjae
	cmp0
	je l1810
	push $4
	push $2
	cmpjle
	jmp l1812
l1810:
	push 0
	jmp l1812
l1811:
	push 1
l1812:
	cmp0
	je l1813
	push $3
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $3,1
	pop $3
	jmp l1809
l1813:
	push $4
	push BYTEa
	cmpjae
	cmp0
	je l1815
	push $4
	push BYTEz
	cmpjle
	jmp l1817
l1815:
	push 0
	jmp l1817
l1816:
	push 1
l1817:
	cmp0
	jne l1819
	push $4
	push BYTEA
	cmpjae
	cmp0
	je l1820
	push $4
	push BYTEZ
	cmpjle
	jmp l1822
l1820:
	push 0
	jmp l1822
l1821:
	push 1
l1822:
	cmp0
	jne l1819
	push $4
	push BYTE_
	cmpje
	jmp l1823
l1818:
	push 0
	jmp l1823
l1819:
	push 1
l1823:
	cmp0
	je l1824
	push ""
	pop found
l1824:
	cthis length
	pop $3
l1809:
	jmp l1807
l1808:
	call found,length
	end method
	method isreal
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
	localint $3
	push 1
	pop $3
l1825:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1826
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l1828
	push $2
	push BYTE9
	cmpjle
	jmp l1830
l1828:
	push 0
	jmp l1830
l1829:
	push 1
l1830:
	cmp0
	jne l1832
	push $2
	push dot
	cmpje
	cmp0
	je l1833
	push $3
	jmp l1835
l1833:
	push 0
	jmp l1835
l1834:
	push 1
l1835:
	jmp l1836
l1831:
	push 0
	jmp l1836
l1832:
	push 1
l1836:
	cmp0
	je l1837
	push $2
	push dot
	cmpje
	cmp0
	je l1839
	push 0
	pop $3
l1839:
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l1827
l1837:
	cthis length
	pop $1
l1827:
	jmp l1825
l1826:
	push $3
	cmp0
	jne l1842
	push 0
	push 1
	call found,getb
	push "."
	cmpje
	cmp0
	jne l1842
	push 0
	push 1
	call found,gete
	push "."
	cmpje
	jmp l1843
l1841:
	push 0
	jmp l1843
l1842:
	push 1
l1843:
	cmp0
	je l1844
	push ""
	pop found
l1844:
	call found,length
	end method
	method isident
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
l1845:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1846
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTEa
	cmpjae
	cmp0
	je l1848
	push $2
	push BYTEz
	cmpjle
	jmp l1850
l1848:
	push 0
	jmp l1850
l1849:
	push 1
l1850:
	cmp0
	jne l1852
	push $2
	push BYTEA
	cmpjae
	cmp0
	je l1853
	push $2
	push BYTEZ
	cmpjle
	jmp l1855
l1853:
	push 0
	jmp l1855
l1854:
	push 1
l1855:
	cmp0
	jne l1852
	push $2
	push BYTE_
	cmpje
	cmp0
	jne l1852
	push $1
	push id
	cmpja
	cmp0
	je l1856
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l1856
	push $2
	push BYTE9
	cmpjle
	jmp l1858
l1856:
	push 0
	jmp l1858
l1857:
	push 1
l1858:
	jmp l1859
l1851:
	push 0
	jmp l1859
l1852:
	push 1
l1859:
	cmp0
	je l1860
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l1847
l1860:
	cthis length
	pop $1
l1847:
	jmp l1845
l1846:
	call found,length
	end method
	method isliteral
	cthis check
	cthis getliteralchar
	cmpjne
	cmp0
	je l1862
	push 0
	ret
l1862:
	localint $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop found
	localstring $2
l1863:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1864
	push $1
	push 1
	cthis getb
	pop $2
	push $2
	cthis getliteralchar
	cmpje
	cmp0
	je l1866
	push 1
	ret
	jmp l1865
l1866:
	push $2
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
l1865:
	jmp l1863
l1864:
	push 0
	end method
	method isconst
	localstring $1
	localint $2
	cthis isident
	pop $2
	localint $3
	push 0
	pop $3
l1867:
	push $3
	call vconsts,size
	cmpjl
	cmp0
	je l1868
	jmp l1870
l1869:
	add $3,1
	pop $3
	jmp l1867
l1870:
	push $3
	call vconsts,get
	pop $1
	push $2
	cmp0
	je l1872
	push $1
	push found
	cmpje
	cmp0
	je l1874
	push 1
	ret
l1874:
	jmp l1871
l1872:
	push id
	call $1,length
	cthis getb
	pop found
	push $1
	push found
	cmpje
	cmp0
	je l1876
	push 1
	ret
l1876:
l1871:
	jmp l1869
l1868:
	push 0
	end method
	method gettoken
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
l1877:
	cthis notend
	cmp0
	je l1878
	cthis check
	push " "
	cmpje
	cmp0
	je l1880
	add id,1
	pop id
	jmp l1879
l1880:
	cthis isconst
	cmp0
	je l1882
	push $1
	spushs
	push "$const"
	spop $a
	call [$a],add
	push $1
	spushs
	cthis read
	spop $a
	call [$a],add
	jmp l1881
l1882:
	cthis isreal
	cmp0
	je l1884
	push $1
	spushs
	push "$real"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l1886
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l1886:
	jmp l1883
l1884:
	cthis isint
	cmp0
	je l1888
	push $1
	spushs
	push "$int"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l1890
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l1890:
	jmp l1887
l1888:
	cthis isident
	cmp0
	je l1892
	push $1
	spushs
	push "$alpha"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l1894
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l1894:
	jmp l1891
l1892:
	cthis isliteral
	cmp0
	je l1896
	push $1
	spushs
	push "$literal"
	spop $a
	call [$a],add
	cthis next
	push 2
	popax
	add id,$a
	pop id
	push $2
	cmp0
	je l1898
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l1898:
	jmp l1895
l1896:
	push $1
	spushs
	push "$error"
	spop $a
	call [$a],add
	add id,1
	pop id
l1895:
l1891:
l1887:
l1883:
l1881:
l1879:
	jmp l1877
l1878:
	end method
	method expectdb
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	localstring $4
	localint $5
	push 0
	pop $5
l1899:
	push $5
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1900
	jmp l1902
l1901:
	add $5,1
	pop $5
	jmp l1899
l1902:
	call vtmp2,free
	push 0
	pop $3
l1903:
	push $3
	push $1
	spushs
	push $5
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1904
	jmp l1906
l1905:
	add $3,1
	pop $3
	jmp l1903
l1906:
	push $1
	spushs
	push $5
	push $3
	spop $a
	call [$a],get
	pop $4
	call $4,clear
	push $4
	push ""
	cmpjne
	cmp0
	je l1908
	push $4
	call vtmp2,add
l1908:
	jmp l1905
l1904:
	push "vtmp2"
	push $2
	cthis expectvec
	cmp0
	je l1910
	push $5
	ret
l1910:
	jmp l1901
l1900:
	push 1
	popax
	sub 0,$a
	end method
	method expectvec
	localstring $1
	localint $2
	pop $2
	pop $1
	push 0
	pop id
	push "vtmp1"
	push $2
	cthis gettoken
	push $1
	call vtmp1,veceq
	end method
	method expects
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call vtmp2,vecbuildfromstring
	push "vtmp2"
	push $3
	cthis expectvec
	end method
	method consts=
	push "addbegin"
	call vconsts,withlist
	end method
	method setas
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlex"
	push "buildlex"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlex
	push $1
	spushs
	push "start"
	push "Lexer0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "notend"
	push "Lexer1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getnext"
	push "Lexer2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "next"
	push "Lexer3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "check"
	push "Lexer4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "ischar"
	push "Lexer5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isint"
	push "Lexer6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isreal"
	push "isreal"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbinary"
	push "Lexer7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isident"
	push "isident"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isconst"
	push "isconst"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "_isvar"
	push "_isvar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "read"
	push "Lexer8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isliteral"
	push "isliteral"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettoken"
	push "gettoken"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expects"
	push "expects"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectvec"
	push "expectvec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectdb"
	push "expectdb"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "consts="
	push "consts="
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setliteralchar"
	push "setliteralchar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getliteralchar"
	push "getliteralchar"
	spop $a
	call [$a],addmethod
	end method
	method Lexer0
	localstring $1
	pop $1
	push $1
	cthis set
	push 0
	pop id
	end method
	method Lexer1
	push id
	cthis length
	cmpjl
	end method
	method Lexer2
	push id
	cthis length
	cmpje
	cmp0
	je l1912
	push "null"
	ret
l1912:
	add id,1
	pop id
	push id
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	cthis getb
	end method
	method Lexer3
	call found,length
	popax
	add id,$a
	pop id
	end method
	method Lexer4
	push id
	cthis length
	cmpje
	cmp0
	je l1914
	push "null"
	ret
l1914:
	push id
	push 1
	cthis getb
	pop found
	push found
	end method
	method Lexer5
	localstring $1
	pop $1
	push id
	push 1
	cthis getb
	call $1,contains
	end method
	method Lexer6
	push BYTE0
	push BYTE9
	cthis _isvar
	end method
	method Lexer7
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis _isvar
	end method
	method Lexer8
	cthis next
	push found
	end method
	end class

	class AnimaFx
	method init
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "_buildanfx"
	push "AnimaFx0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_buildanfx
	push $1
	spushs
	push "onsetframe"
	push "AnimaFx1"
	spop $a
	call [$a],addmethod
	end method
	method AnimaFx0
	new db,dbsnd
	push 3
	call dbsnd,dbbuild
	localint $1
	push 0
	pop $1
l1915:
	push $1
	call dbsnd,getrowsno
	cmpjl
	cmp0
	je l1916
	jmp l1918
l1917:
	add $1,1
	pop $1
	jmp l1915
l1918:
	push $1
	push 0
	push $1
	push 0
	call dbsnd,get
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	call dbsnd,set
	jmp l1917
l1916:
	end method
	method AnimaFx1
	localdef $1
	cthis actionname
	push "_"
	pop $b
	popax
	add $a,$b
	cthis framenr
	pop $b
	popax
	add $a,$b
	call dbsnd,findbyrow
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1920
	push "fx"
	push $1
	push 2
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
l1920:
	end method
	end class

	class Localize
	method init
	end method
	method _lang_db
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push "load"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	cthis lang_path
	push ".db"
	pop $b
	popax
	add $a,$b
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method lang_db
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push ""
	cthis _lang_db
	end method
	method lang_dbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "script"
	cthis _lang_db
	end method
	method lang_dbbeh
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "beh"
	cthis _lang_db
	end method
	method lang_path
	localstring $1
	pop $1
	push "lang/"
	call gameapi,getgamename
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	end method
	end class

	class PyzCounter
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	new int,istart
	new int,istop
	new int,istep
	new int,idigits
	push 50
	pop idigits
	new int,iactual
	new string,_sanima
	push $1
	pop _sanima
	push A
	push "idx"
	push 2
	push "itimestep"
	push $2
	cthis vars2
	new gmimgvec,grcnt
	localint $3
	push 0
	pop $3
l1921:
	push $3
	push idigits
	cmpjl
	cmp0
	je l1922
	jmp l1924
l1923:
	add $3,1
	pop $3
	jmp l1921
l1924:
	localstring $4
	push "pcc"
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $1
	push $4
	cthis copyanima
	push $4
	spushs
	spop $a
	call [$a],hide
	push $4
	call grcnt,add
	jmp l1923
l1922:
	push "timcnt"
	push $2
	push "PyzCounter0"
	cthis timer=
	end method
	method PyzCounter0
	push istep
	popax
	add iactual,$a
	pop iactual
	push iactual
	cthis view
	push iactual
	push istop
	cmpje
	cmp0
	je l1926
	cthis getbuildername
	spushs
	cthis getbuildername
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l1925
l1926:
	cthis play
l1925:
	end method
	method getcypher
	localint $1
	pop $1
	push "pcc"
	push _sanima
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method start
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop istart
	push $2
	pop istop
	push $3
	pop istep
	push istart
	pop iactual
	push istart
	cthis view
	call timcnt,play
	end method
	method showcypher
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis getcypher
	pop $3
	push $3
	spushs
	push 0
	push $2
	spop $a
	call [$a],setframe
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method stop
	push 0
	call timcnt,stop
	end method
	method view
	localint $1
	pop $1
	call grcnt,hide
	push 0
	push 0
	call grcnt,setpos
	push $1
	push 0
	cmpje
	cmp0
	je l1928
	push 0
	push 0
	cthis showcypher
	jmp l1927
l1928:
	localint $2
	push 0
	pop $2
l1929:
	push $1
	push 0
	cmpja
	cmp0
	je l1930
	jmp l1932
l1931:
	add $2,1
	pop $2
	jmp l1929
l1932:
	push $2
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	push $d
	cthis showcypher
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	jmp l1931
l1930:
	localint $3
	push 0
	pop $3
	localint $4
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1933:
	push $4
	push 0
	cmpjae
	cmp0
	je l1934
	jmp l1936
l1935:
	sub $4,1
	pop $4
	jmp l1933
l1936:
	push $4
	cthis getcypher
	spushs
	push $3
	push 0
	spop $a
	call [$a],move
	push $3
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis getcypher
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1935
l1934:
l1927:
	end method
	end class

	module advmouse
	method init
	new anima,anmsc
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	call anmsc,hide
	end method
	method set
	localstring $1
	pop $1
	call anmsc,show
	push $1
	push 0
	call anmsc,setframe
	push "anmsc"
	call mouse,setcursor
	call anmsc,hide
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setact
	push "active"
	cthis set
	end method
	method setbut
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	ret
	end method
	end module

	new string,sAskerGame
	class StdGame
	parent classadv
	parent GameController
	parent Localize
	method init
	localstring $1
	pop $1
	push 0
	pop igmstate
	clparent classadv,init
	push $1
	clparent GameController,init
	clparent Localize,init
	push 0
	push 0
	call clbuts,setcursorpos
	push 0
	push 0
	call claskexit,setcursorpos
	push sgmversion
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis path=
	push SNDPATH
	cthis setwavpath
	call bsms,setstd
	call clmusic,play
	call clbuts,reset
	call claskexit,reset
	call advmouse,setstd
	new Music,mus
	new Button,but1
	end method
	method cloadbut
	localstring $1
	pop $1
	push "scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/common/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l1938
	push "$scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/common/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	jmp l1937
l1938:
	push "$scripts/common/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
l1937:
	end method
	method cwideversion
	push igmmac
	cmp0
	jne l1940
	push igmwindows
	cmp0
	jne l1940
	push sgmversion
	push "e"
	cmpje
	cmp0
	jne l1940
	push sgmversion
	push "grecjamac"
	cmpje
	cmp0
	jne l1940
	push sgmversion
	push "basniemac"
	cmpje
	cmp0
	jne l1940
	push sgmversion
	push "concept"
	cmpje
	jmp l1941
l1939:
	push 0
	jmp l1941
l1940:
	push 1
l1941:
	end method
	method cbutexit
	cthis cwideversion
	cmp0
	je l1943
	push "anbutexit"
	push "butexit_mac"
	cthis cloadbut
	push 300
	cthis newanima
	jmp l1942
l1943:
	push "anbutexit"
	push "butexit"
	cthis cloadbut
	push 300
	cthis newanima
l1942:
	call anbutexit,Button_std
	push "butclick"
	push "StdGame0"
	call anbutexit,addmethod
	push "anbutexit"
	call but1,add
	end method
	method StdGame0
	push GAME
	spushs
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method cbutmusic
	cthis cwideversion
	cmp0
	je l1945
	push "anbutmusic"
	push "butmuz_mac"
	cthis cloadbut
	push 300
	cthis newanima
	jmp l1944
l1945:
	push igmiphone
	cmp0
	je l1947
	push "anbutmusic"
	push "butmuz_iphone"
	cthis cloadbut
	push 300
	cthis newanima
	jmp l1946
l1947:
	push "anbutmusic"
	push "butmuz"
	cthis cloadbut
	push 300
	cthis newanima
l1946:
l1944:
	push bPlayMusic
	neg
	cmp0
	je l1949
	push 1
	push 0
	call anbutmusic,setframe
l1949:
	call anbutmusic,Button_std
	push "butclick"
	push "StdGame1"
	call anbutmusic,addmethod
	push "anbutmusic"
	call but1,add
	end method
	method StdGame1
	localdef $1
	cthis framenr
	pop $1
	push bPlayMusic
	cmp0
	je l1951
	push 0
	pop bPlayMusic
	push 1
	push $1
	cthis setframe
	push GAME
	spushs
	spop $a
	call [$a],stop_music
	jmp l1950
l1951:
	push 1
	pop bPlayMusic
	push 0
	push $1
	cthis setframe
	push GAME
	spushs
	spop $a
	call [$a],play_music
l1950:
	end method
	method cutscene
	push 0
	push 0
	push iResX
	push iResY
	new CutScene,ccs
	push 2000
	call ccs,setz
	end method
	method gotoadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push $2
	pop sgmgame
	push "gameadvdef"
	call gameapi,play
	end method
	method crect
	push 600
	push 196
	push 403
	push 497
	new Rect,rec
	end method
	method crect2
	push 6
	push 174
	push 1012
	push 530
	new Rect,rec2
	end method
	method cshowbut
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call clbuts,StdGame2
	end method
	method StdGame2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	push "getcx"
	call buts,callimgfun
	push $1
	push "getcy"
	call buts,callimgfun
	push $2
	call clp,show
	end method
	method napisshow
	localint $1
	localint $2
	pop $2
	pop $1
	cthis show
	push $1
	push $2
	cthis move
	end method
	method napispod
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 5
	pop $b
	popax
	add $a,$b
	cthis napisshow
	end method
	method advclick
	push igmdebug
	cmp0
	je l1953
	push igmstate
	push 0
	cmpje
	cmp0
	jne l1956
	push igmstate
	push 5
	cmpje
	jmp l1957
l1955:
	push 0
	jmp l1957
l1956:
	push 1
l1957:
	jmp l1958
l1953:
	push 0
	jmp l1958
l1954:
	push 1
l1958:
	cmp0
	je l1959
	push 1
	cthis cactsndstop
l1959:
	end method
	method key_down
	push igmdebug
	cmp0
	je l1961
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l1961
	push "r"
	call keyboard,iskey
	jmp l1963
l1961:
	push 0
	jmp l1963
l1962:
	push 1
l1963:
	cmp0
	je l1964
	cthis crestart
l1964:
	end method
	method askfor
	localdef $1
	pop $1
	push igmstate
	push 111
	cmpjne
	cmp0
	je l1966
	push $1
	pop sAskerGame
	call claskexit,askexittomenu
l1966:
	end method
	method askrestart
	call claskexit,askrestart
	end method
	method onmusicfin
	call mus,play
	end method
	method exit
	call bsms,setstd
	cthis game_exit
	push igmsubtitle
	cmp0
	je l1968
	call subtitle,reset
l1968:
	end method
	end class

	new classgamepause,clpause
	new classgamemusic,clmusic
	push "sounds/bgr/"
	call clmusic,sndbgrpath
	push "sounds/music/"
	call clmusic,musicpath
	push "sounds/music.db"
	call clmusic,load
	new snd,sndakskermovon
	push "sounds/sfx/butmovon.wav"
	call sndakskermovon,load
	push 50
	call sndakskermovon,setvol
	class classasker2
	parent classasker
	method init
	clparent classasker,init
	new snd,sndaskexit
	push 0
	push 1
	call sndaskexit,setstartstopflag
	new snd,sndaskexitgame
	push 0
	push 1
	call sndaskexitgame,setstartstopflag
	new snd,sndyes
	push 0
	push 1
	call sndyes,setstartstopflag
	new snd,sndno
	push 0
	push 1
	call sndno,setstartstopflag
	new snd,sndaskrestart
	push 0
	push 1
	call sndaskrestart,setstartstopflag
	new snd,sndaskrestart2
	push 0
	push 1
	call sndaskrestart2,setstartstopflag
	cthis reload
	push "scripts/common/asker.pyz"
	push 12000
	cthis load
	push "sndakskermovon"
	cthis fxonmovon
	end method
	method reload
	push SNDPATH
	cthis setwavpath
	localdef $1
	cthis getsndpath
	pop $1
	push $1
	push "nar07.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexit,load
	push $1
	push "nar12.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexitgame,load
	push $1
	push "nar08.wav"
	pop $b
	popax
	add $a,$b
	call sndyes,load
	push $1
	push "nar09.wav"
	pop $b
	popax
	add $a,$b
	call sndno,load
	push $1
	push "nar11.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart,load
	push $1
	push "nar14.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart2,load
	end method
	method askexittomenu
	push "sndaskexit"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askexitgame
	push "sndaskexitgame"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askrestart
	push "sndaskrestart"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method askrestart2
	push "sndaskrestart2"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method mnotomenu
	end method
	method myestomenu
	call gameapi,getgamename
	spushs
	push "Puzzle"
	cmpst
	jne l1970
	spop $a
	push "MenuPuzzle"
	jmp l1969
l1970:
	push "MenuPuzzle"
	cmpst
	jne l1971
	spop $a
	push "OutroPuz"
	jmp l1969
l1971:
	spop $a
	push "MenuPuzzle"
l1969:
	call gameapi,play
	end method
	method mnorestart
	call gameapi,getgamename
	spushs
	push "Puzzle"
	cmpst
	jne l1973
	spop $a
	push "MenuPuzzle"
	jmp l1972
l1973:
	spop $a
	push "MenuPuzzle"
l1972:
	call gameapi,play
	end method
	method myesrestart
	cthis crestart
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call ccs,isplaying
	neg
	cmp0
	je l1975
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent classasker,ask
l1975:
	end method
	end class

	new classasker2,claskexit
	method LANG=
	localdef $1
	pop $1
	push $1
	pop LANG
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l1977
	push ""
	pop LANG
l1977:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l1979
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l1979:
	call claskexit,reload
	end method
	module clbuts
	method init
	end method
	method load
	new classbutton,buts
	push "scripts/common/buttons.pyz"
	push 4000
	push "imglobcurs"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call engine,actclassname
	push "butmovoff"
	call buts,transmovofffunc
	call buts,disableall
	new db,dbb
	push "scripts/common/buts.db"
	call dbb,load
	new snd,sndfxglobon
	push "sounds/sfx/globbutmovon.wav"
	call sndfxglobon,load
	push 50
	call sndfxglobon,setvol
	new def,bvisible
	push 1
	pop bvisible
	end method
	method reset
	call buts,disableall
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push $1
	call dbb,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1981
	localint $3
	push $2
	call dbb,getcolsno
	pop $3
	localint $4
	push 1
	pop $4
l1982:
	push $4
	push $3
	cmpjl
	cmp0
	je l1983
	jmp l1985
l1984:
	add $4,1
	pop $4
	jmp l1982
l1985:
	push $2
	push $4
	call dbb,get
	call buts,enable
	jmp l1984
l1983:
l1981:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	method enable
	localstring $1
	pop $1
	push $1
	call buts,enable
	end method
	method butmovon
	localstring $1
	pop $1
	call sndfxglobon,play
	call mouse,isvisible
	pop bvisible
	call mouse,show
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovoff
	localstring $1
	pop $1
	push bvisible
	neg
	cmp0
	je l1987
	call mouse,hide
l1987:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "pause"
	cmpje
	cmp0
	je l1989
	call clpause,pause
	jmp l1988
l1989:
	push $1
	push "exit"
	cmpje
	cmp0
	je l1991
	call gameapi,getgamename
	spushs
	push "MenuGry"
	cmpst
	je l1994
	push "MenuTest"
	cmpst
	je l1994
	push "MenuBaj"
	cmpst
	je l1994
	jmp l1993
l1994:
	spop $a
	push "MainMenu"
	call gameapi,play
	jmp l1992
l1993:
	push "SubMenu"
	cmpst
	jne l1995
	spop $a
	push "MenuGry"
	call gameapi,play
	jmp l1992
l1995:
	spop $a
	call claskexit,askexittomenu
l1992:
	jmp l1990
l1991:
	push $1
	push "restart"
	cmpje
	cmp0
	je l1997
	call claskexit,askrestart
l1997:
l1990:
l1988:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end module

	class classplacepointer2
	parent classplacepointer
	method init
	clparent classplacepointer,init
	push "scripts/common/strzalka.pyz"
	cthis load
	end method
	end class

	push 0
	pop igmstate
	push 0
	push 0
	push 0
	push 0
	push 1
	pop igmbegin
	pop igmdemo
	pop igmeasy
	pop igmwinlocal
	pop igmdebug
	method buildsavedir
	push igmwinlocal
	cmp0
	je l1999
	localstring $1
	push "appdata"
	call engine,getspecialpath
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l2001
	localstring $2
	push $1
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	call engine,mkdir
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l2004
	push $2
	push 1
	cmpje
	jmp l2005
l2003:
	push 0
	jmp l2005
l2004:
	push 1
l2005:
	cmp0
	je l2006
	push $1
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/saves"
	pop $b
	popax
	add $a,$b
	call engine,mkdir
	popax
l2006:
l2001:
l1999:
	end method
	cthis buildsavedir
	call bsms,setstd
	call clbuts,load
	cthis checktouchpad
	cmp0
	je l2008
	push "scripts/common/kursorypad.pyz"
	call advmouse,load
	jmp l2007
l2008:
	push sgmversion
	spushs
	push "grecjamac"
	cmpst
	jne l2010
	spop $a
	push "scripts/common/kursorgrecja.pyz"
	jmp l2009
l2010:
	spop $a
	push "scripts/common/cursors.pyz"
l2009:
	call advmouse,load
l2007:
	push "MainLoader"
	call gameapi,play
	game MainLoader
	parent StdGame
	method init
	push "mainloader"
	clparent StdGame,init
	push "IntroPuz"
	call gameapi,play
	end method
	end game

	new int,iMenuPuzid
	push 1
	pop iMenuPuzid
	new string,sMenuMode
	push "null"
	pop sMenuMode
	new int,iPuzRow
	new int,iPuzCol
	new string,sPuzzle
	new int,bPlayMusic
	push 1
	pop bPlayMusic
	game MenuPuzzle
	parent StdGame
	method init
	push "menupuz"
	clparent StdGame,init
	cthis getgraphpath
	push "puz.db"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l2012
	push "dbpuz"
	push "puz.db"
	cthis newdb
	new int,ilepuzid
	call dbpuz,getrowsno
	pop ilepuzid
	jmp l2011
l2012:
	push "dbilepuz"
	push "ilepuz.db"
	cthis newdb
	new int,iilepuzzli
	push 0
	push 0
	call dbilepuz,get
	pop iilepuzzli
	new int,ilepuzid
	push iilepuzzli
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop ilepuzid
l2011:
	push A
	push "bgmenu.jpg"
	push "butprev.pyz 20"
	push "butnext.pyz 20"
	cthis imgs=
	push igmmac
	cmp0
	jne l2015
	push igmwindows
	jmp l2016
l2014:
	push 0
	jmp l2016
l2015:
	push 1
l2016:
	cmp0
	je l2017
	cthis cbutexit
l2017:
	call anbutprev,MenuPuzzle0
	call anbutnext,MenuPuzzle2
	push igmiphone
	cmp0
	je l2025
	localdef $1
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call anbutprev,getpx
	call anbutnext,getex
	call anbutprev,getpx
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	call anbutprev,move
	push $1
	push 0
	call anbutnext,move
l2025:
	cthis cbutmusic
	cthis mstart
	new img,imovon
	call anmenu1,getw
	call anmenu1,geth
	push 255
	push 192
	push 192
	push 64
	call imovon,create
	call imovon,hide
	call but1,onmousemove
	cthis cutscene
	push "mgo"
	call ccs,enter
	push bPlayMusic
	cmp0
	je l2027
	cthis play_music
l2027:
	end method
	method MenuPuzzle0
	cthis Button_std
	push "butclick"
	push "MenuPuzzle1"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle1
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2019
	ret
l2019:
	push iMenuPuzid
	push ilepuzid
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop iMenuPuzid
	push GAME
	spushs
	spop $a
	call [$a],mrestart
	end method
	method MenuPuzzle2
	cthis Button_std
	push "butclick"
	push "MenuPuzzle3"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle3
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2021
	ret
l2021:
	push iMenuPuzid
	push 1
	pop $b
	popax
	sub $a,$b
	pop iMenuPuzid
	push iMenuPuzid
	push 1
	cmpjl
	cmp0
	je l2023
	push ilepuzid
	pop iMenuPuzid
l2023:
	push GAME
	spushs
	spop $a
	call [$a],mrestart
	end method
	method mgo
	push 1
	pop igmstate
	end method
	method play_music
	push sgmversion
	push "_puzzle.ogg -v 50 -l"
	pop $b
	popax
	add $a,$b
	call mus,playstr
	end method
	method stop_music
	push 1000
	call mus,fadeout
	end method
	method mrestart
	cthis mdel
	cthis mstart
	end method
	method mdel
	localint $1
	push 1
	pop $1
l2028:
	push $1
	push 4
	cmpjle
	cmp0
	je l2029
	jmp l2031
l2030:
	add $1,1
	pop $1
	jmp l2028
l2031:
	localdef $2
	push "anmenu"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push "ft"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],unlink
	push "ft"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	push $2
	call but1,removebut
	push $2
	spushs
	spop $d
	delete [$d]
	push "im"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	jmp l2030
l2029:
	end method
	method mstart
	push GAME
	spushs
	push "dbpuz"
	spop $a
	call [$a],hasvar
	cmp0
	je l2033
	localdef $1
	push iMenuPuzid
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	call dbpuz,get
	push $1
	push 1
	call dbpuz,get
	push $1
	push 2
	call dbpuz,get
	push $1
	push 3
	call dbpuz,get
	cthis mload
	jmp l2032
l2033:
	push iilepuzzli
	push 4
	cmpjle
	cmp0
	je l2035
	call anbutnext,hide
	call anbutprev,hide
	localint $2
	push 1
	pop $2
l2036:
	push $2
	push iilepuzzli
	cmpjle
	cmp0
	je l2037
	jmp l2039
l2038:
	add $2,1
	pop $2
	jmp l2036
l2039:
	push $2
	push "puz"
	push $2
	pop $b
	popax
	add $a,$b
	cthis mloadb
	jmp l2038
l2037:
	jmp l2034
l2035:
	localdef $3
	push iMenuPuzid
	push 2
	pop $b
	popax
	mul $a,$b
	pop $3
	localdef $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localdef $5
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	pop $5
	localdef $6
	push $3
	push 2
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push ilepuzid
	push 2
	pop $b
	popax
	mul $a,$b
	cmpja
	cmp0
	je l2041
	push 1
	pop $5
	push 2
	pop $6
l2041:
	push "puz"
	push $6
	pop $b
	popax
	add $a,$b
	push "puz"
	push $5
	pop $b
	popax
	add $a,$b
	push "puz"
	push $3
	pop $b
	popax
	add $a,$b
	push "puz"
	push $4
	pop $b
	popax
	add $a,$b
	cthis mload
l2034:
l2032:
	end method
	method mload
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	cthis cwideversion
	cmp0
	je l2043
	push 1
	push $1
	cthis mloadb
	push 2
	push $2
	cthis mloadb
	push 3
	push $3
	cthis mloadb
	push 4
	push $4
	cthis mloadb
	jmp l2042
l2043:
	push 1
	push $1
	cthis mloadb
	push 2
	push $2
	cthis mloadb
	push 3
	push $3
	cthis mloadb
	push 4
	push $4
	cthis mloadb
l2042:
	end method
	method mloadb
	localint $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push "anmenu"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new img,[$e]
	push $3
	spushs
	push "scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/obrazki/p_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $3
	spushs
	push 10
	spop $a
	call [$a],setz
	localdef $4
	push "ft"
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	spop $e
	new filter,[$e]
	push $4
	spushs
	push $3
	spop $a
	call [$a],link
	push $4
	spushs
	push 1
	spop $a
	call [$a],setsmooth
	push $4
	spushs
	push 1
	spop $a
	call [$a],setpivottype
	push igmiphone
	cmp0
	je l2045
	push $4
	spushs
	push 0.5
	spop $a
	call [$a],setzoom
	jmp l2044
l2045:
	push $4
	spushs
	push 0.4
	spop $a
	call [$a],setzoom
l2044:
	localdef $5
	push "im"
	push $3
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new img,[$e]
	push $5
	spushs
	push $3
	spushs
	spop $a
	call [$a],getw
	push $3
	spushs
	spop $a
	call [$a],geth
	cthis black
	push 128
	spop $a
	call [$a],create
	localdef $6
	push 3
	pop $6
	push $5
	spushs
	push $3
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	cthis cwideversion
	cmp0
	je l2047
	localreal $7
	push 1.2
	pop $7
	localreal $8
	push 1.2
	pop $8
	localint $9
	push 100
	pop $9
	localint $10
	push 100
	pop $10
	push sgmversion
	push "basniemac"
	cmpje
	cmp0
	je l2049
	push 1.2
	pop $7
	push 150
	pop $9
	push 120
	pop $10
	jmp l2048
l2049:
	push A
	push "grecjamac"
	call sgmversion,in
	cmp0
	je l2051
	push 1.25
	pop $7
	push 150
	pop $9
	push 100
	pop $10
	jmp l2050
l2051:
	push A
	push "pokazchest1"
	push "pokazchest2"
	push "pokazvehicles1"
	push "pokazfarm"
	call sgmversion,in
	cmp0
	je l2053
	push 1.25
	pop $7
	push 150
	pop $9
	push 200
	pop $10
l2053:
l2050:
l2048:
	localint $11
	push $9
	push $7
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $11
	localint $12
	push $10
	push $8
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $12
	push $1
	spushs
	push 1
	cmpst
	jne l2055
	spop $a
	push $3
	spushs
	push $9
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2054
l2055:
	push 2
	cmpst
	jne l2056
	spop $a
	push $3
	spushs
	push $11
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2054
l2056:
	push 3
	cmpst
	jne l2057
	spop $a
	push $3
	spushs
	push $9
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2054
l2057:
	push 4
	cmpst
	jne l2058
	spop $a
	push $3
	spushs
	push $11
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2054
l2058:
	spop $a
l2054:
	jmp l2046
l2047:
	push igmiphone
	cmp0
	je l2060
	localint $9
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $9
	localint $10
	push 140
	pop $10
	localint $11
	push 3
	push iResX
	pop $b
	popax
	mul $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $11
	localint $12
	push $10
	push 1.3
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $12
	push $1
	spushs
	push 1
	cmpst
	jne l2062
	spop $a
	push $3
	spushs
	push $9
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2061
l2062:
	push 3
	cmpst
	jne l2063
	spop $a
	push $3
	spushs
	push $11
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2061
l2063:
	push 2
	cmpst
	jne l2064
	spop $a
	push $3
	spushs
	push $9
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2061
l2064:
	push 4
	cmpst
	jne l2065
	spop $a
	push $3
	spushs
	push $11
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2061
l2065:
	spop $a
l2061:
	jmp l2059
l2060:
	localint $9
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $9
	localint $10
	push 140
	pop $10
	localint $11
	push 3
	push iResX
	pop $b
	popax
	mul $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $11
	localint $12
	push $10
	push 1.3
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $12
	push $1
	spushs
	push 1
	cmpst
	jne l2067
	spop $a
	push $3
	spushs
	push $9
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2066
l2067:
	push 3
	cmpst
	jne l2068
	spop $a
	push $3
	spushs
	push $11
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2066
l2068:
	push 2
	cmpst
	jne l2069
	spop $a
	push $3
	spushs
	push $9
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2066
l2069:
	push 4
	cmpst
	jne l2070
	spop $a
	push $3
	spushs
	push $11
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2066
l2070:
	spop $a
l2066:
l2059:
l2046:
	push $3
	spushs
	push $2
	spop $a
	call [$a],MenuPuzzle4
	end method
	method MenuPuzzle4
	localstring $1
	pop $1
	push "smenu"
	push $1
	cthis var2
	cthis Button_isin
	push "butmoveon"
	push "MenuPuzzle5"
	cthis addmethod
	push "butmoveoff"
	push "MenuPuzzle6"
	cthis addmethod
	push "butclick"
	push "MenuPuzzle7"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle5
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2072
	ret
l2072:
	call advmouse,setact
	cthis getpx
	cthis getpy
	call imovon,setpos
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call imovon,setz
	call imovon,show
	end method
	method MenuPuzzle6
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2074
	ret
l2074:
	call advmouse,setstd
	call imovon,hide
	end method
	method MenuPuzzle7
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2076
	ret
l2076:
	push smenu
	pop sPuzzle
	push 2
	pop igmstate
	push 1000
	call mus,fadeout
	push "MenuPuzzle8"
	call ccs,close
	end method
	method MenuPuzzle8
	push "WyborPuz"
	call gameapi,play
	end method
	method anbutexit_lclick
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2078
	ret
l2078:
	push 2
	pop igmstate
	push "MenuPuzzle9"
	call ccs,close
	end method
	method MenuPuzzle9
	push A
	push "pokazfarm"
	push "pokazchest1"
	push "pokazchest2"
	push "pokazvehicles1"
	push "pokazvehicles2"
	call sgmversion,in
	cmp0
	je l2080
	push "OutroA"
	call gameapi,play
	jmp l2079
l2080:
	push "OutroPuz"
	call gameapi,play
l2079:
	end method
	method mouse_lclick
	end method
	end game

	game WyborPuz
	parent StdGame
	method init
	push "wyborpuz"
	clparent StdGame,init
	push "bgwybor.jpg"
	cthis img=
	push "buts.pyz"
	new Buttons,cbut
	push sgmversion
	push "d"
	cmpje
	cmp0
	je l2082
	call cbut,WyborPuz0
l2082:
	cthis cbutexit
	cthis cutscene
	push "timgo"
	push 500
	push "WyborPuz2"
	cthis timer=
	push "timgo2"
	push 500
	push "WyborPuz4"
	cthis timer=
	push "null"
	call ccs,enter
	end method
	method WyborPuz0
	push "WyborPuz1"
	call grbuts,eval
	end method
	method WyborPuz1
	cthis actionname
	push "wytlok"
	cmpje
	cmp0
	je l2084
	push "scripts/d/wytlok/"
	push "puz"
	call sPuzzle,strsubbs
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	neg
	jmp l2086
l2084:
	push 0
	jmp l2086
l2085:
	push 1
l2086:
	cmp0
	je l2087
	cthis hide
l2087:
	end method
	method WyborPuz2
	push "WyborPuz3"
	call ccs,close
	end method
	method WyborPuz3
	push "PuzzleB"
	call gameapi,play
	end method
	method WyborPuz4
	push "WyborPuz5"
	call ccs,close
	end method
	method WyborPuz5
	push "Wytlok"
	call gameapi,play
	end method
	method cbut_lclick
	push igmstate
	push 0
	cmpjne
	cmp0
	je l2089
	ret
l2089:
	push sobject
	spushs
	push "music"
	cmpst
	jne l2091
	spop $a
	jmp l2090
l2091:
	push "12"
	cmpst
	jne l2092
	spop $a
	push 3
	pop iPuzRow
	push 4
	pop iPuzCol
	cthis mplay
	jmp l2090
l2092:
	push "20"
	cmpst
	jne l2093
	spop $a
	push 4
	pop iPuzRow
	push 5
	pop iPuzCol
	cthis mplay
	jmp l2090
l2093:
	push "30"
	cmpst
	jne l2094
	spop $a
	push 5
	pop iPuzRow
	push 6
	pop iPuzCol
	cthis mplay
	jmp l2090
l2094:
	push "48"
	cmpst
	jne l2095
	spop $a
	push 6
	pop iPuzRow
	push 8
	pop iPuzCol
	cthis mplay
	jmp l2090
l2095:
	push "wytlok"
	cmpst
	jne l2096
	spop $a
	push 1
	pop igmstate
	call timgo2,play
	jmp l2090
l2096:
	spop $a
l2090:
	end method
	method mplay
	push 1
	pop igmstate
	call timgo,play
	end method
	method anbutexit_lclick
	push "null"
	pop sMenuMode
	push "MenuPuzzle"
	call gameapi,play
	end method
	end game

	game IntroPuz
	parent StdGame
	method init
	push "intropuz"
	clparent StdGame,init
	push "intro.jpg"
	cthis img=
	push "timend"
	push 3000
	push "mgo"
	cthis timer=
	call timend,play
	cthis cutscene
	push "null"
	call ccs,enter
	end method
	method mgo
	push igmstate
	push 0
	cmpje
	cmp0
	je l2098
	push 1
	pop igmstate
	push "IntroPuz0"
	call ccs,close
l2098:
	end method
	method IntroPuz0
	push "MenuPuzzle"
	call gameapi,play
	end method
	method mouse_lclick
	cthis mgo
	end method
	end game

	game OutroPuz
	parent StdGame
	method init
	push "outropuz"
	clparent StdGame,init
	push sgmversion
	push "/intropuz"
	pop $b
	popax
	add $a,$b
	cthis path=
	push "outro.jpg"
	cthis img=
	push "timend"
	push 4000
	push "mgo"
	cthis timer=
	cthis cutscene
	push "OutroPuz0"
	call ccs,enter
	end method
	method OutroPuz0
	call timend,play
	end method
	method mgo
	push igmstate
	push 0
	cmpje
	cmp0
	je l2100
	push 1
	pop igmstate
	push "OutroPuz1"
	call ccs,close
l2100:
	end method
	method OutroPuz1
	call gameapi,exit
	end method
	method mouse_lclick
	cthis mgo
	end method
	end game

	class gmimgvecpuz
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis imsetpos
	end method
	method imsetpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "imsetpos"
	push $1
	push $2
	cthis eval2
	end method
	method ilodx
	push 0
	end method
	method ilody
	push 0
	end method
	end class

	class TPuzzle2
	method init
	end method
	method tinit
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new int,iCols
	push $4
	pop iCols
	new int,iRows
	push $3
	pop iRows
	push "imgbkg"
	push $1
	push 0
	cthis newimg
	push ".pyz"
	call $2,contains
	cmp0
	je l2102
	new gmimgvec,grel
	push "grel"
	push $2
	popax
	pop $b
	psax
	call [$b],operator<
	jmp l2101
l2102:
	push $2
	push "grel"
	cmpjne
	cmp0
	je l2104
	push $2
	spushs
	push "grel"
	spop $a
	call [$a],addtogamevars
l2104:
l2101:
	new gmimgvec,grend
	call grel,hash
	push "TPuzzle20"
	call grel,each
	new string,spuztyp
	call grel,first
	spushs
	spop $a
	call [$a],gettype
	pop spuztyp
	new int,ibadajl
	push 25
	pop ibadajl
	new string,sactpuz
	new int,iblitopacity
	push 255
	pop iblitopacity
	new int,PuzzleState
	push 0
	pop PuzzleState
	new DelayMover,cmov
	push 200
	new SimpleCounter,cnt
	new int,iX
	push $5
	pop iX
	new int,iY
	push $6
	pop iY
	push iX
	push iY
	call grel,move
	end method
	method TPuzzle20
	localdef $1
	pop $1
	push 10
	push $1
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method setpuzstate
	localint $1
	pop $1
	push $1
	pop PuzzleState
	push PuzzleState
	push 1
	cmpje
	cmp0
	je l2106
	new gmimgvec,grblit
	localdef $2
	pop $2
	push "grblit"
	push $2
	popax
	pop $b
	psax
	call [$b],operator<
	call grblit,hide
l2106:
	end method
	method cmov_GET
	call mouse,getpos
	push 1
	push 1
	call grel,isincut
	cmp0
	je l2108
	localstring $1
	call grel,getsfound
	pop $1
	push $1
	spushs
	push 900
	spop $a
	call [$a],setz
	push $1
	cthis mssetobj
	cthis tpuzzle_get
l2108:
	end method
	method cwithin
	localstring $1
	pop $1
	localint $2
	cthis gettype
	push spuztyp
	cmpjne
	cmp0
	je l2110
	push 0
	pop $2
l2111:
	push $2
	cthis size
	cmpjl
	cmp0
	je l2112
	jmp l2114
l2113:
	add $2,1
	pop $2
	jmp l2111
l2114:
	push $2
	cthis get
	spushs
	push $1
	spop $a
	call [$a],cwithin
	cmp0
	je l2116
	push 1
	ret
l2116:
	jmp l2113
l2112:
	push 0
	ret
	jmp l2109
l2110:
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l2118
	localint $3
	cthis framenr
	pop $3
	localint $4
	push $3
	push iCols
	pop $b
	popax
	div $a,$b
	push $d
	pop $4
	push A
	push $4
	push 0
	cmpja
	cmp0
	je l2120
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
l2120:
	push $4
	push iCols
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2122
	push $3
	push 1
	pop $b
	popax
	add $a,$b
l2122:
	push $3
	push iCols
	pop $b
	popax
	div $a,$b
	psax
	pop $4
	push $4
	push 0
	cmpja
	cmp0
	je l2124
	push $3
	push iCols
	pop $b
	popax
	sub $a,$b
l2124:
	push $4
	push iRows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2126
	push $3
	push iCols
	pop $b
	popax
	add $a,$b
l2126:
	push $1
	spushs
	spop $a
	call [$a],framenr
	spushs
	spop $h
	call $h,in
	ret
	jmp l2117
l2118:
	push 0
	pop $2
l2127:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l2128
	jmp l2130
l2129:
	add $2,1
	pop $2
	jmp l2127
l2130:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis cwithin
	cmp0
	je l2132
	push 1
	ret
l2132:
	jmp l2129
l2128:
	push 0
	ret
l2117:
l2109:
	end method
	method cposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $1
	spushs
	spop $a
	call [$a],ilodx
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getposx
	push $2
	spushs
	spop $a
	call [$a],ilodx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	sub $a,$b
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $1
	spushs
	spop $a
	call [$a],ilody
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getposy
	push $2
	spushs
	spop $a
	call [$a],ilody
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	call $3,length
	end method
	method cblit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l2134
	push PuzzleState
	push 1
	cmpje
	cmp0
	je l2136
	push $1
	spushs
	push iX
	push iY
	spop $a
	call [$a],imsetpos
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	spushs
	spop $a
	call [$a],framenr
	call grblit,get
	pop $1
l2136:
	push $1
	spushs
	spop $a
	call [$a],TPuzzle21
	jmp l2133
l2134:
	localint $2
	push 0
	pop $2
l2137:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l2138
	jmp l2140
l2139:
	add $2,1
	pop $2
	jmp l2137
l2140:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis cblit
	jmp l2139
l2138:
l2133:
	end method
	method TPuzzle21
	push 1
	cthis setz
	cthis show
	push iX
	push iY
	cthis imsetpos
	cthis getname
	call imgbkg,blit
	cthis hide
	end method
	method cmov_PUT
	push GAME
	spushs
	spop $a
	call [$a],cput
	end method
	method cput
	cthis tpuzzle_put
	localstring $1
	call cmov,getmover
	pop $1
	push $1
	spushs
	push 100
	call cnt,next
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	call cmov,free
	call grel,TPuzzle22
	localstring $2
	push $1
	pop $2
	localstring $3
	push $1
	pop sactpuz
l2141:
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpjne
	cmp0
	je l2142
	push $1
	spushs
	push 0
	spop $a
	call [$a],get
	pop $1
	jmp l2141
l2142:
	push $1
	spushs
	spop $a
	call [$a],ilodx
	push iX
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],ilody
	push iY
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	call ibadajl,length
	push ibadajl
	cmpjl
	cmp0
	je l2144
	push "null"
	pop sactpuz
	push $2
	cthis cblit
	push $2
	call grel,remove
	push $2
	call grend,add
	cthis tpuzzle_blit
	call fxpodnies1,play
	call grel,empty
	cmp0
	je l2146
	call grend,show
	cthis tpuzzle_end
l2146:
	jmp l2143
l2144:
	push $2
	call grel,remove
	localint $4
	push 0
	pop $4
l2147:
	push $4
	call grel,size
	cmpjl
	cmp0
	je l2148
	jmp l2150
l2149:
	add $4,1
	pop $4
	jmp l2147
l2150:
	push $4
	call grel,get
	pop $1
	push $1
	push $2
	cthis cposlen
	push ibadajl
	cmpjl
	cmp0
	je l2152
	push $2
	spushs
	push $1
	spop $a
	call [$a],cwithin
	jmp l2154
l2152:
	push 0
	jmp l2154
l2153:
	push 1
l2154:
	cmp0
	je l2155
	localint $5
	localint $6
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l2157
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $1
	spushs
	spop $a
	call [$a],ilodx
	pop $b
	popax
	sub $a,$b
	pop $5
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $1
	spushs
	spop $a
	call [$a],ilody
	pop $b
	popax
	sub $a,$b
	pop $6
	jmp l2156
l2157:
	push $1
	spushs
	spop $a
	call [$a],getpos
	pop $6
	pop $5
l2156:
	push $1
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l2159
	push $1
	cthis mwyjmij
	push $2
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l2161
	push "gr"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new gmimgvecpuz,[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],add
	push $3
	spushs
	push $2
	spop $a
	call [$a],add
	jmp l2160
l2161:
	push $2
	spushs
	push $1
	spop $a
	call [$a],add
	push $2
	pop $3
l2160:
	push $1
	call grel,remove
	push $3
	call grel,add
	jmp l2158
l2159:
	push $2
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l2163
	push $1
	spushs
	push $2
	spop $a
	call [$a],add
	jmp l2162
l2163:
	push $1
	spushs
	push $2
	spop $a
	call [$a],addgr
l2162:
	push $1
	pop $3
l2158:
	push $3
	spushs
	push $5
	push $6
	spop $a
	call [$a],imsetpos
	push $3
	spushs
	push $2
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],setz
	call grel,sortimgs
	push $3
	pop sactpuz
	call fxpodnies1,play
	ret
l2155:
	jmp l2149
l2148:
	push $2
	call grel,add
	call fxputpuz,play
l2143:
	end method
	method TPuzzle22
	cthis sortimgs
	push "TPuzzle23"
	cthis each
	end method
	method TPuzzle23
	localint $1
	pop $1
	push 10
	push $1
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method tpuzzle_end
	end method
	method tpuzzle_get
	end method
	method tpuzzle_blit
	end method
	method tpuzzle_put
	end method
	end class

	method przygotuj_matryce
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new gmimgvec,grmat
	push "grmat"
	push $1
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator<
	new gmimgvec,grmask
	push $2
	push "null"
	cmpjne
	cmp0
	je l2165
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	jmp l2167
l2165:
	push 0
	jmp l2167
l2166:
	push 1
l2167:
	cmp0
	je l2168
	push "grmask"
	push $2
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator<
l2168:
	push $4
	spushs
	spop $e
	new gmimgvec,[$e]
	push "impuz"
	push $3
	push 0
	cthis newimg
	call grmat,first
	spushs
	spop $a
	call [$a],getpx
	call grmat,first
	spushs
	spop $a
	call [$a],getpy
	call impuz,setpos
	new filter,ft2
	localint $6
	push 0
	pop $6
l2169:
	push $6
	call grmat,size
	cmpjl
	cmp0
	je l2170
	jmp l2172
l2171:
	add $6,1
	pop $6
	jmp l2169
l2172:
	localstring $7
	push "im"
	push $4
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	spushs
	spop $e
	new img,[$e]
	push $7
	spushs
	push "framenr"
	push $6
	spop $a
	call [$a],var2
	push $7
	spushs
	push "imsetpos"
	push "global14"
	spop $a
	call [$a],addmethod
	localstring $8
	push $6
	call grmat,get
	pop $8
	push $7
	spushs
	push $8
	spushs
	spop $a
	call [$a],getw
	push $5
	pop $b
	popax
	add $a,$b
	push $8
	spushs
	spop $a
	call [$a],geth
	push $5
	pop $b
	popax
	add $a,$b
	cthis transparent
	spop $a
	call [$a],create
	push $7
	spushs
	push $8
	spushs
	spop $a
	call [$a],getpx
	push $8
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],setpos
	push $7
	spushs
	push A
	push "ilodx"
	push $7
	spushs
	spop $a
	call [$a],getpx
	push "ilody"
	push $7
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],vars2
	push $5
	push 0
	cmpja
	cmp0
	je l2174
	push $8
	spushs
	push $5
	push $5
	spop $a
	call [$a],move
	push $8
	call ft2,link
	push 1
	call ft2,setmaskalpha
	push 92
	call ft2,setopacity
	push $7
	spushs
	push $8
	spop $a
	call [$a],blit
	call ft2,unlink
	push $8
	spushs
	push $5
	popax
	sub 0,$a
	push $5
	popax
	sub 0,$a
	spop $a
	call [$a],move
l2174:
	push $7
	spushs
	push "impuz"
	push $8
	spop $a
	call [$a],blitmask
	push $6
	call grmask,size
	cmpjl
	cmp0
	je l2176
	push $7
	spushs
	push $6
	call grmask,get
	spop $a
	call [$a],blit
l2176:
	push $4
	spushs
	push $7
	spop $a
	call [$a],add
	jmp l2171
l2170:
	delete ft2
	call grmat,deleteallgm
	delete grmat
	push 1
	call impuz,setz
	call impuz,hide
	end method
	method global14
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push ilodx
	pop $b
	popax
	add $a,$b
	push $2
	push ilody
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	game PuzzleB
	parent StdGame
	parent TPuzzle2
	method init
	push "puzzle"
	clparent StdGame,init
	push A
	push "getpuz 60"
	push "putpuz 60"
	push "ok 60"
	push "podnies1"
	cthis sfxs=
	push "matryca_"
	push iPuzRow
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push iPuzCol
	pop $b
	popax
	add $a,$b
	push "maska_"
	push iPuzRow
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push iPuzCol
	pop $b
	popax
	add $a,$b
	push "$scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/obrazki/p_"
	pop $b
	popax
	add $a,$b
	push sPuzzle
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	push "grel"
	push 0
	cthis przygotuj_matryce
	push sgmversion
	push "d"
	cmpje
	cmp0
	je l2178
	push "bgpuzzle.png"
	push "grel"
	push iPuzRow
	push iPuzCol
	push 1
	push 0
	cthis tinit
	jmp l2177
l2178:
	push "bgpuzzle.png"
	push "grel"
	push iPuzRow
	push iPuzCol
	push 0
	push 0
	cthis tinit
l2177:
	push A
	push "left.pyz 200"
	push "right.pyz 200"
	cthis imgs=
	call anleft,Button_std
	call anright,Button_std
	push "anleft"
	call but1,add
	push "anright"
	call but1,add
	new int,strzalkax
	push 5
	pop strzalkax
	new int,rewindspeed
	push 20
	pop rewindspeed
	push "timleft"
	push "PuzzleB0"
	cthis cycle=
	push "timright"
	push "PuzzleB1"
	cthis cycle=
	localdef $1
	push 6
	pop $1
	push $1
	push 54
	push iResX
	push $1
	pop $b
	popax
	sub $a,$b
	call anleft,getcy
	new Rect,rec2
	call rec2,PuzzleB2
	new gmimgvec,grpes
	new int,ipuzheight
	call grel,first
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop ipuzheight
	localint $2
	push 0
	pop $2
l2193:
	push $2
	call grel,size
	cmpjl
	cmp0
	je l2194
	jmp l2196
l2195:
	add $2,1
	pop $2
	jmp l2193
l2196:
	push $2
	call grel,get
	cthis mwstaw
	jmp l2195
l2194:
	cthis cbutexit
	cthis cwideversion
	cmp0
	je l2198
	push sgmversion
	push "grecjamac"
	cmpjne
	jmp l2200
l2198:
	push 0
	jmp l2200
l2199:
	push 1
l2200:
	cmp0
	je l2201
	push 15
	popax
	sub 0,$a
	push 15
	popax
	sub 0,$a
	call anbutexit,move
l2201:
	cthis cbutmusic
	push bPlayMusic
	cmp0
	je l2203
	cthis play_music
l2203:
	cthis cutscene
	push "PuzzleB3"
	call ccs,enter
	end method
	method PuzzleB0
	push igmstate
	push 1
	cmpje
	cmp0
	je l2180
	call grpes,size
	jmp l2182
l2180:
	push 0
	jmp l2182
l2181:
	push 1
l2182:
	cmp0
	je l2183
	push rewindspeed
	push 0
	call grpes,move
	localdef $1
	call grpes,first
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l2185
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push 0
	call grpes,move
l2185:
	cthis play
l2183:
	end method
	method PuzzleB1
	push igmstate
	push 1
	cmpje
	cmp0
	je l2187
	call grpes,size
	jmp l2189
l2187:
	push 0
	jmp l2189
l2188:
	push 1
l2189:
	cmp0
	je l2190
	push rewindspeed
	popax
	sub 0,$a
	push 0
	call grpes,move
	localdef $1
	call grpes,last
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2192
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	push 0
	call grpes,move
l2192:
	cthis play
l2190:
	end method
	method PuzzleB2
	push "gmimgvecpuz"
	call vecgr,add
	end method
	method PuzzleB3
	cthis unlockall
	push 1
	pop igmstate
	end method
	method play_music
	push sgmversion
	push "_puzzle.ogg -v 50 -l"
	pop $b
	popax
	add $a,$b
	call mus,playstr
	end method
	method stop_music
	push 1000
	call mus,fadeout
	end method
	method mwstaw
	localstring $1
	pop $1
	localint $2
	push 5
	pop $2
	localint $3
	call grpes,size
	cmp0
	je l2205
	call grpes,last
	spushs
	spop $a
	call [$a],getex
	pop $3
	jmp l2204
l2205:
	call anleft,getex
	pop $3
l2204:
	localdef $4
	call anleft,getcy
	push $1
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	add $a,$b
	push iResY
	push $2
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l2207
	push iResY
	push $2
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	pop $4
l2207:
	push $1
	spushs
	push $3
	push strzalkax
	pop $b
	popax
	add $a,$b
	push $4
	spop $a
	call [$a],ansetbpos
	push $1
	spushs
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	push 0
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push iResY
	spop $a
	call [$a],clip
	push $1
	call grpes,add
	end method
	method mwyjmij
	localstring $1
	pop $1
	localint $2
	push $1
	call grpes,find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l2209
	ret
l2209:
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push $1
	call grpes,remove
	localint $3
	push $2
	pop $3
l2210:
	push $3
	call grpes,size
	cmpjl
	cmp0
	je l2211
	jmp l2213
l2212:
	add $3,1
	pop $3
	jmp l2210
l2213:
	push $3
	call grpes,get
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	popax
	sub 0,$a
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l2212
l2211:
	end method
	method clbuts_help_butmoveon
	end method
	method clbuts_help_butmoveoff
	end method
	method tpuzzle_get
	call fxgetpuz,play
	call grel,getsfound
	cthis mwyjmij
	end method
	method tpuzzle_put
	end method
	method tpuzzle_end
	call fxok,play
	call grend,hide
	push 2
	pop igmstate
	push sPuzzle
	pop sMenuMode
	call impuz,show
	push sgmversion
	push "basniemac"
	cmpje
	cmp0
	je l2215
	push "zwyciestwo2.ogg"
	call mus,playstr
	jmp l2214
l2215:
	push "zwyciestwo.ogg -v 30"
	call mus,playstr
l2214:
	end method
	method cmov_PUT
	push GAME
	spushs
	spop $a
	call [$a],cput
	push sactpuz
	push "null"
	cmpjne
	cmp0
	je l2217
	push sactpuz
	spushs
	spop $a
	call [$a],gettype
	push spuztyp
	cmpje
	cmp0
	je l2219
	push sactpuz
	spushs
	spop $a
	call [$a],getcy
	call anleft,getpy
	cmpja
	jmp l2221
l2219:
	push 0
	jmp l2221
l2220:
	push 1
l2221:
	cmp0
	je l2222
	push sactpuz
	cthis mwstaw
	jmp l2218
l2222:
	push sactpuz
	call rec2,fit
l2218:
l2217:
	end method
	method mouse_lclick
	push igmstate
	push 2
	cmpje
	cmp0
	je l2224
	push 3
	pop igmstate
	jmp l2223
l2224:
	push igmstate
	push 3
	cmpje
	cmp0
	je l2226
	cthis mtomenu
l2226:
l2223:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push igmstate
	push 1
	cmpje
	cmp0
	je l2228
	push $1
	push $2
	push 1
	push 1
	call anleft,isin
	cmp0
	je l2230
	call timleft,play
	jmp l2229
l2230:
	push $1
	push $2
	push 1
	push 1
	call anright,isin
	cmp0
	je l2232
	call timright,play
l2232:
l2229:
l2228:
	end method
	method mouse_lrel
	push igmstate
	push 1
	cmpje
	cmp0
	je l2234
	call timleft,isplaying
	cmp0
	je l2236
	push 0
	call timleft,stop
l2236:
	call timright,isplaying
	cmp0
	je l2238
	push 0
	call timright,stop
l2238:
l2234:
	end method
	method mtomenu
	push igmstate
	push 4
	cmpje
	cmp0
	je l2240
	ret
l2240:
	push 4
	pop igmstate
	push "PuzzleB4"
	call ccs,close
	end method
	method PuzzleB4
	push "MenuPuzzle"
	call gameapi,play
	end method
	method mouse_rclick
	push igmdebug
	cmp0
	je l2242
	call grpes,print
l2242:
	end method
	method anbutexit_lclick
	push "exit"
	pop sMenuMode
	cthis mtomenu
	end method
	end game

	new string,sWytlok
	push "null"
	pop sWytlok
	game Wytlok
	parent StdGame
	method init
	push "puzzle"
	clparent StdGame,init
	push A
	push "getpuz 60"
	push "putpuz 60"
	push "ok 60"
	cthis sfxs=
	push "imgbkg"
	push "bgpuzzle.png"
	push 0
	cthis newimg
	new gmimgvec,grel
	push "grel"
	push "$scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/wytlok/"
	pop $b
	popax
	add $a,$b
	push "puz"
	call sPuzzle,strsubbs
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator<
	call grel,hash
	push "Wytlok0"
	call grel,each
	new int,iX
	push 2
	pop iX
	new int,iY
	push 1
	popax
	sub 0,$a
	pop iY
	push A
	push "left.pyz 200"
	push "right.pyz 200"
	cthis imgs=
	call anleft,Button_std
	call anright,Button_std
	push "anleft"
	call but1,add
	push "anright"
	call but1,add
	new int,strzalkax
	push 5
	pop strzalkax
	new DelayMover,cmov
	call cmov,unlock
	new int,rewindspeed
	push 20
	pop rewindspeed
	push "timleft"
	push "Wytlok1"
	cthis cycle=
	push "timright"
	push "Wytlok2"
	cthis cycle=
	localdef $1
	push 6
	pop $1
	push $1
	push 54
	push iResX
	push $1
	pop $b
	popax
	sub $a,$b
	call anleft,getcy
	new Rect,rec2
	call rec2,Wytlok3
	new gmimgvec,grpes
	new int,ipuzheight
	call grel,first
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop ipuzheight
	localint $2
	push 0
	pop $2
l2257:
	push $2
	call grel,size
	cmpjl
	cmp0
	je l2258
	jmp l2260
l2259:
	add $2,1
	pop $2
	jmp l2257
l2260:
	push $2
	call grel,get
	cthis mwstaw
	jmp l2259
l2258:
	cthis cbutexit
	cthis cwideversion
	cmp0
	je l2262
	push sgmversion
	push "grecjamac"
	cmpjne
	jmp l2264
l2262:
	push 0
	jmp l2264
l2263:
	push 1
l2264:
	cmp0
	je l2265
	push 15
	popax
	sub 0,$a
	push 15
	popax
	sub 0,$a
	call anbutexit,move
l2265:
	cthis cbutmusic
	push bPlayMusic
	cmp0
	je l2267
	cthis play_music
l2267:
	cthis cutscene
	push "Wytlok4"
	call ccs,enter
	end method
	method Wytlok0
	localdef $1
	pop $1
	push 10
	push $1
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method Wytlok1
	push igmstate
	push 1
	cmpje
	cmp0
	je l2244
	call grpes,size
	jmp l2246
l2244:
	push 0
	jmp l2246
l2245:
	push 1
l2246:
	cmp0
	je l2247
	push rewindspeed
	push 0
	call grpes,move
	localdef $1
	call grpes,first
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l2249
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push 0
	call grpes,move
l2249:
	cthis play
l2247:
	end method
	method Wytlok2
	push igmstate
	push 1
	cmpje
	cmp0
	je l2251
	call grpes,size
	jmp l2253
l2251:
	push 0
	jmp l2253
l2252:
	push 1
l2253:
	cmp0
	je l2254
	push rewindspeed
	popax
	sub 0,$a
	push 0
	call grpes,move
	localdef $1
	call grpes,last
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2256
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	push 0
	call grpes,move
l2256:
	cthis play
l2254:
	end method
	method Wytlok3
	push "gmimgvecpuz"
	call vecgr,add
	end method
	method Wytlok4
	cthis unlockall
	push 1
	pop igmstate
	end method
	method play_music
	push sgmversion
	push "_puzzle.ogg -v 50 -l"
	pop $b
	popax
	add $a,$b
	call mus,playstr
	end method
	method stop_music
	push 1000
	call mus,fadeout
	end method
	method mwstaw
	localstring $1
	pop $1
	localint $2
	push 5
	pop $2
	localint $3
	call grpes,size
	cmp0
	je l2269
	call grpes,last
	spushs
	spop $a
	call [$a],getex
	pop $3
	jmp l2268
l2269:
	call anleft,getex
	pop $3
l2268:
	localdef $4
	call anleft,getcy
	push $1
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	add $a,$b
	push iResY
	push $2
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l2271
	push iResY
	push $2
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	pop $4
l2271:
	push $1
	spushs
	push $3
	push strzalkax
	pop $b
	popax
	add $a,$b
	push $4
	spop $a
	call [$a],ansetbpos
	push $1
	spushs
	call anleft,getex
	push strzalkax
	pop $b
	popax
	add $a,$b
	push 0
	call anright,getpx
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push iResY
	spop $a
	call [$a],clip
	push $1
	call grpes,add
	end method
	method mwyjmij
	localstring $1
	pop $1
	localint $2
	push $1
	call grpes,find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l2273
	ret
l2273:
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push $1
	call grpes,remove
	localint $3
	push $2
	pop $3
l2274:
	push $3
	call grpes,size
	cmpjl
	cmp0
	je l2275
	jmp l2277
l2276:
	add $3,1
	pop $3
	jmp l2274
l2277:
	push $3
	call grpes,get
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	popax
	sub 0,$a
	push strzalkax
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l2276
l2275:
	end method
	method clbuts_help_butmoveon
	end method
	method clbuts_help_butmoveoff
	end method
	method tpuzzle_end
	call fxok,play
	push 2
	pop igmstate
	push sPuzzle
	pop sMenuMode
	push sgmversion
	push "basniemac"
	cmpje
	cmp0
	je l2279
	push "zwyciestwo2.ogg"
	call mus,playstr
	jmp l2278
l2279:
	push "zwyciestwo.ogg -v 30"
	call mus,playstr
l2278:
	end method
	method cmov_GET
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2281
	ret
l2281:
	call mouse,getpos
	push 1
	push 1
	call grel,isincut
	cmp0
	je l2283
	localstring $1
	call grel,getsfound
	pop $1
	push $1
	spushs
	push 900
	spop $a
	call [$a],setz
	push $1
	cthis mssetobj
	call fxgetpuz,play
	push $1
	cthis mwyjmij
l2283:
	end method
	method cmov_PUT
	call fxputpuz,play
	localstring $1
	call cmov,getfree
	pop $1
	push $1
	spushs
	call grel,last
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	call grel,Wytlok5
	localint $2
	push 25
	pop $2
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push iX
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],lody
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	push iY
	pop $b
	popax
	add $a,$b
	call $2,length
	push $2
	cmpjl
	cmp0
	je l2285
	push $1
	spushs
	push iX
	push iY
	spop $a
	call [$a],setpos
	push $1
	spushs
	push 1
	spop $a
	call [$a],setz
	push $1
	call grel,remove
	call grel,empty
	cmp0
	je l2287
	cthis tpuzzle_end
l2287:
	jmp l2284
l2285:
	push $1
	spushs
	spop $a
	call [$a],getcy
	call anleft,getpy
	cmpja
	cmp0
	je l2289
	push $1
	cthis mwstaw
	jmp l2288
l2289:
	push $1
	call rec2,fit
l2288:
l2284:
	end method
	method Wytlok5
	cthis sortimgs
	push "Wytlok6"
	cthis each
	end method
	method Wytlok6
	localint $1
	pop $1
	push 10
	push $1
	pop $b
	popax
	add $a,$b
	cthis setz
	end method
	method mouse_lclick
	push igmstate
	push 2
	cmpje
	cmp0
	je l2291
	push 3
	pop igmstate
	jmp l2290
l2291:
	push igmstate
	push 3
	cmpje
	cmp0
	je l2293
	cthis mtomenu
l2293:
l2290:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push igmstate
	push 1
	cmpje
	cmp0
	je l2295
	push $1
	push $2
	push 1
	push 1
	call anleft,isin
	cmp0
	je l2297
	call timleft,play
	jmp l2296
l2297:
	push $1
	push $2
	push 1
	push 1
	call anright,isin
	cmp0
	je l2299
	call timright,play
l2299:
l2296:
l2295:
	end method
	method mouse_lrel
	push igmstate
	push 1
	cmpje
	cmp0
	je l2301
	call timleft,isplaying
	cmp0
	je l2303
	push 0
	call timleft,stop
l2303:
	call timright,isplaying
	cmp0
	je l2305
	push 0
	call timright,stop
l2305:
l2301:
	end method
	method mtomenu
	push igmstate
	push 4
	cmpje
	cmp0
	je l2307
	ret
l2307:
	push 4
	pop igmstate
	push "Wytlok7"
	call ccs,close
	end method
	method Wytlok7
	push "MenuPuzzle"
	call gameapi,play
	end method
	method mouse_rclick
	push igmdebug
	cmp0
	je l2309
	call grpes,print
l2309:
	end method
	method anbutexit_lclick
	push "exit"
	pop sMenuMode
	cthis mtomenu
	end method
	end game

