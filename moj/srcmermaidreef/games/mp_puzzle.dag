
class gmimgvecpuz : gmimgvec	{
	init()	{
		gmimgvec::init();
	}
	setpos(int x, int y)	{	.imsetpos(x,y);	}
	imsetpos(int x, int y)	{
		_ix = x;
		_iy = y;
		.eval2("imsetpos", x, y);
	}
	ilodx	{ 0; }
	ilody	{ 0; }
}

class TPuzzle2	{
	init	{}
	tinit(string sbkg, string sels, int row, int col, int dx, int dy)	{
		new int iCols = col;
		new int iRows = row;
		if( sbkg.contains(".") )
			.newimg("imgbkg", sbkg, 0);
		
		if( sels.contains(".pyz") )	{
			new gmimgvec grel;
			"grel" ..< sels;
		} else if( sels != "grel" )	{
			<sels>.addtogamevars("grel");
		}
		new gmimgvec grend;
		grel.hash;
		grel.each( func { (@id) .setz(10+id); } );
		new string spuztyp = <grel.first>.gettype;
		
		new int ibadajl = 25;
		new string sactpuz;
		new int iblitopacity = 192;
		new int PuzzleState = 0;
		
		new string ssetpuz = null;
		
		if( bPuzRotate )
			new WaitImgMover cmov;
		else	{
			new DelayMover cmov;
			cmov.setclickrel(false);
		}
		new SimpleCounter cnt(200);
		
		new int iX = dx;
		new int iY = dy;
		grel.move( iX, iY );
	}
	setpuzstate(int istate)	{
		PuzzleState=istate;
		if( PuzzleState==1)	{
			new gmimgvec grblit;
			@s = _;
			"grblit" ..< s;
			grblit.hide;
		}
	}
	cmov_GET	{
		fxrewind1.stop(false);
		if( sgmstate=="state_rotobut" )	{
			.advsetstdstate;
		} else if (.advstdstate ) {
			if( ssetpuz!=null )	{
				.hideoverlay;
				.retpuzel(ssetpuz);
				ssetpuz = null;
			}
			if( grel.isincut( mouse.getpos, true, true ) )	{
				string s = grel.getsfound;
				<s>.setz(900);
				.mssetobj( s );
				.tpuzzle_get;
			}
		}
	}
	hideoverlay	{
		if( ssetpuz!=null )	{
			< <ssetpuz>.imgetoverlay>.hide;
			anbutroto.hide;
		}
	}
	showoverlay	{
		if( ssetpuz!=null )	{
			<ssetpuz>.imgbuildoverlay(.red,64,0);
			@sover = <ssetpuz>.imgetoverlay;
			<sover>.setz( <ssetpuz>.getz + 1 );
			<sover>.ansetbpos( <ssetpuz>.getpx, <ssetpuz>.getpy );
			<sover>.show;
			rec2.fit(sover);
			if( !anbutroto.isvisible )
				anbutroto.setpos( <ssetpuz>.getex, <ssetpuz>.getpy );
			anbutroto.show;
		}
	}
	bool cwithin(string s)	{
		int i;
		if( .gettype!=spuztyp )	{
			for( i=0; i < .size; i++)	{if( <.get(i)>.cwithin( s ) )	return true;}
			return false;
		} else {
			if( <s>.gettype==spuztyp )	{
				if( bPuzRotate && puzangle!=0 )
					return false;
				int id = .framenr;
				int im = id%iCols;
				A;
				if( im>0 )			id-1;
				if( im<iCols-1 )	id+1;
				im = id/iCols;
				if( im>0 )			id-iCols;
				if( im<iRows-1)	id+iCols;
				return <s>.framenr->in;
			} else {
				for( i=0; i< <s>.size; i++)		{if( .cwithin( <s>.get(i) ) )	return true;}
				return false;
			}
		}
	}
	cposlen(string s1, string s2)	{
		int ilx = (<s1>.getposx-<s1>.ilodx) - (<s2>.getposx-<s2>.ilodx);
		int ily = (<s1>.getposy-<s1>.ilody) - (<s2>.getposy-<s2>.ilody);
		ilx.length( ilx, ily );
	}
	cblit(string s)	{
		if( <s>.gettype==spuztyp )	{
			if( PuzzleState==1 )	{
				<s>.imsetpos(iX, iY);
				<s>.hide;
				s = grblit.get(<s>.framenr);
			}
			<s> {
				.setz(1);
				.show;
				
				if( bPuzRotate )	{
					<"ftrot"+this>.unlink;
				}
				
				.imsetpos(iX, iY);
				
				imgbkg.blit( this );
				.hide;
				
				/*int x = .getpx;
				int y = .getpy;
				.anaddfilter;
				.setopacity(iblitopacity);
				.setpos(x,y);
				imgbkg.blit( this );
				.unlink;
				.setpos(iX,iY);
				.hide;*/
			};
		} else	for( int i=0; i< <s>.size; i++ )		.cblit( <s>.get(i) );
	}
	cmov_PUT	{	<GAME>.cput;	}
	retpuzel(string s)	{
		<s>.setz(100+cnt.next);
		grel.sortimgs;
		grel.each( func { (int i) .setz(10+i); } );
	}
	cput	{
		.tpuzzle_put;
		string s = cmov.getfree;
		.retpuzel(s);
		string s1 = s, string s2;
		sactpuz = s;
		while(<s>.gettype != spuztyp)	s=<s>.get(0);
		bool bcanjoin = (!bPuzRotate || <s>.puzangle==0 );
		if( bcanjoin && (ibadajl.length( <s>.ilodx+iX-<s>.getpx, <s>.ilody+iY-<s>.getpy ) < ibadajl) ) {
			sactpuz = null;
			.cblit(s1);
			grel.remove(s1);
			grend.add(s1);
			.tpuzzle_blit;
			if( grel.empty )	{
				grend.show;
				.tpuzzle_end;
			}
		} else if( bcanjoin ) {
			grel.remove(s1);
			for( int i=0; i<grel.size; i++)	{
				s = grel.get(i);
				if( .cposlen(s,s1)<ibadajl && <s1>.cwithin(s) )	{
					int x, int y;
					if( <s>.gettype==spuztyp)	{
						x = <s>.getposx - <s>.ilodx;
						y = <s>.getposy - <s>.ilody;
					} else {
						|x,y| = <s>.getpos;
					}
					if( <s>.gettype==spuztyp)	{
						.mwyjmij(s);
						if( <s1>.gettype==spuztyp )	{
							s2 = "gr" + s;
							new gmimgvecpuz <s2>;
							<s2>.add(s);
							<s2>.add(s1);
						} else {
							<s1>.add(s);
							s2 = s1;
						}
						grel.remove(s);
						grel.add(s2);
					} else {
						if( <s1>.gettype==spuztyp )	{
							<s>.add(s1);
						} else {
							<s>.addgr(s1);
						}
						s2 = s;
					}
					<s2>.imsetpos(x,y);
					<s2>.setz( <s1>.getz );
					grel.sortimgs;
					sactpuz = s2;
					.tpuzzle_join;
					return;
				}
			}
			grel.add(s1);
		}
		.tpuzzle_putbad;
	}
	virtual tpuzzle_end {}
	virtual tpuzzle_get {}
	virtual tpuzzle_blit {}
	virtual tpuzzle_join {}
	virtual tpuzzle_put {}
	virtual tpuzzle_putbad {}
	rotopuz	{
		puzangle = (puzangle+1)%4;
		<"ftrot"+this>.setrotate( puzangle * 90 );
	}
}

new bool bnewpuz = sgmpuzpref.in(A, "nestor", "nelapuz" );

public przygotuj_matryce(string smatryca, string smaska, string simgpuz, string sgr, int ishadow)	{
	int dy = 65->igetsc;

	new gmimgvec grmat;
	"grmat" ..< (smatryca+".pyz");
	if( bnewpuz )
		grmat.move(0, dy);
	new gmimgvec grmask;
	if( smaska!=null && engine.fileexist( .getgraphpath + smaska + ".pyz")  )	{
		"grmask" ..< (smaska+".pyz");
		if( bnewpuz )
			grmask.move(0, dy);
		if( bPuzHint )
			grmask.blitto("imgbkg");
	}
	
	new gmimgvec <sgr>;
	
	.newimg("impuz", simgpuz, 0);
	
	impuz.setpos( <grmat.first>.getpx, <grmat.first>.getpy );
	
	new filter ft2;
	
	for( int i=0; i<grmat.size; i++)	{
		string s1 = "im" + sgr + "_" + i;
		new img <s1>;
		<s1>.var2("framenr", i);
		<s1>.addmethod("imsetpos", func { (int x, int y)
			.setpos(x+ilodx, y+ilody);
			} );
		string s = grmat.get(i);
		
		<s1>.create( <s>.getw + ishadow, <s>.geth + ishadow, .transparent );
		<s1>.setpos( <s>.getpx, <s>.getpy );
		<s1>.vars2(A, "ilodx", <s1>.getpx, "ilody", <s1>.getpy);
		
		if( ishadow > 0 )	{
			<s>.move(ishadow,ishadow);
			ft2.link(s);
			ft2.setmaskalpha(1);
			ft2.setopacity(92);
			<s1>.blit(s);
			ft2.unlink;
			<s>.move(-ishadow,-ishadow);
		}
		
		<s1>.blitmask( "impuz", s );
		
		if( i<grmask.size )	{
			<s1>.blit( grmask.get(i) );
		}
		
		if( bPuzRotate )	{
			s = "ftrot" + s1;
			new filter <s>;
			<s>.link(s1);
			<s>.setpivottype(1);
			<s>.setsmooth(0);
			<s1>.var2("puzangle",4->rand);
			<s1>.rotopuz;
		}
		
		<sgr>.add(s1);
	}
	grmask.hide;
	
	delete ft2;
	grmat.deleteallgm;
	delete grmat;
	
	impuz.setz(1);
	impuz.hide;
}


game PuzzleB : MermaidStd, TPuzzle2	{
	init	{
		MermaidStd::init("mg_puzzle");
		//.cloadboki(1);
		
		.sfxs = (A, "getpuz 60", "putpuz 60", "ok 40", "podnies1", "zwyciestwo2", "rewind1 70", "pageflip1 80");
		
		.newimg("imgbkg", ( .isjpgame ? "bgpuzzle.jpg" : "bgpuzzle.png"), 0);
		
		.przygotuj_matryce("matryca_"+iPuzRow+"_"+iPuzCol, "maska_"+iPuzRow+"_"+iPuzCol,
			"$scripts/" + sgmpuzpref+ "/mg_puzzle/imgs/p_puz" + iMenuPuzid + ".jpg", "grel", 0);
		
		.tinit("imgbkg", "grel", iPuzRow, iPuzCol, 0, 0);
		
		if( bnewpuz )	{
			.imgs = (A, "down.pyz 200", "up.pyz 200", "butroto.pyzH 950");
			anup.addtogamevars("anleft");
			andown.addtogamevars("anright");
		} else	{
			.imgs = (A, "left.pyz 200", "right.pyz 200", "butroto.pyzH 950");
			@y = igmoffsety + iResY - anleft.geth - 30->igetsc;
			int dx = 30->igetsc;
			anleft.ansetbpos( igmoffsetx + dx, y );
			anright.ansetbpos( igmoffsetx + iResX - anright.getw - dx , y );
		}
		
		anbutroto.Button_addstd;
		
		anleft.Button_std;
		anright.Button_std;
		butgame.add("anleft");
		butgame.add("anright");
		new int strzalkax = 5;
		
		if( !.checktouchpad )	{
			anleft.imgbuildoverlay(.white,64,1500);
			anright.imgbuildoverlay(.white,64,1500);
			//anbutexit.imgbuildoverlay(.yellow,64,1200);
		}
		
		new int rewindspeed = 20;
		.cycle = ("timleft", func {
			if( .advstdstate && grpes.size )	{
				@s = grpes.first;
				if( bnewpuz )	{
					grpes.move( 0, rewindspeed );
					<s>.munlink;
					if( <s>.getpy > anleft.getey + strzalkax )
						grpes.move( 0, (anleft.getey+strzalkax)-<s>.getpy );
				} else {
					grpes.move( rewindspeed, 0 );
					<s>.munlink;
					if( <s>.getpx > anleft.getex + strzalkax )
						grpes.move( (anleft.getex+strzalkax)-<s>.getpx, 0 );
				}
				<s>.mlink;
				.play;
			}
			} );
		.cycle = ("timright", func {
			if( .advstdstate && grpes.size )	{
				@s = grpes.last;
				if( bnewpuz )	{
					grpes.move( 0, -rewindspeed );
					<s>.munlink;
					if( <s>.getey < anright.getpy - strzalkax )
						grpes.move( 0, (anright.getpy-strzalkax)-<s>.getey );
				} else {
					grpes.move( -rewindspeed, 0 );
					<s>.munlink;
					if( <s>.getex < anright.getpx - strzalkax )
						grpes.move( (anright.getpx-strzalkax)-<s>.getex, 0 );
				}
				<s>.mlink;
				.play;
			}
			} );
		@dx = 6->igetsc;
		@dx2 = 54->igetsc;
		if( bnewpuz )
			new Rect rec2(dx, dx2, anleft.getcx, igmapph-dx);
		else
			new Rect rec2(dx, dx2, igmappw-dx, anleft.getcy);
		rec2 { vecgr.add("gmimgvecpuz"); };
		new gmimgvec grpes;
		new int ipuzheight = <grel.first>.geth/2;
		
		for( int i=0; i<grel.size; i++ )
			.mwstaw(grel.get(i));
		
		.cbutexit;
		.cbutmusic;
		/*if( igmreklamy )	{
			anbutmusic.ansetbpos( anbutexit.getex+0.2*anbutexit.getw, anbutexit.getpy );
		}*/
		
		if( bPlayMusic )	{
			.play_music;
		}
		
		.cutscene;
		ccs.enter( func {
			.unlockall;
			.advsetstdstate;
			} );
	}
	play_music	{
		/*if( igmogg )
			mus.playstr( "puzzle.ogg -v 50 -l");*/
	}
	stop_music	{
		//mus.fadeout(1000);
	}
	munlink	{
		if( bPuzRotate) <"ftrot"+this>.unlink;	
	}
	mlink	{
		if( bPuzRotate )	{
			@s = "ftrot"+this;
			<s>.link(this);
			<s>.setsmooth(0);
			<s>.setrotate( puzangle * 90 );
		}
	}
	mwstaw(string s)	{
		int dy = 5;
		int xpos, int ypos;
		<s>.setpos(0,0);
		//<s>.munlink;
		
		if( bnewpuz )	{
			if( grpes.size )	{
				ypos = <grpes.last>.getpy + <grpes.last>.geth;
			} else {
				ypos = anleft.getey;
			}
			@x = anleft.getcx - <s>.getw/2;
			if( x+<s>.getw > igmappw - dy )
				x = igmappw-dy - <s>.getw;
			<s>.munlink;
			<s>.setpos( x, ypos + strzalkax );
			<s>.mlink;
			<s>.clip( 0, anleft.getey + strzalkax, igmappw, anright.getpy-strzalkax );
		} else {
			if( grpes.size )	{
				xpos = <grpes.last>.getpx + <grpes.last>.getw;
			} else {
				xpos = anleft.getex;
			}
			//<s>.ansetbpos( xpos + strzalkax, iResY-dy - <s>.geth );
			@y = anleft.getcy - <s>.geth/2;
			if( y+<s>.geth > igmapph - dy )
				y = igmapph-dy - <s>.geth;
			<s>.munlink;
			<s>.setpos( xpos + strzalkax, y );
			<s>.mlink;
			<s>.clip( anleft.getex + strzalkax, 0, anright.getpx-strzalkax, igmapph );
		}
		grpes.add(s);
	}
	mwyjmij(string s)	{
		int id = grpes.find(s);
		if( id<0 ) return;
		<s>.clip(0,0,igmappw,igmapph);
		grpes.remove(s);
		if( bnewpuz )	{
			for( int i=id; i < grpes.size; i++ )	{
				<grpes.get(i)>.move( 0, -<s>.geth-strzalkax );
			}
		} else {
			for( int i=id; i < grpes.size; i++ )	{
				<grpes.get(i)>.move( -<s>.getw-strzalkax, 0 );
			}
		}
		if( grpes.empty )
			fxrewind1.stop(false);
	}
	tpuzzle_get	{
		fxgetpuz.play;
		.mwyjmij(grel.getsfound);
	}
	tpuzzle_putbad	{	fxputpuz.play;		}
	tpuzzle_blit	{	fxpodnies1.play;		}
	tpuzzle_join	{	fxpodnies1.play;	}
	tpuzzle_end	{
		fxok.play;
		grend.hide;
		sgmstate = "state_won";
		
		impuz.show;
		if( igmogg )	{
			//mus.playstr("zwyciestwo2.ogg");
			fxzwyciestwo2.play;
		} else {
			fxzwyciestwo2.play;
		}
	}
	cmov_PUT	{
		<GAME>.cput;
		if( sactpuz!=null )	{
			if( <sactpuz>.gettype==spuztyp && (( !bnewpuz && <sactpuz>.getcy > anleft.getpy )
				|| (bnewpuz && <sactpuz>.getcx > anleft.getpx )) )	{
				fxrewind1.play;
				.mwstaw(sactpuz);
			} else {
				rec2.fit(sactpuz);
			}
		}
		
	}
	cmov_SET	{
		ssetpuz = .getmover;
		if( <ssetpuz>.gettype!=spuztyp )	{
			ssetpuz = null;
			.cmov_PUT;
		} else {
			.free;
			.showoverlay;
			rec2.fit(ssetpuz);
			sndfxmoveon2.play;
			.mwyjmij(ssetpuz);
		}
	}
	mouse_lclick	{
		if( sgmstate=="state_won" ) sgmstate = "state_exit";
		else if (sgmstate=="state_exit")	{
			.mtomenu;
		}
		
		|int x, int y| = mouse.getpos;
		if( .advstdstate && grpes.size )	{
			if( anleft.isin(x,y,1,1) ) {
				fxrewind1.playloop;
				timleft.stop(true);
			} else if (anright.isin(x,y,1,1) ) {
				fxrewind1.playloop;
				timright.stop(true);
			}
		}
	}
	mouse_lrel	{
		//if( .advstdstate )	{
			if( timleft.isplaying ) {
				timleft.stop(false);
				fxrewind1.stop(false);
			} if( timright.isplaying ) {
				timright.stop(false);
				fxrewind1.stop(false);
			}
		//}
	}
	mtomenu	{
		.stdexit("MenuImg");
	}
	mouse_rclick	{
		//if( igmdebug ) .tpuzzle_end;
		//if( igmdebug ) grpes.print;
	}
	butclick_anbutroto	{
		if( .advstdstate || sgmstate=="state_rotobut" )	{
			int x = <ssetpuz>.getcx;
			int y = <ssetpuz>.getcy;
			<ssetpuz>.rotopuz;
			rec2.fit(ssetpuz);
			x -= <ssetpuz>.getcx;
			y -= <ssetpuz>.getcy;
			<ssetpuz>.move( x, y );
			.showoverlay;
			< <ssetpuz>.imgetoverlay>.move( x,y );
			sgmstate = "state_rotobut";
			fxpageflip1.play;
		}
	}
	butclick_anbutexit	{
		.mtomenu;
	}
	key_down	{
		if( igmdebug && keyboard.iskey("s") )	{
			if( ssetpuz!=null )	{
				<ssetpuz>.imgprint;
			}
		}
	}
}

