; Dominik Dagiel   ix 2005

	new string,A
	push "!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l2
	push $1
	push $2
	cthis varnew
l2:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global0"
	cthis addmethod
	end method
	method global0
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global1"
	cthis addmethod
	end method
	method global1
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l3:
	push A
	push $2
	cmpjne
	cmp0
	je l4
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l3
l4:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l5:
	push A
	push $3
	cmpjne
	cmp0
	je l6
	push $1
	neg
	cmp0
	je l8
	push $2
	push $3
	cmpje
	pop $1
l8:
	localdef $3
	pop $3
	jmp l5
l6:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l9:
	push $2
	push A
	cmpjne
	cmp0
	je l10
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l9
l10:
	end method
	method case
	localdef $1
	pop $1
	call $1,in
	cmp0
	je l12
	push $1
	jmp l11
l12:
	push "null"
l11:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global2"
	cthis addmethod
	end method
	method global2
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l13:
	push $2
	push A
	cmpjne
	cmp0
	je l14
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l13
l14:
	end method
	method mresize
	cthis gettype
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	cthis getname
	spop $a
	 clparent [$a],resizemethods
	end method
	method times
	localstring $1
	pop $1
	push 0
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis for_plus
	end method
	method upto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_plus
	end method
	method downto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_minus
	end method
	method for_plus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l16
	ret
l16:
l17:
	push $1
	push $2
	cmpjle
	cmp0
	je l18
	jmp l20
l19:
	add $1,1
	pop $1
	jmp l17
l20:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l19
l18:
	end method
	method for_minus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l22
	ret
l22:
l23:
	push $1
	push $2
	cmpjae
	cmp0
	je l24
	jmp l26
l25:
	sub $1,1
	pop $1
	jmp l23
l26:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l25
l24:
	end method
	method double_for
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	push 0
	pop $5
l27:
	push $5
	push $1
	cmpjl
	cmp0
	je l28
	jmp l30
l29:
	add $5,1
	pop $5
	jmp l27
l30:
	push 0
	pop $4
l31:
	push $4
	push $2
	cmpjl
	cmp0
	je l32
	jmp l34
l33:
	add $4,1
	pop $4
	jmp l31
l34:
	push $3
	spushs
	push $5
	push $4
	spop $d
	cthis [$d]
	jmp l33
l32:
	jmp l29
l28:
	end method
	class classobjcounter
	method init
	localstring $1
	pop $1
	new string,_sprefix
	push $1
	pop _sprefix
	new int,_iile
	push 0
	pop _iile
	end method
	method get
	add _iile,1
	pop _iile
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	end method
	end class

	class classvsigobj
	method init
	new int,bplaying
	push 0
	pop bplaying
	end method
	method play
	push 1
	pop bplaying
	end method
	method stop
	localint $1
	pop $1
	push 0
	pop bplaying
	push $1
	cmp0
	je l36
	cthis onfinish
l36:
	end method
	method isplaying
	push bplaying
	end method
	end class

	class classsignals
	method init
	end method
	method stdfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "classsignals0"
	spop $a
	call [$a],addmethod
	end method
	method classsignals0
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdstart
	localstring $1
	pop $1
	push $1
	spushs
	push "onstart"
	push "classsignals1"
	spop $a
	call [$a],addmethod
	end method
	method classsignals1
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdsigs
	localstring $1
	pop $1
	push $1
	cthis stdstart
	push $1
	cthis stdfinish
	end method
	method buildanima
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "onendframe"
	push "classsignals2"
	spop $a
	call [$a],addmethod
	end method
	method classsignals2
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildsnd
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	end method
	method buildtimer
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "ontick"
	push "classsignals3"
	spop $a
	call [$a],addmethod
	end method
	method classsignals3
	cthis getname
	push "_TICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildbut
	localstring $1
	pop $1
	push $1
	spushs
	push "onclick"
	push "classsignals4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onrel"
	push "classsignals5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveon"
	push "classsignals6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveoff"
	push "classsignals7"
	spop $a
	call [$a],addmethod
	end method
	method classsignals4
	cthis getname
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals5
	cthis getname
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals6
	cthis getname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals7
	cthis getname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l37:
	push $2
	push $3
	cmpjl
	cmp0
	je l38
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l37
l38:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l40
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
l40:
	end method
	end module

	class collection
	method init
	localstring $1
	pop $1
	new string,stype
	push $1
	pop stype
	end method
	method type
	push stype
	ret
	end method
	end class

	class array
	parent collection
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	clparent collection,init
	new int,idim
	push $2
	pop idim
	new int,isize
	push $3
	pop isize
	new vector,vec
	push $1
	call vec,type
	push $2
	push 0
	cmpjle
	cmp0
	jne l43
	push $3
	push 0
	cmpjle
	jmp l44
l42:
	push 0
	jmp l44
l43:
	push 1
l44:
	cmp0
	je l45
	ret
l45:
	push $3
	push $2
	call $3,pow
	push 0
	call vec,resize
	end method
	method getid
	localint $1
	push 0
	pop $1
	localint $2
	push idim
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l46:
	push $2
	push 0
	cmpja
	cmp0
	je l47
	popax
	add $1,$a
	pop $1
	push isize
	popax
	mul $1,$a
	pop $1
	sub $2,1
	pop $2
	jmp l46
l47:
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method get
	cthis getid
	call vec,get
	ret
	end method
	method set
	localdef $1
	pop $1
	cthis getid
	push $1
	call vec,set
	end method
	method getsize
	push isize
	ret
	end method
	method getdim
	push idim
	ret
	end method
	end class

	class stack
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vec
	push $1
	call vec,type
	push $1
	spushs
	spop $d
	new [$d],var
	end method
	method push
	localstring $1
	pop $1
	push $1
	call vec,add
	end method
	method top
	call vec,last
	ret
	end method
	method pop
	cthis top
	pop var
	call vec,size
	push 1
	pop $b
	popax
	sub $a,$b
	call vec,removeat
	push var
	ret
	end method
	end class

	class map
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new int,isize
	push 0
	pop isize
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis hasvar
	neg
	cmp0
	je l49
	push $1
	cthis add
l49:
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],set
	end method
	method add
	localstring $1
	pop $1
	push stype
	spushs
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method get
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method remove
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method contains
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	ret
	end method
	end class

	class map2
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vn
	push "string"
	call vn,type
	new vector,vec
	push $1
	call vec,type
	end method
	method add
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,add
	push $2
	call vec,add
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,find
	push $2
	call vec,set
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call vn,contains
	ret
	end method
	method get
	localstring $1
	pop $1
	push $1
	call vn,find
	call vec,get
	ret
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call vn,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l51
	push $2
	call vec,removeat
	push $2
	call vn,removeat
l51:
	end method
	method free
	call vn,free
	call vec,free
	end method
	end class

	class classgamemusic
	parent classdbreader
	method init
	clparent classdbreader,init
	new string,smuspath
	push ""
	pop smuspath
	new string,sbgrpath
	push ""
	pop sbgrpath
	new snd,_sndbgr
	push "onfinish"
	push "_stdsndloop"
	call _sndbgr,addmethod
	end method
	method reset
	call gameapi,stopmusic
	cthis stopbgr
	end method
	method _stdsndloop
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbl,loadscript
	end method
	method musicpath
	localstring $1
	pop $1
	push $1
	pop smuspath
	end method
	method sndbgrpath
	localstring $1
	pop $1
	push $1
	pop sbgrpath
	end method
	method _play
	localint $1
	pop $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	push 1
	pop $2
	push $1
	call dbl,getcolsno
	pop $3
l52:
	push $2
	push $3
	cmpjl
	cmp0
	je l53
	push $1
	push $2
	call dbl,get
	pop $5
	add $2,1
	pop $2
	push $5
	push "music"
	cmpje
	cmp0
	je l55
	push smuspath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	pop $6
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l57
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l59
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call gameapi,setmusicvol
	add $2,1
	pop $2
l59:
	jmp l56
l57:
	push 100
	call gameapi,setmusicvol
l56:
	push $6
	call gameapi,playmusic
	jmp l54
l55:
	push $5
	push "bgr"
	cmpje
	cmp0
	je l61
	push sbgrpath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	call _sndbgr,load
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l63
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l65
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call _sndbgr,setvol
	add $2,1
	pop $2
l65:
	jmp l62
l63:
	push 100
	call _sndbgr,setvol
l62:
	cthis playbgr
	jmp l60
l61:
	add $2,1
	pop $2
l60:
l54:
	jmp l52
l53:
	end method
	method play
	cthis reset
	call gameapi,getgamename
	push "_play"
	cthis readrow
	end method
	method playbgr
	call _sndbgr,play
	end method
	method stopbgr
	push 0
	call _sndbgr,stop
	end method
	end class

	new int,igmstate
	new int,igmdebug
	new int,igmeasy
	new int,igmdemo
	new int,igmbegin
	new string,sgmfontfile
	push "configs/fonts/bold.ttf"
	pop sgmfontfile
	new int,iResX
	push 800
	pop iResX
	new int,iResY
	push 600
	pop iResY
	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method checkfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l67
	push sgmfontfile
	pop $1
l67:
	push ".ttf"
	call $1,contains
	cmp0
	je l69
	new font,_fnt
	push $1
	push $2
	call _fnt,load
	push "_fnt"
	pop $1
l69:
	push $1
	end method
	method begingame
	push igmbegin
	neg
	pop igmbegin
	push igmbegin
	neg
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpjle
	cmp0
	je l71
	ret
l71:
	sub $3,1
	pop $3
l72:
	push $3
	push 0
	cmpjae
	cmp0
	je l73
	push $1
	spushs
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l72
l73:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	ret
	end method
	method getsndpath
	push _sclwavpath
	ret
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new anima,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	spushs
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l75
	ret
l75:
	localint $5
	push 0
	pop $5
l76:
	push $5
	push $4
	cmpjl
	cmp0
	je l77
	jmp l79
l78:
	add $5,1
	pop $5
	jmp l76
l79:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l78
l77:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l81
	ret
l81:
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	spushs
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l82:
	push $6
	push $5
	cmpjl
	cmp0
	je l83
	jmp l85
l84:
	add $6,1
	pop $6
	jmp l82
l85:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	cmpjne
	cmp0
	je l87
	push $4
	spushs
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l87:
	jmp l84
l83:
	push $5
	ret
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	ret
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	spushs
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new img,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method newsndfree
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method snewsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l88:
	push $8
	push $7
	cmpjl
	cmp0
	je l89
	jmp l91
l90:
	add $8,1
	pop $8
	jmp l88
l91:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new snd,[$e]
	push $6
	spushs
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l90
l89:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],setcycle
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	cmp0
	je l93
	push $1
	cthis looponfinish
	jmp l92
l93:
	push "H"
	call $2,contains
	cmp0
	je l95
	push $1
	cthis hideonfinish
l95:
l92:
	push "P"
	call $2,contains
	cmp0
	je l97
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l97:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l98:
	push $6
	push $4
	cmpjl
	cmp0
	je l99
	jmp l101
l100:
	add $6,1
	pop $6
	jmp l98
l101:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	cmpjne
	cmp0
	je l103
	push $3
	spushs
	push $5
	spop $a
	call [$a],add
l103:
	jmp l100
l99:
	push $4
	ret
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	ret
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	push 0
	pop $5
l104:
	push $5
	push $4
	cmpjl
	cmp0
	je l105
	jmp l107
l106:
	add $5,1
	pop $5
	jmp l104
l107:
	push $1
	push $2
	push $5
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	push $3
	cthis newanframesgr
	popax
	jmp l106
l105:
	push $4
	ret
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	ret
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	spushs
	spop $a
	call [$a],hide
	push $6
	ret
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],loadscript
	end method
	method vargmset
	localstring $1
	localdef $2
	pop $2
	pop $1
	localstring $3
	call gameapi,getgamename
	pop $3
	push $3
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l109
	push $3
	spushs
	call $2,gettype
	push $1
	spop $a
	call [$a],varnew
l109:
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	end class

	new img,imglobcurs
	push "configs/kursorstd.png"
	push "configs/kursoract.png"
	call bsms,load
	module bsms
	method init
	new img,imgstd
	new img,imgact
	new int,msid
	push 0
	pop msid
	end method
	method load
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call imgstd,load
	push $2
	call imgact,load
	push "imgact"
	call imglobcurs,copy
	call imglobcurs,hide
	call imgstd,hide
	call imgact,hide
	cthis reset
	push "imgstd"
	call engine,stdbutcursor
	end method
	method setinitial
	call mouse,stdcursor
	push 0
	pop msid
	end method
	method setstd
	push "imgstd"
	call mouse,setcursor
	push "imgstd"
	call engine,stdbutcursor
	push 1
	pop msid
	end method
	method setact
	push "imgact"
	call mouse,setcursor
	push 2
	pop msid
	end method
	method setown
	push 3
	pop msid
	end method
	method isinitial
	push msid
	push 0
	cmpje
	end method
	method isstd
	push msid
	push 1
	cmpje
	end method
	method isact
	push msid
	push 2
	cmpje
	end method
	method isown
	push msid
	push 3
	cmpje
	end method
	end module

	module clsav
	method init
	new vector,vqsav
	push "string"
	call vqsav,type
	new vector,vvqsav
	push "string"
	call vvqsav,type
	end method
	method free
	call vqsav,free
	call vvqsav,free
	end method
	method load
	localstring $1
	pop $1
	cthis free
	end method
	method save
	localstring $1
	pop $1
	end method
	method qadd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call vqsav,add
	push $2
	call vvqsav,add
	end method
	method qsave
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call vqsav,find
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l111
	push $1
	push $2
	cthis qadd
	jmp l110
l111:
	push $3
	push $2
	call vvqsav,set
l110:
	end method
	method qload
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call vqsav,find
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l113
	push $1
	push $2
	cthis qadd
	push $2
	ret
	jmp l112
l113:
	push $3
	call vvqsav,get
	ret
l112:
	end method
	end module

	class classquest
	method init
	new vector,vqst
	push "string"
	call vqst,type
	end method
	method isdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	ret
	end method
	method notdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	ret
	end method
	method done
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	cmp0
	je l115
	push $1
	call vqst,add
l115:
	end method
	method reset
	call vqst,free
	end method
	method save
	localstring $1
	pop $1
	push $1
	call vqst,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call vqst,load
	end method
	end class

	new classquest,clqs
	class classeasysaver
	method init
	new int,ilevel
	push 1
	popax
	sub 0,$a
	pop ilevel
	new db,dbl
	new string,slevelfile
	end method
	method getlevel
	push ilevel
	ret
	end method
	method setlevel
	localint $1
	pop $1
	push $1
	pop ilevel
	end method
	method getgame
	localint $1
	pop $1
	push $1
	push 0
	call dbl,get
	ret
	end method
	method load
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	call ilevel,load
	push $1
	pop slevelfile
	push $2
	call dbl,load
	end method
	method save
	localint $1
	call gameapi,getgamename
	call dbl,findbyrow
	pop $1
	push $1
	push ilevel
	cmpja
	cmp0
	je l117
	push $1
	pop ilevel
	push slevelfile
	call ilevel,save
l117:
	end method
	end class

	class classfullsave
	method init
	new db,dbsav
	new string,sstdfile
	push "saves/save.txt"
	pop sstdfile
	end method
	method save
	localstring $1
	pop $1
	push $1
	call dbsav,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbsav,load
	end method
	method print
	call dbsav,print
	end method
	method setfile
	localstring $1
	pop $1
	push $1
	pop sstdfile
	end method
	method stdload
	push sstdfile
	cthis load
	end method
	method stdsave
	push sstdfile
	cthis save
	end method
	method free
	call dbsav,free
	end method
	method _set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l119
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l118
l119:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l118:
	end method
	method _bset
	localstring $1
	pop $1
	push $1
	push 1
	cthis _set
	end method
	method _get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l121
	push $2
	push 1
	call dbsav,get
	jmp l120
l121:
	push "null"
l120:
	ret
	end method
	method _is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l123
	push $3
	push 1
	call dbsav,get
	push $2
	cmpje
	jmp l122
l123:
	push 0
l122:
	ret
	end method
	method _isnt
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l125
	push $3
	push 1
	call dbsav,get
	push $2
	cmpjne
	jmp l124
l125:
	push 0
l124:
	ret
	end method
	method _bis
	localstring $1
	pop $1
	push $1
	push 1
	cthis _is
	ret
	end method
	method gmset
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	cthis _set
	end method
	method gmget
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis _get
	ret
	end method
	method gmis
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	cthis _is
	ret
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	cthis _set
	end method
	method get
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	cthis _get
	ret
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	cthis _is
	ret
	end method
	method bset
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	cthis _set
	end method
	method bget
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	cthis _is
	ret
	end method
	method bis
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	cthis _is
	ret
	end method
	method gbget
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis _get
	ret
	end method
	method gbis
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push 1
	cthis _is
	ret
	end method
	end class

	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l126
	push $1
	push $5
	cmpjle
	cmp0
	je l126
	push $2
	push $4
	cmpjae
	cmp0
	je l126
	push $2
	push $6
	cmpjle
	jmp l128
l126:
	push 0
	jmp l128
l127:
	push 1
l128:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	end method
	method insurf
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $3
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis isin
	end method
	method issurfin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l130
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l130
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l130
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l131
l129:
	push 0
	jmp l131
l130:
	push 1
l131:
	end method
	method commonsurface
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis issurfin
	cmp0
	jne l133
	push $5
	push $6
	push $7
	push $8
	push $1
	push $2
	push $3
	push $4
	cthis issurfin
	jmp l134
l132:
	push 0
	jmp l134
l133:
	push 1
l134:
	end method
	method commonimgs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis commonsurface
	end method
	method surfwithinsurf
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l135
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l135
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l135
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l137
l135:
	push 0
	jmp l137
l136:
	push 1
l137:
	end method
	method imgwithinimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis surfwithinsurf
	end method
	end module

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	ret
	end method
	method ileny
	push ily
	ret
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	ret
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen5
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis ilen
	ret
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	ret
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	ret
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	ret
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	cmpjae
	cmp0
	je l138
	push ilx
	push $6
	cmpjle
	cmp0
	je l138
	push ily
	push $5
	cmpjae
	cmp0
	je l138
	push ily
	push $7
	cmpjle
	jmp l140
l138:
	push 0
	jmp l140
l139:
	push 1
l140:
	ret
	end method
	method ilodlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],lody
	push $2
	spushs
	spop $a
	call [$a],lodx
	push $2
	spushs
	spop $a
	call [$a],lody
	cthis ilen
	end method
	method iposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpos
	push $2
	spushs
	spop $a
	call [$a],getpos
	cthis ilen
	end method
	end module

	class classansearcher
	method init
	end method
	method _findnotr
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $6
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $7
l141:
	push $2
	push $6
	cmpjne
	cmp0
	je l142
	push $3
	push $7
	cmpjne
	jmp l144
l142:
	push 0
	jmp l144
l143:
	push 1
l144:
	cmp0
	je l145
	push $1
	spushs
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l147
	push $2
	push $3
	ret
l147:
	push $4
	popax
	add $2,$a
	pop $2
	push $5
	popax
	add $3,$a
	pop $3
	jmp l141
l145:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method firstnotrx1y
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	method firstnotrexy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrxy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrx1ey
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	end class

	class signal_pack
	method init
	end method
	method addsignals
	localstring $1
	pop $1
	push $1
	spushs
	push "operator<"
	push "signal_pack0"
	spop $a
	call [$a],addmethod
	end method
	method signal_pack0
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	end method
	end class

	class anima_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "_clanbuildpomvars"
	push "anima_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_clanbuildpomvars
	push $1
	spushs
	push "setbpos"
	push "anima_pack1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "saverelpos"
	push "anima_pack2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrelpos"
	push "anima_pack3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssaverelpos"
	push "anima_pack4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssetrelpos"
	push "anima_pack5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rplay"
	push "anima_pack6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setcpos"
	push "anima_pack7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator="
	push "anima_pack8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator=="
	push "anima_pack9"
	spop $a
	call [$a],addmethod
	push $1
	cthis addsignals
	end method
	method anima_pack0
	new int,_ixp
	new int,_iyp
	end method
	method anima_pack1
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anima_pack2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method anima_pack3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack4
	call mouse,getpos
	cthis saverelpos
	end method
	method anima_pack5
	call mouse,getpos
	cthis setrelpos
	end method
	method anima_pack6
	localstring $1
	pop $1
	push $1
	cthis isplaying
	neg
	cmp0
	je l149
	push $1
	cthis play
l149:
	end method
	method anima_pack7
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack8
	localstring $1
	pop $1
	push $1
	cthis copy
	end method
	method anima_pack9
	localstring $1
	pop $1
	cthis actionnr
	push $1
	spushs
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l150
	cthis framenr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l152
l150:
	push 0
	jmp l152
l151:
	push 1
l152:
	end method
	end class

	class timer_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	cthis addsignals
	end method
	end class

	class vector_pack
	method init
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l153:
	push $2
	cthis size
	cmpjl
	cmp0
	je l154
	jmp l156
l155:
	add $2,1
	pop $2
	jmp l153
l156:
	push $1
	spushs
	push $2
	cthis get
	spop $d
	cthis [$d]
	jmp l155
l154:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "each"
	push "each"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator-"
	push "vector_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator+"
	push "vector_pack1"
	spop $a
	call [$a],addmethod
	end method
	method vector_pack0
	localdef $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method vector_pack1
	localdef $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	end class

	class classanfilter
	method init
	end method
	method buildanfilter
	new filter,ft
	cthis getname
	call ft,link
	push 1
	call ft,setpivottype
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "buildanfilter"
	push "buildanfilter"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildanfilter
	push $1
	spushs
	push "setopacity"
	push "classanfilter0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setzoom"
	push "classanfilter1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setangle"
	push "classanfilter2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getangle"
	push "classanfilter3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rotate"
	push "classanfilter4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpivottype"
	push "classanfilter5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlink"
	push "classanfilter6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "link"
	push "classanfilter7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "blend"
	push "classanfilter8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mask"
	push "classanfilter9"
	spop $a
	call [$a],addmethod
	end method
	method classanfilter0
	localint $1
	pop $1
	push $1
	call ft,setopacity
	end method
	method classanfilter1
	localreal $1
	pop $1
	push $1
	call ft,setzoom
	end method
	method classanfilter2
	localreal $1
	pop $1
	push $1
	call ft,setangle
	end method
	method classanfilter3
	call ft,getangle
	ret
	end method
	method classanfilter4
	localreal $1
	pop $1
	push $1
	call ft,rotate
	end method
	method classanfilter5
	localint $1
	pop $1
	push $1
	call ft,setpivottype
	end method
	method classanfilter6
	call ft,unlink
	end method
	method classanfilter7
	cthis getname
	call ft,link
	end method
	method classanfilter8
	localstring $1
	pop $1
	push $1
	call ft,blend
	end method
	method classanfilter9
	localstring $1
	pop $1
	push $1
	call ft,mask
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l157:
	push $1
	push iile
	cmpjl
	cmp0
	je l158
	jmp l160
l159:
	add $1,1
	pop $1
	jmp l157
l160:
	push $1
	call _vs,get
	neg
	cmp0
	je l162
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
l162:
	jmp l159
l158:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _pos
	push 10
	call $1,getb
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l164
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l166
	spop $a
	push $1
	cthis copy
	jmp l165
l166:
	push "gmobjvec"
	cmpst
	jne l167
	spop $a
	push $1
	cthis copy
	jmp l165
l167:
	push "gmimgvec"
	cmpst
	jne l168
	spop $a
	push $1
	cthis copy
	jmp l165
l168:
	spop $a
	cthis free
	push $1
	cthis add
l165:
	jmp l163
l164:
	cthis free
	push $1
	cthis add
l163:
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	ret
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	ret
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l169:
	push $2
	cthis size
	cmpjl
	cmp0
	je l170
	jmp l172
l171:
	add $2,1
	pop $2
	jmp l169
l172:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l171
l170:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l173:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l174
	jmp l176
l175:
	add $2,1
	pop $2
	jmp l173
l176:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l175
l174:
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	ret
	end method
	method empty
	cthis size
	push 0
	cmpje
	ret
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	ret
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	ret
	end method
	method print
	call lsim,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	ret
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l178
	push $1
	call lsim,add
l178:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l179:
	push $2
	push $1
	cmpjne
	cmp0
	je l180
	push $2
	cthis addbegin
	pop $2
	jmp l179
l180:
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l182
	push $1
	cthis addbegin
	jmp l181
l182:
	push $2
	push $3
	cmpjae
	cmp0
	je l184
	push $1
	cthis add
	jmp l183
l184:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l185:
	push $4
	push $2
	cmpja
	cmp0
	je l186
	jmp l188
l187:
	sub $4,1
	pop $4
	jmp l185
l188:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l187
l186:
	push $2
	push $1
	cthis set
l183:
l181:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l189:
	push $1
	cthis contains
	cmp0
	je l190
	push $1
	cthis remove
	jmp l189
l190:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l191:
	push $2
	cthis size
	cmpjl
	cmp0
	je l192
	jmp l194
l193:
	add $2,1
	pop $2
	jmp l191
l194:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l196
	push $2
	cthis removeat
l196:
	jmp l193
l192:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	ret
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	ret
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l197:
	push $2
	push $3
	cmpjle
	cmp0
	je l198
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l197
l198:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l200
	push $1
	call $1,rand
	cthis get
	jmp l199
l200:
	push "null"
l199:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l202
	localint $3
	push $2
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l203:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l204
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l206
	push "null"
	ret
l206:
	jmp l203
l204:
	push $3
	cthis get
	ret
l202:
	push "null"
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l208
l209:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l210
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l209
l210:
l208:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method nplay
	localint $1
	pop $1
	push "nplay"
	push $1
	cthis eval1
	end method
	method splay
	localstring $1
	pop $1
	push "splay"
	push $1
	cthis eval1
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l211:
	push $5
	push 0
	cmpjae
	cmp0
	je l212
	jmp l214
l213:
	sub $5,1
	pop $5
	jmp l211
l214:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l216
	push $5
	call lsim,get
	ret
l216:
	jmp l213
l212:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l217:
	push $5
	push 0
	cmpjae
	cmp0
	je l218
	jmp l220
l219:
	sub $5,1
	pop $5
	jmp l217
l220:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l222
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l222:
	jmp l219
l218:
	push 0
	ret
	end method
	method ssetframe
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l223:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l224
	jmp l226
l225:
	add $3,1
	pop $3
	jmp l223
l226:
	push $3
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],setframe
	jmp l225
l224:
	end method
	method isetframe
	localint $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l227:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l228
	jmp l230
l229:
	add $2,1
	pop $2
	jmp l227
l230:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l229
l228:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l231:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l232
	jmp l234
l233:
	add $3,1
	pop $3
	jmp l231
l234:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l233
l232:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l235:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l236
	jmp l238
l237:
	add $4,1
	pop $4
	jmp l235
l238:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l237
l236:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l239:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l240
	jmp l242
l241:
	add $5,1
	pop $5
	jmp l239
l242:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l241
l240:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l243:
	push $3
	cthis size
	cmpjl
	cmp0
	je l244
	jmp l246
l245:
	add $3,1
	pop $3
	jmp l243
l246:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l248
	push $3
	ret
l248:
	jmp l245
l244:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l249:
	push $3
	cthis size
	cmpjl
	cmp0
	je l250
	jmp l252
l251:
	add $3,1
	pop $3
	jmp l249
l252:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l254
	push $3
	ret
l254:
	jmp l251
l250:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l255:
	push $2
	cthis size
	cmpjl
	cmp0
	je l256
	jmp l258
l257:
	add $2,1
	pop $2
	jmp l255
l258:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l257
l256:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l259:
	push $3
	cthis size
	cmpjl
	cmp0
	je l260
	jmp l262
l261:
	add $3,1
	pop $3
	jmp l259
l262:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l261
l260:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l263:
	push $4
	cthis size
	cmpjl
	cmp0
	je l264
	jmp l266
l265:
	add $4,1
	pop $4
	jmp l263
l266:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l265
l264:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l267:
	push $2
	cthis size
	cmpjl
	cmp0
	je l268
	jmp l270
l269:
	add $2,1
	pop $2
	jmp l267
l270:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l272
	push 0
	ret
l272:
	jmp l269
l268:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l274
	ret
l274:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l275:
	push $6
	cthis size
	cmpjl
	cmp0
	je l276
	jmp l278
l277:
	add $6,1
	pop $6
	jmp l275
l278:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l280
	push $6
	pop $3
	push $5
	pop $4
l280:
	jmp l277
l276:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l282
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l283
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l285
l283:
	push 0
	jmp l285
l284:
	push 1
l285:
	jmp l286
l281:
	push 0
	jmp l286
l282:
	push 1
l286:
	ret
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	ret
	end method
	method getposy
	push _iy
	ret
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	ret
	end method
	method getpy
	push _iy
	ret
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getz
	push _iz
	ret
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l288
	push _ix
	ret
l288:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l289:
	push $4
	push $1
	cmpjl
	cmp0
	je l290
	jmp l292
l291:
	add $4,1
	pop $4
	jmp l289
l292:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l294
	push $3
	pop $2
l294:
	jmp l291
l290:
	push $2
	ret
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l296
	push _iy
	ret
l296:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l297:
	push $4
	push $1
	cmpjl
	cmp0
	je l298
	jmp l300
l299:
	add $4,1
	pop $4
	jmp l297
l300:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l302
	push $3
	pop $2
l302:
	jmp l299
l298:
	push $2
	ret
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l304
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l304:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l305:
	push $3
	cthis size
	cmpjl
	cmp0
	je l306
	jmp l308
l307:
	add $3,1
	pop $3
	jmp l305
l308:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l307
l306:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l309:
	push $5
	push 0
	cmpjae
	cmp0
	je l310
	jmp l312
l311:
	sub $5,1
	pop $5
	jmp l309
l312:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l314
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l314:
	jmp l311
l310:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method getfound
	push _ifound
	ret
	end method
	method getsfound
	push _ifound
	cthis get
	ret
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "actionnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec0"
	cthis find_closest
	end method
	method gmimgvec0
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l316
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l315
l316:
	push $1
	pop $3
l315:
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l318
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l317
l318:
	push $1
	pop $3
l317:
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	end method
	end class

	class gmmaskvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,isin
	ret
	end method
	end class

	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	ret
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l320
	push $1
	cthis cbplay
	jmp l319
l320:
	cthis cgetactsnd
	push $1
	cmpjne
	cmp0
	je l322
	push $1
	cthis cbplay
l322:
l319:
	end method
	method cbplay
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l324
	push _csplay
	spushs
	push 1
	spop $a
	call [$a],stop
l324:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l326
	push $1
	spushs
	spop $a
	call [$a],play
l326:
	end method
	method cbplay2
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l328
	push _csplay
	spushs
	push 0
	spop $a
	call [$a],stop
l328:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l330
	push $1
	spushs
	spop $a
	call [$a],play
l330:
	end method
	method crplay
	localstring $1
	pop $1
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l332
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l334
l332:
	push 0
	jmp l334
l333:
	push 1
l334:
	cmp0
	je l335
	ret
l335:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l337
	push $1
	spushs
	spop $a
	call [$a],play
l337:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l339
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	jmp l341
l339:
	push 0
	jmp l341
l340:
	push 1
l341:
	cmp0
	je l342
	push $1
	spushs
	spop $a
	call [$a],play
l342:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	call $2,rand
	push 0
	cmpje
	cmp0
	je l344
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
l344:
	end method
	method cplayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "c"
	push $1
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $d
	cthis [$d]
	push $2
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l346
	push $3
	push "null"
	cmpjne
	jmp l348
l346:
	push 0
	jmp l348
l347:
	push 1
l348:
	cmp0
	je l349
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l349:
	end method
	method cactsndstop
	localint $1
	pop $1
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l351
	push _csplay
	spushs
	push $1
	spop $a
	call [$a],stop
l351:
	end method
	method cisplaying
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l353
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l352
l353:
	push 0
l352:
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	je l355
	push 0
	pop iile
	ret
l355:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l356:
	push $3
	push $2
	cmpjl
	cmp0
	je l357
	jmp l359
l358:
	add $3,1
	pop $3
	jmp l356
l359:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l358
l357:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	cmpjle
	cmp0
	je l361
	push 0
	pop iile
	ret
l361:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	cmpje
	cmp0
	je l363
	push iile
	call ilicz,rand
	pop ilicz
l363:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l364:
	push $3
	push iile
	cmpjl
	cmp0
	je l365
	jmp l367
l366:
	add $3,1
	pop $3
	jmp l364
l367:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l366
l365:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	cmpjne
	cmp0
	je l369
	push splay
	spushs
	push $1
	spop $a
	call [$a],stop
l369:
	end method
	method isplaying
	push splay
	push "null"
	cmpjne
	cmp0
	je l371
	push splay
	spushs
	spop $a
	call [$a],isplaying
	jmp l370
l371:
	push 0
l370:
	end method
	method randplay
	localint $1
	pop $1
	push $1
	call $1,rand
	push 0
	cmpje
	cmp0
	je l373
	cthis play
l373:
	end method
	method playid
	localint $1
	pop $1
	push $1
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	cthis play
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method reset
	push 0
	pop ilicz
	end method
	method rbgplay
	cthis isplaying
	neg
	cmp0
	je l375
	cthis bgplay
l375:
	end method
	method rplay
	cthis isplaying
	neg
	cmp0
	je l377
	cthis play
l377:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	spushs
	spop $a
	call [$a],play
	push itype
	push 0
	cmpje
	cmp0
	je l379
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l378
l379:
	push itype
	push 1
	cmpje
	cmp0
	je l381
	push iile
	call ilicz,rand
	pop ilicz
l381:
l378:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l382:
	push $2
	push iile
	cmpjl
	cmp0
	je l383
	jmp l385
l384:
	add $2,1
	pop $2
	jmp l382
l385:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setvol
	jmp l384
l383:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,_iconstid
	end method
	method bkg=
	localdef $1
	pop $1
	push ".pyz"
	call $1,contains
	cmp0
	je l387
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l386
l387:
	push "imgbkg"
	push $1
	push 0
	cthis newimg
l386:
	end method
	method bgr=
	localdef $1
	pop $1
	push "sndbgr"
	push $1
	cthis csndplayloop
	end method
	method path=
	localdef $1
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	end method
	method cycle=
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis cnewtimercyclefin
	end method
	method timer=
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	end method
	method img=
	localdef $1
	pop $1
	localstring $2
	push 4
	call $1,strsube
	pop $2
	push ".pyz"
	call $1,contains
	cmp0
	je l389
	push "an"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	push 0
	cthis newanima
	jmp l388
l389:
	push "img"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	push 0
	cthis newimg
l388:
	end method
	method list=
	localdef $1
	pop $1
	localdef $2
	pop $2
	push $1
	spushs
	spop $e
	new gmobjvec,[$e]
l390:
	push $2
	push A
	cmpjne
	cmp0
	je l391
	push $1
	spushs
	push $2
	spop $a
	call [$a],add
	pop $2
	jmp l390
l391:
	end method
	method debug=
	localdef $1
	pop $1
	push $1
	call engine,setdebugstate
	end method
	method sfx=
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
	push "L"
	call $1,contains
	cmp0
	je l393
	push "L"
	call $1,strremove
	push 1
	pop $2
l393:
	localdef $3
	push 0
	pop $3
	push "P"
	call $1,contains
	cmp0
	je l395
	push "P"
	call $1,strremove
	push 1
	pop $3
l395:
	localdef $4
	push 100
	pop $4
	push " "
	call $1,contains
	cmp0
	je l397
	push " "
	call $1,strgetfrom
	pop $4
	push " "
	call $1,strgetto
	pop $1
l397:
	localstring $5
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push "sfx/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsnd
	push $5
	spushs
	push $4
	spop $a
	call [$a],setvol
	push $2
	cmp0
	je l399
	push $5
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l399:
	push $3
	cmp0
	je l401
	push $5
	spushs
	spop $a
	call [$a],play
l401:
	end method
	method sfxs=
	push "sfx="
	cthis withlist
	end method
	method tickstart
	push "__timspeed"
	cthis hasvar
	neg
	cmp0
	je l403
	new TicksCounter,__timspeed
l403:
	call __timspeed,start
	end method
	method tickstop
	push "ticker: "
	call __timspeed,print
	end method
	method csetbkg
	localstring $1
	pop $1
	push "imgbkg"
	push $1
	push 0
	cthis newimg
	end method
	method cstdbkg
	push "bkg.png"
	cthis csetbkg
	end method
	method bkgpyz
	push "anbkg"
	push "bkg.pyz"
	push 0
	cthis newanima
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis csndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l405
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	push "imgkursor"
	pop $1
l405:
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call mouse,setcursor
	push $1
	call engine,stdbutcursor
	call bsms,setown
	end method
	method csavevar
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	call gameapi,getgamename
	push $1
	push $2
	call clsav,varsave
	end method
	method cloadvar
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	push $1
	push $2
	call clsav,varload
	end method
	method newconst
	localstring $1
	pop $1
	localstring $2
	push "const"
	push $1
	pop $b
	popax
	add $a,$b
	push _iconstid
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	add _iconstid,1
	pop _iconstid
	push $2
	ret
	end method
	method consttext
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $8
	push "text"
	cthis newconst
	pop $8
	localstring $9
	push "font"
	cthis newconst
	pop $9
	push $9
	spushs
	push sgmfontfile
	push $4
	spop $a
	call [$a],load
	push $8
	spushs
	push $9
	spop $a
	call [$a],setfont
	push $8
	spushs
	push $1
	spop $a
	call [$a],set
	push $8
	spushs
	push $5
	push $6
	push $7
	spop $a
	call [$a],createtxt
	push $8
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $8
	ret
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l406:
	push $2
	push $3
	cmpjle
	cmp0
	je l407
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l406
l407:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	spushs
	spop $e
	new classancounter,[$e]
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l408:
	push $6
	push $5
	cmpjl
	cmp0
	je l409
	jmp l411
l410:
	add $6,1
	pop $6
	jmp l408
l411:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l410
l409:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l412:
	push $7
	push $5
	cmpjl
	cmp0
	je l413
	jmp l415
l414:
	add $7,1
	pop $7
	jmp l412
l415:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l414
l413:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l416:
	push $7
	push $5
	cmpjl
	cmp0
	je l417
	jmp l419
l418:
	add $7,1
	pop $7
	jmp l416
l419:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l418
l417:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	spushs
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l420:
	push $3
	push $4
	cmpjl
	cmp0
	je l421
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	cmpjne
	cmp0
	je l423
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	cmpje
	cmp0
	jne l426
	push $12
	push "sfx"
	cmpje
	jmp l427
l425:
	push 0
	jmp l427
l426:
	push 1
l427:
	cmp0
	je l428
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	cmpje
	cmp0
	je l430
	push $14
	push "sfx/"
	push $13
	pop $b
	popax
	add $a,$b
	cthis newsnd
	jmp l429
l430:
	push $14
	push $13
	cthis newsnd
l429:
	push $7
	push $6
	cmpjl
	cmp0
	je l432
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l434
	push $14
	spushs
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l433
l434:
	push 0
	push 4
	call $12,gete
	push "play"
	cmpje
	cmp0
	je l436
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l435
l436:
	push $12
	push "vol"
	cmpje
	cmp0
	je l438
	push $14
	spushs
	push $13
	spop $a
	call [$a],setvol
l438:
l435:
l433:
l432:
	jmp l424
l428:
	push $12
	push "group"
	cmpje
	cmp0
	je l440
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	cmpjl
	cmp0
	je l442
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l444
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
l444:
	jmp l441
l442:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l441:
	jmp l439
l440:
	push $12
	push "bank"
	cmpje
	cmp0
	je l446
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	cmpjl
	cmp0
	je l448
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l450
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	spushs
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l449
l450:
	push $12
	push "vol"
	cmpje
	cmp0
	je l452
	push $14
	spushs
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
l452:
l449:
l448:
	jmp l445
l446:
	push $12
	push "method"
	cmpje
	cmp0
	je l454
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l455:
	push $8
	push $9
	cmpjle
	cmp0
	je l456
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l455
l456:
	jmp l453
l454:
	push $12
	push "singlebank"
	cmpje
	cmp0
	je l458
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l457
l458:
	push $12
	push "bgr"
	cmpje
	cmp0
	je l460
	push $14
	cthis csndbgr
	push $7
	push $6
	cmpjl
	cmp0
	je l462
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l464
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l464:
l462:
	jmp l459
l460:
	push $12
	push "music"
	cmpje
	cmp0
	je l466
	push $14
	cthis playmusic
	push $7
	push $6
	cmpjl
	cmp0
	je l468
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l470
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l470:
l468:
l466:
l459:
l457:
l453:
l445:
l439:
l424:
l423:
	add $3,1
	pop $3
	jmp l420
l421:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	method chideanimas
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push "hide"
	clparent classevalfun,_eval0
	end method
	method cshowanimas
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push "show"
	clparent classevalfun,_eval0
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l471:
	push $2
	push $3
	cmpjle
	cmp0
	je l472
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $5
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	cmpje
	cmp0
	je l474
	push $2
	ret
	jmp l473
l474:
	add $2,1
	pop $2
l473:
	jmp l471
l472:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	ret
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	cmpjae
	cmp0
	je l476
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l476:
	end method
	end class

	class classevalfun
	method init
	end method
	method _eval0
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
l477:
	push $2
	push $3
	cmpjle
	cmp0
	je l478
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	add $2,1
	pop $2
	jmp l477
l478:
	end method
	method _eval1
	localstring $1
	localint $2
	localint $3
	localstring $4
	localdef $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l479:
	push $2
	push $3
	cmpjle
	cmp0
	je l480
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	spushs
	push $5
	spop $d
	spop $a
	call [$a],[$d]
	add $2,1
	pop $2
	jmp l479
l480:
	end method
	method _eval2
	localstring $1
	localint $2
	localint $3
	localstring $4
	localdef $5
	localdef $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l481:
	push $2
	push $3
	cmpjle
	cmp0
	je l482
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	spushs
	push $5
	push $6
	spop $d
	spop $a
	call [$a],[$d]
	add $2,1
	pop $2
	jmp l481
l482:
	end method
	method eval0
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l484
	push $1
	push "null"
	cmpje
	cmp0
	je l486
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l485
l486:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l485:
l484:
	end method
	method eval1
	localstring $1
	localstring $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l488
	push $1
	push "null"
	cmpje
	cmp0
	je l490
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
	jmp l489
l490:
	push $1
	spushs
	push $2
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
l489:
l488:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis build2
	end method
	method build2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new anima,[$e]
	push $5
	spushs
	push $1
	spop $a
	call [$a],load
	push $5
	spushs
	push $2
	spop $a
	call [$a],setz
	localint $6
	push $5
	spushs
	spop $a
	call [$a],nofactions
	pop $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $9
	localstring $10
	localstring $11
	localstring $12
	localstring $13
	localint $14
	push 0
	pop $14
l491:
	push $14
	push $6
	cmpjl
	cmp0
	je l492
	jmp l494
l493:
	add $14,1
	pop $14
	jmp l491
l494:
	push "null"
	pop $10
	push "null"
	pop $11
	push "null"
	pop $12
	push $5
	spushs
	push $14
	spop $a
	call [$a],nofframes
	pop $7
	push 1
	pop $8
l495:
	push $8
	push $7
	cmpjle
	cmp0
	je l496
	jmp l498
l497:
	add $8,1
	pop $8
	jmp l495
l498:
	push san
	push $9
	pop $b
	popax
	add $a,$b
	pop $13
	push $8
	push 1
	cmpje
	cmp0
	je l500
	push $13
	pop $10
	jmp l499
l500:
	push $8
	push 2
	cmpje
	cmp0
	je l502
	push $13
	pop $11
	jmp l501
l502:
	push $8
	push 3
	cmpje
	cmp0
	je l504
	push $13
	pop $12
l504:
l501:
l499:
	push $5
	push $13
	clparent newvars,copyanima
	push $13
	spushs
	push $14
	push $8
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $9,1
	pop $9
	jmp l497
l496:
	push $4
	push "null"
	cmpjne
	cmp0
	je l506
	push $4
	spushs
	push $5
	spushs
	push $14
	spop $a
	call [$a],nameofaction
	spop $a
	call [$a],contains
	jmp l508
l506:
	push 0
	jmp l508
l507:
	push 1
l508:
	cmp0
	je l509
	push $10
	spushs
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	jmp l505
l509:
	push $10
	push $11
	push $12
	push $3
	cthis addbut
l505:
	jmp l493
l492:
	push $5
	spushs
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l511
	push sfxmon
	spushs
	spop $a
	call [$a],play
l511:
	push _sfunmovon
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpje
	cmp0
	je l513
	ret
l513:
	push $1
	spushs
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $4
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	spushs
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l514:
	push $5
	push iilebut
	cmpjl
	cmp0
	je l515
	jmp l517
l516:
	add $5,1
	pop $5
	jmp l514
l517:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l516
l515:
	end method
	method print
	localint $1
	push 0
	pop $1
l518:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l519
	jmp l521
l520:
	add $1,1
	pop $1
	jmp l518
l521:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l520
l519:
	end method
	method setrect
	localstring $1
	localint $2
	push 0
	pop $2
l522:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l523
	jmp l525
l524:
	add $2,1
	pop $2
	jmp l522
l525:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getimg
	pop $1
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	spop $a
	call [$a],setrect
	jmp l524
l523:
	end method
	method setflags
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l526:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l527
	jmp l529
l528:
	add $3,1
	pop $3
	jmp l526
l529:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setflags
	jmp l528
l527:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l531
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	jmp l530
l531:
	push "null"
l530:
	ret
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l532:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l533
	jmp l535
l534:
	add $2,1
	pop $2
	jmp l532
l535:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l534
l533:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	cmpja
	cmp0
	je l537
	push iilebut
	pop $2
l537:
	localint $3
	push 0
	pop $3
l538:
	push $3
	push $2
	cmpjl
	cmp0
	je l539
	jmp l541
l540:
	add $3,1
	pop $3
	jmp l538
l541:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l540
l539:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l543
	push $2
	spushs
	spop $a
	call [$a],getimg
	jmp l542
l543:
	push "null"
l542:
	ret
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	cmpjne
	cmp0
	je l545
	push $3
	spushs
	push $2
	spop $a
	call [$a],setmouse
l545:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l547
	ret
l547:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	spushs
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	spushs
	push _sfcl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	spushs
	push _sfrl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l549
	push sfxmon
	spushs
	spop $a
	call [$a],play
l549:
	push _sobmn
	spushs
	push _sfmn
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	spushs
	push _sfmf
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classsimplebutton
	method init
	new string,simgob
	push "null"
	pop simgob
	new gmimgvec,grbut
	end method
	method stdbuild
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push 0
	push 0
	push $3
	push 0
	cthis build
	end method
	method getimgfunc
	localstring $1
	pop $1
	push simgob
	push "null"
	cmpje
	cmp0
	je l551
	push 0
	jmp l550
l551:
	push simgob
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l550:
	end method
	method setbutpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grbut,setpos
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new button,but1
	cthis getname
	call but1,classsimplebutton0
	push "onclick"
	push "classsimplebutton1"
	call but1,addmethod
	push "onrel"
	push "classsimplebutton2"
	call but1,addmethod
	push "onmoveon"
	push "classsimplebutton3"
	call but1,addmethod
	push "onmoveoff"
	push "classsimplebutton4"
	call but1,addmethod
	push ".pyz"
	call $1,contains
	cmp0
	je l553
	new anima,anbut0
	push $1
	call anbut0,load
	push $3
	push $4
	call anbut0,setpos
	push $5
	call anbut0,setz
	push $6
	push 0
	call anbut0,setframe
	push "anbut0"
	pop simgob
	push simgob
	call grbut,add
	localstring $7
	push "anbut0"
	pop $7
	localstring $8
	push "null"
	pop $8
	localstring $9
	push "null"
	pop $9
	localint $10
	push $6
	call anbut0,nofframes
	pop $10
	push $10
	push 1
	cmpja
	cmp0
	je l555
	new anima,anbut1
	push "anbut0"
	call anbut1,copy
	push $6
	push 1
	call anbut1,setframe
	push "anbut1"
	pop $8
	push $8
	call grbut,add
l555:
	push $10
	push 2
	cmpja
	cmp0
	je l557
	new anima,anbut2
	push "anbut0"
	call anbut2,copy
	push $6
	push 2
	call anbut2,setframe
	push "anbut2"
	pop $8
	push $8
	call grbut,add
l557:
	push $7
	push $8
	push $9
	call but1,setan
	jmp l552
l553:
	new img,imgbut
	push "imgbut"
	pop simgob
	push simgob
	call grbut,add
	push $1
	call imgbut,load
	push $3
	push $4
	call imgbut,setpos
	push $5
	call imgbut,setz
	push "imgbut"
	push "null"
	push "null"
	call but1,set
l552:
	push $2
	call but1,setmouse
	end method
	method classsimplebutton0
	localstring $1
	pop $1
	new string,sbut
	push $1
	pop sbut
	end method
	method classsimplebutton1
	push sbut
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton2
	push sbut
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton3
	push sbut
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton4
	push sbut
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l558:
	push $4
	push $3
	cmpjl
	cmp0
	je l559
	jmp l561
l560:
	add $4,1
	pop $4
	jmp l558
l561:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l560
l559:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	cmpje
	cmp0
	je l563
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l562
l563:
	push $5
	spushs
	push $2
	spop $a
	call [$a],_cbuildbutname
l562:
	push $4
	cmp0
	je l565
	push $5
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	spushs
	spop $a
	call [$a],hide
l565:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l567
	push $1
	push "null"
	cmpje
	cmp0
	je l569
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l568
l569:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l568:
l567:
	end method
	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method _stdsndloop
	cthis play
	end method
	method __std_finish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	ret
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	ret
	end method
	method strgetto
	localstring $1
	pop $1
	push 0
	push $1
	cthis find
	cthis getb
	ret
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	ret
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	ret
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	popax
	mov $a,[$a]
	psax
	pop $3
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	push $3
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l571
	push 0
	jmp l570
l571:
	push 100
	call $1,rand
	push $1
	cmpjle
l570:
	end method
	method between
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l573
	push $1
	jmp l572
l573:
	push $2
	push $3
	cmpja
	cmp0
	je l575
	push $3
	jmp l574
l575:
	push $2
l574:
l572:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l577
	push $1
	jmp l576
l577:
	push $2
l576:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l579
	push $1
	jmp l578
l579:
	push $2
l578:
	end method
	method anresizemets
	cthis getname
	clparent anima_pack,resizemethods
	end method
	method anfirstnontr
	cthis getname
	clparent classansearcher,firstnotrx1y
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	ret
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objplayloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	cthis play
	end method
	method anplayfin
	localint $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	ret
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l581
	localint $2
	push 0
	pop $2
l582:
	push $2
	push $1
	cmpjl
	cmp0
	je l583
	jmp l585
l584:
	add $2,1
	pop $2
	jmp l582
l585:
	push $2
	cthis add
	jmp l584
l583:
l581:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l586:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l587
	jmp l589
l588:
	add $2,1
	pop $2
	jmp l586
l589:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l588
l587:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l591
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l591:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l593
	sub $2,1
	pop $2
	jmp l592
l593:
	push $2
	push 0
	cmpje
	cmp0
	je l595
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l595:
l592:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l596
	push $1
	cthis size
	cmpjl
	jmp l598
l596:
	push 0
	jmp l598
l597:
	push 1
l598:
	cmp0
	je l600
	push $1
	cthis get
	jmp l599
l600:
	push "null"
l599:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l602
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l601
l602:
	push "null"
l601:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l603:
	cthis size
	push $1
	cmpja
	cmp0
	je l604
	cthis vecpop
	popax
	jmp l603
l604:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	ret
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l606
	ret
l606:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l607:
	push $8
	push $1
	cmpjl
	cmp0
	je l608
	jmp l610
l609:
	add $8,1
	pop $8
	jmp l607
l610:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l611:
	push $9
	push $1
	cmpjl
	cmp0
	je l612
	jmp l614
l613:
	add $9,1
	pop $9
	jmp l611
l614:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l616
	push $6
	pop $5
	push $9
	pop $7
l616:
	jmp l613
l612:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l609
l608:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l617:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l618
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l617
l618:
	call $1,length
	push 0
	cmpja
	cmp0
	je l620
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l620:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l621:
	push $2
	push $1
	cmpjl
	cmp0
	je l622
	jmp l624
l623:
	add $2,1
	pop $2
	jmp l621
l624:
	push 0
	cthis removeat
	jmp l623
l622:
	end method
	method vecremovefrom
	localint $1
	pop $1
l625:
	push $1
	cthis size
	cmpjl
	cmp0
	je l626
	push $1
	cthis removeat
	jmp l625
l626:
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l629
	cthis size
	push 0
	cmpje
	jmp l630
l628:
	push 0
	jmp l630
l629:
	push 1
l630:
	cmp0
	je l631
	ret
l631:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l633
	localint $4
	push $1
	pop $4
l634:
	push $4
	push $2
	cmpja
	cmp0
	je l635
	jmp l637
l636:
	sub $4,1
	pop $4
	jmp l634
l637:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l636
l635:
	jmp l632
l633:
	push $1
	push $2
	cmpjl
	cmp0
	je l639
	localint $4
	push $1
	pop $4
l640:
	push $4
	push $2
	cmpjl
	cmp0
	je l641
	jmp l643
l642:
	add $4,1
	pop $4
	jmp l640
l643:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l642
l641:
l639:
l632:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l645
	push $2
	push 0
	cthis vecposfromto
	jmp l644
l645:
	push $1
	cthis addbegin
l644:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l647
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l646
l647:
	push $1
	cthis addbegin
l646:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l649
	push $3
	push $2
	cthis set
l649:
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l651
	ret
l651:
	sub $1,1
	pop $1
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l652:
	push $2
	push A
	cmpjne
	cmp0
	je l653
	jmp l655
l654:
	jmp l652
l655:
	push $4
	push 0
	cmpje
	cmp0
	je l657
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l657:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l659
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l658
l659:
	push 0
l658:
	pop $4
	jmp l654
l653:
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l661
l662:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l663
	cthis dbremovelast
	jmp l662
l663:
	jmp l660
l661:
	cthis free
l660:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l665
	push $3
	push 0
	cmpjae
	jmp l667
l665:
	push 0
	jmp l667
l666:
	push 1
l667:
	cmp0
	je l668
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l669:
	push $3
	push $5
	cmpjl
	cmp0
	je l670
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l669
l670:
l668:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l672
	push $1
	push $2
	cthis get
	jmp l671
l672:
	push "null"
l671:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis findbyrow
	push $2
	cthis get
	ret
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l673:
	push $2
	push 0
	cmpjae
	cmp0
	je l674
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l676
	push $2
	ret
l676:
	sub $2,1
	pop $2
	jmp l673
l674:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	ret
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l678
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l678:
	push 0
	ret
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l680
	localint $3
	push 0
	pop $3
l681:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l682
	jmp l684
l683:
	add $3,1
	pop $3
	jmp l681
l684:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l686
	push $3
	ret
l686:
	jmp l683
l682:
l680:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l687:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l688
	jmp l690
l689:
	add $3,1
	pop $3
	jmp l687
l690:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l692
	push $3
	ret
l692:
	jmp l689
l688:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	ret
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	ret
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	ret
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l694
	push 1
	popax
	sub 0,$a
	ret
l694:
	localint $3
	push $1
	call $2,rand
	pop $3
l695:
	push $3
	push $2
	cmpje
	cmp0
	je l696
	jmp l698
l697:
	push $1
	call $2,rand
	pop $3
	jmp l695
l698:
	jmp l697
l696:
	push $3
	ret
	end method
	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push 800
	push 600
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class TicksCounter
	method init
	new int,istart
	end method
	method start
	call engine,getticks
	pop istart
	end method
	method stop
	call engine,getticks
	push istart
	pop $b
	popax
	sub $a,$b
	pop istart
	end method
	method get
	push istart
	ret
	end method
	method stopget
	cthis stop
	cthis get
	ret
	end method
	method print
	localstring $1
	pop $1
	push $1
	push " delay: "
	pop $b
	popax
	add $a,$b
	cthis stopget
	pop $b
	popax
	add $a,$b
	push " ms"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method put
	push ""
	cthis print
	end method
	end class

	class classquickdialog
	method init
	new db,dbl
	new int,irow
	new int,icol
	new string,_sdialog
	cthis getname
	pop _sdialog
	new int,_bloading
	push 0
	pop _bloading
	new classsound,clsnd
	new string,_sgame
	call gameapi,getgamename
	pop _sgame
	new string,_spref
	cthis getname
	pop _spref
	new string,_sprevdialog
	end method
	method load
	localstring $1
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,loadscript
	push 1
	pop _bloading
	push 0
	pop irow
l699:
	push irow
	call dbl,getrowsno
	cmpjl
	cmp0
	je l700
	jmp l702
l701:
	add irow,1
	pop irow
	jmp l699
l702:
	push 0
	pop icol
l703:
	cthis _nextdial
	cmp0
	je l704
	jmp l703
l704:
	jmp l701
l700:
	push 0
	pop _bloading
	push 0
	pop irow
	push 0
	pop icol
	end method
	method playlast
	push irow
	push icol
	cthis _play
	popax
	end method
	method play
	localstring $1
	pop $1
	push $1
	call dbl,findbyrow
	pop irow
	push irow
	push 0
	cmpjae
	cmp0
	je l706
	cthis _callstartdial
l706:
	cthis getdialog
	pop _sprevdialog
	push irow
	push 1
	cthis _play
	popax
	end method
	method getprevdialog
	push _sprevdialog
	ret
	end method
	method getdialog
	push irow
	push 0
	call dbl,get
	ret
	end method
	method _play
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop irow
	push $2
	pop icol
	push irow
	push 0
	cmpjl
	cmp0
	jne l709
	push irow
	call dbl,getrowsno
	cmpjae
	jmp l710
l708:
	push 0
	jmp l710
l709:
	push 1
l710:
	cmp0
	je l711
	push 0
	ret
l711:
	push icol
	push irow
	call dbl,getcolsno
	cmpjae
	cmp0
	je l713
	push _bloading
	neg
	cmp0
	je l715
	cthis _callstopdial
l715:
	push 0
	ret
l713:
	localstring $3
	push irow
	push icol
	call dbl,get
	pop $3
	push $3
	push "an:"
	cmpje
	cmp0
	je l717
	jmp l716
l717:
	push _bloading
	cmp0
	je l719
	push _spref
	push $3
	pop $b
	popax
	add $a,$b
	call engine,varexist
	neg
	cmp0
	je l721
	push _sgame
	spushs
	push _spref
	push $3
	pop $b
	popax
	add $a,$b
	push $3
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],newsndfree
	push _spref
	push $3
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push "onstart"
	push "classquickdialog0"
	spop $a
	call [$a],addmethod
	push $3
	spushs
	push "onfinish"
	push "classquickdialog1"
	spop $a
	call [$a],addmethod
	push $3
	spushs
	push "_buildvars"
	push "classquickdialog2"
	spop $a
	call [$a],addmethod
	push $3
	spushs
	cthis getname
	spop $a
	call [$a],_buildvars
l721:
	jmp l718
l719:
	push _spref
	push $3
	pop $b
	popax
	add $a,$b
	call clsnd,cbplay
l718:
l716:
	push 1
	ret
	end method
	method classquickdialog0
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classquickdialog1
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sdialog
	spushs
	spop $a
	call [$a],_nextdial
	popax
	end method
	method classquickdialog2
	localstring $1
	pop $1
	new string,_sdialog
	push $1
	pop _sdialog
	end method
	method _nextdial
	push irow
	push icol
	push 1
	pop $b
	popax
	add $a,$b
	cthis _play
	ret
	end method
	method _cqsndfinish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sdialog
	spushs
	spop $a
	call [$a],_nextdial
	popax
	end method
	method _callstopdial
	push _spref
	push irow
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _callstartdial
	push _spref
	push irow
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stop
	localint $1
	pop $1
	push $1
	call clsnd,cactsndstop
	end method
	method isplaying
	call clsnd,cisplaying
	ret
	end method
	method stopdial
	localint $1
	pop $1
	push 0
	cthis stop
	push $1
	cmp0
	je l723
	cthis _callstopdial
l723:
	end method
	end class

	class classquickanloader
	method init
	new db,dbl
	new string,_sgame
	call gameapi,getgamename
	pop _sgame
	end method
	method load
	localstring $1
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,loadscript
	localint $2
	localstring $3
	localstring $4
	localstring $5
	localint $6
	localint $7
	localint $8
	push 0
	pop $8
l724:
	push $8
	call dbl,getrowsno
	cmpjl
	cmp0
	je l725
	jmp l727
l726:
	add $8,1
	pop $8
	jmp l724
l727:
	push 0
	pop $2
	push $8
	push $2
	call dbl,get
	pop $3
	add $2,1
	pop $2
	push $3
	push "bkg:"
	cmpje
	cmp0
	je l729
	push $8
	push $2
	call dbl,get
	pop $3
	add $2,1
	pop $2
	push _sgame
	spushs
	push "imgbkg"
	push $3
	push 0
	spop $a
	call [$a],newimg
	push "imgbkg"
	push $8
	push $2
	cthis analizeimgopts
	jmp l728
l729:
	push $3
	push "img:"
	cmpje
	cmp0
	je l731
	push $8
	push $2
	call dbl,get
	pop $3
	add $2,1
	pop $2
	push $8
	push $2
	call dbl,get
	pop $4
	add $2,1
	pop $2
	push _sgame
	spushs
	push $3
	push $4
	push 0
	spop $a
	call [$a],newimg
	push $3
	push $8
	push $2
	cthis analizeimgopts
	jmp l730
l731:
	push $3
	push "an:"
	cmpje
	cmp0
	je l733
	push $8
	push $2
	call dbl,get
	pop $3
	add $2,1
	pop $2
	push $8
	push $2
	call dbl,get
	pop $4
	add $2,1
	pop $2
	push ".pyz"
	call $4,contains
	cmp0
	je l735
	push _sgame
	spushs
	push $3
	push $4
	push 0
	spop $a
	call [$a],newanima
	jmp l734
l735:
	push _sgame
	spushs
	push $4
	push $3
	spop $a
	call [$a],copyanima
l734:
	push $3
	push $8
	push $2
	cthis analizeimgopts
	jmp l732
l733:
	push $3
	push "anaac:"
	cmpje
	cmp0
	jne l738
	push $3
	push "anfac:"
	cmpje
	jmp l739
l737:
	push 0
	jmp l739
l738:
	push 1
l739:
	cmp0
	je l740
	push $3
	pop $5
	push $8
	push $2
	call dbl,get
	pop $3
	add $2,1
	pop $2
	push $8
	push $2
	call dbl,get
	pop $4
	add $2,1
	pop $2
	push ".pyz"
	call $4,contains
	cmp0
	je l742
	push _sgame
	spushs
	push "_"
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push 0
	spop $a
	call [$a],newanima
	push "_"
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	spop $a
	call [$a],hide
l742:
	push _sgame
	spushs
	push "_buildgroup"
	push "_buildgroup"
	spop $a
	call [$a],addmethod
	push _sgame
	spushs
	push $3
	spop $a
	call [$a],_buildgroup
	push $5
	push "anfac:"
	cmpje
	cmp0
	je l744
	push $8
	push $2
	call dbl,get
	pop $7
	add $2,1
	pop $2
	push _sgame
	spushs
	push $4
	push $3
	push $7
	push $3
	spop $a
	call [$a],newanframesgr
	pop $6
	jmp l743
l744:
	push _sgame
	spushs
	push $4
	push $3
	push $3
	spop $a
	call [$a],newanactionsgr
	pop $6
l743:
	push $3
	push $8
	push $2
	cthis analizeimgopts
	jmp l736
l740:
	push $3
	push "path:"
	cmpje
	cmp0
	je l746
	push $8
	push $2
	call dbl,get
	pop $3
	add $2,1
	pop $2
	push _sgame
	spushs
	push $3
	spop $a
	call [$a],setgraphpath
	jmp l745
l746:
	push $3
	push "snd:"
	cmpje
	cmp0
	je l748
	push $8
	push $2
	call dbl,get
	pop $3
	add $2,1
	pop $2
	push _sgame
	spushs
	push "snd"
	push $3
	pop $b
	popax
	add $a,$b
	push $3
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],newsnd
	push "snd"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
l748:
l745:
l736:
l732:
l730:
l728:
	jmp l726
l725:
	end method
	method _buildgroup
	localstring $1
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	end method
	method _cqloadstdframe
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method analizeimgopts
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	localstring $5
	localint $6
	localint $7
l749:
	push $3
	push $2
	call dbl,getcolsno
	cmpjl
	cmp0
	je l750
	push $2
	push $3
	call dbl,get
	pop $4
	add $3,1
	pop $3
	push $4
	spushs
	push "-z"
	cmpst
	jne l752
	spop $a
	push $1
	spushs
	push $2
	push $3
	call dbl,get
	spop $a
	call [$a],setz
	add $3,1
	pop $3
	jmp l751
l752:
	push "-pos"
	cmpst
	jne l753
	spop $a
	push $2
	push $3
	call dbl,get
	pop $6
	add $3,1
	pop $3
	push $2
	push $3
	call dbl,get
	pop $7
	add $3,1
	pop $3
	push $1
	spushs
	push $6
	push $7
	spop $a
	call [$a],setpos
	jmp l751
l753:
	push "-hide"
	cmpst
	jne l754
	spop $a
	push $1
	spushs
	spop $a
	call [$a],hide
	jmp l751
l754:
	push "-show"
	cmpst
	jne l755
	spop $a
	push $1
	spushs
	spop $a
	call [$a],show
	jmp l751
l755:
	push "-play"
	cmpst
	jne l756
	spop $a
	push $2
	push $3
	call dbl,get
	pop $4
	add $3,1
	pop $3
	push $1
	spushs
	push $4
	spop $a
	call [$a],play
	jmp l751
l756:
	push "-nplay"
	cmpst
	jne l757
	spop $a
	push $2
	push $3
	call dbl,get
	pop $6
	add $3,1
	pop $3
	push $1
	spushs
	push $6
	spop $a
	call [$a],play
	jmp l751
l757:
	push "-lplay"
	cmpst
	jne l758
	spop $a
	push $2
	push $3
	call dbl,get
	pop $4
	add $3,1
	pop $3
	push $1
	spushs
	push $4
	spop $a
	call [$a],anloopsplay
	jmp l751
l758:
	push "-frame"
	cmpst
	jne l759
	spop $a
	push $2
	push $3
	call dbl,get
	pop $4
	add $3,1
	pop $3
	push $2
	push $3
	call dbl,get
	pop $6
	add $3,1
	pop $3
	push $1
	spushs
	push $4
	push $6
	spop $a
	call [$a],setframe
	jmp l751
l759:
	push "-putgr"
	cmpst
	jne l760
	spop $a
	push $1
	spushs
	spop $a
	call [$a],anputgr
	jmp l751
l760:
	push "-mfin"
	cmpst
	jne l761
	spop $a
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	jmp l751
l761:
	push "-mfr"
	cmpst
	jne l762
	spop $a
	push $1
	spushs
	push "onendframe"
	push "_cqloadstdframe"
	spop $a
	call [$a],addmethod
	jmp l751
l762:
	spop $a
l751:
	jmp l749
l750:
	end method
	end class

	class StringChecker
	method init
	end method
	method isdigit
	localstring $1
	pop $1
	call $1,to_i
	push 0
	cmpjne
	cmp0
	jne l764
	push 0
	push 1
	call $1,getb
	push "0"
	cmpje
	jmp l765
l763:
	push 0
	jmp l765
l764:
	push 1
l765:
	ret
	end method
	method getint
	localstring $1
	pop $1
	call $1,to_i
	ret
	end method
	method getreal
	localstring $1
	pop $1
	call $1,to_r
	ret
	end method
	method isreal
	localstring $1
	pop $1
	push $1
	cthis isdigit
	cmp0
	je l766
	push "."
	call $1,contains
	jmp l768
l766:
	push 0
	jmp l768
l767:
	push 1
l768:
	ret
	end method
	method isstring
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "\""
	cmpje
	ret
	end method
	method getstring
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	ret
	end method
	end class

	class Script
	method init
	localstring $1
	pop $1
	new db,__dbcode
	new string,__sdb
	new int,__irow
	new int,__icol
	new string,__sreads
	new vector,__vec
	push "string"
	call __vec,type
	new string,__sarg
	new int,__iarg
	new real,__rarg
	new StringChecker,__csc
	push "int"
	new map2,__mp
	push $1
	cthis load
	end method
	method load
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l770
	ret
l770:
	push "."
	call $1,contains
	cmp0
	je l772
	push "__dbcode"
	pop __sdb
	push $1
	call __dbcode,loadbeh
	jmp l771
l772:
	push $1
	pop __sdb
l771:
	call __mp,free
	localint $2
	push 0
	pop $2
l773:
	push $2
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l774
	jmp l776
l775:
	add $2,1
	pop $2
	jmp l773
l776:
	push __sdb
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push "func"
	cmpje
	cmp0
	je l778
	push __sdb
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $2
	call __mp,add
l778:
	jmp l775
l774:
	push "init"
	cthis call
	end method
	method get
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method isvar
	localstring $1
	pop $1
	push "$"
	call $1,contains
	ret
	end method
	method getvar
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	neg
	cmp0
	je l780
	push $1
	spushs
	spop $e
	new def,[$e]
l780:
	push $1
	ret
	end method
	method isfunc
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l781
	push $1
	call __csc,isreal
	neg
	jmp l783
l781:
	push 0
	jmp l783
l782:
	push 1
l783:
	ret
	end method
	method getfunc
	localstring $1
	pop $1
	call __vec,free
	push "."
	call $1,strgetto
	call __vec,add
	push "."
	call $1,strgetfrom
	call __vec,add
	end method
	method _get
	add __icol,1
	pop __icol
	push __sdb
	spushs
	push __irow
	push __icol
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	ret
	end method
	method isnext
	push __icol
	push __sdb
	spushs
	push __irow
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l785
	push __sdb
	spushs
	push __irow
	push __icol
	spop $a
	call [$a],get
	pop __sreads
	push 1
	ret
l785:
	push 0
	ret
	end method
	method perror
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cmp0
	je l787
	push "error: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
l787:
	end method
	method interpcall
	localstring $1
	pop $1
	push $1
	cthis getfunc
	localstring $2
	push 0
	call __vec,get
	pop $2
	push 0
	push 1
	call $2,getb
	push "*"
	cmpje
	cmp0
	je l789
	push 1
	call $2,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l789:
	localstring $3
	push 1
	call __vec,get
	pop $3
	push 0
	push 1
	call $3,getb
	push "*"
	cmpje
	cmp0
	je l791
	push 1
	call $3,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l791:
	call __vec,free
	add __icol,1
	pop __icol
	localstring $4
	cthis _get
	pop $4
l792:
	push $4
	push ")"
	cmpjne
	cmp0
	je l793
	push $4
	cthis getexpr
	cthis _get
	pop $4
	jmp l792
l793:
	push $2
	push "this"
	cmpje
	cmp0
	je l795
	push "null"
	pop $2
l795:
	push $2
	push $3
	cthis callfun
	end method
	method getvname
	localstring $1
	pop $1
	push $1
	cthis isvar
	cmp0
	je l797
	push $1
	cthis getvar
	pop $1
	jmp l796
l797:
	push $1
	call __csc,isdigit
	cmp0
	je l799
	push $1
	pop __iarg
	push "__iarg"
	pop $1
	jmp l798
l799:
	push $1
	call __csc,isstring
	cmp0
	je l801
	push $1
	call __csc,getstring
	pop __sarg
	push "__sarg"
	pop $1
	jmp l800
l801:
	push $1
	call __csc,isreal
	cmp0
	je l803
	call $1,to_r
	pop __rarg
	push "__rarg"
	pop $1
l803:
l800:
l798:
l796:
	push $1
	ret
	end method
	method isscriptfun
	localstring $1
	pop $1
	push "->"
	call $1,contains
	ret
	end method
	method getscriptfun
	localstring $1
	pop $1
	push 2
	call $1,strsubb
	ret
	end method
	method getexpr
	localstring $1
	pop $1
	push $1
	call __csc,isstring
	cmp0
	je l805
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
	jmp l804
l805:
	push $1
	cthis isfunc
	cmp0
	je l807
	push $1
	cthis interpcall
	jmp l806
l807:
	push $1
	cthis isscriptfun
	cmp0
	je l809
	localint $2
	push __irow
	pop $2
	localint $3
	push __icol
	pop $3
	push $1
	cthis getscriptfun
	cthis call
	push $2
	pop __irow
	push $3
	pop __icol
	jmp l808
l809:
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
l808:
l806:
l804:
	end method
	method cmp
	localint $1
	push 0
	pop $1
	localdef $2
	cthis _get
	cthis getexpr
	pop $2
	localstring $3
	cthis _get
	pop $3
	localdef $4
	cthis _get
	cthis getexpr
	pop $4
	push $3
	spushs
	push "=="
	cmpst
	jne l811
	spop $a
	push $2
	push $4
	cmpje
	pop $1
	jmp l810
l811:
	push "!="
	cmpst
	jne l812
	spop $a
	push $2
	push $4
	cmpjne
	pop $1
	jmp l810
l812:
	push "<"
	cmpst
	jne l813
	spop $a
	push $2
	push $4
	cmpjl
	pop $1
	jmp l810
l813:
	push ">"
	cmpst
	jne l814
	spop $a
	push $2
	push $4
	cmpja
	pop $1
	jmp l810
l814:
	push "<="
	cmpst
	jne l815
	spop $a
	push $2
	push $4
	cmpjle
	pop $1
	jmp l810
l815:
	push ">="
	cmpst
	jne l816
	spop $a
	push $2
	push $4
	cmpjae
	pop $1
	jmp l810
l816:
	spop $a
l810:
	cthis _get
	pop $3
	push $3
	push "||"
	cmpje
	cmp0
	je l818
	push $1
	cmp0
	jne l820
	cthis cmp
	jmp l821
l819:
	push 0
	jmp l821
l820:
	push 1
l821:
	ret
	jmp l817
l818:
	push $3
	push "&&"
	cmpje
	cmp0
	je l823
	push $1
	cmp0
	je l824
	cthis cmp
	jmp l826
l824:
	push 0
	jmp l826
l825:
	push 1
l826:
	ret
	jmp l822
l823:
	push $1
	ret
l822:
l817:
	end method
	method call
	localstring $1
	pop $1
	push $1
	call __mp,contains
	neg
	cmp0
	je l828
	ret
l828:
	push $1
	call __mp,get
	pop __irow
	add __irow,1
	pop __irow
	push 0
	pop __icol
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	localint $12
	localint $13
l829:
	push $2
	cmp0
	je l830
	push 0
	pop __icol
	cthis _get
	pop $8
	push $8
	spushs
	push "new"
	cmpst
	jne l832
	spop $a
	cthis _get
	pop $8
	cthis _get
	pop $9
	push 1
	call $9,strsubb
	pop $9
	cthis isnext
	cmp0
	je l834
	push __sreads
	push "["
	cmpje
	cmp0
	je l836
	add __icol,1
	pop __icol
	cthis _get
	pop $11
	push 0
	pop $12
l837:
	push $12
	push $11
	cmpjl
	cmp0
	je l838
	jmp l840
l839:
	add $12,1
	pop $12
	jmp l837
l840:
	push $8
	spushs
	push $9
	push $12
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	jmp l839
l838:
	jmp l835
l836:
	add __icol,1
	pop __icol
l841:
	cthis isnext
	cmp0
	je l842
	push __sreads
	push ")"
	cmpjne
	jmp l844
l842:
	push 0
	jmp l844
l843:
	push 1
l844:
	cmp0
	je l845
	cthis _get
	cthis getexpr
	jmp l841
l845:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l835:
	jmp l833
l834:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l833:
	add __irow,1
	pop __irow
	jmp l831
l832:
	push "delete"
	cmpst
	jne l846
	spop $a
	cthis get
	cthis getvar
	spushs
	spop $d
	delete [$d]
	jmp l831
l846:
	push $8
	push "if"
	cmpje
	cmp0
	jne l848
	push $6
	cmp0
	jne l848
	push $5
	jmp l849
l847:
	push 0
	jmp l849
l848:
	push 1
l849:
	cmp0
	je l851
	push $8
	jmp l850
l851:
	push ""
l850:
	cmpst
	jne l852
	spop $a
	add __icol,1
	pop __icol
	cthis cmp
	pop $4
	push $8
	push "if"
	cmpje
	cmp0
	je l854
	push 1
	pop $3
l854:
	push 0
	pop $6
	push 0
	pop $5
	add __irow,1
	pop __irow
	push $4
	neg
	cmp0
	je l856
	push 1
	pop $12
l857:
	push $12
	cmp0
	je l858
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	pop $8
	push $8
	push "else"
	cmpje
	cmp0
	jne l861
	push $8
	push "elif"
	cmpje
	cmp0
	jne l861
	push $8
	push "fi"
	cmpje
	cmp0
	jne l861
	push $8
	push "done"
	cmpje
	jmp l862
l860:
	push 0
	jmp l862
l861:
	push 1
l862:
	cmp0
	je l863
	push 0
	pop $12
	jmp l859
l863:
	add __irow,1
	pop __irow
l859:
	jmp l857
l858:
l856:
	jmp l831
l852:
	push "else"
	cmpst
	jne l864
	spop $a
	push $3
	neg
	push "else without if"
	cthis perror
	add __irow,1
	pop __irow
	push $4
	cmp0
	je l866
l867:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l868
	add __irow,1
	pop __irow
	jmp l867
l868:
l866:
	jmp l831
l864:
	push "fi"
	cmpst
	jne l869
	spop $a
	push $3
	neg
	push "fi without if"
	cthis perror
	push 0
	pop $3
	push 0
	pop $4
	push 0
	pop $6
	add __irow,1
	pop __irow
	jmp l831
l869:
	push "elif"
	cmpst
	jne l870
	spop $a
	push $4
	cmp0
	je l872
	add __irow,1
	pop __irow
l873:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l874
	add __irow,1
	pop __irow
	jmp l873
l874:
	jmp l871
l872:
	push 1
	pop $6
l871:
	jmp l831
l870:
	push "end"
	cmpst
	jne l875
	spop $a
	push 0
	pop $2
	jmp l831
l875:
	push "while"
	cmpst
	jne l876
	spop $a
	push __irow
	pop $7
	push 1
	pop $5
	jmp l831
l876:
	push "done"
	cmpst
	jne l877
	spop $a
	push $4
	cmp0
	je l879
	push $7
	pop __irow
	jmp l878
l879:
	add __irow,1
	pop __irow
l878:
	jmp l831
l877:
	push "print"
	cmpst
	jne l880
	spop $a
	push ""
	pop $8
l881:
	cthis isnext
	cmp0
	je l882
	cthis _get
	cthis getexpr
	popax
	add $8,$a
	pop $8
	jmp l881
l882:
	push $8
	call engine,print
	add __irow,1
	pop __irow
	jmp l831
l880:
	push "return"
	cmpst
	jne l883
	spop $a
	cthis isnext
	cmp0
	je l885
	push __sreads
	cthis getexpr
l885:
	ret
	jmp l831
l883:
	spop $a
	push "$"
	call $8,contains
	cmp0
	je l887
	push $8
	cthis getvar
	pop $8
	add __icol,1
	pop __icol
	push $8
	spushs
	cthis _get
	cthis getexpr
	spop $b
	popax
	mov [$b],$a
l888:
	cthis isnext
	cmp0
	je l889
	add __icol,1
	pop __icol
	localdef $14
	cthis _get
	cthis getexpr
	pop $14
	push __sreads
	spushs
	push "+"
	cmpst
	jne l891
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	add [$b],$a
	pop [$b]
	jmp l890
l891:
	push "-"
	cmpst
	jne l892
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	sub [$b],$a
	pop [$b]
	jmp l890
l892:
	push "*"
	cmpst
	jne l893
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	mul [$b],$a
	pop [$b]
	jmp l890
l893:
	push "/"
	cmpst
	jne l894
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$a
	jmp l890
l894:
	push "%"
	cmpst
	jne l895
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$d
	jmp l890
l895:
	spop $a
l890:
	jmp l888
l889:
	jmp l886
l887:
	push $8
	cthis getexpr
l886:
	add __irow,1
	pop __irow
l831:
	push __irow
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l897
	push 1
	push "function "
	push $1
	pop $b
	popax
	add $a,$b
	push " not finished!"
	pop $b
	popax
	add $a,$b
	cthis perror
	push 0
	pop $2
l897:
	jmp l829
l830:
	end method
	end class

	module advmouse
	method init
	new anima,anmsc
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	call anmsc,hide
	end method
	method set
	localstring $1
	pop $1
	call anmsc,show
	push $1
	push 0
	call anmsc,setframe
	push "anmsc"
	call mouse,setcursor
	call anmsc,hide
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	ret
	end method
	end module

	class classadvobject
	method init
	cthis addasadvobject
	end method
	method addasadvobject
	localstring $1
	cthis getname
	pop $1
	push $1
	call grmsmove,add
	push $1
	call grmslrel,add
	push $1
	call grmslclick,add
	end method
	method removefromadvobjs
	localstring $1
	cthis getname
	pop $1
	push $1
	call grmsmove,remove
	push $1
	call grmslrel,remove
	push $1
	call grmslclick,remove
	end method
	method onmousemove
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method onmouselclick
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method onmouselrel
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	end class

	class classadvanhero
	method init
	end method
	method setashero
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "buildhero"
	push "buildhero"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onendframe"
	push "heroendframe1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildhero
	push $1
	spushs
	push "buildheroframe"
	push "buildheroframe"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onfinish"
	push "herofinish"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getdir"
	push "getdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "thisfinish"
	push "thisfinish"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "playspec"
	push "playspec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "playspec2"
	push "playspec2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostop"
	push "herostop"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostart"
	push "herostart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "herostand"
	push "herostand"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstdfin"
	push "setstdfin"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getpocket"
	push "getpocket"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "haspocket"
	push "haspocket"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstandbase"
	push "setstandbase"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	spop $a
	call [$a],setstdfin
	end method
	method buildheroframe
	localstring $1
	pop $1
	push $1
	spushs
	push "onendframe"
	push "heroendframe"
	spop $a
	call [$a],addmethod
	end method
	method setstdfin
	localstring $1
	pop $1
	push "onstdfinish"
	push $1
	cthis addmethod
	end method
	method setstandbase
	localstring $1
	pop $1
	push $1
	pop _sstandbase
	end method
	method buildhero
	new string,_sbase
	new int,_istate
	push 0
	pop _istate
	new string,_sfinfun
	new string,_sobfin
	new int,_bplaystop
	new int,_iiloscsek
	new int,_itypsort
	new int,idsort
	new string,_sobstart
	new string,_sfunfinstart
	new int,bthisfin
	push 0
	pop bthisfin
	new string,_sstandbase
	push "stand"
	pop _sstandbase
	end method
	method getpocket
	push _spocketpref
	cthis getname
	pop $b
	popax
	add $a,$b
	ret
	end method
	method haspocket
	push _spocketpref
	cthis getname
	pop $b
	popax
	add $a,$b
	call engine,varexist
	ret
	end method
	method thisfinish
	localint $1
	pop $1
	push $1
	pop bthisfin
	end method
	method getdir
	cthis actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	ret
	end method
	method playspec
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop _sbase
	push $2
	pop _iiloscsek
	push $3
	pop _itypsort
	push $7
	pop _bplaystop
	push $8
	pop _sobfin
	push $9
	pop _sfinfun
	push $5
	pop _sobstart
	push $6
	pop _sfunfinstart
	push $2
	push 0
	cmpja
	cmp0
	je l899
	push $3
	push 0
	cmpje
	cmp0
	je l901
	push 1
	pop idsort
	jmp l900
l901:
	push $3
	push 1
	cmpje
	cmp0
	je l903
	push _iiloscsek
	call idsort,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
l903:
l900:
l899:
	push $4
	cmp0
	je l905
	push 1
	pop _istate
	push $1
	push "start"
	pop $b
	popax
	add $a,$b
	push $10
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l904
l905:
	push $1
	push $2
	push 0
	cmpja
	cmp0
	je l907
	push "1"
	push $10
	pop $b
	popax
	add $a,$b
	jmp l906
l907:
	push $10
l906:
	pop $b
	popax
	add $a,$b
	push 0
	cthis setframe
	cthis herostart
l904:
	end method
	method playspec2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call $1,length
	push 2
	cmpjl
	cmp0
	je l909
	push ""
	jmp l908
l909:
	push 2
	call $1,strsube
l908:
	pop $4
	push $4
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	push $2
	push $3
	push 0
	push 2
	call $1,gete
	cthis playspec
	end method
	method herostop
	push 3
	pop _istate
	push _bplaystop
	cmp0
	je l911
	push 0
	pop _bplaystop
	push 1
	cthis thisfinish
	push _sbase
	push "stop"
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
	jmp l910
l911:
	push 1
	cthis stop
l910:
	end method
	method herostart
	push 2
	pop _istate
	push _sbase
	push _iiloscsek
	push 0
	cmpja
	cmp0
	je l913
	push idsort
	jmp l912
l913:
	push ""
l912:
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	cthis play
	end method
	method herofinish
	push _istate
	push 2
	cmpje
	cmp0
	je l915
	push bthisfin
	jmp l917
l915:
	push 0
	jmp l917
l916:
	push 1
l917:
	cmp0
	je l918
	push 3
	pop _istate
l918:
	push _istate
	push 0
	cmpje
	cmp0
	je l920
	cthis herostand
	cthis onstdfinish
	localstring $1
	cthis getname
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push $1
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $1
	push "_ACTION_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l919
l920:
	push _istate
	push 1
	cmpje
	cmp0
	je l922
	cthis herostart
	push _sobstart
	push _sfunfinstart
	cthis callfun
	jmp l921
l922:
	push _istate
	push 2
	cmpje
	cmp0
	je l924
	localstring $3
	push _iiloscsek
	push 0
	cmpja
	cmp0
	je l926
	push _itypsort
	push 0
	cmpje
	cmp0
	je l928
	push idsort
	push _iiloscsek
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
	jmp l927
l928:
	push _itypsort
	push 1
	cmpje
	cmp0
	je l930
	push _iiloscsek
	call idsort,rand
	push 1
	pop $b
	popax
	add $a,$b
	pop idsort
l930:
l927:
	push _sbase
	push idsort
	pop $b
	popax
	add $a,$b
	cthis getdir
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l925
l926:
	cthis actionname
	pop $3
l925:
	push $3
	cthis play
	jmp l923
l924:
	push _istate
	push 3
	cmpje
	cmp0
	je l932
	push 0
	pop _istate
	cthis herostand
	push 1
	cthis thisfinish
	push _sobfin
	push _sfinfun
	cthis callfun
l932:
l923:
l921:
l919:
	end method
	method herostand
	localstring $1
	push _sstndpref
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l934
	push _sstandbase
	cthis actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	pop $b
	popax
	add $a,$b
	cthis play
	push $1
	spushs
	spop $a
	call [$a],play
l934:
	end method
	method heroendframe1
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method heroendframe
	cthis getposy
	cthis setz
	cthis haspocket
	cmp0
	je l936
	cthis getpocket
	spushs
	cthis getposx
	cthis getposy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],pocketpos
l936:
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classadvhero
	method init
	new string,_sanim
	new int,_bisvecile
	push 0
	pop _bisvecile
	new string,_sbase
	push "null"
	pop _sbase
	new string,_sbase2
	push "null"
	pop _sbase2
	new int,izakres
	push 0
	pop izakres
	new string,_sbs2
	new string,_sbutoper
	new string,_smetpart
	new string,_simgbut
	new string,_sptfname
	cthis getname
	pop _sptfname
	end method
	method getptfname
	push _sptfname
	ret
	end method
	method link
	localstring $1
	pop $1
	push $1
	pop _sanim
	end method
	method link2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis link
	push $2
	cthis checkamounts
	end method
	method anstand
	push _sanim
	spushs
	push "stand"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method ansay
	push _sanim
	spushs
	push "talk"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
	end method
	method getdir
	push _sanim
	spushs
	spop $a
	call [$a],actionname
	spushs
	push 0
	push 2
	spop $h
	call $h,gete
	end method
	method nofpieces
	cthis getdir
	cthis nofpiecesdir
	ret
	end method
	method nofpiecesdir
	localstring $1
	pop $1
	push _bisvecile
	cmp0
	je l938
	push $1
	call vecdirs,find
	call vecile,get
	jmp l937
l938:
	push 0
l937:
	ret
	end method
	method setbase2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis setbase
	push $2
	pop _sbase2
	end method
	method setbase
	localstring $1
	pop $1
	push $1
	pop _sbase
	call $1,length
	pop izakres
	end method
	method getpropdir
	localstring $1
	pop $1
	push $1
	push "auto"
	cmpje
	cmp0
	je l940
	cthis getdir
	jmp l939
l940:
	push $1
l939:
	ret
	end method
	method _buildamounts
	push _bisvecile
	neg
	cmp0
	je l942
	push 1
	pop _bisvecile
	new vector,vecdirs
	push "string"
	call vecdirs,type
	push "begin"
	push "uu"
	push "ru"
	push "rr"
	push "rd"
	push "dd"
	push "ld"
	push "ll"
	push "lu"
	call vecdirs,beginadd
	new vector,vecile
l942:
	end method
	method _clearvecile
	call vecile,free
	push 8
	push 0
	call vecile,resize
	end method
	method checkamounts
	localstring $1
	pop $1
	push $1
	cthis setbase
	cthis _buildamounts
	cthis _clearvecile
	push _sanim
	push "null"
	cmpje
	cmp0
	je l944
	ret
l944:
	localint $2
	push _sanim
	spushs
	spop $a
	call [$a],nofactions
	pop $2
	localstring $3
	localint $4
	localint $5
	push 0
	pop $5
l945:
	push $5
	push $2
	cmpjl
	cmp0
	je l946
	jmp l948
l947:
	add $5,1
	pop $5
	jmp l945
l948:
	push _sanim
	spushs
	push $5
	spop $a
	call [$a],nameofaction
	pop $3
	push 0
	push izakres
	call $3,getb
	push $1
	cmpje
	cmp0
	je l950
	push izakres
	push 10
	call $3,getb
	pop $4
	push $4
	push 0
	cmpja
	cmp0
	je l952
	push 0
	push 2
	call $3,gete
	call vecdirs,find
	call vecile,vecinc
l952:
l950:
	jmp l947
l946:
	end method
	method calllastfun
	cthis getcallfin
	spushs
	spop $d
	cthis [$d]
	end method
	method _calllastfunfin
	cthis calllastfunfin
	cthis advmsunlock
	end method
	method calllastfunfin
	cthis getcallfin
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method getcallfin
	push _sanim
	push _smetpart
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	ret
	end method
	method _cplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	cthis advmslock
	push _sanim
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push $1
	push "null"
	cmpje
	cmp0
	je l954
	push $2
	push "null"
	cmpjne
	cmp0
	je l956
	push $2
	spushs
	spop $d
	cthis [$d]
l956:
	jmp l953
l954:
	push _sanim
	spushs
	push $1
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	cthis getname
	push $2
	push $3
	cthis getpropdir
	spop $a
	call [$a],playspec
l953:
	end method
	method _cplay1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "_cplay1_2"
	push $2
	cthis _cplay
	end method
	method _cplay1_2
	cthis calllastfun
	cthis _callbehs
	end method
	method _callbehs
	cthis advmsunlock
	cthis callbehs
	end method
	method callbehs
	localstring $1
	cthis getcallfin
	pop $1
	push "beh_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l958
	push "beh_"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getname
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l957
l958:
	cthis _calllastfunfin
l957:
	end method
	method _cplay2_2
	cthis calllastfun
	push _sbs2
	push "_callbehs"
	cthis getdir
	cthis _cplay
	end method
	method _cplay2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	pop _sbs2
	push $1
	push "_cplay2_2"
	push $3
	cthis _cplay
	end method
	method heroplay1
	localstring $1
	pop $1
	push $1
	pop _simgbut
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $1
	spushs
	spop $a
	call [$a],getbase1
	push $1
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay1
	end method
	method heroplay2
	localstring $1
	pop $1
	push $1
	pop _simgbut
	push $1
	spushs
	spop $a
	call [$a],getbutname
	pop _sbutoper
	push $1
	spushs
	spop $a
	call [$a],getbase1
	push $1
	spushs
	spop $a
	call [$a],getbase2
	push $1
	spushs
	spop $a
	call [$a],getbutdir
	cthis getpropdir
	cthis _cplay2
	end method
	method _setbase2
	localstring $1
	pop $1
	push $1
	push 1
	call modadv,get
	push $1
	push 2
	call modadv,get
	cthis setbase2
	end method
	method _setbase
	localstring $1
	pop $1
	push $1
	push 1
	call modadv,get
	cthis setbase
	end method
	method heroplay3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push 1
	call modadv,get
	spop $a
	call [$a],setbutbase1
	push $1
	spushs
	push $2
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase2
	push $1
	cthis heroplay2
	end method
	end class

	class classherotaker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "_PICKUP_"
	pop _smetpart
	end method
	method herotake
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method calllastfun
	push _sanim
	spushs
	spop $a
	call [$a],haspocket
	cmp0
	je l960
	push _simgbut
	spushs
	spop $a
	call [$a],hide
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	push _sbutoper
	spop $a
	call [$a],additem
l960:
	clparent classadvhero,calllastfun
	end method
	end class

	class classherolooker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "_OPERATE_"
	pop _smetpart
	end method
	method herolook
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method herooperate
	localstring $1
	pop $1
	push $1
	cthis heroplay2
	end method
	method heroopendoor
	localstring $1
	pop $1
	push $1
	push "open:"
	cthis heroplay3
	end method
	method heroclosedoor
	localstring $1
	pop $1
	push $1
	push "close:"
	cthis heroplay3
	end method
	end class

	class classherouser
	parent classadvhero
	method init
	clparent classadvhero,init
	new string,_stool
	end method
	method herouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _stool
	push "_USE_"
	push _stool
	pop $b
	popax
	add $a,$b
	push "_ON_"
	pop $b
	popax
	add $a,$b
	pop _smetpart
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	spop $a
	call [$a],itemhide
	push $2
	cthis heroplay2
	end method
	method calllastfun
	push _sanim
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis getcallfin
	spushs
	spop $d
	cthis [$d]
	end method
	method calllastfunfin
	push _sanim
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis getcallfin
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method callbehs
	localstring $1
	cthis getname
	pop $1
	push "beh_"
	cthis getcallfin
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l962
	push "beh_"
	cthis getcallfin
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l961
l962:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l964
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_ON_"
	pop $b
	popax
	add $a,$b
	push _sbutoper
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l963
l964:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l966
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE_"
	pop $b
	popax
	add $a,$b
	push _stool
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l965
l966:
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE"
	pop $b
	popax
	add $a,$b
	cthis behexist
	cmp0
	je l968
	push "beh_"
	push _sanim
	pop $b
	popax
	add $a,$b
	push "_USE"
	pop $b
	popax
	add $a,$b
	push $1
	push "_calllastfunfin"
	cthis playbehobfin
	jmp l967
l968:
	cthis _calllastfunfin
l967:
l965:
l963:
l961:
	end method
	end class

	class classpathf
	parent classadvhero
	method init
	clparent classadvhero,init
	new path,ptf
	new string,swalkto
	push "null"
	pop swalkto
	new string,_sfunnopath
	push "null"
	pop _sfunnopath
	new string,_sfunvisit
	push "null"
	pop _sfunvisit
	new int,destx
	new int,desty
	new int,bzmien
	push 0
	pop bzmien
	new int,bzatrzym
	push 0
	pop bzatrzym
	new string,_sitem
	push "null"
	pop _sitem
	new int,_istep
	push "onfinish"
	push "_cptffin"
	call ptf,addmethod
	push "onvisit"
	push "_cptvisit"
	call ptf,addmethod
	push "_cptfstdreach"
	push "_cptfstdarrive"
	cthis addsigs
	push "go:"
	cthis _setbase
	end method
	method _buildan
	localstring $1
	pop $1
	push $1
	call ptf,linkanima
	push $1
	cthis link
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	pop _istep
	push $2
	push $3
	push $4
	push $5
	push $6
	call ptf,build
	push $1
	cthis _buildan
	end method
	method buildfrom
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	pop _istep
	push $2
	push $3
	call ptf,copy
	push $1
	cthis _buildan
	end method
	method addsigs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l970
	push "onreach"
	push $1
	call ptf,addmethod
l970:
	push $2
	push "null"
	cmpjne
	cmp0
	je l972
	push "onarrive"
	push $2
	call ptf,addmethod
l972:
	end method
	method sigonnopath
	localstring $1
	pop $1
	push $1
	pop _sfunnopath
	end method
	method sigonvisit
	localstring $1
	pop $1
	push $1
	pop _sfunvisit
	end method
	method _cptfstdreach
	localstring $1
	pop $1
	end method
	method _cptfstdarrive
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,move
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,setpos
	end method
	method show
	call ptf,show
	end method
	method hide
	call ptf,hide
	end method
	method enable
	localint $1
	pop $1
	push $1
	call ptf,enable
	end method
	method disable
	localint $1
	pop $1
	push $1
	call ptf,disable
	end method
	method setanstep
	localint $1
	pop $1
	push istep
	pop _istep
	push $1
	call ptf,setanstep
	end method
	method getanstep
	push _istep
	ret
	end method
	method getposx
	call ptf,getposx
	ret
	end method
	method getposy
	call ptf,getposy
	ret
	end method
	method getpx
	call ptf,getpx
	ret
	end method
	method getpy
	call ptf,getpy
	ret
	end method
	method getidan
	call ptf,getidan
	ret
	end method
	method getidan2
	call ptf,getidan2
	ret
	end method
	method getidgo
	call ptf,getidgo
	ret
	end method
	method getidanpath
	call ptf,getidanpath
	ret
	end method
	method getidan2path
	call ptf,getidan2path
	ret
	end method
	method getidgopath
	call ptf,getidgopath
	ret
	end method
	method excludev
	localint $1
	pop $1
	push $1
	call ptf,excludev
	end method
	method linkfilter
	call ptf,linkfilter
	end method
	method unlinkfilter
	call ptf,unlinkfilter
	end method
	method unlinkanima
	call ptf,unlinkanima
	end method
	method setscalepower
	localreal $1
	pop $1
	push $1
	call ptf,setscalepower
	end method
	method setzsize
	localreal $1
	pop $1
	push $1
	call ptf,setzsize
	end method
	method iswayto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,iswayto
	ret
	end method
	method scalean
	call ptf,scalean
	end method
	method getfromver
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	call ptf,getfromver
	ret
	end method
	method getgover
	localint $1
	pop $1
	push $1
	call ptf,getgover
	ret
	end method
	method getanver
	localint $1
	pop $1
	push $1
	call ptf,getanver
	ret
	end method
	method getxver
	localint $1
	pop $1
	push $1
	call ptf,getxver
	ret
	end method
	method getyver
	localint $1
	pop $1
	push $1
	call ptf,getyver
	ret
	end method
	method getbyname
	localint $1
	pop $1
	push $1
	call ptf,getbyname
	ret
	end method
	method walkbase
	localstring $1
	pop $1
	push $1
	call ptf,setbase
	end method
	method walkto2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop swalkto
	push $2
	push $3
	cthis cangoto
	cmp0
	je l974
	push $2
	push $3
	call ptf,goto
	pop $2
	jmp l973
l974:
	push _sfunnopath
	push "null"
	cmpjne
	cmp0
	je l976
	push _sfunnopath
	spushs
	spop $d
	cthis [$d]
l976:
l973:
	end method
	method walkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop swalkto
	cthis iswalking
	cmp0
	je l978
	push $2
	push $3
	call ptf,iswayto
	cmp0
	je l980
	push 1
	pop bzmien
	push $2
	pop destx
	push $3
	pop desty
	push 0
	ret
	jmp l979
l980:
	push 1
	pop bzatrzym
	push 1
	popax
	sub 0,$a
	ret
l979:
	jmp l977
l978:
	push $2
	push $3
	call ptf,goto
	ret
l977:
	end method
	method goto
	localint $1
	localint $2
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	cthis walkto
	ret
	end method
	method gotorel
	localint $1
	localint $2
	pop $2
	pop $1
	push _sanim
	spushs
	spop $a
	call [$a],getpx
	push $1
	pop $b
	popax
	add $a,$b
	push _sanim
	spushs
	spop $a
	call [$a],getey
	push $2
	pop $b
	popax
	add $a,$b
	cthis goto
	ret
	end method
	method iswalking
	call ptf,iswalking
	ret
	end method
	method stand
	call ptf,stand
	end method
	method stop
	localint $1
	pop $1
	push $1
	call ptf,stop
	end method
	method getidpath
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call ptf,getidpath
	ret
	end method
	method cangoto
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	call ptf,getidpath
	pop $3
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l982
	push 0
	jmp l981
l982:
	push $3
	call ptf,isenabled
l981:
	ret
	end method
	method _cptfreachbut
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herolook
	end method
	method _cptfreachdoors
	cthis getptfname
	push "look"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herooperate
	end method
	method _cptfreachitem
	cthis getptfname
	push "take"
	pop $b
	popax
	add $a,$b
	spushs
	push swalkto
	spop $a
	call [$a],herotake
	end method
	method _cptfherofin
	cthis herostand
	push swalkto
	push "null"
	cmpjne
	cmp0
	je l984
	push _sanim
	push "_REACH_"
	pop $b
	popax
	add $a,$b
	push swalkto
	spushs
	spop $a
	call [$a],getbutname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push _sanim
	cthis ismainhero
	cmp0
	je l986
	localstring $1
	push "null"
	pop $1
	push _sanim
	spushs
	spop $a
	call [$a],haspocket
	cmp0
	je l988
	push _sanim
	spushs
	spop $a
	call [$a],getpocket
	spushs
	spop $a
	call [$a],getitem
	pop $1
l988:
	push $1
	push "null"
	cmpjne
	cmp0
	je l990
	cthis getptfname
	push "use"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push swalkto
	spop $a
	call [$a],herouse
	jmp l989
l990:
	push "_cptfreach"
	push swalkto
	spushs
	spop $a
	call [$a],gettyp
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l989:
l986:
	push "null"
	pop swalkto
	jmp l983
l984:
	push _sanim
	push "_ARRIVE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis _cptheroendpath
l983:
	end method
	method _cptheroendpath
	push _sfinob
	push _sfinfun
	cthis callfun
	push _bylfin
	cmp0
	je l992
	push 0
	pop _bylfin
	jmp l991
l992:
	push "null"
	pop _sfinfun
	push "null"
	pop _sfinob
l991:
	end method
	method _cptfnopath
	push _sanim
	push "_NOPATH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _cptfvisit
	push _sanim
	push "_VISIT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method prepareforhero
	push "onfinish"
	push "_cptfherofin"
	call ptf,addmethod
	new string,_sfinob
	new string,_sfinfun
	new int,_bylfin
	push "_cptfnopath"
	cthis sigonnopath
	push "_cptfvisit"
	cthis sigonvisit
	end method
	method herowalkto2
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	push $3
	push $4
	cthis herowalkto
	end method
	method herowalkto
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push _sstndpref
	push _sanim
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],stop
	push $4
	pop _sfinob
	push $5
	pop _sfinfun
	push $5
	push "null"
	cmpjne
	cmp0
	je l994
	push 1
	pop _bylfin
l994:
	push $1
	push $2
	push $3
	cthis walkto
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l996
l996:
	end method
	method advgoto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	push "null"
	cthis herowalkto2
	end method
	method advwalkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	push "null"
	cthis herowalkto
	end method
	method advvisit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],reachable
	cmp0
	je l998
	push $1
	push $1
	spushs
	spop $a
	call [$a],getgox
	push $1
	spushs
	spop $a
	call [$a],getgoy
	cthis advwalkto
l998:
	end method
	method herostand
	cthis stand
	push _sanim
	spushs
	spop $a
	call [$a],herostand
	end method
	method _cptvisit
	push bzmien
	cmp0
	je l1000
	push 0
	pop bzmien
	localint $1
	push destx
	push desty
	cthis goto
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l1002
	push _sfunnopath
	spushs
	spop $d
	cthis [$d]
l1002:
	jmp l999
l1000:
	push bzatrzym
	cmp0
	je l1004
	push 0
	pop bzatrzym
	push 1
	cthis stop
	jmp l1003
l1004:
	push _sfunvisit
	spushs
	spop $d
	cthis [$d]
l1003:
l999:
	end method
	method _cptffin
	push swalkto
	push "null"
	cmpjne
	cmp0
	je l1006
	push swalkto
	call ptf,onreach
	push "null"
	pop swalkto
	jmp l1005
l1006:
	call ptf,onarrive
l1005:
	end method
	end class

	class classwalkerqueue
	method init
	new timer,timwq
	push 1
	call timwq,settick
	push 1
	call timwq,setcycle
	push "onfinish"
	push "_timwqfin"
	call timwq,addmethod
	new vector,vecpt
	push "string"
	call vecpt,type
	new int,iverlen
	push 1
	pop iverlen
	end method
	method _timwqfin
	cthis checkqueue
	cthis play
	end method
	method start
	end method
	method stop
	push 0
	call timwq,stop
	end method
	method add
	localstring $1
	pop $1
	push $1
	call vecpt,add
	end method
	method goto
	localint $1
	localint $2
	pop $2
	pop $1
	push "null"
	push $1
	push $2
	cthis walkto
	end method
	method visit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],reachable
	cmp0
	je l1008
	push $1
	push $1
	spushs
	spop $a
	call [$a],getgox
	push $1
	spushs
	spop $a
	call [$a],getgoy
	cthis walkto
l1008:
	end method
	method setverlen
	localint $1
	pop $1
	push $1
	pop iverlen
	end method
	method walkto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	call vecpt,size
	pop $4
	push $4
	push 0
	cmpjle
	cmp0
	je l1010
	ret
l1010:
	localstring $5
	push 0
	call vecpt,get
	pop $5
	push $5
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],advwalkto
	localint $6
	localint $7
	localstring $8
	localint $9
	push 1
	pop $9
l1011:
	push $9
	push $4
	cmpjl
	cmp0
	je l1012
	jmp l1014
l1013:
	add $9,1
	pop $9
	jmp l1011
l1014:
	push $9
	call vecpt,get
	pop $8
	push $8
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],advwalkto
	push $8
	spushs
	push $9
	push iverlen
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],getgover
	pop $6
	push $6
	push 0
	cmpjae
	cmp0
	je l1016
	push $8
	spushs
	push "null"
	push $8
	spushs
	push $6
	spop $a
	call [$a],getxver
	push $8
	spushs
	push $6
	spop $a
	call [$a],getyver
	spop $a
	call [$a],advwalkto
	jmp l1015
l1016:
	push $8
	spushs
	push 0
	spop $a
	call [$a],stop
	push $8
	spushs
	spop $a
	call [$a],herostand
l1015:
	jmp l1013
l1012:
	end method
	method checkqueue
	localint $1
	call vecpt,size
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1018
	ret
l1018:
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localint $7
	push 0
	pop $7
l1019:
	push $7
	push $1
	cmpjl
	cmp0
	je l1020
	jmp l1022
l1021:
	add $7,1
	pop $7
	jmp l1019
l1022:
	push $7
	call vecpt,get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],iswalking
	cmp0
	je l1024
	push $3
	spushs
	spop $a
	call [$a],getidan
	pop $5
	push $3
	spushs
	spop $a
	call [$a],getidan2
	pop $6
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $2
l1025:
	push $2
	push $1
	cmpjl
	cmp0
	je l1026
	jmp l1028
l1027:
	add $2,1
	pop $2
	jmp l1025
l1028:
	push $2
	call vecpt,get
	pop $4
	push $4
	spushs
	spop $a
	call [$a],iswalking
	cmp0
	je l1030
	push $4
	spushs
	push $5
	spop $a
	call [$a],excludev
	push $4
	spushs
	push $6
	spop $a
	call [$a],excludev
l1030:
	jmp l1027
l1026:
l1024:
	jmp l1021
l1020:
	end method
	end class

	class classstndgroup
	method init
	new gmobjvec,grstnd
	end method
	method pause
	push "lock"
	call grstnd,eval
	cthis stop
	end method
	method resume
	push "unlock"
	call grstnd,eval
	cthis play
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grstnd,add
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call grstnd,remove
	end method
	method stop
	push "stop"
	call grstnd,eval
	end method
	method play
	push "play"
	call grstnd,eval
	end method
	method reset
	push "reset"
	call grstnd,eval
	end method
	end class

	class classadvstander
	parent classlocker
	method init
	clparent classlocker,init
	new timer,timstand
	push 1
	call timstand,settick
	push 20000
	call timstand,delay
	push "onfinish"
	push "_timstandfin"
	call timstand,addmethod
	new string,sanim
	cthis getname
	pop sanim
	push _sstndpref
	call sanim,strsubbs
	pop sanim
	new string,_sbeh
	push "beh_"
	push sanim
	pop $b
	popax
	add $a,$b
	push "_IDLE"
	pop $b
	popax
	add $a,$b
	pop _sbeh
	cthis getname
	call modstnd,add
	end method
	method _timstandfin
	localstring $1
	call gameapi,getgamename
	pop $1
	push $1
	spushs
	push _sbeh
	spop $a
	call [$a],behexist
	cmp0
	je l1032
	cthis getlock
	neg
	jmp l1034
l1032:
	push 0
	jmp l1034
l1033:
	push 1
l1034:
	cmp0
	je l1035
	push $1
	spushs
	push _sbeh
	spop $a
	call [$a],playbeh
l1035:
	end method
	method play
	cthis getlock
	neg
	cmp0
	je l1037
	call timstand,isplaying
	neg
	jmp l1039
l1037:
	push 0
	jmp l1039
l1038:
	push 1
l1039:
	cmp0
	je l1040
	call timstand,play
l1040:
	end method
	method stop
	push 0
	call timstand,stop
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	call timstand,setdelay
	end method
	method reset
	cthis stop
	cthis play
	end method
	end class

	class classadv
	parent classgame
	method init
	clparent classgame,init
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new path,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbutton,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	end class

	class classtalker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "talk:"
	cthis _setbase
	new snd,sndtalk
	push 0
	push 1
	call sndtalk,setstartstopflag
	push "onfinish"
	push "_ctalkfin"
	call sndtalk,addmethod
	new timer,timtalk
	push 1
	call timtalk,settick
	new real,rdelay
	push 1.0
	pop rdelay
	push "onfinish"
	push "_ctalkfin"
	call timtalk,addmethod
	new gmimgvec,txttalk
	new int,_iletxt
	push 10
	pop _iletxt
	localstring $1
	localint $2
	push 0
	pop $2
l1041:
	push $2
	push _iletxt
	cmpjl
	cmp0
	je l1042
	jmp l1044
l1043:
	add $2,1
	pop $2
	jmp l1041
l1044:
	push "txttalk"
	push $2
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	call txttalk,add
	jmp l1043
l1042:
	new font,fonttalk
	call txttalk,hide
	new vector,vecpom
	push "string"
	call vecpom,type
	new int,iTxtLim
	push 30
	pop iTxtLim
	new int,irtxt
	new int,igtxt
	new int,ibtxt
	new string,stextdb
	new string,_swav
	cthis buildfullname
	new string,stalktype
	push "snd"
	cthis settalktype
	end method
	method set
	localstring $1
	pop $1
	push $1
	cthis link
	end method
	method settextdb
	localstring $1
	pop $1
	push $1
	pop stextdb
	end method
	method setfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call fonttalk,load
	push "setfont"
	push "fonttalk"
	call txttalk,eval1
	end method
	method setsnd
	localstring $1
	pop $1
	push ".wav"
	call $1,contains
	neg
	cmp0
	je l1046
	push $1
	pop _swav
	push ".wav"
	popax
	add $1,$a
	pop $1
	jmp l1045
l1046:
	push ".wav"
	call $1,strsubes
	pop _swav
l1045:
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call sndtalk,load
	end method
	method herosay1
	localstring $1
	pop $1
	push 1
	push 1
	push 1
	push "null"
	push $1
	cthis herosay
	end method
	method herosay
	localint $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis getdir
	cthis herosaydir
	end method
	method herosaydir
	localint $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push _sanim
	spushs
	push 0
	spop $a
	call [$a],thisfinish
	push $2
	neg
	cmp0
	je l1048
	push _sanim
	spushs
	push _sbase
	push $6
	cthis nofpiecesdir
	push $1
	push $2
	push "null"
	push "null"
	push $3
	push $4
	push $5
	push $6
	spop $a
	call [$a],playspec
	push stalktype
	spushs
	spop $d
	cthis [$d]
	jmp l1047
l1048:
	push _sanim
	spushs
	push _sbase
	push $6
	cthis nofpiecesdir
	push $1
	push $2
	cthis getfullname
	push "_ctalkstart"
	push $3
	push $4
	push $5
	push $6
	spop $a
	call [$a],playspec
l1047:
	end method
	method thisfinish
	localint $1
	pop $1
	push _sanim
	spushs
	push $1
	spop $a
	call [$a],thisfinish
	end method
	method stop
	localint $1
	pop $1
	push "snd"
	call stalktype,contains
	cmp0
	je l1050
	push $1
	call sndtalk,stop
	push 0
	call timtalk,stop
	jmp l1049
l1050:
	push $1
	call timtalk,stop
l1049:
	end method
	method settalktype
	localstring $1
	pop $1
	push "_cplay"
	pop stalktype
	push "snd"
	call $1,contains
	cmp0
	je l1052
	push "snd"
	popax
	add stalktype,$a
	pop stalktype
l1052:
	push "txt"
	call $1,contains
	cmp0
	je l1054
	push "txt"
	popax
	add stalktype,$a
	pop stalktype
l1054:
	push "film"
	call $1,contains
	cmp0
	je l1056
	push "film"
	popax
	add stalktype,$a
	pop stalktype
l1056:
	end method
	method _csay
	push stextdb
	push "null"
	cmpjne
	cmp0
	je l1058
	localint $1
	push stextdb
	spushs
	push _swav
	spop $a
	call [$a],findbyrow
	pop $1
	push $1
	push 0
	cmpjl
	cmp0
	je l1060
	ret
l1060:
	push stextdb
	spushs
	push $1
	push 2
	spop $a
	call [$a],get
	push " "
	call vecpom,vecbuildfromstring
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push "txt"
	call stalktype,contains
	cmp0
	je l1062
	push _sanim
	spushs
	spop $a
	call [$a],getcx
	pop $4
	push _sanim
	spushs
	spop $a
	call [$a],getpy
	pop $5
	jmp l1061
l1062:
	push 400
	pop $4
	push 590
	pop $5
l1061:
	localint $6
	push 0
	pop $6
	localint $7
	push 800
	pop $7
	localint $8
	push 0
	pop $8
	localint $9
	push 600
	pop $9
	localstring $10
	localint $11
	push 0
	pop $11
l1063:
	push $11
	call vecpom,size
	cmpjl
	cmp0
	je l1064
	jmp l1066
l1065:
	add $11,1
	pop $11
	jmp l1063
l1066:
	push $11
	call vecpom,get
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $2,$a
	pop $2
	call $2,length
	push iTxtLim
	cmpja
	cmp0
	je l1068
	push "txttalk"
	push $3
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $2
	push $4
	push $5
	push $3
	spop $a
	call [$a],_cprinttxt
	push $10
	spushs
	spop $a
	call [$a],getpx
	push $6
	cmpjl
	cmp0
	je l1070
	push $10
	spushs
	spop $a
	call [$a],getpx
	pop $6
l1070:
	push $10
	spushs
	spop $a
	call [$a],getex
	push $7
	cmpja
	cmp0
	je l1072
	push $10
	spushs
	spop $a
	call [$a],getex
	pop $7
l1072:
	push $10
	spushs
	spop $a
	call [$a],getpy
	push $8
	cmpjl
	cmp0
	je l1074
	push $10
	spushs
	spop $a
	call [$a],getpy
	pop $8
l1074:
	push $10
	spushs
	spop $a
	call [$a],getey
	push $9
	cmpja
	cmp0
	je l1076
	push $10
	spushs
	spop $a
	call [$a],getey
	pop $9
l1076:
	push ""
	pop $2
	add $3,1
	pop $3
l1068:
	jmp l1065
l1064:
	call $2,length
	push 0
	cmpja
	cmp0
	je l1078
	push "txttalk"
	push $3
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $2
	push $4
	push $5
	push $3
	spop $a
	call [$a],_cprinttxt
	push $10
	spushs
	spop $a
	call [$a],getpx
	push $6
	cmpjl
	cmp0
	je l1080
	push $10
	spushs
	spop $a
	call [$a],getpx
	pop $6
l1080:
	push $10
	spushs
	spop $a
	call [$a],getex
	push $7
	cmpja
	cmp0
	je l1082
	push $10
	spushs
	spop $a
	call [$a],getex
	pop $7
l1082:
	push $10
	spushs
	spop $a
	call [$a],getpy
	push $8
	cmpjl
	cmp0
	je l1084
	push $10
	spushs
	spop $a
	call [$a],getpy
	pop $8
l1084:
	push $10
	spushs
	spop $a
	call [$a],getey
	push $9
	cmpja
	cmp0
	je l1086
	push $10
	spushs
	spop $a
	call [$a],getey
	pop $9
l1086:
	add $3,1
	pop $3
l1078:
	push 800
	popax
	sub $7,$a
	pop $7
	push 600
	popax
	sub $9,$a
	pop $9
	push $6
	push 0
	cmpja
	cmp0
	je l1088
	push 0
	pop $6
l1088:
	push $8
	push 0
	cmpja
	cmp0
	je l1090
	push 0
	pop $6
l1090:
	push 0
	push $6
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	push $3
	popax
	sub 0,$a
	call txttalk0,geth
	pop $b
	popax
	mul $a,$b
	push $8
	pop $b
	popax
	sub $a,$b
	push $9
	pop $b
	popax
	add $a,$b
	call txttalk,move
	call txttalk0,getpy
	push 0
	cmpjl
	cmp0
	je l1092
	push 0
	call txttalk0,getpy
	popax
	sub 0,$a
	call txttalk,move
l1092:
	push rdelay
	push 500
	pop $b
	popax
	mul $a,$b
	call vecpom,size
	pop $b
	popax
	mul $a,$b
	call timtalk,delay
l1058:
	end method
	method _cprinttxt
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push irtxt
	push igtxt
	push ibtxt
	cthis createtxt
	push $2
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis setpos
	push 2000
	cthis setz
	cthis show
	end method
	method _cplaysnd
	call sndtalk,play
	end method
	method _cplaysndtxt
	call sndtalk,play
	cthis _csay
	end method
	method _cplaysndtxtfilm
	call sndtalk,play
	cthis _csay
	end method
	method _cplaysndfilm
	cthis _csay
	end method
	method _cplaytxt
	cthis _csay
	call timtalk,play
	end method
	method _cplaytxtfilm
	cthis _csay
	call timtalk,play
	end method
	method _cplayfilm
	cthis _csay
	call timtalk,play
	end method
	method setdelay
	localreal $1
	pop $1
	push $1
	pop rdelay
	end method
	method settxtcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop irtxt
	push $2
	pop igtxt
	push $3
	pop ibtxt
	end method
	method _ctalkstart
	push stalktype
	spushs
	spop $d
	cthis [$d]
	end method
	method _ctalkfin
	call txttalk,hide
	push _sanim
	spushs
	spop $a
	call [$a],herostop
	end method
	end class

	class classtxttalker
	parent classadvhero
	method init
	clparent classadvhero,init
	push "talk:"
	cthis _setbase
	new int,iR
	new int,iG
	new int,iB
	new int,ibR
	new int,ibG
	new int,ibB
	new int,ibA
	new int,ibrr
	new int,ibrg
	new int,ibrb
	new int,ibra
	new int,ibw
	new db,dbtxt
	new int,iSize
	new gmimgvec,grtxt
	new gmimgvec,grtxt2
	localstring $1
	localint $2
	push 0
	pop $2
l1093:
	push $2
	push 25
	cmpjl
	cmp0
	je l1094
	jmp l1096
l1095:
	add $2,1
	pop $2
	jmp l1093
l1096:
	push "txt"
	push $2
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	call grtxt,add
	push $1
	spushs
	spop $a
	call [$a],hide
	jmp l1095
l1094:
	new text,imgtxt
	call imgtxt,hide
	new int,bplaying
	push 0
	pop bplaying
	new string,slang
	push "pol"
	cthis setlang
	end method
	method setlang
	localstring $1
	pop $1
	push $1
	pop slang
	end method
	method isplaying
	push bplaying
	ret
	end method
	method setfont
	localstring $1
	pop $1
	push "setfont"
	push $1
	call grtxt,eval1
	push $1
	spushs
	spop $a
	call [$a],getsize
	pop iSize
	end method
	method setfontcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop iR
	push $2
	pop iG
	push $3
	pop iB
	end method
	method setfontbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ibR
	push $2
	pop ibG
	push $3
	pop ibB
	push $4
	pop ibA
	end method
	method setbgframe
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	pop ibrr
	push $3
	pop ibrg
	push $4
	pop ibrb
	push 255
	pop ibra
	push $1
	pop ibw
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis link
	push $2
	call grtxt,setz
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call imgtxt,setz
	end method
	method herosay
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis getdir
	cthis herosaydir
	end method
	method herosaydir
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push "auto"
	cmpje
	cmp0
	je l1098
	cthis getdir
	pop $4
l1098:
	push 1
	pop bplaying
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push slang
	pop $b
	popax
	add $a,$b
	call dbtxt,load
	localstring $5
	call grtxt2,free
	localint $6
	push 0
	pop $6
	localint $7
	call dbtxt,getrowsno
	pop $7
	localint $8
	push 0
	pop $8
l1099:
	push $8
	push $7
	cmpjl
	cmp0
	je l1100
	jmp l1102
l1101:
	add $8,1
	pop $8
	jmp l1099
l1102:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $8
	push 0
	call dbtxt,get
	spop $a
	call [$a],set
	push $5
	spushs
	push iR
	push iG
	push iB
	spop $a
	call [$a],createtxt
	push $5
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push iSize
	popax
	add $3,$a
	pop $3
	push $5
	spushs
	spop $a
	call [$a],show
	push $5
	spushs
	spop $a
	call [$a],getw
	push $6
	cmpja
	cmp0
	je l1104
	push $5
	spushs
	spop $a
	call [$a],getw
	pop $6
l1104:
	push $5
	call grtxt2,add
	jmp l1101
l1100:
	call txt0,getpx
	push iSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt0,getpy
	push iSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $6
	push iSize
	pop $b
	popax
	add $a,$b
	push iSize
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	push ibR
	push ibG
	push ibB
	push ibA
	call imgtxt,setbkg
	push ibw
	push ibrr
	push ibrg
	push ibrb
	push ibra
	call imgtxt,setborders
	call imgtxt,show
	push _sanim
	push "null"
	cmpjne
	cmp0
	je l1106
	push _sanim
	spushs
	push 0
	spop $a
	call [$a],thisfinish
	push _sanim
	spushs
	push _sbase
	push 0
	push 0
	push 0
	push "null"
	push "null"
	push 0
	push "null"
	push "null"
	push $4
	spop $a
	call [$a],playspec
l1106:
	end method
	method stop
	push 0
	pop bplaying
	call grtxt2,hide
	call imgtxt,hide
	push _sanim
	push "null"
	cmpjne
	cmp0
	je l1108
	push _sanim
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push _sanim
	spushs
	push "stand"
	cthis getdir
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],play
l1108:
	end method
	end class

	class classbgplan
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,rpx
	new real,rpy
	new real,scalex
	new real,scaley
	end method
	method setscale
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	push $2
	pop scaley
	pop scalex
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add rpx,$a
	pop rpx
	push $2
	popax
	add rpy,$a
	pop rpy
	localint $3
	push rpx
	pop $3
	localint $4
	push rpy
	pop $4
	push $3
	popax
	sub rpx,$a
	pop rpx
	push $4
	popax
	sub rpy,$a
	pop rpy
	push $3
	cmp0
	jne l1111
	push $4
	jmp l1112
l1110:
	push 0
	jmp l1112
l1111:
	push 1
l1112:
	cmp0
	je l1113
	push $3
	push $4
	clparent gmobjvec,move
l1113:
	end method
	method movebgr
	localreal $1
	localreal $2
	pop $2
	pop $1
	push scalex
	push $1
	pop $b
	popax
	mul $a,$b
	push scaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	end class

	class classgrplans
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,_rxp
	new real,_ryp
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "movebgr"
	push $1
	push $2
	cthis eval2
	end method
	method getposx
	push _rxp
	ret
	end method
	method getposy
	push _ryp
	ret
	end method
	method shift
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	end class

	class classadvcamera
	method init
	new classgrplans,grbgrs
	new string,sancamera
	push "null"
	pop sancamera
	new string,smsmvfun
	push "null"
	pop smsmvfun
	new real,_rxmod
	new real,_rymod
	push 0.05
	push 0.05
	pop _rymod
	pop _rxmod
	new real,rleft
	new real,rtop
	new real,rright
	new real,rbottom
	push 0.0
	push 0.0
	push 799.0
	push 599.0
	pop rbottom
	pop rright
	pop rtop
	pop rleft
	new int,icamx
	new int,icamy
	push 400
	push 300
	pop icamy
	pop icamx
	new real,rborx
	new real,rbory
	push 799
	push 599
	pop rbory
	pop rborx
	new timer,timcamera
	push 1
	call timcamera,settick
	push 1
	call timcamera,setcycle
	push "onfinish"
	push "_camerafin"
	call timcamera,addmethod
	end method
	method _camerafin
	cthis checkcamera
	cthis play
	end method
	method setcenter
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop icamy
	pop icamx
	end method
	method setborders
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbottom
	pop rright
	end method
	method getposx
	call grbgrs,getposx
	ret
	end method
	method getposy
	call grbgrs,getposy
	ret
	end method
	method setmetonmsmove
	localstring $1
	pop $1
	push $1
	pop smsmvfun
	end method
	method start
	call timcamera,play
	end method
	method stop
	push 0
	call timcamera,stop
	end method
	method setactor
	localstring $1
	pop $1
	push $1
	pop sancamera
	end method
	method isactor
	localstring $1
	pop $1
	push $1
	push sancamera
	cmpje
	ret
	end method
	method getactor
	push sancamera
	ret
	end method
	method scalemodifiers
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	push $2
	pop _rymod
	pop _rxmod
	end method
	method newbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbgplan,[$e]
	push $1
	push $2
	push $3
	cthis addbgr
	end method
	method addbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setscale
	push $1
	call grbgrs,add
	end method
	method addtobgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],add
	end method
	method setscene
	push 1.0
	push 1.0
	cthis _setscene
	end method
	method _setscene
	localreal $1
	localreal $2
	pop $2
	pop $1
	localreal $3
	push icamx
	push sancamera
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	push $1
	popax
	mul $3,$a
	pop $3
	localreal $4
	push icamy
	push sancamera
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $2
	popax
	mul $4,$a
	pop $4
	localreal $5
	cthis getposx
	push $3
	pop $b
	popax
	add $a,$b
	pop $5
	localreal $6
	cthis getposy
	push $4
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push rleft
	cmpjae
	cmp0
	je l1115
	cthis getposx
	popax
	sub 0,$a
	pop $3
	jmp l1114
l1115:
	push $5
	push rright
	pop $b
	popax
	add $a,$b
	push rborx
	cmpjl
	cmp0
	je l1117
	push rborx
	cthis getposx
	push rright
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $3
l1117:
l1114:
	push $6
	push rtop
	cmpjae
	cmp0
	je l1119
	cthis getposy
	popax
	sub 0,$a
	pop $4
	jmp l1118
l1119:
	push $6
	push rbottom
	pop $b
	popax
	add $a,$b
	push rbory
	cmpjl
	cmp0
	je l1121
	push rbory
	cthis getposy
	push rbottom
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $4
l1121:
l1118:
	push $3
	cmp0
	jne l1124
	push $4
	jmp l1125
l1123:
	push 0
	jmp l1125
l1124:
	push 1
l1125:
	cmp0
	je l1126
	push $3
	push $4
	call grbgrs,move
	push smsmvfun
	push "null"
	cmpjne
	cmp0
	je l1128
	push smsmvfun
	spushs
	spop $d
	cthis [$d]
l1128:
l1126:
	end method
	method checkcamera
	push sancamera
	push "null"
	cmpje
	cmp0
	je l1130
	ret
l1130:
	push _rxmod
	push _rymod
	cthis _setscene
	end method
	method moveplans
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add rleft,$a
	pop rleft
	push $1
	popax
	add rright,$a
	pop rright
	push $2
	popax
	add rtop,$a
	pop rtop
	push $2
	popax
	add rbottom,$a
	pop rbottom
	push $1
	popax
	add rborx,$a
	pop rborx
	push $2
	popax
	add rbory,$a
	pop rbory
	push $1
	popax
	add icamx,$a
	pop icamx
	push $2
	popax
	add icamy,$a
	pop icamy
	push $1
	push $2
	call grbgrs,shift
	end method
	end class

	class classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "but"
	cthis setadvbutmets
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "but"
	clparent classadvbut,setasbutton2
	end method
	method setasbutton2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "setadvbutmets"
	push "setadvbutmets"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbuttyp"
	push "setbuttyp"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setadvbutpos"
	push "setadvbutpos"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutdir"
	push "setbutdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase1"
	push "setbutbase1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase2"
	push "setbutbase2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setbutbase"
	push "setbutbase"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbase1"
	push "getbase1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbase2"
	push "getbase2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbutdir"
	push "getbutdir"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getbutname"
	push "getbutname"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettyp"
	push "gettyp"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "reachable"
	push "reachable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setreach"
	push "setreach"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getgox"
	push "getgox"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getgoy"
	push "getgoy"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "enable"
	push "enable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "disable"
	push "disable"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "enabled"
	push "enabled"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "moveon"
	push "moveon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "moveoff"
	push "moveoff"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "clickon"
	push "clickon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "lrel"
	push "lrel"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setadvbutmets
	push $1
	spushs
	push 1
	spop $a
	call [$a],setreach
	end method
	method setadvbutmets
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_styp
	push $2
	pop _styp
	new string,_sname
	push $1
	pop _sname
	new int,igox
	cthis getposx
	pop igox
	new int,igoy
	cthis getposy
	pop igoy
	new string,sgox
	push "null"
	pop sgox
	new string,sgoy
	push "null"
	pop sgoy
	new string,_sbutdir
	push "auto"
	pop _sbutdir
	new string,_sbase1
	push "look:"
	push 1
	call modadv,get
	pop _sbase1
	new string,_sbase2
	push "look:"
	push 2
	call modadv,get
	pop _sbase2
	new int,breachable
	push 0
	pop breachable
	cthis enable
	end method
	method enable
	cthis getname
	call grbuts,addonce
	end method
	method disable
	cthis getname
	call grbuts,remove
	end method
	method enabled
	cthis getname
	call grbuts,contains
	ret
	end method
	method setbutbase
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sbase1
	push $2
	pop _sbase2
	end method
	method setreach
	localint $1
	pop $1
	push $1
	pop breachable
	end method
	method reachable
	push breachable
	ret
	end method
	method setbuttyp
	localstring $1
	pop $1
	push $1
	pop _styp
	end method
	method lrel
	end method
	method clickon
	cthis reachable
	cmp0
	je l1132
	cthis getname
	call clwalkq,visit
l1132:
	end method
	method moveon
	call advmouse,setactive
	end method
	method moveoff
	call advmouse,setstd
	end method
	method setadvbutpos
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sgox
	push $2
	pop sgoy
	push $1
	pop igox
	push $2
	pop igoy
	end method
	method setbutdir
	localstring $1
	pop $1
	push $1
	pop _sbutdir
	end method
	method setbutbase1
	localstring $1
	pop $1
	push $1
	pop _sbase1
	end method
	method setbutbase2
	localstring $1
	pop $1
	push $1
	pop _sbase2
	end method
	method getbase1
	push _sbase1
	ret
	end method
	method getbase2
	push _sbase2
	ret
	end method
	method getbutdir
	push _sbutdir
	ret
	end method
	method getbutname
	push _sname
	ret
	end method
	method gettyp
	push _styp
	ret
	end method
	method getgox
	push sgox
	push "-hero"
	cmpje
	cmp0
	je l1134
	push sgoy
	push "main"
	cmpje
	cmp0
	je l1136
	push smainhero
	spushs
	spop $a
	call [$a],getposx
	jmp l1135
l1136:
	push sgoy
	spushs
	spop $a
	call [$a],getposx
l1135:
	ret
	jmp l1133
l1134:
	push igox
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	ret
l1133:
	end method
	method getgoy
	push sgox
	push "-hero"
	cmpje
	cmp0
	je l1138
	push sgoy
	push "main"
	cmpje
	cmp0
	je l1140
	push smainhero
	spushs
	spop $a
	call [$a],getposy
	jmp l1139
l1140:
	push sgoy
	spushs
	spop $a
	call [$a],getposy
l1139:
	ret
	jmp l1137
l1138:
	push igoy
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	ret
l1137:
	end method
	method getposx
	push 0
	ret
	end method
	method getposy
	push 0
	ret
	end method
	method getz
	push 0
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 0
	ret
	end method
	end class

	class classadvitem
	parent classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "item"
	clparent classadvbut,init
	push "take:"
	push 1
	call modadv,get
	push "take:"
	push 2
	call modadv,get
	cthis setbutbase
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "item"
	clparent classadvbut,setasbutton2
	push $1
	spushs
	push "take:"
	push 1
	call modadv,get
	push "take:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	end method
	end class

	class classadvdoors
	parent classadvbut
	method init
	localstring $1
	pop $1
	push $1
	push "doors"
	clparent classadvbut,init
	push "doors:"
	push 1
	call modadv,get
	push "doors:"
	push 2
	call modadv,get
	cthis setbutbase
	end method
	method setasbutton
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "doors"
	clparent classadvbut,setasbutton2
	push $1
	spushs
	push "moveon"
	push "moveon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "doors:"
	push 1
	call modadv,get
	push "doors:"
	push 2
	call modadv,get
	spop $a
	call [$a],setbutbase
	end method
	method moveon
	call advmouse,setexit
	end method
	end class

	class classbehhero
	method init
	new string,_snextbeh
	push "null"
	pop _snextbeh
	new string,_stdfinfun
	push "null"
	pop _stdfinfun
	new string,_stdfinobj
	push "null"
	pop _stdfinobj
	new string,_stype
	push "null"
	pop _stype
	new string,_scaller
	new int,bblock
	push 1
	pop bblock
	new int,bonce
	push 0
	pop bonce
	new int,bparal
	push 0
	pop bparal
	end method
	method gonext
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	push bparal
	cmp0
	je l1142
	push _sstarter
	spushs
	cthis getname
	spop $a
	call [$a],behret
	pop $2
	jmp l1141
l1142:
	push _sstarter
	spushs
	spop $a
	call [$a],isenumer
	cmp0
	je l1144
	push _sstarter
	cthis getname
	cmpjne
	jmp l1146
l1144:
	push 0
	jmp l1146
l1145:
	push 1
l1146:
	cmp0
	je l1147
	push 1
	pop $2
	jmp l1143
l1147:
	push _snextbeh
	push "null"
	cmpjne
	cmp0
	je l1149
	push _snextbeh
	spushs
	push $1
	spop $a
	call [$a],eval
	jmp l1148
l1149:
	push 1
	pop $2
l1148:
l1143:
l1141:
	push $2
	cmp0
	je l1151
	push $1
	cthis finishbeh
l1151:
	end method
	method finishbeh
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l1153
	push $1
	spushs
	spop $a
	call [$a],reteval
	jmp l1152
l1153:
	call modstnd,resume
	localstring $2
	cthis getactbeh
	pop $2
	push _sstarter
	spushs
	spop $a
	call [$a],callbehfin
	cthis getactbeh
	push $2
	cmpje
	cmp0
	je l1155
	push "null"
	cthis setactbeh
l1155:
l1152:
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setfinfun
	cthis advgetlock
	pop _bmslock
	push bblock
	cthis advmssetlock
	call modstnd,pause
	push "null"
	cthis eval
	end method
	method eval
	localstring $1
	pop $1
	cthis getname
	cthis setactbeh
	push $1
	pop _scaller
	cthis _eval
	end method
	method rewind
	push bblock
	push 0
	cmpje
	cmp0
	jne l1158
	push igmdebug
	jmp l1159
l1157:
	push 0
	jmp l1159
l1158:
	push 1
l1159:
	cmp0
	je l1160
	cthis _rew
l1160:
	end method
	method reteval
	push _scaller
	cthis gonext
	end method
	method callbehfin
	push _bmslock
	cthis advmssetlock
	push _stdfinobj
	push _stdfinfun
	cthis callfun
	push "null"
	pop _stdfinobj
	push "null"
	pop _stdfinfun
	cthis getname
	spushs
	push _sbeh
	spop $a
	call $a,strsubbs
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _evalscript
	push _sscr
	spushs
	push _sfun2
	spop $a
	call [$a],call
	cthis reteval
	end method
	method _rewscript
	end method
	method _evalmet
	push _sob2
	push _sfun2
	cthis callfun
	cthis reteval
	end method
	method _rewmet
	end method
	method _evalsave
	push ssavvar
	push ssavval
	call clsave,_set
	cthis reteval
	end method
	method _rewsave
	end method
	method _evalgame
	push _sgame
	push sgmglobpath
	cthis playnewgamepath
	cthis reteval
	end method
	method _rewgame
	end method
	method _evalread
	push _sread
	push _ix
	push _iy
	push _sdir
	call clhilarytxt,herosaydir
	end method
	method _rewread
	call clhilarytxt,stop
	cthis reteval
	end method
	method _evalwait
	call timwait,play
	end method
	method _rewwait
	push 1
	call timwait,stop
	end method
	method _evaltalk
	push _san
	cthis advanstand
	localstring $1
	push _stalkpref
	push _san
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	call modadv,gettalktype
	spop $a
	call [$a],settalktype
	push $1
	spushs
	push __swav
	spop $a
	call [$a],setsnd
	push $1
	spushs
	push __sbase
	spop $a
	call [$a],checkamounts
	push $1
	spushs
	push isort
	push bstt
	push bstp
	cthis getname
	push "reteval"
	push $1
	spushs
	push _sdir
	spop $a
	call [$a],getpropdir
	spop $a
	call [$a],herosaydir
	end method
	method _rewtalk
	push _stalkpref
	push _san
	pop $b
	popax
	add $a,$b
	spushs
	push 1
	spop $a
	call [$a],stop
	end method
	method _evalsetpos
	localint $1
	localint $2
	localstring $3
	push _spathpref
	push _san
	pop $b
	popax
	add $a,$b
	pop $3
	push _idestx
	push "-id"
	cmpje
	cmp0
	je l1162
	push $3
	spushs
	push _idesty
	spop $a
	call [$a],getbyname
	pop $2
	push $3
	spushs
	push $2
	spop $a
	call [$a],getxver
	pop $1
	push $3
	spushs
	push $2
	spop $a
	call [$a],getyver
	pop $2
	push _san
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	jmp l1161
l1162:
	push _idestx
	pop $1
	push _idesty
	pop $2
	push _san
	spushs
	push $1
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
l1161:
	push $3
	call engine,varexist
	cmp0
	je l1164
	push $3
	spushs
	spop $a
	call [$a],scalean
l1164:
	cthis reteval
	end method
	method _rewsetpos
	end method
	method _evalwalk
	localint $1
	localint $2
	push _idestx
	push "-id"
	cmpje
	cmp0
	je l1166
	push _sptf
	spushs
	push _idesty
	spop $a
	call [$a],getbyname
	pop $2
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getxver
	push _sptf
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $1
	push _sptf
	spushs
	push $2
	spop $a
	call [$a],getyver
	push _sptf
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $2
	jmp l1165
l1166:
	push _idestx
	pop $1
	push _idesty
	pop $2
l1165:
	push _sptf
	spushs
	push $1
	call clcamera,getposx
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	add $a,$b
	cthis getname
	push "reteval"
	spop $a
	call [$a],herowalkto2
	end method
	method _rewwalk
	end method
	method _evalanorder
	push _san
	cthis advanstand
	push _sdb
	push _irow
	push _icol
	push _san
	cthis analizeaninstr
	popax
	cthis reteval
	end method
	method _rewanorder
	end method
	method _evalanplay
	push _san
	cthis advanstand
	push _san
	spushs
	push 1
	spop $a
	call [$a],thisfinish
	push _san
	spushs
	push _sact
	cthis getname
	push "reteval"
	spop $a
	call [$a],playspec2
	end method
	method _rewanplay
	push _san
	spushs
	push 1
	spop $a
	call [$a],stop
	end method
	method _evalsndbg
	call _sndbg,play
	cthis reteval
	end method
	method _rewsndbg
	end method
	method _evalsndplay
	call sndp,play
	end method
	method _rewsndplay
	push 1
	call sndp,stop
	end method
	method _evalcall
	localstring $1
	push scallobj
	pop $1
	push "$"
	call $1,contains
	cmp0
	je l1168
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l1170
	push $1
	popax
	mov $a,[$a]
	psax
	jmp l1169
l1170:
	push sscript
	spushs
	push $1
	spop $a
	call [$a],get
l1169:
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1172
	cthis reteval
	ret
l1172:
l1168:
	push $1
	cthis getbeh
	pop $1
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],eval
	end method
	method _rewcall
	end method
	method _evalnull
	cthis reteval
	end method
	method _rewnull
	end method
	method _evalstart
	localint $1
	localstring $2
	push bonce
	cmp0
	je l1174
	cthis getname
	spushs
	push _sbeh
	spop $h
	call $h,strsubbs
	pop $2
	push $2
	call clsave,bis
	neg
	cmp0
	je l1176
	push $2
	call clsave,bset
	jmp l1175
l1176:
	push _scaller
	cthis finishbeh
	ret
l1175:
l1174:
	push iisifsave
	push 0
	cmpje
	cmp0
	je l1178
	push sisifsave
	push sisifvar
	call clsave,_is
	jmp l1180
l1178:
	push 0
	jmp l1180
l1179:
	push 1
l1180:
	cmp0
	jne l1182
	push iisifsave
	push 1
	cmpje
	cmp0
	je l1183
	push sisifsave
	push sisifvar
	call clsave,_is
	neg
	jmp l1185
l1183:
	push 0
	jmp l1185
l1184:
	push 1
l1185:
	jmp l1186
l1181:
	push 0
	jmp l1186
l1182:
	push 1
l1186:
	cmp0
	je l1187
	push _scaller
	cthis finishbeh
	ret
l1187:
	push brand
	cmp0
	je l1189
	call vecbehs,size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l1191
	push $1
	call $1,rand
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l1190
l1191:
	cthis reteval
l1190:
	jmp l1188
l1189:
	push bparal
	cmp0
	je l1193
	push "vecbehs"
	call vecbehs2,veccopy
	push 0
	pop $1
l1194:
	push $1
	call vecbehs,size
	cmpjl
	cmp0
	je l1195
	jmp l1197
l1196:
	add $1,1
	pop $1
	jmp l1194
l1197:
	push $1
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l1196
l1195:
	jmp l1192
l1193:
	push ienumer
	push 0
	cmpja
	cmp0
	je l1199
	cthis nextenum
	push 1
	pop $b
	popax
	sub $a,$b
	call vecbehs,get
	spushs
	push _scaller
	spop $a
	call [$a],eval
	jmp l1198
l1199:
	cthis reteval
l1198:
l1192:
l1188:
	end method
	method _rewstart
	end method
	method settype
	localstring $1
	pop $1
	push $1
	pop _stype
	push "_eval"
	push "_eval"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addmethod
	push "_rew"
	push "_rew"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addmethod
	end method
	method setflags
	localstring $1
	pop $1
	push $1
	pop _snextbeh
	end method
	method setfinfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _stdfinobj
	push $2
	pop _stdfinfun
	end method
	method setasstarter
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "start"
	cthis settype
	new string,_sstarter
	cthis getname
	pop _sstarter
	new int,brand
	push $2
	pop brand
	new int,_bmslock
	new vector,vecbehs
	push $4
	pop bblock
	push "string"
	call vecbehs,type
	push $1
	pop bonce
	push $3
	pop bparal
	new int,ienumer
	push $5
	pop ienumer
	push $5
	push 0
	cmpja
	cmp0
	je l1201
	new int,_iencnt
	push 1
	pop _iencnt
	jmp l1200
l1201:
	push $3
	cmp0
	je l1203
	new vector,vecbehs2
	push "string"
	call vecbehs2,type
l1203:
l1200:
	new int,iisifsave
	push $6
	pop iisifsave
	push $6
	push 0
	cmpjae
	cmp0
	je l1205
	new string,sisifsave
	push $7
	pop sisifsave
	push $8
	push "null"
	cmpjne
	cmp0
	je l1207
	new string,sisifvar
	push $8
	pop sisifvar
l1207:
l1205:
	end method
	method isenumer
	push ienumer
	ret
	end method
	method nextenum
	push _iencnt
	call vecbehs,size
	cmpja
	cmp0
	je l1209
	push ienumer
	push 1
	pop $b
	popax
	add $a,$b
	pop _iencnt
	jmp l1208
l1209:
	add _iencnt,1
	pop _iencnt
l1208:
	push _iencnt
	push 1
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method addtostarter
	localstring $1
	pop $1
	push $1
	call vecbehs,add
	end method
	method getblock
	push bblock
	ret
	end method
	method addflags
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,_sstarter
	push $1
	pop _sstarter
	push _stype
	push "read"
	cmpje
	cmp0
	je l1211
	push 0
	jmp l1210
l1211:
	push $2
l1210:
	pop bblock
	push $3
	pop bparal
	end method
	method behret
	localstring $1
	pop $1
	push $1
	call vecbehs2,remove
	call vecbehs2,size
	push 0
	cmpje
	ret
	end method
	method setasscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "script"
	cthis settype
	new string,_sscr
	push $1
	pop _sscr
	new string,_sfun2
	push $2
	pop _sfun2
	end method
	method setasmet
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "met"
	cthis settype
	new string,_sob2
	push $1
	pop _sob2
	new string,_sfun2
	push $2
	pop _sfun2
	end method
	method setassaver
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "save"
	cthis settype
	new string,ssavvar
	push $1
	pop ssavvar
	new string,ssavval
	push $2
	pop ssavval
	end method
	method setasnewgamer
	localstring $1
	pop $1
	push "game"
	cthis settype
	new string,_sgame
	push $1
	pop _sgame
	end method
	method setasreader
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "read"
	cthis settype
	new string,_sread
	push $1
	pop _sread
	new int,_ix
	push $2
	pop _ix
	new int,_iy
	push $3
	pop _iy
	new string,_sdir
	push $4
	pop _sdir
	end method
	method setaswaiter
	localint $1
	pop $1
	push "wait"
	cthis settype
	new timer,timwait
	push 1
	call timwait,settick
	push $1
	call timwait,delay
	cthis getname
	push "reteval"
	call timwait,_csplbuild
	push "onfinish"
	push "_csplfinish"
	call timwait,addmethod
	end method
	method setassndbg
	localstring $1
	pop $1
	push "sndbg"
	cthis settype
	new snd,_sndbg
	push 0
	push 1
	call _sndbg,setstartstopflag
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call _sndbg,load
	end method
	method setasanorder
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "anorder"
	cthis settype
	new string,_sdb
	push $1
	pop _sdb
	new int,_irow
	push $2
	pop _irow
	new int,_icol
	push $3
	pop _icol
	new string,_san
	push $4
	pop _san
	end method
	method setascaller
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "call"
	cthis settype
	new string,scallobj
	push $1
	pop scallobj
	new string,sscript
	push $2
	pop sscript
	end method
	method _csplbuild
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sobj
	push $1
	pop _sobj
	new string,_sfinfun
	push $2
	pop _sfinfun
	end method
	method _csplfinish
	push _sobj
	push _sfinfun
	cthis callfun
	end method
	method setassndplayer
	localstring $1
	pop $1
	push "sndplay"
	cthis settype
	new snd,sndp
	push 0
	push 1
	call sndp,setstartstopflag
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call sndp,load
	cthis getname
	push "reteval"
	call sndp,_csplbuild
	push "onfinish"
	push "_csplfinish"
	call sndp,addmethod
	end method
	method setasposer
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push "setpos"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,_idestx
	push $2
	pop _idestx
	new int,_idesty
	push $3
	pop _idesty
	end method
	method setaswalker
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push "walk"
	cthis settype
	new string,_sptf
	push $1
	pop _sptf
	new string,_idestx
	push $2
	pop _idestx
	new int,_idesty
	push $3
	pop _idesty
	end method
	method setasanplayer
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "anplay"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,_sact
	push $2
	pop _sact
	end method
	method setastalker
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "talk"
	cthis settype
	new string,_san
	push $1
	pop _san
	new string,__swav
	push $2
	pop __swav
	new string,__sbase
	push $3
	pop __sbase
	new int,isort
	push $4
	pop isort
	new int,bstt
	push $5
	pop bstt
	new int,bstp
	push $6
	pop bstp
	new string,_sdir
	push $7
	pop _sdir
	end method
	end class

	class classadvpocket
	parent classadvobject
	parent classadvbut
	parent gmimgvec
	method init
	localstring $1
	pop $1
	clparent classadvobject,init
	push $1
	clparent classadvbut,init
	clparent gmimgvec,init
	push "pocket"
	cthis setbuttyp
	new int,iX
	new int,iY
	new int,iNumItems
	push 0
	pop iNumItems
	new int,iMaxItems
	push 14
	pop iMaxItems
	new int,iScale
	new string,sState
	push "closed"
	pop sState
	new string,_sanim
	cthis getname
	pop _sanim
	push _spocketpref
	call _sanim,strsubbs
	pop _sanim
	new string,sItem
	push "null"
	pop sItem
	new string,sFocusItem
	push "null"
	pop sFocusItem
	new string,_sbase
	push "anpocket"
	pop _sbase
	new int,_ibase
	call _sbase,length
	pop _ibase
	push 1000
	cthis setz
	new string,sitempath
	new vector,arPocket
	push "string"
	call arPocket,type
	push "tim"
	push 1
	push 1
	push "evalpocket"
	cthis cnewtimercyclefin
	push "itempath:"
	push 1
	call modadv,get
	pop sitempath
	localint $2
	cthis getz
	pop $2
	new anima,imitem
	call imitem,anloopfin
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	call imitem,setz
	new img,immarker
	push sitempath
	push "itemmarker.png"
	pop $b
	popax
	add $a,$b
	call immarker,load
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	call immarker,setz
	call immarker,hide
	cthis hide
	new int,bskip
	push 0
	pop bskip
	end method
	method addtoadv
	cthis getname
	cthis addtogamevars
	cthis enable
	cthis addasadvobject
	end method
	method removefromadv
	cthis disable
	cthis removefromadvobjs
	end method
	method hidepocket
	push sState
	push "closed"
	cmpjne
	cmp0
	je l1213
	push sState
	push "close"
	cmpjne
	cmp0
	je l1215
	cthis pockettoggle
	push 0
	call tim,stop
l1215:
l1216:
	push sState
	push "closed"
	cmpjne
	cmp0
	je l1217
	call tim,evalpocket
	push 0
	call tim,stop
	jmp l1216
l1217:
l1213:
	end method
	method skip
	push 1
	pop bskip
	end method
	method skipitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l1219
	push 1
	pop bskip
l1219:
	end method
	method additem
	localstring $1
	pop $1
	push $1
	call arPocket,add
	localstring $2
	push _sbase
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	cthis add
	push $2
	spushs
	push sitempath
	push $1
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $2
	spushs
	push "in"
	push 0
	spop $a
	call [$a],setframe
	push $2
	spushs
	cthis getz
	spop $a
	call [$a],setz
	push $2
	spushs
	spop $a
	call [$a],hide
	add iNumItems,1
	pop iNumItems
	end method
	method removeitem
	localstring $1
	pop $1
	push _sbase
	call $1,strsubbs
	call arPocket,remove
	push $1
	cthis remove
	sub iNumItems,1
	pop iNumItems
	push sState
	push "opened"
	cmpje
	cmp0
	je l1221
	cthis hide
l1221:
	end method
	method useitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l1223
	push sItem
	cthis removeitem
	cthis itemhide
l1223:
	end method
	method evalpocket
	cthis play
	push sState
	push "open"
	cmpje
	cmp0
	je l1225
	push 16
	popax
	add iScale,$a
	pop iScale
	jmp l1224
l1225:
	push sState
	push "close"
	cmpje
	cmp0
	je l1227
	push 16
	popax
	sub iScale,$a
	pop iScale
l1227:
l1224:
	push iScale
	push 116
	cmpja
	cmp0
	je l1229
	push 0
	cthis stop
	push 116
	pop iScale
	push "opened"
	pop sState
	jmp l1228
l1229:
	push iScale
	push 0
	cmpjl
	cmp0
	je l1231
	push 0
	cthis stop
	push 0
	pop iScale
	push "closed"
	pop sState
l1231:
l1228:
	localreal $1
	push iScale
	push iScale
	pop $b
	popax
	mul $a,$b
	push 550
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	localreal $2
	localstring $3
	localint $4
	push 0
	pop $4
l1232:
	push $4
	push iNumItems
	cmpjl
	cmp0
	je l1233
	jmp l1235
l1234:
	add $4,1
	pop $4
	jmp l1232
l1235:
	push $1
	push $4
	pop $b
	popax
	mul $a,$b
	push $1
	push iNumItems
	pop $b
	popax
	mul $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push 90.0
	pop $b
	popax
	sub $a,$b
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $2
	push $4
	cthis get
	pop $3
	push $3
	spushs
	call $2,cos
	push iScale
	pop $b
	popax
	mul $a,$b
	push iX
	pop $b
	popax
	add $a,$b
	push 76
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call $2,sin
	push iScale
	pop $b
	popax
	mul $a,$b
	push iY
	pop $b
	popax
	add $a,$b
	push 75
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $3
	spushs
	spop $a
	call [$a],show
	jmp l1234
l1233:
	push sState
	push "closed"
	cmpje
	cmp0
	je l1237
	cthis hide
l1237:
	end method
	method pocketpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push iX
	pop $b
	popax
	sub $a,$b
	pop $3
	localint $4
	push $2
	push iY
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	cthis move
	push $1
	pop iX
	push $2
	pop iY
	end method
	method pockettoggle
	push sState
	push "opened"
	cmpje
	cmp0
	je l1239
	push "close"
	pop sState
	call immarker,hide
	call tim,play
	jmp l1238
l1239:
	push sState
	push "closed"
	cmpje
	cmp0
	je l1241
	push "open"
	pop sState
	push _sanim
	spushs
	spop $a
	call [$a],getposx
	pop iX
	push _sanim
	spushs
	spop $a
	call [$a],getposy
	push _sanim
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop iY
	cthis itemhide
	cthis show
	call tim,evalpocket
	call tim,play
	jmp l1240
l1241:
	push sState
	push "open"
	cmpje
	cmp0
	je l1243
	push "close"
	pop sState
	jmp l1242
l1243:
	push sState
	push "close"
	cmpje
	cmp0
	je l1245
	push "open"
	pop sState
l1245:
l1242:
l1240:
l1238:
	end method
	method getitem
	push sItem
	push "null"
	cmpjne
	cmp0
	je l1247
	push _sbase
	call sItem,strsubbs
	jmp l1246
l1247:
	push "null"
l1246:
	ret
	end method
	method itemhide
	push "null"
	pop sFocusItem
	push "null"
	pop sItem
	push 0
	call imitem,stop
	call imitem,hide
	end method
	method itemclick
	cthis skip
	push sState
	push "closed"
	cmpje
	cmp0
	je l1249
	cthis pockettoggle
	jmp l1248
l1249:
	push sState
	push "opened"
	cmpje
	cmp0
	je l1251
	push sFocusItem
	push "null"
	cmpjne
	cmp0
	je l1253
	push sFocusItem
	pop sItem
	push sItem
	call imitem,copy
	push sFocusItem
	spushs
	spop $a
	call [$a],hide
	push "out"
	call imitem,play
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call imitem,setz
	cthis setitempos
	cthis pockettoggle
	jmp l1252
l1253:
	cthis pockettoggle
l1252:
	jmp l1250
l1251:
	push sState
	push "open"
	cmpje
	cmp0
	je l1255
	cthis pockettoggle
	jmp l1254
l1255:
	push sState
	push "close"
	cmpje
	cmp0
	je l1257
	cthis pockettoggle
l1257:
l1254:
l1250:
l1248:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	push $2
	push $3
	push $4
	clparent gmimgvec,isin
	pop $5
	push $5
	cmp0
	je l1259
	push $5
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	pop sFocusItem
	jmp l1258
l1259:
	push "null"
	pop sFocusItem
	push _sanim
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	pop $5
l1258:
	push $5
	ret
	end method
	method setitempos
	call mouse,getpx
	push 76
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call mouse,getpy
	push 75
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call imitem,setpos
	end method
	method itemmoveoff
	push sState
	push "opened"
	cmpje
	cmp0
	je l1261
	call immarker,hide
l1261:
	end method
	method itemmoveon
	push sState
	push "opened"
	cmpje
	cmp0
	je l1263
	push sFocusItem
	push "null"
	cmpjne
	cmp0
	je l1265
	call immarker,show
	push sFocusItem
	spushs
	spop $a
	call [$a],getpx
	push sFocusItem
	spushs
	spop $a
	call [$a],getpy
	call immarker,setpos
l1265:
l1263:
	end method
	method onmouselclick
	localint $1
	localint $2
	pop $2
	pop $1
	push bskip
	cmp0
	je l1267
	push 0
	pop bskip
	jmp l1266
l1267:
	push sState
	push "opened"
	cmpje
	cmp0
	jne l1269
	push sState
	push "open"
	cmpje
	jmp l1270
l1268:
	push 0
	jmp l1270
l1269:
	push 1
l1270:
	cmp0
	je l1272
	cthis pockettoggle
	jmp l1271
l1272:
	cthis itemhide
l1271:
l1266:
	end method
	method onmousemove
	localint $1
	localint $2
	pop $2
	pop $1
	push sItem
	push "null"
	cmpjne
	cmp0
	je l1274
	cthis setitempos
l1274:
	push sState
	push "opened"
	cmpje
	cmp0
	je l1276
	push $1
	push $2
	push 1
	push 1
	cthis isin
	jmp l1278
l1276:
	push 0
	jmp l1278
l1277:
	push 1
l1278:
	cmp0
	je l1279
	cthis itemmoveon
l1279:
	end method
	method moveoff
	call advmouse,setstd
	cthis itemmoveoff
	end method
	method clickon
	cthis itemclick
	end method
	end class

	new string,sgmlastscene
	new string,sgmglobpath
	new string,sgmgame
	new db,gdbsound
	new classfullsave,clsave
	module modadv
	method init
	new db,dbload
	new string,stalktype
	push "snd"
	cthis settalktype
	push "null"
	new Script,scrl
	new string,_stalk
	end method
	method execute
	localstring $1
	pop $1
	push $1
	call scrl,call
	end method
	method loadscript
	localstring $1
	pop $1
	push $1
	call scrl,load
	end method
	method loadsounds
	localstring $1
	pop $1
	push $1
	call gdbsound,load
	end method
	method gettalktype
	push stalktype
	ret
	end method
	method settalktype
	localstring $1
	pop $1
	push $1
	pop stalktype
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbload,loadscript
	push "talk:"
	push 1
	cthis get
	pop _stalk
	end method
	method get
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbload,findbyrow
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1281
	push "modadv.dbload: can't find "
	push $1
	pop $b
	popax
	add $a,$b
	call engine,print
	push "null"
	ret
	jmp l1280
l1281:
	push $3
	push $2
	call dbload,get
	ret
l1280:
	end method
	end module

	module modadvglob
	method init
	new gmobjvec,grhero
	end method
	method addhero
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	call grhero,contains
	cmp0
	je l1283
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $3
	cmp0
	je l1285
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],addtoadv
l1285:
	push 0
	ret
	jmp l1282
l1283:
	push $1
	push $2
	push 0
	cthis newanima
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	call grhero,add
	push $3
	cmp0
	je l1287
	localstring $4
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	push $4
	spop $e
	new classadvpocket,[$e]
	push $4
	spushs
	push $4
	spop $a
	call [$a],addtogamevars
l1287:
	push 1
	ret
l1282:
	end method
	method delhero
	localstring $1
	pop $1
	push $1
	call grhero,contains
	cmp0
	je l1289
	push $1
	spushs
	spop $d
	delete [$d]
	push $1
	call grhero,remove
	push _spocketpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1291
	push $1
	spushs
	spop $d
	delete [$d]
l1291:
l1289:
	end method
	method onexit
	localstring $1
	localint $2
	push 0
	pop $2
l1292:
	push $2
	call grhero,size
	cmpjl
	cmp0
	je l1293
	jmp l1295
l1294:
	add $2,1
	pop $2
	jmp l1292
l1295:
	push $2
	call grhero,get
	pop $1
	push $1
	spushs
	push 0
	spop $a
	call [$a],stop
	push $1
	spushs
	spop $a
	call [$a],hide
	push _spathpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $a
	call [$a],unlinkanima
	push $1
	spushs
	spop $a
	call [$a],hidepocket
	jmp l1294
l1293:
	end method
	end module

	class classloadedhero
	method init
	new string,sanhero
	new int,bplaystart
	push 0
	pop bplaystart
	new int,bplaystop
	push 0
	pop bplaystop
	end method
	method setplaystart
	localint $1
	pop $1
	push $1
	pop bplaystart
	end method
	method setplaystop
	localint $1
	pop $1
	push $1
	pop bplaystop
	end method
	method getstartstop
	push bplaystart
	push bplaystop
	ret
	end method
	end class

	class classadvcontroller
	parent classadv
	method init
	clparent classadv,init
	push "sndpath:"
	push 1
	call modadv,get
	cthis setwavpath
	new string,_slhpref
	push "cllh"
	pop _slhpref
	new string,_spathpref
	push "pt"
	pop _spathpref
	new string,_spocketpref
	push "pc"
	pop _spocketpref
	new string,_sstndpref
	push "stnd"
	pop _sstndpref
	new string,_stalkpref
	push "ctlk"
	pop _stalkpref
	new classstndgroup,modstnd
	push "_dbbh"
	new classobjcounter,clcbeh
	new string,_sbeh
	push "clbeh"
	pop _sbeh
	new int,iidbeh
	push "dbadv"
	new classobjcounter,clcadv
	new db,dbmacros
	new vector,_vecarg
	push "string"
	call _vecarg,type
	new classadvcamera,clcamera
	push "advmsmove"
	call clcamera,setmetonmsmove
	new classwalkerqueue,clwalkq
	new gmimgvec,grbuts
	new gmimgvec,grmsmove
	new gmimgvec,grmslclick
	new gmimgvec,grmslrel
	new string,_susetool
	push "null"
	pop _susetool
	new string,_slastms
	push "null"
	pop _slastms
	new int,bmslock
	push 0
	pop bmslock
	new string,sactbeh
	push "null"
	pop sactbeh
	new string,slastpathf
	new int,licznik
	push 0
	pop licznik
	new string,smainhero
	push "null"
	pop smainhero
	localstring $1
	localstring $2
	push sgmgame
	push "null"
	cmpje
	cmp0
	je l1297
	cthis getname
	pop sgmgame
l1297:
	new string,sprivgame
	push sgmgame
	pop sprivgame
	push "null"
	pop sgmgame
	push "game"
	call sprivgame,strsubbs
	pop $2
	push sgmglobpath
	push "null"
	cmpjne
	cmp0
	je l1299
	push sgmglobpath
	pop $1
	push "null"
	pop sgmglobpath
	jmp l1298
l1299:
	push $2
	pop $1
l1298:
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	push $2
	push ".adv"
	pop $b
	popax
	add $a,$b
	cthis loadadventure
	call grbuts,sortimgs
	push smainhero
	push "null"
	cmpje
	cmp0
	je l1301
	call clcamera,getactor
	pop smainhero
l1301:
	call clcamera,start
	call clcamera,setscene
	call clwalkq,start
	push 1
	call clwalkq,setverlen
	call advmouse,setstd
	push sprivgame
	push "visited"
	pop $b
	popax
	add $a,$b
	call clsave,_bis
	cmp0
	je l1303
	push "behinit_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l1305
	jmp l1304
l1305:
	push "behinit"
	cthis playpostinit
	cmp0
	je l1307
l1307:
l1304:
	jmp l1302
l1303:
	push sprivgame
	push "visited"
	pop $b
	popax
	add $a,$b
	call clsave,_bset
	push "behinit0_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l1309
	jmp l1308
l1309:
	push "behinit0"
	cthis playpostinit
	cmp0
	je l1311
	jmp l1310
l1311:
	push "behinit_FROM_"
	push sgmlastscene
	pop $b
	popax
	add $a,$b
	cthis playpostinit
	cmp0
	je l1313
	jmp l1312
l1313:
	push "behinit"
	cthis playpostinit
	cmp0
	je l1315
l1315:
l1312:
l1310:
l1308:
l1302:
	call grbuts,sortimgs
	end method
	method getmainhero
	push smainhero
	ret
	end method
	method setmainhero
	localstring $1
	pop $1
	push $1
	pop smainhero
	end method
	method ismainhero
	localstring $1
	pop $1
	push smainhero
	push $1
	cmpje
	ret
	end method
	method setactbeh
	localstring $1
	pop $1
	push $1
	pop sactbeh
	end method
	method getactbeh
	push sactbeh
	ret
	end method
	method advgetlock
	push bmslock
	ret
	end method
	method advmslock
	push 1
	pop bmslock
	call advmouse,setwait
	end method
	method advmsunlock
	push 0
	pop bmslock
	call advmouse,setstd
	end method
	method advmssetlock
	localint $1
	pop $1
	push $1
	cmp0
	je l1317
	cthis advmslock
	jmp l1316
l1317:
	cthis advmsunlock
l1316:
	end method
	method setusetool
	localstring $1
	pop $1
	push $1
	pop _susetool
	end method
	method getusetool
	push _susetool
	ret
	end method
	method playpostinit
	localstring $1
	pop $1
	push $1
	call gameapi,getgamename
	push "postinit"
	cthis playbehobfinif
	ret
	end method
	method playbeh
	localstring $1
	pop $1
	push $1
	push "null"
	cthis playbehfin
	end method
	method playbehif
	localstring $1
	pop $1
	push $1
	cthis behexist
	cmp0
	je l1319
	push $1
	push "null"
	cthis playbehfin
	push 1
	ret
l1319:
	push 0
	ret
	end method
	method playbehfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push "null"
	push $2
	cthis playbehobfin
	end method
	method playbehfinif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis behexist
	cmp0
	je l1321
	push $1
	push $2
	cthis playbehfin
	push 1
	ret
l1321:
	push 0
	ret
	end method
	method playbehobfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis getbeh
	spushs
	push $2
	push $3
	spop $a
	call [$a],playfin
	end method
	method playbehobfinif
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis behexist
	cmp0
	je l1323
	push $1
	push $2
	push $3
	cthis playbehobfin
	push 1
	ret
l1323:
	push 0
	ret
	end method
	method playnewgamepath
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	pop sgmglobpath
	push sprivgame
	pop sgmlastscene
	push $1
	call gameapi,play
	end method
	method playnewgame
	localstring $1
	pop $1
	push $1
	push "null"
	cthis playnewgamepath
	end method
	method playfromscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	pop sgmgame
	push "defaultadv:"
	push 1
	call modadv,get
	push $1
	cthis playnewgamepath
	end method
	method getheroloader
	localstring $1
	pop $1
	push _slhpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l1325
	push $1
	jmp l1324
l1325:
	push "null"
l1324:
	end method
	method advanstand
	localstring $1
	pop $1
	localstring $2
	push _spathpref
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l1327
	push $2
	spushs
	spop $a
	call [$a],iswalking
	jmp l1329
l1327:
	push 0
	jmp l1329
l1328:
	push 1
l1329:
	cmp0
	je l1330
	push $2
	spushs
	push 0
	spop $a
	call [$a],stop
	push $2
	spushs
	spop $a
	call [$a],stand
l1330:
	end method
	method analizeanopts
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $8
	localreal $9
	localstring $10
	localstring $11
	localint $12
	push 0
	pop $12
	localint $13
	push 0
	pop $13
	localint $14
	localint $15
	localint $16
	localint $17
	push 0
	pop $17
l1331:
	push $3
	push $4
	cmpjl
	cmp0
	je l1332
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	spushs
	push "-stt"
	cmpst
	jne l1334
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $12
	add $3,1
	pop $3
	jmp l1333
l1334:
	push "-stp"
	cmpst
	jne l1335
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $13
	add $3,1
	pop $3
	jmp l1333
l1335:
	push "-wav"
	cmpst
	jne l1336
	spop $a
	push _slhpref
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	pop $10
	add $3,1
	pop $3
	push $10
	spushs
	spop $e
	new classloadedhero,[$e]
	push $10
	spushs
	push "sanhero"
	push $5
	spop $a
	call [$a],varset
	push $6
	spushs
	push $10
	spop $a
	call [$a],add
	jmp l1333
l1336:
	push "-path"
	cmpst
	jne l1337
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push _spathpref
	push $5
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	push $5
	push $10
	push $8
	cthis newclpathfcopy
	push $11
	spushs
	spop $a
	call [$a],prepareforhero
	push $11
	push "look"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherolooker,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	push $11
	push "use"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherouser,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	push $11
	push "take"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classherotaker,[$e]
	push $10
	spushs
	push $5
	spop $a
	call [$a],link
	jmp l1333
l1337:
	push "-ft"
	cmpst
	jne l1338
	spop $a
	push _spathpref
	push $5
	pop $b
	popax
	add $a,$b
	pop $11
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $11
	spushs
	spop $a
	call [$a],linkfilter
	push $11
	spushs
	push $8
	spop $a
	call [$a],setzsize
	push $11
	spushs
	push $9
	spop $a
	call [$a],setscalepower
	jmp l1333
l1338:
	push "-stnd"
	cmpst
	jne l1339
	spop $a
	push _sstndpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	spop $a
	call [$a],setdelay
	add $3,1
	pop $3
	jmp l1333
l1339:
	push "-txt"
	cmpst
	jne l1340
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $14
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $15
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $16
	add $3,1
	pop $3
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $15
	push $16
	spop $a
	call [$a],settxtcolor
	jmp l1333
l1340:
	push "-font"
	cmpst
	jne l1341
	spop $a
	push 1
	pop $17
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $7
	push "hero:"
	cmpje
	cmp0
	je l1343
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $10
	push $11
	spop $a
	call [$a],setfont
l1343:
	jmp l1333
l1341:
	spop $a
	push $1
	push $2
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push $5
	cthis analizeaninstr
	pop $3
l1333:
	jmp l1331
l1332:
	push $17
	neg
	cmp0
	je l1345
	push $7
	push "hero:"
	cmpje
	jmp l1347
l1345:
	push 0
	jmp l1347
l1346:
	push 1
l1347:
	cmp0
	je l1348
	push _stalkpref
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push "font:"
	push 1
	call modadv,get
	push "font:"
	push 2
	call modadv,get
	spop $a
	call [$a],setfont
l1348:
	push $6
	spushs
	push "setplaystart"
	push $12
	spop $a
	call [$a],eval1
	push $6
	spushs
	push "setplaystop"
	push $13
	spop $a
	call [$a],eval1
	push $6
	spushs
	spop $a
	call [$a],free
	end method
	method setasadvanima
	cthis getname
	push "cadvherofinish"
	clparent classadvanhero,setashero
	end method
	method analizebut
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	localint $8
	localint $9
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $6
	add $4,1
	pop $4
	push "classadv"
	push 1
	call $1,strsube
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	push $5
	spop $a
	 clparent [$a],setasbutton
	push $6
	spushs
	push $6
	spushs
	spop $a
	call [$a],getcx
	push $6
	spushs
	spop $a
	call [$a],getcy
	spop $a
	call [$a],setadvbutpos
l1349:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1350
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	spushs
	push "-pos"
	cmpst
	jne l1352
	spop $a
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $5
	add $4,1
	pop $4
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	push $5
	push "-id"
	cmpje
	cmp0
	je l1354
	push slastpathf
	push "null"
	cmpjne
	jmp l1356
l1354:
	push 0
	jmp l1356
l1355:
	push 1
l1356:
	cmp0
	je l1357
	push slastpathf
	spushs
	push $7
	spop $a
	call [$a],getbyname
	pop $8
	push slastpathf
	spushs
	push $8
	spop $a
	call [$a],getxver
	push slastpathf
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $5
	push slastpathf
	spushs
	push $8
	spop $a
	call [$a],getyver
	push slastpathf
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $7
l1357:
	push $6
	spushs
	push $5
	push $7
	spop $a
	call [$a],setadvbutpos
	jmp l1351
l1352:
	push "-bs1"
	cmpst
	jne l1358
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase1
	add $4,1
	pop $4
	jmp l1351
l1358:
	push "-bs2"
	cmpst
	jne l1359
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutbase2
	add $4,1
	pop $4
	jmp l1351
l1359:
	push "-dir"
	cmpst
	jne l1360
	spop $a
	push $6
	spushs
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	spop $a
	call [$a],setbutdir
	add $4,1
	pop $4
	jmp l1351
l1360:
	push "-doors"
	cmpst
	jne l1361
	spop $a
	push $6
	spushs
	push "doors"
	spop $a
	call [$a],setbuttyp
	jmp l1351
l1361:
	push "-item"
	cmpst
	jne l1362
	spop $a
	push $6
	spushs
	push "item"
	spop $a
	call [$a],setbuttyp
	jmp l1351
l1362:
	push "-noreach"
	cmpst
	jne l1363
	spop $a
	push $6
	spushs
	push 0
	spop $a
	call [$a],setreach
	jmp l1351
l1363:
	spop $a
l1351:
	jmp l1349
l1350:
	end method
	method loadadventure
	localstring $1
	pop $1
	localstring $2
	call clcadv,get
	pop $2
	localstring $3
	push "grpers"
	call clcadv,size
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	spop $e
	new db,[$e]
	push $2
	spushs
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],loadbeh
	localint $4
	push $2
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localstring $10
	localstring $11
	localint $12
	localint $13
	localint $14
	localreal $15
	localreal $16
	push $2
	push "script"
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	spushs
	push $2
	spop $e
	new Script,[$e]
	localstring $17
	push ""
	pop $17
	push $3
	spushs
	spop $e
	new gmobjvec,[$e]
	localint $18
	push 0
	pop $18
l1364:
	push $18
	push $4
	cmpjl
	cmp0
	je l1365
	jmp l1367
l1366:
	add $18,1
	pop $18
	jmp l1364
l1367:
	push 0
	pop $5
	push $2
	spushs
	push $18
	spop $a
	call [$a],getcolsno
	pop $6
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push "setpath:"
	cmpje
	cmp0
	je l1369
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $17
	cthis setgraphpath
	jmp l1368
l1369:
	push $9
	push "nopath:"
	cmpje
	cmp0
	je l1371
	push ""
	pop $17
	push $17
	cthis setgraphpath
	jmp l1370
l1371:
	push $9
	push "func"
	cmpje
	cmp0
	je l1373
l1374:
	push $2
	spushs
	push $18
	push 0
	spop $a
	call [$a],get
	push "end"
	cmpjne
	cmp0
	je l1375
	add $18,1
	pop $18
	jmp l1374
l1375:
	jmp l1372
l1373:
	push $9
	push "sndpath:"
	cmpje
	cmp0
	je l1377
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	cthis setwavpath
	jmp l1376
l1377:
	push $9
	push "hero:"
	cmpje
	cmp0
	jne l1380
	push $9
	push "an:"
	cmpje
	jmp l1381
l1379:
	push 0
	jmp l1381
l1380:
	push 1
l1381:
	cmp0
	je l1382
	push $2
	spushs
	push $18
	push "-global"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push "-pck"
	spop $a
	call [$a],dbdelvar
	pop $8
	cthis getgraphpath
	pop $17
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	push "hero:"
	cmpje
	cmp0
	je l1384
	push $10
	push "-path"
	cmpje
	cmp0
	je l1386
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $10
	cthis setgraphpath
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	jmp l1385
l1386:
	push "heropath:"
	push 1
	call modadv,get
	cthis setgraphpath
l1385:
l1384:
	push ".pyz"
	call $10,contains
	cmp0
	je l1388
	push $7
	cmp0
	je l1390
	push $11
	push $10
	push $8
	call modadvglob,addhero
	cmp0
	je l1392
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
l1392:
	sub $6,1
	pop $6
	jmp l1389
l1390:
	push $11
	push $10
	push 0
	cthis newanima
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
	push $9
	push "hero:"
	cmpje
	cmp0
	je l1394
	push $8
	jmp l1396
l1394:
	push 0
	jmp l1396
l1395:
	push 1
l1396:
	cmp0
	je l1397
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	spop $e
	new classadvpocket,[$e]
l1397:
l1389:
	jmp l1387
l1388:
	push $10
	push $11
	cthis copyanima
	push $11
	spushs
	spop $a
	call [$a],setasadvanima
	push $9
	push "hero:"
	cmpje
	cmp0
	je l1399
	push $8
	jmp l1401
l1399:
	push 0
	jmp l1401
l1400:
	push 1
l1401:
	cmp0
	je l1402
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	push _spocketpref
	push $11
	pop $b
	popax
	add $a,$b
	spop $e
	new classadvpocket,[$e]
l1402:
l1387:
	push $8
	cmp0
	je l1404
	sub $6,1
	pop $6
l1404:
	push $17
	cthis setgraphpath
	push $9
	push "hero:"
	cmpje
	cmp0
	je l1406
	push _sstndpref
	push $11
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new classadvstander,[$e]
	push $11
	clparent classadvanhero,buildheroframe
	push _stalkpref
	push $11
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new classtalker,[$e]
	push $10
	spushs
	push $11
	spop $a
	call [$a],set
	push $10
	spushs
	push "gdbsound"
	spop $a
	call [$a],settextdb
l1406:
	push $2
	push $18
	push $5
	push $6
	push $11
	push $3
	push $9
	cthis analizeanopts
	jmp l1378
l1382:
	push $9
	push "anaac:"
	cmpje
	cmp0
	je l1408
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $7
	cmp0
	je l1410
	sub $6,1
	pop $6
	push $9
	spushs
	spop $e
	new gmmaskvec,[$e]
	jmp l1409
l1410:
	push $9
	spushs
	spop $e
	new gmimgvec,[$e]
l1409:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $10
	push $9
	push $9
	cthis newanactionsgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1407
l1408:
	push $9
	push "anaf:"
	cmpje
	cmp0
	je l1412
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	spushs
	spop $e
	new gmimgvec,[$e]
	push $10
	push $9
	push $9
	cthis newanfrbyactgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1411
l1412:
	push $9
	push "anfac:"
	cmpje
	cmp0
	je l1414
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $7
	cmp0
	je l1416
	sub $6,1
	pop $6
	push $9
	spushs
	spop $e
	new gmmaskvec,[$e]
	jmp l1415
l1416:
	push $9
	spushs
	spop $e
	new gmimgvec,[$e]
l1415:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $10
	push $9
	push $10
	spushs
	push $11
	spop $a
	call [$a],actionnr
	push $9
	cthis newanframesgr
	pop $7
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1413
l1414:
	push $9
	push "anac:"
	cmpje
	cmp0
	je l1418
	push $2
	spushs
	push $18
	push "-adv"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $10
	push $9
	push $11
	cthis copyanimaact
	push $7
	cmp0
	je l1420
	sub $6,1
	pop $6
	push $9
	spushs
	spop $a
	call [$a],setasadvanima
l1420:
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1417
l1418:
	push $9
	push "anf:"
	cmpje
	cmp0
	je l1422
	push $2
	spushs
	push $18
	push "-mask"
	spop $a
	call [$a],dbdelvar
	pop $7
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $11
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $10
	push $9
	cthis copyanima
	push $9
	spushs
	push $11
	push $8
	spop $a
	call [$a],setframe
	push $7
	cmp0
	je l1424
	sub $6,1
	pop $6
	push $9
	spushs
	spop $a
	call [$a],setasadvanima
l1424:
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1421
l1422:
	push $9
	push "behfile:"
	cmpje
	cmp0
	je l1426
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	cthis loadbehaviours
	add $5,1
	pop $5
	jmp l1425
l1426:
	push $9
	push "include:"
	cmpje
	cmp0
	je l1428
	cthis getgraphpath
	pop $17
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	push "-path"
	cmpje
	cmp0
	je l1430
	push $2
	spushs
	push $18
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],get
	cthis setgraphpath
	push 2
	popax
	add $5,$a
	pop $5
l1430:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	cthis loadadventure
	push $17
	cthis setgraphpath
	add $5,1
	pop $5
	jmp l1427
l1428:
	push $9
	push "walkqueue:"
	cmpje
	cmp0
	je l1432
l1433:
	push $5
	push $6
	cmpjl
	cmp0
	je l1434
	push _spathpref
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call clwalkq,add
	add $5,1
	pop $5
	jmp l1433
l1434:
	jmp l1431
l1432:
	push $9
	push "font:"
	cmpje
	cmp0
	je l1436
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $9
	spushs
	spop $e
	new font,[$e]
	push $9
	spushs
	push $10
	push $7
	spop $a
	call [$a],load
	jmp l1435
l1436:
	push $9
	push "bkg:"
	cmpje
	cmp0
	je l1438
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	cthis csetbkg
	push $2
	push $18
	push $5
	push "imgbkg"
	cthis analizeaninstr
	pop $5
	jmp l1437
l1438:
	push $9
	push "img:"
	cmpje
	cmp0
	je l1440
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $9
	push $10
	push $7
	cthis newimg
	push $2
	push $18
	push $5
	push $9
	cthis analizeaninstr
	pop $5
	jmp l1439
l1440:
	push $9
	push "but:"
	cmpje
	cmp0
	jne l1443
	push $9
	push "doors:"
	cmpje
	cmp0
	jne l1443
	push $9
	push "item:"
	cmpje
	jmp l1444
l1442:
	push 0
	jmp l1444
l1443:
	push 1
l1444:
	cmp0
	je l1445
	push $9
	push $2
	push $18
	push $5
	cthis analizebut
	jmp l1441
l1445:
	push $9
	push "camera:"
	cmpje
	cmp0
	je l1447
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $16
	add $5,1
	pop $5
	push $15
	push $16
	call clcamera,scalemodifiers
l1448:
	push $5
	push $6
	cmpjl
	cmp0
	je l1449
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $9
	push "-size"
	cmpje
	cmp0
	je l1451
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $7
	push $8
	call clcamera,setborders
	jmp l1450
l1451:
	push $9
	push "-center"
	cmpje
	cmp0
	je l1453
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
	push $7
	push $8
	call clcamera,setcenter
	jmp l1452
l1453:
	push $9
	push "-sizebg"
	cmpje
	cmp0
	je l1455
	call imgbkg,getw
	call imgbkg,geth
	call clcamera,setborders
l1455:
l1452:
l1450:
	jmp l1448
l1449:
	jmp l1446
l1447:
	push $9
	push "actor:"
	cmpje
	cmp0
	je l1457
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	call clcamera,setactor
	add $5,1
	pop $5
	jmp l1456
l1457:
	push $9
	push "bgr:"
	cmpje
	cmp0
	je l1459
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $16
	add $5,1
	pop $5
	push $9
	spushs
	spop $e
	new classbgplan,[$e]
	push $9
	push $15
	push $16
	call clcamera,addbgr
	jmp l1458
l1459:
	push $9
	push "pathfinder:"
	cmpje
	cmp0
	je l1461
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop slastpathf
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push ".ptf"
	call $10,contains
	cmp0
	je l1463
	push 20
	pop $7
	push 20
	pop $8
	jmp l1462
l1463:
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $8
	add $5,1
	pop $5
l1462:
	push slastpathf
	push $10
	push $7
	push $8
	cthis newpathf
	jmp l1460
l1461:
	push $9
	push "script:"
	cmpje
	cmp0
	je l1465
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $9
	add $5,1
	pop $5
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	pop $10
	add $5,1
	pop $5
	push $9
	spushs
	push $10
	spop $e
	new Script,[$e]
	jmp l1464
l1465:
	push $9
	push "func:"
	cmpje
	cmp0
	je l1467
	push $2
	push "script"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spushs
	push $18
	push $5
	spop $a
	call [$a],get
	spop $a
	call [$a],call
	add $5,1
	pop $5
l1467:
l1464:
l1460:
l1458:
l1456:
l1446:
l1441:
l1439:
l1437:
l1435:
l1431:
l1427:
l1425:
l1421:
l1417:
l1413:
l1411:
l1407:
l1378:
l1376:
l1372:
l1370:
l1368:
	jmp l1366
l1365:
	push $2
	spushs
	spop $a
	call [$a],readonly
	end method
	method behrewind
	push sactbeh
	push "null"
	cmpjne
	cmp0
	je l1469
	push sactbeh
	spushs
	spop $a
	call [$a],rewind
l1469:
	end method
	method behplaying
	push sactbeh
	push "null"
	cmpjne
	ret
	end method
	method behexist
	localstring $1
	pop $1
	push $1
	cthis getbeh
	call engine,varexist
	ret
	end method
	method getbeh
	localstring $1
	pop $1
	push _sbeh
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method newbehname
	localstring $1
	push _sbeh
	push "_"
	pop $b
	popax
	add $a,$b
	push iidbeh
	pop $b
	popax
	add $a,$b
	pop $1
	add iidbeh,1
	pop iidbeh
	push $1
	ret
	end method
	method newbeh
	localstring $1
	cthis newbehname
	pop $1
	push $1
	spushs
	spop $e
	new classbehhero,[$e]
	push $1
	ret
	end method
	method loadbeh
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $9
	localstring $10
	localstring $11
	localstring $12
	localint $13
	push $5
	spushs
	spop $a
	call [$a],getblock
	pop $13
	localint $14
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	cthis newbeh
	pop $10
	localint $15
	localint $16
	push $9
	spushs
	push "call:"
	cmpst
	jne l1471
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $1
	push "script"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setascaller
	jmp l1470
l1471:
	push "walk:"
	cmpst
	jne l1472
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	localstring $17
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $17
	add $4,1
	pop $4
	localint $18
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $18
	add $4,1
	pop $4
	push $10
	spushs
	push _spathpref
	push $9
	pop $b
	popax
	add $a,$b
	push $17
	push $18
	spop $a
	call [$a],setaswalker
	jmp l1470
l1472:
	push "setpos:"
	cmpst
	jne l1473
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $16
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	push $16
	spop $a
	call [$a],setasposer
	jmp l1470
l1473:
	push "game:"
	cmpst
	jne l1474
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	spop $a
	call [$a],setasnewgamer
	jmp l1470
l1474:
	push "ref:"
	cmpst
	jne l1475
	spop $a
	push "_"
	push iidbeh
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $4
	cthis buildbeh
	pop $4
	cthis newbehname
	pop $9
	push $10
	spushs
	push _sbeh
	call $9,strsubbs
	push $1
	push "script"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setascaller
	jmp l1470
l1475:
	push "anplay:"
	cmpst
	jne l1476
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setasanplayer
	jmp l1470
l1476:
	push "anorder:"
	cmpst
	jne l1477
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $1
	push $2
	push $4
	push $11
	spop $a
	call [$a],setasanorder
	push $1
	push $2
	push $4
	push "null"
	cthis analizeaninstr
	pop $4
	jmp l1470
l1477:
	push "sndbg:"
	cmpst
	jne l1478
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $11
	spop $a
	call [$a],setassndbg
	jmp l1470
l1478:
	push "sndplay:"
	cmpst
	jne l1479
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	spop $a
	call [$a],setassndplayer
	jmp l1470
l1479:
	push "wait:"
	cmpst
	jne l1480
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $15
	add $4,1
	pop $4
	push $10
	spushs
	push $15
	spop $a
	call [$a],setaswaiter
	jmp l1470
l1480:
	push "read:"
	cmpst
	jne l1481
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $15
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $16
	add $4,1
	pop $4
	push "auto"
	pop $11
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	push $4
	cmpja
	cmp0
	je l1483
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	push $11
	push "-dir"
	cmpje
	cmp0
	je l1485
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
l1485:
l1483:
	push $10
	spushs
	push $9
	push $15
	push $16
	push $11
	spop $a
	call [$a],setasreader
	jmp l1470
l1481:
	push "met:"
	cmpst
	jne l1486
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setasmet
	jmp l1470
l1486:
	push "bsave:"
	cmpst
	jne l1487
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push "1"
	spop $a
	call [$a],setassaver
	jmp l1470
l1487:
	push "save:"
	cmpst
	jne l1488
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setassaver
	jmp l1470
l1488:
	push "script:"
	cmpst
	jne l1489
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $9
	add $4,1
	pop $4
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setasscript
	jmp l1470
l1489:
	push "func:"
	cmpst
	jne l1490
	spop $a
	push $1
	push "script"
	pop $b
	popax
	add $a,$b
	pop $9
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $11
	add $4,1
	pop $4
	push $10
	spushs
	push $9
	push $11
	spop $a
	call [$a],setasscript
	jmp l1470
l1490:
	spop $a
	push "_"
	call $9,strgetto
	pop $12
	push $12
	cthis getheroloader
	pop $11
	push $11
	push "null"
	cmpje
	cmp0
	je l1492
	push "loadbeh error: no hero linked to "
	push $12
	pop $b
	popax
	add $a,$b
	call engine,print
	ret
	push $10
	spushs
	push $9
	spop $a
	call [$a],setassndplayer
	jmp l1491
l1492:
	localint $19
	localint $20
	push $11
	spushs
	spop $a
	call [$a],getstartstop
	pop $20
	pop $19
	localstring $21
	push "auto"
	pop $21
	localstring $22
	push "_stalk"
	call modadv,varget
	pop $22
	localint $23
	push 1
	pop $23
	push $4
	push $3
	cmpjl
	pop $14
l1493:
	push $14
	cmp0
	je l1494
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $12
	add $4,1
	pop $4
	push $12
	spushs
	push "-stt"
	cmpst
	jne l1496
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $19
	add $4,1
	pop $4
	jmp l1495
l1496:
	push "-stp"
	cmpst
	jne l1497
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $20
	add $4,1
	pop $4
	jmp l1495
l1497:
	push "-base"
	cmpst
	jne l1498
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $22
	add $4,1
	pop $4
	jmp l1495
l1498:
	push "-r"
	cmpst
	jne l1499
	spop $a
	push 1
	pop $23
	jmp l1495
l1499:
	push "-nr"
	cmpst
	jne l1500
	spop $a
	push 0
	pop $23
	jmp l1495
l1500:
	push "-dir"
	cmpst
	jne l1501
	spop $a
	push $1
	spushs
	push $2
	push $4
	spop $a
	call [$a],get
	pop $21
	add $4,1
	pop $4
	jmp l1495
l1501:
	spop $a
	push 0
	pop $14
	sub $4,1
	pop $4
l1495:
	push $14
	cmp0
	je l1503
	push $4
	push $3
	cmpjae
	jmp l1505
l1503:
	push 0
	jmp l1505
l1504:
	push 1
l1505:
	cmp0
	je l1506
	push 0
	pop $14
l1506:
	jmp l1493
l1494:
	push $10
	spushs
	push $11
	spushs
	push "sanhero"
	spop $a
	call [$a],varget
	push $9
	push $22
	push $23
	push $19
	push $20
	push $21
	spop $a
	call [$a],setastalker
l1491:
l1470:
	push $5
	spushs
	push $10
	spop $a
	call [$a],addtostarter
	push $7
	push 0
	cmpje
	cmp0
	je l1508
	push $6
	spushs
	push $10
	spop $a
	call [$a],setflags
	push $10
	spushs
	push $5
	push $13
	push $8
	spop $a
	call [$a],addflags
	jmp l1507
l1508:
	push $6
	spushs
	push "null"
	spop $a
	call [$a],setflags
	push $10
	spushs
	push $5
	push $13
	push 0
	spop $a
	call [$a],addflags
l1507:
	push $4
	push $3
	cmpjl
	cmp0
	je l1510
	push $1
	push $2
	push $3
	push $4
	push $5
	push $10
	push $7
	push $8
	cthis loadbeh
l1510:
	end method
	method buildbeh
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	call dbmacros,findbyrow
	pop $5
	push $5
	push 0
	cmpjl
	cmp0
	je l1512
	push "no such macro: "
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call engine,print
	push 1
	popax
	sub 0,$a
	ret
l1512:
l1513:
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	push "("
	cmpjne
	cmp0
	je l1514
	add $4,1
	pop $4
	jmp l1513
l1514:
	add $4,1
	pop $4
	localint $6
	push $2
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	localstring $7
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	call _vecarg,free
l1515:
	push $7
	push ")"
	cmpjne
	cmp0
	je l1516
	push $7
	call _vecarg,add
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	pop $7
	add $4,1
	pop $4
	jmp l1515
l1516:
	localint $8
	push $5
	call dbmacros,getcolsno
	pop $8
	localint $9
	push $2
	spushs
	push $6
	push $1
	spop $a
	call [$a],add
	localint $10
	push 1
	pop $10
l1517:
	push $10
	push $8
	cmpjl
	cmp0
	je l1518
	jmp l1520
l1519:
	add $10,1
	pop $10
	jmp l1517
l1520:
	push $5
	push $10
	call dbmacros,get
	pop $7
	push 0
	push 1
	call $7,getb
	push "$"
	cmpje
	cmp0
	je l1522
	push 1
	push 10
	call $7,getb
	pop $9
	push $2
	spushs
	push $6
	push $9
	push 1
	pop $b
	popax
	sub $a,$b
	call _vecarg,get
	spop $a
	call [$a],add
	jmp l1521
l1522:
	push $2
	spushs
	push $6
	push $7
	spop $a
	call [$a],add
l1521:
	jmp l1519
l1518:
	push $4
	ret
	end method
	method loadbehaviours
	localstring $1
	pop $1
	localstring $2
	call clcbeh,get
	pop $2
	push $2
	spushs
	spop $e
	new db,[$e]
	push $2
	spushs
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],loadbeh
	localstring $3
	push $2
	push "script"
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push $2
	spop $e
	new Script,[$e]
	localint $4
	localint $5
	localstring $6
	localstring $7
	localstring $8
	localstring $9
	localint $10
	localint $11
	localint $12
	localint $13
	localint $14
	localint $15
	localint $16
	localstring $17
	localstring $18
	localint $19
	push 0
	pop $19
l1523:
	push $19
	push $2
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1524
	jmp l1526
l1525:
	add $19,1
	pop $19
	jmp l1523
l1526:
	push 0
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $6
	add $5,1
	pop $5
	push $6
	push "macro:"
	cmpje
	cmp0
	je l1528
	push $2
	push $19
	push 1
	call dbmacros,dbaddrowfrom
	jmp l1527
l1528:
	push $6
	push "include:"
	cmpje
	cmp0
	je l1530
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $6
	add $5,1
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	cthis getgraphpath
	pop $8
	push $6
	cthis setgraphpath
	push $7
	cthis loadbehaviours
	push $8
	cthis setgraphpath
	jmp l1529
l1530:
	push $6
	push "build:"
	cmpje
	cmp0
	je l1532
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	push $2
	push $19
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	cthis buildbeh
	pop $5
	jmp l1531
l1532:
	push $6
	push "func"
	cmpje
	cmp0
	je l1534
l1535:
	push $2
	spushs
	push $19
	push 0
	spop $a
	call [$a],get
	push "end"
	cmpjne
	cmp0
	je l1536
	add $19,1
	pop $19
	jmp l1535
l1536:
	jmp l1533
l1534:
	push $2
	spushs
	push $19
	spop $a
	call [$a],getcolsno
	pop $4
	push $6
	cthis getbeh
	pop $6
	push $6
	spushs
	spop $e
	new classbehhero,[$e]
	push 0
	pop $10
	push 1
	pop $11
	push 0
	pop $12
	push 0
	pop $13
	push 1
	pop $14
	push "null"
	pop $18
	push 1
	popax
	sub 0,$a
	pop $16
	push 0
	pop $15
l1537:
	push $11
	cmp0
	je l1538
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $7
	add $5,1
	pop $5
	push $7
	spushs
	push "-nr"
	cmpst
	jne l1540
	spop $a
	push 0
	pop $10
	jmp l1539
l1540:
	push "-once"
	cmpst
	jne l1541
	spop $a
	push 1
	pop $12
	jmp l1539
l1541:
	push "-par"
	cmpst
	jne l1542
	spop $a
	push 1
	pop $13
	jmp l1539
l1542:
	push "-r"
	cmpst
	jne l1543
	spop $a
	push 1
	pop $10
	jmp l1539
l1543:
	push "-nb"
	cmpst
	jne l1544
	spop $a
	push 0
	pop $14
	jmp l1539
l1544:
	push "-en"
	cmpst
	jne l1545
	spop $a
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $15
	add $5,1
	pop $5
	jmp l1539
l1545:
	push "-bif"
	cmpst
	jne l1546
	spop $a
	push 1
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push 1
	pop $18
	jmp l1539
l1546:
	push "-bnif"
	cmpst
	jne l1547
	spop $a
	push 0
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push 1
	pop $18
	jmp l1539
l1547:
	push "-if"
	cmpst
	jne l1548
	spop $a
	push 1
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $18
	add $5,1
	pop $5
	jmp l1539
l1548:
	push "-nif"
	cmpst
	jne l1549
	spop $a
	push 0
	pop $16
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $17
	add $5,1
	pop $5
	push $2
	spushs
	push $19
	push $5
	spop $a
	call [$a],get
	pop $18
	add $5,1
	pop $5
	jmp l1539
l1549:
	spop $a
	push 0
	pop $11
	push $6
	spushs
	push $12
	push $10
	push $13
	push $14
	push $15
	push $16
	push $17
	push $18
	spop $a
	call [$a],setasstarter
	push $2
	push $19
	push $4
	push $5
	push 1
	pop $b
	popax
	sub $a,$b
	push $6
	push $6
	push $10
	push $13
	cthis loadbeh
l1539:
	jmp l1537
l1538:
l1533:
l1531:
l1529:
l1527:
	jmp l1525
l1524:
	push $2
	spushs
	spop $a
	call [$a],readonly
	end method
	method analizeaninstr
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 1
	pop $5
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjae
	cmp0
	je l1551
	push 0
	pop $5
l1551:
	localint $6
	push 0
	pop $6
	push $4
	push "null"
	cmpjne
	cmp0
	je l1553
	push 1
	pop $6
	push $4
	cthis advanstand
l1553:
	localint $7
	localint $8
	localint $9
	localstring $10
	localstring $11
l1554:
	push $5
	cmp0
	je l1555
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $11
	spushs
	push "-z"
	cmpst
	jne l1557
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $8
	add $3,1
	pop $3
	push $6
	cmp0
	je l1559
	push $4
	spushs
	push $8
	spop $a
	call [$a],setz
l1559:
	jmp l1556
l1557:
	push "-pos"
	cmpst
	jne l1560
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $9
	add $3,1
	pop $3
	push $6
	cmp0
	je l1562
	push $10
	push "-id"
	cmpje
	cmp0
	je l1564
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	push $9
	spop $a
	call [$a],getbyname
	pop $7
	push $10
	spushs
	push $7
	spop $a
	call [$a],getxver
	push $10
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $8
	push $10
	spushs
	push $7
	spop $a
	call [$a],getyver
	push $10
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $9
	jmp l1563
l1564:
	push $10
	pop $8
l1563:
	push $4
	spushs
	push $8
	push $9
	spop $a
	call [$a],setpos
l1562:
	jmp l1556
l1560:
	push "-putgr"
	cmpst
	jne l1565
	spop $a
	push $6
	cmp0
	je l1567
	push $4
	spushs
	spop $a
	call [$a],anputgr
l1567:
	jmp l1556
l1565:
	push "-vis"
	cmpst
	jne l1568
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l1570
	push $7
	push 0
	cmpje
	cmp0
	je l1572
	push $4
	spushs
	spop $a
	call [$a],hide
	jmp l1571
l1572:
	push $4
	spushs
	spop $a
	call [$a],show
l1571:
l1570:
	jmp l1556
l1568:
	push "-show"
	cmpst
	jne l1573
	spop $a
	push $6
	cmp0
	je l1575
	push $4
	spushs
	spop $a
	call [$a],show
l1575:
	jmp l1556
l1573:
	push "-hide"
	cmpst
	jne l1576
	spop $a
	push $6
	cmp0
	je l1578
	push $4
	spushs
	spop $a
	call [$a],hide
l1578:
	jmp l1556
l1576:
	push "-dir"
	cmpst
	jne l1579
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l1581
	push $4
	spushs
	spop $a
	call [$a],actionname
	pop $11
	push $4
	spushs
	spop $a
	call [$a],framenr
	pop $7
	push $4
	spushs
	push 2
	call $11,strsube
	push $10
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],setframe
l1581:
	jmp l1556
l1579:
	push "-play"
	cmpst
	jne l1582
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $6
	cmp0
	je l1584
	push $4
	spushs
	push $11
	spop $a
	call [$a],splay
l1584:
	jmp l1556
l1582:
	push "-nplay"
	cmpst
	jne l1585
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l1587
	push $4
	spushs
	push $7
	spop $a
	call [$a],nplay
l1587:
	jmp l1556
l1585:
	push "-lplay"
	cmpst
	jne l1588
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $6
	cmp0
	je l1590
	push $4
	spushs
	push $11
	spop $a
	call [$a],anloopsplay
l1590:
	jmp l1556
l1588:
	push "-bgr"
	cmpst
	jne l1591
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $11
	add $3,1
	pop $3
	push $6
	cmp0
	je l1593
	push $11
	spushs
	push $4
	spop $a
	call [$a],add
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	call engine,varexist
	cmp0
	je l1595
	push $11
	spushs
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l1595:
l1593:
	jmp l1556
l1591:
	push "-sc"
	cmpst
	jne l1596
	spop $a
	push $6
	cmp0
	je l1598
	push _spathpref
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	call engine,varexist
	cmp0
	je l1600
	push $11
	spushs
	spop $a
	call [$a],scalean
l1600:
l1598:
	jmp l1556
l1596:
	push "-ssc"
	cmpst
	jne l1601
	spop $a
	push $6
	cmp0
	je l1603
	call clcamera,setscene
l1603:
	jmp l1556
l1601:
	push "-actor"
	cmpst
	jne l1604
	spop $a
	push $6
	cmp0
	je l1606
	push $4
	call clcamera,setactor
l1606:
	jmp l1556
l1604:
	push "-mhero"
	cmpst
	jne l1607
	spop $a
	push $6
	cmp0
	je l1609
	push $4
	cthis setmainhero
l1609:
	jmp l1556
l1607:
	push "-puty"
	cmpst
	jne l1610
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l1612
	push $10
	push "resy"
	cmpje
	cmp0
	je l1614
	push $4
	spushs
	push iResY
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],anputy
	jmp l1613
l1614:
	push $4
	spushs
	push $10
	spop $a
	call [$a],anputy
l1613:
l1612:
	jmp l1556
l1610:
	push "-stopf"
	cmpst
	jne l1615
	spop $a
	push $6
	cmp0
	je l1617
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l1617:
	jmp l1556
l1615:
	push "-setaction"
	cmpst
	jne l1618
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l1620
	push $4
	spushs
	push $10
	push 0
	spop $a
	call [$a],setframe
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l1620:
	jmp l1556
l1618:
	push "-setframe"
	cmpst
	jne l1621
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l1623
	push $4
	spushs
	push $10
	push $7
	spop $a
	call [$a],setframe
	push $4
	spushs
	push 0
	spop $a
	call [$a],stop
l1623:
	jmp l1556
l1621:
	push "-stand"
	cmpst
	jne l1624
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $10
	add $3,1
	pop $3
	push $6
	cmp0
	je l1626
	push $4
	spushs
	push $10
	spop $a
	call [$a],setstandbase
l1626:
	jmp l1556
l1624:
	push "-delay"
	cmpst
	jne l1627
	spop $a
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	pop $7
	add $3,1
	pop $3
	push $6
	cmp0
	je l1629
	push $4
	spushs
	push $7
	spop $a
	call [$a],setdelay
l1629:
	jmp l1556
l1627:
	spop $a
	push 0
	pop $5
	sub $3,1
	pop $3
l1556:
	push $5
	cmp0
	je l1631
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjae
	jmp l1633
l1631:
	push 0
	jmp l1633
l1632:
	push 1
l1633:
	cmp0
	je l1634
	push 0
	pop $5
l1634:
	jmp l1554
l1555:
	push $3
	ret
	end method
	method cadvherofinish
	end method
	method butmoveoff
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],moveoff
	push $1
	spushs
	spop $a
	call [$a],getbutname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmoveon
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],moveon
	push $1
	spushs
	spop $a
	call [$a],getbutname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method advmsmove
	cthis advgetlock
	neg
	cmp0
	je l1636
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	cmp0
	je l1638
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	push $4
	push _slastms
	cmpjne
	cmp0
	je l1640
	push _slastms
	push "null"
	cmpjne
	cmp0
	je l1642
	push _slastms
	cthis butmoveoff
l1642:
	push $4
	pop _slastms
	push $4
	cthis butmoveon
l1640:
	jmp l1637
l1638:
	push _slastms
	push "null"
	cmpjne
	cmp0
	je l1644
	push _slastms
	cthis butmoveoff
	push "null"
	pop _slastms
l1644:
l1637:
	push "onmousemove"
	push $1
	push $2
	call grmsmove,eval2
	call moddbg,msmove
l1636:
	end method
	method butclickon
	localstring $1
	pop $1
	localstring $2
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l1646
	push $2
	spushs
	spop $a
	call [$a],skipitem
l1646:
	push $1
	spushs
	spop $a
	call [$a],clickon
	push $1
	spushs
	spop $a
	call [$a],getbutname
	push "_CLICKON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butrelease
	localstring $1
	pop $1
	localstring $2
	push _spocketpref
	cthis getmainhero
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l1648
	push $2
	spushs
	spop $a
	call [$a],skipitem
l1648:
	push $1
	spushs
	spop $a
	call [$a],lrel
	push $1
	spushs
	spop $a
	call [$a],getbutname
	push "_RELEASE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method advmsclick
	push bmslock
	neg
	cmp0
	je l1650
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	cmp0
	je l1652
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	cthis butclickon
	jmp l1651
l1652:
	push $1
	push $2
	call clwalkq,goto
l1651:
	push "onmouselclick"
	push $1
	push $2
	call grmslclick,eval2
l1650:
	cthis behrewind
	call moddbg,mslclick
	end method
	method advmslrel
	push bmslock
	neg
	cmp0
	je l1654
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	cmp0
	je l1656
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	cthis butrelease
l1656:
	push "onmouselrel"
	push $1
	push $2
	call grmslrel,eval2
l1654:
	call moddbg,mslrel
	end method
	method mousemove
	cthis advmsmove
	cthis mouse_MOVE
	end method
	method mouselclick
	cthis advmsclick
	cthis mouse_LCLICK
	end method
	method mouselrel
	cthis advmslrel
	cthis mouse_LREL
	end method
	method mouserclick
	cthis mouse_RCLICK
	end method
	method keydown
	call moddbg,dbkeydown
	cthis keyboard_KEYDOWN
	end method
	method exit
	call modadvglob,onexit
	end method
	end class

	module moddbg
	parent classlocker
	method init
	clparent classlocker,init
	new string,sstate
	push "init"
	pop sstate
	new int,ilastx
	new int,ilasty
	new text,txtpos
	push 5000
	call txtpos,setz
	push 0
	push 0
	call txtpos,setpos
	push 0
	push 0
	push 64
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpos,setbkg
	new text,txtswin
	push 5000
	call txtswin,setz
	push 0
	push 0
	push 64
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtswin,setbkg
	new text,txtpod
	push 5000
	call txtpod,setz
	push 0
	push 0
	push 128
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpod,setbkg
	cthis disable
	end method
	method enable
	cthis unlock
	call txtpos,show
	call txtswin,show
	call txtpod,show
	end method
	method disable
	cthis lock
	call txtpos,hide
	call txtswin,hide
	call txtpod,hide
	end method
	method updatetxtpos
	localint $1
	localint $2
	pop $2
	pop $1
	push ""
	push $1
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtpos,set
	push $1
	push 32
	pop $b
	popax
	sub $a,$b
	push $2
	push 46
	pop $b
	popax
	add $a,$b
	call txtpos,setpos
	push $1
	push 64
	pop $b
	popax
	sub $a,$b
	push $2
	push 30
	pop $b
	popax
	add $a,$b
	call txtpod,setpos
	push $1
	push $2
	push 1
	push 1
	push 1000
	popax
	sub 0,$a
	push 1000
	call engine,getimg
	call txtpod,set
	end method
	method updateswin
	push " "
	call swinka,getposx
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	call swinka,getposy
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtswin,set
	call swinka,getposx
	push 32
	pop $b
	popax
	sub $a,$b
	call swinka,getposy
	call txtswin,setpos
	end method
	method msminit
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmmove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push ilastx
	pop $b
	popax
	sub $a,$b
	push $2
	push ilasty
	pop $b
	popax
	sub $a,$b
	call clcamera,moveplans
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmove
	cthis getlock
	push 1
	cmpje
	cmp0
	je l1658
	ret
l1658:
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	push "msm"
	push sstate
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $d
	cthis [$d]
	push $1
	pop ilastx
	push $2
	pop ilasty
	end method
	method mslclick
	cthis getlock
	push 1
	cmpje
	cmp0
	je l1660
	ret
l1660:
	push "space"
	call keyboard,iskeydown
	push 1
	cmpje
	cmp0
	je l1662
	push "move"
	pop sstate
l1662:
	end method
	method mslrel
	cthis getlock
	push 1
	cmpje
	cmp0
	je l1664
	ret
l1664:
	push "init"
	pop sstate
	end method
	method msrclick
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	push 0
	cmpjne
	cmp0
	je l1666
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	call $4,print
l1666:
	end method
	method dbkeydown
	push "d"
	call keyboard,iskey
	push 1
	cmpje
	cmp0
	je l1668
	cthis getlock
	push 1
	cmpje
	cmp0
	je l1670
	cthis enable
	jmp l1669
l1670:
	cthis disable
l1669:
l1668:
	cthis getlock
	push 1
	cmpje
	cmp0
	je l1672
	ret
l1672:
	push "s"
	call keyboard,iskey
	push 1
	cmpje
	cmp0
	je l1674
	cthis updateswin
l1674:
	push "z"
	call keyboard,iskey
	push 1
	cmpje
	cmp0
	je l1676
	call gameapi,getgamename
	pop sgmlastscene
	push sgmlastscene
	spushs
	spop $a
	call [$a],savescene
	push "gamezajezdnia"
	call gameapi,play
l1676:
	end method
	end module

	class classplacepointer
	method init
	new anima,anpointer
	push "onfinish"
	push "classplacepointer0"
	call anpointer,addmethod
	new int,_iz
	push 1000
	pop _iz
	end method
	method classplacepointer0
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anpointer,load
	push _iz
	cthis setz
	call anpointer,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push $1
	call anpointer,setz
	end method
	method stop
	push 0
	call anpointer,stop
	end method
	method stoph
	push 0
	call anpointer,stop
	call anpointer,hide
	end method
	method show
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,setpos
	push $3
	call anpointer,play
	end method
	method move
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,move
	end method
	method showob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	cthis show
	end method
	method showu
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "uu"
	cthis show
	end method
	method showd
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "dd"
	cthis show
	end method
	method showr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "rr"
	cthis show
	end method
	method showl
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "ll"
	cthis show
	end method
	method showru
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "ru"
	cthis show
	end method
	method showrd
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "rd"
	cthis show
	end method
	method showld
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "ld"
	cthis show
	end method
	method showlu
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "lu"
	cthis show
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	spushs
	push _sfun
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	cmpjne
	cmp0
	je l1678
	push _sfunfin
	spushs
	spop $d
	cthis [$d]
l1678:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	cmpjae
	cmp0
	je l1680
	push _ib2
	cthis _cfinito
	jmp l1679
l1680:
	push _ival
	push _ib1
	cmpjle
	cmp0
	je l1682
	push _ib1
	cthis _cfinito
	jmp l1681
l1682:
	push _sob
	spushs
	push _sfun
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l1681:
l1679:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $8
	call $2,abs
	pop $8
	push $1
	push 0
	cmpjle
	cmp0
	jne l1685
	push $8
	push $5
	cmpje
	cmp0
	jne l1685
	push $8
	push $6
	cmpja
	jmp l1686
l1684:
	push 0
	jmp l1686
l1685:
	push 1
l1686:
	cmp0
	je l1687
	ret
l1687:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	cmpja
	cmp0
	je l1689
	push _ib1
	pop _ival
	jmp l1688
l1689:
	push $2
	push 0
	cmpjl
	cmp0
	je l1691
	push _ib2
	pop _ival
	jmp l1690
l1691:
	ret
l1690:
l1688:
	push $3
	spushs
	push $4
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push $4
	cthis _play
	end method
	method setopacity
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setopacity"
	push 0
	push 255
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push $4
	cthis _play
	end method
	end class

	class classadvkleo
	parent classadv
	method init
	push 0
	pop igmstate
	clparent classadv,init
	push "sounds/kleolicz/"
	cthis setwavpath
	push "sfxgetitem"
	push "sfx/getitem.wav"
	cthis newsnd
	call bsms,setstd
	end method
	method exit
	call bsms,setstd
	end method
	method mbuildmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "clm"
	push $1
	push $2
	push $3
	push "mclickmask"
	cthis caddelemtomask
	end method
	method advclick
	push igmstate
	push 0
	cmpje
	cmp0
	jne l1694
	push igmstate
	push 5
	cmpje
	jmp l1695
l1693:
	push 0
	jmp l1695
l1694:
	push 1
l1695:
	cmp0
	je l1696
	push igmdebug
	push 1
	cmpje
	cmp0
	je l1698
	push 1
	cthis cactsndstop
l1698:
	jmp l1692
l1696:
	push igmstate
	push 1
	cmpje
	cmp0
	je l1700
l1700:
l1692:
	end method
	method keydown
	push igmdebug
	push 0
	cmpje
	cmp0
	je l1702
	ret
l1702:
	push "p"
	call keyboard,iskey
	push 1
	cmpje
	cmp0
	je l1704
	call clpause,pause
	jmp l1703
l1704:
	push "escape"
	call keyboard,iskey
	push 1
	cmpje
	cmp0
	je l1706
	call claskexit,askexittomenu
	jmp l1705
l1706:
l1705:
l1703:
	end method
	end class

	class Tclassopowiesc
	method init
	end method
	method tinit
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $8
	push $6
	push $5
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $8
	new int,iinstate
	push 1
	pop iinstate
	new img,img1
	new img,img2
	new int,iwidok
	push 1
	pop iwidok
	new int,iilescen
	push $8
	pop iilescen
	new int,bprzewijana
	push 0
	pop bprzewijana
	new int,irodzajp
	new string,simg1
	push "img1"
	pop simg1
	new string,simg2
	push "img2"
	pop simg2
	new int,ibajkaz
	push $4
	pop ibajkaz
	new int,iclipw
	push 800
	pop iclipw
	new int,icliph
	push 600
	pop icliph
	new int,ibasesnd
	push $7
	push 1
	pop $b
	popax
	sub $a,$b
	pop ibasesnd
	new int,ibaseimg
	push $5
	push 1
	pop $b
	popax
	sub $a,$b
	pop ibaseimg
	new int,ileft
	push 0
	pop ileft
	new int,iup
	push 0
	pop iup
	new string,sbaseimg
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	pop sbaseimg
	new string,sbasesnd
	push $3
	pop sbasesnd
	new snd,sndpop
	push "onfinish"
	push "mfinpop"
	call sndpop,addmethod
	cthis mloadsnd
	push $1
	cthis setgraphpath
	push sbaseimg
	push iwidok
	push ibaseimg
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".png"
	pop $b
	popax
	add $a,$b
	call img1,load
	push ibajkaz
	call img1,setz
	cthis tmodenormal
	end method
	method tmodenormal
	push 0
	pop irodzajp
	end method
	method tmodeopacity
	localint $1
	localint $2
	pop $2
	pop $1
	push 1
	pop irodzajp
	new classfadeinout,clfio
	new int,iopacityc
	push $1
	pop iopacityc
	new int,iopacityd
	push $2
	pop iopacityd
	end method
	method tmoderewind
	localint $1
	pop $1
	push 2
	pop irodzajp
	new string,sside
	new gmobjvec,grimgs
	push "img1"
	call grimgs,add
	push "img2"
	call grimgs,add
	new int,istep
	push $1
	pop istep
	new int,imovy
	push istep
	popax
	sub 0,$a
	pop imovy
	push "timrew"
	push 1
	push 1
	push "mfintimrew"
	cthis cnewtimercyclefin
	push "onstart"
	push "mrewstart"
	call timrew,addmethod
	end method
	method tmodezoom
	localreal $1
	pop $1
	push 3
	pop irodzajp
	new real,rskala
	push 1
	pop rskala
	new real,rstepskala
	push $1
	pop rstepskala
	new filter,ftimg
	end method
	method tsetpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ileft
	push $2
	pop iup
	push $3
	pop iclipw
	push $4
	pop icliph
	push simg1
	spushs
	push ileft
	push iup
	spop $a
	call [$a],setpos
	end method
	method tloadbuttons
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push 1
	pop bprzewijana
	push "clb"
	push $1
	push 100
	push $2
	cthis newclbut
	push "mbutclick"
	call clb,clickfunc
	push $3
	call clb,movonfunc
	end method
	method tstart
	cthis msndplay
	end method
	method tfinish
	end method
	method mrewstart
	end method
	method mrewtick
	push imovy
	push 0
	call grimgs,move
	cthis play
	end method
	method mfintimrew
	push imovy
	push 0
	cmpjl
	cmp0
	je l1708
	push simg1
	spushs
	spop $a
	call [$a],getpx
	push imovy
	pop $b
	popax
	add $a,$b
	push ileft
	cmpja
	cmp0
	je l1710
	cthis mrewtick
	jmp l1709
l1710:
	push simg1
	spushs
	push ileft
	push iup
	spop $a
	call [$a],setpos
	push simg2
	spushs
	spop $a
	call [$a],hide
	cthis msndplay
l1709:
	jmp l1707
l1708:
	push simg1
	spushs
	spop $a
	call [$a],getpx
	push imovy
	pop $b
	popax
	add $a,$b
	push ileft
	cmpjl
	cmp0
	je l1712
	cthis mrewtick
	jmp l1711
l1712:
	push simg1
	spushs
	push ileft
	push iup
	spop $a
	call [$a],setpos
	push simg2
	spushs
	spop $a
	call [$a],hide
	cthis msndplay
l1711:
l1707:
	end method
	method mfinclfio
	cthis msndplay
	push simg2
	spushs
	spop $a
	call [$a],hide
	push simg2
	spushs
	push ibajkaz
	spop $a
	call [$a],setz
	end method
	method msndplay
	push 0
	pop iinstate
	push "sndpop"
	cthis cbplay
	end method
	method mloadsnd
	cthis getsndpath
	push sbasesnd
	pop $b
	popax
	add $a,$b
	push iwidok
	push ibasesnd
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call sndpop,load
	end method
	method mbutclick
	localstring $1
	pop $1
	push iinstate
	push 0
	cmpjne
	cmp0
	je l1714
	ret
l1714:
	push $1
	push "next"
	cmpje
	cmp0
	je l1716
	push 1
	cthis mnext
	jmp l1715
l1716:
	push $1
	push "prev"
	cmpje
	cmp0
	je l1718
	push 1
	popax
	sub 0,$a
	cthis mnext
	jmp l1717
l1718:
	push $1
	push "play"
	cmpje
	cmp0
	je l1720
	call clpause,pause
l1720:
l1717:
l1715:
	end method
	method mnext
	localint $1
	pop $1
	localint $2
	push iwidok
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1722
	push $2
	push iilescen
	cmpjle
	jmp l1724
l1722:
	push 0
	jmp l1724
l1723:
	push 1
l1724:
	cmp0
	je l1725
	push $2
	pop iwidok
	push 1
	pop iinstate
	cthis mloadsnd
	push simg2
	spushs
	push sbaseimg
	push iwidok
	push ibaseimg
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".png"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push simg2
	spushs
	push ileft
	push iup
	push iclipw
	push icliph
	spop $a
	call [$a],clip
	push simg2
	spushs
	push ibajkaz
	spop $a
	call [$a],setz
	push irodzajp
	push 0
	cmpje
	cmp0
	je l1727
	push simg2
	spushs
	push ileft
	push iup
	spop $a
	call [$a],setpos
	push simg1
	spushs
	spop $a
	call [$a],hide
	cthis msndplay
	jmp l1726
l1727:
	push irodzajp
	push 1
	cmpje
	cmp0
	je l1729
	push simg2
	spushs
	push ileft
	push iup
	spop $a
	call [$a],setpos
	push simg2
	spushs
	push ibajkaz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push simg1
	spushs
	push ibajkaz
	spop $a
	call [$a],setz
	push iopacityc
	push iopacityd
	push simg1
	push "mfinclfio"
	call clfio,imgtransparency
	jmp l1728
l1729:
	push irodzajp
	push 3
	cmpje
	cmp0
	je l1731
	push simg2
	spushs
	push ileft
	push iup
	spop $a
	call [$a],setpos
	jmp l1730
l1731:
	push irodzajp
	push 2
	cmpje
	cmp0
	je l1733
	push simg1
	spushs
	spop $a
	call [$a],show
	push simg2
	spushs
	spop $a
	call [$a],show
	push $1
	push 0
	cmpjl
	cmp0
	je l1735
	push simg2
	spushs
	push simg1
	spushs
	spop $a
	call [$a],getpx
	push simg2
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push iup
	spop $a
	call [$a],setpos
	push istep
	pop imovy
	jmp l1734
l1735:
	push $1
	push 0
	cmpja
	cmp0
	je l1737
	push simg2
	spushs
	push simg1
	spushs
	spop $a
	call [$a],getex
	push iup
	spop $a
	call [$a],setpos
	push istep
	popax
	sub 0,$a
	pop imovy
l1737:
l1734:
	call timrew,play
l1733:
l1730:
l1728:
l1726:
	localstring $3
	push simg1
	pop $3
	push simg2
	pop simg1
	push $3
	pop simg2
l1725:
	end method
	method mfinpop
	push iwidok
	push iilescen
	cmpjl
	cmp0
	je l1739
	push 1
	cthis mnext
	jmp l1738
l1739:
	push iwidok
	push iilescen
	cmpje
	cmp0
	je l1741
	cthis tfinish
l1741:
l1738:
	end method
	end class

	new classgamepause,clpause
	new snd,sndaskermovon
	game main
	parent newvars
	method init
	clparent newvars,init
	push 0
	pop igmstate
	push 1
	push 0
	push 0
	pop igmdemo
	pop igmeasy
	pop igmdebug
	push "scripts/common/cursors.pyz"
	call advmouse,load
	push "scripts/common/defaults.adv"
	call modadv,load
	push "scripts/common/sounds2.db"
	call modadv,loadsounds
	cthis getname
	pop sgmlastscene
	push "snd"
	call modadv,settalktype
	push "scripts/common/initscript.dsc"
	call modadv,loadscript
	push "sounds/kleolicz/sfx/globbutmovon.wav"
	call sndaskermovon,load
	push "saves/global.txt"
	call clsave,load
	push "startgame:"
	push 1
	call modadv,get
	call gameapi,play
	end method
	end game

	class A
	method init
	new int,i1
	push 5
	pop i1
	new int,i2
	push 10
	pop i2
	end method
	method set
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop i1
	push $2
	pop i2
	end method
	method get
	push i1
	push i2
	ret
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],get
	cthis set
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	spushs
	push "i1"
	spop $a
	call [$a],varget
	popax
	add i1,$a
	pop i1
	push $1
	spushs
	push "i2"
	spop $a
	call [$a],varget
	popax
	add i2,$a
	pop i2
	cthis getname
	ret
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	spushs
	push "i1"
	spop $a
	call [$a],varget
	popax
	sub i1,$a
	pop i1
	push $1
	spushs
	push "i2"
	spop $a
	call [$a],varget
	popax
	sub i2,$a
	pop i2
	cthis getname
	ret
	end method
	method print
	cthis getname
	push ": "
	pop $b
	popax
	add $a,$b
	push i1
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push i2
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	end class

	game gametmp1
	parent classadv
	method init
	clparent classadv,init
	push "scripts/tmp/"
	cthis setgraphpath
	push "scripts/tmp/tmp.dsc"
	new Script,script
	end method
	method mouselclick
	call gameapi,exit
	end method
	end game

	game gametmp2
	parent classadvcontroller
	method init
	push "przeddomek"
	pop sgmglobpath
	push "gameprzeddomek0"
	pop sgmgame
	clparent classadvcontroller,init
	push "scripts/tmp/"
	cthis setgraphpath
	push "joy.pyz"
	new classdzoj,dzoj
	push 0
	call ankleo,stop
	call ankleo,hide
	cthis advmsunlock
	end method
	end game

	push "main"
	call gameapi,play
	game gamemenu
	parent classadvkleo
	method init
	clparent classadvkleo,init
	push "scripts/menu/"
	cthis setgraphpath
	cthis cstdbkg
	push "sndwyjscie"
	push "nar04.wav"
	cthis newsnd
	push "sndgra"
	push "nar02.wav"
	cthis newsnd
	push "sndload"
	push "nar03.wav"
	cthis newsnd
	push "clb"
	push "buts.pyz"
	push 10
	push "imglobcurs"
	cthis newclbut
	push "gmbutclick"
	call clb,clickfunc
	push "gmbutmove"
	call clb,movonfunc
	end method
	method gmbutmove
	localstring $1
	pop $1
	call sndaskermovon,play
	push $1
	push "exit"
	cmpje
	cmp0
	je l1743
	push "sndwyjscie"
	cthis crselfplay
	jmp l1742
l1743:
	push $1
	push "gra"
	cmpje
	cmp0
	je l1745
	push "sndgra"
	cthis crselfplay
	jmp l1744
l1745:
	push $1
	push "load"
	cmpje
	cmp0
	je l1747
	push "sndload"
	cthis crselfplay
	jmp l1746
l1747:
	push "cos innego: "
	push $1
	pop $b
	popax
	add $a,$b
	call engine,print
l1746:
l1744:
l1742:
	end method
	method gmbutclick
	localstring $1
	pop $1
	push $1
	push "exit"
	cmpje
	cmp0
	je l1749
	call gameapi,exit
	jmp l1748
l1749:
	push $1
	push "gra"
	cmpje
	cmp0
	je l1751
	push "saves/last.txt"
	call clsave,setfile
	call clsave,stdload
	push "mapa"
	pop sgmglobpath
	push "gamemapa1"
	pop sgmgame
	push "defaultadv:"
	push 1
	call modadv,get
	call gameapi,play
	jmp l1750
l1751:
	push $1
	push "load"
	cmpje
	cmp0
	je l1753
	push "gameload"
	call gameapi,play
	jmp l1752
l1753:
	push "cos innego: "
	push $1
	pop $b
	popax
	add $a,$b
	call engine,print
l1752:
l1750:
l1748:
	end method
	end game

	game gameintro
	parent classadvkleo
	method init
	clparent classadvkleo,init
	push "scripts/intro/"
	cthis setgraphpath
	push "bkg2.png"
	cthis csetbkg
	new int,iileanimas
	push "annap"
	push "napisy.pyz"
	push 0
	push 10
	cthis loadanframes
	pop iileanimas
	push "annap"
	push iileanimas
	cthis chideanimas
	push "sndin"
	push 1
	push "intro"
	push 1
	push 3
	push "mfinsnd"
	cthis cnewsndsfin
	call annap0,show
	call sndin1,play
	end method
	method mfinsnd1
	call sndin2,play
	call annap1,show
	end method
	method mfinsnd2
	call sndin3,play
	call annap2,show
	end method
	method mfinsnd3
	push "introfirsttime"
	call clsave,_bset
	push "saves/global.txt"
	call clsave,save
	call clsave,stdload
	push "gamemenu"
	call gameapi,play
	end method
	method mouselclick
	push "introfirsttime"
	call clsave,_bis
	cmp0
	je l1755
	push "gamemenu"
	call gameapi,play
l1755:
	end method
	end game

	game gamedefadv
	parent classadvcontroller
	method init
	clparent classadvcontroller,init
	end method
	end game

	new int,iOpowiescFrom
	new int,iOpowiescTo
	new string,sGameFromOpowiesc
	game gameopowiesc
	parent classadvkleo
	parent Tclassopowiesc
	method init
	clparent classadvkleo,init
	clparent Tclassopowiesc,init
	cthis getname
	pop sgmlastscene
	push "scripts/intro/"
	push "intro"
	push "nar_"
	push 3
	push iOpowiescFrom
	push iOpowiescTo
	push iOpowiescFrom
	push 1
	pop $b
	popax
	add $a,$b
	cthis tinit
	push 169
	push 117
	push 169
	push 462
	pop $b
	popax
	add $a,$b
	push 117
	push 354
	pop $b
	popax
	add $a,$b
	cthis tsetpos
	push 1
	push 10
	popax
	sub 0,$a
	cthis tmodeopacity
	cthis cstdbkg
	push 20
	call imgbkg,setz
	cthis tstart
	end method
	method tfinish
	push sGameFromOpowiesc
	call gameapi,play
	end method
	method mouselclick
	push igmdebug
	cmp0
	je l1757
	push 1
	cthis cactsndstop
l1757:
	end method
	method mouserclick
	push igmdebug
	cmp0
	je l1759
	cthis tfinish
l1759:
	end method
	end game

	class classplacepointer2
	parent classplacepointer
	method init
	clparent classplacepointer,init
	push "scripts/common/strzalka.pyz"
	cthis load
	end method
	end class

	game gamerece1
	parent classadvkleo
	method init
	clparent classadvkleo,init
	push "scripts/rece/"
	cthis setgraphpath
	new classquickdialog,clqd
	new classquickanloader,clqa
	new vector,vecrece
	push "int"
	call vecrece,type
	new vector,vecrece2
	push "int"
	call vecrece2,type
	new classplacepointer2,clpt
	new string,slastdial
	new int,ilevel
	push 1
	pop ilevel
	new int,iporownaj
	push 1
	pop iporownaj
	new string,smoved
	push "null"
	pop smoved
	new int,icyfx
	new int,icyfy
	push "dialogi.dlg"
	call clqd,load
	push "scena.ans"
	call clqa,load
	push "dbwav"
	push "wavs.db"
	cthis cloadwavs
	push "anresizemets"
	call ancyfra,eval
	push 1
	pop igmstate
	new int,ilaststate
	push igmstate
	pop ilaststate
	push "start"
	call clqd,play
	end method
	method viewhand
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "anreka"
	push $2
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push $1
	push 400
	spop $a
	call [$a],setpos
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method viewcyfra
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "ancyfra"
	push $2
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push $1
	push 500
	spop $a
	call [$a],setcpos
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method viewoba
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis viewcyfra
	push $1
	push $2
	cthis viewhand
	end method
	method prepareview
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	call vecrece,free
	call vecrece2,free
	localint $4
	push 0
	pop $4
l1760:
	push $4
	push $1
	cmpjl
	cmp0
	je l1761
	jmp l1763
l1762:
	add $4,1
	pop $4
	jmp l1760
l1763:
	push $4
	push $3
	cmpjne
	cmp0
	je l1765
	push $4
	call vecrece2,add
l1765:
	jmp l1762
l1761:
	call vecrece2,hash
	push $3
	call vecrece,add
	push 0
	pop $4
l1766:
	push $4
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1767
	jmp l1769
l1768:
	add $4,1
	pop $4
	jmp l1766
l1769:
	push $4
	call vecrece2,get
	call vecrece,add
	jmp l1768
l1767:
	call vecrece,hash
	cthis hideall
	end method
	method hideall
	call anreka,hide
	call ancyfra,hide
	end method
	method showview
	localint $1
	pop $1
	localint $2
	push 800
	push $1
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop $2
	localint $3
	push 0
	pop $3
l1770:
	push $3
	push $1
	cmpjl
	cmp0
	je l1771
	jmp l1773
l1772:
	add $3,1
	pop $3
	jmp l1770
l1773:
	push $2
	push $3
	cthis viewoba
	push "anreka"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getw
	popax
	add $2,$a
	pop $2
	jmp l1772
l1771:
	end method
	method stdparaview
	localint $1
	pop $1
	push "ancyfra"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push $1
	spop $a
	call [$a],setframe
	push "anreka"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push $1
	spop $a
	call [$a],setframe
	end method
	method startview
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 1
	cmpje
	cmp0
	je l1775
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	call $3,rand
	pop $3
l1775:
	push $4
	push 2
	cmpje
	cmp0
	je l1777
	call vecrece,free
	push "begin"
	push 0
	push 1
	push 2
	push 1
	call vecrece,beginadd
	jmp l1776
l1777:
	push $1
	push $2
	push $3
	cthis prepareview
l1776:
	localstring $5
	localstring $6
	localint $7
	localint $8
	push 0
	pop $8
l1778:
	push $8
	push $2
	cmpjl
	cmp0
	je l1779
	jmp l1781
l1780:
	add $8,1
	pop $8
	jmp l1778
l1781:
	push "anreka"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "ancyfra"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $8
	call vecrece,get
	pop $7
	push $4
	push 0
	cmpje
	cmp0
	je l1783
	push $5
	spushs
	push 0
	push $7
	spop $a
	call [$a],setframe
	push $6
	spushs
	push 0
	push $7
	spop $a
	call [$a],setframe
	jmp l1782
l1783:
	push $4
	push 1
	cmpje
	cmp0
	je l1785
	push $7
	push $3
	cmpje
	cmp0
	je l1787
	push $5
	spushs
	push 0
	push $7
	spop $a
	call [$a],setframe
	push $6
	spushs
	push 0
	push $7
	spop $a
	call [$a],setframe
	jmp l1786
l1787:
	push $1
	push $3
	call $7,randdiff
	pop $7
	push $5
	spushs
	push 0
	push $7
	spop $a
	call [$a],setframe
	push $6
	spushs
	push 0
	push $1
	push $7
	call $7,randdiff
	spop $a
	call [$a],setframe
l1786:
	jmp l1784
l1785:
	push $4
	push 2
	cmpje
	cmp0
	je l1789
	push $5
	spushs
	push 0
	push $7
	spop $a
	call [$a],setframe
	push $7
	push 2
	cmpje
	cmp0
	je l1791
	push $6
	spushs
	push 0
	push 1
	spop $a
	call [$a],setframe
	jmp l1790
l1791:
	push $6
	spushs
	push 0
	push $7
	spop $a
	call [$a],setframe
l1790:
l1789:
l1784:
l1782:
	jmp l1780
l1779:
	push $2
	cthis showview
	end method
	method pointobj
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	call clpt,show
	end method
	method pointpos
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	call clpt,show
	end method
	method pointreka
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "anreka"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	spop $a
	call [$a],getposx
	push $4
	spushs
	spop $a
	call [$a],getpy
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	call clpt,show
	end method
	method resetstate
	push igmstate
	pop ilaststate
	push 1
	pop igmstate
	end method
	method retstate
	push ilaststate
	pop igmstate
	end method
	method startview2
	push iporownaj
	push 7
	cmpja
	cmp0
	je l1793
	push 0
	call cpok,stop
	cthis hideall
	cthis udalo
	jmp l1792
l1793:
	cthis hideall
	call vecrece,free
	push iporownaj
	push 1
	cmpje
	cmp0
	je l1795
	push "begin"
	push 0
	push 1
	call vecrece,beginadd
	jmp l1794
l1795:
	push iporownaj
	push 2
	cmpje
	cmp0
	je l1797
	push "begin"
	push 1
	push 3
	call vecrece,beginadd
	jmp l1796
l1797:
	push iporownaj
	push 3
	cmpje
	cmp0
	je l1799
	push "begin"
	push 0
	push 1
	push 2
	call vecrece,beginadd
	jmp l1798
l1799:
	push iporownaj
	push 4
	cmpje
	cmp0
	je l1801
	push "begin"
	push 0
	push 1
	push 3
	call vecrece,beginadd
	jmp l1800
l1801:
	push iporownaj
	push 5
	cmpje
	cmp0
	je l1803
	push "begin"
	push 1
	push 2
	push 3
	call vecrece,beginadd
	jmp l1802
l1803:
	push iporownaj
	push 6
	cmpje
	cmp0
	je l1805
	push "begin"
	push 0
	push 1
	push 2
	push 3
	call vecrece,beginadd
	jmp l1804
l1805:
	push iporownaj
	push 7
	cmpje
	cmp0
	je l1807
	push "begin"
	push 2
	push 1
	push 2
	push 3
	call vecrece,beginadd
l1807:
l1804:
l1802:
l1800:
l1798:
l1796:
l1794:
	add iporownaj,1
	pop iporownaj
	call vecrece,hash
	localint $1
	push 0
	pop $1
l1808:
	push $1
	call vecrece,size
	cmpjl
	cmp0
	je l1809
	jmp l1811
l1810:
	add $1,1
	pop $1
	jmp l1808
l1811:
	push "anreka"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push $1
	call vecrece,get
	spop $a
	call [$a],setframe
	push "ancyfra"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push $1
	call vecrece,get
	spop $a
	call [$a],setframe
	jmp l1810
l1809:
	call vecrece,size
	cthis showview
l1792:
	end method
	method goodchoice
	localint $1
	call mouse,getpx
	call mouse,getpy
	push 1
	push 1
	call anreka,isin
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1813
	push 1
	call vecrece,sort
	call vecrece,veclast
	push $1
	call anreka,get
	spushs
	spop $a
	call [$a],framenr
	cmpje
	cmp0
	je l1815
	push 1
	ret
l1815:
l1813:
	push 0
	ret
	end method
	method clqdwkret_12_START
	push 0
	push 5
	call anreka0,setframe
	push 400
	push 0
	cthis viewhand
	push 0
	push 50
	push "lu"
	cthis pointreka
	end method
	method clqdwkret_12_2_START
	push 0
	push 0
	call anreka0,setframe
	push 400
	push 0
	cthis viewhand
	push 0
	push 50
	push "lu"
	cthis pointreka
	end method
	method clqdwkret_12_FINISH
	call clpt,stoph
	end method
	method clqdwkret_12_2_FINISH
	call clpt,stoph
	end method
	method clqdwkret_14_START
	push 400
	push 0
	cthis viewcyfra
	end method
	method clqdwkret_15_START
	push "ancyfra0"
	push "ld"
	cthis pointobj
	end method
	method clqdwkret_15_FINISH
	call clpt,stoph
	end method
	method clqdstart_FINISH
	push "level1"
	call clqd,play
	end method
	method clqdlevel1_START
	push 5
	push 3
	push 0
	push 0
	cthis startview
	end method
	method clqdlevel1_FINISH
	push 2
	pop igmstate
	end method
	method clqdlevel2_START
	push 5
	push 3
	push 0
	push 0
	cthis startview
	end method
	method clqdlevel2_FINISH
	push 3
	pop igmstate
	end method
	method clqdlevel3_START
	push 5
	push 3
	push 0
	push 1
	cthis startview
	end method
	method clqdlevel3_FINISH
	push 4
	pop igmstate
	end method
	method clqdlevel4_START
	cthis hideall
	end method
	method clqdwkret_23_START
	push 1
	cthis stdparaview
	push 400
	push 1
	cthis viewhand
	push 1
	push 60
	push "ru"
	cthis pointreka
	end method
	method clqdwkret_23_2_START
	push 400
	push 1
	cthis viewcyfra
	push "ancyfra1"
	push "dd"
	cthis pointobj
	end method
	method clqdlevel4_FINISH
	call clpt,stoph
	cthis clqdoki_FINISH
	end method
	method clqdlevel5_START
	push 5
	push 3
	push 1
	push 0
	cthis startview
	end method
	method clqdlevel5_FINISH
	push 5
	pop igmstate
	end method
	method clqdlevel6_START
	push 5
	push 3
	push 1
	push 0
	cthis startview
	end method
	method clqdlevel6_FINISH
	push 6
	pop igmstate
	end method
	method clqdlevel7_START
	push 5
	push 3
	push 1
	push 1
	cthis startview
	end method
	method clqdlevel7_FINISH
	push 7
	pop igmstate
	end method
	method clqdlevel8_START
	cthis hideall
	end method
	method clqdwkret_27_START
	push 1
	cthis stdparaview
	push 290
	push 1
	cthis viewhand
	push 2
	cthis stdparaview
	push 510
	push 2
	cthis viewhand
	end method
	method clqdwkret_28_START
	cthis hideall
	push 400
	push 2
	cthis viewhand
	push 2
	push 100
	push "rr"
	cthis pointreka
	end method
	method clqdwkret_28_2_START
	push 400
	push 2
	cthis viewcyfra
	push "ancyfra2"
	push "rd"
	cthis pointobj
	end method
	method clqdlevel8_FINISH
	call clpt,stoph
	cthis clqdoki_FINISH
	end method
	method clqdlevel9_START
	push 6
	push 4
	push 2
	push 0
	cthis startview
	end method
	method clqdlevel9_FINISH
	push 9
	pop igmstate
	end method
	method clqdlevel10_START
	push 6
	push 4
	push 2
	push 0
	cthis startview
	end method
	method clqdlevel10_FINISH
	push 10
	pop igmstate
	end method
	method clqdlevel11_START
	push 6
	push 4
	push 2
	push 2
	cthis startview
	end method
	method clqdlevel11_FINISH
	push 11
	pop igmstate
	end method
	method clqdwkret_33_START
	cthis hideall
	push 3
	cthis stdparaview
	push 400
	push 3
	cthis viewhand
	push 3
	push 300
	push "uu"
	cthis pointreka
	end method
	method clqdwkret_34_START
	call clpt,stoph
	cthis hideall
	push 2
	cthis stdparaview
	push 290
	push 2
	cthis viewhand
	push 3
	cthis stdparaview
	push 510
	push 3
	cthis viewhand
	end method
	method clqdwkret_35_START
	cthis hideall
	push 400
	push 3
	cthis viewhand
	push 400
	push 3
	cthis viewcyfra
	push "ancyfra3"
	push "ld"
	cthis pointobj
	end method
	method clqdkomentdo11_FINISH
	call clpt,stoph
	cthis clqdoki_FINISH
	end method
	method clqdlevel12_START
	cthis startview2
	end method
	method clqdlevel12_FINISH
	push 12
	pop igmstate
	end method
	method clqdlevel13_START
	cthis hideall
	push 4
	call vecrece,vecnewint
	call vecrece,hash
	push 4
	call vecrece2,vecnewint
	call vecrece2,hash
	localstring $1
	localint $2
	push 100
	pop $2
	localint $3
	push 0
	pop $3
l1816:
	push $3
	push 4
	cmpjl
	cmp0
	je l1817
	jmp l1819
l1818:
	add $3,1
	pop $3
	jmp l1816
l1819:
	push "anreka"
	push $3
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	push 0
	push $3
	call vecrece,get
	spop $a
	call [$a],setframe
	push $1
	spushs
	spop $a
	call [$a],show
	push $1
	spushs
	push $2
	push 400
	spop $a
	call [$a],setpos
	push $1
	spushs
	spop $a
	call [$a],getw
	popax
	add $2,$a
	pop $2
	push "ancyfra"
	push $3
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	push 0
	push $3
	call vecrece2,get
	spop $a
	call [$a],setframe
	push $1
	spushs
	spop $a
	call [$a],show
	push $1
	spushs
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push 150
	pop $b
	popax
	mul $a,$b
	push 520
	spop $a
	call [$a],setpos
	jmp l1818
l1817:
	end method
	method clqdlevel13_FINISH
	call cpok,reset
	push 13
	pop igmstate
	end method
	method clqdwkret_39_START
	cthis hideall
	end method
	method clqdkomentdo13_FINISH
	call cpok,reset
	push 14
	pop igmstate
	push 4
	call vecrece,vecnewint
	call vecrece,hash
	push 0
	pop iporownaj
	localstring $1
	localint $2
	push 0
	pop $2
l1820:
	push $2
	push 4
	cmpjl
	cmp0
	je l1821
	jmp l1823
l1822:
	add $2,1
	pop $2
	jmp l1820
l1823:
	push "ancyfra"
	push $2
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	push 0
	push $2
	spop $a
	call [$a],setframe
	push $1
	spushs
	spop $a
	call [$a],show
	push $1
	spushs
	push 700
	push 150
	push $2
	push 110
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l1822
l1821:
	cthis pokalapkie
	end method
	method clqdlevel14_START
	end method
	method clqdlevel14_FINISH
	push iporownaj
	call vecrece,get
	call cplicz,playid
	end method
	method _cpliczfin
	push 15
	pop igmstate
	end method
	method clqdlevel15_START
	end method
	method clqdlevel15_FINISH
	push 16
	pop igmstate
	cthis pokacyfke
	end method
	method pokacyfke
	push 0
	push iporownaj
	call vecrece,get
	call ancyfra0,setframe
	push 400
	push 0
	cthis viewcyfra
	end method
	method clqdfinito_START
	cthis hideall
	end method
	method clqdfinito_FINISH
	cthis finishgame
	end method
	method clqdoops_START
	call clqd,getprevdialog
	pop slastdial
	cthis resetstate
	end method
	method clqdoops_FINISH
	cthis retstate
	push slastdial
	call clqd,play
	end method
	method clqdoki_START
	cthis resetstate
	end method
	method clqdoki_FINISH
	add ilevel,1
	pop ilevel
	push "level"
	push ilevel
	pop $b
	popax
	add $a,$b
	call clqd,play
	end method
	method nieudalo
	push "oops"
	call clqd,play
	end method
	method udalo
	push "oki"
	call clqd,play
	end method
	method _getid
	localstring $1
	pop $1
	localint $2
	push $1
	spushs
	call mouse,getpx
	call mouse,getpy
	push 1
	push 1
	spop $a
	call [$a],isin
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1825
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	spushs
	spop $a
	call [$a],framenr
	ret
l1825:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method _getidob
	localstring $1
	pop $1
	localint $2
	push $1
	spushs
	call mouse,getpx
	call mouse,getpy
	push 1
	push 1
	spop $a
	call [$a],isin
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1827
	localstring $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	pop $3
	push $1
	call $3,strsubbs
	ret
l1827:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method getcyfra
	push "ancyfra"
	cthis _getid
	ret
	end method
	method getreka
	push "anreka"
	cthis _getid
	ret
	end method
	method msprawdz
	localstring $1
	localint $2
	pop $2
	pop $1
	push "an"
	push $1
	pop $b
	popax
	add $a,$b
	cthis _getid
	push $2
	cmpje
	cmp0
	je l1829
	cthis udalo
	jmp l1828
l1829:
	cthis nieudalo
l1828:
	end method
	method msprawdzpare
	localint $1
	push "anreka"
	cthis _getidob
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l1831
	push "ancyfra"
	cthis _getidob
	pop $1
l1831:
	push $1
	push 1
	popax
	sub 0,$a
	cmpjne
	cmp0
	je l1833
	push "anreka"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],framenr
	push "ancyfra"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],framenr
	cmpje
	cmp0
	je l1835
	cthis udalo
	jmp l1834
l1835:
	cthis nieudalo
l1834:
	jmp l1832
l1833:
	cthis nieudalo
l1832:
	end method
	method mouselclick
	push igmdebug
	push 1
	cmpje
	cmp0
	je l1837
	push 1
	call clqd,stop
l1837:
	localint $1
	push igmstate
	push 2
	cmpje
	cmp0
	je l1839
	push "reka"
	push 0
	cthis msprawdz
	jmp l1838
l1839:
	push igmstate
	push 3
	cmpje
	cmp0
	je l1841
	push "cyfra"
	push 0
	cthis msprawdz
	jmp l1840
l1841:
	push igmstate
	push 4
	cmpje
	cmp0
	je l1843
	cthis msprawdzpare
	jmp l1842
l1843:
	push igmstate
	push 5
	cmpje
	cmp0
	je l1845
	push "reka"
	push 1
	cthis msprawdz
	jmp l1844
l1845:
	push igmstate
	push 6
	cmpje
	cmp0
	je l1847
	push "cyfra"
	push 1
	cthis msprawdz
	jmp l1846
l1847:
	push igmstate
	push 7
	cmpje
	cmp0
	je l1849
	cthis msprawdzpare
	jmp l1848
l1849:
	push igmstate
	push 9
	cmpje
	cmp0
	je l1851
	push "reka"
	push 2
	cthis msprawdz
	jmp l1850
l1851:
	push igmstate
	push 10
	cmpje
	cmp0
	je l1853
	push "cyfra"
	push 2
	cthis msprawdz
	jmp l1852
l1853:
	push igmstate
	push 11
	cmpje
	cmp0
	je l1855
	push "anreka"
	cthis _getid
	push 2
	cmpje
	cmp0
	je l1857
	cthis resetstate
	push "komentdo11"
	call clqd,play
	jmp l1856
l1857:
	cthis nieudalo
l1856:
	jmp l1854
l1855:
	push igmstate
	push 12
	cmpje
	cmp0
	je l1859
	cthis goodchoice
	push 1
	cmpje
	cmp0
	je l1861
	push 0
	call cpnon,stop
	call cpok,play
	cthis startview2
	jmp l1860
l1861:
	push "cpnon"
	cthis crplay
l1860:
	jmp l1858
l1859:
	push igmstate
	push 13
	cmpje
	cmp0
	je l1863
	push "ancyfra"
	cthis _getidob
	cthis preparemover
	jmp l1862
l1863:
	push igmstate
	push 14
	cmpje
	cmp0
	je l1865
	cthis getcyfra
	call anreka0,framenr
	cmpje
	cmp0
	je l1867
	add iporownaj,1
	pop iporownaj
	push iporownaj
	call vecrece,size
	cmpjae
	cmp0
	je l1869
	push 0
	cthis cactsndstop
	call cpok,reset
	push 4
	call vecrece,vecnewint
	call vecrece,hash
	push 0
	pop iporownaj
	cthis hideall
	localstring $2
	push 0
	pop $1
l1870:
	push $1
	push 4
	cmpjl
	cmp0
	je l1871
	jmp l1873
l1872:
	add $1,1
	pop $1
	jmp l1870
l1873:
	push "ancyfra"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	push 0
	push $1
	spop $a
	call [$a],setframe
	push $2
	spushs
	spop $a
	call [$a],show
	push $2
	spushs
	push $1
	push 1
	pop $b
	popax
	add $a,$b
	push 150
	pop $b
	popax
	mul $a,$b
	push 320
	spop $a
	call [$a],setpos
	jmp l1872
l1871:
	cthis udalo
	jmp l1868
l1869:
	push "cpok"
	cthis cbplay
	cthis pokalapkie
l1868:
	jmp l1866
l1867:
	push "cpnon"
	cthis crplay
l1866:
	jmp l1864
l1865:
	push igmstate
	push 15
	cmpje
	cmp0
	je l1875
	cthis getcyfra
	push iporownaj
	call vecrece,get
	cmpje
	cmp0
	je l1877
	add iporownaj,1
	pop iporownaj
	push iporownaj
	call vecrece,size
	cmpjae
	cmp0
	je l1879
	push 0
	cthis cactsndstop
	call cpok,reset
	push 4
	call vecrece,vecnewint
	call vecrece,hash
	push 0
	pop iporownaj
	cthis hideall
	localstring $2
	localint $3
	push 100
	pop $3
	push 0
	pop $1
l1880:
	push $1
	push 4
	cmpjl
	cmp0
	je l1881
	jmp l1883
l1882:
	add $1,1
	pop $1
	jmp l1880
l1883:
	push "anreka"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	push 0
	push $1
	spop $a
	call [$a],setframe
	push $2
	spushs
	spop $a
	call [$a],show
	push $2
	spushs
	push $3
	push 400
	spop $a
	call [$a],setpos
	push $2
	spushs
	spop $a
	call [$a],getw
	popax
	add $3,$a
	pop $3
	jmp l1882
l1881:
	cthis udalo
	jmp l1878
l1879:
	push "cpok"
	cthis cbplay
l1878:
	jmp l1876
l1877:
	push "cpnon"
	cthis crplay
l1876:
	jmp l1874
l1875:
	push igmstate
	push 16
	cmpje
	cmp0
	je l1885
	cthis getreka
	push iporownaj
	call vecrece,get
	cmpje
	cmp0
	je l1887
	add iporownaj,1
	pop iporownaj
	push iporownaj
	call vecrece,size
	cmpjae
	cmp0
	je l1889
	push 0
	cthis cactsndstop
	cthis resetstate
	push "finito"
	call clqd,play
	jmp l1888
l1889:
	push "cpok"
	cthis cbplay
l1888:
	jmp l1886
l1887:
	push "cpnon"
	cthis crplay
l1886:
l1885:
l1874:
l1864:
l1862:
l1858:
l1854:
l1852:
l1850:
l1848:
l1846:
l1844:
l1842:
l1840:
l1838:
	end method
	method _cpokfin
	push igmstate
	push 15
	cmpje
	cmp0
	je l1891
	sub ilevel,1
	pop ilevel
	cthis udalo
	jmp l1890
l1891:
	push igmstate
	push 16
	cmpje
	cmp0
	je l1893
	cthis pokacyfke
l1893:
l1890:
	end method
	method pokalapkie
	push 0
	push iporownaj
	call vecrece,get
	call anreka0,setframe
	push 400
	push 0
	cthis viewhand
	end method
	method preparemover
	localint $1
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	cmpjne
	cmp0
	je l1895
	push "ancyfra"
	push $1
	pop $b
	popax
	add $a,$b
	pop smoved
	push smoved
	spushs
	spop $a
	call [$a],getposx
	pop icyfx
	push smoved
	spushs
	spop $a
	call [$a],getposy
	pop icyfy
	push smoved
	spushs
	spop $a
	call [$a],mssaverelpos
l1895:
	end method
	method mouselrel
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1897
	push igmstate
	push 13
	cmpje
	cmp0
	je l1899
	localint $1
	push "anreka"
	cthis _getid
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	cmpjne
	cmp0
	je l1901
	push smoved
	spushs
	spop $a
	call [$a],framenr
	push $1
	cmpje
	cmp0
	je l1903
	push "cpok"
	cthis cbplay
	push smoved
	spushs
	spop $a
	call [$a],hide
	jmp l1902
l1903:
	push "cpnon"
	cthis crplay
l1902:
l1901:
	push smoved
	spushs
	push icyfx
	push icyfy
	spop $a
	call [$a],setpos
	push "null"
	pop smoved
	push 0
	pop $1
l1904:
	push $1
	push 4
	cmpjl
	cmp0
	je l1905
	jmp l1907
l1906:
	add $1,1
	pop $1
	jmp l1904
l1907:
	push "ancyfra"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],isvisible
	push 1
	cmpje
	cmp0
	je l1909
	ret
l1909:
	jmp l1906
l1905:
	cthis resetstate
	push 0
	cthis cactsndstop
	push "komentdo13"
	call clqd,play
l1899:
l1897:
	end method
	method mousemove
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1911
	push smoved
	spushs
	spop $a
	call [$a],mssetrelpos
l1911:
	end method
	method finishgame
	call gameapi,getgamename
	pop sgmlastscene
	push "domek"
	pop sgmglobpath
	push "gamedomek2"
	pop sgmgame
	push "defaultadv:"
	push 1
	call modadv,get
	call gameapi,play
	end method
	method mouserclick
	push igmdebug
	cmp0
	je l1913
	cthis finishgame
l1913:
	end method
	end game

	class ObjPusher
	method init
	new real,rp
	new int,icyc
	push 0
	pop icyc
	new real,ra
	new real,rdiv
	push 1
	pop rdiv
	end method
	method set
	localreal $1
	localreal $2
	localreal $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop icyc
	pop rdiv
	pop ra
	pop rp
l1914:
	push $4
	push 0
	cmpjl
	cmp0
	je l1915
	push $3
	popax
	div $2,$a
	mov $2,$a
	add $4,1
	pop $4
	jmp l1914
l1915:
	end method
	method next
	push ra
	popax
	add rp,$a
	pop rp
	push icyc
	push 0
	cmpjl
	cmp0
	je l1917
	push rdiv
	popax
	mul ra,$a
	pop ra
	add icyc,1
	pop icyc
	jmp l1916
l1917:
	push icyc
	push 0
	cmpja
	cmp0
	je l1919
	push rdiv
	popax
	div ra,$a
	mov ra,$a
	sub icyc,1
	pop icyc
l1919:
l1916:
	push icyc
	push 0
	cmpje
	ret
	end method
	method get
	push rp
	ret
	end method
	method geta
	push ra
	ret
	end method
	end class

	class classgamestaw
	parent classadvcontroller
	method init
	clparent classadvcontroller,init
	new int,ileticks
	push 3
	pop ileticks
	push 6
	call ptankleo,disable
	push 8
	call ptankleo,disable
	push 9
	call ptankleo,disable
	push 11
	call ptankleo,disable
	push 13
	call ptankleo,disable
	push 1
	push 0
	call anlilia,setframe
	push "buildlil"
	call anlilie,eval
	push "lilpos"
	call anlilie,eval
	call anlilia,buildlil
	call anlilia,liliapos
	push "timlil"
	push 1
	push 1
	push "fintim"
	cthis cnewtimercyclefin
	call timlil,play
	end method
	method buildlil
	new int,iside
	push 2
	pop iside
	new int,itick
	push ileticks
	call itick,rand
	pop itick
	new ObjPusher,ops
	localint $1
	push 12
	call $1,rand
	pop $1
	localint $2
	push 0
	pop $2
l1920:
	push $2
	push $1
	cmpjl
	cmp0
	je l1921
	jmp l1923
l1922:
	add $2,1
	pop $2
	jmp l1920
l1923:
	cthis setlil
	jmp l1922
l1921:
	end method
	method setlil
	call ops,next
	cmp0
	je l1925
	localreal $1
	push 1.2
	pop $1
	localreal $2
	push 1.14
	pop $2
	localint $3
	push 5
	pop $3
	push iside
	spushs
	push 0
	cmpst
	jne l1927
	spop $a
	push 0
	push $1
	push $2
	push $3
	call ops,set
	push 1
	pop iside
	jmp l1926
l1927:
	push 1
	cmpst
	jne l1928
	spop $a
	push 0
	push $1
	popax
	sub 0,$a
	push $2
	push $3
	popax
	sub 0,$a
	call ops,set
	push 2
	pop iside
	jmp l1926
l1928:
	push 2
	cmpst
	jne l1929
	spop $a
	push 0
	push $1
	popax
	sub 0,$a
	push $2
	push $3
	call ops,set
	push 0
	push 0
	cthis setpos
	push 3
	pop iside
	jmp l1926
l1929:
	push 3
	cmpst
	jne l1930
	spop $a
	push 0
	push $1
	push $2
	push $3
	popax
	sub 0,$a
	call ops,set
	push 0
	pop iside
	jmp l1926
l1930:
	spop $a
l1926:
l1925:
	call ops,geta
	push 0
	cthis move
	end method
	method lilpos
	push itick
	push 0
	cmpje
	cmp0
	je l1932
	push ileticks
	push 1
	pop $b
	popax
	sub $a,$b
	pop itick
	cthis setlil
	jmp l1931
l1932:
	sub itick,1
	pop itick
l1931:
	end method
	method liliapos
	cthis lilpos
	cthis getcx
	push 8
	pop $b
	popax
	add $a,$b
	cthis getcy
	push 7
	pop $b
	popax
	sub $a,$b
	call anpanzab,setpos
	end method
	method fintim
	push "lilpos"
	call anlilie,eval
	call anlilia,liliapos
	cthis play
	end method
	end class

	game gamestaw0
	parent classgamestaw
	method init
	clparent classgamestaw,init
	end method
	end game

	game gamestaw1
	parent classgamestaw
	method init
	clparent classgamestaw,init
	end method
	end game

