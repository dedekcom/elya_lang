; Dominik Dagiel   ix 2005

	new db,dbconf
	push "configs/config.beh"
	call dbconf,loadscript
	push "enginedebug:"
	call dbconf,dbgetint
	call engine,setdebugstate
	new int,igmdebug
	push "igmdebug:"
	call dbconf,dbgetint
	pop igmdebug
	new int,igmpcdebug
	push "igmpcdebug:"
	call dbconf,dbgetint
	pop igmpcdebug
	new int,igmexportan
	push "igmexportan:"
	call dbconf,dbgetint
	pop igmexportan
	new int,igmimportan
	push "igmimportan:"
	call dbconf,dbgetint
	pop igmimportan
	new int,igmwinlocal
	push "igmwinlocal:"
	call dbconf,dbgetint
	pop igmwinlocal
	new int,igmmac
	push "igmmac:"
	call dbconf,dbgetint
	pop igmmac
	new int,igmipad
	push "igmipad:"
	call dbconf,dbgetint
	pop igmipad
	new int,igmiphone
	push "igmiphone:"
	call dbconf,dbgetint
	pop igmiphone
	new int,igmandroid
	push "igmandroid:"
	call dbconf,dbgetint
	pop igmandroid
	new string,sgmdeveloper
	push "sgmdeveloper:"
	call dbconf,dbget
	pop sgmdeveloper
	new string,sgmproject
	push "sgmproject:"
	call dbconf,dbget
	pop sgmproject
	push igmdebug
	cmp0
	je l2
	push igmipad
	cmp0
	jne l5
	push igmmac
	cmp0
	jne l5
	push igmiphone
	cmp0
	jne l5
	push igmandroid
	jmp l6
l4:
	push 0
	jmp l6
l5:
	push 1
l6:
	jmp l7
l2:
	push 0
	jmp l7
l3:
	push 1
l7:
	cmp0
	je l8
	push "getsavepath"
	push "global0"
	call engine,addmethod
l8:
	method global0
	push "saves/"
	end method
	method checktouchpad
	push igmipad
	cmp0
	jne l10
	push igmiphone
	cmp0
	jne l10
	push igmandroid
	jmp l11
l9:
	push 0
	jmp l11
l10:
	push 1
l11:
	cmp0
	je l12
	push igmpcdebug
	push 0
	cmpje
	jmp l14
l12:
	push 0
	jmp l14
l13:
	push 1
l14:
	end method
	method getwinpath
	localstring $1
	pop $1
	localstring $2
	push "appdata"
	call engine,getspecialpath
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l16
	push $2
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	jmp l15
l16:
	push $1
l15:
	end method
	method getsavepath
	push igmipad
	cmp0
	jne l19
	push igmmac
	jmp l20
l18:
	push 0
	jmp l20
l19:
	push 1
l20:
	cmp0
	je l21
	call engine,getsavepath
	jmp l17
l21:
	push igmwinlocal
	cmp0
	je l23
	push "saves/"
	cthis getwinpath
	jmp l22
l23:
	push "saves/"
l22:
l17:
	end method
	method buildsavedir
	push igmwinlocal
	cmp0
	je l25
	push igmipad
	neg
	cmp0
	je l25
	push igmmac
	neg
	jmp l27
l25:
	push 0
	jmp l27
l26:
	push 1
l27:
	cmp0
	je l28
	localstring $1
	push "appdata"
	call engine,getspecialpath
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l30
	push "/"
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	localint $2
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l33
	push $2
	push 1
	cmpje
	jmp l34
l32:
	push 0
	jmp l34
l33:
	push 1
l34:
	cmp0
	je l35
	push "/"
	push sgmproject
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l38
	push $2
	push 1
	cmpje
	jmp l39
l37:
	push 0
	jmp l39
l38:
	push 1
l39:
	cmp0
	je l40
	push "/saves"
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	popax
l40:
l35:
l30:
l28:
	end method
	cthis buildsavedir
	new string,A
	push "!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	new int,BYTE0
	push "0"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE0
	new int,BYTE9
	push "9"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE9
	new int,BYTEa
	push "a"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEa
	new int,BYTEz
	push "z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEz
	new int,BYTEA
	push "A"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEA
	new int,BYTEZ
	push "Z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEZ
	new int,BYTE_
	push "_"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE_
	new int,BYTESPACE
	push " "
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTESPACE
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l42
	push $1
	push $2
	cthis varnew
l42:
	end method
	method vardelif
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l44
	push $1
	cthis vardel
l44:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global1"
	cthis addmethod
	end method
	method global1
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global2"
	cthis addmethod
	end method
	method global2
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l45:
	push A
	push $2
	cmpjne
	cmp0
	je l46
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l45
l46:
	end method
	method withlist2
	localstring $1
	pop $1
	localdef $2
	pop $2
l47:
	push A
	push $2
	cmpjne
	cmp0
	je l48
	localdef $3
	pop $3
	push $1
	spushs
	push $3
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l47
l48:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method vars2
	push "var2"
	cthis withlist2
	end method
	method builder_func
	localstring $1
	pop $1
	cthis getbuildername
	spushs
	cthis getbuildername
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l50
	push $1
	push "null"
	cmpje
	cmp0
	je l52
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l51
l52:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l51:
l50:
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l53:
	push A
	push $3
	cmpjne
	cmp0
	je l54
	push $1
	neg
	cmp0
	je l56
	push $2
	push $3
	cmpje
	pop $1
l56:
	localdef $3
	pop $3
	jmp l53
l54:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l57:
	push $2
	push A
	cmpjne
	cmp0
	je l58
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l57
l58:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global3"
	cthis addmethod
	end method
	method global3
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l59:
	push $2
	push A
	cmpjne
	cmp0
	je l60
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l59
l60:
	end method
	method mresize
	cthis gettype
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	cthis getname
	spop $a
	 clparent [$a],resizemethods
	end method
	method times
	localstring $1
	pop $1
	push 0
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis for_plus
	end method
	method upto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_plus
	end method
	method downto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_minus
	end method
	method for_plus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l62
	ret
l62:
l63:
	push $1
	push $2
	cmpjle
	cmp0
	je l64
	jmp l66
l65:
	add $1,1
	pop $1
	jmp l63
l66:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l65
l64:
	end method
	method for_minus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l68
	ret
l68:
l69:
	push $1
	push $2
	cmpjae
	cmp0
	je l70
	jmp l72
l71:
	sub $1,1
	pop $1
	jmp l69
l72:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l71
l70:
	end method
	method double_for
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	push 0
	pop $5
l73:
	push $5
	push $1
	cmpjl
	cmp0
	je l74
	jmp l76
l75:
	add $5,1
	pop $5
	jmp l73
l76:
	push 0
	pop $4
l77:
	push $4
	push $2
	cmpjl
	cmp0
	je l78
	jmp l80
l79:
	add $4,1
	pop $4
	jmp l77
l80:
	push $3
	spushs
	push $5
	push $4
	spop $d
	cthis [$d]
	jmp l79
l78:
	jmp l75
l74:
	end method
	class classobjcounter
	method init
	localstring $1
	pop $1
	new string,_sprefix
	push $1
	pop _sprefix
	new int,_iile
	push 0
	pop _iile
	push "limit"
	push 0
	cthis var2
	end method
	method get
	push limit
	push 0
	cmpja
	cmp0
	je l82
	push _iile
	push limit
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop _iile
	jmp l81
l82:
	add _iile,1
	pop _iile
l81:
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	end method
	method getid
	localint $1
	pop $1
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	end method
	end class

	class classsignals
	method init
	end method
	method stdfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "classsignals0"
	spop $a
	call [$a],addmethod
	end method
	method classsignals0
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdstart
	localstring $1
	pop $1
	push $1
	spushs
	push "onstart"
	push "classsignals1"
	spop $a
	call [$a],addmethod
	end method
	method classsignals1
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdsigs
	localstring $1
	pop $1
	push $1
	cthis stdstart
	push $1
	cthis stdfinish
	end method
	method buildanima
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "onendframe"
	push "classsignals2"
	spop $a
	call [$a],addmethod
	end method
	method classsignals2
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildsnd
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	end method
	method buildtimer
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "ontick"
	push "classsignals3"
	spop $a
	call [$a],addmethod
	end method
	method classsignals3
	cthis getname
	push "_TICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildbut
	localstring $1
	pop $1
	push $1
	spushs
	push "onclick"
	push "classsignals4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onrel"
	push "classsignals5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveon"
	push "classsignals6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveoff"
	push "classsignals7"
	spop $a
	call [$a],addmethod
	end method
	method classsignals4
	cthis getname
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals5
	cthis getname
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals6
	cthis getname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals7
	cthis getname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	method unlocked
	push _block
	push 0
	cmpje
	end method
	method setaslocker
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlocker"
	push "classlocker0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlocker
	push $1
	spushs
	push "lock"
	push "lock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlock"
	push "unlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setlock"
	push "setlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getlock"
	push "getlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlocked"
	push "unlocked"
	spop $a
	call [$a],addmethod
	end method
	method classlocker0
	new int,_block
	push 1
	pop _block
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l83:
	push $2
	push $3
	cmpjl
	cmp0
	je l84
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l83
l84:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l86
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
l86:
	end method
	end module

	class collection
	method init
	localstring $1
	pop $1
	new string,stype
	push $1
	pop stype
	end method
	method type
	push stype
	ret
	end method
	end class

	class array
	parent collection
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	clparent collection,init
	new int,idim
	push $2
	pop idim
	new int,isize
	push $3
	pop isize
	new vector,vec
	push $1
	call vec,type
	push $2
	push 0
	cmpjle
	cmp0
	jne l89
	push $3
	push 0
	cmpjle
	jmp l90
l88:
	push 0
	jmp l90
l89:
	push 1
l90:
	cmp0
	je l91
	ret
l91:
	push $2
	call $3,pow
	push 0
	call vec,resize
	end method
	method getid
	localint $1
	push 0
	pop $1
	localint $2
	push idim
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l92:
	push $2
	push 0
	cmpja
	cmp0
	je l93
	popax
	add $1,$a
	pop $1
	push isize
	popax
	mul $1,$a
	pop $1
	sub $2,1
	pop $2
	jmp l92
l93:
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method get
	cthis getid
	call vec,get
	ret
	end method
	method set
	localdef $1
	pop $1
	cthis getid
	push $1
	call vec,set
	end method
	method getsize
	push isize
	ret
	end method
	method getdim
	push idim
	ret
	end method
	end class

	class stack
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vec
	push $1
	call vec,type
	push $1
	spushs
	spop $d
	new [$d],var
	end method
	method push
	localstring $1
	pop $1
	push $1
	call vec,add
	end method
	method top
	call vec,last
	ret
	end method
	method pop
	cthis top
	pop var
	call vec,size
	push 1
	pop $b
	popax
	sub $a,$b
	call vec,removeat
	push var
	ret
	end method
	method free
	call vec,free
	end method
	end class

	class map
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new int,isize
	push 0
	pop isize
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	neg
	cmp0
	je l95
	push $1
	cthis add
l95:
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],set
	end method
	method add
	localstring $1
	pop $1
	push stype
	spushs
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method get
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method remove
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method contains
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	ret
	end method
	end class

	class map2
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vn
	push "string"
	call vn,type
	new vector,vec
	push $1
	call vec,type
	end method
	method add
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,add
	push $2
	call vec,add
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,find
	push $2
	call vec,set
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call vn,contains
	ret
	end method
	method get
	localstring $1
	pop $1
	push $1
	call vn,find
	call vec,get
	ret
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call vn,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l97
	push $2
	call vec,removeat
	push $2
	call vn,removeat
l97:
	end method
	method free
	call vn,free
	call vec,free
	end method
	method print
	call vec,print
	call vn,print
	end method
	end class

	module advmouse
	method init
	new anima,anmsc
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	push "onendframe"
	push "setnextframe"
	call anmsc,addmethod
	push "onsetframe"
	push "advmouse0"
	call anmsc,addmethod
	call anmsc,hide
	end method
	method advmouse0
	cthis hide
	end method
	method setnextframe
	call anmsc,ansetnextfr
	push "anmsc"
	call mouse,setcursor
	end method
	method set
	localstring $1
	pop $1
	push $1
	call anmsc,isplaying
	neg
	cmp0
	je l99
	push $1
	call anmsc,play
l99:
	push "anmsc"
	call mouse,setcursor
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setact
	push "active"
	cthis set
	end method
	method setbut
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	ret
	end method
	end module

	push igmdebug
	neg
	cmp0
	je l101
	cthis checktouchpad
	jmp l103
l101:
	push 0
	jmp l103
l102:
	push 1
l103:
	cmp0
	je l104
	push "scripts/common/kursorypad.pyz"
	call advmouse,load
	jmp l100
l104:
	push "scripts/common/cursors.pyz"
	call advmouse,load
l100:
	class classgamemusic
	parent classdbreader
	method init
	clparent classdbreader,init
	new string,smuspath
	push ""
	pop smuspath
	new string,sbgrpath
	push ""
	pop sbgrpath
	new snd,_sndbgr
	push "onfinish"
	push "_stdsndloop"
	call _sndbgr,addmethod
	end method
	method reset
	call gameapi,stopmusic
	cthis stopbgr
	end method
	method _stdsndloop
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbl,loadscript
	end method
	method musicpath
	localstring $1
	pop $1
	push $1
	pop smuspath
	end method
	method sndbgrpath
	localstring $1
	pop $1
	push $1
	pop sbgrpath
	end method
	method _play
	localint $1
	pop $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	push 1
	pop $2
	push $1
	call dbl,getcolsno
	pop $3
l105:
	push $2
	push $3
	cmpjl
	cmp0
	je l106
	push $1
	push $2
	call dbl,get
	pop $5
	add $2,1
	pop $2
	push $5
	push "music"
	cmpje
	cmp0
	je l108
	push smuspath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	pop $6
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l110
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l112
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call gameapi,setmusicvol
	add $2,1
	pop $2
l112:
	jmp l109
l110:
	push 100
	call gameapi,setmusicvol
l109:
	push $6
	call gameapi,playmusic
	jmp l107
l108:
	push $5
	push "bgr"
	cmpje
	cmp0
	je l114
	push sbgrpath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	call _sndbgr,load
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l116
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l118
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call _sndbgr,setvol
	add $2,1
	pop $2
l118:
	jmp l115
l116:
	push 100
	call _sndbgr,setvol
l115:
	cthis playbgr
	jmp l113
l114:
	add $2,1
	pop $2
l113:
l107:
	jmp l105
l106:
	end method
	method play
	cthis reset
	call gameapi,getgamename
	push "_play"
	cthis readrow
	end method
	method playbgr
	call _sndbgr,play
	end method
	method stopbgr
	push 0
	call _sndbgr,stop
	end method
	end class

	class Music
	method init
	new vector,vmus
	push "string"
	call vmus,type
	new int,ilastid
	push "musicvolume"
	push 100
	cthis var2
	end method
	method playdb
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	call vmus,free
l119:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l120
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l119
l120:
	push 0
	pop ilastid
	cthis play
	end method
	method playvec
	localstring $1
	localint $2
	pop $2
	pop $1
	call vmus,free
l121:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l122
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	call vmus,add
	add $2,1
	pop $2
	jmp l121
l122:
	push 0
	pop ilastid
	cthis play
	end method
	method playstr
	localstring $1
	pop $1
	push $1
	push " "
	call vmus,vecbuildfromstring
	push 0
	pop ilastid
	cthis play
	end method
	method play
	push ilastid
	call vmus,size
	cmpjae
	cmp0
	je l124
	ret
l124:
	localstring $1
	push MUSICPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,fileexist
	neg
	cmp0
	je l126
	push SFXPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
l126:
	add ilastid,1
	pop ilastid
	localint $2
	push 0
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	push 0
	pop $4
	localint $5
	push musicvolume
	pop $5
	localint $6
	push ilastid
	pop $6
l127:
	push $6
	call vmus,size
	cmpjl
	cmp0
	je l128
	jmp l130
l129:
	add $6,1
	pop $6
	jmp l127
l130:
	localdef $7
	push $6
	call vmus,get
	pop $7
	push $7
	spushs
	push "-l"
	cmpst
	jne l132
	spop $a
	push 1
	pop $2
	jmp l131
l132:
	push "-v"
	cmpst
	jne l133
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $5
	push $5
	push musicvolume
	pop $b
	popax
	mul $a,$b
	push 100
	pop $b
	popax
	div $a,$b
	psax
	pop $5
	jmp l131
l133:
	push "-fin"
	cmpst
	jne l134
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $3
	jmp l131
l134:
	push "-fout"
	cmpst
	jne l135
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $4
	jmp l131
l135:
	push "-p"
	cmpst
	jne l136
	spop $a
	jmp l131
l136:
	spop $a
	push $6
	pop ilastid
	call vmus,size
	pop $6
l131:
	jmp l129
l128:
	push $5
	call gameapi,setmusicvol
	push $2
	cmp0
	je l138
	push $1
	call gameapi,playmusic
	call vmus,size
	pop ilastid
	ret
l138:
	push $1
	call gameapi,loadmusic
	push $3
	cmp0
	je l140
	push $3
	call gameapi,fadeinmusic
	jmp l139
l140:
	call gameapi,startmusic
l139:
	push $4
	cmp0
	je l142
	push $4
	call gameapi,fadeoutmusic
l142:
	end method
	method fadeout
	localint $1
	pop $1
	call gameapi,ismusicplaying
	cmp0
	je l144
	push $1
	call gameapi,fadeoutmusic
	call vmus,size
	pop ilastid
l144:
	end method
	method isplaying
	call gameapi,ismusicplaying
	end method
	method stop
	push 0
	call gameapi,endmusic
	end method
	end class

	new int,igmstate
	new string,sgmstate
	new int,igmdemo
	push "igmdemo:"
	call dbconf,dbgetint
	pop igmdemo
	new int,igmbegin
	push 1
	pop igmbegin
	new int,igmsoundson
	push "igmsoundson:"
	call dbconf,dbgetint
	pop igmsoundson
	new string,sgmfontfile
	push "sgmfontfile:"
	call dbconf,dbget
	pop sgmfontfile
	new string,sgmfontmono
	push "sgmfontmono:"
	call dbconf,dbget
	pop sgmfontmono
	new string,sgmfontmonobold
	push "sgmfontmonobold:"
	call dbconf,dbget
	pop sgmfontmonobold
	new string,sgmfontbold
	push "sgmfontbold:"
	call dbconf,dbget
	pop sgmfontbold
	new string,sgmfontitalic
	push "sgmfontitalic:"
	call dbconf,dbget
	pop sgmfontitalic
	new string,SFXPATH
	push "sfxpath:"
	call dbconf,dbget
	pop SFXPATH
	new string,BGRPATH
	push "sndbgrpath:"
	call dbconf,dbget
	pop BGRPATH
	new string,MUSICPATH
	push "musicpath:"
	call dbconf,dbget
	pop MUSICPATH
	new string,LANG
	push "lang:"
	call dbconf,dbget
	pop LANG
	new string,LANGDIR
	push "lang/"
	push LANG
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop LANGDIR
	new string,SNDPATH
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l146
	push ""
	pop LANG
l146:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l148
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l148:
	new int,igmappw
	new int,igmapph
	call engine,getscreenres
	pop igmapph
	pop igmappw
	new int,iResX
	new int,iResY
	call engine,getscreensize
	pop iResY
	pop iResX
	new real,rgmscalex
	new real,rgmscaley
	call engine,getscreenscale
	pop rgmscaley
	pop rgmscalex
	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method _checkfont
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l150
	push sgmfontfile
	pop $1
l150:
	push ".ttf"
	call $1,contains
	cmp0
	je l152
	push $3
	spushs
	spop $e
	new font,[$e]
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	pop $1
l152:
	push $1
	end method
	method checkfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "_fnt"
	cthis _checkfont
	end method
	method begingame
	push igmbegin
	neg
	pop igmbegin
	push igmbegin
	neg
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpjle
	cmp0
	je l154
	ret
l154:
	sub $3,1
	pop $3
l155:
	push $3
	push 0
	cmpjae
	cmp0
	je l156
	push $1
	spushs
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l155
l156:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	ret
	end method
	method getsndpath
	push _sclwavpath
	ret
	end method
	method getpath
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l158
	push 1
	call $1,strsubb
	jmp l157
l158:
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
l157:
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new anima,[$e]
	localdef $4
	push $2
	cthis getpath
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],load
	push igmdebug
	cmp0
	je l160
	push igmexportan
	cmp0
	je l162
	push $1
	spushs
	push "debug/"
	push 0
	call $4,length
	push "/"
	call $4,strgeteto
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	sub $a,$b
	call $4,getb
	pop $b
	popax
	add $a,$b
	push "/"
	call $4,strgeteto
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],saveimages
	jmp l161
l162:
	push igmimportan
	cmp0
	je l164
	push "debug/"
	push ".pyz"
	call $4,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push "0.png"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l166
	push $1
	spushs
	push $4
	spop $a
	call [$a],loadimages
l166:
l164:
l161:
l160:
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	spushs
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l168
	ret
l168:
	localint $5
	push 0
	pop $5
l169:
	push $5
	push $4
	cmpjl
	cmp0
	je l170
	jmp l172
l171:
	add $5,1
	pop $5
	jmp l169
l172:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l171
l170:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l174
	ret
l174:
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	spushs
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l175:
	push $6
	push $5
	cmpjl
	cmp0
	je l176
	jmp l178
l177:
	add $6,1
	pop $6
	jmp l175
l178:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	cmpjne
	cmp0
	je l180
	push $4
	spushs
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l180:
	jmp l177
l176:
	push $5
	ret
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	ret
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	spushs
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new img,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	push MUSICPATH
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method newsndfree
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method snewsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	end method
	method _newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push "."
	call $2,contains
	neg
	cmp0
	je l182
	push ".wav"
	popax
	add $2,$a
	pop $2
l182:
	push $2
	call engine,fileexist
	neg
	cmp0
	je l184
	push "wav"
	call $2,strsubes
	push "ogg"
	pop $b
	popax
	add $a,$b
	pop $2
l184:
	push $1
	spushs
	push $2
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l186
	push $1
	push $2
	call subtitle,register
l186:
	end method
	method newsfx
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push SFXPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push BGRPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgrloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newbgr
	push $1
	cthis sndplayloop
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l187:
	push $8
	push $7
	cmpjl
	cmp0
	je l188
	jmp l190
l189:
	add $8,1
	pop $8
	jmp l187
l190:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new snd,[$e]
	push $6
	spushs
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l189
l188:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],setcycle
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	cmp0
	je l192
	push $1
	cthis looponfinish
	jmp l191
l192:
	push "H"
	call $2,contains
	cmp0
	je l194
	push $1
	cthis hideonfinish
l194:
l191:
	push "P"
	call $2,contains
	cmp0
	je l196
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l196:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l197:
	push $6
	push $4
	cmpjl
	cmp0
	je l198
	jmp l200
l199:
	add $6,1
	pop $6
	jmp l197
l200:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	cmpjne
	cmp0
	je l202
	push $3
	spushs
	push $5
	spop $a
	call [$a],add
l202:
	jmp l199
l198:
	push $4
	ret
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	ret
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	push 0
	pop $5
l203:
	push $5
	push $4
	cmpjl
	cmp0
	je l204
	jmp l206
l205:
	add $5,1
	pop $5
	jmp l203
l206:
	push $1
	push $2
	push $5
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	push $3
	cthis newanframesgr
	popax
	jmp l205
l204:
	push $4
	ret
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	ret
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	spushs
	spop $a
	call [$a],hide
	push $6
	ret
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],loadscritp
	end method
	method vargmset
	localstring $1
	localdef $2
	pop $2
	pop $1
	localstring $3
	call gameapi,getgamename
	pop $3
	push $3
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l208
	push $3
	spushs
	call $2,gettype
	push $1
	spop $a
	call [$a],varnew
l208:
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	end class

	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l209
	push $1
	push $5
	cmpjle
	cmp0
	je l209
	push $2
	push $4
	cmpjae
	cmp0
	je l209
	push $2
	push $6
	cmpjle
	jmp l211
l209:
	push 0
	jmp l211
l210:
	push 1
l211:
	end method
	method isin2
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l212
	push $1
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l212
	push $2
	push $4
	cmpjae
	cmp0
	je l212
	push $2
	push $4
	push $6
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l214
l212:
	push 0
	jmp l214
l213:
	push 1
l214:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	end method
	method insurf
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $3
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis isin
	end method
	method issurfin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l216
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l216
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l216
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l217
l215:
	push 0
	jmp l217
l216:
	push 1
l217:
	end method
	method commonsurface
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis issurfin
	cmp0
	jne l219
	push $5
	push $6
	push $7
	push $8
	push $1
	push $2
	push $3
	push $4
	cthis issurfin
	jmp l220
l218:
	push 0
	jmp l220
l219:
	push 1
l220:
	end method
	method commonimgs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis commonsurface
	end method
	method surfwithinsurf
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l221
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l221
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l221
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l223
l221:
	push 0
	jmp l223
l222:
	push 1
l223:
	end method
	method imgwithinimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis surfwithinsurf
	end method
	end module

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	ret
	end method
	method ileny
	push ily
	ret
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	ret
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen5
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis ilen
	ret
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	ret
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	ret
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	ret
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	cmpjae
	cmp0
	je l224
	push ilx
	push $6
	cmpjle
	cmp0
	je l224
	push ily
	push $5
	cmpjae
	cmp0
	je l224
	push ily
	push $7
	cmpjle
	jmp l226
l224:
	push 0
	jmp l226
l225:
	push 1
l226:
	ret
	end method
	method ilodlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],lody
	push $2
	spushs
	spop $a
	call [$a],lodx
	push $2
	spushs
	spop $a
	call [$a],lody
	cthis ilen
	end method
	method iposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpos
	push $2
	spushs
	spop $a
	call [$a],getpos
	cthis ilen
	end method
	end module

	class classansearcher
	method init
	end method
	method _findnotr
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $6
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $7
l227:
	push $2
	push $6
	cmpjne
	cmp0
	je l228
	push $3
	push $7
	cmpjne
	jmp l230
l228:
	push 0
	jmp l230
l229:
	push 1
l230:
	cmp0
	je l231
	push $1
	spushs
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l233
	push $2
	push $3
	ret
l233:
	push $4
	popax
	add $2,$a
	pop $2
	push $5
	popax
	add $3,$a
	pop $3
	jmp l227
l231:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method firstnotrx1y
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	method firstnotrexy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrxy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrx1ey
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	end class

	class signal_pack
	method init
	end method
	method addsignals
	localstring $1
	pop $1
	push $1
	spushs
	push "operator<"
	push "signal_pack0"
	spop $a
	call [$a],addmethod
	end method
	method signal_pack0
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	end method
	end class

	class ImagePos
	method init
	end method
	method getex
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	end class

	class ImageVisible
	method init
	new int,_isvisible
	push 1
	pop _isvisible
	end method
	method isvisible
	push _isvisible
	end method
	method show
	push 1
	pop _isvisible
	end method
	method hide
	push 0
	pop _isvisible
	end method
	end class

	class Image
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push A
	push "getz"
	push 0
	push "getpx"
	push 0
	push "getpy"
	push 0
	push "getw"
	push 0
	push "geth"
	push 0
	push "isvisible"
	push 0
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "show"
	push "Image0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "hide"
	push "Image1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setz"
	push "Image2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpos"
	push "Image3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "move"
	push "Image4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getex"
	push "Image5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getey"
	push "Image6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcx"
	push "Image7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcy"
	push "Image8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isin"
	push "Image9"
	spop $a
	call [$a],addmethod
	end method
	method Image0
	push 1
	pop isvisible
	end method
	method Image1
	push 0
	pop isvisible
	end method
	method Image2
	localint $1
	pop $1
	push $1
	pop getz
	end method
	method Image3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop getpx
	push $2
	pop getpy
	end method
	method Image4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add getpx,$a
	pop getpx
	push $2
	popax
	add getpy,$a
	pop getpy
	end method
	method Image5
	push getpx
	push getw
	pop $b
	popax
	add $a,$b
	end method
	method Image6
	push getpy
	push geth
	pop $b
	popax
	add $a,$b
	end method
	method Image7
	push getpx
	push getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image8
	push getpy
	push geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image9
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	neg
	cmp0
	je l235
	push $3
	neg
	cmp0
	jne l238
	push $3
	cmp0
	je l239
	push isvisible
	jmp l241
l239:
	push 0
	jmp l241
l240:
	push 1
l241:
	jmp l242
l237:
	push 0
	jmp l242
l238:
	push 1
l242:
	cmp0
	je l243
	push $1
	push getpx
	cmpjae
	cmp0
	je l244
	push $1
	cthis getex
	cmpjl
	cmp0
	je l244
	push $2
	push getpy
	cmpjae
	cmp0
	je l244
	push $2
	cthis getey
	cmpjl
	jmp l246
l244:
	push 0
	jmp l246
l245:
	push 1
l246:
	jmp l236
l243:
	push 0
l236:
	jmp l234
l235:
	push 0
l234:
	end method
	end class

	class anima_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "_clanbuildpomvars"
	push "anima_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_clanbuildpomvars
	push $1
	spushs
	push "setbpos"
	push "anima_pack1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "saverelpos"
	push "anima_pack2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrelpos"
	push "anima_pack3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssaverelpos"
	push "anima_pack4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssetrelpos"
	push "anima_pack5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rplay"
	push "anima_pack6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setcpos"
	push "anima_pack7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator="
	push "anima_pack8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator=="
	push "anima_pack9"
	spop $a
	call [$a],addmethod
	push $1
	cthis addsignals
	end method
	method anima_pack0
	new int,_ixp
	new int,_iyp
	end method
	method anima_pack1
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anima_pack2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method anima_pack3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack4
	call mouse,getpos
	cthis saverelpos
	end method
	method anima_pack5
	call mouse,getpos
	cthis setrelpos
	end method
	method anima_pack6
	localstring $1
	pop $1
	push $1
	cthis isplaying
	neg
	cmp0
	je l248
	push $1
	cthis play
l248:
	end method
	method anima_pack7
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack8
	localstring $1
	pop $1
	push $1
	cthis copy
	end method
	method anima_pack9
	localstring $1
	pop $1
	cthis actionnr
	push $1
	spushs
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l249
	cthis framenr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l251
l249:
	push 0
	jmp l251
l250:
	push 1
l251:
	end method
	end class

	class timer_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	cthis addsignals
	end method
	end class

	class vector_pack
	method init
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l252:
	push $2
	cthis size
	cmpjl
	cmp0
	je l253
	jmp l255
l254:
	add $2,1
	pop $2
	jmp l252
l255:
	push $1
	spushs
	push $2
	cthis get
	spop $d
	cthis [$d]
	jmp l254
l253:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "each"
	push "each"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator-"
	push "vector_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator+"
	push "vector_pack1"
	spop $a
	call [$a],addmethod
	end method
	method vector_pack0
	localdef $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method vector_pack1
	localdef $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	end class

	method new_object
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $1
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	 clparent [$a],resizemethods
	end method
	method new_anima
	localstring $1
	pop $1
	push "anima"
	push $1
	cthis new_object
	end method
	method new_vector
	localstring $1
	pop $1
	push "vector"
	push $1
	cthis new_object
	end method
	class classanfilter
	method init
	end method
	method buildanfilter
	new filter,ft
	cthis getname
	call ft,link
	push 1
	call ft,setpivottype
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "buildanfilter"
	push "buildanfilter"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildanfilter
	push $1
	spushs
	push "setopacity"
	push "classanfilter0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setzoom"
	push "classanfilter1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setangle"
	push "classanfilter2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getangle"
	push "classanfilter3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rotate"
	push "classanfilter4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpivottype"
	push "classanfilter5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlink"
	push "classanfilter6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "link"
	push "classanfilter7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "blend"
	push "classanfilter8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mask"
	push "classanfilter9"
	spop $a
	call [$a],addmethod
	end method
	method classanfilter0
	localint $1
	pop $1
	push $1
	call ft,setopacity
	end method
	method classanfilter1
	localreal $1
	pop $1
	push $1
	call ft,setzoom
	end method
	method classanfilter2
	localreal $1
	pop $1
	push $1
	call ft,setangle
	end method
	method classanfilter3
	call ft,getangle
	ret
	end method
	method classanfilter4
	localreal $1
	pop $1
	push $1
	call ft,rotate
	end method
	method classanfilter5
	localint $1
	pop $1
	push $1
	call ft,setpivottype
	end method
	method classanfilter6
	call ft,unlink
	end method
	method classanfilter7
	cthis getname
	call ft,link
	end method
	method classanfilter8
	localstring $1
	pop $1
	push $1
	call ft,blend
	end method
	method classanfilter9
	localstring $1
	pop $1
	push $1
	call ft,mask
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l256:
	push $1
	push iile
	cmpjl
	cmp0
	je l257
	jmp l259
l258:
	add $1,1
	pop $1
	jmp l256
l259:
	push $1
	call _vs,get
	neg
	cmp0
	je l261
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
l261:
	jmp l258
l257:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _san
	call $1,strsubbs
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	method allfree
	call _vs,vecsum
	push 0
	cmpje
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l263
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l265
	spop $a
	push $1
	cthis copy
	jmp l264
l265:
	push "gmobjvec"
	cmpst
	jne l266
	spop $a
	push $1
	cthis copy
	jmp l264
l266:
	push "gmimgvec"
	cmpst
	jne l267
	spop $a
	push $1
	cthis copy
	jmp l264
l267:
	spop $a
	cthis free
	push $1
	cthis add
l264:
	jmp l262
l263:
	cthis free
	push $1
	cthis add
l262:
	end method
	method save
	localstring $1
	pop $1
	push $1
	call lsim,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call lsim,load
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	ret
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	ret
	end method
	method removegr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l268:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l269
	jmp l271
l270:
	add $2,1
	pop $2
	jmp l268
l271:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis remove
	jmp l270
l269:
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l272:
	push $2
	cthis size
	cmpjl
	cmp0
	je l273
	jmp l275
l274:
	add $2,1
	pop $2
	jmp l272
l275:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l274
l273:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l276:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l277
	jmp l279
l278:
	add $2,1
	pop $2
	jmp l276
l279:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l278
l277:
	end method
	method addgroups
	push "addgr"
	cthis withlist
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	ret
	end method
	method empty
	cthis size
	push 0
	cmpje
	ret
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	ret
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	ret
	end method
	method print
	push ""
	call engine,print
	push "------ type("
	cthis gettype
	pop $b
	popax
	add $a,$b
	push ") "
	pop $b
	popax
	add $a,$b
	cthis getname
	pop $b
	popax
	add $a,$b
	push " ------"
	pop $b
	popax
	add $a,$b
	call engine,print
	call lsim,print
	push "------ end ------"
	call engine,print
	push ""
	call engine,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	ret
	end method
	method set
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,set
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method additer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l280:
	push $3
	push 0
	cmpja
	cmp0
	je l281
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	sub $3,1
	pop $3
	jmp l280
l281:
	end method
	method buildarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newarray
	push $2
	push 0
	push $3
	cthis additer
	end method
	method deleteall
	localint $1
	push 0
	pop $1
l282:
	push $1
	cthis size
	cmpjl
	cmp0
	je l283
	jmp l285
l284:
	add $1,1
	pop $1
	jmp l282
l285:
	push $1
	cthis get
	spushs
	spop $d
	delete [$d]
	jmp l284
l283:
	end method
	method deleteallgm
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l286:
	push $2
	cthis size
	cmpjl
	cmp0
	je l287
	jmp l289
l288:
	add $2,1
	pop $2
	jmp l286
l289:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],vardel
	jmp l288
l287:
	end method
	method deleteallgmobj
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l290:
	push $2
	cthis size
	cmpjl
	cmp0
	je l291
	jmp l293
l292:
	add $2,1
	pop $2
	jmp l290
l293:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],deletegmobj
	jmp l292
l291:
	end method
	method lockall
	push "lock"
	cthis eval
	cthis print
	end method
	method unlockall
	push "unlock"
	cthis eval
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l295
	push $1
	call lsim,add
l295:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l296:
	push $2
	push $1
	cmpjne
	cmp0
	je l297
	push $2
	cthis addbegin
	pop $2
	jmp l296
l297:
	end method
	method addlist
	push A
	cthis sepadd
	end method
	method removelist
	push "remove"
	cthis withlist
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l299
	push $1
	cthis addbegin
	jmp l298
l299:
	push $2
	push $3
	cmpjae
	cmp0
	je l301
	push $1
	cthis add
	jmp l300
l301:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l302:
	push $4
	push $2
	cmpja
	cmp0
	je l303
	jmp l305
l304:
	sub $4,1
	pop $4
	jmp l302
l305:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l304
l303:
	push $2
	push $1
	cthis set
l300:
l298:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removefirst
	push 0
	call lsim,removeat
	end method
	method removelast
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l306:
	push $1
	cthis contains
	cmp0
	je l307
	push $1
	cthis remove
	jmp l306
l307:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l308:
	push $2
	cthis size
	cmpjl
	cmp0
	je l309
	jmp l311
l310:
	add $2,1
	pop $2
	jmp l308
l311:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l313
	push $2
	cthis removeat
l313:
	jmp l310
l309:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	ret
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	ret
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l314:
	push $2
	push $3
	cmpjle
	cmp0
	je l315
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l314
l315:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l317
	call $1,rand
	cthis get
	jmp l316
l317:
	push "null"
l316:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l319
	localint $3
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l320:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l321
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l323
	push "null"
	ret
l323:
	jmp l320
l321:
	push $3
	cthis get
	ret
l319:
	push "null"
	end method
	method buildfullvars
	push "gmobjvec0"
	cthis each
	end method
	method gmobjvec0
	localdef $1
	pop $1
	cthis buildfullname
	end method
	method buildvars
	push "gmobjvec1"
	cthis each
	end method
	method gmobjvec1
	localdef $1
	pop $1
	cthis getname
	cthis addtogamevars
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l325
l326:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l327
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l326
l327:
l325:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method isplaying
	localint $1
	push 0
	pop $1
l328:
	push $1
	cthis size
	cmpjl
	cmp0
	je l329
	jmp l331
l330:
	add $1,1
	pop $1
	jmp l328
l331:
	push $1
	cthis get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],isplaying
	cmp0
	je l333
	push 1
	ret
l333:
	jmp l330
l329:
	push 0
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l334:
	push $5
	push 0
	cmpjae
	cmp0
	je l335
	jmp l337
l336:
	sub $5,1
	pop $5
	jmp l334
l337:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l339
	push $5
	call lsim,get
	ret
l339:
	jmp l336
l335:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l340:
	push $5
	push 0
	cmpjae
	cmp0
	je l341
	jmp l343
l342:
	sub $5,1
	pop $5
	jmp l340
l343:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l345
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l345:
	jmp l342
l341:
	push 0
	ret
	end method
	method setframe
	localdef $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l346:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l347
	jmp l349
l348:
	add $2,1
	pop $2
	jmp l346
l349:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l348
l347:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l350:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l351
	jmp l353
l352:
	add $3,1
	pop $3
	jmp l350
l353:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l352
l351:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l354:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l355
	jmp l357
l356:
	add $4,1
	pop $4
	jmp l354
l357:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l356
l355:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l358:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l359
	jmp l361
l360:
	add $5,1
	pop $5
	jmp l358
l361:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l360
l359:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l362:
	push $3
	cthis size
	cmpjl
	cmp0
	je l363
	jmp l365
l364:
	add $3,1
	pop $3
	jmp l362
l365:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l367
	push $3
	ret
l367:
	jmp l364
l363:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l368:
	push $3
	cthis size
	cmpjl
	cmp0
	je l369
	jmp l371
l370:
	add $3,1
	pop $3
	jmp l368
l371:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l373
	push $3
	ret
l373:
	jmp l370
l369:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l374:
	push $2
	cthis size
	cmpjl
	cmp0
	je l375
	jmp l377
l376:
	add $2,1
	pop $2
	jmp l374
l377:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l376
l375:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l378:
	push $3
	cthis size
	cmpjl
	cmp0
	je l379
	jmp l381
l380:
	add $3,1
	pop $3
	jmp l378
l381:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l380
l379:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l382:
	push $4
	cthis size
	cmpjl
	cmp0
	je l383
	jmp l385
l384:
	add $4,1
	pop $4
	jmp l382
l385:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l384
l383:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l386:
	push $2
	cthis size
	cmpjl
	cmp0
	je l387
	jmp l389
l388:
	add $2,1
	pop $2
	jmp l386
l389:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l391
	push 0
	ret
l391:
	jmp l388
l387:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l393
	ret
l393:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l394:
	push $6
	cthis size
	cmpjl
	cmp0
	je l395
	jmp l397
l396:
	add $6,1
	pop $6
	jmp l394
l397:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l399
	push $6
	pop $3
	push $5
	pop $4
l399:
	jmp l396
l395:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l401
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l402
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l404
l402:
	push 0
	jmp l404
l403:
	push 1
l404:
	jmp l405
l400:
	push 0
	jmp l405
l401:
	push 1
l405:
	ret
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	new string,sanload
	push "null"
	pop sanload
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	ret
	end method
	method getposy
	push _iy
	ret
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	ret
	end method
	method getpy
	push _iy
	ret
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getz
	push _iz
	ret
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l407
	push _ix
	ret
l407:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l408:
	push $4
	push $1
	cmpjl
	cmp0
	je l409
	jmp l411
l410:
	add $4,1
	pop $4
	jmp l408
l411:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l413
	push $3
	pop $2
l413:
	jmp l410
l409:
	push $2
	ret
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l415
	push _iy
	ret
l415:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l416:
	push $4
	push $1
	cmpjl
	cmp0
	je l417
	jmp l419
l418:
	add $4,1
	pop $4
	jmp l416
l419:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l421
	push $3
	pop $2
l421:
	jmp l418
l417:
	push $2
	ret
	end method
	method _getpx
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l423
	push _ix
	ret
l423:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l424:
	push $4
	push $1
	cmpjl
	cmp0
	je l425
	jmp l427
l426:
	add $4,1
	pop $4
	jmp l424
l427:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l429
	push $3
	pop $2
l429:
	jmp l426
l425:
	push $2
	ret
	end method
	method _getpy
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l431
	push _iy
	ret
l431:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l432:
	push $4
	push $1
	cmpjl
	cmp0
	je l433
	jmp l435
l434:
	add $4,1
	pop $4
	jmp l432
l435:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l437
	push $3
	pop $2
l437:
	jmp l434
l433:
	push $2
	ret
	end method
	method _getw
	cthis getex
	cthis _getpx
	pop $b
	popax
	sub $a,$b
	end method
	method _geth
	cthis getey
	cthis _getpy
	pop $b
	popax
	sub $a,$b
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l439
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l439:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l440:
	push $3
	cthis size
	cmpjl
	cmp0
	je l441
	jmp l443
l442:
	add $3,1
	pop $3
	jmp l440
l443:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l442
l441:
	end method
	method nplay
	localint $1
	pop $1
	push "play"
	push $1
	cthis eval1
	end method
	method txtreset
	localint $1
	push 0
	pop $1
l444:
	push $1
	cthis size
	cmpjl
	cmp0
	je l445
	jmp l447
l446:
	add $1,1
	pop $1
	jmp l444
l447:
	push $1
	cthis get
	spushs
	push ""
	spop $a
	call [$a],txtset
	jmp l446
l445:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l448:
	push $5
	push 0
	cmpjae
	cmp0
	je l449
	jmp l451
l450:
	sub $5,1
	pop $5
	jmp l448
l451:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l453
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l453:
	jmp l450
l449:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method isinfunc
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l454:
	push $4
	push 0
	cmpjae
	cmp0
	je l455
	jmp l457
l456:
	sub $4,1
	pop $4
	jmp l454
l457:
	push $4
	call lsim,get
	spushs
	push $3
	spushs
	push $1
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l459
	push $4
	pop _ifound
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	ret
l459:
	jmp l456
l455:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method isincut
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l460:
	push $5
	push 0
	cmpjae
	cmp0
	je l461
	jmp l463
l462:
	sub $5,1
	pop $5
	jmp l460
l463:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],withincut
	cmp0
	je l465
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l467
l465:
	push 0
	jmp l467
l466:
	push 1
l467:
	cmp0
	je l468
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l468:
	jmp l462
l461:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method withincut
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push $1
	push "gmimgvec0"
	cthis ineach
	pop $1
	pop $2
	end method
	method gmimgvec0
	localdef $1
	pop $1
	localint $2
	pop $2
	localint $3
	pop $3
	push $2
	push $3
	cthis withincut
	push $3
	push $2
	end method
	method findif
	localstring $1
	pop $1
	push $1
	push 1
	cthis _find
	end method
	method getfound
	push _ifound
	ret
	end method
	method getsfound
	push _ifound
	cthis get
	ret
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findsfr
	localstring $1
	pop $1
	push "framename"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "anactnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec1"
	cthis find_closest
	end method
	method gmimgvec1
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method getsac
	localstring $1
	pop $1
	push $1
	cthis findsac
	cthis get
	end method
	method getsacfr
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l469:
	push $3
	cthis size
	cmpjl
	cmp0
	je l470
	jmp l472
l471:
	add $3,1
	pop $3
	jmp l469
l472:
	push $3
	cthis get
	spushs
	spop $a
	call [$a],actionname
	push $1
	cmpje
	cmp0
	je l474
	push $3
	cthis get
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpje
	jmp l476
l474:
	push 0
	jmp l476
l475:
	push 1
l476:
	cmp0
	je l477
	push $3
	cthis get
	ret
l477:
	jmp l471
l470:
	push "null"
	end method
	method blitto
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l478:
	push $2
	cthis size
	cmpjl
	cmp0
	je l479
	jmp l481
l480:
	add $2,1
	pop $2
	jmp l478
l481:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],blit
	jmp l480
l479:
	end method
	method sortz
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l482:
	push $2
	cthis size
	cmpjl
	cmp0
	je l483
	jmp l485
l484:
	add $2,1
	pop $2
	jmp l482
l485:
	push $2
	cthis get
	spushs
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	jmp l484
l483:
	end method
	method ancopies
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l486:
	push $3
	push $2
	cmpjl
	cmp0
	je l487
	jmp l489
l488:
	add $3,1
	pop $3
	jmp l486
l489:
	push GAME
	spushs
	push $1
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],copyanima
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l488
l487:
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method addsrcanima
	localstring $1
	pop $1
	push "srcanima"
	push $1
	cthis var2
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l491
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l493
	new vector,_vtmp
	push "string"
	call _vtmp,type
	push $1
	push "/"
	call _vtmp,vecbuildfromstring
	push "an"
	call _vtmp,last
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	delete _vtmp
	jmp l492
l493:
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
l492:
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l490
l491:
	push $1
	pop $3
l490:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l495
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l494
l495:
	push $1
	pop $3
l494:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method deleteloaded
	cthis deleteallgm
	push sanload
	push "null"
	cmpjne
	cmp0
	je l497
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l497:
	end method
	method deleteinit
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l498:
	push $2
	cthis size
	cmpjl
	cmp0
	je l499
	jmp l501
l500:
	add $2,1
	pop $2
	jmp l498
l501:
	localdef $3
	push $2
	cthis get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],gettype
	push "gmimgvec"
	cmpje
	cmp0
	je l503
	push $3
	spushs
	spop $a
	call [$a],deleteinit
l503:
	push $1
	spushs
	push $3
	spop $a
	call [$a],vardel
	jmp l500
l499:
	push sanload
	push "null"
	cmpjne
	cmp0
	je l505
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l505:
	end method
	end class

	class gmadvvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l506:
	push $5
	push 0
	cmpjae
	cmp0
	je l507
	jmp l509
l508:
	sub $5,1
	pop $5
	jmp l506
l509:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],butisin
	cmp0
	je l511
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l511:
	jmp l508
l507:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	end class

	class gmmaskvec
	parent gmadvvec
	method init
	clparent gmadvvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,butisin
	end method
	end class

	class Subtitle
	method init
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $5
	push 0.5
	pop $5
	localint $6
	localint $7
	localint $8
	push 255
	pop $6
	push 255
	pop $7
	push 255
	pop $8
	localstring $9
	push SNDPATH
	pop $9
	new string,ssubpos
	push "sgmsubtitlespos:"
	call dbconf,dbget
	pop ssubpos
	push ssubpos
	push "null"
	cmpje
	cmp0
	je l513
	push "down"
	pop ssubpos
l513:
	localdef $10
	push "sgmsubtitlespos:"
	push 2
	call dbconf,dbgets
	pop $10
	new int,isubpos
	push $10
	push "null"
	cmpjne
	cmp0
	je l515
	push $10
	jmp l514
l515:
	push 15
l514:
	pop isubpos
	new int,bshadow
	push "igmsubshadow:"
	call dbconf,dbgetint
	pop bshadow
	new int,bblackbg
	push "igmsubblackbg:"
	call dbconf,dbgetint
	pop bblackbg
	new int,iborx
	push $4
	pop iborx
	new font,fnt
	push $2
	push $3
	call fnt,load
	new int,ifontsize
	push $3
	pop ifontsize
	new db,dbl
	push LANGDIR
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,load
	localstring $10
	localstring $11
	new vector,v1
	push "string"
	call v1,type
	localint $12
	push iResX
	push 2
	push $4
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $5
	push $3
	pop $b
	popax
	mul $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop $12
	localint $13
	localint $14
	localint $15
	push 0
	pop $15
	localint $16
	push 0
	pop $16
l516:
	push $16
	call dbl,getrowsno
	cmpjl
	cmp0
	je l517
	jmp l519
l518:
	add $16,1
	pop $16
	jmp l516
l519:
	push $9
	push $16
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	call engine,fileexist
	neg
	cmp0
	je l521
	push $9
	push $16
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".ogg"
	pop $b
	popax
	add $a,$b
	pop $10
l521:
	push $16
	push 0
	push $10
	call dbl,set
	push $16
	push 1
	call dbl,get
	pop $10
	push $10
	push " "
	call v1,vecbuildfromstring
	push ""
	pop $11
	push 1
	pop $13
	push 0
	pop $14
l522:
	push $14
	call v1,size
	cmpjl
	cmp0
	je l523
	jmp l525
l524:
	add $14,1
	pop $14
	jmp l522
l525:
	call $11,length
	push $14
	call v1,get
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	push $12
	cmpjle
	cmp0
	je l527
	push " "
	push $14
	call v1,get
	pop $b
	popax
	add $a,$b
	popax
	add $11,$a
	pop $11
	jmp l526
l527:
	push $13
	push 1
	cmpje
	cmp0
	je l529
	push $16
	push $13
	push $11
	call dbl,set
	jmp l528
l529:
	push $16
	push $11
	call dbl,add
l528:
	push $14
	call v1,get
	pop $11
	add $13,1
	pop $13
l526:
	jmp l524
l523:
	push $13
	push 1
	cmpje
	cmp0
	je l531
	push $16
	push $13
	push $11
	call dbl,set
	jmp l530
l531:
	push $16
	push $11
	call dbl,add
l530:
	push $13
	push $15
	cmpja
	cmp0
	je l533
	push $13
	pop $15
l533:
	jmp l518
l517:
	new gmimgvec,grtxt
	new gmimgvec,grtxts
	localint $16
	push 0
	pop $16
l534:
	push $16
	push $15
	cmpjl
	cmp0
	je l535
	jmp l537
l536:
	add $16,1
	pop $16
	jmp l534
l537:
	push "txt"
	push $16
	pop $b
	popax
	add $a,$b
	pop $10
	push bshadow
	cmp0
	je l539
	push "txts"
	push $16
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	push ""
	push "fnt"
	cthis black
	clparent classgame,newtext
	push $11
	call grtxts,add
	jmp l538
l539:
	push bblackbg
	cmp0
	je l541
	push "imgs"
	push $16
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	spushs
	spop $e
	new img,[$e]
	push $11
	call grtxts,add
l541:
l538:
	push $10
	push ""
	push "fnt"
	push $6
	push $7
	push $8
	clparent classgame,newtext
	push $10
	call grtxt,add
	jmp l536
l535:
	new db,dbsnd
	new timer,timtxt
	push 1
	call timtxt,settick
	push 1
	call timtxt,setcycle
	push "onfinish"
	push "Subtitle0"
	call timtxt,addmethod
	push 12000
	cthis setz
	end method
	method Subtitle0
	cthis cisplaying
	neg
	cmp0
	je l543
	cthis hidesubs
	jmp l542
l543:
	cthis play
l542:
	end method
	method reset
	cthis stop
	call dbsnd,free
	end method
	method hidesubs
	call grtxt,hide
	call grtxts,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	call grtxt,setz
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxts,setz
	end method
	method stop
	cthis hidesubs
	push 0
	call timtxt,stop
	end method
	method register
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push $2
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l545
	localdef $4
	push $1
	call dbsnd,findbyrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l547
	push $4
	push 1
	push $3
	call dbsnd,set
	jmp l546
l547:
	localdef $4
	call dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	call dbsnd,add
	push $4
	push $3
	call dbsnd,add
l546:
l545:
	end method
	method getiddialog
	localstring $1
	pop $1
	push $1
	call dbsnd,findbyrow
	end method
	method play
	localstring $1
	pop $1
	cthis stop
	localdef $2
	push $1
	call dbsnd,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l549
	localint $3
	push 0
	pop $3
	push $2
	push 1
	call dbsnd,get
	pop $2
	localdef $4
	push $2
	call dbl,getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	push 0
	push 0
	call grtxt,setpos
	localint $8
	push 2
	pop $8
	localint $9
	push 0
	pop $9
l550:
	push $9
	push $4
	cmpjl
	cmp0
	je l551
	jmp l553
l552:
	add $9,1
	pop $9
	jmp l550
l553:
	push $9
	call grtxt,get
	pop $5
	push $5
	spushs
	push $2
	push $9
	push 1
	pop $b
	popax
	add $a,$b
	call dbl,get
	spop $a
	call [$a],txtset
	push $5
	spushs
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,length
	popax
	add $3,$a
	pop $3
	push $5
	spushs
	push iResX
	push $5
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $9
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push $8
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $5
	spushs
	spop $a
	call [$a],show
	push bshadow
	cmp0
	je l555
	push $9
	call grtxt,get
	pop $6
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],txtset
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push 1
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	spop $a
	call [$a],show
	jmp l554
l555:
	push bblackbg
	cmp0
	je l557
	push $9
	call grtxts,get
	pop $6
	push 4
	pop $7
	push 2
	pop $8
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getw
	push $7
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],geth
	push $8
	pop $b
	popax
	add $a,$b
	cthis black
	push 255
	spop $a
	call [$a],create
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $7
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $8
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	spop $a
	call [$a],show
l557:
l554:
	jmp l552
l551:
	push ssubpos
	push "up"
	cmpje
	cmp0
	je l559
	push isubpos
	pop $8
	jmp l558
l559:
	push iResY
	push $4
	push ifontsize
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push isubpos
	pop $b
	popax
	sub $a,$b
	pop $8
l558:
	push 0
	push $8
	call grtxt,move
	push bshadow
	cmp0
	jne l562
	push bblackbg
	jmp l563
l561:
	push 0
	jmp l563
l562:
	push 1
l563:
	cmp0
	je l564
	push 0
	push $8
	call grtxts,move
l564:
	call timtxt,play
	push $3
	jmp l548
l549:
	push 0
l548:
	end method
	end class

	new int,igmsubtitle
	push "igmsubtitle:"
	call dbconf,dbgetint
	pop igmsubtitle
	new int,igmlektor
	push "igmlektor:"
	call dbconf,dbgetint
	pop igmlektor
	new int,igmchardelay
	push "igmchardelay:"
	call dbconf,dbgetint
	pop igmchardelay
	push igmsubtitle
	cmp0
	je l566
	push "subtitles_src:"
	call dbconf,dbget
	push sgmfontbold
	push 24
	push 50
	new Subtitle,subtitle
l566:
	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	new timer,timlektor
	push "onfinish"
	push "classsound0"
	call timlektor,addmethod
	push igmsubtitle
	cmp0
	je l570
	call subtitle,reset
l570:
	end method
	method classsound0
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l568
	push _csplay
	spushs
	spop $a
	call [$a],onfinish
l568:
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	ret
	end method
	method cisactsnd
	localstring $1
	pop $1
	push $1
	push _csplay
	cmpje
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l572
	push $1
	cthis cbplay
	jmp l571
l572:
	cthis cgetactsnd
	push $1
	cmpjne
	cmp0
	je l574
	push $1
	cthis cbplay
l574:
l571:
	end method
	method cbselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	jne l577
	cthis cgetactsnd
	push $1
	cmpjne
	jmp l578
l576:
	push 0
	jmp l578
l577:
	push 1
l578:
	cmp0
	je l579
	push $1
	cthis cbplay
l579:
	end method
	method cbplay
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l581
	push 1
	cthis csplaystop
l581:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l583
	push $1
	cthis csubplay
l583:
	end method
	method cbsplay
	localstring $1
	pop $1
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l585
	push $1
	cthis csubplay
l585:
	end method
	method cbplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	cthis cbplay
	end method
	method cbplay2
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l587
	push 0
	cthis csplaystop
l587:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l589
	push $1
	cthis csubplay
l589:
	end method
	method crplay
	localstring $1
	pop $1
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l591
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l593
l591:
	push 0
	jmp l593
l592:
	push 1
l593:
	cmp0
	je l594
	ret
l594:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l596
	push $1
	cthis csubplay
l596:
	end method
	method cbplayif
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l598
	push $1
	cthis cbplay
l598:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l600
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	jmp l602
l600:
	push 0
	jmp l602
l601:
	push 1
l602:
	cmp0
	je l603
	push $1
	cthis csubplay
l603:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call $2,rand
	push 0
	cmpje
	cmp0
	je l605
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
l605:
	end method
	method cplayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "c"
	push $1
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $d
	cthis [$d]
	push $2
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l607
	push $3
	push "null"
	cmpjne
	jmp l609
l607:
	push 0
	jmp l609
l608:
	push 1
l609:
	cmp0
	je l610
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l610:
	end method
	method cactsndstop
	localint $1
	pop $1
	cthis cisplaying
	cmp0
	je l612
	push $1
	cthis csplaystop
l612:
	end method
	method csplaystop
	localint $1
	pop $1
	call timlektor,isplaying
	cmp0
	je l614
	push 1
	call timlektor,stop
	jmp l613
l614:
	push _csplay
	spushs
	push $1
	spop $a
	call [$a],stop
l613:
	end method
	method cstopsnds
	localint $1
	pop $1
	call _csplay,in
	cmp0
	je l616
	cthis cisplaying
	jmp l618
l616:
	push 0
	jmp l618
l617:
	push 1
l618:
	cmp0
	je l619
	push $1
	cthis cactsndstop
l619:
	end method
	method cisplaying
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l621
	call timlektor,isplaying
	cmp0
	jne l623
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l624
l622:
	push 0
	jmp l624
l623:
	push 1
l624:
	jmp l620
l621:
	push 0
l620:
	end method
	method csubplay
	localstring $1
	pop $1
	push igmsubtitle
	cmp0
	je l626
	localdef $2
	push $1
	call subtitle,play
	pop $2
	push igmlektor
	cmp0
	jne l629
	push $2
	push 0
	cmpjle
	jmp l630
l628:
	push 0
	jmp l630
l629:
	push 1
l630:
	cmp0
	je l631
	push $1
	spushs
	spop $a
	call [$a],play
	jmp l627
l631:
	push $2
	push igmchardelay
	pop $b
	popax
	mul $a,$b
	call timlektor,setdelay
	call timlektor,play
l627:
	jmp l625
l626:
	push $1
	spushs
	spop $a
	call [$a],play
l625:
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	je l633
	push 0
	pop iile
	ret
l633:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l634:
	push $3
	push $2
	cmpjl
	cmp0
	je l635
	jmp l637
l636:
	add $3,1
	pop $3
	jmp l634
l637:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l636
l635:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	cmpjle
	cmp0
	je l639
	push 0
	pop iile
	ret
l639:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	cmpje
	cmp0
	je l641
	call iile,rand
	pop ilicz
l641:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l642:
	push $3
	push iile
	cmpjl
	cmp0
	je l643
	jmp l645
l644:
	add $3,1
	pop $3
	jmp l642
l645:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l644
l643:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	cmpjne
	cmp0
	je l647
	push splay
	spushs
	push $1
	spop $a
	call [$a],stop
l647:
	end method
	method isplaying
	push splay
	push "null"
	cmpjne
	cmp0
	je l649
	push splay
	spushs
	spop $a
	call [$a],isplaying
	jmp l648
l649:
	push 0
l648:
	end method
	method randplay
	localint $1
	pop $1
	call $1,rand
	push 0
	cmpje
	cmp0
	je l651
	cthis play
l651:
	end method
	method playid
	localint $1
	pop $1
	push $1
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	cthis play
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method reset
	push 0
	pop ilicz
	end method
	method rbgplay
	cthis isplaying
	neg
	cmp0
	je l653
	cthis bgplay
l653:
	end method
	method rplay
	cthis isplaying
	neg
	cmp0
	je l655
	cthis play
l655:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	spushs
	spop $a
	call [$a],play
	push itype
	push 0
	cmpje
	cmp0
	je l657
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l656
l657:
	push itype
	push 1
	cmpje
	cmp0
	je l659
	call iile,rand
	pop ilicz
l659:
l656:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l660:
	push $2
	push iile
	cmpjl
	cmp0
	je l661
	jmp l663
l662:
	add $2,1
	pop $2
	jmp l660
l663:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setvol
	jmp l662
l661:
	end method
	end class

	class SoundSource
	method init
	end method
	method setvol
	localstring $1
	localint $2
	localint $3
	localreal $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call $5,abs
	push $4
	cmpjae
	cmp0
	je l665
	push $1
	spushs
	push $3
	spop $a
	call [$a],setvol
	jmp l664
l665:
	push $1
	spushs
	push 1.0
	call $5,abs
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setvol
l664:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,_iconstid
	new gmobjvec,_grsfxs
	end method
	method bkg=
	localdef $1
	pop $1
	push ".pyz"
	call $1,contains
	cmp0
	je l667
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l666
l667:
	push "imgbkg"
	push $1
	push 0
	cthis newimg
l666:
	end method
	method bgr=
	localdef $1
	pop $1
	push $1
	cthis csndbgr
	end method
	method path=
	localdef $1
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	end method
	method cycle=
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis cnewtimercyclefin
	end method
	method timer=
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	end method
	method timplay
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method _getflags
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
	push "L"
	call $1,contains
	cmp0
	je l669
	push "L"
	call $1,strremove
	push 1
	pop $2
l669:
	localdef $3
	push 0
	pop $3
	push "P"
	call $1,contains
	cmp0
	je l671
	push "P"
	call $1,strremove
	push 1
	pop $3
l671:
	localdef $4
	push 0
	pop $4
	push "H"
	call $1,contains
	cmp0
	je l673
	push "H"
	call $1,strremove
	push 1
	pop $4
l673:
	push $1
	push $2
	push $3
	push $4
	ret
	end method
	method img=
	localdef $1
	pop $1
	push $1
	cthis _build_img
	popax
	end method
	method getlangfile
	localstring $1
	pop $1
	localdef $2
	push 4
	call $1,strsube
	push "_"
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	push 0
	push 4
	call $1,gete
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	cthis getpath
	call engine,fileexist
	cmp0
	je l675
	push $2
	jmp l674
l675:
	push $1
l674:
	end method
	method _build_img
	localdef $1
	pop $1
	localdef $2
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
	push "G"
	call $1,contains
	cmp0
	je l677
	push "G"
	call $1,strremove
	push 1
	pop $5
l677:
	localdef $6
	push 0
	pop $6
	push " "
	call $1,contains
	cmp0
	je l679
	push " "
	call $1,strgetfrom
	pop $6
	push " "
	call $1,strgetto
	pop $1
l679:
	localstring $7
	push "/"
	call $1,contains
	cmp0
	je l681
	new vector,_v_sfile
	push "string"
	call _v_sfile,type
	push $1
	push "/"
	call _v_sfile,vecbuildfromstring
	call _v_sfile,last
	spushs
	push 4
	spop $h
	call $h,strsube
	pop $7
	delete _v_sfile
	jmp l680
l681:
	push 4
	call $1,strsube
	pop $7
l680:
	localstring $8
	push ".pyz"
	call $1,contains
	cmp0
	je l683
	push $5
	cmp0
	je l685
	push "gr"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	push $6
	cthis newgrimg
	jmp l684
l685:
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newanima
l684:
	jmp l682
l683:
	push "img"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newimg
l682:
	push $2
	cmp0
	je l687
	push $8
	spushs
	spop $a
	call [$a],anloopfin
l687:
	push $3
	cmp0
	je l689
	push $8
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l689:
	push $4
	cmp0
	je l691
	push $8
	spushs
	spop $a
	call [$a],hide
l691:
	push $8
	end method
	method imgsgr=
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	localdef $3
	pop $3
l692:
	push A
	push $3
	cmpjne
	cmp0
	je l693
	push $1
	spushs
	push $3
	cthis _build_img
	spop $a
	call [$a],add
	localdef $3
	pop $3
	jmp l692
l693:
	end method
	method imgs=
	push "img="
	cthis withlist
	end method
	method clone
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	cthis getname
	cthis gettype
	push $1
	spop $a
	call [$a],classgame0
	end method
	method classgame0
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	push $3
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method clones=
	push "clone"
	cthis withlist
	end method
	method list=
	localdef $1
	pop $1
	localdef $2
	pop $2
	push $1
	spushs
	spop $e
	new gmobjvec,[$e]
l694:
	push A
	push $2
	cmpjne
	cmp0
	je l695
	push $1
	spushs
	push $2
	spop $a
	call [$a],addbegin
	pop $2
	jmp l694
l695:
	end method
	method list2=
	localdef $1
	push "gmobjvec"
	cthis newconst
	pop $1
	push $1
	cthis list=
	push $1
	end method
	method debug=
	localdef $1
	pop $1
	push $1
	call engine,setdebugstate
	end method
	method sfx=
	localstring $1
	pop $1
	localint $2
	push "N"
	call $1,contains
	pop $2
	push $2
	cmp0
	je l697
	push "N"
	call $1,strremove
l697:
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	popax
	pop $4
	pop $3
	pop $1
	localdef $5
	push 100
	pop $5
	push " "
	call $1,contains
	cmp0
	je l699
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l699:
	localstring $6
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsfx
	push $6
	spushs
	push $5
	spop $a
	call [$a],setvol
	push $3
	cmp0
	je l701
	push $6
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l701:
	push $4
	cmp0
	je l703
	push $6
	spushs
	spop $a
	call [$a],play
	jmp l702
l703:
	push $2
	cmp0
	je l705
	push $6
	spushs
	spop $a
	call [$a],playloop
l705:
l702:
	push $6
	call _grsfxs,add
	end method
	method sfxs=
	push "sfx="
	cthis withlist
	end method
	method snd=
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsndfree
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method tickstart
	push "__timspeed"
	cthis hasvar
	neg
	cmp0
	je l707
	new TicksCounter,__timspeed
l707:
	call __timspeed,start
	end method
	method tickstop
	push "ticker: "
	call __timspeed,print
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis newbgr
	push "sndbgr"
	cthis sndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l709
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	push "imgkursor"
	pop $1
l709:
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call mouse,setcursor
	push $1
	call engine,stdbutcursor
	end method
	method newimgarray
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildarray
	end method
	method newfont
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new font,[$e]
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],load
	end method
	method monofont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontmono
	push $2
	cthis newfont
	end method
	method newfontbold
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontbold
	push $2
	cthis newfont
	end method
	method snewfont
	localstring $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "font"
	cthis newconst
	pop $3
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	ret
	end method
	method stdfont
	localint $1
	pop $1
	push sgmfontfile
	push $1
	cthis snewfont
	end method
	method stdmono
	localint $1
	pop $1
	push sgmfontmono
	push $1
	cthis snewfont
	end method
	method stdbold
	localint $1
	pop $1
	push sgmfontbold
	push $1
	cthis snewfont
	end method
	method getconstid
	add _iconstid,1
	pop _iconstid
	push _iconstid
	push 1
	pop $b
	popax
	sub $a,$b
	end method
	method newconst
	localstring $1
	pop $1
	localstring $2
	push "const"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getconstid
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $2
	ret
	end method
	method consttext
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $8
	push "text"
	cthis newconst
	pop $8
	localstring $9
	push $4
	cthis stdfont
	pop $9
	push $8
	spushs
	push $9
	spop $a
	call [$a],setfont
	push $8
	spushs
	push $1
	spop $a
	call [$a],set
	push $8
	spushs
	push $5
	push $6
	push $7
	spop $a
	call [$a],createtxt
	push $8
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $8
	ret
	end method
	method newtext
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	spushs
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	spop $a
	call [$a],setfont
	push $1
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	end method
	method newtextposz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	cthis newtext
	push $1
	spushs
	push $7
	push $8
	push $9
	spop $a
	call [$a],anposz
	end method
	method newgrimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	push $2
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l710:
	push $2
	push $3
	cmpjle
	cmp0
	je l711
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l710
l711:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	spushs
	spop $e
	new classancounter,[$e]
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l712:
	push $6
	push $5
	cmpjl
	cmp0
	je l713
	jmp l715
l714:
	add $6,1
	pop $6
	jmp l712
l715:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l714
l713:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l716:
	push $7
	push $5
	cmpjl
	cmp0
	je l717
	jmp l719
l718:
	add $7,1
	pop $7
	jmp l716
l719:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l718
l717:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l720:
	push $7
	push $5
	cmpjl
	cmp0
	je l721
	jmp l723
l722:
	add $7,1
	pop $7
	jmp l720
l723:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l722
l721:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	spushs
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l724:
	push $3
	push $4
	cmpjl
	cmp0
	je l725
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	cmpjne
	cmp0
	je l727
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	cmpje
	cmp0
	jne l730
	push $12
	push "sfx"
	cmpje
	jmp l731
l729:
	push 0
	jmp l731
l730:
	push 1
l731:
	cmp0
	je l732
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	cmpje
	cmp0
	je l734
	push $14
	push $13
	cthis newsfx
	jmp l733
l734:
	push $14
	push $13
	cthis newsnd
l733:
	push $7
	push $6
	cmpjl
	cmp0
	je l736
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l738
	push $14
	spushs
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l737
l738:
	push 0
	push 4
	call $12,gete
	push "play"
	cmpje
	cmp0
	je l740
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l739
l740:
	push $12
	push "vol"
	cmpje
	cmp0
	je l742
	push $14
	spushs
	push $13
	spop $a
	call [$a],setvol
l742:
l739:
l737:
l736:
	jmp l728
l732:
	push $12
	push "group"
	cmpje
	cmp0
	je l744
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	cmpjl
	cmp0
	je l746
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l748
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
l748:
	jmp l745
l746:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l745:
	jmp l743
l744:
	push $12
	push "bank"
	cmpje
	cmp0
	je l750
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	cmpjl
	cmp0
	je l752
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l754
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	spushs
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l753
l754:
	push $12
	push "vol"
	cmpje
	cmp0
	je l756
	push $14
	spushs
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
l756:
l753:
l752:
	jmp l749
l750:
	push $12
	push "method"
	cmpje
	cmp0
	je l758
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l759:
	push $8
	push $9
	cmpjle
	cmp0
	je l760
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l759
l760:
	jmp l757
l758:
	push $12
	push "singlebank"
	cmpje
	cmp0
	je l762
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l761
l762:
	push $12
	push "bgr"
	cmpje
	cmp0
	je l764
	push $14
	cthis csndbgr
	push $7
	push $6
	cmpjl
	cmp0
	je l766
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l768
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l768:
l766:
	jmp l763
l764:
	push $12
	push "music"
	cmpje
	cmp0
	je l770
	push $14
	cthis playmusic
	push $7
	push $6
	cmpjl
	cmp0
	je l772
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l774
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l774:
l772:
l770:
l763:
l761:
l757:
l749:
l743:
l728:
l727:
	add $3,1
	pop $3
	jmp l724
l725:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	method cgetscreenshoot
	localstring $1
	pop $1
	new img,_imgsavebkg
	push iResX
	push iResY
	cthis white
	push 255
	call _imgsavebkg,create
	push 2000
	call _imgsavebkg,setz
	call _imgsavebkg,blitscreen
	new filter,_ftbg
	push "_imgsavebkg"
	call _ftbg,link
	push 1
	call _ftbg,setsmooth
	localreal $2
	push 0.3
	pop $2
	push $2
	call _ftbg,setzoom
	push 0
	push 0
	call _imgsavebkg,setpos
	new img,_im_1
	push $2
	push iResX
	pop $b
	popax
	mul $a,$b
	push $2
	push iResY
	pop $b
	popax
	mul $a,$b
	cthis white
	push 255
	call _im_1,create
	call _imgsavebkg,getpx
	call _imgsavebkg,getpy
	call _im_1,setpos
	push "_imgsavebkg"
	call _im_1,blit
	push $1
	call _im_1,save
	delete _im_1
	call _ftbg,unlink
	delete _ftbg
	delete _imgsavebkg
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l775:
	push $2
	push $3
	cmpjle
	cmp0
	je l776
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $5
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	cmpje
	cmp0
	je l778
	push $2
	ret
l778:
	add $2,1
	pop $2
	jmp l775
l776:
	push 1
	popax
	sub 0,$a
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	cmpjae
	cmp0
	je l780
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l780:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis build2
	end method
	method build2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new anima,[$e]
	push $5
	spushs
	push $1
	spop $a
	call [$a],load
	push $5
	spushs
	push $2
	spop $a
	call [$a],setz
	localint $6
	push $5
	spushs
	spop $a
	call [$a],nofactions
	pop $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $9
	localstring $10
	localstring $11
	localstring $12
	localstring $13
	localint $14
	push 0
	pop $14
l781:
	push $14
	push $6
	cmpjl
	cmp0
	je l782
	jmp l784
l783:
	add $14,1
	pop $14
	jmp l781
l784:
	push "null"
	pop $10
	push "null"
	pop $11
	push "null"
	pop $12
	push $5
	spushs
	push $14
	spop $a
	call [$a],nofframes
	pop $7
	push 1
	pop $8
l785:
	push $8
	push $7
	cmpjle
	cmp0
	je l786
	jmp l788
l787:
	add $8,1
	pop $8
	jmp l785
l788:
	push san
	push $9
	pop $b
	popax
	add $a,$b
	pop $13
	push $8
	push 1
	cmpje
	cmp0
	je l790
	push $13
	pop $10
	jmp l789
l790:
	push $8
	push 2
	cmpje
	cmp0
	je l792
	push $13
	pop $11
	jmp l791
l792:
	push $8
	push 3
	cmpje
	cmp0
	je l794
	push $13
	pop $12
l794:
l791:
l789:
	push $5
	push $13
	clparent newvars,copyanima
	push $13
	spushs
	push $14
	push $8
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $9,1
	pop $9
	jmp l787
l786:
	push $4
	push "null"
	cmpjne
	cmp0
	je l796
	push $4
	spushs
	push $5
	spushs
	push $14
	spop $a
	call [$a],nameofaction
	spop $a
	call [$a],contains
	jmp l798
l796:
	push 0
	jmp l798
l797:
	push 1
l798:
	cmp0
	je l799
	push $10
	spushs
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	jmp l795
l799:
	push $10
	push $11
	push $12
	push $3
	cthis addbut
l795:
	jmp l783
l782:
	push $5
	spushs
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l801
	push sfxmon
	spushs
	spop $a
	call [$a],play
l801:
	push _sfunmovon
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpje
	cmp0
	je l803
	ret
l803:
	push $1
	spushs
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $4
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	spushs
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l804:
	push $5
	push iilebut
	cmpjl
	cmp0
	je l805
	jmp l807
l806:
	add $5,1
	pop $5
	jmp l804
l807:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l806
l805:
	end method
	method print
	localint $1
	push 0
	pop $1
l808:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l809
	jmp l811
l810:
	add $1,1
	pop $1
	jmp l808
l811:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l810
l809:
	end method
	method setrect
	localstring $1
	localint $2
	push 0
	pop $2
l812:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l813
	jmp l815
l814:
	add $2,1
	pop $2
	jmp l812
l815:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getimg
	pop $1
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	spop $a
	call [$a],setrect
	jmp l814
l813:
	end method
	method setflags
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l816:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l817
	jmp l819
l818:
	add $3,1
	pop $3
	jmp l816
l819:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setflags
	jmp l818
l817:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l821
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	jmp l820
l821:
	push "null"
l820:
	ret
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l822:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l823
	jmp l825
l824:
	add $2,1
	pop $2
	jmp l822
l825:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l824
l823:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	cmpja
	cmp0
	je l827
	push iilebut
	pop $2
l827:
	localint $3
	push 0
	pop $3
l828:
	push $3
	push $2
	cmpjl
	cmp0
	je l829
	jmp l831
l830:
	add $3,1
	pop $3
	jmp l828
l831:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l830
l829:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method disabled
	push sbut
	push 0
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disabled
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method resetall
	localint $1
	push 0
	pop $1
l832:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l833
	jmp l835
l834:
	add $1,1
	pop $1
	jmp l832
l835:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setcursorpos
	jmp l834
l833:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l836:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l837
	jmp l839
l838:
	add $3,1
	pop $3
	jmp l836
l839:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setcursorpos
	jmp l838
l837:
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l841
	push $2
	spushs
	spop $a
	call [$a],getimg
	jmp l840
l841:
	push "null"
l840:
	ret
	end method
	method callimgfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getimg
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	cmpjne
	cmp0
	je l843
	push $3
	spushs
	push $2
	spop $a
	call [$a],setmouse
l843:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l845
	ret
l845:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	spushs
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	spushs
	push _sfcl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	spushs
	push _sfrl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l847
	push sfxmon
	spushs
	spop $a
	call [$a],play
l847:
	push _sobmn
	spushs
	push _sfmn
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	spushs
	push _sfmf
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classsimplebutton
	method init
	new string,simgob
	push "null"
	pop simgob
	new gmimgvec,grbut
	end method
	method stdbuild
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push 0
	push 0
	push $3
	push 0
	cthis build
	end method
	method getimgfunc
	localstring $1
	pop $1
	push simgob
	push "null"
	cmpje
	cmp0
	je l849
	push 0
	jmp l848
l849:
	push simgob
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l848:
	end method
	method setbutpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grbut,setpos
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new button,but1
	cthis getname
	call but1,classsimplebutton0
	push "onclick"
	push "classsimplebutton1"
	call but1,addmethod
	push "onrel"
	push "classsimplebutton2"
	call but1,addmethod
	push "onmoveon"
	push "classsimplebutton3"
	call but1,addmethod
	push "onmoveoff"
	push "classsimplebutton4"
	call but1,addmethod
	push ".pyz"
	call $1,contains
	cmp0
	je l851
	new anima,anbut0
	push $1
	call anbut0,load
	push $3
	push $4
	call anbut0,setpos
	push $5
	call anbut0,setz
	push $6
	push 0
	call anbut0,setframe
	push "anbut0"
	pop simgob
	push simgob
	call grbut,add
	localstring $7
	push "anbut0"
	pop $7
	localstring $8
	push "null"
	pop $8
	localstring $9
	push "null"
	pop $9
	localint $10
	push $6
	call anbut0,nofframes
	pop $10
	push $10
	push 1
	cmpja
	cmp0
	je l853
	new anima,anbut1
	push "anbut0"
	call anbut1,copy
	push $6
	push 1
	call anbut1,setframe
	push "anbut1"
	pop $8
	push $8
	call grbut,add
l853:
	push $10
	push 2
	cmpja
	cmp0
	je l855
	new anima,anbut2
	push "anbut0"
	call anbut2,copy
	push $6
	push 2
	call anbut2,setframe
	push "anbut2"
	pop $8
	push $8
	call grbut,add
l855:
	push $7
	push $8
	push $9
	call but1,setan
	jmp l850
l851:
	new img,imgbut
	push "imgbut"
	pop simgob
	push simgob
	call grbut,add
	push $1
	call imgbut,load
	push $3
	push $4
	call imgbut,setpos
	push $5
	call imgbut,setz
	push "imgbut"
	push "null"
	push "null"
	call but1,set
l850:
	push $2
	call but1,setmouse
	end method
	method classsimplebutton0
	localstring $1
	pop $1
	new string,sbut
	push $1
	pop sbut
	end method
	method classsimplebutton1
	push sbut
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton2
	push sbut
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton3
	push sbut
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton4
	push sbut
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l856:
	push $4
	push $3
	cmpjl
	cmp0
	je l857
	jmp l859
l858:
	add $4,1
	pop $4
	jmp l856
l859:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l858
l857:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	cmpje
	cmp0
	je l861
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l860
l861:
	push $5
	spushs
	push $2
	spop $a
	call [$a],_cbuildbutname
l860:
	push $4
	cmp0
	je l863
	push $5
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	spushs
	spop $a
	call [$a],hide
l863:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method _stdsndloop
	cthis play
	end method
	method __std_finish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	ret
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	ret
	end method
	method strgetto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l865
	cthis get
	jmp l864
l865:
	push 0
	push $2
	cthis getb
l864:
	end method
	method strgeteto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis rfind
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l867
	cthis get
	jmp l866
l867:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
l866:
	end method
	method streq
	localstring $1
	pop $1
	cthis get
	push 0
	cthis length
	call $1,getb
	cmpje
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	ret
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	ret
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method strisbetween
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	localint $4
	push 0
	pop $4
l868:
	push $4
	cthis length
	cmpjl
	cmp0
	je l869
	jmp l871
l870:
	add $4,1
	pop $4
	jmp l868
l871:
	push $4
	cthis getbyte
	pop $3
	push $3
	push $1
	cmpjl
	cmp0
	jne l874
	push $3
	push $2
	cmpja
	jmp l875
l873:
	push 0
	jmp l875
l874:
	push 1
l875:
	cmp0
	je l876
	push 0
	ret
l876:
	jmp l870
l869:
	push 1
	end method
	method strisint
	push BYTE0
	push BYTE9
	cthis strisbetween
	end method
	method strisbin
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis strisbetween
	end method
	method strisalpha
	push BYTEa
	push BYTEz
	cthis strisbetween
	end method
	method streach
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l877:
	push $3
	cthis length
	cmpjl
	cmp0
	je l878
	jmp l880
l879:
	add $3,1
	pop $3
	jmp l877
l880:
	push $3
	push 1
	cthis getb
	pop $2
	push $2
	spushs
	push $1
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l879
l878:
	end method
	method strdotpos
	localint $1
	pop $1
	push "."
	cthis strgetto
	push "."
	pop $b
	popax
	add $a,$b
	push "."
	cthis strgetfrom
	spushs
	push 0
	push $1
	spop $h
	call $h,getb
	pop $b
	popax
	add $a,$b
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l882
	push 0
	jmp l881
l882:
	push 100
	spushs
	spop $h
	call $h,rand
	push $1
	cmpjle
l881:
	end method
	method between
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l884
	push $1
	jmp l883
l884:
	push $2
	push $3
	cmpja
	cmp0
	je l886
	push $3
	jmp l885
l886:
	push $2
l885:
l883:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l888
	push $1
	jmp l887
l888:
	push $2
l887:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l890
	push $1
	jmp l889
l890:
	push $2
l889:
	end method
	method imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push "1111"
	cthis imgborderss
	end method
	method imgborderss
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 3
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l892
	push "_img_bor"
	cthis blit
l892:
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push 1
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l894
	push "_img_bor"
	cthis blit
l894:
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 0
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l896
	push "_img_bor"
	cthis blit
l896:
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push 2
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l898
	push "_img_bor"
	cthis blit
l898:
	delete _img_bor
	end method
	method imgroundborder
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis imgborders
	cthis imgerasecorners
	end method
	method imgerasecorners
	localdef $1
	cthis getpx
	pop $1
	localdef $2
	cthis getpy
	pop $2
	push $1
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	push $1
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	end method
	method imgdrawline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "blit"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgeraseline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "erase"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgputoncenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method imgfuncline
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $9
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	pop $9
	localdef $10
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	pop $10
	localreal $11
	push $9
	push 0
	cmpje
	cmp0
	je l900
	push $10
	push 0
	cmpjl
	cmp0
	je l902
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l903:
	push $11
	push $6
	cmpjae
	cmp0
	je l904
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	sub $11,$a
	pop $11
	jmp l903
l904:
	push $6
	push $11
	pop $b
	popax
	sub $a,$b
	jmp l901
l902:
	push $10
	push 0
	cmpja
	cmp0
	je l906
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l907:
	push $11
	push $6
	cmpjle
	cmp0
	je l908
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $11,$a
	pop $11
	jmp l907
l908:
	push $11
	push $6
	pop $b
	popax
	sub $a,$b
	jmp l905
l906:
	push $8
l905:
l901:
	jmp l899
l900:
	push $9
	push $10
	call $8,length
	pop $11
	localreal $12
l909:
	push $8
	push $11
	cmpjle
	cmp0
	je l910
	push 1.0
	push $11
	push $8
	pop $b
	popax
	sub $a,$b
	push $11
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $12
	push $2
	spushs
	push $12
	push $9
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push $12
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $8,$a
	pop $8
	jmp l909
l910:
	push $8
	push $11
	pop $b
	popax
	sub $a,$b
l899:
	end method
	method anresizemets
	cthis getname
	clparent anima_pack,resizemethods
	end method
	method anfirstnontr
	cthis getname
	cthis getpx
	cthis getpy
	push 1
	push 0
	clparent classansearcher,_findnotr
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ancenterscreen
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis ansetcpos
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method ansetsframe
	localdef $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	cthis setframe
	localint $3
	push 0
	pop $3
l911:
	push $3
	push 1
	popax
	sub 0,$a
	cthis nofframes
	cmpjl
	cmp0
	je l912
	cthis framename
	push $2
	cmpjne
	jmp l914
l912:
	push 0
	jmp l914
l913:
	push 1
l914:
	cmp0
	je l915
	add $3,1
	pop $3
	push 1
	popax
	sub 0,$a
	push $3
	cthis setframe
	jmp l911
l915:
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	ret
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	end method
	method objplayloop
	cthis objloop
	cthis play
	end method
	method anplayfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method anposz
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	ret
	end method
	method annextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method ansetnextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cthis setframe
	end method
	method ansetnextfr
	push 1
	popax
	sub 0,$a
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	cthis setframe
	end method
	method ansetrandfr
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	cthis nofframes
	spushs
	spop $h
	call $h,rand
	cthis setframe
	end method
	method anhasaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	cthis nofactions
	cmpjne
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anaddfx
	cthis getname
	clparent AnimaFx,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method angetcpos
	cthis getcx
	cthis getcy
	ret
	end method
	method anactnr
	push 1
	popax
	sub 0,$a
	cthis actionnr
	end method
	method angetcrgba
	cthis getcx
	cthis getcy
	cthis getrgba
	end method
	method anisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l916:
	push $5
	cthis nofactions
	cmpjl
	cmp0
	je l917
	jmp l919
l918:
	add $5,1
	pop $5
	jmp l916
l919:
	push $5
	push 0
	cthis setframe
	push $1
	push $2
	push $3
	push $4
	cthis isin
	cmp0
	je l921
	push $5
	ret
l921:
	jmp l918
l917:
	push 1
	popax
	sub 0,$a
	end method
	method anreload
	localstring $1
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	localint $3
	cthis framenr
	pop $3
	localint $4
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpjne
	pop $4
	localint $5
	localint $6
	cthis getpos
	pop $6
	pop $5
	localint $7
	cthis getz
	pop $7
	push $1
	cthis getpath
	cthis load
	push $5
	push $6
	cthis setpos
	push $7
	cthis setz
	push $2
	cthis nofactions
	cmpjl
	cmp0
	je l923
	push $4
	cmp0
	je l925
	push $2
	cthis play
l925:
	push $2
	push $3
	cthis setframe
	jmp l922
l923:
	push 0
	push 0
	cthis setframe
l922:
	end method
	method anclipob
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	cthis clip
	end method
	method ancopyan
	localstring $1
	pop $1
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l927
	cthis show
	jmp l926
l927:
	cthis hide
l926:
	push $1
	spushs
	spop $a
	call [$a],getpos
	cthis setpos
	end method
	method anconstmove
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push A
	push "mvx"
	push $2
	push "mvy"
	push $3
	cthis vars2
	push $1
	cthis setdelay
	push 1
	popax
	sub 0,$a
	push "global4"
	cthis anplayfin
	end method
	method global4
	push 1
	popax
	sub 0,$a
	cthis play
	push mvx
	push mvy
	cthis move
	end method
	method scmove
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	method scpos
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis setpos
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis set
	cthis create
	end method
	method txtsetcol
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push $2
	push $3
	push $4
	cthis createtxt
	end method
	method txtshadow
	localint $1
	localstring $2
	pop $2
	pop $1
	push "txts"
	cthis hasvar
	neg
	cmp0
	je l929
	new text,txts
	push $2
	call txts,setfont
l929:
	cthis get
	call txts,set
	cthis getpx
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $1
	pop $b
	popax
	add $a,$b
	call txts,setpos
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	call txts,setz
	call txts,show
	push 0
	push 0
	push 0
	call txts,createtxt
	end method
	method txthides
	cthis hide
	push "txts"
	cthis hasvar
	cmp0
	je l931
	call txts,hide
l931:
	end method
	method txtisin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l932
	push $1
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l932
	push $2
	cthis getpy
	cmpjae
	cmp0
	je l932
	push $2
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	cmpjle
	jmp l934
l932:
	push 0
	jmp l934
l933:
	push 1
l934:
	end method
	method txtcenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtright
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	cthis getw
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtcenterscreen
	push iResX
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setpos
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l936
	localint $2
	push 0
	pop $2
l937:
	push $2
	push $1
	cmpjl
	cmp0
	je l938
	jmp l940
l939:
	add $2,1
	pop $2
	jmp l937
l940:
	push $2
	cthis add
	jmp l939
l938:
l936:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l941:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l942
	jmp l944
l943:
	add $2,1
	pop $2
	jmp l941
l944:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l943
l942:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l946
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l946:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l948
	sub $2,1
	pop $2
	jmp l947
l948:
	push $2
	push 0
	cmpje
	cmp0
	je l950
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l950:
l947:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l951
	push $1
	cthis size
	cmpjl
	jmp l953
l951:
	push 0
	jmp l953
l952:
	push 1
l953:
	cmp0
	je l955
	push $1
	cthis get
	jmp l954
l955:
	push "null"
l954:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l957
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l956
l957:
	push "null"
l956:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l958:
	cthis size
	push $1
	cmpja
	cmp0
	je l959
	cthis vecpop
	popax
	jmp l958
l959:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	ret
	end method
	method vecreplace
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l961
	push $3
	push $2
	cthis set
l961:
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l963
	ret
l963:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l964:
	push $8
	push $1
	cmpjl
	cmp0
	je l965
	jmp l967
l966:
	add $8,1
	pop $8
	jmp l964
l967:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l968:
	push $9
	push $1
	cmpjl
	cmp0
	je l969
	jmp l971
l970:
	add $9,1
	pop $9
	jmp l968
l971:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l973
	push $6
	pop $5
	push $9
	pop $7
l973:
	jmp l970
l969:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l966
l965:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l974:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l975
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l974
l975:
	call $1,length
	push 0
	cmpja
	cmp0
	je l977
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l977:
	end method
	method obbuildfromstring2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l978:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l979
	push $4
	push 0
	cmpja
	cmp0
	je l981
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
l981:
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l978
l979:
	call $1,length
	push 0
	cmpja
	cmp0
	je l983
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l983:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecbuildfromstring2
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring2
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l984:
	push $2
	push $1
	cmpjl
	cmp0
	je l985
	jmp l987
l986:
	add $2,1
	pop $2
	jmp l984
l987:
	push 0
	cthis removeat
	jmp l986
l985:
	end method
	method vecremovefrom
	localint $1
	pop $1
l988:
	push $1
	cthis size
	cmpjl
	cmp0
	je l989
	push $1
	cthis removeat
	jmp l988
l989:
	end method
	method vecfindfrom
	localint $1
	localdef $2
	pop $2
	pop $1
l990:
	push $1
	cthis size
	cmpjl
	cmp0
	je l991
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l993
	push $1
	ret
	jmp l992
l993:
	add $1,1
	pop $1
l992:
	jmp l990
l991:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l996
	cthis size
	push 0
	cmpje
	jmp l997
l995:
	push 0
	jmp l997
l996:
	push 1
l997:
	cmp0
	je l998
	ret
l998:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l1000
	localint $4
	push $1
	pop $4
l1001:
	push $4
	push $2
	cmpja
	cmp0
	je l1002
	jmp l1004
l1003:
	sub $4,1
	pop $4
	jmp l1001
l1004:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l1003
l1002:
	jmp l999
l1000:
	push $1
	push $2
	cmpjl
	cmp0
	je l1006
	localint $4
	push $1
	pop $4
l1007:
	push $4
	push $2
	cmpjl
	cmp0
	je l1008
	jmp l1010
l1009:
	add $4,1
	pop $4
	jmp l1007
l1010:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l1009
l1008:
l1006:
l999:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1012
	push $2
	push 0
	cthis vecposfromto
	jmp l1011
l1012:
	push $1
	cthis addbegin
l1011:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1014
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l1013
l1014:
	push $1
	cthis addbegin
l1013:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1016
	push $3
	push $2
	cthis set
l1016:
	end method
	method veceq
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjne
	cmp0
	je l1018
	push 0
	ret
l1018:
	localint $3
	push 0
	pop $3
l1019:
	push $3
	push $2
	cmpjl
	cmp0
	je l1020
	jmp l1022
l1021:
	add $3,1
	pop $3
	jmp l1019
l1022:
	push $3
	cthis get
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1024
	push 0
	ret
l1024:
	jmp l1021
l1020:
	push 1
	end method
	method vecbuild
	push "addbegin"
	cthis withlist
	end method
	method veceq2
	new vector,___v
	cthis getvectype
	call ___v,type
	call ___v,vecbuild
	localint $1
	push "___v"
	cthis veceq
	pop $1
	delete ___v
	push $1
	end method
	method veccopydbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	cthis vecadddbrow
	end method
	method vecadddbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1025:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1026
	jmp l1028
l1027:
	add $3,1
	pop $3
	jmp l1025
l1028:
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1027
l1026:
	end method
	method vecchecknext
	localint $1
	pop $1
	add $1,1
	pop $1
	push $1
	cthis size
	cmpjl
	cmp0
	je l1030
	push $1
	cthis get
	jmp l1029
l1030:
	push "null"
l1029:
	end method
	method vecsum
	cthis size
	cmp0
	je l1032
	localdef $1
	push 0
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
l1033:
	push $2
	cthis size
	cmpjl
	cmp0
	je l1034
	jmp l1036
l1035:
	add $2,1
	pop $2
	jmp l1033
l1036:
	push $2
	cthis get
	popax
	add $1,$a
	pop $1
	jmp l1035
l1034:
	push $1
	jmp l1031
l1032:
	push 0
l1031:
	end method
	method vecclosest
	localdef $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpjle
	cmp0
	je l1038
	push 1
	popax
	sub 0,$a
	ret
l1038:
	localint $3
	push 0
	pop $3
	localdef $4
	push $1
	push 0
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $4
	localint $5
	push 1
	pop $5
l1039:
	push $5
	push $2
	cmpjl
	cmp0
	je l1040
	jmp l1042
l1041:
	add $5,1
	pop $5
	jmp l1039
l1042:
	localdef $6
	push $1
	push $5
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $6
	push $6
	push $4
	cmpjl
	cmp0
	je l1044
	push $5
	pop $3
	push $6
	pop $4
l1044:
	jmp l1041
l1040:
	push $3
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l1046
	ret
l1046:
	sub $1,1
	pop $1
	cthis free
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l1047:
	push $2
	push A
	cmpjne
	cmp0
	je l1048
	jmp l1050
l1049:
	jmp l1047
l1050:
	push $4
	push 0
	cmpje
	cmp0
	je l1052
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l1052:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l1054
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l1053
l1054:
	push 0
l1053:
	pop $4
	jmp l1049
l1048:
	end method
	method dbbuild2
	cthis free
	localstring $1
	pop $1
l1055:
	push $1
	push A
	cmpjne
	cmp0
	je l1056
	push $1
	push "null"
	cmpje
	cmp0
	je l1058
	cthis addbeginrow
	popax
	jmp l1057
l1058:
	push 0
	push $1
	cthis addbegin
l1057:
	pop $1
	jmp l1055
l1056:
	end method
	method dbaddvec
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l1059:
	push $3
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1060
	jmp l1062
l1061:
	add $3,1
	pop $3
	jmp l1059
l1062:
	push $2
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1061
l1060:
	end method
	method dbcopy
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis dbcopyfromto
	end method
	method dbcopyrow
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis dbcopyfromto
	end method
	method dbcopyfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push $3
	cthis dbaddrowfromto
	end method
	method dbaddrowfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	localint $6
	push $2
	pop $4
l1063:
	push $4
	push $3
	cmpjl
	cmp0
	je l1064
	jmp l1066
l1065:
	add $4,1
	pop $4
	jmp l1063
l1066:
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push 0
	pop $5
l1067:
	push $5
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1068
	jmp l1070
l1069:
	add $5,1
	pop $5
	jmp l1067
l1070:
	push $6
	push $1
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	cthis add
	jmp l1069
l1068:
	jmp l1065
l1064:
	end method
	method dbadddbrowtorow
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1071:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1072
	jmp l1074
l1073:
	add $4,1
	pop $4
	jmp l1071
l1074:
	push $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	cthis add
	jmp l1073
l1072:
	end method
	method dbremovecol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l1075:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1076
	jmp l1078
l1077:
	add $2,1
	pop $2
	jmp l1075
l1078:
	push $2
	cthis getcolsno
	push $1
	cmpja
	cmp0
	je l1080
	push $2
	push $1
	cthis removeat
l1080:
	jmp l1077
l1076:
	end method
	method dbcopyfromtos
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis dbcopyfromto
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l1082
l1083:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l1084
	cthis dbremovelast
	jmp l1083
l1084:
	jmp l1081
l1082:
	cthis free
l1081:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbgetstringrow
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push $1
	cthis getcolsno
	pop $3
	localint $4
	push 0
	pop $4
l1085:
	push $4
	push $3
	cmpjl
	cmp0
	je l1086
	jmp l1088
l1087:
	add $4,1
	pop $4
	jmp l1085
l1088:
	push $1
	push $4
	cthis get
	popax
	add $2,$a
	pop $2
	jmp l1087
l1086:
	push $2
	end method
	method dbaddrow
	localdef $1
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	pop $2
l1089:
	push A
	push $2
	cmpjne
	cmp0
	je l1090
	push $1
	push $2
	cthis addbegin
	localdef $2
	pop $2
	jmp l1089
l1090:
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l1092
	push $3
	push 0
	cmpjae
	jmp l1094
l1092:
	push 0
	jmp l1094
l1093:
	push 1
l1094:
	cmp0
	je l1095
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l1096:
	push $3
	push $5
	cmpjl
	cmp0
	je l1097
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l1096
l1097:
l1095:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1099
	push $1
	push $2
	cthis get
	jmp l1098
l1099:
	push "null"
l1098:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1101
	push $3
	cthis getcolsno
	push $2
	cmpja
	jmp l1103
l1101:
	push 0
	jmp l1103
l1102:
	push 1
l1103:
	cmp0
	je l1104
	push $3
	push $2
	cthis get
	jmp l1100
l1104:
	push "null"
l1100:
	end method
	method dbget
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1106
	push $2
	push 1
	cthis get
	jmp l1105
l1106:
	push "null"
l1105:
	end method
	method dbgetint
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1108
	push $2
	push 1
	cthis get
	spushs
	spop $h
	call $h,to_i
	jmp l1107
l1108:
	push 0
l1107:
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l1109:
	push $2
	push 0
	cmpjae
	cmp0
	je l1110
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l1112
	push $2
	ret
l1112:
	sub $2,1
	pop $2
	jmp l1109
l1110:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	ret
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1114
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l1114:
	push 0
	ret
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l1116
	localint $3
	push 0
	pop $3
l1117:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1118
	jmp l1120
l1119:
	add $3,1
	pop $3
	jmp l1117
l1120:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l1122
	push $3
	ret
l1122:
	jmp l1119
l1118:
l1116:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1123:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l1124
	jmp l1126
l1125:
	add $3,1
	pop $3
	jmp l1123
l1126:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1128
	push $3
	ret
l1128:
	jmp l1125
l1124:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	ret
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	ret
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	ret
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method dbsetall
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1129:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1130
	jmp l1132
l1131:
	add $2,1
	pop $2
	jmp l1129
l1132:
	localdef $3
	push 0
	pop $3
l1133:
	push $3
	push $2
	cthis getcolsno
	cmpjl
	cmp0
	je l1134
	jmp l1136
l1135:
	add $3,1
	pop $3
	jmp l1133
l1136:
	push $2
	push $3
	push $1
	cthis set
	jmp l1135
l1134:
	jmp l1131
l1130:
	end method
	method dbeach_row
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1137:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1138
	jmp l1140
l1139:
	add $2,1
	pop $2
	jmp l1137
l1140:
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	jmp l1139
l1138:
	end method
	method dbeq
	localstring $1
	pop $1
	cthis getrowsno
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjne
	cmp0
	je l1142
	push 0
	ret
l1142:
	localint $2
	localint $3
	localint $4
	push 0
	pop $4
l1143:
	push $4
	cthis getrowsno
	cmpjl
	cmp0
	je l1144
	jmp l1146
l1145:
	add $4,1
	pop $4
	jmp l1143
l1146:
	push $4
	cthis getcolsno
	pop $2
	push $2
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjne
	cmp0
	je l1148
	push 0
	ret
l1148:
	push 0
	pop $3
l1149:
	push $3
	push $2
	cmpjl
	cmp0
	je l1150
	jmp l1152
l1151:
	add $3,1
	pop $3
	jmp l1149
l1152:
	push $4
	push $3
	cthis get
	push $1
	spushs
	push $4
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1154
	push 0
	ret
l1154:
	jmp l1151
l1150:
	jmp l1145
l1144:
	push 1
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1156
	push 1
	popax
	sub 0,$a
	ret
l1156:
	localint $3
	call $1,rand
	pop $3
l1157:
	push $3
	push $2
	cmpje
	cmp0
	je l1158
	jmp l1160
l1159:
	call $1,rand
	pop $3
	jmp l1157
l1160:
	jmp l1159
l1158:
	push $3
	ret
	end method
	method bin_to_i
	localstring $1
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	call $1,length
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1161:
	push $4
	push 0
	cmpjae
	cmp0
	je l1162
	jmp l1164
l1163:
	sub $4,1
	pop $4
	jmp l1161
l1164:
	push $4
	push 1
	call $1,getb
	push "1"
	cmpje
	cmp0
	je l1166
	push $2
	popax
	add $3,$a
	pop $3
l1166:
	push 2
	popax
	mul $2,$a
	pop $2
	jmp l1163
l1162:
	push $3
	end method
	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push iResX
	push iResY
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class TicksCounter
	method init
	new int,istart
	end method
	method start
	call engine,getticks
	pop istart
	end method
	method stop
	call engine,getticks
	push istart
	pop $b
	popax
	sub $a,$b
	pop istart
	end method
	method get
	push istart
	ret
	end method
	method stopget
	cthis stop
	cthis get
	ret
	end method
	method print
	localstring $1
	pop $1
	push $1
	push " delay: "
	pop $b
	popax
	add $a,$b
	cthis stopget
	pop $b
	popax
	add $a,$b
	push " ms"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method put
	push ""
	cthis print
	end method
	end class

	class ObjController
	method init
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],addgmobj
	end method
	method removefromgame
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],removegmobj
	end method
	end class

	class LObjController
	parent ObjController
	parent classlocker
	method init
	clparent ObjController,init
	clparent classlocker,init
	end method
	end class

	class gmbankvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	push "iid"
	push 1
	popax
	sub 0,$a
	cthis var2
	end method
	method startrand
	cthis size
	push 0
	cmpja
	cmp0
	je l1168
	cthis size
	spushs
	spop $h
	call $h,rand
	pop iid
l1168:
	end method
	method play
	push 0
	cthis stop
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpje
	cmp0
	je l1170
	ret
l1170:
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	cthis get
	spushs
	spop $a
	call [$a],play
	end method
	method onfinish
	end method
	method stop
	localint $1
	pop $1
	cthis isplaying
	cmp0
	je l1172
	cthis getplay
	spushs
	push $1
	spop $a
	call [$a],stop
	push $1
	cmp0
	je l1174
	cthis onfinish
l1174:
l1172:
	end method
	method isplaying
	push iid
	push 0
	cmpjae
	cmp0
	je l1176
	cthis getplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l1175
l1176:
	push 0
l1175:
	end method
	method getplay
	push iid
	cthis get
	ret
	end method
	end class

	class GameController
	parent classlocker
	method init
	localstring $1
	pop $1
	clparent classlocker,init
	new gmobjvec,__grobj
	new db,_dbsnd
	push "|"
	call _dbsnd,setseparator
	new string,_sndbase
	push $1
	pop _sndbase
	new string,GAME
	cthis getname
	pop GAME
	new timer,__dblclick
	push 250
	call __dblclick,delay
	push 1
	call __dblclick,settick
	new int,_itimersnddelay
	push 10000
	pop _itimersnddelay
	end method
	method game_exit
	end method
	method setsndbase
	localstring $1
	pop $1
	push $1
	pop _sndbase
	end method
	method say
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis sayf
	end method
	method sayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push $2
	cthis getsndtxt
	pop $4
	push $4
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	push $4
	push $3
	cthis cplayf
	end method
	method getsndtxt
	localstring $1
	pop $1
	localstring $2
	push "snd"
	push _sndbase
	pop $b
	popax
	add $a,$b
	call _dbsnd,getrowsno
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push $1
	cthis addsnd
	push $2
	ret
	end method
	method _sndtimerstart
	ret
	localint $1
	push 1
	cthis getname
	call _dbsnd,dbfindbycol
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1178
	push $1
	push 2
	call _dbsnd,get
	call engine,print
	jmp l1177
l1178:
	cthis getname
	push " not in _dbsnd"
	pop $b
	popax
	add $a,$b
	call engine,print
l1177:
	push ""
	call engine,print
	end method
	method addsndf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis addsnd
	push $3
	push "null"
	cmpjne
	cmp0
	je l1180
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1182
	push 1
	call $1,strsubb
	pop $1
l1182:
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l1180:
	end method
	method asf
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push "end"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addsndff
	end method
	method addsndff
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis addsndf
	end method
	method gmconsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l1184
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	call subtitle,register
l1184:
	end method
	method addsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	call _dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1186
	push 1
	call $1,strsubb
	pop $1
	push _sndbase
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1185
l1186:
	push _sndbase
	push $3
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $4
l1185:
	localstring $5
	call gameapi,getgamename
	pop $5
	push igmsoundson
	cmp0
	je l1188
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	jmp l1190
l1188:
	push 0
	jmp l1190
l1189:
	push 1
l1190:
	cmp0
	je l1191
	push $5
	spushs
	push $1
	push $4
	spop $a
	call [$a],gmconsnd
	jmp l1187
l1191:
	push $5
	spushs
	push $1
	call $2,length
	push _itimersnddelay
	pop $b
	popax
	mul $a,$b
	push 1
	spop $a
	call [$a],newtimer
	push $1
	spushs
	push "onstart"
	push "_sndtimerstart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstartstopflag"
	push "GameController0"
	spop $a
	call [$a],addmethod
l1187:
	push $3
	push $4
	call _dbsnd,add
	push $3
	push $1
	call _dbsnd,add
	push $3
	push $2
	call _dbsnd,add
	end method
	method GameController0
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method addbank
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	localstring $3
	pop $3
	localstring $4
l1192:
	push $3
	push A
	cmpjne
	cmp0
	je l1193
	push $3
	cthis getsndtxt
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],addbegin
	push $2
	push "null"
	cmpjne
	cmp0
	je l1195
	push $4
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
l1195:
	pop $3
	jmp l1192
l1193:
	end method
	method exportbank
	localstring $1
	pop $1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $e
	new db,[$e]
	call [$e],GameController1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method GameController1
	localdef $1
	pop $1
	push 1
	cthis dbbuild
	push "|"
	cthis setseparator
	push "GameController2"
	cthis dbeach_row
	push igmdebug
	cmp0
	je l1197
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis save
l1197:
	end method
	method GameController2
	localdef $1
	pop $1
	localdef $2
	cthis getname
	spushs
	push "__db"
	spop $h
	call $h,strsubbs
	pop $2
	push $1
	push "snd"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis addbegin
	push $1
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis addbegin
	end method
	method importbank
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	push $2
	push $3
	push "null"
	push $1
	cthis importgroupto
	end method
	method exportsnd
	localstring $1
	pop $1
	push igmdebug
	cmp0
	je l1199
	push $1
	call _dbsnd,save
l1199:
	end method
	method stdexportsnd
	push "exports/"
	push _sndbase
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis exportsnd
	end method
	method sounds=
	cthis buildsnds
	end method
	method sounds_from
	localstring $1
	pop $1
	new db,__tmpdb
	localdef $2
	push _sndbase
	pop $2
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localdef $3
	pop $3
	localint $4
	localstring $5
l1200:
	push A
	push $3
	cmpjne
	cmp0
	je l1201
	localdef $6
	pop $6
	push 1
	push $6
	call __tmpdb,dbfindbycol
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1203
	cthis getsndpath
	push $4
	push 0
	call __tmpdb,get
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	cmp0
	je l1205
	push GAME
	spushs
	push $6
	push $4
	push 0
	call __tmpdb,get
	spop $a
	call [$a],gmconsnd
	push $6
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	jmp l1204
l1205:
	push $6
	push $4
	push 1
	call __tmpdb,get
	push $3
	cthis addsndf
l1204:
l1203:
	localdef $3
	pop $3
	jmp l1200
l1201:
	call _dbsnd,free
	delete __tmpdb
	push $2
	cthis setsndbase
	end method
	method buildsnds
	call _dbsnd,free
	new db,__dbsnd
	push 3
	call __dbsnd,dbbuild
	push "__dbsnd"
	cthis buildfromdb
	delete __dbsnd
	end method
	method buildfromdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1206:
	push $2
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1207
	jmp l1209
l1208:
	add $2,1
	pop $2
	jmp l1206
l1209:
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 2
	spop $a
	call [$a],get
	cthis addsndf
	jmp l1208
l1207:
	cthis stdexportsnd
	end method
	method importsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis importgroup
	end method
	method importgroup
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis importgroupto
	end method
	method importgroupto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	new db,__tmpdb
	localdef $5
	push _sndbase
	pop $5
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localstring $6
	localint $7
	push 0
	pop $7
l1210:
	push $7
	call __tmpdb,getrowsno
	cmpjl
	cmp0
	je l1211
	jmp l1213
l1212:
	add $7,1
	pop $7
	jmp l1210
l1213:
	push $7
	push 1
	call __tmpdb,get
	pop $6
	push $3
	push "null"
	cmpje
	cmp0
	jne l1216
	push $3
	spushs
	push $6
	spop $a
	call [$a],contains
	jmp l1217
l1215:
	push 0
	jmp l1217
l1216:
	push 1
l1217:
	cmp0
	je l1218
	push $6
	push $7
	push 2
	call __tmpdb,get
	push $2
	cthis addsndf
	push $4
	push "null"
	cmpjne
	cmp0
	je l1220
	push $4
	spushs
	push $6
	spop $a
	call [$a],add
l1220:
l1218:
	jmp l1212
l1211:
	call _dbsnd,free
	call __tmpdb,free
	delete __tmpdb
	push $5
	cthis setsndbase
	end method
	method freesnd
	call _dbsnd,free
	end method
	method addgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,add
	end method
	method removegmobj
	localstring $1
	pop $1
	push $1
	call __grobj,remove
	end method
	method isgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,contains
	end method
	method deletegmobj
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1222
	push $1
	cthis removegmobj
	push $1
	spushs
	spop $d
	delete [$d]
l1222:
	end method
	method lockall
	push "lock"
	call __grobj,eval
	cthis lock
	end method
	method unlockall
	push "unlock"
	call __grobj,eval
	cthis unlock
	end method
	method gmunlockall
	push GAME
	spushs
	spop $a
	call [$a],unlockall
	end method
	method gmlockall
	push GAME
	spushs
	spop $a
	call [$a],lockall
	end method
	method lock=
	localint $1
	pop $1
	push $1
	cmp0
	je l1224
	cthis gmlockall
	jmp l1223
l1224:
	cthis gmunlockall
l1223:
	end method
	method mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	call __dblclick,isplaying
	cmp0
	je l1226
	cthis mouse_dblclick
	jmp l1225
l1226:
	call __dblclick,play
l1225:
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	method mouserrel
	push "onmouserrel"
	call __grobj,eval
	cthis mouse_rrel
	end method
	method keydown
	push "onkeydown"
	call __grobj,eval
	cthis key_down
	end method
	end class

	class classadv
	parent classgame
	method init
	clparent classgame,init
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new path,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbutton,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	end class

	class classquest
	method init
	new vector,vqst
	push "string"
	call vqst,type
	end method
	method isdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	ret
	end method
	method notdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	ret
	end method
	method done
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	cmp0
	je l1228
	push $1
	call vqst,add
l1228:
	end method
	method reset
	call vqst,free
	end method
	method save
	localstring $1
	pop $1
	push $1
	call vqst,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call vqst,load
	end method
	end class

	new classquest,clqs
	method winsave
	localstring $1
	pop $1
	new db,_db_win
	push "output.db"
	call _db_win,load
	localdef $2
	call _db_win,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	call _db_win,add
	push "output.db"
	call _db_win,save
	delete _db_win
	end method
	method saveexist
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	end method
	method vecsave
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis save
	end method
	method vecload
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis load
	end method
	class classfullsave
	method init
	localstring $1
	pop $1
	new db,dbsav
	push "|"
	call dbsav,setseparator
	new string,sstdfile
	push $1
	cthis setfile
	new int,saveonset
	push 0
	pop saveonset
	end method
	method save
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call dbsav,save
	end method
	method _load
	localstring $1
	pop $1
	push $1
	call engine,fileexist
	cmp0
	je l1230
	call dbsav,free
	push $1
	call dbsav,load
l1230:
	end method
	method load
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis _load
	end method
	method print
	call dbsav,print
	end method
	method setfile
	localstring $1
	pop $1
	push $1
	pop sstdfile
	end method
	method stdload
	push sstdfile
	cthis load
	end method
	method stdsave
	push sstdfile
	cthis save
	end method
	method free
	call dbsav,free
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1232
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l1231
l1232:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l1231:
	push saveonset
	cmp0
	je l1234
	cthis stdsave
l1234:
	end method
	method bset
	localstring $1
	pop $1
	push $1
	push 1
	cthis set
	end method
	method get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1236
	push $2
	push 1
	call dbsav,get
	jmp l1235
l1236:
	push "null"
l1235:
	ret
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1238
	push $3
	push 1
	call dbsav,get
	push $2
	cmpje
	jmp l1237
l1238:
	push 0
l1237:
	ret
	end method
	method bis
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1240
	push $2
	push 1
	call dbsav,get
	push 0
	cmpjne
	jmp l1239
l1240:
	push 0
l1239:
	ret
	end method
	method has
	localstring $1
	pop $1
	push $1
	call dbsav,findbyrow
	push 0
	cmpjae
	end method
	method bgo
	localstring $1
	pop $1
	push $1
	cthis bis
	neg
	cmp0
	je l1242
	push $1
	cthis bset
	push 1
	jmp l1241
l1242:
	push 0
l1241:
	end method
	method saveonset=
	localint $1
	pop $1
	push $1
	pop saveonset
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1244
	push $2
	call dbsav,removerow
	push saveonset
	cmp0
	je l1246
	cthis stdsave
l1246:
l1244:
	end method
	end class

	class StringChecker
	method init
	end method
	method isdigit
	localstring $1
	pop $1
	call $1,to_i
	push 0
	cmpjne
	cmp0
	jne l1248
	push 0
	push 1
	call $1,getb
	push "0"
	cmpje
	jmp l1249
l1247:
	push 0
	jmp l1249
l1248:
	push 1
l1249:
	ret
	end method
	method getint
	localstring $1
	pop $1
	call $1,to_i
	ret
	end method
	method getreal
	localstring $1
	pop $1
	call $1,to_r
	ret
	end method
	method isreal
	localstring $1
	pop $1
	push $1
	cthis isdigit
	cmp0
	je l1250
	push "."
	call $1,contains
	jmp l1252
l1250:
	push 0
	jmp l1252
l1251:
	push 1
l1252:
	ret
	end method
	method isstring
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "\""
	cmpje
	ret
	end method
	method getstring
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	ret
	end method
	end class

	class Script
	method init
	localstring $1
	pop $1
	new db,__dbcode
	new string,__sdb
	new int,__irow
	new int,__icol
	new string,__sreads
	new vector,__vec
	push "string"
	call __vec,type
	new string,__sarg
	new int,__iarg
	new real,__rarg
	new StringChecker,__csc
	push "int"
	new map2,__mp
	localint $2
	push 0
	pop $2
l1253:
	push $2
	push 10
	cmpjl
	cmp0
	je l1254
	jmp l1256
l1255:
	add $2,1
	pop $2
	jmp l1253
l1256:
	push "ARG"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	jmp l1255
l1254:
	push $1
	cthis load
	end method
	method ARG=
	localint $1
	localstring $2
	pop $2
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method ARG
	localint $1
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	end method
	method load
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1258
	ret
l1258:
	push "."
	call $1,contains
	cmp0
	je l1260
	push "__dbcode"
	pop __sdb
	push $1
	call __dbcode,loadbeh
	jmp l1259
l1260:
	push $1
	pop __sdb
l1259:
	call __mp,free
	localint $2
	push 0
	pop $2
l1261:
	push $2
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1262
	jmp l1264
l1263:
	add $2,1
	pop $2
	jmp l1261
l1264:
	push __sdb
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push "func"
	cmpje
	cmp0
	je l1266
	push __sdb
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $2
	call __mp,add
l1266:
	jmp l1263
l1262:
	push "init"
	cthis call
	end method
	method get
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method isvar
	localstring $1
	pop $1
	push "$"
	call $1,contains
	ret
	end method
	method getvar
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	neg
	cmp0
	je l1268
	push $1
	spushs
	spop $e
	new def,[$e]
l1268:
	push $1
	ret
	end method
	method isfunc
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l1269
	push $1
	call __csc,isreal
	neg
	jmp l1271
l1269:
	push 0
	jmp l1271
l1270:
	push 1
l1271:
	ret
	end method
	method getfunc
	localstring $1
	pop $1
	call __vec,free
	push "."
	call $1,strgetto
	call __vec,add
	push "."
	call $1,strgetfrom
	call __vec,add
	end method
	method _get
	add __icol,1
	pop __icol
	push __sdb
	spushs
	push __irow
	push __icol
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	ret
	end method
	method isnext
	push __icol
	push __sdb
	spushs
	push __irow
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1273
	push __sdb
	spushs
	push __irow
	push __icol
	spop $a
	call [$a],get
	pop __sreads
	push 1
	ret
l1273:
	push 0
	ret
	end method
	method perror
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cmp0
	je l1275
	push "error: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
l1275:
	end method
	method interpcall
	localstring $1
	pop $1
	push $1
	cthis getfunc
	localstring $2
	push 0
	call __vec,get
	pop $2
	push 0
	push 1
	call $2,getb
	push "*"
	cmpje
	cmp0
	je l1277
	push 1
	call $2,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1277:
	localstring $3
	push 1
	call __vec,get
	pop $3
	push 0
	push 1
	call $3,getb
	push "*"
	cmpje
	cmp0
	je l1279
	push 1
	call $3,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1279:
	call __vec,free
	add __icol,1
	pop __icol
	localstring $4
	cthis _get
	pop $4
l1280:
	push $4
	push ")"
	cmpjne
	cmp0
	je l1281
	push $4
	cthis getexpr
	cthis _get
	pop $4
	jmp l1280
l1281:
	push $2
	push "this"
	cmpje
	cmp0
	je l1283
	push "null"
	pop $2
l1283:
	push $2
	push $3
	cthis callfun
	end method
	method getvname
	localstring $1
	pop $1
	push $1
	cthis isvar
	cmp0
	je l1285
	push $1
	cthis getvar
	pop $1
	jmp l1284
l1285:
	push $1
	call __csc,isreal
	cmp0
	je l1287
	call $1,to_r
	pop __rarg
	push "__rarg"
	pop $1
	jmp l1286
l1287:
	push $1
	call __csc,isdigit
	cmp0
	je l1289
	push $1
	pop __iarg
	push "__iarg"
	pop $1
	jmp l1288
l1289:
	push $1
	call __csc,isstring
	cmp0
	je l1291
	push $1
	call __csc,getstring
	pop __sarg
	push "__sarg"
	pop $1
l1291:
l1288:
l1286:
l1284:
	push $1
	ret
	end method
	method isscriptfun
	localstring $1
	pop $1
	push "->"
	call $1,contains
	ret
	end method
	method getscriptfun
	localstring $1
	pop $1
	push 2
	call $1,strsubb
	ret
	end method
	method getexpr
	localstring $1
	pop $1
	push $1
	call __csc,isstring
	cmp0
	je l1293
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
	jmp l1292
l1293:
	push $1
	cthis isfunc
	cmp0
	je l1295
	push $1
	cthis interpcall
	jmp l1294
l1295:
	push $1
	cthis isscriptfun
	cmp0
	je l1297
	localint $2
	push __irow
	pop $2
	localint $3
	push __icol
	pop $3
	push $1
	cthis getscriptfun
	cthis call
	push $2
	pop __irow
	push $3
	pop __icol
	jmp l1296
l1297:
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
l1296:
l1294:
l1292:
	end method
	method cmp
	localint $1
	push 0
	pop $1
	localdef $2
	cthis _get
	cthis getexpr
	pop $2
	localstring $3
	cthis _get
	pop $3
	localdef $4
	cthis _get
	cthis getexpr
	pop $4
	push $3
	spushs
	push "=="
	cmpst
	jne l1299
	spop $a
	push $2
	push $4
	cmpje
	pop $1
	jmp l1298
l1299:
	push "!="
	cmpst
	jne l1300
	spop $a
	push $2
	push $4
	cmpjne
	pop $1
	jmp l1298
l1300:
	push "<"
	cmpst
	jne l1301
	spop $a
	push $2
	push $4
	cmpjl
	pop $1
	jmp l1298
l1301:
	push ">"
	cmpst
	jne l1302
	spop $a
	push $2
	push $4
	cmpja
	pop $1
	jmp l1298
l1302:
	push "<="
	cmpst
	jne l1303
	spop $a
	push $2
	push $4
	cmpjle
	pop $1
	jmp l1298
l1303:
	push ">="
	cmpst
	jne l1304
	spop $a
	push $2
	push $4
	cmpjae
	pop $1
	jmp l1298
l1304:
	spop $a
l1298:
	cthis _get
	pop $3
	push $3
	push "||"
	cmpje
	cmp0
	je l1306
	push $1
	cmp0
	jne l1308
	cthis cmp
	jmp l1309
l1307:
	push 0
	jmp l1309
l1308:
	push 1
l1309:
	ret
	jmp l1305
l1306:
	push $3
	push "&&"
	cmpje
	cmp0
	je l1311
	push $1
	cmp0
	je l1312
	cthis cmp
	jmp l1314
l1312:
	push 0
	jmp l1314
l1313:
	push 1
l1314:
	ret
	jmp l1310
l1311:
	push $1
	ret
l1310:
l1305:
	end method
	method containsfun
	localstring $1
	pop $1
	push $1
	call __mp,contains
	end method
	method call
	localstring $1
	pop $1
	push $1
	call __mp,contains
	neg
	cmp0
	je l1316
	ret
l1316:
	push $1
	call __mp,get
	pop __irow
	add __irow,1
	pop __irow
	push 0
	pop __icol
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	localint $12
	localint $13
l1317:
	push $2
	cmp0
	je l1318
	push 0
	pop __icol
	cthis _get
	pop $8
	push $8
	spushs
	push "new"
	cmpst
	jne l1320
	spop $a
	cthis _get
	pop $8
	cthis _get
	pop $9
	push 1
	call $9,strsubb
	pop $9
	cthis isnext
	cmp0
	je l1322
	push __sreads
	push "["
	cmpje
	cmp0
	je l1324
	add __icol,1
	pop __icol
	cthis _get
	pop $11
	push 0
	pop $12
l1325:
	push $12
	push $11
	cmpjl
	cmp0
	je l1326
	jmp l1328
l1327:
	add $12,1
	pop $12
	jmp l1325
l1328:
	push $8
	spushs
	push $9
	push $12
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	jmp l1327
l1326:
	jmp l1323
l1324:
	add __icol,1
	pop __icol
l1329:
	cthis isnext
	cmp0
	je l1330
	push __sreads
	push ")"
	cmpjne
	jmp l1332
l1330:
	push 0
	jmp l1332
l1331:
	push 1
l1332:
	cmp0
	je l1333
	cthis _get
	cthis getexpr
	jmp l1329
l1333:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1323:
	jmp l1321
l1322:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1321:
	add __irow,1
	pop __irow
	jmp l1319
l1320:
	push "delete"
	cmpst
	jne l1334
	spop $a
	cthis _get
	cthis getvar
	spushs
	spop $d
	delete [$d]
	add __irow,1
	pop __irow
	jmp l1319
l1334:
	push $8
	push "if"
	cmpje
	cmp0
	jne l1336
	push $6
	cmp0
	jne l1336
	push $5
	jmp l1337
l1335:
	push 0
	jmp l1337
l1336:
	push 1
l1337:
	cmp0
	je l1339
	push $8
	jmp l1338
l1339:
	push ""
l1338:
	cmpst
	jne l1340
	spop $a
	add __icol,1
	pop __icol
	cthis cmp
	pop $4
	push $8
	push "if"
	cmpje
	cmp0
	je l1342
	push 1
	pop $3
l1342:
	push 0
	pop $6
	push 0
	pop $5
	add __irow,1
	pop __irow
	push $4
	neg
	cmp0
	je l1344
	push 1
	pop $12
l1345:
	push $12
	cmp0
	je l1346
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	pop $8
	push $8
	push "else"
	cmpje
	cmp0
	jne l1349
	push $8
	push "elif"
	cmpje
	cmp0
	jne l1349
	push $8
	push "fi"
	cmpje
	cmp0
	jne l1349
	push $8
	push "done"
	cmpje
	jmp l1350
l1348:
	push 0
	jmp l1350
l1349:
	push 1
l1350:
	cmp0
	je l1351
	push 0
	pop $12
	jmp l1347
l1351:
	add __irow,1
	pop __irow
l1347:
	jmp l1345
l1346:
l1344:
	jmp l1319
l1340:
	push "else"
	cmpst
	jne l1352
	spop $a
	push $3
	neg
	push "else without if"
	cthis perror
	add __irow,1
	pop __irow
	push $4
	cmp0
	je l1354
l1355:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1356
	add __irow,1
	pop __irow
	jmp l1355
l1356:
l1354:
	jmp l1319
l1352:
	push "fi"
	cmpst
	jne l1357
	spop $a
	push $3
	neg
	push "fi without if"
	cthis perror
	push 0
	pop $3
	push 0
	pop $4
	push 0
	pop $6
	add __irow,1
	pop __irow
	jmp l1319
l1357:
	push "elif"
	cmpst
	jne l1358
	spop $a
	push $4
	cmp0
	je l1360
	add __irow,1
	pop __irow
l1361:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1362
	add __irow,1
	pop __irow
	jmp l1361
l1362:
	jmp l1359
l1360:
	push 1
	pop $6
l1359:
	jmp l1319
l1358:
	push "end"
	cmpst
	jne l1363
	spop $a
	push 0
	pop $2
	jmp l1319
l1363:
	push "while"
	cmpst
	jne l1364
	spop $a
	push __irow
	pop $7
	push 1
	pop $5
	jmp l1319
l1364:
	push "done"
	cmpst
	jne l1365
	spop $a
	push $4
	cmp0
	je l1367
	push $7
	pop __irow
	jmp l1366
l1367:
	add __irow,1
	pop __irow
l1366:
	jmp l1319
l1365:
	push "print"
	cmpst
	jne l1368
	spop $a
	push ""
	pop $8
l1369:
	cthis isnext
	cmp0
	je l1370
	cthis _get
	cthis getexpr
	popax
	add $8,$a
	pop $8
	jmp l1369
l1370:
	push $8
	call engine,print
	add __irow,1
	pop __irow
	jmp l1319
l1368:
	push "return"
	cmpst
	jne l1371
	spop $a
	cthis isnext
	cmp0
	je l1373
	push __sreads
	cthis getexpr
l1373:
	ret
	jmp l1319
l1371:
	spop $a
	push "$"
	call $8,contains
	cmp0
	je l1375
	push $8
	cthis getvar
	pop $8
	add __icol,1
	pop __icol
	push $8
	spushs
	cthis _get
	cthis getexpr
	spop $b
	popax
	mov [$b],$a
l1376:
	cthis isnext
	cmp0
	je l1377
	add __icol,1
	pop __icol
	localdef $14
	cthis _get
	cthis getexpr
	pop $14
	push __sreads
	spushs
	push "+"
	cmpst
	jne l1379
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	add [$b],$a
	pop [$b]
	jmp l1378
l1379:
	push "-"
	cmpst
	jne l1380
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	sub [$b],$a
	pop [$b]
	jmp l1378
l1380:
	push "*"
	cmpst
	jne l1381
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	mul [$b],$a
	pop [$b]
	jmp l1378
l1381:
	push "/"
	cmpst
	jne l1382
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$a
	jmp l1378
l1382:
	push "%"
	cmpst
	jne l1383
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$d
	jmp l1378
l1383:
	spop $a
l1378:
	jmp l1376
l1377:
	jmp l1374
l1375:
	push $8
	cthis getexpr
l1374:
	add __irow,1
	pop __irow
l1319:
	push __irow
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1385
	push 1
	push "function "
	push $1
	pop $b
	popax
	add $a,$b
	push " not finished!"
	pop $b
	popax
	add $a,$b
	cthis perror
	push 0
	pop $2
l1385:
	jmp l1317
l1318:
	end method
	end class

	method transparent
	push 0
	push 0
	push 0
	push 0
	ret
	end method
	method red
	push 255
	push 0
	push 0
	ret
	end method
	method green
	push 0
	push 255
	push 0
	ret
	end method
	method blue
	push 0
	push 0
	push 255
	ret
	end method
	method white
	push 255
	push 255
	push 255
	ret
	end method
	method black
	push 0
	push 0
	push 0
	ret
	end method
	method grey
	localint $1
	pop $1
	push $1
	push $1
	push $1
	ret
	end method
	method yellow
	push 255
	push 255
	push 0
	ret
	end method
	class Color
	method init
	push A
	push "r"
	push "g"
	push "b"
	push "a"
	cthis vars
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],get
	cthis set
	end method
	method img=
	localdef $1
	pop $1
	push $1
	spushs
	push $1
	clparent classansearcher,firstnotrx1y
	spop $a
	call [$a],getrgba
	pop a
	pop b
	pop g
	pop r
	end method
	method get
	push r
	push g
	push b
	push a
	ret
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop a
	pop b
	pop g
	pop r
	end method
	method rgb=
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	pop b
	pop g
	pop r
	end method
	method rgb
	push r
	push g
	push b
	ret
	end method
	method print
	push "Color::"
	cthis getname
	pop $b
	popax
	add $a,$b
	push " (r,g,b,a) = ("
	pop $b
	popax
	add $a,$b
	push r
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push g
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push a
	pop $b
	popax
	add $a,$b
	push ")"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	end class

	class classasker
	parent newvars
	method init
	clparent newvars,init
	new string,sfuncyes
	push "null"
	pop sfuncyes
	new string,sfuncno
	push "null"
	pop sfuncno
	new string,ssndask
	new string,ssndyes
	new string,ssndno
	new classsound,clsnd
	end method
	method reset
	push "null"
	pop sfuncyes
	push "null"
	pop sfuncno
	call buts,resetall
	end method
	method setfuncs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sfuncyes
	push $2
	pop sfuncno
	end method
	method fxonmovon
	localstring $1
	pop $1
	push $1
	call buts,sfxonmovon
	end method
	method setmouse
	localstring $1
	pop $1
	push "yes"
	push $1
	call buts,newmouse
	push "no"
	push $1
	call buts,newmouse
	end method
	method load
	localstring $1
	localint $2
	pop $2
	pop $1
	new classbutton,buts
	push $1
	push $2
	push "null"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call buts,disableall
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push $5
	cthis setfuncs
	push $1
	push $2
	push $3
	cthis ask2
	end method
	method ask2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	pop ssndask
	push $2
	pop ssndyes
	push $3
	pop ssndno
	call gameapi,pause
	call buts,benableall
	push "bkg"
	call buts,pause
	call clsnd,creset
	push $1
	call clsnd,cbplay
	cthis getname
	push "_ask"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovon
	localstring $1
	pop $1
	push $1
	push "yes"
	cmpje
	cmp0
	je l1387
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndyes
	call clsnd,cbplay
	jmp l1386
l1387:
	push $1
	push "no"
	cmpje
	cmp0
	je l1389
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndno
	call clsnd,cbplay
l1389:
l1386:
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "bkg"
	cmpje
	cmp0
	je l1391
	ret
l1391:
	call gameapi,resume
	call buts,disableall
	push 0
	call clsnd,cactsndstop
	push $1
	push "yes"
	cmpje
	cmp0
	je l1393
	push sfuncyes
	push "null"
	cmpjne
	jmp l1395
l1393:
	push 0
	jmp l1395
l1394:
	push 1
l1395:
	cmp0
	je l1396
	push sfuncyes
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_yes"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l1392
l1396:
	push $1
	push "no"
	cmpje
	cmp0
	je l1398
	push sfuncno
	push "null"
	cmpjne
	jmp l1400
l1398:
	push 0
	jmp l1400
l1399:
	push 1
l1400:
	cmp0
	je l1401
	push sfuncno
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_no"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1401:
l1392:
	end method
	method disabled
	call buts,disabled
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	end class

	class classplacepointer
	method init
	new anima,anpointer
	push "onfinish"
	push "classplacepointer0"
	call anpointer,addmethod
	new int,_iz
	push 1000
	pop _iz
	end method
	method classplacepointer0
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anpointer,load
	push _iz
	cthis setz
	call anpointer,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push $1
	call anpointer,setz
	end method
	method stop
	push 0
	call anpointer,stop
	end method
	method stoph
	push 0
	call anpointer,stop
	call anpointer,hide
	end method
	method show
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,setpos
	push $3
	call anpointer,play
	end method
	method move
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,move
	end method
	method showob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	cthis show
	end method
	method showpob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	cthis show
	end method
	end class

	class SimpleCounter
	method init
	localint $1
	pop $1
	push "length"
	push $1
	cthis var2
	new int,iid
	push 0
	pop iid
	end method
	method next
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push length
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	end method
	method set
	localint $1
	pop $1
	push $1
	pop iid
	end method
	method reset
	push 0
	pop iid
	end method
	method get
	push iid
	end method
	end class

	module clstrdigit
	method init
	end method
	method getdigit
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	pop $3
l1402:
	call $3,length
	push $2
	cmpjl
	cmp0
	je l1403
	push "0"
	push $3
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1402
l1403:
	push $3
	ret
	end method
	method gettime
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis geth
	push $1
	cthis getm
	push $1
	cthis gets
	push "h"
	call $2,contains
	push "m"
	call $2,contains
	push "s"
	call $2,contains
	cthis getstime
	ret
	end method
	method getstime
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $7
	push ""
	pop $7
	push $4
	cmp0
	je l1405
	push $1
	popax
	add $7,$a
	pop $7
l1405:
	push $5
	cmp0
	je l1407
	push $4
	cmp0
	je l1409
	push ":"
	jmp l1408
l1409:
	push ""
l1408:
	push $2
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1407:
	push $6
	cmp0
	je l1411
	push $4
	cmp0
	jne l1413
	push $5
	jmp l1414
l1412:
	push 0
	jmp l1414
l1413:
	push 1
l1414:
	cmp0
	je l1416
	push ":"
	jmp l1415
l1416:
	push ""
l1415:
	push $3
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1411:
	push $7
	ret
	end method
	method geth
	localint $1
	pop $1
	push $1
	push 3600
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method getm
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	psax
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method gets
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method getns
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis gets
	push $2
	cthis getdigit
	ret
	end method
	method getnm
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getm
	push $2
	cthis getdigit
	ret
	end method
	method getbinary
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l1417:
	push $1
	push 0
	cmpja
	cmp0
	je l1418
	push ""
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	push 2
	popax
	div $1,$a
	mov $1,$a
	jmp l1417
l1418:
	push $2
	ret
	end method
	method bintohex
	localstring $1
	pop $1
	localstring $2
	call $1,length
	push 4
	pop $b
	popax
	div $a,$b
	push $d
	spushs
	push 3
	cmpst
	jne l1420
	spop $a
	push "0"
	jmp l1419
l1420:
	push 2
	cmpst
	jne l1421
	spop $a
	push "00"
	jmp l1419
l1421:
	push 1
	cmpst
	jne l1422
	spop $a
	push "000"
	jmp l1419
l1422:
	spop $a
	push ""
l1419:
	pop $2
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1423:
	push $3
	call $1,length
	cmpjl
	cmp0
	je l1424
	jmp l1426
l1425:
	push 4
	popax
	add $3,$a
	pop $3
	jmp l1423
l1426:
	push $3
	push 4
	call $1,getb
	spushs
	push "0000"
	cmpst
	jne l1428
	spop $a
	push "0"
	jmp l1427
l1428:
	push "0001"
	cmpst
	jne l1429
	spop $a
	push "1"
	jmp l1427
l1429:
	push "0010"
	cmpst
	jne l1430
	spop $a
	push "2"
	jmp l1427
l1430:
	push "0011"
	cmpst
	jne l1431
	spop $a
	push "3"
	jmp l1427
l1431:
	push "0100"
	cmpst
	jne l1432
	spop $a
	push "4"
	jmp l1427
l1432:
	push "0101"
	cmpst
	jne l1433
	spop $a
	push "5"
	jmp l1427
l1433:
	push "0110"
	cmpst
	jne l1434
	spop $a
	push "6"
	jmp l1427
l1434:
	push "0111"
	cmpst
	jne l1435
	spop $a
	push "7"
	jmp l1427
l1435:
	push "1000"
	cmpst
	jne l1436
	spop $a
	push "8"
	jmp l1427
l1436:
	push "1001"
	cmpst
	jne l1437
	spop $a
	push "9"
	jmp l1427
l1437:
	push "1010"
	cmpst
	jne l1438
	spop $a
	push "A"
	jmp l1427
l1438:
	push "1011"
	cmpst
	jne l1439
	spop $a
	push "B"
	jmp l1427
l1439:
	push "1100"
	cmpst
	jne l1440
	spop $a
	push "C"
	jmp l1427
l1440:
	push "1101"
	cmpst
	jne l1441
	spop $a
	push "D"
	jmp l1427
l1441:
	push "1110"
	cmpst
	jne l1442
	spop $a
	push "E"
	jmp l1427
l1442:
	push "1111"
	cmpst
	jne l1443
	spop $a
	push "F"
	jmp l1427
l1443:
	spop $a
l1427:
	popax
	add $2,$a
	pop $2
	jmp l1425
l1424:
	push $2
	end method
	end module

	method getbinary
	cthis get
	clparent clstrdigit,getbinary
	end method
	method getdigit
	localint $1
	pop $1
	cthis get
	push $1
	clparent clstrdigit,getdigit
	end method
	method getbindigit
	localint $1
	pop $1
	cthis getbinary
	push $1
	clparent clstrdigit,getdigit
	end method
	class Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1445
	push sgmfontfile
	pop $1
l1445:
	push ".ttf"
	call $1,contains
	cmp0
	je l1447
	new font,_fnt
	push $1
	push $2
	call _fnt,load
	push "_fnt"
	pop $1
l1447:
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new int,iFontSize
	push $2
	pop iFontSize
	new text,txt
	push $1
	call txt,setfont
	push $8
	call txt,setz
	push $6
	push $7
	call txt,setpos
	call txt,show
	new text,txtbg
	call txtbg,hide
	end method
	method hide
	call txt,hide
	end method
	method show
	call txt,show
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,setpos
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt,set
	push iR
	push iG
	push iB
	call txt,createtxt
	end method
	method get
	call txt,get
	ret
	end method
	method setbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	call txt,getpx
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getpy
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getw
	push iFontSize
	pop $b
	popax
	add $a,$b
	push iFontSize
	push 2
	pop $b
	popax
	mul $a,$b
	push $1
	push $2
	push $3
	push $4
	call txtbg,setbkg
	push 1
	push 255
	push 255
	push 255
	push 128
	call txtbg,setborders
	call txtbg,show
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	cthis set
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,move
	end method
	end class

	class Cypher
	parent Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push 0
	cthis set
	end method
	method add
	localint $1
	pop $1
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method iget
	cthis get
	spushs
	spop $h
	call $h,to_i
	end method
	method operator+
	localint $1
	pop $1
	push $1
	cthis add
	end method
	method operator++
	push 1
	cthis add
	end method
	method operator--
	push 1
	popax
	sub 0,$a
	cthis add
	end method
	method operator-
	localint $1
	pop $1
	push $1
	popax
	sub 0,$a
	cthis add
	end method
	method operator=
	localint $1
	pop $1
	push $1
	cthis set
	end method
	method operator==
	localint $1
	pop $1
	cthis get
	push $1
	cmpje
	end method
	method operator!=
	localint $1
	pop $1
	cthis get
	push $1
	cmpjne
	end method
	method operator>
	localint $1
	pop $1
	cthis get
	push $1
	cmpja
	end method
	method operator<
	localint $1
	pop $1
	cthis get
	push $1
	cmpjl
	end method
	end class

	class SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,sdigit
	push $1
	pop sdigit
	push A
	push "istarttime"
	push $2
	push "idtime"
	push $3
	push "itime"
	push 0
	cthis vars2
	cthis reset
	push "timcyk"
	push 1000
	push 1
	push "SecCounter0"
	cthis cnewtimerfin
	end method
	method SecCounter0
	cthis play
	cthis getbuildername
	spushs
	spop $a
	call [$a],tick
	end method
	method play
	call timcyk,play
	end method
	method stop
	push 0
	call timcyk,stop
	end method
	method sgettime
	push itime
	push sdigit
	call clstrdigit,gettime
	ret
	end method
	method gettime
	push itime
	ret
	end method
	method tick
	push idtime
	cthis update
	end method
	method reset
	push istarttime
	pop itime
	end method
	method update
	localint $1
	pop $1
	push $1
	popax
	add itime,$a
	pop itime
	end method
	end class

	class TextTimeCounter
	parent Text
	parent SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localint $10
	localint $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push $9
	push $10
	push $11
	clparent SecCounter,init
	cthis reset
	push 0
	cthis update
	end method
	method update
	localint $1
	pop $1
	push $1
	clparent SecCounter,update
	cthis sgettime
	cthis set
	push itime
	push 0
	cmpjle
	cmp0
	je l1449
	push idtime
	push 0
	cmpjl
	jmp l1451
l1449:
	push 0
	jmp l1451
l1450:
	push 1
l1451:
	cmp0
	je l1452
	cthis getname
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1452:
	end method
	end class

	class gfxObject
	method init
	localstring $1
	pop $1
	new string,sgfxobj
	push $1
	pop sgfxobj
	end method
	method setpos
	push sgfxobj
	spushs
	spop $a
	call [$a],setpos
	end method
	method move
	push sgfxobj
	spushs
	spop $a
	call [$a],move
	end method
	method getpos
	push sgfxobj
	spushs
	spop $a
	call [$a],getpos
	end method
	method getposx
	push sgfxobj
	spushs
	spop $a
	call [$a],getposx
	end method
	method getposy
	push sgfxobj
	spushs
	spop $a
	call [$a],getposy
	end method
	method getpx
	push sgfxobj
	spushs
	spop $a
	call [$a],getpx
	end method
	method getpy
	push sgfxobj
	spushs
	spop $a
	call [$a],getpy
	end method
	method getw
	push sgfxobj
	spushs
	spop $a
	call [$a],getw
	end method
	method geth
	push sgfxobj
	spushs
	spop $a
	call [$a],geth
	end method
	method getcx
	push sgfxobj
	spushs
	spop $a
	call [$a],getcx
	end method
	method getcy
	push sgfxobj
	spushs
	spop $a
	call [$a],getcy
	end method
	method getex
	push sgfxobj
	spushs
	spop $a
	call [$a],getex
	end method
	method getey
	push sgfxobj
	spushs
	spop $a
	call [$a],getey
	end method
	method lodx
	push sgfxobj
	spushs
	spop $a
	call [$a],lodx
	end method
	method lody
	push sgfxobj
	spushs
	spop $a
	call [$a],lody
	end method
	method setz
	push sgfxobj
	spushs
	spop $a
	call [$a],setz
	end method
	method getz
	push sgfxobj
	spushs
	spop $a
	call [$a],getz
	end method
	method show
	push sgfxobj
	spushs
	spop $a
	call [$a],show
	end method
	method hide
	push sgfxobj
	spushs
	spop $a
	call [$a],hide
	end method
	method isvisible
	push sgfxobj
	spushs
	spop $a
	call [$a],isvisible
	end method
	method isin
	push sgfxobj
	spushs
	spop $a
	call [$a],isin
	end method
	end class

	class gfxSquare
	parent Color
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent Color,init
	push A
	push "w"
	push "h"
	cthis vars
	push $3
	pop w
	push $4
	pop h
	new img,imggfx
	push $1
	push $2
	call imggfx,setpos
	push "imggfx"
	clparent gfxObject,init
	end method
	method build
	push w
	push h
	push r
	push g
	push b
	push a
	call imggfx,create
	end method
	method shadow
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localdef $4
	localdef $5
	call imggfx,getpos
	pop $5
	pop $4
	push 0
	push 0
	call imggfx,setpos
	new img,_img1
	new img,_img2
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1454
	push w
	push h
	cthis transparent
	call _img1,create
	push "imggfx"
	call _img1,blit
	jmp l1453
l1454:
	push w
	push h
	cthis get
	call _img1,create
l1453:
	push w
	push h
	cthis black
	push $3
	call _img2,create
	push $1
	push 0
	cmpjl
	cmp0
	je l1456
	push $1
	popax
	sub 0,$a
	push 0
	call _img1,move
	push $1
	popax
	add $4,$a
	pop $4
	jmp l1455
l1456:
	push $1
	push 0
	call _img2,move
l1455:
	push $2
	push 0
	cmpjl
	cmp0
	je l1458
	push 0
	push $2
	popax
	sub 0,$a
	call _img1,move
	push $2
	popax
	add $5,$a
	pop $5
	jmp l1457
l1458:
	push 0
	push $2
	call _img2,move
l1457:
	call $1,abs
	popax
	add w,$a
	pop w
	call $2,abs
	popax
	add h,$a
	pop h
	push w
	push h
	cthis transparent
	call imggfx,create
	push "_img2"
	call imggfx,blit
	push "_img1"
	call imggfx,blit
	delete _img1
	delete _img2
	push $4
	push $5
	call imggfx,move
	end method
	method blackborder
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $1
	cthis black
	push $2
	cthis border
	end method
	method border
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $7
	localdef $8
	call imggfx,getpos
	pop $8
	pop $7
	push 0
	push 0
	call imggfx,setpos
	new img,_img
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1460
	push w
	push h
	cthis transparent
	call _img,create
	push "imggfx"
	call _img,blit
	jmp l1459
l1460:
	push w
	push h
	cthis get
	call _img,create
l1459:
	push $1
	push $2
	call _img,move
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add w,$a
	pop w
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add h,$a
	pop h
	push w
	push h
	push $3
	push $4
	push $5
	push $6
	call imggfx,create
	push "_img"
	call imggfx,blit
	delete _img
	push $7
	push $8
	call imggfx,move
	end method
	end class

	class Rect
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push A
	push "x"
	push "y"
	push "w"
	push "h"
	cthis vars
	push $1
	push $2
	push $3
	push $4
	cthis set
	new vector,vecgr
	push "string"
	call vecgr,type
	push "gmimgvec"
	call vecgr,add
	end method
	method x2
	push x
	push w
	pop $b
	popax
	add $a,$b
	end method
	method y2
	push y
	push h
	pop $b
	popax
	add $a,$b
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	pop w
	push $4
	pop h
	end method
	method setborders
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	pop w
	push $4
	push y
	pop $b
	popax
	sub $a,$b
	pop h
	end method
	method fit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	call vecgr,contains
	cmp0
	je l1462
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],_getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1464
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1464:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],_getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1466
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1466:
	jmp l1461
l1462:
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1468
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1468:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1470
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1470:
l1461:
	cthis x2
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l1472
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1472:
	cthis y2
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1474
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1474:
	end method
	method fitrand
	localstring $1
	pop $1
	push $1
	spushs
	push x
	push w
	push $1
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	push y
	push h
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	end method
	method fitgrouprand
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1475:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1476
	jmp l1478
l1477:
	add $2,1
	pop $2
	jmp l1475
l1478:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fitrand
	jmp l1477
l1476:
	end method
	method fitgroup
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1479:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1480
	jmp l1482
l1481:
	add $2,1
	pop $2
	jmp l1479
l1482:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fit
	jmp l1481
l1480:
	end method
	method isin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push x
	cmpjae
	cmp0
	je l1483
	push $1
	push x
	push w
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1483
	push $2
	push y
	cmpjae
	cmp0
	je l1483
	push $2
	push y
	push h
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l1485
l1483:
	push 0
	jmp l1485
l1484:
	push 1
l1485:
	end method
	end class

	class ImgRect
	method init
	push A
	push "ix"
	push 0
	push "iy"
	push 0
	push "iw"
	push 0
	push "ih"
	push 0
	push "bvis"
	push 0
	push "iz"
	push 0
	cthis vars2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop ix
	push $2
	pop iy
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add ix,$a
	pop ix
	push $2
	popax
	add iy,$a
	pop iy
	end method
	method getpos
	push ix
	push iy
	ret
	end method
	method getposx
	push ix
	end method
	method getposy
	push iy
	end method
	method getpx
	push ix
	end method
	method getpy
	push iy
	end method
	method getw
	push iw
	end method
	method geth
	push ih
	end method
	method getcx
	push ix
	push iw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	push iy
	push ih
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getex
	push ix
	push iw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	push iy
	push ih
	pop $b
	popax
	add $a,$b
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop iz
	end method
	method getz
	push iz
	end method
	method show
	push 1
	pop bvis
	end method
	method hide
	push 0
	pop bvis
	end method
	method isvisible
	push bvis
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push ix
	cmpjae
	cmp0
	je l1486
	push $1
	push ix
	push iw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1486
	push $2
	push iy
	cmpjae
	cmp0
	je l1486
	push $2
	push iy
	push ih
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l1488
l1486:
	push 0
	jmp l1488
l1487:
	push 1
l1488:
	end method
	method setrect
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ix
	push $2
	pop iy
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	pop iw
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	pop ih
	end method
	method print
	push "x: "
	push ix
	pop $b
	popax
	add $a,$b
	push ", y: "
	pop $b
	popax
	add $a,$b
	push iy
	pop $b
	popax
	add $a,$b
	push ", w: "
	pop $b
	popax
	add $a,$b
	push iw
	pop $b
	popax
	add $a,$b
	push ", h: "
	pop $b
	popax
	add $a,$b
	push ih
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	new string,_sobfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	spushs
	push _sfun
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	cmpjne
	cmp0
	je l1490
	push _sobfin
	push "null"
	cmpje
	cmp0
	je l1492
	push _sfunfin
	spushs
	spop $d
	cthis [$d]
	jmp l1491
l1492:
	push _sobfin
	spushs
	push _sfunfin
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1491:
l1490:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	cmpja
	cmp0
	je l1494
	push _ib2
	cthis _cfinito
	jmp l1493
l1494:
	push _ival
	push _ib1
	cmpjl
	cmp0
	je l1496
	push _ib1
	cthis _cfinito
	jmp l1495
l1496:
	push _sob
	spushs
	push _sfun
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l1495:
l1493:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sobfin
	push $8
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $9
	call $2,abs
	pop $9
	push $1
	push 0
	cmpjle
	cmp0
	jne l1499
	push $9
	push $5
	cmpje
	cmp0
	jne l1499
	push $9
	push $6
	cmpja
	jmp l1500
l1498:
	push 0
	jmp l1500
l1499:
	push 1
l1500:
	cmp0
	je l1501
	ret
l1501:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	cmpja
	cmp0
	je l1503
	push _ib1
	pop _ival
	jmp l1502
l1503:
	push $2
	push 0
	cmpjl
	cmp0
	je l1505
	push _ib2
	pop _ival
	jmp l1504
l1505:
	ret
l1504:
l1502:
	push $3
	spushs
	push $4
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method setopacity
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setopacity"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push "null"
	push $4
	cthis _play
	end method
	method isplaying
	call timf,isplaying
	end method
	end class

	class CutScene
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,X1
	new int,Y1
	new int,X2
	new int,Y2
	new img,_gsq
	push $1
	push $2
	push $3
	push $4
	cthis build
	push "_gsq"
	clparent gfxObject,init
	new string,_sfunc1
	new string,_sob1
	new string,_sfunc2
	new string,_sob2
	new int,_idelay
	push 10
	pop _idelay
	new classfadeinout,_clfio
	end method
	method build
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop Y2
	pop X2
	pop Y1
	pop X1
	push X2
	push X1
	pop $b
	popax
	sub $a,$b
	push Y2
	push Y1
	pop $b
	popax
	sub $a,$b
	cthis black
	push 255
	call _gsq,create
	push X1
	push Y1
	call _gsq,setpos
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method buildblack
	push 0
	push 0
	push iResX
	push iResY
	cthis build
	end method
	method buildfromfile
	localstring $1
	pop $1
	localdef $2
	cthis getz
	pop $2
	new img,_imtmp
	push $1
	call _imtmp,load
	push 255
	call _gsq,transparency
	push "_imtmp"
	call _gsq,blit
	delete _imtmp
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method buildfromscreen
	push 255
	call _gsq,transparency
	call _gsq,blitscreen
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method delay
	localint $1
	pop $1
	push $1
	pop _idelay
	end method
	method transparency
	localint $1
	pop $1
	push $1
	call _gsq,transparency
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "null"
	push $1
	push "null"
	push $2
	cthis playobfin
	end method
	method playobfin
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1507
	call gameapi,getgamename
	jmp l1506
l1507:
	push $1
l1506:
	pop _sob1
	push $2
	pop _sfunc1
	push $3
	push "null"
	cmpje
	cmp0
	je l1509
	call gameapi,getgamename
	jmp l1508
l1509:
	push $3
l1508:
	pop _sob2
	push $4
	pop _sfunc2
	call _gsq,show
	push 0
	call _gsq,transparency
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene0"
	call _clfio,_play
	end method
	method CutScene0
	push _sob1
	push _sfunc1
	cthis callfun
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method close
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obclose
	end method
	method obclose
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob1
	push $2
	pop _sfunc1
	push 0
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene1"
	call _clfio,_play
	end method
	method CutScene1
	call _gsq,hide
	push _sob1
	push _sfunc1
	cthis callfun
	end method
	method enter
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obenter
	end method
	method obenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob2
	push $2
	pop _sfunc2
	push 255
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method _callfun2
	call _gsq,hide
	push _sob2
	push _sfunc2
	cthis callfun
	end method
	method isplaying
	call _clfio,isplaying
	end method
	method show
	push 255
	call _gsq,transparency
	call _gsq,show
	end method
	end class

	method allchars
	push "a0 t_!@#$%^&*()_+-=[]\\|}{;':\",./<>?`~"
	end method
	class TextTyper
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new string,sChars
	push $6
	pop sChars
	new int,iLimit
	push $7
	pop iLimit
	push A
	push "Sdir"
	push "left"
	push "W"
	push 0
	push "iFontSize"
	push $2
	push "X"
	push 0
	push "Y"
	push 0
	cthis vars2
	new text,txt1
	push $1
	call txt1,setfont
	push ""
	call txt1,set
	new text,txt2
	push $1
	call txt2,setfont
	push "_"
	call txt2,set
	push iR
	push iG
	push iB
	call txt2,createtxt
	call txt2,hide
	new text,txtpass
	push $1
	call txtpass,setfont
	call txtpass,hide
	new int,bpass
	push 0
	pop bpass
	new string,_sob
	push "null"
	pop _sob
	new string,_sfun
	push "null"
	pop _sfun
	push "timcyk"
	push 300
	push 1
	push "fintimcyk"
	cthis cnewtimerfin
	push "txt1"
	clparent gfxObject,init
	end method
	method setaspasswd
	push 1
	pop bpass
	call txt1,hide
	call txt1,getz
	call txtpass,setz
	call txtpass,show
	cthis copytopass
	end method
	method copytopass
	localdef $1
	call txt1,get
	spushs
	spop $h
	call $h,length
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1510:
	push $3
	push $1
	cmpjl
	cmp0
	je l1511
	jmp l1513
l1512:
	add $3,1
	pop $3
	jmp l1510
l1513:
	push "*"
	popax
	add $2,$a
	pop $2
	jmp l1512
l1511:
	push $2
	call txtpass,txtset
	call txt1,getpx
	call txt1,getpy
	call txtpass,setpos
	end method
	method setastext
	push 0
	pop bpass
	call txt1,show
	call txtpass,hide
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,isin
	end method
	method getcol
	push iR
	push iG
	push iB
	ret
	end method
	method fintimcyk
	cthis getlock
	cmp0
	je l1515
	ret
l1515:
	cthis updatecyk
	cthis play
	end method
	method updatecyk
	call txt2,isvisible
	cmp0
	je l1517
	call txt2,hide
	jmp l1516
l1517:
	call txt1,getex
	call txt1,getpy
	call txt2,setpos
	call txt2,show
l1516:
	end method
	method enable
	cthis unlock
	cthis updatecyk
	call timcyk,play
	end method
	method disable
	call txt2,hide
	push 0
	call timcyk,stop
	cthis lock
	end method
	method onenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob
	push $2
	pop _sfun
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop X
	push $2
	pop Y
	cthis get
	cthis updatetxt
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push X
	push $1
	pop $b
	popax
	add $a,$b
	push Y
	push $2
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method setz
	localint $1
	pop $1
	push $1
	call txt1,setz
	push $1
	call txt2,setz
	end method
	method get
	localstring $1
	call txt1,get
	pop $1
	call $1,length
	push 0
	cmpja
	cmp0
	je l1519
	push $1
	jmp l1518
l1519:
	push ""
l1518:
	end method
	method getpx
	call txt1,getpx
	end method
	method getpy
	call txt1,getpy
	end method
	method getcx
	call txt1,getcx
	end method
	method getcy
	call txt1,getcy
	end method
	method geth
	call txt1,geth
	end method
	method getey
	call txt1,getpy
	push iFontSize
	pop $b
	popax
	add $a,$b
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,clip
	push $1
	push $2
	push $3
	push $4
	call txt2,clip
	end method
	method length
	call txt1,get
	spushs
	spop $h
	call $h,length
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt1,set
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis getcol
	call txt1,txtsetcol
	end method
	method limit=
	localint $1
	pop $1
	push $1
	pop iLimit
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1521
	ret
l1521:
	cthis getname
	push "_ontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1523
	cthis disable
	push _sob
	push _sfun
	cthis callfun
	cthis getname
	push "_onenter"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	ret
l1523:
	localstring $1
	push "t"
	call sChars,contains
	cmp0
	je l1525
	push "tab"
	call keyboard,iskey
	jmp l1527
l1525:
	push 0
	jmp l1527
l1526:
	push 1
l1527:
	cmp0
	je l1528
	push " "
	pop $1
	jmp l1524
l1528:
	call keyboard,getkey
	pop $1
l1524:
	localstring $2
	call txt1,get
	pop $2
	call keyboard,isalpha
	cmp0
	je l1530
	push "a"
	call sChars,contains
	jmp l1532
l1530:
	push 0
	jmp l1532
l1531:
	push 1
l1532:
	cmp0
	jne l1534
	call keyboard,isdigit
	cmp0
	je l1535
	push "0"
	call sChars,contains
	jmp l1537
l1535:
	push 0
	jmp l1537
l1536:
	push 1
l1537:
	cmp0
	jne l1534
	push $1
	call sChars,contains
	jmp l1538
l1533:
	push 0
	jmp l1538
l1534:
	push 1
l1538:
	cmp0
	je l1539
	push iLimit
	push 0
	cmpjle
	cmp0
	jne l1542
	push iLimit
	call $2,length
	cmpja
	jmp l1543
l1541:
	push 0
	jmp l1543
l1542:
	push 1
l1543:
	jmp l1544
l1539:
	push 0
	jmp l1544
l1540:
	push 1
l1544:
	cmp0
	je l1545
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	cthis updatetxt
	cthis updatecyk
	jmp l1529
l1545:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1547
	call $2,length
	push 0
	cmpja
	jmp l1549
l1547:
	push 0
	jmp l1549
l1548:
	push 1
l1549:
	cmp0
	je l1550
	push 1
	call $2,strsube
	cthis updatetxt
	cthis updatecyk
l1550:
l1529:
	cthis getname
	push "_ontyped"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method updatetxt
	localstring $1
	pop $1
	push $1
	call txt1,set
	push iR
	push iG
	push iB
	call txt1,createtxt
	push Sdir
	push "center"
	cmpje
	cmp0
	je l1552
	push X
	push W
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push Y
	call txt1,setpos
	jmp l1551
l1552:
	push Sdir
	push "right"
	cmpje
	cmp0
	je l1554
	push X
	push W
	pop $b
	popax
	add $a,$b
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push Y
	call txt1,setpos
	jmp l1553
l1554:
	push X
	push Y
	call txt1,setpos
l1553:
l1551:
	push bpass
	cmp0
	je l1556
	cthis copytopass
l1556:
	cthis getname
	push "_onwrite"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class ConTextTyper
	parent TextTyper
	parent ObjController
	method init
	clparent TextTyper,init
	clparent ObjController,init
	end method
	end class

	new string,sTextBoxTyperSys
	push "null"
	pop sTextBoxTyperSys
	class TextBoxTyper
	parent LObjController
	parent ImagePos
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent LObjController,init
	clparent ImagePos,init
	new def,Font
	push $1
	push $2
	cthis checkfont
	pop Font
	push A
	push "Cols"
	push $10
	push $3
	pop $b
	popax
	div $a,$b
	psax
	push "Rows"
	push $11
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	push "X"
	push $8
	push "Y"
	push $9
	push "Row"
	push 0
	push "enablemove"
	push 1
	push "W"
	push $10
	push "insystem"
	push 0
	push "H"
	push $11
	push "isvisible"
	push 1
	push "clipx1"
	push $8
	push "clipy1"
	push $9
	push "clipx2"
	push 0
	push "clipy2"
	push 0
	push "clipped"
	push 0
	cthis vars2
	new def,Size
	push $2
	pop Size
	new def,Dy
	push $12
	pop Dy
	new def,Z
	push 0
	pop Z
	localstring $13
	new gmimgvec,grtt
	new gmimgvec,gren
	localint $14
	push 0
	pop $14
l1557:
	push $14
	push Rows
	cmpjl
	cmp0
	je l1558
	jmp l1560
l1559:
	add $14,1
	pop $14
	jmp l1557
l1560:
	push "tt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $13
	push $13
	spushs
	push Font
	push $2
	push $4
	push $5
	push $6
	push $7
	push Cols
	spop $e
	new TextTyper,[$e]
	push $13
	spushs
	push $10
	spop $a
	call [$a],W=
	push $13
	spushs
	push "left"
	spop $a
	call [$a],Sdir=
	push $13
	spushs
	push $8
	push $9
	push $14
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $13
	call grtt,add
	jmp l1559
l1558:
	end method
	method settyper
	localint $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localstring $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $10
	localint $11
	localstring $12
	localstring $13
	push ""
	pop $13
	push $1
	push 0
	cmpjl
	cmp0
	je l1562
	call grtt,last
	spushs
	spop $a
	call [$a],X
	pop $10
	call grtt,last
	spushs
	spop $a
	call [$a],getey
	push Dy
	pop $b
	popax
	add $a,$b
	pop $11
	call grtt,size
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	call grtt,add
	jmp l1561
l1562:
	push $1
	call grtt,get
	pop $12
	push $12
	spushs
	spop $a
	call [$a],X
	pop $10
	push $12
	spushs
	spop $a
	call [$a],getpy
	pop $11
	push $12
	spushs
	spop $a
	call [$a],get
	pop $13
	push $12
	push 0
	push $3
	push $12
	spushs
	spop $a
	call [$a],iFontSize
	pop $b
	popax
	sub $a,$b
	call grtt,movefrom
	push $12
	spushs
	spop $d
	delete [$d]
l1561:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	push $2
	push $3
	push $5
	push $6
	push $7
	push $8
	push W
	push $4
	pop $b
	popax
	div $a,$b
	psax
	spop $e
	new TextTyper,[$e]
	push $12
	spushs
	push W
	spop $a
	call [$a],W=
	push $12
	spushs
	push $9
	spop $a
	call [$a],Sdir=
	push $12
	spushs
	push $13
	spop $a
	call [$a],updatetxt
	push $12
	spushs
	push Z
	spop $a
	call [$a],setz
	push $12
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grtt,move
	push $1
	push $2
	call gren,move
	push $1
	popax
	add X,$a
	pop X
	push $2
	popax
	add Y,$a
	pop Y
	end method
	method size
	call grtt,size
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtt,setz
	push $1
	call gren,setz
	end method
	method getz
	push Z
	end method
	method show
	push 1
	pop isvisible
	call grtt,show
	end method
	method hide
	push 0
	pop isvisible
	call grtt,hide
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 1
	pop clipped
	push $1
	pop clipx1
	push $2
	pop clipy1
	push $3
	pop clipx2
	push $4
	pop clipy2
	localint $5
	push 0
	pop $5
l1563:
	push $5
	call grtt,size
	cmpjl
	cmp0
	je l1564
	jmp l1566
l1565:
	add $5,1
	pop $5
	jmp l1563
l1566:
	push $5
	call grtt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l1565
l1564:
	end method
	method getw
	push W
	end method
	method geth
	push H
	end method
	method enumerate
	localint $1
	pop $1
	localstring $2
	localstring $3
	localint $4
	push 0
	pop $4
l1567:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1568
	jmp l1570
l1569:
	add $4,1
	pop $4
	jmp l1567
l1570:
	push "txte"
	push $4
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new text,[$e]
	push $2
	call gren,add
	push $2
	spushs
	push Z
	spop $a
	call [$a],setz
	push $2
	spushs
	push Font
	spop $a
	call [$a],setfont
	push $2
	spushs
	push ""
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	call tt0,getcol
	spop $a
	call [$a],txtsetcol
	push $2
	spushs
	push X
	push $2
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	push Y
	push $4
	push Size
	push Dy
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l1569
l1568:
	end method
	method cut
	localint $1
	pop $1
	push $1
	pop Rows
	end method
	method enable
	cthis unlock
	cthis activateact
	end method
	method disable
	cthis lock
	push "disable"
	call grtt,eval
	end method
	method actual
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	end method
	method activate
	localint $1
	pop $1
	cthis unlock
	push $1
	push 0
	cmpjae
	cmp0
	je l1572
	push $1
	push Rows
	cmpjl
	jmp l1574
l1572:
	push 0
	jmp l1574
l1573:
	push 1
l1574:
	cmp0
	je l1575
	push insystem
	cmp0
	je l1577
	push GAME
	spushs
	push sTextBoxTyperSys
	spop $a
	call [$a],isgmobj
	cmp0
	je l1579
	push sTextBoxTyperSys
	cthis getname
	cmpjne
	jmp l1581
l1579:
	push 0
	jmp l1581
l1580:
	push 1
l1581:
	cmp0
	je l1582
	push sTextBoxTyperSys
	spushs
	spop $a
	call [$a],deactivate
l1582:
	cthis getname
	pop sTextBoxTyperSys
l1577:
	cthis deactivate
	push $1
	pop Row
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],enable
	cthis getname
	push "_activate"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1575:
	end method
	method activateact
	push Row
	cthis activate
	end method
	method deactivate
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disable
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1584
	ret
l1584:
	cthis getname
	push "_boxontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1586
	localdef $1
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	pop $1
	call $1,clear
	call $1,length
	push 0
	cmpje
	cmp0
	je l1588
	push enablemove
	jmp l1590
l1588:
	push 0
	jmp l1590
l1589:
	push 1
l1590:
	cmp0
	je l1591
	localdef $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l1592:
	push $2
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l1593
	jmp l1595
l1594:
	sub $2,1
	pop $2
	jmp l1592
l1595:
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1594
l1593:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	push Rows
	cmpjl
	cmp0
	je l1597
	push ""
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis setid
l1597:
l1591:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1585
l1586:
	push "up"
	call keyboard,iskey
	cmp0
	je l1599
	push Row
	push 0
	cmpja
	jmp l1601
l1599:
	push 0
	jmp l1601
l1600:
	push 1
l1601:
	cmp0
	je l1602
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1598
l1602:
	push "down"
	call keyboard,iskey
	cmp0
	je l1604
	push Row
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l1606
l1604:
	push 0
	jmp l1606
l1605:
	push 1
l1606:
	cmp0
	je l1607
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1603
l1607:
	push "pgdown"
	call keyboard,iskey
	cmp0
	je l1609
	push Row
	push Rows
	push 10
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1611
	push Row
	push 10
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1610
l1611:
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1610:
	jmp l1608
l1609:
	push "pgup"
	call keyboard,iskey
	cmp0
	je l1613
	push Row
	push 9
	cmpja
	cmp0
	je l1615
	push Row
	push 10
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1614
l1615:
	push 0
	cthis activate
l1614:
	jmp l1612
l1613:
	push "backspace"
	call keyboard,iskey
	cmp0
	jne l1618
	push "delete"
	call keyboard,iskey
	jmp l1619
l1617:
	push 0
	jmp l1619
l1618:
	push 1
l1619:
	cmp0
	je l1620
	cthis actual
	spushs
	spop $a
	call [$a],length
	push 0
	cmpje
	jmp l1622
l1620:
	push 0
	jmp l1622
l1621:
	push 1
l1622:
	cmp0
	je l1623
	push enablemove
	cmp0
	je l1625
	localdef $2
	push Row
	pop $2
l1626:
	push $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1627
	jmp l1629
l1628:
	add $2,1
	pop $2
	jmp l1626
l1629:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1628
l1627:
	push ""
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setid
l1625:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1631
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1631:
	jmp l1616
l1623:
	push "onkeydown"
	call grtt,eval
l1616:
l1612:
l1608:
l1603:
l1598:
l1585:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1633
	ret
l1633:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push clipped
	cmp0
	je l1635
	push $1
	push $2
	push clipx1
	push clipy1
	push clipx2
	push clipy2
	call clsurf,isin
	jmp l1637
l1635:
	push 0
	jmp l1637
l1636:
	push 1
l1637:
	cmp0
	jne l1639
	push clipped
	neg
	cmp0
	je l1640
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	jmp l1642
l1640:
	push 0
	jmp l1642
l1641:
	push 1
l1642:
	jmp l1643
l1638:
	push 0
	jmp l1643
l1639:
	push 1
l1643:
	cmp0
	je l1644
	cthis deactivate
	localint $3
	push 0
	pop $3
l1645:
	push $3
	cthis size
	cmpjl
	cmp0
	je l1646
	jmp l1648
l1647:
	add $3,1
	pop $3
	jmp l1645
l1648:
	push "tt"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getey
	push $2
	cmpja
	cmp0
	je l1650
	push $3
	cthis activate
	ret
l1650:
	jmp l1647
l1646:
	jmp l1634
l1644:
	cthis getname
	push "_OUTSIDE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1634:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	cmp0
	je l1652
	push isvisible
	neg
	jmp l1654
l1652:
	push 0
	jmp l1654
l1653:
	push 1
l1654:
	cmp0
	je l1655
	push 0
	ret
l1655:
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	end method
	method getid
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method getact
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method idpx
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpx
	end method
	method idpy
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpy
	end method
	method getpx
	push X
	end method
	method getpy
	push Y
	end method
	method get
	push 0
	cthis getfrom
	end method
	method getfrom
	localint $1
	pop $1
	push $1
	push ""
	cthis getlinesfrom
	end method
	method getlinesfrom
	localint $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push ""
	pop $3
	localint $4
	push $1
	pop $4
l1656:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1657
	jmp l1659
l1658:
	add $4,1
	pop $4
	jmp l1656
l1659:
	push "tt"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	push $2
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	jmp l1658
l1657:
	push $3
	end method
	method getlines
	push 0
	push " "
	cthis getlinesfrom
	end method
	method nonempty
	localint $1
	pop $1
	localstring $2
l1660:
	push $1
	call grtt,size
	cmpjl
	cmp0
	je l1661
	jmp l1663
l1662:
	add $1,1
	pop $1
	jmp l1660
l1663:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	pop $2
	call $2,clear
	call $2,length
	push 0
	cmpja
	cmp0
	je l1665
	push $1
	ret
l1665:
	jmp l1662
l1661:
	push 1
	popax
	sub 0,$a
	end method
	method clear
	call grtt,txtreset
	end method
	method setid
	localstring $1
	localint $2
	pop $2
	pop $1
	call grtt,size
	push $2
	cmpjae
	cmp0
	je l1667
	push "tt"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],txtset
l1667:
	end method
	method settext
	localint $1
	pop $1
l1668:
	push $1
	push 0
	cmpja
	cmp0
	je l1669
	sub $1,1
	pop $1
	push $1
	cthis setid
	jmp l1668
l1669:
	end method
	method copytodb
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
	localint $2
	push 0
	pop $2
l1670:
	push $2
	call grtt,size
	cmpjl
	cmp0
	je l1671
	jmp l1673
l1672:
	add $2,1
	pop $2
	jmp l1670
l1673:
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	call grtt,get
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],add
	jmp l1672
l1671:
	end method
	method copyfromdb
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis copyfromdbii
	end method
	method copyfromdbss
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis copyfromdbii
	end method
	method copyfromdbii
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1676
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	jmp l1677
l1675:
	push 0
	jmp l1677
l1676:
	push 1
l1677:
	cmp0
	je l1678
	ret
l1678:
	cthis clear
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	cthis size
	cmpja
	cmp0
	je l1680
	push $2
	cthis size
	pop $b
	popax
	add $a,$b
	pop $3
l1680:
	localint $4
	push $2
	pop $4
l1681:
	push $4
	push $3
	cmpjl
	cmp0
	je l1682
	jmp l1684
l1683:
	add $4,1
	pop $4
	jmp l1681
l1684:
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmp0
	je l1686
	push $1
	spushs
	push $4
	push 0
	spop $a
	call [$a],get
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis setid
l1686:
	jmp l1683
l1682:
	end method
	method copyfromdbrow
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $4
	push $4
	cthis size
	cmpja
	cmp0
	je l1688
	cthis size
	pop $4
l1688:
	localint $5
	push $3
	pop $5
l1689:
	push $5
	push $4
	cmpjl
	cmp0
	je l1690
	jmp l1692
l1691:
	add $5,1
	pop $5
	jmp l1689
l1692:
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],get
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	cthis setid
	jmp l1691
l1690:
	end method
	method save
	localstring $1
	pop $1
	new db,__tmpdb
	push "__tmpdb"
	cthis copytodb
	push "|"
	call __tmpdb,setseparator
	push $1
	call __tmpdb,save
	delete __tmpdb
	end method
	method load
	localstring $1
	pop $1
	new db,__tmpdb
	push $1
	call __tmpdb,load
	push "__tmpdb"
	cthis copyfromdb
	delete __tmpdb
	end method
	end class

	class GUITextBoxTyper
	parent TextBoxTyper
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	push $9
	push $10
	push $11
	push $12
	clparent TextBoxTyper,init
	push A
	push "rewinder"
	push "null"
	push "rewinderbg"
	push "null"
	cthis vars2
	end method
	method setrewinder
	localstring $1
	pop $1
	push $1
	pop rewinder
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	pop rewinderbg
	end method
	method activate
	localint $1
	pop $1
	push $1
	clparent TextBoxTyper,activate
	cthis updaterewactual
	end method
	method updaterewactual
	push Row
	cthis updaterewpos
	end method
	method updaterewpos
	localint $1
	pop $1
	push rewinder
	push "null"
	cmpjne
	cmp0
	je l1694
	localdef $2
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $a
	call [$a],getpy
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	cmpjl
	cmp0
	je l1696
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
	jmp l1695
l1696:
	push $2
	spushs
	spop $a
	call [$a],getey
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	cmpja
	cmp0
	je l1698
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
l1698:
l1695:
l1694:
	end method
	end class

	class DelayTaker
	method init
	new int,bonrel
	push 0
	pop bonrel
	new int,bstart
	push 0
	pop bstart
	new int,bclickrel
	push 1
	pop bclickrel
	push "timwez"
	push 300
	push 1
	push "DelayTaker0"
	cthis cnewtimerfin
	end method
	method DelayTaker0
	push 1
	pop bonrel
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	pop bclickrel
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	call timwez,delay
	end method
	method take
	push bclickrel
	cmp0
	je l1700
	call timwez,play
	push 0
	pop bonrel
	jmp l1699
l1700:
	push 1
	pop bonrel
l1699:
	push 1
	pop bstart
	end method
	method ret
	push 0
	pop bonrel
	push 0
	pop bstart
	push 0
	call timwez,stop
	end method
	method isonclick
	cthis stoptimer
	push bstart
	cmp0
	je l1701
	push bonrel
	neg
	jmp l1703
l1701:
	push 0
	jmp l1703
l1702:
	push 1
l1703:
	end method
	method isonrel
	cthis stoptimer
	push bstart
	cmp0
	je l1704
	push bonrel
	jmp l1706
l1704:
	push 0
	jmp l1706
l1705:
	push 1
l1706:
	end method
	method istaken
	push bstart
	end method
	method stoptimer
	push 0
	call timwez,stop
	end method
	end class

	class ImgMover
	method init
	new string,smoved
	push "null"
	pop smoved
	new int,ilastx
	new int,ilasty
	new int,irelx
	new int,irely
	end method
	method mssetobj
	localstring $1
	pop $1
	push $1
	call mouse,getpos
	cthis setobj
	end method
	method setobj
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	push 0
	cthis set
	end method
	method setcobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis setobj
	end method
	method setpobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setobj
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $4
	pop $b
	popax
	sub $a,$b
	pop ilastx
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $5
	pop $b
	popax
	sub $a,$b
	pop ilasty
	push $2
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop irelx
	push $3
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop irely
	push $1
	pop smoved
	end method
	method msmove
	call mouse,getpos
	cthis move
	end method
	method msftmove
	call mouse,getpos
	cthis ftmove
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1708
	push smoved
	spushs
	push $1
	push smoved
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push irelx
	pop $b
	popax
	sub $a,$b
	push $2
	push smoved
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	push irely
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
l1708:
	end method
	method ftmove
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1710
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
l1710:
	end method
	method retobj
	push 0
	push 0
	cthis ret
	end method
	method ret
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push ilastx
	push $1
	pop $b
	popax
	add $a,$b
	push ilasty
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	cthis free
	end method
	method put
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	cthis free
	end method
	method free
	push "null"
	pop smoved
	end method
	method getmover
	push smoved
	end method
	method getfree
	localdef $1
	push smoved
	pop $1
	cthis free
	push $1
	end method
	method moving
	push smoved
	push "null"
	cmpjne
	end method
	end class

	class ConImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1712
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1712:
	end method
	end class

	class DelayImgMover
	parent classlocker
	parent ImgMover
	method init
	clparent classlocker,init
	clparent ImgMover,init
	new DelayTaker,cldt
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method _put
	call cldt,ret
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	call cldt,take
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1714
	ret
l1714:
	call cldt,isonclick
	cmp0
	je l1716
	cthis _put
	jmp l1715
l1716:
	call cldt,istaken
	neg
	cmp0
	je l1718
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1718:
l1715:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1720
	ret
l1720:
	call cldt,isonrel
	cmp0
	je l1722
	cthis _put
l1722:
	end method
	end class

	class DelayMover
	parent DelayImgMover
	parent ObjController
	method init
	clparent DelayImgMover,init
	clparent ObjController,init
	end method
	end class

	class Rewinder
	parent classlocker
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new string,sarrowdir
	new int,ilenx
	new int,ileny
	new string,sgr
	new string,sorientation
	new int,bvertical
	new int,bfilteritem
	push 0
	pop bfilteritem
	new int,ibx1
	push 0
	pop ibx1
	new int,ibx2
	push iResX
	pop ibx2
	new int,iby1
	push 0
	pop iby1
	new int,iby2
	push iResY
	pop iby2
	new int,iodleg
	push 2
	pop iodleg
	new ImgMover,clmv
	push "timtick"
	push 1
	push 1
	push "timfin"
	cthis cnewtimercyclefin
	push A
	push "borx1"
	push $1
	push "bory1"
	push $2
	push "borx2"
	push $3
	push "bory2"
	push $4
	cthis vars2
	new snd,fxrew
	end method
	method movefilter
	push 1
	pop bfilteritem
	end method
	method movenormal
	push 0
	pop bfilteritem
	end method
	method setfxrew
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call fxrew,load
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push $1
	push $2
	push $3
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,set
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1725
	push sorientation
	push "down"
	cmpje
	jmp l1726
l1724:
	push 0
	jmp l1726
l1725:
	push 1
l1726:
	cmp0
	je l1727
	push sgr
	spushs
	push $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	push 0
	spop $a
	call [$a],move
	jmp l1723
l1727:
	push sgr
	spushs
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	spop $a
	call [$a],move
l1723:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],remove
	end method
	method pickup
	localint $1
	localint $2
	pop $2
	pop $1
	push sgr
	spushs
	push $1
	push $2
	push 1
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l1729
	push sgr
	spushs
	spop $a
	call [$a],getsfound
	push $1
	push $2
	cthis getitem
	push 1
	ret
l1729:
	push 0
	ret
	end method
	method mspickup
	call mouse,getpos
	cthis pickup
	ret
	end method
	method freeitem
	call clmv,free
	end method
	method moveitem
	push bfilteritem
	cmp0
	je l1731
	call clmv,msftmove
	jmp l1730
l1731:
	call clmv,msmove
l1730:
	end method
	method retitem
	localstring $1
	call clmv,getmover
	pop $1
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,ret
	push $1
	cthis putitem
	end method
	method putitem
	localstring $1
	pop $1
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1734
	push sorientation
	push "down"
	cmpje
	jmp l1735
l1733:
	push 0
	jmp l1735
l1734:
	push 1
l1735:
	cmp0
	je l1736
	push $1
	spushs
	push sgr
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l1732
l1736:
	push $1
	spushs
	push 0
	push sgr
	spushs
	spop $a
	call [$a],getey
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
l1732:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],add
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $1
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	end method
	method getmoved
	call clmv,getmover
	ret
	end method
	method getbutw
	call anupstd,getw
	ret
	end method
	method getbuth
	call anupstd,geth
	ret
	end method
	method movearrows
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grarrows,move
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $6
	pop sgr
	new anima,anupstd
	push $1
	call anupstd,load
	push $2
	call anupstd,setz
	push "up"
	push 0
	call anupstd,setframe
	push "anupstd"
	push "anupact"
	cthis copyanima
	push "up"
	push 1
	call anupact,setframe
	push "anupstd"
	push "andownact"
	cthis copyanima
	push "down"
	push 1
	call andownact,setframe
	push "anupstd"
	push "andownstd"
	cthis copyanima
	push "down"
	push 0
	call andownstd,setframe
	push "butup"
	push "anupstd"
	push "anupact"
	push "null"
	push $3
	cthis newbutan
	push "butdown"
	push "andownstd"
	push "andownact"
	push "null"
	push $3
	cthis newbutan
	push "onmoveon"
	push "_rewbutmoveon"
	call butup,addmethod
	push "onmoveon"
	push "_rewbutmoveon"
	call butdown,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butup,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butdown,addmethod
	push "onclick"
	push "_rewbutclick"
	call butup,addmethod
	push "onclick"
	push "_rewbutclick"
	call butdown,addmethod
	push "onrel"
	push "_rewbutrel"
	call butup,addmethod
	push "onrel"
	push "_rewbutrel"
	call butdown,addmethod
	push $4
	pop sorientation
	new gmimgvec,grarrows
	push "grarrows"
	push "anupstd"
	popax
	pop $b
	psax
	call [$b],operator+
	push "anupact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownstd"
	popax
	pop $b
	psax
	call [$b],operator+
	popax
	localint $7
	localint $8
	localint $9
	localint $10
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1739
	push sorientation
	push "down"
	cmpje
	jmp l1740
l1738:
	push 0
	jmp l1740
l1739:
	push 1
l1740:
	cmp0
	je l1741
	push 0
	pop bvertical
	push $5
	pop ilenx
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1743
	push borx1
	push bory2
	call anupstd,geth
	pop $b
	popax
	sub $a,$b
	call anupstd,setpos
	push borx1
	push bory2
	call anupact,geth
	pop $b
	popax
	sub $a,$b
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call andownstd,getey
	pop $7
	jmp l1742
l1743:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownact,setpos
	push bory1
	pop $7
l1742:
	call anupstd,getex
	push iodleg
	pop $b
	popax
	add $a,$b
	pop ibx1
	call andownstd,getpx
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop ibx2
	push ibx1
	pop $8
	jmp l1737
l1741:
	push 1
	pop bvertical
	push $5
	pop ileny
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1745
	push borx2
	call anupstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupstd,setpos
	push borx2
	call anupact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call anupstd,getex
	pop $8
	jmp l1744
l1745:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx1
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx1
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	push borx1
	pop $8
l1744:
	call anupstd,getey
	push iodleg
	pop $b
	popax
	add $a,$b
	pop iby1
	call andownstd,getpy
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop iby2
	push iby1
	pop $7
l1737:
	cthis getname
	push "up"
	call butup,_rewbuildbut
	cthis getname
	push "down"
	call butdown,_rewbuildbut
	localint $11
	push $6
	spushs
	spop $a
	call [$a],size
	pop $11
	push $6
	spushs
	push $8
	push $7
	spop $a
	call [$a],_setpos
	new int,ilimx
	push $8
	pop ilimx
	new int,ilimy
	push $7
	pop ilimy
	localstring $12
	localint $13
	push 0
	pop $13
l1746:
	push $13
	push $11
	cmpjl
	cmp0
	je l1747
	jmp l1749
l1748:
	add $13,1
	pop $13
	jmp l1746
l1749:
	push sgr
	spushs
	push $13
	spop $a
	call [$a],get
	pop $12
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1751
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1750
l1751:
	push sorientation
	push "left"
	cmpje
	cmp0
	je l1753
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1752
l1753:
	push sorientation
	push "up"
	cmpje
	cmp0
	je l1755
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	jmp l1754
l1755:
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1757
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
l1757:
l1754:
l1752:
l1750:
	push $12
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	jmp l1748
l1747:
	end method
	method _rewbuildbut
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sob
	push $1
	pop _sob
	new string,_sdir
	push $2
	push "up"
	cmpje
	cmp0
	je l1759
	push bvertical
	push 0
	cmpje
	cmp0
	je l1761
	push "left"
	pop _sdir
	jmp l1760
l1761:
	push "up"
	pop _sdir
l1760:
	jmp l1758
l1759:
	push $2
	push "down"
	cmpje
	cmp0
	je l1763
	push bvertical
	push 0
	cmpje
	cmp0
	je l1765
	push "right"
	pop _sdir
	jmp l1764
l1765:
	push "down"
	pop _sdir
l1764:
l1763:
l1758:
	end method
	method _rewbutmoveon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _rewbutclick
	push _sdir
	cthis mstrzalkaon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method mstrzalkaon
	localstring $1
	pop $1
	push $1
	pop sarrowdir
	call timtick,play
	end method
	method _rewbutrel
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	end method
	method _rewstrzalkaoff
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method timfin
	cthis getlock
	cmp0
	je l1767
	ret
l1767:
	localint $1
	push 0
	pop $1
	push sarrowdir
	push "null"
	cmpjne
	cmp0
	je l1769
	push sgr
	spushs
	spop $a
	call [$a],empty
	neg
	jmp l1771
l1769:
	push 0
	jmp l1771
l1770:
	push 1
l1771:
	cmp0
	je l1772
	push sarrowdir
	push "up"
	cmpje
	cmp0
	je l1774
	push sgr
	spushs
	spop $a
	call [$a],getey
	call andownstd,getpy
	push ileny
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1776
	push sgr
	spushs
	push 0
	push ileny
	popax
	sub 0,$a
	spop $a
	call [$a],move
	push 1
	pop $1
l1776:
	jmp l1773
l1774:
	push sarrowdir
	push "down"
	cmpje
	cmp0
	je l1778
	push sgr
	spushs
	spop $a
	call [$a],getpy
	push ilimy
	cmpjl
	cmp0
	je l1780
	push sgr
	spushs
	push 0
	push ileny
	spop $a
	call [$a],move
	push 1
	pop $1
l1780:
	jmp l1777
l1778:
	push sarrowdir
	push "left"
	cmpje
	cmp0
	je l1782
	push sgr
	spushs
	spop $a
	call [$a],getex
	call andownstd,getpx
	push ilenx
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1784
	push sgr
	spushs
	push ilenx
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1784:
	jmp l1781
l1782:
	push sarrowdir
	push "right"
	cmpje
	cmp0
	je l1786
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push ilimx
	cmpjl
	cmp0
	je l1788
	push sgr
	spushs
	push ilenx
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1788:
l1786:
l1781:
l1777:
l1773:
l1772:
	push $1
	cmp0
	je l1790
	call fxrew,isplaying
	neg
	cmp0
	je l1792
	call fxrew,play
l1792:
	jmp l1789
l1790:
	push 0
	call fxrew,stop
l1789:
	cthis play
	end method
	end class

	class ConRewinder
	parent Rewinder
	parent ObjController
	method init
	clparent Rewinder,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	clparent Rewinder,getitem
	call cldt,take
	end method
	method _put
	call cldt,ret
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmousemove
	cthis moveitem
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1794
	ret
l1794:
	call cldt,isonrel
	cmp0
	je l1796
	cthis _put
l1796:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1798
	ret
l1798:
	call cldt,isonclick
	cmp0
	je l1800
	cthis _put
	jmp l1799
l1800:
	call cldt,istaken
	neg
	cmp0
	je l1802
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1802:
l1799:
	end method
	end class

	class Button
	parent LObjController
	method init
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	push A
	push "sobject"
	push "null"
	push "sclicked"
	push "null"
	push "bcheck2klik"
	push 0
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	end method
	method sort
	call grbuts,sortimgs
	end method
	method addgroups
	call grbuts,addgroups
	call grbuts,sortimgs
	end method
	method addgroup
	localstring $1
	pop $1
	push $1
	call grbuts,addgr
	call grbuts,sortimgs
	end method
	method addlist
	call grbuts,addlist
	call grbuts,sortimgs
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grbuts,add
	call grbuts,sortimgs
	end method
	method addlocker
	localstring $1
	pop $1
	push $1
	cthis add
	push $1
	clparent classlocker,setaslocker
	end method
	method removebutlist
	push "removebut"
	cthis withlist
	end method
	method removebut
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	push $1
	push sobject
	cmpje
	cmp0
	je l1804
	push "null"
	pop sobject
l1804:
	push $1
	push sclicked
	cmpje
	cmp0
	je l1806
	push "null"
	pop sclicked
l1806:
	end method
	method load
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push "gmimgvec"
	push $1
	spop $a
	call [$a],varnew
	push $1
	push $2
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],each
	push $1
	cthis addgroup
	end method
	method remove
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	cmp0
	je l1808
	push $1
	call grbuts,removegr
l1808:
	end method
	method loadfrom
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	cthis getgraphpath
	pop $5
	push $2
	cthis setgraphpath
	push $1
	push $3
	push $4
	cthis load
	push $5
	cthis setgraphpath
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1810
	ret
l1810:
	cthis checktouchpad
	cmp0
	je l1812
	push bcheck2klik
	jmp l1814
l1812:
	push 0
	jmp l1814
l1813:
	push 1
l1814:
	cmp0
	je l1815
	push ipadclick
	cmp0
	je l1817
	localdef $1
	push sobject
	pop $1
	push $1
	push sobject
	cmpje
	cmp0
	je l1819
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l1818
l1819:
	push sobject
	push "null"
	cmpje
	cmp0
	je l1821
	push 0
	pop ipadclick
l1821:
l1818:
	jmp l1816
l1817:
	push 1
	pop ipadclick
l1816:
	jmp l1811
l1815:
	cthis _butmouselclick
l1811:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1823
	ret
l1823:
	cthis checktouchpad
	cmp0
	je l1825
	cthis lastoff
l1825:
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1827
	push sclicked
	spushs
	push "butlrel"
	spop $a
	call [$a],hasaddedmet
	jmp l1829
l1827:
	push 0
	jmp l1829
l1828:
	push 1
l1829:
	cmp0
	je l1830
	push sclicked
	spushs
	spop $a
	call [$a],butlrel
	jmp l1826
l1830:
	push "null"
	pop sclicked
l1826:
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1832
	ret
l1832:
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1834
	push sclicked
	spushs
	push "butmoving"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1836
	push sclicked
	spushs
	spop $a
	call [$a],butmoving
l1836:
l1834:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push "isbutin"
	call grbuts,isinfunc
	cmp0
	je l1838
	localdef $3
	call grbuts,getsfound
	pop $3
	push $3
	push sobject
	cmpjne
	cmp0
	je l1840
	cthis lastoff
	push $3
	pop sobject
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $3
	spushs
	push "butmoveon"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1842
	push $3
	spushs
	spop $a
	call [$a],butmoveon
l1842:
l1840:
	jmp l1837
l1838:
	cthis lastoff
l1837:
	end method
	method lastoff
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1844
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	spushs
	push "butmoveoff"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1846
	push sobject
	spushs
	spop $a
	call [$a],butmoveoff
l1846:
	push "null"
	pop sobject
l1844:
	end method
	end class

	method Button_isin
	push "isbutin"
	push "global5"
	cthis addmethod
	end method
	method global5
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 0
	cthis isin
	end method
	method Button_isinvis
	push "isbutin"
	push "global6"
	cthis addmethod
	end method
	method global6
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method Button_isinalpha
	push "isbutin"
	push "global7"
	cthis addmethod
	end method
	method global7
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	end method
	method Button_isinvisalpha
	push "isbutin"
	push "global8"
	cthis addmethod
	end method
	method global8
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 1
	cthis isin
	end method
	method Button_moveon
	push "butmoveon"
	push "global9"
	cthis addmethod
	end method
	method global9
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l1848
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l1848:
	end method
	method Button_moveonplay
	push "butmoveon"
	push "global10"
	cthis addmethod
	end method
	method global10
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l1850
	push 1
	popax
	sub 0,$a
	cthis play
l1850:
	end method
	method Button_moveoff
	push "butmoveoff"
	push "global11"
	cthis addmethod
	end method
	method global11
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method Button_moveonms
	push "butmoveon"
	push "global12"
	cthis addmethod
	end method
	method global12
	call advmouse,setbut
	end method
	method Button_moveoffms
	push "butmoveoff"
	push "global13"
	cthis addmethod
	end method
	method global13
	call advmouse,setstd
	end method
	method Button_std
	cthis Button_isin
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdalpha
	cthis Button_isinalpha
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdms
	cthis Button_isinalpha
	cthis Button_moveonms
	cthis Button_moveoffms
	end method
	class Buttons
	parent LObjController
	method init
	localstring $1
	pop $1
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	new int,__id
	push 0
	pop __id
	new string,sanbut
	push "anbut"
	pop sanbut
	push sanbut
	push $1
	push 10
	cthis newanima
	push sanbut
	push sanbut
	push "grbuts"
	cthis newanactionsgr
	popax
	call anbut,hide
	push 10
	call grbuts,setz
	push "Buttons0"
	call grbuts,removeif
	new string,slastb
	push "null"
	pop slastb
	push A
	push "sobject"
	push "null"
	push "bvisible"
	push 1
	push "balpha"
	push 1
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	push "bcheck2klik"
	push 0
	cthis var2
	end method
	method Buttons0
	cthis actionname
	push "bkg"
	cmpje
	cmp0
	je l1852
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setz
	push 1
	jmp l1851
l1852:
	push 0
l1851:
	end method
	method _release
	cthis checktouchpad
	cmp0
	je l1854
	push 0
	pop ipadclick
l1854:
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],setframe
	cthis copyobj
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "null"
	pop slastb
	call advmouse,setstd
	end method
	method getbut
	call grbuts,getsfound
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1856
	ret
l1856:
	push 1
	popax
	sub 0,$a
	push 0
	call grbuts,setframe
	localdef $1
	call mouse,getpos
	push bvisible
	push balpha
	call grbuts,isin
	pop $1
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1858
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
l1858:
	push $1
	cmp0
	je l1860
	localstring $2
	call grbuts,getsfound
	pop $2
	push $2
	push slastb
	cmpjne
	cmp0
	je l1862
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1864
	cthis _release
l1864:
	push $2
	pop slastb
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	cthis copyobj
	call advmouse,setact
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1862:
	jmp l1859
l1860:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1866
	cthis _release
l1866:
l1859:
	end method
	method copyobj
	push slastb
	spushs
	spop $a
	call [$a],actionname
	pop sobject
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1868
	ret
l1868:
	cthis checktouchpad
	cmp0
	je l1870
	push bcheck2klik
	jmp l1872
l1870:
	push 0
	jmp l1872
l1871:
	push 1
l1872:
	cmp0
	je l1873
	push ipadclick
	cmp0
	je l1875
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l1874
l1875:
	push 1
	pop ipadclick
	cthis onmousemove
l1874:
	jmp l1869
l1873:
	cthis _butmouselclick
l1869:
	end method
	method _butmouselclick
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1877
	cthis copyobj
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1877:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1879
	ret
l1879:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1881
	cthis copyobj
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1881:
	end method
	method disable
	cthis lock
	call grbuts,hide
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1883
	call advmouse,setstd
	push "null"
	pop slastb
l1883:
	end method
	method enable
	cthis unlock
	call grbuts,show
	end method
	end class

	class TextDb
	parent classlocker
	parent ObjController
	parent gfxObject
	method init
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	clparent ObjController,init
	new string,sFont
	push $1
	pop sFont
	new string,sFontBold
	push "null"
	pop sFontBold
	new string,sFontItalic
	push "null"
	pop sFontItalic
	new string,sFontBoldItalic
	push "null"
	pop sFontBoldItalic
	new int,bhtml
	push 0
	pop bhtml
	localstring $12
	localint $13
	localint $14
	push "$"
	call $1,contains
	cmp0
	je l1885
	push 1
	pop bhtml
	new vector,vfont
	push "string"
	call vfont,type
	push $1
	push "$"
	call vfont,vecbuildfromstring
	push 0
	pop $14
l1886:
	push $14
	call vfont,size
	cmpjl
	cmp0
	je l1887
	jmp l1889
l1888:
	add $14,1
	pop $14
	jmp l1886
l1889:
	push $14
	call vfont,get
	pop $12
	push "_italic"
	call $12,contains
	cmp0
	je l1891
	push "_bold"
	call $12,contains
	jmp l1893
l1891:
	push 0
	jmp l1893
l1892:
	push 1
l1893:
	cmp0
	je l1894
	push $12
	pop sFontBoldItalic
	jmp l1890
l1894:
	push "_italic"
	call $12,contains
	cmp0
	je l1896
	push $12
	pop sFontItalic
	jmp l1895
l1896:
	push "_bold"
	call $12,contains
	cmp0
	je l1898
	push $12
	pop sFontBold
	jmp l1897
l1898:
	push $12
	pop sFont
l1897:
l1895:
l1890:
	jmp l1888
l1887:
	push "$"
	call sFont,contains
	cmp0
	je l1900
	push sFontItalic
	push "null"
	cmpjne
	cmp0
	je l1902
	push sFontItalic
	pop sFont
	jmp l1901
l1902:
	push sFontBold
	push "null"
	cmpjne
	cmp0
	je l1904
	push sFontBold
	pop sFont
	jmp l1903
l1904:
	push sFontBoldItalic
	pop sFont
l1903:
l1901:
l1900:
	push sFont
	pop $1
	jmp l1884
l1885:
	push $1
	push $2
	cthis checkfont
	pop $1
l1884:
	new int,iFontSize
	push $2
	pop iFontSize
	push "Z"
	push $10
	cthis var2
	localstring $15
	push "null"
	pop $15
	push ":"
	call $3,contains
	cmp0
	je l1906
	push ":"
	call $3,strgetto
	push ":"
	pop $b
	popax
	add $a,$b
	pop $15
l1906:
	push ".db"
	call $3,contains
	cmp0
	je l1908
	push $15
	push "$path:"
	cmpje
	cmp0
	je l1910
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,load
	jmp l1909
l1910:
	push "dbtxt"
	push $3
	cthis newdb
l1909:
	jmp l1907
l1908:
	push $15
	spushs
	push "$lang:"
	cmpst
	jne l1912
	spop $a
	push "dbtxt"
	push $15
	call $3,strsubbs
	cthis lang_db
	jmp l1911
l1912:
	push "$var:"
	cmpst
	jne l1913
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,dbcopy
	jmp l1911
l1913:
	push "$row:"
	cmpst
	jne l1914
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	spushs
	push ","
	spop $h
	call $h,strgetto
	pop $12
	push ","
	call $3,strgetfrom
	pop $13
	push 0
	pop $14
l1915:
	push $14
	push $12
	spushs
	push $13
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1916
	jmp l1918
l1917:
	add $14,1
	pop $14
	jmp l1915
l1918:
	call dbtxt,addrow
	popax
	push $14
	push $12
	spushs
	push $13
	push $14
	spop $a
	call [$a],get
	call dbtxt,add
	jmp l1917
l1916:
	jmp l1911
l1914:
	spop $a
	new db,dbtxt
	push $3
	call dbtxt,dbaddlast
l1911:
l1907:
	localint $16
	push 0
	pop $16
	localint $17
	call dbtxt,getrowsno
	pop $17
	push 0
	push 5
	call $11,getb
	push "limit"
	cmpje
	cmp0
	je l1920
	localint $18
	push "limit_"
	call $11,strsubbs
	pop $18
	new vector,vtmp
	push "string"
	call vtmp,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	localint $14
	push 0
	pop $14
l1921:
	push $14
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l1922
	jmp l1924
l1923:
	add $14,1
	pop $14
	jmp l1921
l1924:
	push $14
	push 0
	call dbtxt,get
	push " "
	call vtmp,vecbuildfromstring
	localint $19
	push 0
	pop $19
l1925:
	push $19
	call vtmp,size
	cmpjl
	cmp0
	je l1926
	jmp l1928
l1927:
	add $19,1
	pop $19
	jmp l1925
l1928:
	push $19
	call vtmp,get
	call vtmp2,add
	jmp l1927
l1926:
	jmp l1923
l1922:
	call dbtxt,free
	localstring $12
	push ""
	pop $12
	localstring $20
	push 0
	pop $14
l1929:
	push $14
	call vtmp2,size
	cmpjl
	cmp0
	je l1930
	jmp l1932
l1931:
	add $14,1
	pop $14
	jmp l1929
l1932:
	push $14
	call vtmp2,get
	pop $20
	push $12
	push $20
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,length
	push $18
	cmpjl
	cmp0
	je l1934
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	jmp l1933
l1934:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	pop $12
l1933:
	jmp l1931
l1930:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	call dbtxt,getrowsno
	pop $17
l1920:
	new gmimgvec,grtxt
	push $7
	push $8
	call grtxt,_setpos
	push 0
	pop $14
l1935:
	push $14
	push $17
	cmpjl
	cmp0
	je l1936
	jmp l1938
l1937:
	add $14,1
	pop $14
	jmp l1935
l1938:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	spop $e
	new text,[$e]
	localdef $21
	push $14
	push 0
	call dbtxt,get
	pop $21
	push bhtml
	cmp0
	je l1940
	push "<b>"
	call $21,contains
	cmp0
	je l1942
	push sFontBold
	pop $1
	push "<b>"
	call $21,strremove
	jmp l1941
l1942:
	push "<bi>"
	call $21,contains
	cmp0
	je l1944
	push sFontBoldItalic
	pop $1
	push "<bi>"
	call $21,strremove
	jmp l1943
l1944:
	push "<i>"
	call $21,contains
	cmp0
	je l1946
	push sFontItalic
	pop $1
	push "<i>"
	call $21,strremove
	jmp l1945
l1946:
	push sFont
	pop $1
l1945:
l1943:
l1941:
l1940:
	push $12
	spushs
	push $1
	spop $a
	call [$a],setfont
	push $12
	spushs
	push $21
	spop $a
	call [$a],set
	push $12
	spushs
	push $7
	push $8
	spop $a
	call [$a],setpos
	push $2
	push $9
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	push $12
	spushs
	push $10
	spop $a
	call [$a],setz
	push $12
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	push $12
	spushs
	spop $a
	call [$a],getw
	push $16
	cmpja
	cmp0
	je l1948
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $16
l1948:
	push $12
	call grtxt,add
	jmp l1937
l1936:
	push "Rows"
	push $17
	cthis var2
	push $11
	push "right"
	cmpje
	cmp0
	jne l1951
	push $11
	push "center"
	cmpje
	jmp l1952
l1950:
	push 0
	jmp l1952
l1951:
	push 1
l1952:
	cmp0
	je l1953
	push 0
	pop $14
l1954:
	push $14
	push $17
	cmpjl
	cmp0
	je l1955
	jmp l1957
l1956:
	add $14,1
	pop $14
	jmp l1954
l1957:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $11
	push "center"
	cmpje
	cmp0
	je l1959
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	spop $a
	call [$a],move
	jmp l1958
l1959:
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l1958:
	jmp l1956
l1955:
l1953:
	push "W"
	push $16
	cthis var2
	push "grtxt"
	clparent gfxObject,init
	end method
	method stdshadow
	localint $1
	pop $1
	push 0
	push 0
	push 0
	push $1
	cthis setshadow
	end method
	method setshadow
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	push sFont
	push iFontSize
	push "_fntbrd"
	cthis _checkfont
	pop $7
	localint $8
	push 0
	pop $8
l1960:
	push $8
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l1961
	jmp l1963
l1962:
	add $8,1
	pop $8
	jmp l1960
l1963:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "txts"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new text,[$e]
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],set
	push $6
	spushs
	push $7
	spop $a
	call [$a],setfont
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $4
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	push $6
	call grtxt,add
	jmp l1962
l1961:
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtxt,setz
	end method
	method getz
	push Z
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call grtxt,isin
	end method
	method view
	localdef $1
	pop $1
	localstring $2
l1964:
	push A
	push $1
	cmpjne
	cmp0
	je l1965
	push $1
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push "txts"
	push "txt"
	call $2,strsubbs
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l1967
	push $2
	spushs
	spop $a
	call [$a],show
l1967:
	localdef $1
	pop $1
	jmp l1964
l1965:
	end method
	method blitto
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l1968:
	push $3
	call grtxt,size
	cmpjl
	cmp0
	je l1969
	jmp l1971
l1970:
	add $3,1
	pop $3
	jmp l1968
l1971:
	push $3
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],buildfullname
	push $1
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],blit
	push GAME
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardel
	jmp l1970
l1969:
	end method
	method setcol
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1972:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l1973
	jmp l1975
l1974:
	add $4,1
	pop $4
	jmp l1972
l1975:
	push $4
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	jmp l1974
l1973:
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l1976:
	push $5
	call grtxt,size
	cmpjl
	cmp0
	je l1977
	jmp l1979
l1978:
	add $5,1
	pop $5
	jmp l1976
l1979:
	push $5
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l1978
l1977:
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	call grtxt,getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	localdef $4
	push $2
	call grtxt,getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	call grtxt,move
	end method
	end class

	class Lexer
	method init
	end method
	method buildlex
	push A
	push "id"
	push "found"
	cthis vars
	new vector,vconsts
	push "string"
	call vconsts,type
	new vector,vtmp1
	push "string"
	call vtmp1,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	new int,dot
	push "."
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop dot
	new string,_literal_char
	push "\""
	pop _literal_char
	end method
	method setliteralchar
	localstring $1
	pop $1
	push $1
	pop _literal_char
	end method
	method getliteralchar
	push _literal_char
	end method
	method _isvar
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push id
	pop $3
	push ""
	pop found
	localint $4
l1980:
	push $3
	cthis length
	cmpjl
	cmp0
	je l1981
	push $3
	cthis getbyte
	pop $4
	push $4
	push $1
	cmpjae
	cmp0
	je l1983
	push $4
	push $2
	cmpjle
	jmp l1985
l1983:
	push 0
	jmp l1985
l1984:
	push 1
l1985:
	cmp0
	je l1986
	push $3
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $3,1
	pop $3
	jmp l1982
l1986:
	push $4
	push BYTEa
	cmpjae
	cmp0
	je l1988
	push $4
	push BYTEz
	cmpjle
	jmp l1990
l1988:
	push 0
	jmp l1990
l1989:
	push 1
l1990:
	cmp0
	jne l1992
	push $4
	push BYTEA
	cmpjae
	cmp0
	je l1993
	push $4
	push BYTEZ
	cmpjle
	jmp l1995
l1993:
	push 0
	jmp l1995
l1994:
	push 1
l1995:
	cmp0
	jne l1992
	push $4
	push BYTE_
	cmpje
	jmp l1996
l1991:
	push 0
	jmp l1996
l1992:
	push 1
l1996:
	cmp0
	je l1997
	push ""
	pop found
l1997:
	cthis length
	pop $3
l1982:
	jmp l1980
l1981:
	call found,length
	end method
	method isreal
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
	localint $3
	push 1
	pop $3
l1998:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1999
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l2001
	push $2
	push BYTE9
	cmpjle
	jmp l2003
l2001:
	push 0
	jmp l2003
l2002:
	push 1
l2003:
	cmp0
	jne l2005
	push $2
	push dot
	cmpje
	cmp0
	je l2006
	push $3
	jmp l2008
l2006:
	push 0
	jmp l2008
l2007:
	push 1
l2008:
	jmp l2009
l2004:
	push 0
	jmp l2009
l2005:
	push 1
l2009:
	cmp0
	je l2010
	push $2
	push dot
	cmpje
	cmp0
	je l2012
	push 0
	pop $3
l2012:
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l2000
l2010:
	cthis length
	pop $1
l2000:
	jmp l1998
l1999:
	push $3
	cmp0
	jne l2015
	push 0
	push 1
	call found,getb
	push "."
	cmpje
	cmp0
	jne l2015
	push 0
	push 1
	call found,gete
	push "."
	cmpje
	jmp l2016
l2014:
	push 0
	jmp l2016
l2015:
	push 1
l2016:
	cmp0
	je l2017
	push ""
	pop found
l2017:
	call found,length
	end method
	method isident
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
l2018:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2019
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTEa
	cmpjae
	cmp0
	je l2021
	push $2
	push BYTEz
	cmpjle
	jmp l2023
l2021:
	push 0
	jmp l2023
l2022:
	push 1
l2023:
	cmp0
	jne l2025
	push $2
	push BYTEA
	cmpjae
	cmp0
	je l2026
	push $2
	push BYTEZ
	cmpjle
	jmp l2028
l2026:
	push 0
	jmp l2028
l2027:
	push 1
l2028:
	cmp0
	jne l2025
	push $2
	push BYTE_
	cmpje
	cmp0
	jne l2025
	push $1
	push id
	cmpja
	cmp0
	je l2029
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l2029
	push $2
	push BYTE9
	cmpjle
	jmp l2031
l2029:
	push 0
	jmp l2031
l2030:
	push 1
l2031:
	jmp l2032
l2024:
	push 0
	jmp l2032
l2025:
	push 1
l2032:
	cmp0
	je l2033
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l2020
l2033:
	cthis length
	pop $1
l2020:
	jmp l2018
l2019:
	call found,length
	end method
	method isliteral
	cthis check
	cthis getliteralchar
	cmpjne
	cmp0
	je l2035
	push 0
	ret
l2035:
	localint $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop found
	localstring $2
l2036:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2037
	push $1
	push 1
	cthis getb
	pop $2
	push $2
	cthis getliteralchar
	cmpje
	cmp0
	je l2039
	push 1
	ret
	jmp l2038
l2039:
	push $2
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
l2038:
	jmp l2036
l2037:
	push 0
	end method
	method isconst
	localstring $1
	localint $2
	cthis isident
	pop $2
	localint $3
	push 0
	pop $3
l2040:
	push $3
	call vconsts,size
	cmpjl
	cmp0
	je l2041
	jmp l2043
l2042:
	add $3,1
	pop $3
	jmp l2040
l2043:
	push $3
	call vconsts,get
	pop $1
	push $2
	cmp0
	je l2045
	push $1
	push found
	cmpje
	cmp0
	je l2047
	push 1
	ret
l2047:
	jmp l2044
l2045:
	push id
	call $1,length
	cthis getb
	pop found
	push $1
	push found
	cmpje
	cmp0
	je l2049
	push 1
	ret
l2049:
l2044:
	jmp l2042
l2041:
	push 0
	end method
	method gettoken
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
l2050:
	cthis notend
	cmp0
	je l2051
	cthis check
	push " "
	cmpje
	cmp0
	je l2053
	add id,1
	pop id
	jmp l2052
l2053:
	cthis isconst
	cmp0
	je l2055
	push $1
	spushs
	push "$const"
	spop $a
	call [$a],add
	push $1
	spushs
	cthis read
	spop $a
	call [$a],add
	jmp l2054
l2055:
	cthis isreal
	cmp0
	je l2057
	push $1
	spushs
	push "$real"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2059
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2059:
	jmp l2056
l2057:
	cthis isint
	cmp0
	je l2061
	push $1
	spushs
	push "$int"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2063
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2063:
	jmp l2060
l2061:
	cthis isident
	cmp0
	je l2065
	push $1
	spushs
	push "$alpha"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2067
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2067:
	jmp l2064
l2065:
	cthis isliteral
	cmp0
	je l2069
	push $1
	spushs
	push "$literal"
	spop $a
	call [$a],add
	cthis next
	push 2
	popax
	add id,$a
	pop id
	push $2
	cmp0
	je l2071
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2071:
	jmp l2068
l2069:
	push $1
	spushs
	push "$error"
	spop $a
	call [$a],add
	add id,1
	pop id
l2068:
l2064:
l2060:
l2056:
l2054:
l2052:
	jmp l2050
l2051:
	end method
	method expectdb
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	localstring $4
	localint $5
	push 0
	pop $5
l2072:
	push $5
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l2073
	jmp l2075
l2074:
	add $5,1
	pop $5
	jmp l2072
l2075:
	call vtmp2,free
	push 0
	pop $3
l2076:
	push $3
	push $1
	spushs
	push $5
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2077
	jmp l2079
l2078:
	add $3,1
	pop $3
	jmp l2076
l2079:
	push $1
	spushs
	push $5
	push $3
	spop $a
	call [$a],get
	pop $4
	call $4,clear
	push $4
	push ""
	cmpjne
	cmp0
	je l2081
	push $4
	call vtmp2,add
l2081:
	jmp l2078
l2077:
	push "vtmp2"
	push $2
	cthis expectvec
	cmp0
	je l2083
	push $5
	ret
l2083:
	jmp l2074
l2073:
	push 1
	popax
	sub 0,$a
	end method
	method expectvec
	localstring $1
	localint $2
	pop $2
	pop $1
	push 0
	pop id
	push "vtmp1"
	push $2
	cthis gettoken
	push $1
	call vtmp1,veceq
	end method
	method expects
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call vtmp2,vecbuildfromstring
	push "vtmp2"
	push $3
	cthis expectvec
	end method
	method consts=
	push "addbegin"
	call vconsts,withlist
	end method
	method setas
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlex"
	push "buildlex"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlex
	push $1
	spushs
	push "start"
	push "Lexer0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "notend"
	push "Lexer1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getnext"
	push "Lexer2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "next"
	push "Lexer3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "check"
	push "Lexer4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "ischar"
	push "Lexer5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isint"
	push "Lexer6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isreal"
	push "isreal"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbinary"
	push "Lexer7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isident"
	push "isident"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isconst"
	push "isconst"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "_isvar"
	push "_isvar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "read"
	push "Lexer8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isliteral"
	push "isliteral"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettoken"
	push "gettoken"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expects"
	push "expects"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectvec"
	push "expectvec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectdb"
	push "expectdb"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "consts="
	push "consts="
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setliteralchar"
	push "setliteralchar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getliteralchar"
	push "getliteralchar"
	spop $a
	call [$a],addmethod
	end method
	method Lexer0
	localstring $1
	pop $1
	push $1
	cthis set
	push 0
	pop id
	end method
	method Lexer1
	push id
	cthis length
	cmpjl
	end method
	method Lexer2
	push id
	cthis length
	cmpje
	cmp0
	je l2085
	push "null"
	ret
l2085:
	add id,1
	pop id
	push id
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	cthis getb
	end method
	method Lexer3
	call found,length
	popax
	add id,$a
	pop id
	end method
	method Lexer4
	push id
	cthis length
	cmpje
	cmp0
	je l2087
	push "null"
	ret
l2087:
	push id
	push 1
	cthis getb
	pop found
	push found
	end method
	method Lexer5
	localstring $1
	pop $1
	push id
	push 1
	cthis getb
	call $1,contains
	end method
	method Lexer6
	push BYTE0
	push BYTE9
	cthis _isvar
	end method
	method Lexer7
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis _isvar
	end method
	method Lexer8
	cthis next
	push found
	end method
	end class

	class Localize
	method init
	end method
	method _lang_db
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push "load"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	cthis lang_path
	push ".db"
	pop $b
	popax
	add $a,$b
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method lang_db
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push ""
	cthis _lang_db
	end method
	method lang_dbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "script"
	cthis _lang_db
	end method
	method lang_dbbeh
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "beh"
	cthis _lang_db
	end method
	method lang_path
	localstring $1
	pop $1
	push LANGDIR
	call gameapi,getgamename
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	end method
	end class

	class PyzCounter
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	new int,istart
	new int,istop
	new int,istep
	new int,idigits
	push 50
	pop idigits
	new int,iactual
	new string,_sanima
	push $1
	pop _sanima
	push A
	push "idx"
	push 2
	push "itimestep"
	push $2
	cthis vars2
	new gmimgvec,grcnt
	localint $3
	push 0
	pop $3
l2088:
	push $3
	push idigits
	cmpjl
	cmp0
	je l2089
	jmp l2091
l2090:
	add $3,1
	pop $3
	jmp l2088
l2091:
	localstring $4
	push "pcc"
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $1
	push $4
	cthis copyanima
	push $4
	spushs
	spop $a
	call [$a],hide
	push $4
	call grcnt,add
	jmp l2090
l2089:
	push "timcnt"
	push $2
	push "PyzCounter0"
	cthis timer=
	end method
	method PyzCounter0
	push istep
	popax
	add iactual,$a
	pop iactual
	push iactual
	cthis view
	push iactual
	push istop
	cmpje
	cmp0
	je l2093
	cthis getbuildername
	spushs
	cthis getbuildername
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2092
l2093:
	cthis play
l2092:
	end method
	method getcypher
	localint $1
	pop $1
	push "pcc"
	push _sanima
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method start
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop istart
	push $2
	pop istop
	push $3
	pop istep
	push istart
	pop iactual
	push istart
	cthis view
	call timcnt,play
	end method
	method showcypher
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis getcypher
	pop $3
	push $3
	spushs
	push 0
	push $2
	spop $a
	call [$a],setframe
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method stop
	push 0
	call timcnt,stop
	end method
	method view
	localint $1
	pop $1
	call grcnt,hide
	push 0
	push 0
	call grcnt,setpos
	push $1
	push 0
	cmpje
	cmp0
	je l2095
	push 0
	push 0
	cthis showcypher
	jmp l2094
l2095:
	localint $2
	push 0
	pop $2
l2096:
	push $1
	push 0
	cmpja
	cmp0
	je l2097
	jmp l2099
l2098:
	add $2,1
	pop $2
	jmp l2096
l2099:
	push $2
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	push $d
	cthis showcypher
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	jmp l2098
l2097:
	localint $3
	push 0
	pop $3
	localint $4
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l2100:
	push $4
	push 0
	cmpjae
	cmp0
	je l2101
	jmp l2103
l2102:
	sub $4,1
	pop $4
	jmp l2100
l2103:
	push $4
	cthis getcypher
	spushs
	push $3
	push 0
	spop $a
	call [$a],move
	push $3
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis getcypher
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l2102
l2101:
l2094:
	end method
	end class

	new int,igmogg
	push 0
	pop igmogg
	new int,igmreklamy
	push "igmreklamy:"
	call dbconf,dbgetint
	pop igmreklamy
	new string,sAskerGame
	class StdGame
	parent classadv
	parent GameController
	parent Localize
	method init
	localstring $1
	pop $1
	push 0
	pop igmstate
	clparent classadv,init
	push $1
	clparent GameController,init
	clparent Localize,init
	push 0
	push 0
	call clbuts,setcursorpos
	push 0
	push 0
	call claskexit,setcursorpos
	push sgmversion
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis path=
	push SNDPATH
	cthis setwavpath
	call clmusic,play
	call clbuts,reset
	call claskexit,reset
	call advmouse,setstd
	new Music,mus
	push igmdemo
	cmp0
	je l2105
	push "imglite"
	push "$scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/lite.png"
	pop $b
	popax
	add $a,$b
	push 105
	cthis newimg
	push iResX
	call imglite,getw
	pop $b
	popax
	sub $a,$b
	push 1
	popax
	sub 0,$a
	call imglite,setpos
l2105:
	new Button,but1
	end method
	method cloadbut
	localstring $1
	pop $1
	push "scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/common/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l2107
	push "$scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/common/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	jmp l2106
l2107:
	push "$scripts/common/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
l2106:
	end method
	method cwideversion
	push A
	push "christmas"
	call sgmversion,in
	end method
	method cbutexit
	cthis cwideversion
	cmp0
	je l2109
	push "anbutexit"
	push "butexit_mac"
	cthis cloadbut
	push 300
	cthis newanima
	jmp l2108
l2109:
	push "anbutexit"
	push "butexit"
	cthis cloadbut
	push 300
	cthis newanima
l2108:
	call anbutexit,Button_std
	push "butclick"
	push "StdGame0"
	call anbutexit,addmethod
	push "anbutexit"
	call but1,add
	end method
	method StdGame0
	push GAME
	spushs
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method cbutmusic
	cthis cwideversion
	cmp0
	je l2111
	push "anbutmusic"
	push "butmuz_mac"
	cthis cloadbut
	push 300
	cthis newanima
	jmp l2110
l2111:
	push igmiphone
	cmp0
	je l2113
	push "anbutmusic"
	push "butmuz_iphone"
	cthis cloadbut
	push 300
	cthis newanima
	jmp l2112
l2113:
	push "anbutmusic"
	push "butmuz"
	cthis cloadbut
	push 300
	cthis newanima
l2112:
l2110:
	push bPlayMusic
	neg
	cmp0
	je l2115
	push 1
	push 0
	call anbutmusic,setframe
	cthis csoundoff
	jmp l2114
l2115:
	cthis csoundon
l2114:
	call anbutmusic,Button_std
	push "butclick"
	push "StdGame1"
	call anbutmusic,addmethod
	push "anbutmusic"
	call but1,add
	end method
	method StdGame1
	localdef $1
	cthis framenr
	pop $1
	push bPlayMusic
	cmp0
	je l2117
	cthis csoundoff
	push 1
	push $1
	cthis setframe
	push GAME
	spushs
	spop $a
	call [$a],stop_music
	jmp l2116
l2117:
	cthis csoundon
	push 0
	push $1
	cthis setframe
	push GAME
	spushs
	spop $a
	call [$a],play_music
l2116:
	end method
	method csoundoff
	push 0
	pop bPlayMusic
	push 0
	call engine,setsndvol
	end method
	method csoundon
	push 1
	pop bPlayMusic
	push 100
	call engine,setsndvol
	end method
	method cutscene
	push 0
	push 0
	push iResX
	push iResY
	new CutScene,ccs
	push 50
	call ccs,delay
	push 2000
	call ccs,setz
	end method
	method gotoadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push $2
	pop sgmgame
	push "gameadvdef"
	call gameapi,play
	end method
	method crect
	push 600
	push 196
	push 403
	push 497
	new Rect,rec
	end method
	method crect2
	push 6
	push 174
	push 1012
	push 530
	new Rect,rec2
	end method
	method cshowbut
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call clbuts,StdGame2
	end method
	method StdGame2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	push "getcx"
	call buts,callimgfun
	push $1
	push "getcy"
	call buts,callimgfun
	push $2
	call clp,show
	end method
	method napisshow
	localint $1
	localint $2
	pop $2
	pop $1
	cthis show
	push $1
	push $2
	cthis move
	end method
	method napispod
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 5
	pop $b
	popax
	add $a,$b
	cthis napisshow
	end method
	method advclick
	push igmdebug
	cmp0
	je l2119
	push igmstate
	push 0
	cmpje
	cmp0
	jne l2122
	push igmstate
	push 5
	cmpje
	jmp l2123
l2121:
	push 0
	jmp l2123
l2122:
	push 1
l2123:
	jmp l2124
l2119:
	push 0
	jmp l2124
l2120:
	push 1
l2124:
	cmp0
	je l2125
	push 1
	cthis cactsndstop
l2125:
	end method
	method key_down
	push igmandroid
	cmp0
	je l2127
	push "F1"
	call keyboard,iskey
	cmp0
	je l2127
	push GAME
	spushs
	push "anbutexit"
	spop $a
	call [$a],hasvar
	jmp l2129
l2127:
	push 0
	jmp l2129
l2128:
	push 1
l2129:
	cmp0
	je l2130
	call anbutexit,butclick
l2130:
	push igmdebug
	cmp0
	je l2132
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l2132
	push "r"
	call keyboard,iskey
	jmp l2134
l2132:
	push 0
	jmp l2134
l2133:
	push 1
l2134:
	cmp0
	je l2135
	cthis crestart
l2135:
	end method
	method askfor
	localdef $1
	pop $1
	push igmstate
	push 111
	cmpjne
	cmp0
	je l2137
	push $1
	pop sAskerGame
	call claskexit,askexittomenu
l2137:
	end method
	method askrestart
	call claskexit,askrestart
	end method
	method onmusicfin
	call mus,play
	end method
	method exit
	cthis game_exit
	push igmsubtitle
	cmp0
	je l2139
	call subtitle,reset
l2139:
	end method
	end class

	new classgamepause,clpause
	new classgamemusic,clmusic
	push "sounds/bgr/"
	call clmusic,sndbgrpath
	push "sounds/music/"
	call clmusic,musicpath
	push "sounds/music.db"
	call clmusic,load
	new snd,sndakskermovon
	push "sounds/sfx/butmovon.wav"
	call sndakskermovon,load
	push 50
	call sndakskermovon,setvol
	class classasker2
	parent classasker
	method init
	clparent classasker,init
	new snd,sndaskexit
	push 0
	push 1
	call sndaskexit,setstartstopflag
	new snd,sndaskexitgame
	push 0
	push 1
	call sndaskexitgame,setstartstopflag
	new snd,sndyes
	push 0
	push 1
	call sndyes,setstartstopflag
	new snd,sndno
	push 0
	push 1
	call sndno,setstartstopflag
	new snd,sndaskrestart
	push 0
	push 1
	call sndaskrestart,setstartstopflag
	new snd,sndaskrestart2
	push 0
	push 1
	call sndaskrestart2,setstartstopflag
	cthis reload
	push "scripts/common/asker.pyz"
	push 12000
	cthis load
	push "sndakskermovon"
	cthis fxonmovon
	end method
	method reload
	push SNDPATH
	cthis setwavpath
	localdef $1
	cthis getsndpath
	pop $1
	push $1
	push "narexit.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexit,load
	push $1
	push "narexitgame.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexitgame,load
	push $1
	push "naryes.wav"
	pop $b
	popax
	add $a,$b
	call sndyes,load
	push $1
	push "narno.wav"
	pop $b
	popax
	add $a,$b
	call sndno,load
	push $1
	push "narrestart.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart,load
	push $1
	push "narrestart.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart2,load
	end method
	method askexittomenu
	push "sndaskexit"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askexitgame
	push "sndaskexitgame"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askrestart
	push "sndaskrestart"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method askrestart2
	push "sndaskrestart2"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method mnotomenu
	end method
	method myestomenu
	push GAME
	spushs
	push "clsave"
	spop $a
	call [$a],hasvar
	cmp0
	je l2141
	call clsave,free
l2141:
	call gameapi,getgamename
	spushs
	push "MenuPuzzle"
	cmpst
	jne l2143
	spop $a
	push "exit"
	jmp l2142
l2143:
	spop $a
	push "MenuPuzzle"
l2142:
	call gameapi,play
	end method
	method mnorestart
	call gameapi,getgamename
	spushs
	push "SubMenu"
	cmpst
	jne l2145
	spop $a
	push "MenuPuzzle"
	jmp l2144
l2145:
	spop $a
	push "MenuPuzzle"
l2144:
	call gameapi,play
	end method
	method myesrestart
	cthis crestart
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call ccs,isplaying
	neg
	cmp0
	je l2147
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent classasker,ask
l2147:
	end method
	end class

	new classasker2,claskexit
	method LANG=
	localdef $1
	pop $1
	push $1
	pop LANG
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l2149
	push ""
	pop LANG
l2149:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l2151
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l2151:
	call claskexit,reload
	end method
	new img,imglobcurs
	module clbuts
	method init
	end method
	method load
	new classbutton,buts
	push "scripts/common/buttons.pyz"
	push 4000
	push "imglobcurs"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call engine,actclassname
	push "butmovoff"
	call buts,transmovofffunc
	call buts,disableall
	new db,dbb
	push "scripts/common/buts.db"
	call dbb,load
	new snd,sndfxglobon
	push "sounds/sfx/globbutmovon.wav"
	call sndfxglobon,load
	push 50
	call sndfxglobon,setvol
	new def,bvisible
	push 1
	pop bvisible
	end method
	method reset
	call buts,disableall
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push $1
	call dbb,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l2153
	localint $3
	push $2
	call dbb,getcolsno
	pop $3
	localint $4
	push 1
	pop $4
l2154:
	push $4
	push $3
	cmpjl
	cmp0
	je l2155
	jmp l2157
l2156:
	add $4,1
	pop $4
	jmp l2154
l2157:
	push $2
	push $4
	call dbb,get
	call buts,enable
	jmp l2156
l2155:
l2153:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	method enable
	localstring $1
	pop $1
	push $1
	call buts,enable
	end method
	method butmovon
	localstring $1
	pop $1
	call sndfxglobon,play
	call mouse,isvisible
	pop bvisible
	call mouse,show
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovoff
	localstring $1
	pop $1
	push bvisible
	neg
	cmp0
	je l2159
	call mouse,hide
l2159:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "pause"
	cmpje
	cmp0
	je l2161
	call clpause,pause
	jmp l2160
l2161:
	push $1
	push "menu"
	cmpje
	cmp0
	je l2163
	call gameapi,getgamename
	spushs
	push "MainMenu"
	cmpst
	jne l2165
	spop $a
	call claskexit,askexitgame
	jmp l2164
l2165:
	spop $a
	call claskexit,askexittomenu
l2164:
	jmp l2162
l2163:
	push $1
	push "restart"
	cmpje
	cmp0
	je l2167
	call claskexit,askrestart
l2167:
l2162:
l2160:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end module

	class classplacepointer2
	parent classplacepointer
	method init
	clparent classplacepointer,init
	push "scripts/common/strzalka.pyz"
	cthis load
	end method
	end class

	call clbuts,load
	new int,igmwindows
	push 0
	pop igmwindows
	new string,sgmversion
	push "sgmversion:"
	call dbconf,dbget
	pop sgmversion
	push "startgame:"
	call dbconf,dbget
	call gameapi,play
	new int,iMenuPuzid
	push 1
	pop iMenuPuzid
	new string,sMenuMode
	push "null"
	pop sMenuMode
	new int,iPuzRow
	new int,iPuzCol
	new string,sPuzzle
	new int,bPlayMusic
	push 1
	pop bPlayMusic
	game MenuPuzzle
	parent StdGame
	method init
	push "menupuz"
	clparent StdGame,init
	cthis getgraphpath
	push "puz.db"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l2169
	push "dbpuz"
	push "puz.db"
	cthis newdb
	new int,ilepuzid
	call dbpuz,getrowsno
	pop ilepuzid
	jmp l2168
l2169:
	push "dbilepuz"
	push "ilepuz.db"
	cthis newdb
	new int,iilepuzzli
	push 0
	push 0
	call dbilepuz,get
	pop iilepuzzli
	new int,ilepuzid
	push iilepuzzli
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop ilepuzid
l2168:
	push A
	push "bgmenu.jpg"
	push "butprev.pyz 20"
	push "butnext.pyz 20"
	cthis imgs=
	push igmmac
	cmp0
	jne l2172
	push igmwindows
	cmp0
	jne l2172
	push igmandroid
	jmp l2173
l2171:
	push 0
	jmp l2173
l2172:
	push 1
l2173:
	cmp0
	je l2174
	cthis cbutexit
l2174:
	call anbutprev,MenuPuzzle0
	call anbutnext,MenuPuzzle2
	push igmiphone
	cmp0
	je l2182
	localdef $1
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call anbutprev,getpx
	call anbutnext,getex
	call anbutprev,getpx
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	call anbutprev,move
	push $1
	push 0
	call anbutnext,move
l2182:
	cthis cbutmusic
	push igmreklamy
	cmp0
	je l2184
	push "anbutexit"
	cthis hasvar
	jmp l2186
l2184:
	push 0
	jmp l2186
l2185:
	push 1
l2186:
	cmp0
	je l2187
	call anbutexit,getpx
	call anbutexit,getey
	push 5
	pop $b
	popax
	add $a,$b
	call anbutmusic,ansetbpos
l2187:
	cthis mstart
	new img,imovon
	call anmenu1,getw
	call anmenu1,geth
	push 255
	push 192
	push 192
	push 64
	call imovon,create
	call imovon,hide
	call but1,onmousemove
	cthis cutscene
	push "mgo"
	call ccs,enter
	push bPlayMusic
	cmp0
	je l2189
	cthis play_music
l2189:
	end method
	method MenuPuzzle0
	cthis Button_std
	push "butclick"
	push "MenuPuzzle1"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle1
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2176
	ret
l2176:
	push iMenuPuzid
	push ilepuzid
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop iMenuPuzid
	push GAME
	spushs
	spop $a
	call [$a],mrestart
	end method
	method MenuPuzzle2
	cthis Button_std
	push "butclick"
	push "MenuPuzzle3"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle3
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2178
	ret
l2178:
	push iMenuPuzid
	push 1
	pop $b
	popax
	sub $a,$b
	pop iMenuPuzid
	push iMenuPuzid
	push 1
	cmpjl
	cmp0
	je l2180
	push ilepuzid
	pop iMenuPuzid
l2180:
	push GAME
	spushs
	spop $a
	call [$a],mrestart
	end method
	method mgo
	push 1
	pop igmstate
	end method
	method play_music
	push igmogg
	cmp0
	je l2191
	push sgmversion
	push "_puzzle.ogg -v 50 -l"
	pop $b
	popax
	add $a,$b
	call mus,playstr
l2191:
	end method
	method stop_music
	push 1000
	call mus,fadeout
	end method
	method mrestart
	cthis mdel
	cthis mstart
	end method
	method mdel
	localint $1
	push 1
	pop $1
l2192:
	push $1
	push 4
	cmpjle
	cmp0
	je l2193
	jmp l2195
l2194:
	add $1,1
	pop $1
	jmp l2192
l2195:
	localdef $2
	push "anmenu"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push "ft"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],unlink
	push "ft"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	push $2
	call but1,removebut
	push $2
	spushs
	spop $d
	delete [$d]
	push "im"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	jmp l2194
l2193:
	end method
	method mstart
	push GAME
	spushs
	push "dbpuz"
	spop $a
	call [$a],hasvar
	cmp0
	je l2197
	localdef $1
	push iMenuPuzid
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	call dbpuz,get
	push $1
	push 1
	call dbpuz,get
	push $1
	push 2
	call dbpuz,get
	push $1
	push 3
	call dbpuz,get
	cthis mload
	jmp l2196
l2197:
	push iilepuzzli
	push 4
	cmpjle
	cmp0
	je l2199
	call anbutnext,hide
	call anbutprev,hide
	localint $2
	push 1
	pop $2
l2200:
	push $2
	push iilepuzzli
	cmpjle
	cmp0
	je l2201
	jmp l2203
l2202:
	add $2,1
	pop $2
	jmp l2200
l2203:
	push $2
	push "puz"
	push $2
	pop $b
	popax
	add $a,$b
	cthis mloadb
	jmp l2202
l2201:
	jmp l2198
l2199:
	localdef $3
	push iMenuPuzid
	push 2
	pop $b
	popax
	mul $a,$b
	pop $3
	localdef $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localdef $5
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	pop $5
	localdef $6
	push $3
	push 2
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push ilepuzid
	push 2
	pop $b
	popax
	mul $a,$b
	cmpja
	cmp0
	je l2205
	push 1
	pop $5
	push 2
	pop $6
l2205:
	push "puz"
	push $6
	pop $b
	popax
	add $a,$b
	push "puz"
	push $5
	pop $b
	popax
	add $a,$b
	push "puz"
	push $3
	pop $b
	popax
	add $a,$b
	push "puz"
	push $4
	pop $b
	popax
	add $a,$b
	cthis mload
l2198:
l2196:
	end method
	method mload
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	cthis cwideversion
	cmp0
	je l2207
	push 1
	push $1
	cthis mloadb
	push 2
	push $2
	cthis mloadb
	push 3
	push $3
	cthis mloadb
	push 4
	push $4
	cthis mloadb
	jmp l2206
l2207:
	push 1
	push $1
	cthis mloadb
	push 2
	push $2
	cthis mloadb
	push 3
	push $3
	cthis mloadb
	push 4
	push $4
	cthis mloadb
l2206:
	end method
	method mloadb
	localint $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push "anmenu"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new img,[$e]
	push $3
	spushs
	push "scripts/"
	push sgmversion
	pop $b
	popax
	add $a,$b
	push "/obrazki/p_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push $3
	spushs
	push 10
	spop $a
	call [$a],setz
	localdef $4
	push "ft"
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	spop $e
	new filter,[$e]
	push $4
	spushs
	push $3
	spop $a
	call [$a],link
	push $4
	spushs
	push 1
	spop $a
	call [$a],setsmooth
	push $4
	spushs
	push 1
	spop $a
	call [$a],setpivottype
	push igmiphone
	cmp0
	je l2209
	push $4
	spushs
	push 0.5
	spop $a
	call [$a],setzoom
	jmp l2208
l2209:
	push $4
	spushs
	push 0.4
	spop $a
	call [$a],setzoom
l2208:
	localdef $5
	push "im"
	push $3
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new img,[$e]
	push $5
	spushs
	push $3
	spushs
	spop $a
	call [$a],getw
	push $3
	spushs
	spop $a
	call [$a],geth
	cthis black
	push 128
	spop $a
	call [$a],create
	localdef $6
	push 3
	pop $6
	push $5
	spushs
	push $3
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	cthis cwideversion
	cmp0
	je l2211
	localreal $7
	push 1.2
	pop $7
	localreal $8
	push 1.2
	pop $8
	localint $9
	push 100
	pop $9
	localint $10
	push 100
	pop $10
	push A
	push "fairylite"
	push "fairypro"
	push "farm"
	call sgmversion,in
	cmp0
	je l2213
	push 1.2
	pop $7
	push 150
	pop $9
	push 120
	pop $10
	jmp l2212
l2213:
	push A
	push "grecjamac"
	call sgmversion,in
	cmp0
	je l2215
	push 1.25
	pop $7
	push 150
	pop $9
	push 100
	pop $10
l2215:
l2212:
	push rgmscalex
	push $9
	pop $b
	popax
	mul $a,$b
	pop $9
	push rgmscaley
	push $10
	pop $b
	popax
	mul $a,$b
	pop $10
	localint $11
	push $9
	push $7
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $11
	localint $12
	push $10
	push $8
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $12
	push $1
	spushs
	push 1
	cmpst
	jne l2217
	spop $a
	push $3
	spushs
	push $9
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2216
l2217:
	push 2
	cmpst
	jne l2218
	spop $a
	push $3
	spushs
	push $11
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2216
l2218:
	push 3
	cmpst
	jne l2219
	spop $a
	push $3
	spushs
	push $9
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2216
l2219:
	push 4
	cmpst
	jne l2220
	spop $a
	push $3
	spushs
	push $11
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2216
l2220:
	spop $a
l2216:
	jmp l2210
l2211:
	push igmiphone
	cmp0
	je l2222
	localint $9
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $9
	localint $10
	push 140
	pop $10
	localint $11
	push 3
	push iResX
	pop $b
	popax
	mul $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $11
	localint $12
	push $10
	push 1.3
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $12
	push $1
	spushs
	push 1
	cmpst
	jne l2224
	spop $a
	push $3
	spushs
	push $9
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2223
l2224:
	push 3
	cmpst
	jne l2225
	spop $a
	push $3
	spushs
	push $11
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2223
l2225:
	push 2
	cmpst
	jne l2226
	spop $a
	push $3
	spushs
	push $9
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2223
l2226:
	push 4
	cmpst
	jne l2227
	spop $a
	push $3
	spushs
	push $11
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2223
l2227:
	spop $a
l2223:
	jmp l2221
l2222:
	localint $9
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $9
	localint $10
	push 140
	pop $10
	localint $11
	push 3
	push iResX
	pop $b
	popax
	mul $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $11
	localint $12
	push $10
	push 1.3
	push $3
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $12
	push $1
	spushs
	push 1
	cmpst
	jne l2229
	spop $a
	push $3
	spushs
	push $9
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2228
l2229:
	push 3
	cmpst
	jne l2230
	spop $a
	push $3
	spushs
	push $11
	push $10
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $10
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2228
l2230:
	push 2
	cmpst
	jne l2231
	spop $a
	push $3
	spushs
	push $9
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $9
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2228
l2231:
	push 4
	cmpst
	jne l2232
	spop $a
	push $3
	spushs
	push $11
	push $12
	spop $a
	call [$a],setpos
	push $5
	spushs
	push $11
	push $6
	pop $b
	popax
	add $a,$b
	push $12
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2228
l2232:
	spop $a
l2228:
l2221:
l2210:
	push $3
	spushs
	push $2
	spop $a
	call [$a],MenuPuzzle4
	end method
	method MenuPuzzle4
	localstring $1
	pop $1
	push "smenu"
	push $1
	cthis var2
	cthis Button_isin
	push "butmoveon"
	push "MenuPuzzle5"
	cthis addmethod
	push "butmoveoff"
	push "MenuPuzzle6"
	cthis addmethod
	push "butclick"
	push "MenuPuzzle7"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method MenuPuzzle5
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2234
	ret
l2234:
	call advmouse,setact
	cthis getpx
	cthis getpy
	call imovon,setpos
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call imovon,setz
	call imovon,show
	end method
	method MenuPuzzle6
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2236
	ret
l2236:
	call advmouse,setstd
	call imovon,hide
	end method
	method MenuPuzzle7
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2238
	ret
l2238:
	push smenu
	pop sPuzzle
	push 2
	pop igmstate
	push 1000
	call mus,fadeout
	push "MenuPuzzle8"
	call ccs,close
	end method
	method MenuPuzzle8
	push "WyborPuz"
	call gameapi,play
	end method
	method anbutexit_lclick
	push igmstate
	push 1
	cmpjne
	cmp0
	je l2240
	ret
l2240:
	push "exit"
	cthis askfor
	end method
	method mouse_lclick
	end method
	end game

	game WyborPuz
	parent StdGame
	method init
	push "wyborpuz"
	clparent StdGame,init
	push "bgwybor.jpg"
	cthis img=
	push "buts.pyz"
	new Buttons,cbut
	push sgmversion
	push "d"
	cmpje
	cmp0
	je l2242
	call cbut,WyborPuz0
l2242:
	cthis cbutexit
	cthis cutscene
	push "timgo"
	push 500
	push "WyborPuz2"
	cthis timer=
	push "timgo2"
	push 500
	push "WyborPuz4"
	cthis timer=
	push "null"
	call ccs,enter
	end method
	method WyborPuz0
	push "WyborPuz1"
	call grbuts,eval
	end method
	method WyborPuz1
	cthis actionname
	push "wytlok"
	cmpje
	cmp0
	je l2244
	push "scripts/d/wytlok/"
	push "puz"
	call sPuzzle,strsubbs
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	neg
	jmp l2246
l2244:
	push 0
	jmp l2246
l2245:
	push 1
l2246:
	cmp0
	je l2247
	cthis hide
l2247:
	end method
	method WyborPuz2
	push "WyborPuz3"
	call ccs,close
	end method
	method WyborPuz3
	push "PuzzleB"
	call gameapi,play
	end method
	method WyborPuz4
	push "WyborPuz5"
	call ccs,close
	end method
	method WyborPuz5
	push "Wytlok"
	call gameapi,play
	end method
	method cbut_lclick
	push igmstate
	push 0
	cmpjne
	cmp0
	je l2249
	ret
l2249:
	push sobject
	spushs
	push "music"
	cmpst
	jne l2251
	spop $a
	jmp l2250
l2251:
	push "12"
	cmpst
	jne l2252
	spop $a
	push 3
	pop iPuzRow
	push 4
	pop iPuzCol
	cthis mplay
	jmp l2250
l2252:
	push "20"
	cmpst
	jne l2253
	spop $a
	push 4
	pop iPuzRow
	push 5
	pop iPuzCol
	cthis mplay
	jmp l2250
l2253:
	push "30"
	cmpst
	jne l2254
	spop $a
	push 5
	pop iPuzRow
	push 6
	pop iPuzCol
	cthis mplay
	jmp l2250
l2254:
	push "48"
	cmpst
	jne l2255
	spop $a
	push 6
	pop iPuzRow
	push 8
	pop iPuzCol
	cthis mplay
	jmp l2250
l2255:
	push "wytlok"
	cmpst
	jne l2256
	spop $a
	push 1
	pop igmstate
	call timgo2,play
	jmp l2250
l2256:
	spop $a
l2250:
	end method
	method mplay
	push 1
	pop igmstate
	call timgo,play
	end method
	method anbutexit_lclick
	push "null"
	pop sMenuMode
	push "MenuPuzzle"
	call gameapi,play
	end method
	end game

	game IntroPuz
	parent StdGame
	method init
	push "intropuz"
	clparent StdGame,init
	push "intro.jpg"
	cthis img=
	push "timend"
	push 3000
	push "mgo"
	cthis timer=
	call timend,play
	cthis cutscene
	push "null"
	call ccs,enter
	end method
	method mgo
	push igmstate
	push 0
	cmpje
	cmp0
	je l2258
	push 1
	pop igmstate
	push "IntroPuz0"
	call ccs,close
l2258:
	end method
	method IntroPuz0
	push "MenuPuzzle"
	call gameapi,play
	end method
	method mouse_lclick
	cthis mgo
	end method
	end game

	new int,iPaintNr
	push 1
	pop iPaintNr
	game ccPaint
	parent StdGame
	method init
	push "obrazki"
	clparent StdGame,init
	new gmimgvec,grels
	push "grels"
	push "els"
	push iPaintNr
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator*
	push 10
	call grels,setz
	push "anmask"
	push "mask"
	push iPaintNr
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	push 50
	cthis newanima
	new img,imgbg
	call anmask,getpx
	push 1
	pop $b
	popax
	add $a,$b
	call anmask,geth
	cthis white
	push 255
	call imgbg,create
	new img,imsrc
	call anmask,getw
	call anmask,geth
	cthis transparent
	call imsrc,create
	call anmask,getpx
	call anmask,getpy
	call imsrc,setpos
	localint $1
	push 0
	pop $1
l2259:
	push $1
	call grels,size
	cmpjl
	cmp0
	je l2260
	jmp l2262
l2261:
	add $1,1
	pop $1
	jmp l2259
l2262:
	push $1
	call grels,get
	call imsrc,blit
	jmp l2261
l2260:
	push "anmask"
	call imsrc,blit
	new filter,fthelp
	push 1
	call fthelp,setsmooth
	localreal $2
	call anmask,getw
	pop $2
	push "imsrc"
	call fthelp,link
	localreal $3
	push 0.88
	pop $3
	push $3
	call imgbg,getw
	pop $b
	popax
	mul $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	psax
	pop $2
	push $2
	call fthelp,setzoom
	new img,imhelp1
	call imsrc,getw
	call imsrc,geth
	cthis transparent
	call imhelp1,create
	call imsrc,getpx
	call imsrc,getpy
	call imhelp1,setpos
	push "imsrc"
	call imhelp1,blit
	push 1.0
	push $3
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imgbg,getw
	pop $b
	popax
	mul $a,$b
	push 10
	call imhelp1,setpos
	call fthelp,unlink
	delete imsrc
	end method
	end game

