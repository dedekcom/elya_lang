

class Subtitle	{
	init(string sdbfile, string sfont, int ifont, int borx)	{
		real rwidth = 0.5;
		int col[3];	// kolor fonta
		col0 = 255;
		col1 = 255;
		col2 = 255;
		string spath = SNDPATH;
		
		new string ssubpos = dbconf.dbget("sgmsubtitlespos:");
		if( ssubpos==null ) ssubpos = "down";
		@s = dbconf.dbgets("sgmsubtitlespos:",2);
		new int isubpos = (s!=null ? s : 15);
		new bool bshadow = dbconf.dbgetint("igmsubshadow:");
		new int bblackbg = dbconf.dbgetint("igmsubblackbg:");
		
		new int iborx = borx;
		
		new font fnt;
		fnt.load(sfont, ifont);
		new int ifontsize = ifont;
		
		new db dbl;
		dbl.load(LANGDIR + sdbfile);
		int i=0;
		string s;
		while( i<dbl.getrowsno )	{
			if( dbl.getcolsno(i) < 2 || dbl.get(i,0)->getb(0,1)=="#" )
				dbl.removerow(i);
			else i++;
		}
		
		
		string s2;
		new vector v1;	v1.type("string");
		int cols = (iResX-2*borx)/(rwidth*ifont+1);
		int k, int j;
		int linie = 0;
		for( int i=0; i<dbl.getrowsno; i++)	{
			s = spath + dbl.get(i,0)+".wav";
			if( !engine.fileexist(s) )
				s = spath + dbl.get(i,0)+".ogg";
			dbl.set( i, 0, s );
			s = dbl.get(i,1);
			v1.vecbuildfromstring(s, " ");
			s2 = "";
			k = 1;
			for( j=0; j<v1.size; j++)	{
				if( s2.length + v1.get(j)->length + 1 <= cols )	s2 += " " + v1.get(j);
				else {
					if( k==1 )	dbl.set(i, k, s2);
					else dbl.add(i, s2);
					s2 = v1.get(j);
					k++;
				}
			}
			if( k==1 )	dbl.set(i, k, s2);
			else dbl.add(i, s2);
			if( k>linie ) linie = k;
		}
		
		new gmimgvec grtxt;
		new gmimgvec grtxts;
		for( int i=0; i<linie; i++)	{
			s = "txt"+i;
			if( bshadow )	{
				s2 = "txts"+i;
				classgame::newtext(s2,"","fnt",.black);
				grtxts.add(s2);
			} else if ( bblackbg )	{
				s2 = "imgs"+i;
				new img <s2>;
				grtxts.add(s2);
			}
			classgame::newtext(s,"","fnt",col0, col1, col2);
			grtxt.add(s);
		}
		
		new db dbsnd;
		new timer timtxt;
		timtxt.settick(1);
		timtxt.setcycle(1);
		timtxt.addmethod("onfinish", func {
			if( !.cisplaying )	.hidesubs;
			else .play;
			} );
		.setz(12000);
	}
	reset	{
		.stop;
		dbsnd.free;
	}
	hidesubs	{
		grtxt.hide;
		grtxts.hide;
	}
	setz(int z)	{
		grtxt.setz(z);
		grtxts.setz(z-1);
	}
	stop	{
		.hidesubs;
		timtxt.stop(false);
	}
	register(string ssnd, string sfile)	{
		@id = dbl.findbyrow(sfile);
		if( id>=0 )	{
			@r = dbsnd.findbyrow(ssnd);
			if( r>=0 )	dbsnd.set(r, 1, id);
			else {
				@r = dbsnd.addrow-1;
				dbsnd.add(r, ssnd);
				dbsnd.add(r, id);
			}
		}
	}
	getiddialog(string s)	{	dbsnd.findbyrow(s);	}
	int play(string s)	{
		.stop;
		@id = dbsnd.findbyrow(s);
		if( id>=0 )	{
			int ileznakow = 0;
			id = dbsnd.get(id, 1);
			@ile = dbl.getcolsno(id)-1;
			string s[2], int dx, int dy;
			grtxt.setpos( 0, 0 );
			int dy = 2;
			for( int i=0; i<ile; i++)	{
				s0 = grtxt.get(i);
				<s0>.txtset(dbl.get(id, i+1));
				ileznakow += <s0>.get->length;
				<s0>.setpos( (iResX-<s0>.getw)/2 + igmoffsetx, i*ifontsize + dy + igmoffsety );
				<s0>.show;
				if( bshadow )	{
					s1 = grtxt.get(i);
					<s1>.txtset(<s0>.get);
					<s1>.setpos(<s0>.getpx+1, <s0>.getpy+1);
					<s1>.show;
				} /*else if ( bblackbg )	{
					s1 = grtxts.get(i);
					dx = 4;
					dy = 2;
					//<s1>.create( <s0>.getw+ dx, <s0>.geth+dy, .black, 255 );
					//<s1>.setpos(<s0>.getpx-dx/2, <s0>.getpy-dy/2);
					<s1>.create( iResX, <s0>.geth, .black, bblackbg );
					<s1>.setpos( 0, <s0>.getpy );
					<s1>.setz( <s0>.getz-1 );
					<s1>.show;
				}*/
			}
			if( bblackbg )	{
				s0 = grtxt.first;
				s1 = grtxts.first;
				if( ssubpos=="up" )	{
					<s1>.create( iResX, <grtxt.get(ile-1)>.getey, .black, bblackbg );
					<s1>.setpos( igmoffsetx, igmoffsety );
				} else {
					<s1>.create( iResX, <grtxt.get(ile-1)>.getey - <s0>.getpy, .black, bblackbg );
					<s1>.setpos( igmoffsetx, <s0>.getpy+igmoffsety );
				}
				<s1>.setz( <s0>.getz-1 );
				<s1>.show;
			}
			if( ssubpos=="up" )	{
				dy = 0;
			} else {
				dy = iResY - ile*(ifontsize+dy)-isubpos;
				grtxt.move( 0, dy );
				if( bshadow || bblackbg ) grtxts.move(0, dy);
			}
			timtxt.play;
			ileznakow;
		} else 0;
	}
}

new int igmsubtitle = dbconf.dbgetint("igmsubtitle:");
new int igmlektor = dbconf.dbgetint("igmlektor:");
new int igmchardelay = dbconf.dbgetint("igmchardelay:");
if( igmsubtitle )	{
	string sf = dbconf.dbget("subtitles_font:");
	int ifs = dbconf.dbgetint("subtitles_fontsize:");
	new Subtitle subtitle( dbconf.dbget("subtitles_src:"), (sf==null ? sgmfontbold : sf), (ifs<=0 ? 20 : ifs), 50);
}

class classsound {
	init()	{
		new string _csplay = null;
		new timer timlektor;
		timlektor.addmethod("onfinish", func {
			if( _csplay!=null ) <_csplay>.onfinish;
			} );
		if( igmsubtitle )	{
			subtitle.reset;
		}
	}
	creset()	{ _csplay = null; }
	string cgetactsnd()	{ return _csplay; }
	bool cisactsnd(string ssnd)	{	ssnd==_csplay;	}
	crselfplay(string ssnd)	{
		if( !this.cisplaying() )	this.cbplay(ssnd);
		else if ( this.cgetactsnd()!=ssnd )	this.cbplay(ssnd);
	}
	cbselfplay(string ssnd)	{
		if( !.cisplaying || .cgetactsnd!=ssnd )	.cbplay(ssnd);
	}
	cbplay(string ssnd)	{
		if(this.cisplaying())	.csplaystop(true);
		_csplay = ssnd;
		if( ssnd!=null )
			.csubplay(ssnd);
		//	<ssnd>.play();
	}
	cbsplay(string ssnd)	{
		_csplay = ssnd;
		if( ssnd!=null)	.csubplay(ssnd);
	}
	cbplayfin(string ssnd, string sfun)	{
		<ssnd>.addmethod("onfinish", sfun);
		.cbplay(ssnd);
	}
	cbplay2(string ssnd)	{
		if(this.cisplaying())	.csplaystop(false);
		_csplay = ssnd;
		if( ssnd!=null )
			.csubplay(ssnd);
		//	<ssnd>.play();
	}
	crplay(string ssnd)	{
		if(_csplay!=null && <_csplay>.isplaying() )	return;
		_csplay = ssnd;
		if( ssnd!=null )
			.csubplay(ssnd);
		//	<ssnd>.play();
	}
	cbplayif(string ssnd)	{
		if(.cisplaying)
			.cbplay(ssnd);
	}
	crbgplay(string ssnd)	{
		if( ssnd != null && !<ssnd>.isplaying() )
			.csubplay(ssnd);
			//<ssnd>.play();
	}
	crandplay(string ssnd, int irand, string styp)	{
		if( irand.rand()==0 )	this.<"c"+styp+"play">( ssnd );
	}
	cplayf(string styp, string ssnd, string sfun)	{
		this.<"c"+styp+"play">(ssnd);
		if( <ssnd>.isplaying() && sfun!=null)	<ssnd>.addmethod("onfinish",sfun);
	}
	//cactsndstop(bool bfin)	{	if(_csplay!=null)	<_csplay>.stop(bfin);	}
	cactsndstop(bool bfin)	{
		if(.cisplaying)	.csplaystop(bfin);
	}
	csplaystop(bool bfin)	{
		if( timlektor.isplaying )	{
			timlektor.stop(true);
		} else
			<_csplay>.stop(bfin);
	}
	cstopsnds(bool b)	{
		if( _csplay.in && .cisplaying )
			.cactsndstop(b);
	}
	bool cisplaying()	{
		_csplay!=null ? ( timlektor.isplaying || <_csplay>.isplaying ) : false;
	}
	csubplay(string s)	{
		if( igmsubtitle )	{
			@dt = subtitle.play(s);
			if( igmlektor || dt<=0 ) <s>.play;
			else {
				timlektor.setdelay( dt * igmchardelay );
				timlektor.play;
			}
		} else
			<s>.play;
	}
}

/***************************************************************************/
class classsndbank	{
	init()	{
		new int itype;
		new int ilicz = 0;
		new int iile;
		new string splay=null;
		new string ssnd = "snd";
	}
	/********************************/
	loadsingle(string sfile, int ile)	{
		if( ile<=0)	{	iile=0;	return;	}
		iile=ile;
		itype=0;
		for( int i=0; i<ile; i++)	newvars::newsnd( ssnd+i, sfile );
	}
	/********************************/
	load(string sfilebase, int ifilefrom, int ifileto, int ityp, int itypstart)	{
		iile = ifileto-ifilefrom+1;
		if(iile<=0)	{
			iile = 0;
			return;
		}
		newvars::newsnds( ssnd, 0, sfilebase, ifilefrom, ifileto);
		itype = ityp;			// 0 - po kolei, 1 - random
		if(itypstart==1)	{	// 0 - od pierwszego, 1 - randomowy
			ilicz = iile.rand( );
		}
	}
	addmethod(string ssig, string sfunc)	{
		for( int i=0; i<iile; i++)	<ssnd+i>.addmethod( ssig, sfunc );
	}
	stop(int ifin)	{	if(splay!=null)	<splay>.stop(ifin);	}
	int isplaying()	{	splay!=null ? <splay>.isplaying() : false;	}
	randplay( int irand )	{	if( irand.rand()==0 )	this.play();	}
	playid(int id)	{
		ilicz=id%iile;
		this.play();
	}
	play()	{
		this.stop(false);
		this.bgplay();
	}
	reset()	{	ilicz=0;	}
	/************************************************/
	rbgplay()	{	if( !this.isplaying() )	this.bgplay();	}
	rplay()	{	if( !this.isplaying() )	this.play();	}
	bgplay()	{
		splay = ssnd + ilicz;
		<splay>.play();
		if( itype==0)	ilicz = (ilicz+1)%iile;
		else if (itype==1)	ilicz = iile.rand();
	}
	setvol(int vol)	{	for( int i=0; i<iile; i++)	<ssnd+i>.setvol( vol );	}
}

class SoundSource	{
	init	{	}
	setvol(string ssnd, int srcvol, int outvol, real rad, real length)	{
		if( length.abs>=rad ) <ssnd>.setvol(outvol);
		else <ssnd>.setvol((1.0-length.abs/rad)*srcvol + outvol);
	}
}
