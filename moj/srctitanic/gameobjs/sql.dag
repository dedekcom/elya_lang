class SQL	{
	init	{
		new db dbtables;
		new string sscript;
		Lexer::setas("sscript");
		sscript.setliteralchar("'");
		sscript.consts = (A, "(", ")", "/", "%", "*","+","-",";",".",",",
			"OR", "SELECT","FROM","WHERE","ORDER","BY","ASC","DESC","AND","NULL",
			"=","<=","=>","<>","<",">");
		new vector vscr;
		vscr.type("string");
		new vector vtab;		vtab.type("string");
		new vector vtabid;	vtabid.type("string");
		new vector vtabn;		vtabn.type("string");
		
		new vector vrow;	vrow.type("string");
		new vector vrowid;	vrowid.type("string");
		new vector vrowint;
		new vector vtabprzesun;
		
		new db dboutnames;	dboutnames.buildfullname;
		new db dbout;		dbout.buildfullname;
		new vector vouttab; vouttab.type("string");
		new vector veq;		veq.type("string");
		new vector veq2;	veq2.type("string");
		new vector vcnt;	vcnt.type("string");
		new int ilicz;
		new bool basc;
		new int isortcol;
		.var2("serror",null);
	}
	load(string spath)	{
		@s = this;
		dbtables.load(spath + s + ".tables");
		string s2;
		for( int i=0; i< dbtables.getrowsno; i++)	{
			s2 = s +"_"+ dbtables.get(i,0);
			new db <s2>;
			<s2>.load( spath + s2 + ".db" );
		}
	}
	save(string spath)	{
		@s = this;
		dbtables.save(spath + s + ".tables");
		string s2;
		for( int i=0; i< dbtables.size; i++)	{
			s2 = s + dbtables.get(i,0);
			<s2>.save( spath + s2 + ".db" );
		}
	}
	insertvalues(string sdb, string srow)	{	<this+sdb>.dbaddstringrow(srow);	}
	int query(string script)	{
		script.clear;
		if( script.length==0 ) return .cerrors(1,null);
		sscript.start(script.to_u);
		sscript.gettoken("vscr", true);
		
		match( vscr.get(0) )	{
			"$const" => {
				match(vscr.get(1))	{
					"SELECT" => .ord_select;
					? => .cerror(3,1);
				}
			}
			? => .cerror(2,0);	// bad start
		}
	}
	droptable(string s)	{
		.vardelif(this+"_"+s);
	}
	ord_select	{
		string s[3];
		vtab.free;
		vtabid.free;
		vrow.free;
		vrowid.free;
		vrowint.free;
		vtabprzesun.free;
		veq.free;
		dbout.free;
		int ile = vscr.size;
		int i[3];
		i0 = vscr.vecfindfrom(0,"NULL");
		while(i0>=0 )	{
			vscr.set(i0-1, "$literal");		// zamiana 
			i0 = vscr.vecfindfrom(i0+1,"NULL");
		}
		int state = 10;
		for( int i=2; i<ile; i+=2)	{
			s0 = vscr.get(i);
			s1 = vscr.vecget(i+1);
			match(s0)	{
				"$const" => {
					if( state==10 )	{
						if( s1=="*" ) {
							state = 11;
							vrow.add(s1);
							vrowid.add(s1);
						} else return .cerror(9,i+1);
					} else if (state==11) {
						if (s1=="FROM")	{
							i0=i+2;
							i=ile;
							state = 15;	// end
						} else return .cerror(11,i+1);
					} else if (state==12 || state==16)	{
						if( s1=="." )	{		// table.row
							state=13;
						} else if (s1==",")	{	// r1, r2
							if(state==12) {
								vrowid.add(vrow.last);
								vrow.set(vrow.size-1,null);
							}
							state=14;
						} else if (s1=="FROM")	{
							if(state==12) {
								vrowid.add(vrow.last);
								vrow.set(vrow.size-1,null);
							}
							i0=i+2;
							i=ile;
							state = 15;	// end
						} else return .cerror(12,i+1);
					} else return .cerror(10,i+1);
				}
				"$alpha" => {
					if(state==10 || state==14)	{
						state=12;
						vrow.add(s1);
					} else if (state==13)	{
						state=16;
						vrowid.add(s1);
					} else return .cerror(13,i+1);
				}
				? => ;
			}
		}
		if( state!=15 ) return .cerrors(14,null);
		state = 0;
		for( i=i0; i<ile; i+=2)	{
			s0 = vscr.get(i);
			s1 = vscr.vecget(i+1);
			if( s0=="$alpha" )	{
				if(state==0 || state==3)	{
					if( vtab.contains(s1) ) return .cerror(27,i+1);
					vtab.add(s1);
					state=1;
				} else if (state==1 )	{	// tab t
					vtabid.add(s1);
					state=2;
				} else return .cerror(5,i+1);
			} else if (s0=="$const")	{
				if (state==1 || state==2)	{
					if( s1=="," )	{
						if(state==1)		vtabid.add(vtab.last);
						state=3;
					} else if (s1=="WHERE" || s1==";" || s1=="ORDER" )	{
						if(state==1)		vtabid.add(vtab.last);
						if( s1==";" && vscr.vecget(i+2)!=null ) return .cerrors(37,vscr.vecget(i+2));
						i0 = i+1;
						i=ile;
						state = 10;	// end
					}
				} else return .cerror(6,i+1);
			} else return .cerror(7,i+1);
		}
		if( state!=10 ) return .cerrors(8,null);
		
		s0 = this;
		vtabn.free;
		vtabprzesun.add(0);
		for(i=0; i< vtab.size; i++)	{
			s1 = s0+"_"+vtab.get(i)->to_l;
			vtabn.add(s1);
			if( !.hasvar(s1) )
				return .cerrors(24,vtab.get(i));
			vtabprzesun.add( <s1>.getcolsno(0) + vtabprzesun.last );
		}
		if( vrowid.vecget(0)=="*" )	{
			vrowid.removeat(0);
			vrow.removeat(0);
			for( i=0; i<vtab.size; i++)	{
				s2 = vtab.get(i);
				//s1 = s0+"_"+s2.to_l;
				s1 = vtabn.get(i);
				vrowid.vecadddbrow(s1, 1);
				for(i1=0; i1 < <s1>.getcolsno(1); i1++) vrow.add( s2 );
			}
		}
		for(i=0; i< vrow.size; i++)	{
			s1 = vrowid.get(i);
			if(vrow.get(i)==null ) vrow.set(i,vtab.first);
			i1 = vtabid.find(vrow.get(i));
			if( i1>=0 )	{
				s2 = vtab.get(i1);
				
				//vrow.set(i, s2);
				vrow.set(i, i1);	// zapisz index tabeli z vtab zamiast nazwy tabeli
				
				i2 = <vtabn.get(i1)>.dbfindinrow(1,s1);
				if( i2<0 )	return .cerrors(26,s2+"."+s1);
				vrowint.add(i2);
			} else return .cerrors(25,vrow.get(i));
		}
		
		match(vscr.get(i0))	{
			"WHERE" => {
				i=i0+1;
				while(i<ile)	{
					s0 = vscr.get(i);
					s1 = vscr.vecget(i+1);
					if(s0=="$alpha")	{
						if(state==10 || state==16 || state==17)	{
							veq.add(s1);
							if(state==17) state=18;
							else state=11;
							i+=2;
						} else if (state==12 || state==19)	{
							i1 = vtabid.find(veq.last);
							if( i1>=0 )	{
								veq.set( veq.size-1, vtab.get(i1) );
								veq.add( s1 );
								if(state==12)	state=14;
								else state=15;
								i+=2;
							} else return .cerror(17,i+1);
						} else if (state==13)	{
							state=17;	// found table.col or col
						} else return .cerror(18,i+1);
					} else if (s0=="$const")	{
						if(state==11 || state==18)	{
							if( s1=="." )	{
								if( vtabid.find(veq.last)<0 ) return .cerror(17,i-1);
								if(state==11) state=12;
								else state=19;
								i+=2;
							} else {
								if( !.table_has_col(vtab.first,veq.last) ) return .cerrors(26,veq.last);
								veq.add(veq.last);
								veq.set( veq.size-2, vtab.first );
								if( state==11 ) state=14;
								else state=15;
							}
						} else if (state==14)	{
							if ( s1.in(A,"=","<>","<",">","<=",">=") )	{
								veq.add(s1);
								state=13;
								i+=2;
							} else return .cerror(16,i+1);
						} else if (state==15)	{
							match(s1)	{
								"AND", "OR" => { veq.add(s1); state=16; i+=2; }
								//";" => return .count;
								";" => {
									state=20;
									i+=2;
								}
								"ORDER" => return .ord_order(i+2);
								? => return .cerror(19,i+1);
							}
						} else return .cerror(23,i+1);
					} else if (s0=="$int" || s0=="$real" || s0=="$literal")	{
						if(state==13)	{
							if( s0=="$literal" && !veq.last->in(A,"=","<>") ) return .cerror(20,i+1);
							veq.add(s0);
							veq.add(s1);
							state = 15;
							i+=2;
						} else return .cerror(21,i+1);
					}else return .cerror(15,i+1);
				}
				if( state==20 ) return .count;
				return .cerror(22,i+1);
			}
			";" => return .count;
			"ORDER" => return .ord_order(i0+1);
			? => ;
		}
		
		0;	// bez bledu
	}
	table_has_col(string stab, string scol)	{
		<this+"_"+stab.to_l>.dbrowcontains(1, scol);
	}
	int ord_order(int id)	{
		if( .count == 0 )	{
			int state = 0;
			string s[2];
			string ssortertab;
			string ssorter;
			basc = true;
			while(id<vscr.size )	{
				s0 = vscr.get(id);
				s1 = vscr.vecget(id+1);
				if(s0=="$const")	{
					if(state==0)	{
						if( s1=="BY" )	{
							state=1;
							id+=2;
						} else return .cerror(29,id+1);
					} else if (state==2)	{
						if( s1=="." )	{
							state=3;
							ssortertab=ssorter;
							id+=2;
						} else if (s1==";")	{
							state=5;
							ssortertab=vtab.first;
						} else if (s1=="ASC" || s1=="DESC")	{
							state=4;
							ssortertab=vtab.first;
						} else return .cerror(31,id+1);
					} else if (state==4)	{
						if(s1==";")	{
							state=5;
						} else if (s1=="ASC" || s1=="DESC" )	{
							basc = s1=="ASC";
							state=5;
							id+=2;
						} else return .cerror(32,id+1);
					} else if (state==5)	{
						if(s1==";")	{
							state=10;	// end!
							id+=2;
						} else return .cerror(33,id+1);
					} else return .cerror(30,id+1);
				} else if (s0=="$alpha")	{
					if(state==1)	{
						ssorter = s1;
						state=2;
						id+=2;
					} else if (state==3)	{
						ssorter=s1;
						state=4;
						id+=2;
					} else return .cerror(34,id+1);
				} else return .cerror(28,id+1);
			}
			if( state!=10 ) return .cerrors(35,state);
			
			ssortertab += "_" + ssorter;
			isortcol = vouttab.find(ssortertab);
			if( isortcol<0 ) return .cerrors(36,ssorter);
			dbout.insertsort( dbout.getrowsno, "dboutcol", (basc ? "dbcmpasc" : "dbcmpdesc"), "swap");
			0;
		} else
			1;
	}
	dboutcol(int id)	{	.get(id,isortcol);	}
	dbcmpasc(string s1, string s2)	{	s1.cmpalph(s2) < 0;	}
	dbcmpdesc(string s1, string s2)	{	s1.cmpalph(s2) > 0;	}
	int count	{
		dbout.free;
		vcnt.free;
		vouttab.free;
		ilicz = 0;
		
		dboutnames.free;
		_ = dboutnames.addrow;
		_ = dboutnames.addrow;
		string s;
		int id;
		for( int i=0; i<vrowid.size; i++)	{
			s = vtabn.get( vrow.get(i) );
			id = vrowint.get(i);
			dboutnames.add(0, <s>.get(0, id) );
			dboutnames.add(1, <s>.get(1, id) );
			vouttab.add( vtabid.get(vrow.get(i)) + "_" + vrowid.get(i) );	// do sortowania
		}
		veq2.free;
		i=0;
		while(i<veq.size)	{
			.getpoletabid( i );
			veq2.add( veq.get(i+2) );
			.getpoletabid( i+3 );
			if( i+5<veq.size )	{
				veq2.add( veq.get(i+5) );
			}
			i+=6;
		}
		.countrow(0, vtab.size);
		0;
	}
	getpoletabid(int id)	{
		match(veq.get(id))	{
			"$int", "$literal", "$real" => {
				veq2.add(veq.get(id));
				veq2.add(veq.get(id+1));
			}
			? => {
				veq2.add("$cell");
				@pos = vtab.find( veq.get(id) );	// pozycja tabeli
				veq2.add( vtabprzesun.get(pos) + <vtabn.get(pos)>.dbfindinrow(1, veq.get(id+1) ) );	// wylicz pozycje pola w wektorze
			}
		}
	}
	countrow(int itab, int ile)	{
		//@s = this+"_"+vtab.get(itab)->to_l;
		@s = vtabn.get(itab);
		
		@sv = "vtmp"+ilicz;
		ilicz++;
		new vector <sv>;
		<sv>.type("string");
		<sv>.copy("vcnt");
		
		for(int i=2; i< <s>.getrowsno; i++)	{
			//if(itab==0 ) dbout.dbaddrowfrom(s, i, 0);
			//else dbout.dbadddbrowtorow( dbout.getrowsno-1, s, i);
			vcnt.vecadddbrow(s,i);
			if( itab+1<ile )	{
				.countrow(itab+1, ile);
				vcnt.copy(sv);
			} else {
				// vrow - nazwa(index z vtab) tabeli
				// vrowid - nazwa pola tabeli
				// vrowint - numer pola tabeli
				// vtabprzesun - przesuniecie vtab
				bool b = .calcrow(0);
				if( b )	{
					@row = dbout.addrow-1;
					for( int j=0; j<vrow.size; j++)	{
						dbout.add( row, vcnt.get( vtabprzesun.get( vrow.get(j) ) + vrowint.get(j) ) );
						// wstaw wymagane pole z vcnt, ktore ma pozycje w vrowint + vprzesun[vrow]
					}
				}
				vcnt.copy(sv);
			}
		}
		delete <sv>;
		ilicz--;
		//dbout.dbaddvec("vcnt");
		//vcnt.free;
	}
	bool calcrow(int id)	{
		if( id<veq2.size )	{
			@d1 = .getpole(id);
			@d2 = .getpole(id+3);
			match( veq2.get(id+2) )	{
				"=" => d1==d2;
				"<>" => d1!=d2;
				"<" => d1<d2;
				">" => d1>d2;
				"<=" => d1<=d2;
				">=" => d1>=d2;
				? => ;
			}
			bool b = _;
			match( veq2.vecget(id+5) )	{
				"AND" => return b && .calcrow(id+6);
				"OR" => return b || .calcrow(id+6);
				? => return b;
			}
		}
		true;
	}
	def getpole(int id)	{
		match( veq2.get(id) )	{
			"$literal" => veq2.get(id+1);
			"$int" => veq2.get(id+1)->to_i;
			"$real" => veq2.get(id+1)->to_r;
			"$cell" => vcnt.get( veq2.get(id+1) );
			? => ;
		}
	}
// 	isref(int id)	{ vscr.vecget(id)=="$alpha" && vscr.vecget(id+2)=="$const" && vscr.vecget(id+3)=="." && vscr.vecget(id+4)=="$alpha";	}
	int cerror(int ierror, int id)	{	.cerrors(ierror,vscr.vecget(id));	}
	int cerrors(int ierror, string scom)	{
		serror = scom;
		match(ierror)	{
			0 => "OK";
			1 => "empty code";
			2 => "unknown start";
			3 => "bad key word on start";
			4 => "no FROM";
			5 => "no FROM tab";
			6 => "key word after ',' in FROM";
			7 => "no tab or ',' after FROM";
			8 => "wrong end of FROM";
			9 => "wrong const initial after SELECT";
			10 => "wrong const after SELECT";
			11 => "no FROM after SELECT";
			12 => "wrong const after SELECT list";
			13 => "wrong alpha after SELECT";
			14 => "wrong end SELECT state";
			15 => "wrong ident starting WHERE";
			16 => "wrong const after table.row in WHERE";
			17 => "no existing table in WHERE";
			18 => "wrong alpha in WHERE";
			19 => "wrong const after equation in WHERE";
			20 => "no = or <> before literal in WHERE";
			21 => "literal, int or real before equation in WHERE";
			22 => "bad end after WHERE";
			23 => "wrong const after WHERE";
			24 => "FROM: no such table";
			25 => "SELECT: no such table";
			26 => "SELECT: no such row in table";
			27 => "FROM: table already exist";
			28 => "ORDER: wrong word";
			29 => "ORDER: no BY word";
			30 => "ORDER BY: wrong const";
			31 => "ORDER BY: wrong const after alpha";
			32 => "ORDER BY: expected ';' or 'ASC', 'DESC'";
			33 => "ORDER BY: expected ';'";
			34 => "ORDER BY: wrong alpha";
			35 => "ORDER BY: wrong end";
			36 => "ORDER BY: no field to sort";
			37 => "words after ';'";
			? => "";
		}
		string s = _;
		if(scom!=null ) s+=": '"+scom+"'";
		if( igmdebug ) s.print;
		ierror;
	}
	copyresult(string sdb)	{
		@s = dbout.getfullname;
		@s2 = dboutnames.getfullname;
		<sdb>.dbaddrowfrom(s2, 0, 0);
		<sdb>.dbaddrowfrom(s2, 1, 0);
		for( int i=0; i< dbout.getrowsno; i++)
			<sdb>.dbaddrowfrom(s, i, 0);
	}
}