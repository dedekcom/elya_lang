class gfxObject	{
	init(string sob)	{	new string sgfxobj = sob; }
	setpos		{	<sgfxobj>.setpos;	}
	move		{	<sgfxobj>.move;	}
	getpos		{	<sgfxobj>.getpos;	}
	getposx		{	<sgfxobj>.getposx;	}
	getposy		{	<sgfxobj>.getposy;	}
	getpx		{	<sgfxobj>.getpx;	}
	getpy		{	<sgfxobj>.getpy;	}
	getw			{	<sgfxobj>.getw;	}
	geth			{	<sgfxobj>.geth;	}
	getcx		{	<sgfxobj>.getcx;	}
	getcy		{	<sgfxobj>.getcy;	}
	getex		{	<sgfxobj>.getex;	}
	getey		{	<sgfxobj>.getey;	}
	lodx			{	<sgfxobj>.lodx;	}
	lody			{	<sgfxobj>.lody;	}
	setz			{	<sgfxobj>.setz;		}
	getz			{	<sgfxobj>.getz;	}
	show		{	<sgfxobj>.show;	}
	hide			{	<sgfxobj>.hide;	}
	isvisible		{	<sgfxobj>.isvisible;	}
	bool isin		{	<sgfxobj>.isin;		}
}

class gfxSquare : Color, gfxObject	{
	init(int x1, int y1, int w1, int h1)	{
		Color::init;
		.vars(A, "w", "h");
		w=w1; h=h1;
		new img imggfx;
		imggfx.setpos(x1,y1);
		gfxObject::init("imggfx");
	}
	build	{	imggfx.create(w,h,r,g,b,a);	}
	shadow(int dx, int dy, int alpha)	{
		|@x,@y| = imggfx.getpos;
		imggfx.setpos(0,0);
		new img _img1;
		new img _img2;
		if( imggfx.getw>0 )	{
			_img1.create(w,h,.transparent);
			_img1.blit("imggfx");
		} else _img1.create(w,h,.get);
		_img2.create(w,h,.black,alpha);
		if( dx<0 )	{
			_img1.move(-dx, 0);
			x+=dx;
		} else	_img2.move( dx, 0 );
		if( dy<0 )	{
			_img1.move(0,-dy);
			y+=dy;
		} else	_img2.move( 0, dy );
		w += dx.abs;
		h += dy.abs;
		imggfx.create(w, h, .transparent);
		imggfx.blit("_img2");
		imggfx.blit("_img1");
		delete _img1;
		delete _img2;
		imggfx.move(x,y);
	}
	blackborder(int width, int a2)	{	.border(width,width, .black,a2);	}
	border(int width, int height, int r2, int g2, int b2, int a2)	{
		|@x,@y| = imggfx.getpos;
		imggfx.setpos(0,0);
		new img _img;
		if( imggfx.getw>0 )	{
			_img.create(w,h,.transparent);
			_img.blit("imggfx");
		} else _img.create(w,h,.get);
		_img.move(width,height);
		w += 2*width;
		h += 2*width;
		imggfx.create(w,h,r2,g2,b2,a2);
		imggfx.blit("_img");
		delete _img;
		imggfx.move(x,y);
	}
}

class Rect	{
	init(int _x, int _y, int _w, int _h)	{
		.vars(A, "x", "y", "w", "h");
		.set(_x, _y, _w, _h);
		new vector vecgr; vecgr.type("string");
		vecgr.add("gmimgvec");
	}
	x2	{	x+w;	}
	y2	{	y+h;	}
	set(int _x, int _y, int _w, int _h)	{ x=_x; y=_y; w=_w; h=_h; }
	setborders(int _x, int _y, int _x2, int _y2)	{
		x=_x; y=_y; w=_x2-_x; h=_y2-y;
	}
	fit(string simg)	{
		if( vecgr.contains( <simg>.gettype) ) {
			@dx = x-<simg>._getpx;
			if( dx>0 ) <simg>.move(dx,0);
			@dy = y-<simg>._getpy;
			if( dy>0 ) <simg>.move(0,dy);
		} else {
			@dx = x-<simg>.getpx;
			if( dx>0 ) <simg>.move(dx,0);
			@dy = y-<simg>.getpy;
			if( dy>0 ) <simg>.move(0,dy);
		}
		dx = .x2-<simg>.getex;
		if( dx<0 ) <simg>.move(dx,0);
		dy = .y2-<simg>.getey;
		if( dy<0 ) <simg>.move(0,dy);
	}
	fitrand(string simg)	{	<simg>.ansetbpos( x+(w-<simg>.getw)->rand, y+(h-<simg>.geth)->rand);	}
	fitgrouprand(string sgr)	{	for( int i=0; i< <sgr>.size; i++) .fitrand( <sgr>.get(i) );	}
	fitgroup(string sgr)	{	for( int i=0; i< <sgr>.size; i++) .fit( <sgr>.get(i) );	}
	bool isin(int _x, int _y)	{	_x>=x && _x<x+w && _y>=y && _y<y+h;	}
}

class ImgRect	{
	init	{
		.vars2(A, "ix",0, "iy",0, "iw",0, "ih",0, "bvis",1, "iz",0, "ilodx",0, "ilody",0);
	}
	create(int w, int h)	{	iw=w; ih=h;	}
	setpos(int x, int y)	{	ix=x; iy=y;	}
	move(int x, int y)	{	ix+=x; iy+=y;	}
	getpos			{	return ix,iy;	}
	getposx			{	ix;		}
	getposy			{	iy;		}
	getpx			{	ix;		}
	getpy			{	iy;		}
	getw			{	iw;		}
	geth			{	ih;		}
	getcx			{	ix+iw/2;	}
	getcy			{	iy+ih/2;	}
	getex			{	ix+iw;		}
	getey			{	iy+ih;		}
	lodx			{	ilodx;		}
	lody			{	ilody;		}
	setz(int z)		{	iz=z;		}
	getz			{	iz;		}
	show			{	bvis = true;	}
	hide			{	bvis = false;	}
	isvisible		{	bvis;		}
	bool isin(int x, int y, bool bv, bool ba)	{
		if( bv==false || .isvisible )
			x>=ix && x<ix+iw && y>=iy && y<iy+ih;
		else false;
	}
	setrect(int x, int y, int x2, int y2)	{
		ix=x; iy=y; iw=x2-x; ih=y2-y;
	}
	print	{
		("x: "+ix+", y: "+iy+", w: "+iw+", h: "+ih)->print;
	}
	operator=(string srec)	{
		|ix,iy,iw,ih,iz,bvis| = <srec>.getpx, <srec>.getpy, <srec>.getw, <srec>.geth, <srec>.getz, <srec>.isvisible;
	}
}
