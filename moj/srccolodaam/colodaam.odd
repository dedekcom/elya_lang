; Dominik Dagiel   ix 2005

	new db,dbconf
	push "configs/config.beh"
	call dbconf,loadscript
	method readcfg
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbconf,findbyrow
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l2
	push $2
	jmp l1
l2:
	push $3
	push 1
	call dbconf,get
l1:
	end method
	push "enginedebug:"
	push 0
	cthis readcfg
	call engine,setdebugstate
	new int,igmdebug
	push "igmdebug:"
	push 0
	cthis readcfg
	pop igmdebug
	new int,igmpcdebug
	push "igmpcdebug:"
	push 0
	cthis readcfg
	pop igmpcdebug
	push igmpcdebug
	cmp0
	je l4
	call mouse,showsys
l4:
	new int,igmexportan
	push "igmexportan:"
	push 0
	cthis readcfg
	pop igmexportan
	new int,igmimportan
	push "igmimportan:"
	push 0
	cthis readcfg
	pop igmimportan
	new int,igmenablesave
	push "igmenablesave:"
	push 0
	cthis readcfg
	pop igmenablesave
	new int,igmdelay
	push "igmdelay:"
	call engine,getloopdelay
	cthis readcfg
	pop igmdelay
	new int,igmwinlocal
	push "igmwinlocal:"
	push 0
	cthis readcfg
	pop igmwinlocal
	new int,igmmac
	push "igmmac:"
	push 0
	cthis readcfg
	pop igmmac
	new int,igmipad
	push "igmipad:"
	push 0
	cthis readcfg
	pop igmipad
	new int,igmiphone
	push "igmiphone:"
	push 0
	cthis readcfg
	pop igmiphone
	new int,igmandroid
	push "igmandroid:"
	push 0
	cthis readcfg
	pop igmandroid
	new string,sgmdeveloper
	push "sgmdeveloper:"
	push "Dagiel"
	cthis readcfg
	pop sgmdeveloper
	new string,sgmproject
	push "sgmproject:"
	call dbconf,dbget
	pop sgmproject
	method isapple
	push igmipad
	cmp0
	jne l6
	push igmmac
	cmp0
	jne l6
	push igmiphone
	jmp l7
l5:
	push 0
	jmp l7
l6:
	push 1
l7:
	end method
	method checktouchpad
	push igmipad
	cmp0
	jne l9
	push igmiphone
	cmp0
	jne l9
	push igmandroid
	jmp l10
l8:
	push 0
	jmp l10
l9:
	push 1
l10:
	end method
	new int,igmappw
	new int,igmapph
	call engine,getappsize
	pop igmapph
	pop igmappw
	new int,igmoffsetx
	new int,igmoffsety
	call engine,getscreenoffset
	pop igmoffsety
	pop igmoffsetx
	new int,iResX
	new int,iResY
	call engine,getscreenres
	pop iResY
	pop iResX
	new real,rgmscalex
	new real,rgmscaley
	call engine,getscreenscale
	pop rgmscaley
	pop rgmscalex
	new int,i1024offsetx
	push 171
	spushs
	spop $h
	call $h,igetsc
	pop i1024offsetx
	method getxoffset
	push igmandroid
	cmp0
	je l12
	call engine,getxandro
	push igmoffsetx
	cmpjl
	cmp0
	je l14
	push igmoffsetx
	jmp l13
l14:
	call engine,getxandro
l13:
	jmp l11
l12:
	push igmoffsetx
l11:
	end method
	method getappcenter
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method edgeex
	push iResX
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	end method
	method edgeey
	push iResY
	push igmoffsety
	pop $b
	popax
	add $a,$b
	end method
	method getwinpath
	localstring $1
	pop $1
	localstring $2
	push "appdata"
	call engine,getspecialpath
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l16
	push $2
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	jmp l15
l16:
	push $1
l15:
	end method
	method getsavepath
	cthis isapple
	cmp0
	je l18
	call engine,getsavepath
	jmp l17
l18:
	push igmwinlocal
	cmp0
	je l20
	push "saves/"
	cthis getwinpath
	jmp l19
l20:
	push "saves/"
l19:
l17:
	end method
	method buildsavedir
	push igmwinlocal
	cmp0
	je l22
	cthis isapple
	neg
	jmp l24
l22:
	push 0
	jmp l24
l23:
	push 1
l24:
	cmp0
	je l25
	localstring $1
	push "appdata"
	call engine,getspecialpath
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l27
	push "/"
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	localint $2
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l30
	push $2
	push 1
	cmpje
	jmp l31
l29:
	push 0
	jmp l31
l30:
	push 1
l31:
	cmp0
	je l32
	push "/"
	push sgmproject
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l35
	push $2
	push 1
	cmpje
	jmp l36
l34:
	push 0
	jmp l36
l35:
	push 1
l36:
	cmp0
	je l37
	push "/saves"
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	popax
l37:
l32:
l27:
l25:
	end method
	cthis buildsavedir
	new string,A
	push "!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	new int,BYTE0
	push "0"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE0
	new int,BYTE9
	push "9"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE9
	new int,BYTEa
	push "a"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEa
	new int,BYTEz
	push "z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEz
	new int,BYTEA
	push "A"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEA
	new int,BYTEZ
	push "Z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEZ
	new int,BYTE_
	push "_"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE_
	new int,BYTESPACE
	push " "
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTESPACE
	method empty_func
	end method
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l39
	push $1
	push $2
	cthis varnew
l39:
	end method
	method vardelif
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l41
	push $1
	cthis vardel
l41:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global0"
	cthis addmethod
	end method
	method global0
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global1"
	cthis addmethod
	end method
	method global1
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l42:
	push A
	push $2
	cmpjne
	cmp0
	je l43
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l42
l43:
	end method
	method withlist2
	localstring $1
	pop $1
	localdef $2
	pop $2
l44:
	push A
	push $2
	cmpjne
	cmp0
	je l45
	localdef $3
	pop $3
	push $1
	spushs
	push $3
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l44
l45:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method vars2
	push "var2"
	cthis withlist2
	end method
	method builder_func
	localstring $1
	pop $1
	cthis getbuildername
	spushs
	cthis getbuildername
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l47
	push $1
	push "null"
	cmpje
	cmp0
	je l49
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l48
l49:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l48:
l47:
	end method
	method add_callfun
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],global2
	end method
	method global2
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localdef $4
	push $1
	push "_callfun_"
	pop $b
	popax
	add $a,$b
	pop $4
	push A
	push $4
	push "sob"
	pop $b
	popax
	add $a,$b
	push $2
	push $4
	push "sfun"
	pop $b
	popax
	add $a,$b
	push $3
	cthis vars2
	push $4
	push "global3"
	cthis addmethod
	push $4
	end method
	method global3
	localdef $1
	cthis methodname
	pop $1
	push $1
	push "sob"
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	push $1
	push "sfun"
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	cthis callfun
	end method
	method fullname_callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis getfullname
	push $1
	push $2
	cthis add_callfun
	end method
	method dprint
	localstring $1
	pop $1
	localint $2
	call engine,getstack
	pop $2
	push "stack="
	push $2
	pop $b
	popax
	add $a,$b
	push " : "
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	method printargs
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l50:
	push $1
	push 0
	cmpja
	cmp0
	je l51
	localdef $3
	pop $3
	push "("
	call $3,gettype
	pop $b
	popax
	add $a,$b
	push ") "
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push "  "
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	sub $1,1
	pop $1
	jmp l50
l51:
	push "args: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l52:
	push A
	push $3
	cmpjne
	cmp0
	je l53
	push $1
	neg
	cmp0
	je l55
	push $2
	push $3
	cmpje
	pop $1
l55:
	localdef $3
	pop $3
	jmp l52
l53:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l56:
	push $2
	push A
	cmpjne
	cmp0
	je l57
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l56
l57:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global4"
	cthis addmethod
	end method
	method global4
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l58:
	push $2
	push A
	cmpjne
	cmp0
	je l59
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l58
l59:
	end method
	method mresize
	cthis gettype
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	cthis getname
	spop $a
	 clparent [$a],resizemethods
	end method
	method times
	localstring $1
	pop $1
	push 0
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis for_plus
	end method
	method upto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_plus
	end method
	method downto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_minus
	end method
	method for_plus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l61
	ret
l61:
l62:
	push $1
	push $2
	cmpjle
	cmp0
	je l63
	jmp l65
l64:
	add $1,1
	pop $1
	jmp l62
l65:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l64
l63:
	end method
	method for_minus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l67
	ret
l67:
l68:
	push $1
	push $2
	cmpjae
	cmp0
	je l69
	jmp l71
l70:
	sub $1,1
	pop $1
	jmp l68
l71:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l70
l69:
	end method
	method double_for
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	push 0
	pop $5
l72:
	push $5
	push $1
	cmpjl
	cmp0
	je l73
	jmp l75
l74:
	add $5,1
	pop $5
	jmp l72
l75:
	push 0
	pop $4
l76:
	push $4
	push $2
	cmpjl
	cmp0
	je l77
	jmp l79
l78:
	add $4,1
	pop $4
	jmp l76
l79:
	push $3
	spushs
	push $5
	push $4
	spop $d
	cthis [$d]
	jmp l78
l77:
	jmp l74
l73:
	end method
	class classobjcounter
	method init
	localstring $1
	pop $1
	new string,_sprefix
	push $1
	pop _sprefix
	new int,_iile
	push 0
	pop _iile
	push "limit"
	push 0
	cthis var2
	end method
	method get
	push limit
	push 0
	cmpja
	cmp0
	je l81
	push _iile
	push limit
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop _iile
	jmp l80
l81:
	add _iile,1
	pop _iile
l80:
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	end method
	method getid
	localint $1
	pop $1
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	end method
	end class

	class classsignals
	method init
	end method
	method stdfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "classsignals0"
	spop $a
	call [$a],addmethod
	end method
	method classsignals0
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdstart
	localstring $1
	pop $1
	push $1
	spushs
	push "onstart"
	push "classsignals1"
	spop $a
	call [$a],addmethod
	end method
	method classsignals1
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdsigs
	localstring $1
	pop $1
	push $1
	cthis stdstart
	push $1
	cthis stdfinish
	end method
	method buildanima
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "onendframe"
	push "classsignals2"
	spop $a
	call [$a],addmethod
	end method
	method classsignals2
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildsnd
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	end method
	method buildtimer
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "ontick"
	push "classsignals3"
	spop $a
	call [$a],addmethod
	end method
	method classsignals3
	cthis getname
	push "_TICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildbut
	localstring $1
	pop $1
	push $1
	spushs
	push "onclick"
	push "classsignals4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onrel"
	push "classsignals5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveon"
	push "classsignals6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveoff"
	push "classsignals7"
	spop $a
	call [$a],addmethod
	end method
	method classsignals4
	cthis getname
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals5
	cthis getname
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals6
	cthis getname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals7
	cthis getname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	method unlocked
	push _block
	push 0
	cmpje
	end method
	method setaslocker
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlocker"
	push "classlocker0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlocker
	push $1
	spushs
	push "lock"
	push "lock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlock"
	push "unlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setlock"
	push "setlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getlock"
	push "getlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlocked"
	push "unlocked"
	spop $a
	call [$a],addmethod
	end method
	method classlocker0
	new int,_block
	push 1
	pop _block
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l82:
	push $2
	push $3
	cmpjl
	cmp0
	je l83
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l82
l83:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l85
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
l85:
	end method
	end module

	class collection
	method init
	localstring $1
	pop $1
	new string,stype
	push $1
	pop stype
	end method
	method type
	push stype
	ret
	end method
	end class

	class array
	parent collection
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	clparent collection,init
	new int,idim
	push $2
	pop idim
	new int,isize
	push $3
	pop isize
	new vector,vec
	push $1
	call vec,type
	push $2
	push 0
	cmpjle
	cmp0
	jne l88
	push $3
	push 0
	cmpjle
	jmp l89
l87:
	push 0
	jmp l89
l88:
	push 1
l89:
	cmp0
	je l90
	ret
l90:
	push $2
	call $3,pow
	push 0
	call vec,resize
	end method
	method getid
	localint $1
	push 0
	pop $1
	localint $2
	push idim
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l91:
	push $2
	push 0
	cmpja
	cmp0
	je l92
	popax
	add $1,$a
	pop $1
	push isize
	popax
	mul $1,$a
	pop $1
	sub $2,1
	pop $2
	jmp l91
l92:
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method get
	cthis getid
	call vec,get
	ret
	end method
	method set
	localdef $1
	pop $1
	cthis getid
	push $1
	call vec,set
	end method
	method getsize
	push isize
	ret
	end method
	method getdim
	push idim
	ret
	end method
	end class

	class stack
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vec
	push $1
	call vec,type
	push $1
	spushs
	spop $d
	new [$d],var
	end method
	method push
	localstring $1
	pop $1
	push $1
	call vec,add
	end method
	method top
	call vec,last
	ret
	end method
	method pop
	cthis top
	pop var
	call vec,size
	push 1
	pop $b
	popax
	sub $a,$b
	call vec,removeat
	push var
	ret
	end method
	method free
	call vec,free
	end method
	end class

	class map
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new int,isize
	push 0
	pop isize
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	neg
	cmp0
	je l94
	push $1
	cthis add
l94:
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],set
	end method
	method add
	localstring $1
	pop $1
	push stype
	spushs
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method get
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method remove
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method contains
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	ret
	end method
	end class

	class map2
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vn
	push "string"
	call vn,type
	new vector,vec
	push $1
	call vec,type
	end method
	method add
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,add
	push $2
	call vec,add
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,find
	push $2
	call vec,set
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call vn,contains
	ret
	end method
	method get
	localstring $1
	pop $1
	push $1
	call vn,find
	call vec,get
	ret
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call vn,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l96
	push $2
	call vec,removeat
	push $2
	call vn,removeat
l96:
	end method
	method free
	call vn,free
	call vec,free
	end method
	method print
	call vec,print
	call vn,print
	end method
	end class

	class Music
	method init
	new vector,vmus
	push "string"
	call vmus,type
	new int,ilastid
	push A
	push "musicvolume"
	push 100
	push "globalvolume"
	push 100
	cthis vars2
	new string,smixer
	push "gameapi"
	pop smixer
	end method
	method smixer
	push smixer
	end method
	method smixer=
	localstring $1
	pop $1
	push $1
	pop smixer
	cthis updatevolume
	end method
	method playdb
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	call vmus,free
l97:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l98
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l97
l98:
	push 0
	pop ilastid
	cthis play
	end method
	method playvec
	localstring $1
	localint $2
	pop $2
	pop $1
	call vmus,free
l99:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l100
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	call vmus,add
	add $2,1
	pop $2
	jmp l99
l100:
	push 0
	pop ilastid
	cthis play
	end method
	method playstr
	localstring $1
	pop $1
	push $1
	push " "
	call vmus,vecbuildfromstring
	push 0
	pop ilastid
	cthis play
	end method
	method play
	push ilastid
	call vmus,size
	cmpjae
	cmp0
	je l102
	ret
l102:
	localstring $1
	push MUSICPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
	push 0
	push 3
	call $1,gete
	push "ogg"
	cmpjne
	cmp0
	je l104
	push 0
	push 3
	call $1,gete
	push "wav"
	cmpjne
	jmp l106
l104:
	push 0
	jmp l106
l105:
	push 1
l106:
	cmp0
	je l107
	push ".ogg"
	popax
	add $1,$a
	pop $1
l107:
	push $1
	call engine,fileexist
	neg
	cmp0
	je l109
	push SFXPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
l109:
	add ilastid,1
	pop ilastid
	localint $2
	push 0
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	push 0
	pop $4
	push globalvolume
	pop musicvolume
	localint $5
	push ilastid
	pop $5
l110:
	push $5
	call vmus,size
	cmpjl
	cmp0
	je l111
	jmp l113
l112:
	add $5,1
	pop $5
	jmp l110
l113:
	localdef $6
	push $5
	call vmus,get
	pop $6
	push $6
	spushs
	push "-l"
	cmpst
	jne l115
	spop $a
	push 1
	pop $2
	jmp l114
l115:
	push "-v"
	cmpst
	je l117
	push "-vol"
	cmpst
	je l117
	jmp l116
l117:
	spop $a
	add $5,1
	pop $5
	push $5
	call vmus,get
	pop musicvolume
	jmp l114
l116:
	push "-fin"
	cmpst
	jne l118
	spop $a
	add $5,1
	pop $5
	push $5
	call vmus,get
	pop $3
	jmp l114
l118:
	push "-fout"
	cmpst
	jne l119
	spop $a
	add $5,1
	pop $5
	push $5
	call vmus,get
	pop $4
	jmp l114
l119:
	push "-p"
	cmpst
	jne l120
	spop $a
	jmp l114
l120:
	spop $a
	push $5
	pop ilastid
	call vmus,size
	pop $5
l114:
	jmp l112
l111:
	cthis updatevolume
	push $2
	cmp0
	je l122
	call vmus,size
	pop ilastid
	push smixer
	push "engine"
	cmpje
	cmp0
	je l124
	call engine,ismusicplaying
	cmp0
	je l124
	call engine,getactmusic
	push $1
	cmpje
	jmp l126
l124:
	push 0
	jmp l126
l125:
	push 1
l126:
	cmp0
	je l127
	jmp l123
l127:
	push smixer
	spushs
	push $1
	spop $a
	call [$a],playmusic
l123:
	jmp l121
l122:
	push smixer
	spushs
	push $1
	spop $a
	call [$a],loadmusic
	push $3
	cmp0
	je l129
	push smixer
	spushs
	push $3
	spop $a
	call [$a],fadeinmusic
	jmp l128
l129:
	push smixer
	spushs
	spop $a
	call [$a],startmusic
l128:
	push $4
	cmp0
	je l131
	push smixer
	spushs
	push $4
	spop $a
	call [$a],fadeoutmusic
l131:
l121:
	end method
	method getvol
	push globalvolume
	push musicvolume
	pop $b
	popax
	mul $a,$b
	push 100
	pop $b
	popax
	div $a,$b
	psax
	end method
	method fadeout
	localint $1
	pop $1
	push smixer
	spushs
	spop $a
	call [$a],ismusicplaying
	cmp0
	je l133
	push smixer
	spushs
	push $1
	spop $a
	call [$a],fadeoutmusic
	call vmus,size
	pop ilastid
l133:
	end method
	method updatevolume
	push smixer
	spushs
	cthis getvol
	spop $a
	call [$a],setmusicvol
	end method
	method isplaying
	push smixer
	spushs
	spop $a
	call [$a],ismusicplaying
	end method
	method getactmusic
	call engine,getactmusic
	end method
	method stop
	push smixer
	spushs
	push 0
	spop $a
	call [$a],endmusic
	end method
	end class

	new int,igmstate
	new string,sgmstate
	method printstate
	push "sgmstate = "
	push sgmstate
	pop $b
	popax
	add $a,$b
	push " ,  igmstate = "
	pop $b
	popax
	add $a,$b
	push igmstate
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	new int,igmdemo
	push "igmdemo:"
	push 0
	cthis readcfg
	pop igmdemo
	new int,igmbegin
	push 1
	pop igmbegin
	new int,igmsoundson
	push "igmsoundson:"
	push 1
	cthis readcfg
	pop igmsoundson
	new string,sgmfontfile
	push "sgmfontfile:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontfile
	new string,sgmfontmono
	push "sgmfontmono:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontmono
	new string,sgmfontmonobold
	push "sgmfontmonobold:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontmonobold
	new string,sgmfontbold
	push "sgmfontbold:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontbold
	new string,sgmfontitalic
	push "sgmfontitalic:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontitalic
	new string,SFXPATH
	push "sfxpath:"
	push "sounds/sfx/"
	cthis readcfg
	pop SFXPATH
	new string,BGRPATH
	push "sndbgrpath:"
	push "sounds/sfx/"
	cthis readcfg
	pop BGRPATH
	new string,MUSICPATH
	push "musicpath:"
	push "sounds/music/"
	cthis readcfg
	pop MUSICPATH
	new string,LANG
	new string,LANGDIR
	new string,SNDPATH
	method LANG=
	localdef $1
	pop $1
	push $1
	pop LANG
	push "sounds/"
	push LANG
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop SNDPATH
	push "lang/"
	push LANG
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop LANGDIR
	end method
	push "lang:"
	push "eng"
	cthis readcfg
	cthis LANG=
	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method _checkfont
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l135
	push sgmfontfile
	pop $1
l135:
	push ".ttf"
	call $1,contains
	cmp0
	je l137
	push $3
	spushs
	spop $e
	new font,[$e]
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	pop $1
l137:
	push $1
	end method
	method checkfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "_fnt"
	cthis _checkfont
	end method
	method begingame
	push igmbegin
	neg
	pop igmbegin
	push igmbegin
	neg
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpjle
	cmp0
	je l139
	ret
l139:
	sub $3,1
	pop $3
l140:
	push $3
	push 0
	cmpjae
	cmp0
	je l141
	push $1
	spushs
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l140
l141:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	push $1
	call engine,setpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	end method
	method getsndpath
	push _sclwavpath
	end method
	method getpath
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l143
	push 1
	call $1,strsubb
	jmp l142
l143:
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
l142:
	end method
	method pathload
	localstring $1
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	cthis load
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new anima,[$e]
	push 0
	push 4
	call $2,gete
	push ".pyz"
	cmpjne
	cmp0
	je l145
	push ".pyz"
	popax
	add $2,$a
	pop $2
l145:
	localdef $4
	push $2
	cthis getpath
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],load
	push igmdebug
	cmp0
	je l147
	push igmexportan
	cmp0
	je l149
	push $1
	spushs
	push "debug/"
	push 0
	call $4,length
	push "/"
	call $4,strgeteto
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	sub $a,$b
	call $4,getb
	pop $b
	popax
	add $a,$b
	push "/"
	call $4,strgeteto
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],saveimages
	jmp l148
l149:
	push igmimportan
	cmp0
	je l151
	push "debug/"
	push ".pyz"
	call $4,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push "0.png"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l153
	push $1
	spushs
	push $4
	spop $a
	call [$a],loadimages
l153:
l151:
l148:
l147:
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	spushs
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpja
	cmp0
	je l155
	localint $5
	push 0
	pop $5
l156:
	push $5
	push $4
	cmpjl
	cmp0
	je l157
	jmp l159
l158:
	add $5,1
	pop $5
	jmp l156
l159:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l158
l157:
l155:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpja
	cmp0
	je l161
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
l161:
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	spushs
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l162:
	push $6
	push $5
	cmpjl
	cmp0
	je l163
	jmp l165
l164:
	add $6,1
	pop $6
	jmp l162
l165:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	cmpjne
	cmp0
	je l167
	push $4
	spushs
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l167:
	jmp l164
l163:
	push $5
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	spushs
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new img,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	push MUSICPATH
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method snewsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	end method
	method _newsnd
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push "."
	call $2,contains
	neg
	cmp0
	je l169
	push ".wav"
	popax
	add $2,$a
	pop $2
l169:
	push $2
	call engine,fileexist
	neg
	cmp0
	je l171
	push "wav"
	call $2,strsubes
	push "ogg"
	pop $b
	popax
	add $a,$b
	pop $2
l171:
	push $3
	cmp0
	je l173
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
l173:
	push $1
	spushs
	push $2
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l175
	push $1
	push $2
	call subtitle,register
l175:
	end method
	method newsfx
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push SFXPATH
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis _newsnd
	end method
	method newbgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push BGRPATH
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis _newsnd
	end method
	method newbgrloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newbgr
	push $1
	cthis sndplayloop
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis _newsnd
	end method
	method newsndfree
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	push 1
	cthis _newsnd
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l176:
	push $8
	push $7
	cmpjl
	cmp0
	je l177
	jmp l179
l178:
	add $8,1
	pop $8
	jmp l176
l179:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new snd,[$e]
	push $6
	spushs
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l178
l177:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],setcycle
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	cmp0
	je l181
	push $1
	cthis looponfinish
	jmp l180
l181:
	push "H"
	call $2,contains
	cmp0
	je l183
	push $1
	cthis hideonfinish
l183:
l180:
	push "P"
	call $2,contains
	cmp0
	je l185
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l185:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l186:
	push $6
	push $4
	cmpjl
	cmp0
	je l187
	jmp l189
l188:
	add $6,1
	pop $6
	jmp l186
l189:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	cmpjne
	cmp0
	je l191
	push $3
	spushs
	push $5
	spop $a
	call [$a],add
l191:
	jmp l188
l187:
	push $4
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	push 0
	pop $5
l192:
	push $5
	push $4
	cmpjl
	cmp0
	je l193
	jmp l195
l194:
	add $5,1
	pop $5
	jmp l192
l195:
	push $1
	push $2
	push $5
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	push $3
	cthis newanframesgr
	popax
	jmp l194
l193:
	push $4
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	spushs
	spop $a
	call [$a],hide
	push $6
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],loadscritp
	end method
	method vargmset
	localstring $1
	localdef $2
	pop $2
	pop $1
	localstring $3
	call gameapi,getgamename
	pop $3
	push $3
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l197
	push $3
	spushs
	call $2,gettype
	push $1
	spop $a
	call [$a],varnew
l197:
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	end class

	new anima,anmsc
	class classadvmouse
	method init
	new string,sactac
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	push "onendframe"
	push "setnextframe"
	call anmsc,addmethod
	push "onsetframe"
	push "classadvmouse0"
	call anmsc,addmethod
	call anmsc,hide
	end method
	method classadvmouse0
	cthis hide
	end method
	method stdload
	push igmdebug
	neg
	cmp0
	je l199
	cthis checktouchpad
	jmp l201
l199:
	push 0
	jmp l201
l200:
	push 1
l201:
	cmp0
	je l202
	push "scripts/common/kursorypad.pyz"
	cthis load
	jmp l198
l202:
	push "scripts/common/cursors.pyz"
	cthis load
l198:
	end method
	method setnextframe
	call anmsc,ansetnextfr
	push "anmsc"
	call mouse,setcursor
	end method
	method setif
	localstring $1
	pop $1
	cthis get
	push $1
	cmpjne
	cmp0
	je l204
	push $1
	cthis set
l204:
	end method
	method set
	localstring $1
	pop $1
	push $1
	pop sactac
	push $1
	call anmsc,isplaying
	neg
	cmp0
	je l206
	push $1
	call anmsc,play
l206:
	push "anmsc"
	call mouse,setcursor
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setact
	push "active"
	cthis set
	end method
	method setbut
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	end method
	method lodx
	call anmsc,lodx
	end method
	method lody
	call anmsc,lody
	end method
	method refresh
	push sactac
	push "null"
	cmpjne
	cmp0
	je l208
	push sactac
	cthis set
l208:
	end method
	end class

	new classadvmouse,advmouse
	call advmouse,stdload
	cthis checktouchpad
	neg
	cmp0
	je l210
	call advmouse,setstd
	push "anmsc"
	call engine,stdbutcursor
l210:
	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l211
	push $1
	push $5
	cmpjle
	cmp0
	je l211
	push $2
	push $4
	cmpjae
	cmp0
	je l211
	push $2
	push $6
	cmpjle
	jmp l213
l211:
	push 0
	jmp l213
l212:
	push 1
l213:
	end method
	method isin2
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l214
	push $1
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l214
	push $2
	push $4
	cmpjae
	cmp0
	je l214
	push $2
	push $4
	push $6
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l216
l214:
	push 0
	jmp l216
l215:
	push 1
l216:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	end method
	method insurf
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $3
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis isin
	end method
	method issurfin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l218
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l218
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l218
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l218
	push $1
	push $5
	cmpjl
	cmp0
	je l219
	push $3
	push $7
	cmpja
	cmp0
	je l219
	push $2
	push $6
	cmpjl
	cmp0
	je l219
	push $4
	push $8
	cmpja
	jmp l221
l219:
	push 0
	jmp l221
l220:
	push 1
l221:
	jmp l222
l217:
	push 0
	jmp l222
l218:
	push 1
l222:
	end method
	method commonsurface
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis issurfin
	cmp0
	jne l224
	push $5
	push $6
	push $7
	push $8
	push $1
	push $2
	push $3
	push $4
	cthis issurfin
	jmp l225
l223:
	push 0
	jmp l225
l224:
	push 1
l225:
	end method
	method commonimgs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis commonsurface
	end method
	method surfwithinsurf
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l226
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l226
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l226
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l228
l226:
	push 0
	jmp l228
l227:
	push 1
l228:
	end method
	method imgwithinimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis surfwithinsurf
	end method
	end module

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	ret
	end method
	method ileny
	push ily
	ret
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	ret
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen5
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis ilen
	ret
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	ret
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	ret
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	ret
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	cmpjae
	cmp0
	je l229
	push ilx
	push $6
	cmpjle
	cmp0
	je l229
	push ily
	push $5
	cmpjae
	cmp0
	je l229
	push ily
	push $7
	cmpjle
	jmp l231
l229:
	push 0
	jmp l231
l230:
	push 1
l231:
	ret
	end method
	method ilodlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],lody
	push $2
	spushs
	spop $a
	call [$a],lodx
	push $2
	spushs
	spop $a
	call [$a],lody
	cthis ilen
	end method
	method iposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpos
	push $2
	spushs
	spop $a
	call [$a],getpos
	cthis ilen
	end method
	end module

	class classansearcher
	method init
	end method
	method _findnotr
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $6
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $7
l232:
	push $2
	push $6
	cmpjne
	cmp0
	je l233
	push $3
	push $7
	cmpjne
	jmp l235
l233:
	push 0
	jmp l235
l234:
	push 1
l235:
	cmp0
	je l236
	push $1
	spushs
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l238
	push $2
	push $3
	ret
l238:
	push $4
	popax
	add $2,$a
	pop $2
	push $5
	popax
	add $3,$a
	pop $3
	jmp l232
l236:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method firstnotrx1y
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	method firstnotrexy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrxy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrx1ey
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	end class

	method anfindnotr
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	cthis getex
	pop $5
	localint $6
	cthis getey
	pop $6
l239:
	push $1
	push $5
	cmpjne
	cmp0
	je l240
	push $2
	push $6
	cmpjne
	jmp l242
l240:
	push 0
	jmp l242
l241:
	push 1
l242:
	cmp0
	je l243
	push $1
	push $2
	push 0
	push 1
	cthis isin
	cmp0
	je l245
	push $1
	push $2
	ret
l245:
	push $3
	popax
	add $1,$a
	pop $1
	push $4
	popax
	add $2,$a
	pop $2
	jmp l239
l243:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method anfindalfa
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	cthis getex
	pop $6
	localint $7
	cthis getey
	pop $7
l246:
	push $1
	push $6
	cmpjne
	cmp0
	je l247
	push $2
	push $7
	cmpjne
	jmp l249
l247:
	push 0
	jmp l249
l248:
	push 1
l249:
	cmp0
	je l250
	push $1
	push $2
	push 0
	push 1
	cthis isin
	cmp0
	je l252
	localint $8
	push $1
	push $2
	cthis getrgba
	pop $8
	popax
	popax
	popax
	push $8
	push $5
	cmpje
	cmp0
	je l254
	push $1
	push $2
	ret
l254:
l252:
	push $3
	popax
	add $1,$a
	pop $1
	push $4
	popax
	add $2,$a
	pop $2
	jmp l246
l250:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method anfirstnotrx1y
	cthis getpx
	cthis getpy
	push 1
	push 0
	cthis anfindnotr
	ret
	end method
	method anfirstnotrexy1
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getpy
	push 0
	push 1
	cthis anfindnotr
	ret
	end method
	method anfirstnotrxy1
	cthis getpx
	cthis getpy
	push 0
	push 1
	cthis anfindnotr
	ret
	end method
	method anfirstnotrx1ey
	cthis getpx
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis anfindnotr
	ret
	end method
	class signal_pack
	method init
	end method
	method addsignals
	localstring $1
	pop $1
	push $1
	spushs
	push "operator<"
	push "signal_pack0"
	spop $a
	call [$a],addmethod
	end method
	method signal_pack0
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	end method
	end class

	class ImagePos
	method init
	end method
	method getex
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	end class

	class ImageVisible
	method init
	new int,_isvisible
	push 1
	pop _isvisible
	end method
	method isvisible
	push _isvisible
	end method
	method show
	push 1
	pop _isvisible
	end method
	method hide
	push 0
	pop _isvisible
	end method
	end class

	class Image
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push A
	push "getz"
	push 0
	push "getpx"
	push 0
	push "getpy"
	push 0
	push "getw"
	push 0
	push "geth"
	push 0
	push "isvisible"
	push 0
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "show"
	push "Image0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "hide"
	push "Image1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setz"
	push "Image2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpos"
	push "Image3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "move"
	push "Image4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getex"
	push "Image5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getey"
	push "Image6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcx"
	push "Image7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcy"
	push "Image8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isin"
	push "Image9"
	spop $a
	call [$a],addmethod
	end method
	method Image0
	push 1
	pop isvisible
	end method
	method Image1
	push 0
	pop isvisible
	end method
	method Image2
	localint $1
	pop $1
	push $1
	pop getz
	end method
	method Image3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop getpx
	push $2
	pop getpy
	end method
	method Image4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add getpx,$a
	pop getpx
	push $2
	popax
	add getpy,$a
	pop getpy
	end method
	method Image5
	push getpx
	push getw
	pop $b
	popax
	add $a,$b
	end method
	method Image6
	push getpy
	push geth
	pop $b
	popax
	add $a,$b
	end method
	method Image7
	push getpx
	push getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image8
	push getpy
	push geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image9
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	neg
	cmp0
	je l256
	push $3
	neg
	cmp0
	jne l259
	push $3
	cmp0
	je l260
	push isvisible
	jmp l262
l260:
	push 0
	jmp l262
l261:
	push 1
l262:
	jmp l263
l258:
	push 0
	jmp l263
l259:
	push 1
l263:
	cmp0
	je l264
	push $1
	push getpx
	cmpjae
	cmp0
	je l265
	push $1
	cthis getex
	cmpjl
	cmp0
	je l265
	push $2
	push getpy
	cmpjae
	cmp0
	je l265
	push $2
	cthis getey
	cmpjl
	jmp l267
l265:
	push 0
	jmp l267
l266:
	push 1
l267:
	jmp l257
l264:
	push 0
l257:
	jmp l255
l256:
	push 0
l255:
	end method
	end class

	class anima_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "_clanbuildpomvars"
	push "anima_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_clanbuildpomvars
	push $1
	spushs
	push "setbpos"
	push "anima_pack1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "saverelpos"
	push "anima_pack2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrelpos"
	push "anima_pack3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssaverelpos"
	push "anima_pack4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssetrelpos"
	push "anima_pack5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rplay"
	push "anima_pack6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setcpos"
	push "anima_pack7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator="
	push "anima_pack8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator=="
	push "anima_pack9"
	spop $a
	call [$a],addmethod
	push $1
	cthis addsignals
	end method
	method anima_pack0
	new int,_ixp
	new int,_iyp
	end method
	method anima_pack1
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anima_pack2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method anima_pack3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack4
	call mouse,getpos
	cthis saverelpos
	end method
	method anima_pack5
	call mouse,getpos
	cthis setrelpos
	end method
	method anima_pack6
	localstring $1
	pop $1
	push $1
	cthis isplaying
	neg
	cmp0
	je l269
	push $1
	cthis play
l269:
	end method
	method anima_pack7
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack8
	localstring $1
	pop $1
	push $1
	cthis copy
	end method
	method anima_pack9
	localstring $1
	pop $1
	cthis actionnr
	push $1
	spushs
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l270
	cthis framenr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l272
l270:
	push 0
	jmp l272
l271:
	push 1
l272:
	end method
	end class

	class timer_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	cthis addsignals
	end method
	end class

	class vector_pack
	method init
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l273:
	push $2
	cthis size
	cmpjl
	cmp0
	je l274
	jmp l276
l275:
	add $2,1
	pop $2
	jmp l273
l276:
	push $1
	spushs
	push $2
	cthis get
	spop $d
	cthis [$d]
	jmp l275
l274:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "each"
	push "each"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator-"
	push "vector_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator+"
	push "vector_pack1"
	spop $a
	call [$a],addmethod
	end method
	method vector_pack0
	localdef $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method vector_pack1
	localdef $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	end class

	method new_object
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $1
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	 clparent [$a],resizemethods
	end method
	method new_anima
	localstring $1
	pop $1
	push "anima"
	push $1
	cthis new_object
	end method
	method new_vector
	localstring $1
	pop $1
	push "vector"
	push $1
	cthis new_object
	end method
	class classanfilter
	method init
	end method
	method buildanfilter
	new filter,ft
	cthis getname
	call ft,link
	push 1
	call ft,setpivottype
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "buildanfilter"
	push "buildanfilter"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildanfilter
	push $1
	spushs
	push "setopacity"
	push "classanfilter0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setzoom"
	push "classanfilter1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setangle"
	push "classanfilter2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getangle"
	push "classanfilter3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rotate"
	push "classanfilter4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpivottype"
	push "classanfilter5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlink"
	push "classanfilter6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "link"
	push "classanfilter7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "blend"
	push "classanfilter8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mask"
	push "classanfilter9"
	spop $a
	call [$a],addmethod
	end method
	method classanfilter0
	localint $1
	pop $1
	push $1
	call ft,setopacity
	end method
	method classanfilter1
	localreal $1
	pop $1
	push $1
	call ft,setzoom
	end method
	method classanfilter2
	localreal $1
	pop $1
	push $1
	call ft,setangle
	end method
	method classanfilter3
	call ft,getangle
	ret
	end method
	method classanfilter4
	localreal $1
	pop $1
	push $1
	call ft,rotate
	end method
	method classanfilter5
	localint $1
	pop $1
	push $1
	call ft,setpivottype
	end method
	method classanfilter6
	call ft,unlink
	end method
	method classanfilter7
	cthis getname
	call ft,link
	end method
	method classanfilter8
	localstring $1
	pop $1
	push $1
	call ft,blend
	end method
	method classanfilter9
	localstring $1
	pop $1
	push $1
	call ft,mask
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l277:
	push $1
	push iile
	cmpjl
	cmp0
	je l278
	jmp l280
l279:
	add $1,1
	pop $1
	jmp l277
l280:
	push $1
	call _vs,get
	neg
	cmp0
	je l282
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
l282:
	jmp l279
l278:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _san
	call $1,strsubbs
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	method allfree
	call _vs,vecsum
	push 0
	cmpje
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l284
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l286
	spop $a
	push $1
	cthis copy
	jmp l285
l286:
	push "gmobjvec"
	cmpst
	jne l287
	spop $a
	push $1
	cthis copy
	jmp l285
l287:
	push "gmimgvec"
	cmpst
	jne l288
	spop $a
	push $1
	cthis copy
	jmp l285
l288:
	spop $a
	cthis free
	push $1
	cthis add
l285:
	jmp l283
l284:
	cthis free
	push $1
	cthis add
l283:
	end method
	method save
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l290
	push $1
	call lsim,save
l290:
	end method
	method load
	localstring $1
	pop $1
	push $1
	call lsim,load
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method removegr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l291:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l292
	jmp l294
l293:
	add $2,1
	pop $2
	jmp l291
l294:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis remove
	jmp l293
l292:
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l295:
	push $2
	cthis size
	cmpjl
	cmp0
	je l296
	jmp l298
l297:
	add $2,1
	pop $2
	jmp l295
l298:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l297
l296:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l299:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l300
	jmp l302
l301:
	add $2,1
	pop $2
	jmp l299
l302:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l301
l300:
	end method
	method addgroups
	push "addgr"
	cthis withlist
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	end method
	method empty
	cthis size
	push 0
	cmpje
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	end method
	method print
	push ""
	call engine,print
	push "------ type("
	cthis gettype
	pop $b
	popax
	add $a,$b
	push ") "
	pop $b
	popax
	add $a,$b
	cthis getname
	pop $b
	popax
	add $a,$b
	push " ------"
	pop $b
	popax
	add $a,$b
	call engine,print
	call lsim,print
	push "------ end ------"
	call engine,print
	push ""
	call engine,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	end method
	method set
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,set
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method additer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l303:
	push $3
	push 0
	cmpja
	cmp0
	je l304
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	sub $3,1
	pop $3
	jmp l303
l304:
	end method
	method buildarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newarray
	push $2
	push 0
	push $3
	cthis additer
	end method
	method deleteall
	localint $1
	push 0
	pop $1
l305:
	push $1
	cthis size
	cmpjl
	cmp0
	je l306
	jmp l308
l307:
	add $1,1
	pop $1
	jmp l305
l308:
	push $1
	cthis get
	spushs
	spop $d
	delete [$d]
	jmp l307
l306:
	end method
	method deleteallgm
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l309:
	push $2
	cthis size
	cmpjl
	cmp0
	je l310
	jmp l312
l311:
	add $2,1
	pop $2
	jmp l309
l312:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],vardel
	jmp l311
l310:
	end method
	method deleteallgmobj
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l313:
	push $2
	cthis size
	cmpjl
	cmp0
	je l314
	jmp l316
l315:
	add $2,1
	pop $2
	jmp l313
l316:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],deletegmobj
	jmp l315
l314:
	end method
	method lockall
	push "lock"
	cthis eval
	end method
	method unlockall
	push "unlock"
	cthis eval
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l318
	push $1
	call lsim,add
l318:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l319:
	push $2
	push $1
	cmpjne
	cmp0
	je l320
	push $2
	cthis addbegin
	pop $2
	jmp l319
l320:
	end method
	method addlist
	push A
	cthis sepadd
	end method
	method removelist
	push "remove"
	cthis withlist
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l322
	push $1
	cthis addbegin
	jmp l321
l322:
	push $2
	push $3
	cmpjae
	cmp0
	je l324
	push $1
	cthis add
	jmp l323
l324:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l325:
	push $4
	push $2
	cmpja
	cmp0
	je l326
	jmp l328
l327:
	sub $4,1
	pop $4
	jmp l325
l328:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l327
l326:
	push $2
	push $1
	cthis set
l323:
l321:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removefirst
	push 0
	call lsim,removeat
	end method
	method removelast
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l329:
	push $1
	cthis contains
	cmp0
	je l330
	push $1
	cthis remove
	jmp l329
l330:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l331:
	push $2
	cthis size
	cmpjl
	cmp0
	je l332
	jmp l334
l333:
	add $2,1
	pop $2
	jmp l331
l334:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l336
	push $2
	cthis removeat
l336:
	jmp l333
l332:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l337:
	push $2
	push $3
	cmpjle
	cmp0
	je l338
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l337
l338:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l340
	call $1,rand
	cthis get
	jmp l339
l340:
	push "null"
l339:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l342
	localint $3
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l343:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l344
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l346
	push "null"
	ret
l346:
	jmp l343
l344:
	push $3
	cthis get
	jmp l341
l342:
	push "null"
l341:
	end method
	method buildfullvars
	push "gmobjvec0"
	cthis each
	end method
	method gmobjvec0
	localdef $1
	pop $1
	cthis buildfullname
	end method
	method buildvars
	push "gmobjvec1"
	cthis each
	end method
	method gmobjvec1
	localdef $1
	pop $1
	cthis getname
	cthis addtogamevars
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l348
l349:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l350
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l349
l350:
l348:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method isplaying
	localint $1
	push 0
	pop $1
l351:
	push $1
	cthis size
	cmpjl
	cmp0
	je l352
	jmp l354
l353:
	add $1,1
	pop $1
	jmp l351
l354:
	push $1
	cthis get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],isplaying
	cmp0
	je l356
	push 1
	ret
l356:
	jmp l353
l352:
	push 0
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l357:
	push $5
	push 0
	cmpjae
	cmp0
	je l358
	jmp l360
l359:
	sub $5,1
	pop $5
	jmp l357
l360:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l362
	push $5
	call lsim,get
	ret
l362:
	jmp l359
l358:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l363:
	push $5
	push 0
	cmpjae
	cmp0
	je l364
	jmp l366
l365:
	sub $5,1
	pop $5
	jmp l363
l366:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l368
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l368:
	jmp l365
l364:
	push 0
	ret
	end method
	method setframe
	localdef $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l369:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l370
	jmp l372
l371:
	add $2,1
	pop $2
	jmp l369
l372:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l371
l370:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l373:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l374
	jmp l376
l375:
	add $3,1
	pop $3
	jmp l373
l376:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l375
l374:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l377:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l378
	jmp l380
l379:
	add $4,1
	pop $4
	jmp l377
l380:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l379
l378:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l381:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l382
	jmp l384
l383:
	add $5,1
	pop $5
	jmp l381
l384:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l383
l382:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l385:
	push $3
	cthis size
	cmpjl
	cmp0
	je l386
	jmp l388
l387:
	add $3,1
	pop $3
	jmp l385
l388:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l390
	push $3
	ret
l390:
	jmp l387
l386:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l391:
	push $3
	cthis size
	cmpjl
	cmp0
	je l392
	jmp l394
l393:
	add $3,1
	pop $3
	jmp l391
l394:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l396
	push $3
	ret
l396:
	jmp l393
l392:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l397:
	push $2
	cthis size
	cmpjl
	cmp0
	je l398
	jmp l400
l399:
	add $2,1
	pop $2
	jmp l397
l400:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l399
l398:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l401:
	push $3
	cthis size
	cmpjl
	cmp0
	je l402
	jmp l404
l403:
	add $3,1
	pop $3
	jmp l401
l404:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l403
l402:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l405:
	push $4
	cthis size
	cmpjl
	cmp0
	je l406
	jmp l408
l407:
	add $4,1
	pop $4
	jmp l405
l408:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l407
l406:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l409:
	push $2
	cthis size
	cmpjl
	cmp0
	je l410
	jmp l412
l411:
	add $2,1
	pop $2
	jmp l409
l412:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l414
	push 0
	ret
l414:
	jmp l411
l410:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l416
	ret
l416:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l417:
	push $6
	cthis size
	cmpjl
	cmp0
	je l418
	jmp l420
l419:
	add $6,1
	pop $6
	jmp l417
l420:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l422
	push $6
	pop $3
	push $5
	pop $4
l422:
	jmp l419
l418:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l424
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l425
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l427
l425:
	push 0
	jmp l427
l426:
	push 1
l427:
	jmp l428
l423:
	push 0
	jmp l428
l424:
	push 1
l428:
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	new string,sanload
	push "null"
	pop sanload
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	end method
	method getposy
	push _iy
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	end method
	method getpy
	push _iy
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getz
	push _iz
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l430
	push _ix
	ret
l430:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l431:
	push $4
	push $1
	cmpjl
	cmp0
	je l432
	jmp l434
l433:
	add $4,1
	pop $4
	jmp l431
l434:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l436
	push $3
	pop $2
l436:
	jmp l433
l432:
	push $2
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l438
	push _iy
	ret
l438:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l439:
	push $4
	push $1
	cmpjl
	cmp0
	je l440
	jmp l442
l441:
	add $4,1
	pop $4
	jmp l439
l442:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l444
	push $3
	pop $2
l444:
	jmp l441
l440:
	push $2
	end method
	method _getpx
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l446
	push _ix
	ret
l446:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l447:
	push $4
	push $1
	cmpjl
	cmp0
	je l448
	jmp l450
l449:
	add $4,1
	pop $4
	jmp l447
l450:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l452
	push $3
	pop $2
l452:
	jmp l449
l448:
	push $2
	end method
	method _getpy
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l454
	push _iy
	ret
l454:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l455:
	push $4
	push $1
	cmpjl
	cmp0
	je l456
	jmp l458
l457:
	add $4,1
	pop $4
	jmp l455
l458:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l460
	push $3
	pop $2
l460:
	jmp l457
l456:
	push $2
	end method
	method _getw
	cthis getex
	cthis _getpx
	pop $b
	popax
	sub $a,$b
	end method
	method _geth
	cthis getey
	cthis _getpy
	pop $b
	popax
	sub $a,$b
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l462
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l462:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l463:
	push $3
	cthis size
	cmpjl
	cmp0
	je l464
	jmp l466
l465:
	add $3,1
	pop $3
	jmp l463
l466:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l465
l464:
	end method
	method nplay
	localint $1
	pop $1
	push "play"
	push $1
	cthis eval1
	end method
	method txtreset
	localint $1
	push 0
	pop $1
l467:
	push $1
	cthis size
	cmpjl
	cmp0
	je l468
	jmp l470
l469:
	add $1,1
	pop $1
	jmp l467
l470:
	push $1
	cthis get
	spushs
	push ""
	spop $a
	call [$a],txtset
	jmp l469
l468:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l471:
	push $5
	push 0
	cmpjae
	cmp0
	je l472
	jmp l474
l473:
	sub $5,1
	pop $5
	jmp l471
l474:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l476
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l476:
	jmp l473
l472:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method isinfunc
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l477:
	push $4
	push 0
	cmpjae
	cmp0
	je l478
	jmp l480
l479:
	sub $4,1
	pop $4
	jmp l477
l480:
	push $4
	call lsim,get
	spushs
	push $3
	spushs
	push $1
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l482
	push $4
	pop _ifound
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	ret
l482:
	jmp l479
l478:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method isincut
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l483:
	push $5
	push 0
	cmpjae
	cmp0
	je l484
	jmp l486
l485:
	sub $5,1
	pop $5
	jmp l483
l486:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],withincut
	cmp0
	je l488
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l490
l488:
	push 0
	jmp l490
l489:
	push 1
l490:
	cmp0
	je l491
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l491:
	jmp l485
l484:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method withincut
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push $1
	push "gmimgvec0"
	cthis ineach
	pop $1
	pop $2
	end method
	method gmimgvec0
	localdef $1
	pop $1
	localint $2
	pop $2
	localint $3
	pop $3
	push $2
	push $3
	cthis withincut
	push $3
	push $2
	end method
	method findif
	localstring $1
	pop $1
	push $1
	push 1
	cthis _find
	end method
	method getfound
	push _ifound
	end method
	method getsfound
	push _ifound
	cthis get
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findsfr
	localstring $1
	pop $1
	push "framename"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "anactnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec1"
	cthis find_closest
	end method
	method gmimgvec1
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method getsac
	localstring $1
	pop $1
	push $1
	cthis findsac
	cthis get
	end method
	method getsacfr
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l492:
	push $3
	cthis size
	cmpjl
	cmp0
	je l493
	jmp l495
l494:
	add $3,1
	pop $3
	jmp l492
l495:
	push $3
	cthis get
	spushs
	spop $a
	call [$a],actionname
	push $1
	cmpje
	cmp0
	je l497
	push $3
	cthis get
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpje
	jmp l499
l497:
	push 0
	jmp l499
l498:
	push 1
l499:
	cmp0
	je l500
	push $3
	cthis get
	ret
l500:
	jmp l494
l493:
	push "null"
	end method
	method blitto
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l501:
	push $2
	cthis size
	cmpjl
	cmp0
	je l502
	jmp l504
l503:
	add $2,1
	pop $2
	jmp l501
l504:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],blit
	jmp l503
l502:
	end method
	method sortz
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l505:
	push $2
	cthis size
	cmpjl
	cmp0
	je l506
	jmp l508
l507:
	add $2,1
	pop $2
	jmp l505
l508:
	push $2
	cthis get
	spushs
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	jmp l507
l506:
	end method
	method ancopies
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l509:
	push $3
	push $2
	cmpjl
	cmp0
	je l510
	jmp l512
l511:
	add $3,1
	pop $3
	jmp l509
l512:
	push GAME
	spushs
	push $1
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],copyanima
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l511
l510:
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method addsrcanima
	localstring $1
	pop $1
	push "srcanima"
	push $1
	cthis var2
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l514
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l516
	new vector,_vtmp
	push "string"
	call _vtmp,type
	push $1
	push "/"
	call _vtmp,vecbuildfromstring
	push "an"
	call _vtmp,last
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	delete _vtmp
	jmp l515
l516:
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
l515:
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l513
l514:
	push $1
	pop $3
l513:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l518
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l517
l518:
	push $1
	pop $3
l517:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method deleteloaded
	cthis deleteallgm
	push sanload
	push "null"
	cmpjne
	cmp0
	je l520
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l520:
	end method
	method deleteinit
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l521:
	push $2
	cthis size
	cmpjl
	cmp0
	je l522
	jmp l524
l523:
	add $2,1
	pop $2
	jmp l521
l524:
	localdef $3
	push $2
	cthis get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],gettype
	push "gmimgvec"
	cmpje
	cmp0
	je l526
	push $3
	spushs
	spop $a
	call [$a],deleteinit
l526:
	push $1
	spushs
	push $3
	spop $a
	call [$a],vardel
	jmp l523
l522:
	push sanload
	push "null"
	cmpjne
	cmp0
	je l528
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l528:
	end method
	end class

	class gmadvvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l529:
	push $5
	push 0
	cmpjae
	cmp0
	je l530
	jmp l532
l531:
	sub $5,1
	pop $5
	jmp l529
l532:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],butisin
	cmp0
	je l534
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l534:
	jmp l531
l530:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	end class

	class gmmaskvec
	parent gmadvvec
	method init
	clparent gmadvvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,butisin
	end method
	end class

	new int,igmsubtitle
	push "igmsubtitle:"
	push 0
	cthis readcfg
	pop igmsubtitle
	new int,igmlektor
	push "igmlektor:"
	push 1
	cthis readcfg
	pop igmlektor
	new int,igmchardelay
	push "igmchardelay:"
	push 100
	cthis readcfg
	pop igmchardelay
	new int,igmsubmindelay
	push 2000
	push "igmsubmindelay:"
	push 2000
	cthis readcfg
	push 200000
	cthis between
	pop igmsubmindelay
	class Subtitle
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	localreal $3
	push 0.5
	pop $3
	new int,col0
	new int,col1
	new int,col2
	cthis restorecolor
	localstring $4
	push SNDPATH
	pop $4
	new string,ssubpos
	push "sgmsubtitlespos:"
	push "down"
	cthis readcfg
	pop ssubpos
	localdef $5
	push "sgmsubtitlespos:"
	push 2
	call dbconf,dbgets
	pop $5
	new int,isubpos
	push $5
	push "null"
	cmpjne
	cmp0
	je l536
	push $5
	jmp l535
l536:
	push 15
l535:
	pop isubpos
	new int,bshadow
	push "igmsubshadow:"
	push 0
	cthis readcfg
	pop bshadow
	new int,bblackbg
	push "igmsubblackbg:"
	push 170
	cthis readcfg
	pop bblackbg
	new int,iborx
	push $2
	pop iborx
	new int,ifontsize
	call fntsubtitle,getsize
	pop ifontsize
	new db,dbl
	push LANGDIR
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,load
	localint $6
	push 0
	pop $6
	localstring $5
l537:
	push $6
	call dbl,getrowsno
	cmpjl
	cmp0
	je l538
	push $6
	call dbl,getcolsno
	push 2
	cmpjl
	cmp0
	jne l541
	push $6
	push 0
	call dbl,get
	spushs
	push 0
	push 1
	spop $h
	call $h,getb
	push "#"
	cmpje
	jmp l542
l540:
	push 0
	jmp l542
l541:
	push 1
l542:
	cmp0
	je l543
	push $6
	call dbl,removerow
	jmp l539
l543:
	add $6,1
	pop $6
l539:
	jmp l537
l538:
	localstring $7
	new vector,v1
	push "string"
	call v1,type
	localint $8
	push iResX
	push 2
	push $2
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $3
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop $8
	localint $9
	localint $10
	localint $11
	push 0
	pop $11
	localint $6
	push 0
	pop $6
l544:
	push $6
	call dbl,getrowsno
	cmpjl
	cmp0
	je l545
	jmp l547
l546:
	add $6,1
	pop $6
	jmp l544
l547:
	push $4
	push $6
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	neg
	cmp0
	je l549
	push $4
	push $6
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".ogg"
	pop $b
	popax
	add $a,$b
	pop $5
l549:
	push $6
	push 0
	push $5
	call dbl,set
	push $6
	push 1
	call dbl,get
	pop $5
	push $5
	push " "
	call v1,vecbuildfromstring
	push ""
	pop $7
	push 1
	pop $9
	push 0
	pop $10
l550:
	push $10
	call v1,size
	cmpjl
	cmp0
	je l551
	jmp l553
l552:
	add $10,1
	pop $10
	jmp l550
l553:
	call $7,length
	push $10
	call v1,get
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	push $8
	cmpjle
	cmp0
	je l555
	push " "
	push $10
	call v1,get
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l554
l555:
	push $9
	push 1
	cmpje
	cmp0
	je l557
	push $6
	push $9
	push $7
	call dbl,set
	jmp l556
l557:
	push $6
	push $7
	call dbl,add
l556:
	push $10
	call v1,get
	pop $7
	add $9,1
	pop $9
l554:
	jmp l552
l551:
	push $9
	push 1
	cmpje
	cmp0
	je l559
	push $6
	push $9
	push $7
	call dbl,set
	jmp l558
l559:
	push $6
	push $7
	call dbl,add
l558:
	push $9
	push $11
	cmpja
	cmp0
	je l561
	push $9
	pop $11
l561:
	jmp l546
l545:
	new gmimgvec,grtxt
	new gmimgvec,grtxts
	localint $6
	push 0
	pop $6
l562:
	push $6
	push $11
	cmpjl
	cmp0
	je l563
	jmp l565
l564:
	add $6,1
	pop $6
	jmp l562
l565:
	push "txt"
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push bshadow
	cmp0
	je l567
	push "txts"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	push ""
	push "fntsubtitle"
	cthis black
	clparent classgame,newtext
	push $7
	call grtxts,add
	jmp l566
l567:
	push bblackbg
	cmp0
	je l569
	push "imgs"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	spushs
	spop $e
	new img,[$e]
	push $7
	call grtxts,add
l569:
l566:
	push $5
	push ""
	push "fntsubtitle"
	cthis getcolor
	clparent classgame,newtext
	push $5
	call grtxt,add
	jmp l564
l563:
	new db,dbsnd
	new timer,timtxt
	push 1
	call timtxt,settick
	push 1
	call timtxt,setcycle
	push "onfinish"
	push "Subtitle0"
	call timtxt,addmethod
	push 12000
	cthis setz
	end method
	method Subtitle0
	cthis cisplaying
	neg
	cmp0
	je l571
	cthis hidesubs
	jmp l570
l571:
	cthis play
l570:
	end method
	method geth
	call grtxts,size
	cmp0
	je l573
	call grtxts,first
	spushs
	spop $a
	call [$a],geth
	jmp l572
l573:
	call grtxt,size
	cmp0
	je l575
	call grtxt,last
	spushs
	spop $a
	call [$a],geth
	jmp l574
l575:
	push 0
l574:
l572:
	end method
	method reset
	cthis stop
	call dbsnd,free
	end method
	method hidesubs
	call grtxt,hide
	call grtxts,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	call grtxt,setz
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxts,setz
	end method
	method stop
	cthis hidesubs
	push 0
	call timtxt,stop
	end method
	method register
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push $2
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l577
	localdef $4
	push $1
	call dbsnd,findbyrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l579
	push $4
	push 1
	push $3
	call dbsnd,set
	jmp l578
l579:
	localdef $4
	call dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	call dbsnd,add
	push $4
	push $3
	call dbsnd,add
l578:
l577:
	end method
	method getiddialog
	localstring $1
	pop $1
	push $1
	call dbsnd,findbyrow
	end method
	method hasdialog
	localstring $1
	pop $1
	push $1
	cthis getiddialog
	push 0
	cmpjae
	end method
	method play
	localstring $1
	pop $1
	cthis stop
	localdef $2
	push $1
	call dbsnd,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l581
	localint $3
	push 0
	pop $3
	push $2
	push 1
	call dbsnd,get
	pop $2
	localdef $4
	push $2
	call dbl,getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	push 0
	push 0
	call grtxt,setpos
	localint $8
	push 2
	pop $8
	localint $9
	push 0
	pop $9
l582:
	push $9
	push $4
	cmpjl
	cmp0
	je l583
	jmp l585
l584:
	add $9,1
	pop $9
	jmp l582
l585:
	push $9
	call grtxt,get
	pop $5
	push $5
	spushs
	push $2
	push $9
	push 1
	pop $b
	popax
	add $a,$b
	call dbl,get
	push col0
	push col1
	push col2
	spop $a
	call [$a],txtsetcol
	push $5
	spushs
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,length
	popax
	add $3,$a
	pop $3
	push $5
	spushs
	push iResX
	push $5
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	push $9
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push $8
	pop $b
	popax
	add $a,$b
	push igmoffsety
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $5
	spushs
	spop $a
	call [$a],show
	push bshadow
	cmp0
	je l587
	push $9
	call grtxt,get
	pop $6
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	push col0
	push col1
	push col2
	spop $a
	call [$a],txtsetcol
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push 1
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	spop $a
	call [$a],show
l587:
	jmp l584
l583:
	push bblackbg
	cmp0
	je l589
	call grtxt,first
	pop $5
	call grtxts,first
	pop $6
	push ssubpos
	push "up"
	cmpje
	cmp0
	je l591
	push $6
	spushs
	push iResX
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxt,get
	spushs
	spop $a
	call [$a],getey
	cthis black
	push bblackbg
	spop $a
	call [$a],create
	push $6
	spushs
	push igmoffsetx
	push igmoffsety
	spop $a
	call [$a],setpos
	jmp l590
l591:
	push $6
	spushs
	push iResX
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxt,get
	spushs
	spop $a
	call [$a],getey
	push $5
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	cthis black
	push bblackbg
	spop $a
	call [$a],create
	push $6
	spushs
	push igmoffsetx
	push $5
	spushs
	spop $a
	call [$a],getpy
	push igmoffsety
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
l590:
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	spop $a
	call [$a],show
l589:
	push ssubpos
	push "up"
	cmpje
	cmp0
	je l593
	push 0
	pop $8
	jmp l592
l593:
	push iResY
	push $4
	push ifontsize
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push isubpos
	pop $b
	popax
	sub $a,$b
	pop $8
	push 0
	push $8
	call grtxt,move
	push bshadow
	cmp0
	jne l596
	push bblackbg
	jmp l597
l595:
	push 0
	jmp l597
l596:
	push 1
l597:
	cmp0
	je l598
	push 0
	push $8
	call grtxts,move
l598:
l592:
	call timtxt,play
	push igmchardelay
	popax
	mul $3,$a
	pop $3
	push $3
	push igmsubmindelay
	cmpjl
	cmp0
	je l600
	push igmsubmindelay
	jmp l599
l600:
	push $3
l599:
	jmp l580
l581:
	push 0
l580:
	end method
	method setcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop col0
	push $2
	pop col1
	push $3
	pop col2
	end method
	method getcolor
	push col0
	push col1
	push col2
	ret
	end method
	method restorecolor
	cthis white
	cthis setcolor
	end method
	end class

	push igmsubtitle
	cmp0
	je l602
	new font,fntsubtitle
	push "subtitles_font:"
	push sgmfontfile
	cthis readcfg
	push "subtitles_fontsize:"
	push 24
	spushs
	spop $h
	call $h,igetsc
	cthis readcfg
	call fntsubtitle,load
	push "subtitles_src:"
	push "subtitles.db"
	cthis readcfg
	push 50
	new Subtitle,subtitle
l602:
	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	new timer,timlektor
	call timlektor,classsound0
	push "setsndfin"
	push "classsound1"
	call timlektor,addmethod
	push "onfinish"
	push "classsound2"
	call timlektor,addmethod
	push igmsubtitle
	cmp0
	je l608
	call subtitle,reset
l608:
	end method
	method classsound0
	new int,bsndfin
	push 1
	pop bsndfin
	end method
	method classsound1
	localint $1
	pop $1
	push $1
	pop bsndfin
	end method
	method classsound2
	push bsndfin
	cmp0
	je l604
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l606
	push _csplay
	spushs
	spop $a
	call [$a],onfinish
l606:
	jmp l603
l604:
	push 1
	pop bsndfin
l603:
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	end method
	method cisactsnd
	localstring $1
	pop $1
	push $1
	push _csplay
	cmpje
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l610
	push $1
	cthis cbplay
	jmp l609
l610:
	cthis cgetactsnd
	push $1
	cmpjne
	cmp0
	je l612
	push $1
	cthis cbplay
l612:
l609:
	end method
	method cbselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	jne l615
	cthis cgetactsnd
	push $1
	cmpjne
	jmp l616
l614:
	push 0
	jmp l616
l615:
	push 1
l616:
	cmp0
	je l617
	push $1
	cthis cbplay
l617:
	end method
	method cbplay
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l619
	push 1
	cthis csplaystop
l619:
	push $1
	cthis cbsplay
	end method
	method cbsplay
	localstring $1
	pop $1
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l621
	push $1
	cthis csubplay
l621:
	end method
	method cbplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	cthis cbplay
	end method
	method cbplay2
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l623
	push 0
	cthis csplaystop
l623:
	push $1
	cthis cbsplay
	end method
	method crplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l625
	push $1
	cthis cbsplay
l625:
	end method
	method cbplayif
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l627
	push $1
	cthis cbplay
l627:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l629
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	jmp l631
l629:
	push 0
	jmp l631
l630:
	push 1
l631:
	cmp0
	je l632
	push $1
	cthis csubplay
l632:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call $2,rand
	push 0
	cmpje
	cmp0
	je l634
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
l634:
	end method
	method cplayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "c"
	push $1
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $d
	cthis [$d]
	push $2
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l636
	push $3
	push "null"
	cmpjne
	jmp l638
l636:
	push 0
	jmp l638
l637:
	push 1
l638:
	cmp0
	je l639
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l639:
	end method
	method cactsndstop
	localint $1
	pop $1
	cthis cisplaying
	cmp0
	je l641
	push $1
	cthis csplaystop
l641:
	end method
	method csplaystop
	localint $1
	pop $1
	call timlektor,isplaying
	cmp0
	je l643
	push $1
	call timlektor,setsndfin
	push 1
	call timlektor,stop
	jmp l642
l643:
	push _csplay
	spushs
	push $1
	spop $a
	call [$a],stop
l642:
	end method
	method cstopsnds
	localint $1
	pop $1
	call _csplay,in
	cmp0
	je l645
	cthis cisplaying
	jmp l647
l645:
	push 0
	jmp l647
l646:
	push 1
l647:
	cmp0
	je l648
	push $1
	cthis cactsndstop
l648:
	end method
	method cisplaying
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l650
	call timlektor,isplaying
	cmp0
	jne l652
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l653
l651:
	push 0
	jmp l653
l652:
	push 1
l653:
	jmp l649
l650:
	push 0
l649:
	end method
	method cisplayingsnd
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l655
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l654
l655:
	push 0
l654:
	end method
	method csubplay
	localstring $1
	pop $1
	push igmsubtitle
	cmp0
	je l657
	localint $2
	push igmlektor
	pop $2
	push $1
	spushs
	spop $a
	call [$a],loaded
	neg
	cmp0
	je l659
	push 0
	pop igmlektor
l659:
	localdef $3
	push $1
	call subtitle,play
	pop $3
	push igmlektor
	cmp0
	jne l662
	push $3
	push 0
	cmpjle
	jmp l663
l661:
	push 0
	jmp l663
l662:
	push 1
l663:
	cmp0
	je l664
	push $1
	spushs
	spop $a
	call [$a],play
	jmp l660
l664:
	push $3
	call timlektor,setdelay
	call timlektor,play
l660:
	push $2
	pop igmlektor
	jmp l656
l657:
	push $1
	spushs
	spop $a
	call [$a],play
l656:
	end method
	method cisdialogplaying
	cthis cisplaying
	cmp0
	je l665
	cthis cgetactsnd
	call subtitle,hasdialog
	jmp l667
l665:
	push 0
	jmp l667
l666:
	push 1
l667:
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	je l669
	push 0
	pop iile
	ret
l669:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l670:
	push $3
	push $2
	cmpjl
	cmp0
	je l671
	jmp l673
l672:
	add $3,1
	pop $3
	jmp l670
l673:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l672
l671:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	cmpjle
	cmp0
	je l675
	push 0
	pop iile
	ret
l675:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	cmpje
	cmp0
	je l677
	call iile,rand
	pop ilicz
l677:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l678:
	push $3
	push iile
	cmpjl
	cmp0
	je l679
	jmp l681
l680:
	add $3,1
	pop $3
	jmp l678
l681:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l680
l679:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	cmpjne
	cmp0
	je l683
	push splay
	spushs
	push $1
	spop $a
	call [$a],stop
l683:
	end method
	method isplaying
	push splay
	push "null"
	cmpjne
	cmp0
	je l685
	push splay
	spushs
	spop $a
	call [$a],isplaying
	jmp l684
l685:
	push 0
l684:
	end method
	method randplay
	localint $1
	pop $1
	call $1,rand
	push 0
	cmpje
	cmp0
	je l687
	cthis play
l687:
	end method
	method playid
	localint $1
	pop $1
	push $1
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	cthis play
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method reset
	push 0
	pop ilicz
	end method
	method rbgplay
	cthis isplaying
	neg
	cmp0
	je l689
	cthis bgplay
l689:
	end method
	method rplay
	cthis isplaying
	neg
	cmp0
	je l691
	cthis play
l691:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	spushs
	spop $a
	call [$a],play
	push itype
	push 0
	cmpje
	cmp0
	je l693
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l692
l693:
	push itype
	push 1
	cmpje
	cmp0
	je l695
	call iile,rand
	pop ilicz
l695:
l692:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l696:
	push $2
	push iile
	cmpjl
	cmp0
	je l697
	jmp l699
l698:
	add $2,1
	pop $2
	jmp l696
l699:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setvol
	jmp l698
l697:
	end method
	end class

	class SoundSource
	method init
	end method
	method setvol
	localstring $1
	localint $2
	localint $3
	localreal $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call $5,abs
	push $4
	cmpjae
	cmp0
	je l701
	push $1
	spushs
	push $3
	spop $a
	call [$a],setvol
	jmp l700
l701:
	push 1.0
	call $5,abs
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push 100
	cmpja
	cmp0
	je l703
	push 100
	pop $2
l703:
	push $1
	spushs
	push $2
	spop $a
	call [$a],setvol
l700:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,_iconstid
	new gmobjvec,_grsfxs
	end method
	method bkg=
	localdef $1
	pop $1
	push ".pyz"
	call $1,contains
	cmp0
	je l705
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l704
l705:
	push "imgbkg"
	push $1
	push 0
	cthis newimg
l704:
	end method
	method bgr=
	localdef $1
	pop $1
	push $1
	cthis csndbgr
	end method
	method path=
	localdef $1
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	end method
	method cycle=
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis cnewtimercyclefin
	end method
	method timer=
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	end method
	method timplay
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method _getflags
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
	push "L"
	call $1,contains
	cmp0
	je l707
	push "L"
	call $1,strremove
	push 1
	pop $2
l707:
	localdef $3
	push 0
	pop $3
	push "P"
	call $1,contains
	cmp0
	je l709
	push "P"
	call $1,strremove
	push 1
	pop $3
l709:
	localdef $4
	push 0
	pop $4
	push "H"
	call $1,contains
	cmp0
	je l711
	push "H"
	call $1,strremove
	push 1
	pop $4
l711:
	push $1
	push $2
	push $3
	push $4
	ret
	end method
	method img=
	localdef $1
	pop $1
	push $1
	cthis _build_img
	popax
	end method
	method getlangfile
	localstring $1
	pop $1
	localdef $2
	push 4
	call $1,strsube
	push "_"
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	push 0
	push 4
	call $1,gete
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	cthis getpath
	call engine,fileexist
	cmp0
	je l713
	push $2
	jmp l712
l713:
	push $1
l712:
	end method
	method _build_img
	localdef $1
	pop $1
	localdef $2
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
	push "G"
	call $1,contains
	cmp0
	je l715
	push "G"
	call $1,strremove
	push 1
	pop $5
l715:
	localdef $6
	push 0
	pop $6
	push " "
	call $1,contains
	cmp0
	je l717
	push " "
	call $1,strgetfrom
	pop $6
	push " "
	call $1,strgetto
	pop $1
l717:
	localstring $7
	push "/"
	call $1,contains
	cmp0
	je l719
	new vector,_v_sfile
	push "string"
	call _v_sfile,type
	push $1
	push "/"
	call _v_sfile,vecbuildfromstring
	call _v_sfile,last
	spushs
	push 4
	spop $h
	call $h,strsube
	pop $7
	delete _v_sfile
	jmp l718
l719:
	push 4
	call $1,strsube
	pop $7
l718:
	localstring $8
	push ".pyz"
	call $1,contains
	cmp0
	je l721
	push $5
	cmp0
	je l723
	push "gr"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	push $6
	cthis newgrimg
	jmp l722
l723:
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newanima
l722:
	jmp l720
l721:
	push "img"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newimg
l720:
	push $2
	cmp0
	je l725
	push $8
	spushs
	spop $a
	call [$a],anloopfin
l725:
	push $3
	cmp0
	je l727
	push $8
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l727:
	push $4
	cmp0
	je l729
	push $8
	spushs
	spop $a
	call [$a],hide
l729:
	push $8
	end method
	method imgsgr=
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	localdef $3
	pop $3
l730:
	push A
	push $3
	cmpjne
	cmp0
	je l731
	push $1
	spushs
	push $3
	cthis _build_img
	spop $a
	call [$a],add
	localdef $3
	pop $3
	jmp l730
l731:
	end method
	method imgs=
	push "img="
	cthis withlist
	end method
	method clone
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	cthis getname
	cthis gettype
	push $1
	spop $a
	call [$a],classgame0
	end method
	method classgame0
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	push $3
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method clones=
	push "clone"
	cthis withlist
	end method
	method list=
	localdef $1
	pop $1
	localdef $2
	pop $2
	push $1
	spushs
	spop $e
	new gmobjvec,[$e]
l732:
	push A
	push $2
	cmpjne
	cmp0
	je l733
	push $1
	spushs
	push $2
	spop $a
	call [$a],addbegin
	pop $2
	jmp l732
l733:
	end method
	method list2=
	localdef $1
	push "gmobjvec"
	cthis newconst
	pop $1
	push $1
	cthis list=
	push $1
	end method
	method debug=
	localdef $1
	pop $1
	push $1
	call engine,setdebugstate
	end method
	method sfx=
	localstring $1
	pop $1
	localint $2
	push "N"
	call $1,contains
	pop $2
	push $2
	cmp0
	je l735
	push "N"
	call $1,strremove
l735:
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	popax
	pop $4
	pop $3
	pop $1
	localdef $5
	push 100
	pop $5
	push " "
	call $1,contains
	cmp0
	je l737
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l737:
	localstring $6
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsfx
	push $6
	spushs
	push $5
	spop $a
	call [$a],setvol
	push $3
	cmp0
	je l739
	push $6
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l739:
	push $4
	cmp0
	je l741
	push $6
	spushs
	spop $a
	call [$a],play
	jmp l740
l741:
	push $2
	cmp0
	je l743
	push $6
	spushs
	spop $a
	call [$a],playloop
l743:
l740:
	push $6
	call _grsfxs,add
	end method
	method sfxs=
	push "sfx="
	cthis withlist
	end method
	method snd=
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsndfree
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method tickstart
	push "__timspeed"
	cthis hasvar
	neg
	cmp0
	je l745
	new TicksCounter,__timspeed
l745:
	call __timspeed,start
	end method
	method tickstop
	push "ticker: "
	call __timspeed,print
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis newbgr
	push "sndbgr"
	cthis sndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l747
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	push "imgkursor"
	pop $1
l747:
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call mouse,setcursor
	push $1
	call engine,stdbutcursor
	end method
	method newimgarray
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildarray
	end method
	method newfont
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new font,[$e]
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],load
	end method
	method monofont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontmono
	push $2
	cthis newfont
	end method
	method newfontbold
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontbold
	push $2
	cthis newfont
	end method
	method snewfont
	localstring $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "font"
	cthis newconst
	pop $3
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	ret
	end method
	method stdfont
	localint $1
	pop $1
	push sgmfontfile
	push $1
	cthis snewfont
	end method
	method stdmono
	localint $1
	pop $1
	push sgmfontmono
	push $1
	cthis snewfont
	end method
	method stdbold
	localint $1
	pop $1
	push sgmfontbold
	push $1
	cthis snewfont
	end method
	method getconstid
	add _iconstid,1
	pop _iconstid
	push _iconstid
	push 1
	pop $b
	popax
	sub $a,$b
	end method
	method newconst
	localstring $1
	pop $1
	localstring $2
	push "const"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getconstid
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $2
	ret
	end method
	method consttext
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $8
	push "text"
	cthis newconst
	pop $8
	localstring $9
	push $4
	cthis stdfont
	pop $9
	push $8
	spushs
	push $9
	spop $a
	call [$a],setfont
	push $8
	spushs
	push $1
	spop $a
	call [$a],set
	push $8
	spushs
	push $5
	push $6
	push $7
	spop $a
	call [$a],createtxt
	push $8
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $8
	ret
	end method
	method newtext
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	spushs
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	spop $a
	call [$a],setfont
	push $1
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	end method
	method newtextposz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	cthis newtext
	push $1
	spushs
	push $7
	push $8
	push $9
	spop $a
	call [$a],anposz
	end method
	method newgrimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	push $2
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l748:
	push $2
	push $3
	cmpjle
	cmp0
	je l749
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l748
l749:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	spushs
	spop $e
	new classancounter,[$e]
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l750:
	push $6
	push $5
	cmpjl
	cmp0
	je l751
	jmp l753
l752:
	add $6,1
	pop $6
	jmp l750
l753:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l752
l751:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l754:
	push $7
	push $5
	cmpjl
	cmp0
	je l755
	jmp l757
l756:
	add $7,1
	pop $7
	jmp l754
l757:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l756
l755:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l758:
	push $7
	push $5
	cmpjl
	cmp0
	je l759
	jmp l761
l760:
	add $7,1
	pop $7
	jmp l758
l761:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l760
l759:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	spushs
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l762:
	push $3
	push $4
	cmpjl
	cmp0
	je l763
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	cmpjne
	cmp0
	je l765
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	cmpje
	cmp0
	jne l768
	push $12
	push "sfx"
	cmpje
	jmp l769
l767:
	push 0
	jmp l769
l768:
	push 1
l769:
	cmp0
	je l770
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	cmpje
	cmp0
	je l772
	push $14
	push $13
	cthis newsfx
	jmp l771
l772:
	push $14
	push $13
	cthis newsnd
l771:
	push $7
	push $6
	cmpjl
	cmp0
	je l774
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l776
	push $14
	spushs
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l775
l776:
	push 0
	push 4
	call $12,gete
	push "play"
	cmpje
	cmp0
	je l778
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l777
l778:
	push $12
	push "vol"
	cmpje
	cmp0
	je l780
	push $14
	spushs
	push $13
	spop $a
	call [$a],setvol
l780:
l777:
l775:
l774:
	jmp l766
l770:
	push $12
	push "group"
	cmpje
	cmp0
	je l782
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	cmpjl
	cmp0
	je l784
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l786
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
l786:
	jmp l783
l784:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l783:
	jmp l781
l782:
	push $12
	push "bank"
	cmpje
	cmp0
	je l788
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	cmpjl
	cmp0
	je l790
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l792
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	spushs
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l791
l792:
	push $12
	push "vol"
	cmpje
	cmp0
	je l794
	push $14
	spushs
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
l794:
l791:
l790:
	jmp l787
l788:
	push $12
	push "method"
	cmpje
	cmp0
	je l796
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l797:
	push $8
	push $9
	cmpjle
	cmp0
	je l798
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l797
l798:
	jmp l795
l796:
	push $12
	push "singlebank"
	cmpje
	cmp0
	je l800
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l799
l800:
	push $12
	push "bgr"
	cmpje
	cmp0
	je l802
	push $14
	cthis csndbgr
	push $7
	push $6
	cmpjl
	cmp0
	je l804
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l806
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l806:
l804:
	jmp l801
l802:
	push $12
	push "music"
	cmpje
	cmp0
	je l808
	push $14
	cthis playmusic
	push $7
	push $6
	cmpjl
	cmp0
	je l810
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l812
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l812:
l810:
l808:
l801:
l799:
l795:
l787:
l781:
l766:
l765:
	add $3,1
	pop $3
	jmp l762
l763:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	method cgetscreenshoot
	localstring $1
	localreal $2
	pop $2
	pop $1
	push igmenablesave
	cmp0
	je l814
	new img,_imgsavebkg
	push iResX
	push iResY
	cthis white
	push 255
	call _imgsavebkg,create
	push 2000
	call _imgsavebkg,setz
	call _imgsavebkg,blitscreen
	push $2
	push 1.0
	cmpjne
	cmp0
	je l816
	new filter,_ftbg
	push "_imgsavebkg"
	call _ftbg,link
	push 1
	call _ftbg,setsmooth
	push $2
	call _ftbg,setzoom
l816:
	push 0
	push 0
	call _imgsavebkg,setpos
	new img,_im_1
	push $2
	push iResX
	pop $b
	popax
	mul $a,$b
	push $2
	push iResY
	pop $b
	popax
	mul $a,$b
	cthis white
	push 255
	call _im_1,create
	call _imgsavebkg,getpx
	call _imgsavebkg,getpy
	call _im_1,setpos
	push "_imgsavebkg"
	call _im_1,blit
	push $1
	call _im_1,save
	delete _im_1
	push $2
	push 1.0
	cmpjne
	cmp0
	je l818
	call _ftbg,unlink
	delete _ftbg
l818:
	delete _imgsavebkg
l814:
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l819:
	push $2
	push $3
	cmpjle
	cmp0
	je l820
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $5
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	cmpje
	cmp0
	je l822
	push $2
	ret
l822:
	add $2,1
	pop $2
	jmp l819
l820:
	push 1
	popax
	sub 0,$a
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	cmpjae
	cmp0
	je l824
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l824:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis build2
	end method
	method build2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new anima,[$e]
	push $5
	spushs
	push $1
	spop $a
	call [$a],load
	push $5
	spushs
	push $2
	spop $a
	call [$a],setz
	localint $6
	push $5
	spushs
	spop $a
	call [$a],nofactions
	pop $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $9
	localstring $10
	localstring $11
	localstring $12
	localstring $13
	localint $14
	push 0
	pop $14
l825:
	push $14
	push $6
	cmpjl
	cmp0
	je l826
	jmp l828
l827:
	add $14,1
	pop $14
	jmp l825
l828:
	push "null"
	pop $10
	push "null"
	pop $11
	push "null"
	pop $12
	push $5
	spushs
	push $14
	spop $a
	call [$a],nofframes
	pop $7
	push 1
	pop $8
l829:
	push $8
	push $7
	cmpjle
	cmp0
	je l830
	jmp l832
l831:
	add $8,1
	pop $8
	jmp l829
l832:
	push san
	push $9
	pop $b
	popax
	add $a,$b
	pop $13
	push $8
	push 1
	cmpje
	cmp0
	je l834
	push $13
	pop $10
	jmp l833
l834:
	push $8
	push 2
	cmpje
	cmp0
	je l836
	push $13
	pop $11
	jmp l835
l836:
	push $8
	push 3
	cmpje
	cmp0
	je l838
	push $13
	pop $12
l838:
l835:
l833:
	push $5
	push $13
	clparent newvars,copyanima
	push $13
	spushs
	push $14
	push $8
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $9,1
	pop $9
	jmp l831
l830:
	push $4
	push "null"
	cmpjne
	cmp0
	je l840
	push $4
	spushs
	push $5
	spushs
	push $14
	spop $a
	call [$a],nameofaction
	spop $a
	call [$a],contains
	jmp l842
l840:
	push 0
	jmp l842
l841:
	push 1
l842:
	cmp0
	je l843
	push $10
	spushs
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	jmp l839
l843:
	push $10
	push $11
	push $12
	push $3
	cthis addbut
l839:
	jmp l827
l826:
	push $5
	spushs
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l845
	push sfxmon
	spushs
	spop $a
	call [$a],play
l845:
	push _sfunmovon
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpje
	cmp0
	je l847
	ret
l847:
	push $1
	spushs
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $4
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	spushs
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l848:
	push $5
	push iilebut
	cmpjl
	cmp0
	je l849
	jmp l851
l850:
	add $5,1
	pop $5
	jmp l848
l851:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l850
l849:
	end method
	method print
	localint $1
	push 0
	pop $1
l852:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l853
	jmp l855
l854:
	add $1,1
	pop $1
	jmp l852
l855:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l854
l853:
	end method
	method setrect
	localstring $1
	localint $2
	push 0
	pop $2
l856:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l857
	jmp l859
l858:
	add $2,1
	pop $2
	jmp l856
l859:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getimg
	pop $1
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	spop $a
	call [$a],setrect
	jmp l858
l857:
	end method
	method setflags
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l860:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l861
	jmp l863
l862:
	add $3,1
	pop $3
	jmp l860
l863:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setflags
	jmp l862
l861:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l865
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	jmp l864
l865:
	push "null"
l864:
	ret
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l866:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l867
	jmp l869
l868:
	add $2,1
	pop $2
	jmp l866
l869:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l868
l867:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	cmpja
	cmp0
	je l871
	push iilebut
	pop $2
l871:
	localint $3
	push 0
	pop $3
l872:
	push $3
	push $2
	cmpjl
	cmp0
	je l873
	jmp l875
l874:
	add $3,1
	pop $3
	jmp l872
l875:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l874
l873:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method disabled
	push sbut
	push 0
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disabled
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method resetall
	localint $1
	push 0
	pop $1
l876:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l877
	jmp l879
l878:
	add $1,1
	pop $1
	jmp l876
l879:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setcursorpos
	jmp l878
l877:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l880:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l881
	jmp l883
l882:
	add $3,1
	pop $3
	jmp l880
l883:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setcursorpos
	jmp l882
l881:
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l885
	push $2
	spushs
	spop $a
	call [$a],getimg
	jmp l884
l885:
	push "null"
l884:
	ret
	end method
	method callimgfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getimg
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	cmpjne
	cmp0
	je l887
	push $3
	spushs
	push $2
	spop $a
	call [$a],setmouse
l887:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l889
	ret
l889:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	spushs
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	spushs
	push _sfcl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	spushs
	push _sfrl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l891
	push sfxmon
	spushs
	spop $a
	call [$a],play
l891:
	push _sobmn
	spushs
	push _sfmn
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	spushs
	push _sfmf
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l892:
	push $4
	push $3
	cmpjl
	cmp0
	je l893
	jmp l895
l894:
	add $4,1
	pop $4
	jmp l892
l895:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l894
l893:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	cmpje
	cmp0
	je l897
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l896
l897:
	push $5
	spushs
	push $2
	spop $a
	call [$a],_cbuildbutname
l896:
	push $4
	cmp0
	je l899
	push $5
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	spushs
	spop $a
	call [$a],hide
l899:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method _stdsndloop
	cthis play
	end method
	method __std_finish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	end method
	method strgetto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l901
	cthis get
	jmp l900
l901:
	push 0
	push $2
	cthis getb
l900:
	end method
	method strgeteto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis rfind
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l903
	cthis get
	jmp l902
l903:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
l902:
	end method
	method streq
	localstring $1
	pop $1
	cthis get
	push 0
	cthis length
	call $1,getb
	cmpje
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method strisbetween
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	localint $4
	push 0
	pop $4
l904:
	push $4
	cthis length
	cmpjl
	cmp0
	je l905
	jmp l907
l906:
	add $4,1
	pop $4
	jmp l904
l907:
	push $4
	cthis getbyte
	pop $3
	push $3
	push $1
	cmpjl
	cmp0
	jne l910
	push $3
	push $2
	cmpja
	jmp l911
l909:
	push 0
	jmp l911
l910:
	push 1
l911:
	cmp0
	je l912
	push 0
	ret
l912:
	jmp l906
l905:
	push 1
	end method
	method strisint
	push BYTE0
	push BYTE9
	cthis strisbetween
	end method
	method strisbin
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis strisbetween
	end method
	method strisalpha
	push BYTEa
	push BYTEz
	cthis strisbetween
	end method
	method streach
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l913:
	push $3
	cthis length
	cmpjl
	cmp0
	je l914
	jmp l916
l915:
	add $3,1
	pop $3
	jmp l913
l916:
	push $3
	push 1
	cthis getb
	pop $2
	push $2
	spushs
	push $1
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l915
l914:
	end method
	method strdotpos
	localint $1
	pop $1
	push "."
	cthis strgetto
	push "."
	pop $b
	popax
	add $a,$b
	push "."
	cthis strgetfrom
	spushs
	push 0
	push $1
	spop $h
	call $h,getb
	pop $b
	popax
	add $a,$b
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l918
	push 0
	jmp l917
l918:
	push 100
	spushs
	spop $h
	call $h,rand
	push $1
	cmpjle
l917:
	end method
	method between
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l920
	push $1
	jmp l919
l920:
	push $2
	push $3
	cmpja
	cmp0
	je l922
	push $3
	jmp l921
l922:
	push $2
l921:
l919:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l924
	push $1
	jmp l923
l924:
	push $2
l923:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l926
	push $1
	jmp l925
l926:
	push $2
l925:
	end method
	method inextrol
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	push 1
	cmpjl
	cmp0
	je l928
	push $2
	cthis set
	jmp l927
l928:
	push $3
	push $2
	cmpja
	cmp0
	je l930
	push 1
	cthis set
	jmp l929
l930:
	push $3
	cthis set
l929:
l927:
	end method
	method movoffsetr
	push igmoffsetx
	push 0
	cthis move
	end method
	method movoffsetl
	push igmoffsetx
	popax
	sub 0,$a
	push 0
	cthis move
	end method
	method imgprint
	cthis getname
	push ": pos="
	pop $b
	popax
	add $a,$b
	cthis getposx
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis getposy
	pop $b
	popax
	add $a,$b
	push " xy="
	pop $b
	popax
	add $a,$b
	cthis getpx
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis getpy
	pop $b
	popax
	add $a,$b
	push " wh="
	pop $b
	popax
	add $a,$b
	cthis getw
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis geth
	pop $b
	popax
	add $a,$b
	push " exy="
	pop $b
	popax
	add $a,$b
	cthis getex
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis getey
	pop $b
	popax
	add $a,$b
	push " lod="
	pop $b
	popax
	add $a,$b
	cthis lodx
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis lody
	pop $b
	popax
	add $a,$b
	push " z="
	pop $b
	popax
	add $a,$b
	cthis getz
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	method imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push "1111"
	cthis imgborderss
	end method
	method imgborderss
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 3
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l932
	push "_img_bor"
	cthis blit
l932:
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push 1
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l934
	push "_img_bor"
	cthis blit
l934:
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 0
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l936
	push "_img_bor"
	cthis blit
l936:
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push 2
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l938
	push "_img_bor"
	cthis blit
l938:
	delete _img_bor
	end method
	method imgroundborder
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis imgborders
	cthis imgerasecorners
	end method
	method imgerasecorners
	localdef $1
	cthis getpx
	pop $1
	localdef $2
	cthis getpy
	pop $2
	push $1
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	push $1
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	end method
	method imgdrawline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "blit"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgeraseline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "erase"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgputoncenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method imgfuncline
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $9
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	pop $9
	localdef $10
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	pop $10
	localreal $11
	push $9
	push 0
	cmpje
	cmp0
	je l940
	push $10
	push 0
	cmpjl
	cmp0
	je l942
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l943:
	push $11
	push $6
	cmpjae
	cmp0
	je l944
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	sub $11,$a
	pop $11
	jmp l943
l944:
	push $6
	push $11
	pop $b
	popax
	sub $a,$b
	jmp l941
l942:
	push $10
	push 0
	cmpja
	cmp0
	je l946
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l947:
	push $11
	push $6
	cmpjle
	cmp0
	je l948
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $11,$a
	pop $11
	jmp l947
l948:
	push $11
	push $6
	pop $b
	popax
	sub $a,$b
	jmp l945
l946:
	push $8
l945:
l941:
	jmp l939
l940:
	push $9
	push $10
	call $8,length
	pop $11
	localreal $12
l949:
	push $8
	push $11
	cmpjle
	cmp0
	je l950
	push 1.0
	push $11
	push $8
	pop $b
	popax
	sub $a,$b
	push $11
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $12
	push $2
	spushs
	push $12
	push $9
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push $12
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $8,$a
	pop $8
	jmp l949
l950:
	push $8
	push $11
	pop $b
	popax
	sub $a,$b
l939:
	end method
	method anresizemets
	cthis getname
	clparent anima_pack,resizemethods
	end method
	method anfirstnontr
	cthis getname
	cthis getpx
	cthis getpy
	push 1
	push 0
	clparent classansearcher,_findnotr
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ancenterscreen
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis ansetcpos
	end method
	method ancenterimg
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	cthis ansetcpos
	end method
	method imgfit
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	cthis getpx
	push $1
	cmpjl
	cmp0
	je l952
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push 0
	cthis move
l952:
	cthis getpy
	push $2
	cmpjl
	cmp0
	je l954
	push 0
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
l954:
	cthis getex
	push $3
	cmpja
	cmp0
	je l956
	push $3
	cthis getex
	pop $b
	popax
	sub $a,$b
	push 0
	cthis move
l956:
	cthis getey
	push $4
	cmpja
	cmp0
	je l958
	push 0
	push $4
	cthis getey
	pop $b
	popax
	sub $a,$b
	cthis move
l958:
	end method
	method imgfitscreen
	push igmoffsetx
	push igmoffsety
	push iResX
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	push iResY
	push igmoffsety
	pop $b
	popax
	add $a,$b
	cthis imgfit
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method ansetsframe
	localdef $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	cthis setframe
	localint $3
	push 0
	pop $3
l959:
	push $3
	push 1
	popax
	sub 0,$a
	cthis nofframes
	cmpjl
	cmp0
	je l960
	cthis framename
	push $2
	cmpjne
	jmp l962
l960:
	push 0
	jmp l962
l961:
	push 1
l962:
	cmp0
	je l963
	add $3,1
	pop $3
	push 1
	popax
	sub 0,$a
	push $3
	cthis setframe
	jmp l959
l963:
	end method
	method ansetlastframe
	localdef $1
	pop $1
	push $1
	push $1
	cthis nofframes
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setframe
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	end method
	method objplayloop
	cthis objloop
	cthis play
	end method
	method anplayfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anplaysmoothfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis playsmooth
	end method
	method anplayif
	localdef $1
	pop $1
	push $1
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l965
	push $1
	cthis play
l965:
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method anposz
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	end method
	method annextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method ansetnextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cthis setframe
	end method
	method ansetnextfr
	push 1
	popax
	sub 0,$a
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	cthis setframe
	end method
	method ansetrandfr
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	cthis nofframes
	spushs
	spop $h
	call $h,rand
	cthis setframe
	end method
	method anhasaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	cthis nofactions
	cmpjne
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anaddfx
	cthis getname
	clparent AnimaFx,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method angetcpos
	cthis getcx
	cthis getcy
	ret
	end method
	method anactnr
	push 1
	popax
	sub 0,$a
	cthis actionnr
	end method
	method angetcrgba
	cthis getcx
	cthis getcy
	cthis getrgba
	end method
	method anisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l966:
	push $5
	cthis nofactions
	cmpjl
	cmp0
	je l967
	jmp l969
l968:
	add $5,1
	pop $5
	jmp l966
l969:
	push $5
	push 0
	cthis setframe
	push $1
	push $2
	push $3
	push $4
	cthis isin
	cmp0
	je l971
	push $5
	ret
l971:
	jmp l968
l967:
	push 1
	popax
	sub 0,$a
	end method
	method anreload
	localstring $1
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	localint $3
	cthis framenr
	pop $3
	localint $4
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpjne
	pop $4
	localint $5
	localint $6
	cthis getpos
	pop $6
	pop $5
	localint $7
	cthis getz
	pop $7
	push $1
	cthis getpath
	cthis load
	push $5
	push $6
	cthis setpos
	push $7
	cthis setz
	push $2
	cthis nofactions
	cmpjl
	cmp0
	je l973
	push $4
	cmp0
	je l975
	push $2
	cthis play
l975:
	push $2
	push $3
	cthis setframe
	jmp l972
l973:
	push 0
	push 0
	cthis setframe
l972:
	end method
	method anclipob
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	cthis clip
	end method
	method anclipscreen
	push 0
	push 0
	push igmappw
	push igmapph
	cthis clip
	end method
	method ancopyan
	localstring $1
	pop $1
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l977
	cthis show
	jmp l976
l977:
	cthis hide
l976:
	push $1
	spushs
	spop $a
	call [$a],getpos
	cthis setpos
	end method
	method anconstmove
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push A
	push "mvx"
	push $2
	push "mvy"
	push $3
	cthis vars2
	push $1
	cthis setdelay
	push 1
	popax
	sub 0,$a
	push "global5"
	cthis anplayfin
	end method
	method global5
	push 1
	popax
	sub 0,$a
	cthis play
	push mvx
	push mvy
	cthis move
	end method
	method fxplayifgr
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l978:
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l979
	push $2
	push $3
	cmpjl
	jmp l981
l979:
	push 0
	jmp l981
l980:
	push 1
l981:
	cmp0
	je l982
	add $2,1
	pop $2
	jmp l978
l982:
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],playif
	end method
	method scmove
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	method scpos
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis setpos
	end method
	method igetsc
	push rgmscalex
	cthis get
	pop $b
	popax
	mul $a,$b
	push 0.5
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,to_i
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis set
	cthis create
	end method
	method txtsetcol
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push $2
	push $3
	push $4
	cthis createtxt
	end method
	method txtshadow
	localint $1
	localstring $2
	pop $2
	pop $1
	push "txts"
	cthis hasvar
	neg
	cmp0
	je l984
	new text,txts
	push $2
	call txts,setfont
l984:
	cthis get
	call txts,set
	cthis getpx
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $1
	pop $b
	popax
	add $a,$b
	call txts,setpos
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	call txts,setz
	call txts,show
	push 0
	push 0
	push 0
	call txts,createtxt
	end method
	method txthides
	cthis hide
	push "txts"
	cthis hasvar
	cmp0
	je l986
	call txts,hide
l986:
	end method
	method txtisin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l987
	push $1
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l987
	push $2
	cthis getpy
	cmpjae
	cmp0
	je l987
	push $2
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	cmpjle
	jmp l989
l987:
	push 0
	jmp l989
l988:
	push 1
l989:
	end method
	method txtcenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtright
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	cthis getw
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtcenterscreen
	push igmappw
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setpos
	end method
	method imgfittxt
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	cmp0
	je l991
	push $2
	spushs
	spop $a
	call [$a],getw
	push $2
	spushs
	spop $a
	call [$a],geth
	push 2
	push $4
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis transparent
	cthis create
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis setpos
l991:
	new vector,_vtmplin
	push "string"
	call _vtmplin,type
	push $1
	push " "
	call _vtmplin,vecbuildfromstring
	localstring $6
	push ""
	pop $6
	localstring $7
	localstring $8
	localint $9
	localint $10
	localint $11
	localint $12
	localint $13
	localint $14
	localstring $15
	push "\\n"
	pop $15
	localint $16
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $16
	push $2
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $16
	push 1
	push 0
	clparent classansearcher,_findnotr
	pop $10
	pop $9
	push $2
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $16
	push 1
	popax
	sub 0,$a
	push 0
	clparent classansearcher,_findnotr
	pop $12
	pop $11
	localint $17
	push 0
	pop $17
l992:
	push $17
	call _vtmplin,size
	cmpjl
	cmp0
	je l993
	jmp l995
l994:
	add $17,1
	pop $17
	jmp l992
l995:
	push $6
	pop $7
	push $17
	call _vtmplin,get
	pop $8
	push $15
	call $8,contains
	cmp0
	je l997
	localstring $18
	push $15
	call $8,strgetto
	pop $18
	localstring $19
	push $15
	call $8,strgetfrom
	pop $19
	call $18,length
	push 0
	cmpja
	cmp0
	je l999
	push $18
	pop $8
	jmp l998
l999:
	push ""
	pop $8
l998:
	call $19,length
	push 0
	cmpja
	cmp0
	je l1001
	push $17
	push 1
	pop $b
	popax
	add $a,$b
	push $19
	call _vtmplin,vecaddat
l1001:
	push 1
	pop $13
	jmp l996
l997:
	push 0
	pop $13
l996:
	push $8
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $6,$a
	pop $6
	push $3
	spushs
	push $6
	spop $a
	call [$a],txtset
	push $3
	spushs
	push $9
	push $16
	spop $a
	call [$a],setpos
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	push $11
	cmpja
	cmp0
	jne l1004
	push $13
	jmp l1005
l1003:
	push 0
	jmp l1005
l1004:
	push 1
l1005:
	cmp0
	je l1006
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	push $11
	cmpjle
	cmp0
	je l1008
	push ""
	pop $7
	jmp l1007
l1008:
	push $13
	cmp0
	je l1010
	push $17
	push 1
	pop $b
	popax
	add $a,$b
	call _vtmplin,size
	cmpjl
	jmp l1012
l1010:
	push 0
	jmp l1012
l1011:
	push 1
l1012:
	cmp0
	je l1013
	push $17
	push 1
	pop $b
	popax
	add $a,$b
	push $15
	push $17
	push 1
	pop $b
	popax
	add $a,$b
	call _vtmplin,get
	pop $b
	popax
	add $a,$b
	call _vtmplin,set
l1013:
l1007:
	push $7
	push ""
	cmpjne
	cmp0
	je l1015
	push $3
	spushs
	push $7
	spop $a
	call [$a],txtset
	push $8
	push " "
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	pop $7
	jmp l1014
l1015:
	push ""
	pop $6
	push ""
	pop $7
l1014:
	push $3
	cthis blit
	push $4
	popax
	add $16,$a
	pop $16
	push $16
	push $2
	spushs
	spop $a
	call [$a],getey
	cmpjl
	cmp0
	je l1017
	push $2
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $16
	push 1
	push 0
	clparent classansearcher,_findnotr
	pop $10
	pop $9
	push $2
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $16
	push 1
	popax
	sub 0,$a
	push 0
	clparent classansearcher,_findnotr
	pop $12
	pop $11
l1017:
l1006:
	jmp l994
l993:
	push $6
	push ""
	cmpjne
	cmp0
	je l1019
	push $3
	spushs
	push $6
	spop $a
	call [$a],txtset
	push $3
	spushs
	push $9
	push $16
	spop $a
	call [$a],setpos
	push $3
	cthis blit
l1019:
	delete _vtmplin
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l1021
	localint $2
	push 0
	pop $2
l1022:
	push $2
	push $1
	cmpjl
	cmp0
	je l1023
	jmp l1025
l1024:
	add $2,1
	pop $2
	jmp l1022
l1025:
	push $2
	cthis add
	jmp l1024
l1023:
l1021:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l1026:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1027
	jmp l1029
l1028:
	add $2,1
	pop $2
	jmp l1026
l1029:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l1028
l1027:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1031
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l1031:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1033
	sub $2,1
	pop $2
	jmp l1032
l1033:
	push $2
	push 0
	cmpje
	cmp0
	je l1035
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l1035:
l1032:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1036
	push $1
	cthis size
	cmpjl
	jmp l1038
l1036:
	push 0
	jmp l1038
l1037:
	push 1
l1038:
	cmp0
	je l1040
	push $1
	cthis get
	jmp l1039
l1040:
	push "null"
l1039:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l1042
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l1041
l1042:
	push "null"
l1041:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l1043:
	cthis size
	push $1
	cmpja
	cmp0
	je l1044
	cthis vecpop
	popax
	jmp l1043
l1044:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	end method
	method vecreplace
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1046
	push $3
	push $2
	cthis set
l1046:
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1048
	ret
l1048:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l1049:
	push $8
	push $1
	cmpjl
	cmp0
	je l1050
	jmp l1052
l1051:
	add $8,1
	pop $8
	jmp l1049
l1052:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l1053:
	push $9
	push $1
	cmpjl
	cmp0
	je l1054
	jmp l1056
l1055:
	add $9,1
	pop $9
	jmp l1053
l1056:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l1058
	push $6
	pop $5
	push $9
	pop $7
l1058:
	jmp l1055
l1054:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l1051
l1050:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l1059:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l1060
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l1059
l1060:
	call $1,length
	push 0
	cmpja
	cmp0
	je l1062
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l1062:
	end method
	method obbuildfromstring2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l1063:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l1064
	push $4
	push 0
	cmpja
	cmp0
	je l1066
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
l1066:
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l1063
l1064:
	call $1,length
	push 0
	cmpja
	cmp0
	je l1068
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l1068:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecbuildfromstring2
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring2
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l1069:
	push $2
	push $1
	cmpjl
	cmp0
	je l1070
	jmp l1072
l1071:
	add $2,1
	pop $2
	jmp l1069
l1072:
	push 0
	cthis removeat
	jmp l1071
l1070:
	end method
	method vecremovefrom
	localint $1
	pop $1
l1073:
	push $1
	cthis size
	cmpjl
	cmp0
	je l1074
	push $1
	cthis removeat
	jmp l1073
l1074:
	end method
	method vecfindfrom
	localint $1
	localdef $2
	pop $2
	pop $1
l1075:
	push $1
	cthis size
	cmpjl
	cmp0
	je l1076
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1078
	push $1
	ret
	jmp l1077
l1078:
	add $1,1
	pop $1
l1077:
	jmp l1075
l1076:
	push 1
	popax
	sub 0,$a
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l1081
	cthis size
	push 0
	cmpje
	jmp l1082
l1080:
	push 0
	jmp l1082
l1081:
	push 1
l1082:
	cmp0
	je l1083
	ret
l1083:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l1085
	localint $4
	push $1
	pop $4
l1086:
	push $4
	push $2
	cmpja
	cmp0
	je l1087
	jmp l1089
l1088:
	sub $4,1
	pop $4
	jmp l1086
l1089:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l1088
l1087:
	jmp l1084
l1085:
	push $1
	push $2
	cmpjl
	cmp0
	je l1091
	localint $4
	push $1
	pop $4
l1092:
	push $4
	push $2
	cmpjl
	cmp0
	je l1093
	jmp l1095
l1094:
	add $4,1
	pop $4
	jmp l1092
l1095:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l1094
l1093:
l1091:
l1084:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1097
	push $2
	push 0
	cthis vecposfromto
	jmp l1096
l1097:
	push $1
	cthis addbegin
l1096:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1099
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l1098
l1099:
	push $1
	cthis addbegin
l1098:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1101
	push $3
	push $2
	cthis set
l1101:
	end method
	method veceq
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjne
	cmp0
	je l1103
	push 0
	ret
l1103:
	localint $3
	push 0
	pop $3
l1104:
	push $3
	push $2
	cmpjl
	cmp0
	je l1105
	jmp l1107
l1106:
	add $3,1
	pop $3
	jmp l1104
l1107:
	push $3
	cthis get
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1109
	push 0
	ret
l1109:
	jmp l1106
l1105:
	push 1
	end method
	method vecbuild
	push "addbegin"
	cthis withlist
	end method
	method veceq2
	new vector,___v
	cthis getvectype
	call ___v,type
	call ___v,vecbuild
	localint $1
	push "___v"
	cthis veceq
	pop $1
	delete ___v
	push $1
	end method
	method veccopydbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	cthis vecadddbrow
	end method
	method vecadddbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1110:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1111
	jmp l1113
l1112:
	add $3,1
	pop $3
	jmp l1110
l1113:
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1112
l1111:
	end method
	method vecchecknext
	localint $1
	pop $1
	add $1,1
	pop $1
	push $1
	cthis size
	cmpjl
	cmp0
	je l1115
	push $1
	cthis get
	jmp l1114
l1115:
	push "null"
l1114:
	end method
	method vecaddat
	localint $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1117
	push $1
	cthis size
	cmpjle
	jmp l1119
l1117:
	push 0
	jmp l1119
l1118:
	push 1
l1119:
	cmp0
	je l1120
	push $2
	cthis add
	localint $3
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l1121:
	push $3
	push $1
	cmpja
	cmp0
	je l1122
	jmp l1124
l1123:
	sub $3,1
	pop $3
	jmp l1121
l1124:
	push $3
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l1123
l1122:
	push $1
	push $2
	cthis set
l1120:
	end method
	method vecsum
	cthis size
	cmp0
	je l1126
	localdef $1
	push 0
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
l1127:
	push $2
	cthis size
	cmpjl
	cmp0
	je l1128
	jmp l1130
l1129:
	add $2,1
	pop $2
	jmp l1127
l1130:
	push $2
	cthis get
	popax
	add $1,$a
	pop $1
	jmp l1129
l1128:
	push $1
	jmp l1125
l1126:
	push 0
l1125:
	end method
	method vecclosest
	localdef $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpjle
	cmp0
	je l1132
	push 1
	popax
	sub 0,$a
	ret
l1132:
	localint $3
	push 0
	pop $3
	localdef $4
	push $1
	push 0
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $4
	localint $5
	push 1
	pop $5
l1133:
	push $5
	push $2
	cmpjl
	cmp0
	je l1134
	jmp l1136
l1135:
	add $5,1
	pop $5
	jmp l1133
l1136:
	localdef $6
	push $1
	push $5
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $6
	push $6
	push $4
	cmpjl
	cmp0
	je l1138
	push $5
	pop $3
	push $6
	pop $4
l1138:
	jmp l1135
l1134:
	push $3
	end method
	method vecloadargs
	localdef $1
	pop $1
l1139:
	push $1
	push A
	cmpjne
	cmp0
	je l1140
	push $1
	cthis addbegin
	localdef $1
	pop $1
	jmp l1139
l1140:
	end method
	method vecbuildlines
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push "string"
	cthis type
	push $2
	push 0
	cmpjle
	cmp0
	je l1142
	ret
l1142:
	new vector,_vtmplin
	push "string"
	call _vtmplin,type
	push $1
	push " "
	call _vtmplin,vecbuildfromstring
	localstring $3
	push ""
	pop $3
	localint $4
	push 0
	pop $4
l1143:
	push $4
	call _vtmplin,size
	cmpjl
	cmp0
	je l1144
	jmp l1146
l1145:
	add $4,1
	pop $4
	jmp l1143
l1146:
	push $4
	call _vtmplin,get
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	call $3,length
	push $2
	cmpjae
	cmp0
	je l1148
	push $3
	cthis add
	push ""
	pop $3
l1148:
	jmp l1145
l1144:
	push $3
	push ""
	cmpjne
	cmp0
	je l1150
	push $3
	cthis add
l1150:
	delete _vtmplin
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l1152
	ret
l1152:
	sub $1,1
	pop $1
	cthis free
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l1153:
	push $2
	push A
	cmpjne
	cmp0
	je l1154
	jmp l1156
l1155:
	jmp l1153
l1156:
	push $4
	push 0
	cmpje
	cmp0
	je l1158
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l1158:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l1160
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l1159
l1160:
	push 0
l1159:
	pop $4
	jmp l1155
l1154:
	end method
	method dbbuild2
	cthis free
	localstring $1
	pop $1
l1161:
	push $1
	push A
	cmpjne
	cmp0
	je l1162
	push $1
	push "null"
	cmpje
	cmp0
	je l1164
	cthis addbeginrow
	popax
	jmp l1163
l1164:
	push 0
	push $1
	cthis addbegin
l1163:
	pop $1
	jmp l1161
l1162:
	end method
	method dbaddvec
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l1165:
	push $3
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1166
	jmp l1168
l1167:
	add $3,1
	pop $3
	jmp l1165
l1168:
	push $2
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1167
l1166:
	end method
	method dbcopy
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis dbcopyfromto
	end method
	method dbcopyrow
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis dbcopyfromto
	end method
	method dbcopyfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push $3
	cthis dbaddrowfromto
	end method
	method dbaddrowfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	localint $6
	push $2
	pop $4
l1169:
	push $4
	push $3
	cmpjl
	cmp0
	je l1170
	jmp l1172
l1171:
	add $4,1
	pop $4
	jmp l1169
l1172:
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push 0
	pop $5
l1173:
	push $5
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1174
	jmp l1176
l1175:
	add $5,1
	pop $5
	jmp l1173
l1176:
	push $6
	push $1
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	cthis add
	jmp l1175
l1174:
	jmp l1171
l1170:
	end method
	method dbadddbrowtorow
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1177:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1178
	jmp l1180
l1179:
	add $4,1
	pop $4
	jmp l1177
l1180:
	push $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	cthis add
	jmp l1179
l1178:
	end method
	method dbremovecol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l1181:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1182
	jmp l1184
l1183:
	add $2,1
	pop $2
	jmp l1181
l1184:
	push $2
	cthis getcolsno
	push $1
	cmpja
	cmp0
	je l1186
	push $2
	push $1
	cthis removeat
l1186:
	jmp l1183
l1182:
	end method
	method dbcopyfromtos
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis dbcopyfromto
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l1188
l1189:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l1190
	cthis dbremovelast
	jmp l1189
l1190:
	jmp l1187
l1188:
	cthis free
l1187:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbrowtostring
	localint $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push ""
	pop $5
	localint $6
	push $1
	cthis getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push $3
	push 0
	cmpjl
	cmp0
	jne l1193
	push $3
	push $6
	cmpja
	jmp l1194
l1192:
	push 0
	jmp l1194
l1193:
	push 1
l1194:
	cmp0
	je l1195
	push $6
	pop $3
l1195:
l1196:
	push $2
	push $3
	cmpjle
	cmp0
	je l1197
	jmp l1199
l1198:
	add $2,1
	pop $2
	jmp l1196
l1199:
	push $1
	push $2
	cthis get
	push $4
	pop $b
	popax
	add $a,$b
	popax
	add $5,$a
	pop $5
	jmp l1198
l1197:
	push $5
	end method
	method dbgetstringrow
	localint $1
	pop $1
	push $1
	push 0
	push 1
	popax
	sub 0,$a
	push ""
	cthis dbrowtostring
	end method
	method dbaddrow
	localdef $1
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	pop $2
l1200:
	push A
	push $2
	cmpjne
	cmp0
	je l1201
	push $1
	push $2
	cthis addbegin
	localdef $2
	pop $2
	jmp l1200
l1201:
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l1203
	push $3
	push 0
	cmpjae
	jmp l1205
l1203:
	push 0
	jmp l1205
l1204:
	push 1
l1205:
	cmp0
	je l1206
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l1207:
	push $3
	push $5
	cmpjl
	cmp0
	je l1208
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l1207
l1208:
l1206:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1210
	push $1
	push $2
	cthis get
	jmp l1209
l1210:
	push "null"
l1209:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1212
	push $3
	cthis getcolsno
	push $2
	cmpja
	jmp l1214
l1212:
	push 0
	jmp l1214
l1213:
	push 1
l1214:
	cmp0
	je l1215
	push $3
	push $2
	cthis get
	jmp l1211
l1215:
	push "null"
l1211:
	end method
	method dbget
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1217
	push $2
	push 1
	cthis get
	jmp l1216
l1217:
	push "null"
l1216:
	end method
	method dbgetint
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1219
	push $2
	push 1
	cthis get
	spushs
	spop $h
	call $h,to_i
	jmp l1218
l1219:
	push 0
l1218:
	end method
	method dbgetscr
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1221
	push $2
	push 1
	cthis get
	spushs
	spop $h
	call $h,to_r
	push rgmscalex
	pop $b
	popax
	mul $a,$b
	jmp l1220
l1221:
	push 0.0
l1220:
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l1222:
	push $2
	push 0
	cmpjae
	cmp0
	je l1223
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l1225
	push $2
	ret
l1225:
	sub $2,1
	pop $2
	jmp l1222
l1223:
	push 1
	popax
	sub 0,$a
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1227
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l1227:
	push 0
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l1229
	localint $3
	push 0
	pop $3
l1230:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1231
	jmp l1233
l1232:
	add $3,1
	pop $3
	jmp l1230
l1233:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l1235
	push $3
	ret
l1235:
	jmp l1232
l1231:
l1229:
	push 1
	popax
	sub 0,$a
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1236:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l1237
	jmp l1239
l1238:
	add $3,1
	pop $3
	jmp l1236
l1239:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1241
	push $3
	ret
l1241:
	jmp l1238
l1237:
	push 1
	popax
	sub 0,$a
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method dbsetall
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1242:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1243
	jmp l1245
l1244:
	add $2,1
	pop $2
	jmp l1242
l1245:
	localdef $3
	push 0
	pop $3
l1246:
	push $3
	push $2
	cthis getcolsno
	cmpjl
	cmp0
	je l1247
	jmp l1249
l1248:
	add $3,1
	pop $3
	jmp l1246
l1249:
	push $2
	push $3
	push $1
	cthis set
	jmp l1248
l1247:
	jmp l1244
l1243:
	end method
	method dbeach_row
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1250:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1251
	jmp l1253
l1252:
	add $2,1
	pop $2
	jmp l1250
l1253:
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	jmp l1252
l1251:
	end method
	method dbeq
	localstring $1
	pop $1
	cthis getrowsno
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjne
	cmp0
	je l1255
	push 0
	ret
l1255:
	localint $2
	localint $3
	localint $4
	push 0
	pop $4
l1256:
	push $4
	cthis getrowsno
	cmpjl
	cmp0
	je l1257
	jmp l1259
l1258:
	add $4,1
	pop $4
	jmp l1256
l1259:
	push $4
	cthis getcolsno
	pop $2
	push $2
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjne
	cmp0
	je l1261
	push 0
	ret
l1261:
	push 0
	pop $3
l1262:
	push $3
	push $2
	cmpjl
	cmp0
	je l1263
	jmp l1265
l1264:
	add $3,1
	pop $3
	jmp l1262
l1265:
	push $4
	push $3
	cthis get
	push $1
	spushs
	push $4
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1267
	push 0
	ret
l1267:
	jmp l1264
l1263:
	jmp l1258
l1257:
	push 1
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1269
	push 1
	popax
	sub 0,$a
	ret
l1269:
	localint $3
	call $1,rand
	pop $3
l1270:
	push $3
	push $2
	cmpje
	cmp0
	je l1271
	jmp l1273
l1272:
	call $1,rand
	pop $3
	jmp l1270
l1273:
	jmp l1272
l1271:
	push $3
	end method
	method bin_to_i
	localstring $1
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	call $1,length
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1274:
	push $4
	push 0
	cmpjae
	cmp0
	je l1275
	jmp l1277
l1276:
	sub $4,1
	pop $4
	jmp l1274
l1277:
	push $4
	push 1
	call $1,getb
	push "1"
	cmpje
	cmp0
	je l1279
	push $2
	popax
	add $3,$a
	pop $3
l1279:
	push 2
	popax
	mul $2,$a
	pop $2
	jmp l1276
l1275:
	push $3
	end method
	method std_anfadeout_finish
	cthis unlink_internal_filter
	cthis hide
	end method
	method internal_filter
	localdef $1
	push "__ft"
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis hasvar
	neg
	cmp0
	je l1281
	push $1
	spushs
	spop $e
	new filter,[$e]
	push $1
	spushs
	spop $a
	call [$a],buildfullname
l1281:
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],link
	push $1
	spushs
	spop $a
	call [$a],getfullname
	end method
	method internal_timer
	localdef $1
	push "__tim"
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis hasvar
	neg
	cmp0
	je l1283
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push 1
	spop $a
	call [$a],setcycle
	push $1
	spushs
	push A
	push "sfunc"
	push "null"
	push "sfilter"
	push "null"
	push "rstep"
	push 0.0
	push "ropacity"
	push 0.0
	push "rstepzoom"
	push 0.0
	push "rzoom"
	push 0.0
	push "rzoomsmall"
	push 0.0
	push "rzoombig"
	push 1.0
	push "ralfamin"
	push 0.0
	push "ralfamax"
	push 255.0
	spop $a
	call [$a],vars2
l1283:
	push $1
	end method
	method unlink_internal_filter
	localdef $1
	cthis internal_timer
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1285
	push $1
	spushs
	push 0
	spop $a
	call [$a],stop
l1285:
	cthis internal_filter
	spushs
	spop $a
	call [$a],unlink
	end method
	method anhideonsetframe
	push "bhideonsf"
	cthis var
	push "bopacityfr"
	cthis hasvar
	neg
	cmp0
	je l1287
	push "onsetframe"
	push "_stdanhide"
	cthis addmethod
l1287:
	end method
	method anopacityframe
	push "bopacityfr"
	cthis var
	push "onsetframe"
	push "global6"
	cthis addmethod
	end method
	method global6
	localdef $1
	cthis framename
	pop $1
	push 0
	push 2
	call $1,getb
	push "op"
	cmpje
	cmp0
	je l1289
	cthis internal_filter
	spushs
	push 2
	call $1,strsubb
	spushs
	spop $h
	call $h,to_r
	push 100.0
	pop $b
	popax
	div $a,$b
	psax
	push 255
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],setopacity
	jmp l1288
l1289:
	cthis internal_filter
	spushs
	push 255
	spop $a
	call [$a],setopacity
l1288:
	push "bhideonsf"
	cthis hasvar
	cmp0
	je l1291
	cthis hide
l1291:
	end method
	method anrandfrplay
	push "brandfrplay"
	cthis var
	push "onendframe"
	push "ansetrandfr"
	cthis addmethod
	end method
	method ansetopacity
	localint $1
	pop $1
	cthis internal_filter
	spushs
	push $1
	spop $a
	call [$a],setopacity
	end method
	method anzoom
	localreal $1
	pop $1
	localdef $2
	cthis internal_filter
	pop $2
	push $2
	spushs
	push 1
	spop $a
	call [$a],setpivottype
	push $2
	spushs
	push 1
	spop $a
	call [$a],setsmooth
	push $2
	spushs
	push $1
	spop $a
	call [$a],setzoom
	end method
	method anzoomin
	localint $1
	localstring $2
	pop $2
	pop $1
	push 255
	cthis ansetopacity
	push $1
	push 1
	push 0
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomout
	localint $1
	localstring $2
	pop $2
	pop $1
	push 255
	cthis ansetopacity
	push $1
	push 1
	popax
	sub 0,$a
	push 0
	push $2
	cthis anzoomfadeinout
	end method
	method anfadein
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push 1
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadein
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadeout
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	push $2
	cthis anzoomfadeinout
	end method
	method anfadeout
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push 1
	popax
	sub 0,$a
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadeinout
	localint $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push 0
	push 255
	push 0.0
	push 1.0
	cthis _anzoomfadeinout
	end method
	method _anzoomfadeinout
	localint $1
	localint $2
	localint $3
	localstring $4
	localreal $5
	localreal $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpja
	cmp0
	je l1293
	push 1
	pop $3
	jmp l1292
l1293:
	push $3
	push 0
	cmpjl
	cmp0
	je l1295
	push 1
	popax
	sub 0,$a
	pop $3
l1295:
l1292:
	push $2
	push 0
	cmpja
	cmp0
	je l1297
	push 1
	pop $2
	jmp l1296
l1297:
	push $2
	push 0
	cmpjl
	cmp0
	je l1299
	push 1
	popax
	sub 0,$a
	pop $2
l1299:
l1296:
	cthis show
	localdef $9
	cthis internal_filter
	pop $9
	localdef $10
	cthis internal_timer
	pop $10
	push $9
	spushs
	cthis getname
	spop $a
	call [$a],link
	push $10
	spushs
	push $4
	spop $a
	call [$a],sfunc=
	push $1
	call engine,getloopdelay
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l1301
	push $3
	push 0
	cmpja
	cmp0
	je l1303
	push $6
	cthis ansetopacity
	jmp l1302
l1303:
	push $5
	cthis ansetopacity
l1302:
	push $4
	push "null"
	cmpjne
	cmp0
	je l1305
	push $4
	spushs
	spop $d
	cthis [$d]
l1305:
	ret
l1301:
	localreal $11
	push $6
	push $5
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	pop $11
	push $11
	push 1.0
	cmpjl
	cmp0
	je l1307
	push 1.0
	pop $11
l1307:
	localreal $12
	push $8
	push $7
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	pop $12
	push $10
	spushs
	push $9
	spop $a
	call [$a],sfilter=
	push $10
	spushs
	push $11
	push $3
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],rstep=
	push $10
	spushs
	push $5
	spop $a
	call [$a],ropacity=
	push $10
	spushs
	push $12
	push $2
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],rstepzoom=
	push $10
	spushs
	push 0.0
	spop $a
	call [$a],rzoom=
	push $10
	spushs
	push $7
	spop $a
	call [$a],rzoomsmall=
	push $10
	spushs
	push $8
	spop $a
	call [$a],rzoombig=
	push $10
	spushs
	push $5
	spop $a
	call [$a],ralfamin=
	push $10
	spushs
	push $6
	spop $a
	call [$a],ralfamax=
	push $3
	cmp0
	je l1309
	push $9
	spushs
	push $3
	push 1
	cmpje
	cmp0
	je l1311
	push $5
	jmp l1310
l1311:
	push $6
l1310:
	spop $a
	call [$a],setopacity
	push $10
	spushs
	push $9
	spushs
	spop $a
	call [$a],getopacity
	spop $a
	call [$a],ropacity=
l1309:
	push $2
	cmp0
	je l1313
	push $9
	spushs
	push $2
	push 1
	cmpje
	cmp0
	je l1315
	push $7
	push $12
	pop $b
	popax
	add $a,$b
	jmp l1314
l1315:
	push $8
l1314:
	spop $a
	call [$a],setzoom
	push $10
	spushs
	push $9
	spushs
	spop $a
	call [$a],getzoomx
	spop $a
	call [$a],rzoom=
l1313:
	push $10
	spushs
	push "onfinish"
	push "global7"
	spop $a
	call [$a],addmethod
	push $10
	spushs
	spop $a
	call [$a],play
	end method
	method global7
	push rstep
	popax
	add ropacity,$a
	pop ropacity
	push rstepzoom
	popax
	add rzoom,$a
	pop rzoom
	push ropacity
	push ralfamax
	cmpjae
	cmp0
	je l1317
	push rstep
	push 0.0
	cmpja
	jmp l1319
l1317:
	push 0
	jmp l1319
l1318:
	push 1
l1319:
	cmp0
	jne l1321
	push rzoom
	push rzoombig
	cmpjae
	cmp0
	je l1322
	push rstepzoom
	push 0.0
	cmpja
	jmp l1324
l1322:
	push 0
	jmp l1324
l1323:
	push 1
l1324:
	jmp l1325
l1320:
	push 0
	jmp l1325
l1321:
	push 1
l1325:
	cmp0
	je l1326
	push rstepzoom
	push 0.0
	cmpja
	cmp0
	je l1328
	push sfilter
	spushs
	push rzoombig
	spop $a
	call [$a],setzoom
l1328:
	push rstep
	push 0.0
	cmpja
	cmp0
	je l1330
	push sfilter
	spushs
	push ralfamax
	spop $a
	call [$a],setopacity
l1330:
	push sfunc
	push "null"
	cmpjne
	cmp0
	je l1332
	cthis getbuildername
	spushs
	push sfunc
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1332:
	jmp l1316
l1326:
	push ropacity
	push ralfamin
	cmpjle
	cmp0
	je l1334
	push rstep
	push 0.0
	cmpjl
	jmp l1336
l1334:
	push 0
	jmp l1336
l1335:
	push 1
l1336:
	cmp0
	jne l1338
	push rstepzoom
	push 0.0
	cmpjl
	cmp0
	je l1339
	push rzoom
	push rzoomsmall
	push rstepzoom
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l1341
l1339:
	push 0
	jmp l1341
l1340:
	push 1
l1341:
	jmp l1342
l1337:
	push 0
	jmp l1342
l1338:
	push 1
l1342:
	cmp0
	je l1343
	push rstepzoom
	push 0.0
	cmpjl
	cmp0
	je l1345
	push rzoomsmall
	push 0.0
	cmpje
	jmp l1347
l1345:
	push 0
	jmp l1347
l1346:
	push 1
l1347:
	cmp0
	jne l1349
	push rstep
	push 0.0
	cmpjl
	cmp0
	je l1350
	push ropacity
	push ralfamin
	cmpjle
	jmp l1352
l1350:
	push 0
	jmp l1352
l1351:
	push 1
l1352:
	jmp l1353
l1348:
	push 0
	jmp l1353
l1349:
	push 1
l1353:
	cmp0
	je l1354
	push sfilter
	spushs
	spop $a
	call [$a],unlink
	cthis getbuildername
	spushs
	spop $a
	call [$a],hide
l1354:
	push sfunc
	push "null"
	cmpjne
	cmp0
	je l1356
	cthis getbuildername
	spushs
	push sfunc
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1356:
	jmp l1333
l1343:
	push rstep
	push 0.0
	cmpjne
	cmp0
	je l1358
	push sfilter
	spushs
	push ropacity
	spop $a
	call [$a],setopacity
l1358:
	push rstepzoom
	push 0.0
	cmpjne
	cmp0
	je l1360
	push sfilter
	spushs
	push rzoom
	spop $a
	call [$a],setzoom
l1360:
	cthis play
l1333:
l1316:
	end method
	method imgbuildfromlist
	new vector,__vtmp
	push "string"
	call __vtmp,type
	call __vtmp,vecloadargs
	push "__vtmp"
	cthis imgbuildfromvec
	delete __vtmp
	end method
	method imgbuildfromvec
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],empty
	cmp0
	je l1362
	ret
l1362:
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],first
	pop $2
	localint $3
	push $2
	spushs
	spop $a
	call [$a],getpx
	pop $3
	localint $4
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $4
	localint $5
	push $2
	spushs
	spop $a
	call [$a],getex
	pop $5
	localint $6
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $6
	localint $7
	push 1
	pop $7
l1363:
	push $7
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1364
	jmp l1366
l1365:
	add $7,1
	pop $7
	jmp l1363
l1366:
	push $1
	spushs
	push $7
	spop $a
	call [$a],get
	pop $2
	push $3
	push $2
	spushs
	spop $a
	call [$a],getpx
	cmpja
	cmp0
	je l1368
	push $2
	spushs
	spop $a
	call [$a],getpx
	pop $3
l1368:
	push $4
	push $2
	spushs
	spop $a
	call [$a],getpy
	cmpja
	cmp0
	je l1370
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $4
l1370:
	push $5
	push $2
	spushs
	spop $a
	call [$a],getex
	cmpjl
	cmp0
	je l1372
	push $2
	spushs
	spop $a
	call [$a],getex
	pop $5
l1372:
	push $6
	push $2
	spushs
	spop $a
	call [$a],getey
	cmpjl
	cmp0
	je l1374
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $6
l1374:
	jmp l1365
l1364:
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis create
	push $3
	push $4
	cthis setpos
	push 0
	pop $7
l1375:
	push $7
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1376
	jmp l1378
l1377:
	add $7,1
	pop $7
	jmp l1375
l1378:
	push $1
	spushs
	push $7
	spop $a
	call [$a],get
	cthis blit
	jmp l1377
l1376:
	end method
	method anfadeoutloop
	push ifadedelay
	push "anfadeinloop"
	cthis anfadeout
	end method
	method anfadeinloop
	push ifadedelay
	push "anfadeoutloop"
	cthis anfadein
	end method
	method imgstopoverlay
	localdef $1
	cthis imgetoverlay
	pop $1
	push $1
	spushs
	spop $a
	call [$a],unlink_internal_filter
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method imgetoverlay
	push "imgoverlay_"
	cthis getname
	pop $b
	popax
	add $a,$b
	end method
	method imgstartoverlay
	cthis imgetoverlay
	spushs
	spop $a
	call [$a],anfadeinloop
	end method
	method _imgbuildoverlay
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l1380
	push GAME
	spushs
	push "img"
	push $1
	spop $a
	call [$a],varnew
l1380:
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],imgclone
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push 0
	spop $a
	call [$a],paint
	push $6
	push 0
	cmpja
	cmp0
	je l1382
	push $1
	spushs
	push "ifadedelay"
	spop $a
	call [$a],hasvar
	neg
	jmp l1384
l1382:
	push 0
	jmp l1384
l1383:
	push 1
l1384:
	cmp0
	je l1385
	push $1
	spushs
	push "ifadedelay"
	push $6
	spop $a
	call [$a],var2
	push $1
	spushs
	spop $a
	call [$a],anfadeinloop
l1385:
	end method
	method imgbuildoverlay
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	cthis imgetoverlay
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _imgbuildoverlay
	end method
	method imgsetoverlay
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push 0
	cthis imgbuildoverlay
	end method
	method imgclonesize
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	cthis transparent
	cthis create
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setpos
	end method
	method imgclonesizecol
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	push $2
	push $3
	push $4
	push $5
	cthis create
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setpos
	end method
	method imgclone
	localstring $1
	pop $1
	push $1
	cthis imgclonesize
	push $1
	cthis blit
	push $1
	spushs
	spop $a
	call [$a],getz
	cthis setz
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l1387
	cthis show
	jmp l1386
l1387:
	cthis hide
l1386:
	end method
	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push iResX
	push iResY
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class TicksCounter
	method init
	new int,istart
	end method
	method start
	call engine,getticks
	pop istart
	end method
	method stop
	call engine,getticks
	push istart
	pop $b
	popax
	sub $a,$b
	pop istart
	end method
	method get
	push istart
	ret
	end method
	method stopget
	cthis stop
	cthis get
	ret
	end method
	method print
	localstring $1
	pop $1
	push $1
	push " delay: "
	pop $b
	popax
	add $a,$b
	cthis stopget
	pop $b
	popax
	add $a,$b
	push " ms"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method put
	push ""
	cthis print
	end method
	end class

	class ObjController
	method init
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],addgmobj
	end method
	method removefromgame
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],removegmobj
	end method
	end class

	class LObjController
	parent ObjController
	parent classlocker
	method init
	clparent ObjController,init
	clparent classlocker,init
	end method
	end class

	class gmbankvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	push "iid"
	push 1
	popax
	sub 0,$a
	cthis var2
	end method
	method startrand
	cthis size
	push 0
	cmpja
	cmp0
	je l1389
	cthis size
	spushs
	spop $h
	call $h,rand
	pop iid
l1389:
	end method
	method play
	push 0
	cthis stop
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpje
	cmp0
	je l1391
	ret
l1391:
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	cthis get
	spushs
	spop $a
	call [$a],play
	end method
	method onfinish
	end method
	method stop
	localint $1
	pop $1
	cthis isplaying
	cmp0
	je l1393
	cthis getplay
	spushs
	push $1
	spop $a
	call [$a],stop
	push $1
	cmp0
	je l1395
	cthis onfinish
l1395:
l1393:
	end method
	method isplaying
	push iid
	push 0
	cmpjae
	cmp0
	je l1397
	cthis getplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l1396
l1397:
	push 0
l1396:
	end method
	method getplay
	push iid
	cthis get
	ret
	end method
	end class

	class ClassGameController
	method init
	new gmobjvec,__grobj
	new string,GAME
	cthis getname
	pop GAME
	end method
	method addgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,add
	end method
	method removegmobj
	localstring $1
	pop $1
	push $1
	call __grobj,remove
	end method
	method isgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,contains
	end method
	method deletegmobj
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1399
	push $1
	cthis removegmobj
	push $1
	spushs
	spop $d
	delete [$d]
l1399:
	end method
	method setpriority
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $3
	call __grobj,find
	pop $3
	localint $4
	push $4
	call __grobj,find
	pop $4
	push $3
	push 0
	cmpjae
	cmp0
	je l1401
	push $4
	push 0
	cmpjae
	cmp0
	je l1401
	push $3
	push $4
	cmpja
	jmp l1403
l1401:
	push 0
	jmp l1403
l1402:
	push 1
l1403:
	cmp0
	je l1404
	push $3
	push $4
	call __grobj,swap
l1404:
	end method
	method mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	end class

	class GameController
	parent ClassGameController
	parent classlocker
	method init
	localstring $1
	pop $1
	clparent ClassGameController,init
	clparent classlocker,init
	new db,_dbsnd
	push "|"
	call _dbsnd,setseparator
	new string,_sndbase
	push $1
	pop _sndbase
	new timer,__dblclick
	push 250
	call __dblclick,delay
	push 1
	call __dblclick,settick
	new int,_itimersnddelay
	push 50
	pop _itimersnddelay
	new int,_b_ismoddbg
	push "moddbg"
	call engine,varexist
	pop _b_ismoddbg
	end method
	method game_exit
	end method
	method setsndbase
	localstring $1
	pop $1
	push $1
	pop _sndbase
	end method
	method say
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis sayf
	end method
	method sayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push $2
	cthis getsndtxt
	pop $4
	push $4
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	push $4
	push $3
	cthis cplayf
	end method
	method getsndtxt
	localstring $1
	pop $1
	localstring $2
	push "snd"
	push _sndbase
	pop $b
	popax
	add $a,$b
	call _dbsnd,getrowsno
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push $1
	cthis addsnd
	push $2
	end method
	method _sndtimerstart
	localint $1
	push 1
	cthis getname
	call _dbsnd,dbfindbycol
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1406
	push $1
	push 2
	call _dbsnd,get
	call engine,print
	jmp l1405
l1406:
	cthis getname
	push " not in _dbsnd"
	pop $b
	popax
	add $a,$b
	call engine,print
l1405:
	push ""
	call engine,print
	end method
	method addsndf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis addsnd
	push $3
	push "null"
	cmpjne
	cmp0
	je l1408
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1410
	push 1
	call $1,strsubb
	pop $1
l1410:
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l1408:
	end method
	method asf
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push "end"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addsndff
	end method
	method addsndff
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis addsndf
	end method
	method gmconsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l1412
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	call subtitle,register
l1412:
	end method
	method addsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	call _dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1414
	push 1
	call $1,strsubb
	pop $1
	push _sndbase
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1413
l1414:
	push _sndbase
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
l1413:
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	push ".ogg"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l1416
	push ".ogg"
	popax
	add $4,$a
	pop $4
	jmp l1415
l1416:
	push ".wav"
	popax
	add $4,$a
	pop $4
l1415:
	localstring $5
	call gameapi,getgamename
	pop $5
	push igmsoundson
	cmp0
	je l1418
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	jmp l1420
l1418:
	push 0
	jmp l1420
l1419:
	push 1
l1420:
	cmp0
	je l1421
	push $5
	spushs
	push $1
	push $4
	spop $a
	call [$a],gmconsnd
	jmp l1417
l1421:
	push $5
	spushs
	push $1
	call $2,length
	push _itimersnddelay
	pop $b
	popax
	mul $a,$b
	push 1
	spop $a
	call [$a],newtimer
	push $1
	spushs
	push "onstart"
	push "_sndtimerstart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstartstopflag"
	push "GameController0"
	spop $a
	call [$a],addmethod
l1417:
	push $3
	push $4
	call _dbsnd,add
	push $3
	push $1
	call _dbsnd,add
	push $3
	push $2
	call _dbsnd,add
	end method
	method GameController0
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method addbank
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	localstring $3
	pop $3
	localstring $4
l1422:
	push $3
	push A
	cmpjne
	cmp0
	je l1423
	push $3
	cthis getsndtxt
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],addbegin
	push $2
	push "null"
	cmpjne
	cmp0
	je l1425
	push $4
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
l1425:
	pop $3
	jmp l1422
l1423:
	end method
	method exportbank
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1427
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $e
	new db,[$e]
	call [$e],GameController1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
l1427:
	end method
	method GameController1
	localdef $1
	pop $1
	push 1
	cthis dbbuild
	push "|"
	cthis setseparator
	push "GameController2"
	cthis dbeach_row
	push igmdebug
	cmp0
	je l1429
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis save
l1429:
	end method
	method GameController2
	localdef $1
	pop $1
	localdef $2
	cthis getname
	spushs
	push "__db"
	spop $h
	call $h,strsubbs
	pop $2
	push $1
	push "snd"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis addbegin
	push $1
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis addbegin
	end method
	method importbank
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	push $2
	push $3
	push "null"
	push $1
	cthis importgroupto
	end method
	method exportsnd
	localstring $1
	pop $1
	push igmdebug
	cmp0
	je l1431
	push $1
	call _dbsnd,save
l1431:
	end method
	method stdexportsnd
	push "exports/"
	push _sndbase
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis exportsnd
	end method
	method sounds=
	cthis buildsnds
	end method
	method sounds_from
	localstring $1
	pop $1
	new db,__tmpdb
	localdef $2
	push _sndbase
	pop $2
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localdef $3
	pop $3
	localint $4
	localstring $5
l1432:
	push A
	push $3
	cmpjne
	cmp0
	je l1433
	localdef $6
	pop $6
	push 1
	push $6
	call __tmpdb,dbfindbycol
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1435
	cthis getsndpath
	push $4
	push 0
	call __tmpdb,get
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	cmp0
	je l1437
	push GAME
	spushs
	push $6
	push $4
	push 0
	call __tmpdb,get
	spop $a
	call [$a],gmconsnd
	push $6
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	jmp l1436
l1437:
	push $6
	push $4
	push 1
	call __tmpdb,get
	push $3
	cthis addsndf
l1436:
l1435:
	localdef $3
	pop $3
	jmp l1432
l1433:
	call _dbsnd,free
	delete __tmpdb
	push $2
	cthis setsndbase
	end method
	method buildsnds
	call _dbsnd,free
	new db,__dbsnd
	push 3
	call __dbsnd,dbbuild
	push "__dbsnd"
	cthis buildfromdb
	delete __dbsnd
	end method
	method buildfromdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1438:
	push $2
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1439
	jmp l1441
l1440:
	add $2,1
	pop $2
	jmp l1438
l1441:
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 2
	spop $a
	call [$a],get
	cthis addsndf
	jmp l1440
l1439:
	cthis stdexportsnd
	end method
	method importsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis importgroup
	end method
	method importgroup
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis importgroupto
	end method
	method importgroupto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	new db,__tmpdb
	localdef $5
	push _sndbase
	pop $5
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localstring $6
	localint $7
	push 0
	pop $7
l1442:
	push $7
	call __tmpdb,getrowsno
	cmpjl
	cmp0
	je l1443
	jmp l1445
l1444:
	add $7,1
	pop $7
	jmp l1442
l1445:
	push $7
	push 1
	call __tmpdb,get
	pop $6
	push $3
	push "null"
	cmpje
	cmp0
	jne l1448
	push $3
	spushs
	push $6
	spop $a
	call [$a],contains
	jmp l1449
l1447:
	push 0
	jmp l1449
l1448:
	push 1
l1449:
	cmp0
	je l1450
	push $6
	push $7
	push 2
	call __tmpdb,get
	push $2
	cthis addsndf
	push $4
	push "null"
	cmpjne
	cmp0
	je l1452
	push $4
	spushs
	push $6
	spop $a
	call [$a],add
l1452:
l1450:
	jmp l1444
l1443:
	call _dbsnd,free
	call __tmpdb,free
	delete __tmpdb
	push $5
	cthis setsndbase
	end method
	method freesnd
	call _dbsnd,free
	end method
	method lockall
	push "lock"
	call __grobj,eval
	cthis lock
	end method
	method unlockall
	push "unlock"
	call __grobj,eval
	cthis unlock
	end method
	method gmunlockall
	push GAME
	spushs
	spop $a
	call [$a],unlockall
	end method
	method gmlockall
	push GAME
	spushs
	spop $a
	call [$a],lockall
	end method
	method lock=
	localint $1
	pop $1
	push $1
	cmp0
	je l1454
	cthis gmlockall
	jmp l1453
l1454:
	cthis gmunlockall
l1453:
	end method
	method gmcontrol_mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	push _b_ismoddbg
	cmp0
	je l1456
	call moddbg,msmove
l1456:
	end method
	method gmcontrol_mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	call __dblclick,isplaying
	cmp0
	je l1458
	cthis mouse_dblclick
	jmp l1457
l1458:
	call __dblclick,play
l1457:
	push _b_ismoddbg
	cmp0
	je l1460
	call moddbg,mslclick
l1460:
	end method
	method is_dblclick
	call __dblclick,isplaying
	end method
	method reset_dblclick
	call __dblclick,play
	end method
	method gmcontrol_mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method gmcontrol_mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	push _b_ismoddbg
	cmp0
	je l1462
	call moddbg,mslrel
l1462:
	end method
	method gmcontrol_mouserrel
	push "onmouserrel"
	call __grobj,eval
	cthis mouse_rrel
	end method
	method gmcontrol_keydown
	push "onkeydown"
	call __grobj,eval
	cthis key_down
	push _b_ismoddbg
	cmp0
	je l1464
	call moddbg,dbkeydown
l1464:
	end method
	method mousemove
	cthis gmcontrol_mousemove
	end method
	method mouselclick
	cthis gmcontrol_mouselclick
	end method
	method mouselrel
	cthis gmcontrol_mouselrel
	end method
	method mouserclick
	cthis gmcontrol_mouserclick
	end method
	method mouserrel
	cthis gmcontrol_mouserrel
	end method
	method keydown
	cthis gmcontrol_keydown
	end method
	end class

	new int,PrzygodaNumer
	push 1
	pop PrzygodaNumer
	new int,PrzygodaMode
	push "PrzygodaMode:"
	push 0
	cthis readcfg
	pop PrzygodaMode
	new int,AdventureGame
	push "save.txt"
	new classfullsave,clsave
	new string,sgmlastscene
	push "null"
	pop sgmlastscene
	new string,sgmglobpath
	push "null"
	pop sgmglobpath
	new string,sgmgame
	push "null"
	pop sgmgame
	push 0
	push 0
	push igmappw
	push igmapph
	new CutScene,ccs
	push 2000
	call ccs,setz
	class classadv
	parent classgame
	parent GameController
	method init
	localstring $1
	pop $1
	push igmdelay
	call engine,setloopdelay
	clparent classgame,init
	push SNDPATH
	cthis setwavpath
	push $1
	clparent GameController,init
	new string,_s_game_path
	new int,bmslock
	push 0
	pop bmslock
	new int,_b_ismodadvglob
	push "modadvglob"
	call engine,varexist
	pop _b_ismodadvglob
	new Music,music
	new Button,butgame
	push 0
	pop igmstate
	push "state_init"
	pop sgmstate
	end method
	method butenable
	cthis getname
	call butgame,addbut
	end method
	method butdisable
	cthis getname
	call butgame,removebut
	end method
	method butrefresh
	call butgame,onmousemove
	end method
	method advmslock
	push 1
	pop bmslock
	end method
	method advmsunlock
	push 0
	pop bmslock
	end method
	method advgetlock
	push bmslock
	end method
	method advmssetlock
	localint $1
	pop $1
	push $1
	cmp0
	je l1466
	cthis advmslock
	jmp l1465
l1466:
	cthis advmsunlock
l1465:
	end method
	method switch_path
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],getgraphpath
	pop _s_game_path
	call gameapi,getgamename
	spushs
	push $1
	spop $a
	call [$a],setgraphpath
	end method
	method restore_path
	call gameapi,getgamename
	spushs
	push _s_game_path
	spop $a
	call [$a],setgraphpath
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new path,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbutton,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	method advsaveonstart
	push "GAME_game"
	call gameapi,getgamename
	call clsave,set
	push "GAME_sgmgame"
	push sgmgame
	call clsave,set
	push "GAME_sgmglobpath"
	push sgmglobpath
	call clsave,set
	push "GAME_sgmlastscene"
	push sgmlastscene
	call clsave,set
	push "GAME_ccs"
	call ccs,isvisible
	call clsave,set
	cthis advautosave
	end method
	method advautosave
	push "autosave.txt"
	call clsave,save
	push _b_ismodadvglob
	cmp0
	je l1468
	push "autosave"
	call modadvglob,savepck
l1468:
	end method
	method advautoload
	push "autosave"
	cthis _advload
	end method
	method advcacheload
	push "cache"
	cthis _advload
	end method
	method advcachesave
	push "cache"
	cthis _advsave
	end method
	method _advload
	localstring $1
	pop $1
	call modadvglob,delheros
	push $1
	call modadvglob,loadpck
	push $1
	push ".txt"
	pop $b
	popax
	add $a,$b
	call clsave,load
	push "GAME_sgmgame"
	call clsave,get
	pop sgmgame
	push "GAME_sgmglobpath"
	call clsave,get
	pop sgmglobpath
	push "GAME_sgmlastscene"
	call clsave,get
	pop sgmlastscene
	push "GAME_ccs"
	call clsave,bis
	cmp0
	je l1470
	call ccs,show
	jmp l1469
l1470:
	call ccs,hide
l1469:
	push "GAME_game"
	call clsave,get
	call gameapi,play
	end method
	method _advsave
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1472
	push $1
	push ".txt"
	pop $b
	popax
	add $a,$b
	new classfullsave,_saver
	push "autosave.txt"
	call _saver,load
	call _saver,stdsave
	delete _saver
	new vector,_vcsave
	push "string"
	call _vcsave,type
	new vector,_vcsv2
	push "string"
	call _vcsv2,type
	push "grpck_autosave.txt"
	cthis saveexist
	cmp0
	je l1474
	push "grpck_autosave.txt"
	call _vcsave,vecload
l1474:
	push "grpck_"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call _vcsave,vecsave
	localdef $2
	localint $3
	push 0
	pop $3
l1475:
	push $3
	call _vcsave,size
	cmpjl
	cmp0
	je l1476
	jmp l1478
l1477:
	add $3,1
	pop $3
	jmp l1475
l1478:
	push $3
	call _vcsave,get
	pop $2
	push $2
	push "autosave_name.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecload
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push "_name.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecsave
	push $2
	push "autosave_file.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecload
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push "_file.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecsave
	jmp l1477
l1476:
	delete _vcsave
	delete _vcsv2
l1472:
	end method
	method getsavename
	push "save"
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	end method
	method advload_game
	cthis getsavename
	cthis _advload
	end method
	method advsave_game
	cthis getsavename
	cthis _advsave
	end method
	method advstdstate
	push sgmstate
	push "state_std"
	cmpje
	end method
	method advsetstdstate
	push "state_std"
	cthis advsetstate
	end method
	method advsetstate
	localstring $1
	pop $1
	push $1
	pop sgmstate
	end method
	method advisstate
	localstring $1
	pop $1
	push sgmstate
	push $1
	cmpje
	end method
	method stdexitdefadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "GAME_snextgame"
	push $2
	call clsave,set
	push "GAME_snextgamepath"
	push $1
	call clsave,set
	push "GAME_snextgametype"
	push "-def"
	call clsave,set
	cthis stdexitgame
	end method
	method stdexitadvadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "GAME_snextgame"
	push $2
	call clsave,set
	push "GAME_snextgamepath"
	push $1
	call clsave,set
	push "GAME_snextgametype"
	push "-adv"
	call clsave,set
	cthis stdexitgame
	end method
	method stdexit
	localstring $1
	pop $1
	push "GAME_snextgame"
	push $1
	call clsave,set
	push "GAME_snextgamepath"
	push "null"
	call clsave,set
	push "GAME_snextgametype"
	push "-mg"
	call clsave,set
	cthis stdexitgame
	end method
	method stdexitgame
	push sgmstate
	push "state_end"
	cmpjne
	cmp0
	je l1480
	push "GAME_fadeout_music"
	call clsave,bis
	cmp0
	je l1482
	push "GAME_fadeout_music"
	push 0
	call clsave,set
	push 1000
	call music,fadeout
l1482:
	push "state_end"
	pop sgmstate
	push "classadv0"
	call ccs,close
l1480:
	end method
	method classadv0
	localstring $1
	push "GAME_snextgame"
	call clsave,get
	pop $1
	push "GAME_snextgametype"
	call clsave,get
	spushs
	push "-def"
	cmpst
	jne l1484
	spop $a
	push "GAME_snextgamepath"
	call clsave,get
	push $1
	cthis gotoadv
	jmp l1483
l1484:
	push "-adv"
	cmpst
	jne l1485
	spop $a
	push "GAME_snextgamepath"
	call clsave,get
	push $1
	cthis gotoadv2
	jmp l1483
l1485:
	spop $a
	push $1
	call gameapi,play
l1483:
	end method
	method gotoadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push $2
	pop sgmgame
	push "gameadvdef"
	call gameapi,play
	end method
	method gotoadv2
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push "null"
	pop sgmgame
	push $2
	call gameapi,play
	end method
	method onmusicfin
	call music,play
	end method
	method exit
	cthis game_exit
	push igmsubtitle
	cmp0
	je l1487
	call subtitle,reset
l1487:
	push _b_ismodadvglob
	cmp0
	je l1489
	call modadvglob,onexit
l1489:
	end method
	method appdeactivate
	call gameapi,pause
	end method
	method appactivate
	call gameapi,resume
	end method
	end class

	method winsave
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1491
	new db,_db_win
	push "output.db"
	call _db_win,load
	localdef $2
	call _db_win,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	call _db_win,add
	push "output.db"
	call _db_win,save
	delete _db_win
l1491:
	end method
	method saveexist
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	end method
	method vecsave
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1493
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis save
l1493:
	end method
	method vecload
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis load
	end method
	class classfullsave
	method init
	localstring $1
	pop $1
	new db,dbsav
	push "|"
	call dbsav,setseparator
	new string,sstdfile
	push $1
	cthis setfile
	new int,saveonset
	push 0
	pop saveonset
	end method
	method save
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1495
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call dbsav,save
l1495:
	end method
	method _load
	localstring $1
	pop $1
	push $1
	call engine,fileexist
	cmp0
	je l1497
	call dbsav,free
	push $1
	call dbsav,load
l1497:
	end method
	method load
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis _load
	end method
	method print
	call dbsav,print
	end method
	method printvar
	localstring $1
	pop $1
	cthis getname
	push ".var: "
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push " = "
	pop $b
	popax
	add $a,$b
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method setfile
	localstring $1
	pop $1
	push $1
	pop sstdfile
	end method
	method stdload
	push sstdfile
	cthis load
	end method
	method stdsave
	push sstdfile
	cthis save
	end method
	method free
	call dbsav,free
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1499
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l1498
l1499:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l1498:
	push saveonset
	cmp0
	je l1501
	cthis stdsave
l1501:
	end method
	method bset
	localstring $1
	pop $1
	push $1
	push 1
	cthis set
	end method
	method get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1503
	push $2
	push 1
	call dbsav,get
	jmp l1502
l1503:
	push "null"
l1502:
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1505
	push $3
	push 1
	call dbsav,get
	push $2
	cmpje
	jmp l1504
l1505:
	push 0
l1504:
	end method
	method bis
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1507
	push $2
	push 1
	call dbsav,get
	push 0
	cmpjne
	jmp l1506
l1507:
	push 0
l1506:
	end method
	method sbis
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "!"
	cmpje
	cmp0
	je l1509
	push 1
	call $1,strsubb
	cthis bis
	neg
	jmp l1508
l1509:
	push $1
	cthis bis
l1508:
	end method
	method bislist
	localstring $1
	pop $1
	new vector,vtmp
	push "string"
	call vtmp,type
	push $1
	push " "
	call vtmp,vecbuildfromstring
	localint $2
	push 0
	pop $2
	call vtmp,size
	cmp0
	je l1511
	call vtmp,first
	call clsave,sbis
	pop $2
	localint $3
	push 1
	pop $3
l1512:
	push $3
	call vtmp,size
	cmpjl
	cmp0
	je l1513
	push $3
	call vtmp,get
	spushs
	push "&"
	cmpst
	jne l1515
	spop $a
	push $2
	cmp0
	je l1516
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	call vtmp,get
	call clsave,sbis
	jmp l1518
l1516:
	push 0
	jmp l1518
l1517:
	push 1
l1518:
	pop $2
	push 2
	popax
	add $3,$a
	pop $3
	jmp l1514
l1515:
	push "|"
	cmpst
	jne l1519
	spop $a
	push $2
	cmp0
	jne l1521
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	call vtmp,get
	call clsave,sbis
	jmp l1522
l1520:
	push 0
	jmp l1522
l1521:
	push 1
l1522:
	pop $2
	push 2
	popax
	add $3,$a
	pop $3
	jmp l1514
l1519:
	spop $a
	add $3,1
	pop $3
l1514:
	jmp l1512
l1513:
l1511:
	delete vtmp
	push $2
	end method
	method bisand2
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	push $2
	push ""
	cthis bisand
	end method
	method bisand
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 1
	pop $5
l1523:
	push $2
	push $3
	cmpjle
	cmp0
	je l1524
	push $5
	cmp0
	je l1525
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	call clsave,bis
	jmp l1527
l1525:
	push 0
	jmp l1527
l1526:
	push 1
l1527:
	pop $5
	add $2,1
	pop $2
	jmp l1523
l1524:
	push $5
	end method
	method has
	localstring $1
	pop $1
	push $1
	call dbsav,findbyrow
	push 0
	cmpjae
	end method
	method bgo
	localstring $1
	pop $1
	push $1
	cthis bis
	neg
	cmp0
	je l1529
	push $1
	cthis bset
	push 1
	jmp l1528
l1529:
	push 0
l1528:
	end method
	method saveonset=
	localint $1
	pop $1
	push $1
	pop saveonset
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1531
	push $2
	call dbsav,removerow
	push saveonset
	cmp0
	je l1533
	cthis stdsave
l1533:
l1531:
	end method
	end class

	class StringChecker
	method init
	end method
	method isdigit
	localstring $1
	pop $1
	call $1,to_i
	push 0
	cmpjne
	cmp0
	jne l1535
	push 0
	push 1
	call $1,getb
	push "0"
	cmpje
	jmp l1536
l1534:
	push 0
	jmp l1536
l1535:
	push 1
l1536:
	end method
	method getint
	localstring $1
	pop $1
	call $1,to_i
	end method
	method getreal
	localstring $1
	pop $1
	call $1,to_r
	end method
	method isreal
	localstring $1
	pop $1
	push $1
	cthis isdigit
	cmp0
	je l1537
	push "."
	call $1,contains
	jmp l1539
l1537:
	push 0
	jmp l1539
l1538:
	push 1
l1539:
	end method
	method isstring
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "\""
	cmpje
	end method
	method getstring
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	end method
	end class

	class Script
	method init
	localstring $1
	pop $1
	new db,__dbcode
	new string,__sdb
	new int,__irow
	new int,__icol
	new string,__sreads
	new vector,__vec
	push "string"
	call __vec,type
	new string,__sarg
	new int,__iarg
	new real,__rarg
	new StringChecker,__csc
	push "int"
	new map2,__mp
	localint $2
	push 0
	pop $2
l1540:
	push $2
	push 10
	cmpjl
	cmp0
	je l1541
	jmp l1543
l1542:
	add $2,1
	pop $2
	jmp l1540
l1543:
	push "ARG"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	jmp l1542
l1541:
	push $1
	cthis load
	end method
	method ARG=
	localint $1
	localstring $2
	pop $2
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method ARG
	localint $1
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	end method
	method load
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1545
	ret
l1545:
	push "."
	call $1,contains
	cmp0
	je l1547
	push "__dbcode"
	pop __sdb
	push $1
	call __dbcode,loadbeh
	jmp l1546
l1547:
	push $1
	pop __sdb
l1546:
	call __mp,free
	localint $2
	push 0
	pop $2
l1548:
	push $2
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1549
	jmp l1551
l1550:
	add $2,1
	pop $2
	jmp l1548
l1551:
	push __sdb
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push "func"
	cmpje
	cmp0
	je l1553
	push __sdb
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $2
	call __mp,add
l1553:
	jmp l1550
l1549:
	push "init"
	cthis call
	end method
	method get
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method isvar
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	end method
	method getvar
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	neg
	cmp0
	je l1555
	push $1
	spushs
	spop $e
	new def,[$e]
l1555:
	push $1
	end method
	method isfunc
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l1556
	push $1
	call __csc,isreal
	neg
	jmp l1558
l1556:
	push 0
	jmp l1558
l1557:
	push 1
l1558:
	cmp0
	jne l1560
	push "::"
	call $1,contains
	jmp l1561
l1559:
	push 0
	jmp l1561
l1560:
	push 1
l1561:
	end method
	method getfunc
	localstring $1
	pop $1
	call __vec,free
	push "."
	call $1,contains
	cmp0
	je l1563
	push "."
	call $1,strgetto
	call __vec,add
	push "."
	call $1,strgetfrom
	call __vec,add
	jmp l1562
l1563:
	push "::"
	call $1,strgetto
	call __vec,add
	push "::"
	call $1,strgetfrom
	call __vec,add
l1562:
	end method
	method _get
	add __icol,1
	pop __icol
	push __sdb
	spushs
	push __irow
	push __icol
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	end method
	method isnext
	push __icol
	push __sdb
	spushs
	push __irow
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1565
	push __sdb
	spushs
	push __irow
	push __icol
	spop $a
	call [$a],get
	pop __sreads
	push 1
	jmp l1564
l1565:
	push 0
l1564:
	end method
	method perror
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cmp0
	je l1567
	push "error: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
l1567:
	end method
	method interpcall
	localstring $1
	pop $1
	push $1
	cthis getfunc
	localstring $2
	push 0
	call __vec,get
	pop $2
	push 0
	push 1
	call $2,getb
	push "*"
	cmpje
	cmp0
	je l1569
	push 1
	call $2,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1569:
	localstring $3
	push 1
	call __vec,get
	pop $3
	push 0
	push 1
	call $3,getb
	push "*"
	cmpje
	cmp0
	je l1571
	push 1
	call $3,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1571:
	call __vec,free
	add __icol,1
	pop __icol
	localstring $4
	cthis _get
	pop $4
l1572:
	push $4
	push ")"
	cmpjne
	cmp0
	je l1573
	push $4
	cthis getexpr
	cthis _get
	pop $4
	jmp l1572
l1573:
	push "::"
	call $1,contains
	cmp0
	je l1575
	push $2
	spushs
	push $3
	spushs
	spop $d
	spop $a
	 clparent [$a],[$d]
	jmp l1574
l1575:
	push $2
	push "this"
	cmpje
	cmp0
	je l1577
	push "null"
	pop $2
l1577:
	push $2
	push $3
	cthis callfun
l1574:
	end method
	method getvname
	localstring $1
	pop $1
	push $1
	cthis isvar
	cmp0
	je l1579
	push $1
	cthis getvar
	pop $1
	jmp l1578
l1579:
	push $1
	call __csc,isreal
	cmp0
	je l1581
	call $1,to_r
	pop __rarg
	push "__rarg"
	pop $1
	jmp l1580
l1581:
	push $1
	call __csc,isdigit
	cmp0
	je l1583
	push $1
	pop __iarg
	push "__iarg"
	pop $1
	jmp l1582
l1583:
	push $1
	call __csc,isstring
	cmp0
	je l1585
	push $1
	call __csc,getstring
	pop __sarg
	push "__sarg"
	pop $1
l1585:
l1582:
l1580:
l1578:
	push $1
	end method
	method isscriptfun
	localstring $1
	pop $1
	push "->"
	call $1,contains
	end method
	method getscriptfun
	localstring $1
	pop $1
	push 2
	call $1,strsubb
	end method
	method getexpr
	localstring $1
	pop $1
	push $1
	call __csc,isstring
	cmp0
	je l1587
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
	jmp l1586
l1587:
	push $1
	cthis isfunc
	cmp0
	je l1589
	push $1
	cthis interpcall
	jmp l1588
l1589:
	push $1
	cthis isscriptfun
	cmp0
	je l1591
	localint $2
	push __irow
	pop $2
	localint $3
	push __icol
	pop $3
	push $1
	cthis getscriptfun
	cthis call
	push $2
	pop __irow
	push $3
	pop __icol
	jmp l1590
l1591:
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
l1590:
l1588:
l1586:
	end method
	method cmp
	localint $1
	push 0
	pop $1
	localdef $2
	cthis _get
	cthis getexpr
	pop $2
	localstring $3
	cthis _get
	pop $3
	localdef $4
	cthis _get
	cthis getexpr
	pop $4
	push $3
	spushs
	push "=="
	cmpst
	jne l1593
	spop $a
	push $2
	push $4
	cmpje
	pop $1
	jmp l1592
l1593:
	push "!="
	cmpst
	jne l1594
	spop $a
	push $2
	push $4
	cmpjne
	pop $1
	jmp l1592
l1594:
	push "<"
	cmpst
	jne l1595
	spop $a
	push $2
	push $4
	cmpjl
	pop $1
	jmp l1592
l1595:
	push ">"
	cmpst
	jne l1596
	spop $a
	push $2
	push $4
	cmpja
	pop $1
	jmp l1592
l1596:
	push "<="
	cmpst
	jne l1597
	spop $a
	push $2
	push $4
	cmpjle
	pop $1
	jmp l1592
l1597:
	push ">="
	cmpst
	jne l1598
	spop $a
	push $2
	push $4
	cmpjae
	pop $1
	jmp l1592
l1598:
	spop $a
l1592:
	cthis _get
	pop $3
	push $3
	push "||"
	cmpje
	cmp0
	je l1600
	push $1
	cmp0
	jne l1602
	cthis cmp
	jmp l1603
l1601:
	push 0
	jmp l1603
l1602:
	push 1
l1603:
	jmp l1599
l1600:
	push $3
	push "&&"
	cmpje
	cmp0
	je l1605
	push $1
	cmp0
	je l1606
	cthis cmp
	jmp l1608
l1606:
	push 0
	jmp l1608
l1607:
	push 1
l1608:
	jmp l1604
l1605:
	push $1
l1604:
l1599:
	end method
	method containsfun
	localstring $1
	pop $1
	push $1
	call __mp,contains
	end method
	method addscript
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push A
	push "_script_eval"
	cthis getname
	push "_smetscript_"
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],vars2
	push $1
	spushs
	push $2
	push "Script0"
	spop $a
	call [$a],addmethod
	end method
	method Script0
	push _script_eval
	spushs
	push "_smetscript_"
	cthis methodname
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spop $a
	call [$a],call
	end method
	method call
	localstring $1
	pop $1
	push $1
	call __mp,contains
	neg
	cmp0
	je l1610
	ret
l1610:
	push $1
	call __mp,get
	pop __irow
	add __irow,1
	pop __irow
	push 0
	pop __icol
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	localint $12
	localint $13
l1611:
	push $2
	cmp0
	je l1612
	push 0
	pop __icol
	cthis _get
	pop $8
	push $8
	spushs
	push "new"
	cmpst
	jne l1614
	spop $a
	cthis _get
	pop $8
	cthis _get
	pop $9
	push 1
	call $9,strsubb
	pop $9
	cthis isnext
	cmp0
	je l1616
	push __sreads
	push "["
	cmpje
	cmp0
	je l1618
	add __icol,1
	pop __icol
	cthis _get
	pop $11
	push 0
	pop $12
l1619:
	push $12
	push $11
	cmpjl
	cmp0
	je l1620
	jmp l1622
l1621:
	add $12,1
	pop $12
	jmp l1619
l1622:
	push $8
	spushs
	push $9
	push $12
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	jmp l1621
l1620:
	jmp l1617
l1618:
	add __icol,1
	pop __icol
l1623:
	cthis isnext
	cmp0
	je l1624
	push __sreads
	push ")"
	cmpjne
	jmp l1626
l1624:
	push 0
	jmp l1626
l1625:
	push 1
l1626:
	cmp0
	je l1627
	cthis _get
	cthis getexpr
	jmp l1623
l1627:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1617:
	jmp l1615
l1616:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1615:
	add __irow,1
	pop __irow
	jmp l1613
l1614:
	push "delete"
	cmpst
	jne l1628
	spop $a
	cthis _get
	cthis getvar
	spushs
	spop $d
	delete [$d]
	add __irow,1
	pop __irow
	jmp l1613
l1628:
	push $8
	push "if"
	cmpje
	cmp0
	jne l1630
	push $6
	cmp0
	jne l1630
	push $5
	jmp l1631
l1629:
	push 0
	jmp l1631
l1630:
	push 1
l1631:
	cmp0
	je l1633
	push $8
	jmp l1632
l1633:
	push ""
l1632:
	cmpst
	jne l1634
	spop $a
	add __icol,1
	pop __icol
	cthis cmp
	pop $4
	push $8
	push "if"
	cmpje
	cmp0
	je l1636
	push 1
	pop $3
l1636:
	push 0
	pop $6
	push 0
	pop $5
	add __irow,1
	pop __irow
	push $4
	neg
	cmp0
	je l1638
	push 1
	pop $12
l1639:
	push $12
	cmp0
	je l1640
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	pop $8
	push $8
	push "else"
	cmpje
	cmp0
	jne l1643
	push $8
	push "elif"
	cmpje
	cmp0
	jne l1643
	push $8
	push "fi"
	cmpje
	cmp0
	jne l1643
	push $8
	push "done"
	cmpje
	jmp l1644
l1642:
	push 0
	jmp l1644
l1643:
	push 1
l1644:
	cmp0
	je l1645
	push 0
	pop $12
	jmp l1641
l1645:
	add __irow,1
	pop __irow
l1641:
	jmp l1639
l1640:
l1638:
	jmp l1613
l1634:
	push "else"
	cmpst
	jne l1646
	spop $a
	push $3
	neg
	push "else without if"
	cthis perror
	add __irow,1
	pop __irow
	push $4
	cmp0
	je l1648
l1649:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1650
	add __irow,1
	pop __irow
	jmp l1649
l1650:
l1648:
	jmp l1613
l1646:
	push "fi"
	cmpst
	jne l1651
	spop $a
	push $3
	neg
	push "fi without if"
	cthis perror
	push 0
	pop $3
	push 0
	pop $4
	push 0
	pop $6
	add __irow,1
	pop __irow
	jmp l1613
l1651:
	push "elif"
	cmpst
	jne l1652
	spop $a
	push $4
	cmp0
	je l1654
	add __irow,1
	pop __irow
l1655:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1656
	add __irow,1
	pop __irow
	jmp l1655
l1656:
	jmp l1653
l1654:
	push 1
	pop $6
l1653:
	jmp l1613
l1652:
	push "end"
	cmpst
	jne l1657
	spop $a
	push 0
	pop $2
	jmp l1613
l1657:
	push "while"
	cmpst
	jne l1658
	spop $a
	push __irow
	pop $7
	push 1
	pop $5
	jmp l1613
l1658:
	push "done"
	cmpst
	jne l1659
	spop $a
	push $4
	cmp0
	je l1661
	push $7
	pop __irow
	jmp l1660
l1661:
	add __irow,1
	pop __irow
l1660:
	jmp l1613
l1659:
	push "print"
	cmpst
	jne l1662
	spop $a
	push ""
	pop $8
l1663:
	cthis isnext
	cmp0
	je l1664
	cthis _get
	cthis getexpr
	popax
	add $8,$a
	pop $8
	jmp l1663
l1664:
	push $8
	call engine,print
	add __irow,1
	pop __irow
	jmp l1613
l1662:
	push "return"
	cmpst
	jne l1665
	spop $a
	cthis isnext
	cmp0
	je l1667
	push __sreads
	cthis getexpr
l1667:
	ret
	jmp l1613
l1665:
	spop $a
	push 0
	push 1
	call $8,getb
	push "$"
	cmpje
	cmp0
	je l1669
	push $8
	cthis getvar
	pop $8
	add __icol,1
	pop __icol
	push $8
	spushs
	cthis _get
	cthis getexpr
	spop $b
	popax
	mov [$b],$a
l1670:
	cthis isnext
	cmp0
	je l1671
	add __icol,1
	pop __icol
	localdef $14
	cthis _get
	cthis getexpr
	pop $14
	push __sreads
	spushs
	push "+"
	cmpst
	jne l1673
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	add [$b],$a
	pop [$b]
	jmp l1672
l1673:
	push "-"
	cmpst
	jne l1674
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	sub [$b],$a
	pop [$b]
	jmp l1672
l1674:
	push "*"
	cmpst
	jne l1675
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	mul [$b],$a
	pop [$b]
	jmp l1672
l1675:
	push "/"
	cmpst
	jne l1676
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$a
	jmp l1672
l1676:
	push "%"
	cmpst
	jne l1677
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$d
	jmp l1672
l1677:
	spop $a
l1672:
	jmp l1670
l1671:
	jmp l1668
l1669:
	push $8
	cthis getexpr
l1668:
	add __irow,1
	pop __irow
l1613:
	push __irow
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1679
	push 1
	push "function "
	push $1
	pop $b
	popax
	add $a,$b
	push " not finished!"
	pop $b
	popax
	add $a,$b
	cthis perror
	push 0
	pop $2
l1679:
	jmp l1611
l1612:
	end method
	end class

	method animaloader_load
	localstring $1
	pop $1
	new db,_dbanl
	push $1
	cthis getpath
	call _dbanl,loadbeh
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	localint $9
	localreal $10
	localreal $11
	localint $12
	push 0
	pop $12
l1680:
	push $12
	call _dbanl,getrowsno
	cmpjl
	cmp0
	je l1681
	jmp l1683
l1682:
	add $12,1
	pop $12
	jmp l1680
l1683:
	push $12
	call _dbanl,getcolsno
	push 0
	cmpja
	cmp0
	je l1685
	push 0
	pop $7
	push $12
	push $7
	call _dbanl,get
	spushs
	push "an:"
	cmpst
	jne l1687
	spop $a
	add $7,1
	pop $7
	push $12
	push $7
	call _dbanl,get
	pop $2
	add $7,1
	pop $7
	push ".pyz"
	call $2,contains
	cmp0
	je l1689
	push "an"
	push ".pyz"
	call $2,strsubes
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push 0
	cthis newanima
	jmp l1688
l1689:
	push $12
	push $7
	call _dbanl,get
	push $2
	cthis copyanima
	add $7,1
	pop $7
l1688:
	localint $13
	push $7
	pop $13
l1690:
	push $13
	push $12
	call _dbanl,getcolsno
	cmpjl
	cmp0
	je l1691
	jmp l1693
l1692:
	add $13,1
	pop $13
	jmp l1690
l1693:
	push $12
	push $13
	call _dbanl,get
	pop $6
	push $6
	spushs
	push "-z"
	cmpst
	jne l1695
	spop $a
	add $13,1
	pop $13
	push $5
	spushs
	push $12
	push $13
	call _dbanl,get
	spop $a
	call [$a],setz
	jmp l1694
l1695:
	push "-hide"
	cmpst
	jne l1696
	spop $a
	push $5
	spushs
	spop $a
	call [$a],hide
	jmp l1694
l1696:
	push "-opacityframe"
	cmpst
	jne l1697
	spop $a
	push $5
	spushs
	spop $a
	call [$a],anopacityframe
	jmp l1694
l1697:
	push "-nplay"
	cmpst
	jne l1698
	spop $a
	add $13,1
	pop $13
	push $5
	spushs
	push $12
	push $13
	call _dbanl,get
	spushs
	spop $h
	call $h,to_i
	spop $a
	call [$a],play
	jmp l1694
l1698:
	push "-play"
	cmpst
	jne l1699
	spop $a
	add $13,1
	pop $13
	push $5
	spushs
	push $12
	push $13
	call _dbanl,get
	spop $a
	call [$a],play
	jmp l1694
l1699:
	push "-delay"
	cmpst
	jne l1700
	spop $a
	add $13,1
	pop $13
	push $5
	spushs
	push $12
	push $13
	call _dbanl,get
	spop $a
	call [$a],setdelay
	jmp l1694
l1700:
	push "-drawmode"
	cmpst
	jne l1701
	spop $a
	push $12
	push $13
	call _dbanl,get
	pop $2
	add $13,1
	pop $13
	push $2
	push "lineardodge"
	cmpje
	cmp0
	je l1703
	push $5
	spushs
	push 1
	spop $a
	call [$a],setdrawmode
l1703:
	jmp l1694
l1701:
	push "-hideonstart"
	cmpst
	jne l1704
	spop $a
	push $5
	spushs
	spop $a
	call [$a],anhideonsetframe
	jmp l1694
l1704:
	push "-buildroto"
	cmpst
	je l1706
	push "-buildrotorle"
	cmpst
	je l1706
	jmp l1705
l1706:
	spop $a
	add $13,1
	pop $13
	localreal $14
	push $12
	push $13
	call _dbanl,get
	pop $14
	add $13,1
	pop $13
	localreal $15
	push $12
	push $13
	call _dbanl,get
	pop $15
	add $13,1
	pop $13
	localreal $16
	push $12
	push $13
	call _dbanl,get
	pop $16
	add $13,1
	pop $13
	localint $17
	push $12
	push $13
	call _dbanl,get
	pop $17
	push $5
	push $14
	push $15
	push $16
	push $17
	push $6
	push "-buildrotorle"
	cmpje
	cmp0
	je l1708
	push 1
	jmp l1707
l1708:
	push 0
l1707:
	cthis gmbuildroto
	jmp l1694
l1705:
	spop $a
	push $5
	push "_dbanl"
	push $12
	push $13
	cthis animaloader_an
	pop $13
l1694:
	jmp l1692
l1691:
	jmp l1686
l1687:
	spop $a
l1686:
l1685:
	jmp l1682
l1681:
	end method
	method animaloader_an
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	end method
	method gmbuildroto
	localstring $1
	localreal $2
	localreal $3
	localreal $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $7
	localint $8
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $8
	push $1
	spushs
	push 1
	push 0
	spop $a
	call [$a],setframe
	push $1
	spushs
	push $7
	push $8
	spop $a
	call [$a],ansetbpos
	localstring $9
	localstring $10
	localreal $11
	push 0.0
	pop $11
	call $4,abs
	pop $4
	push 0
	pop $7
	localstring $12
	push "null"
	pop $12
	localreal $13
	push $3
	pop $13
l1709:
	push $13
	push $2
	cmpjle
	cmp0
	je l1710
	jmp l1712
l1711:
	push $11
	popax
	add $13,$a
	pop $13
	jmp l1709
l1712:
	localreal $14
	push $13
	push $3
	pop $b
	popax
	sub $a,$b
	push $2
	push $3
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	div $a,$b
	psax
	spushs
	spop $h
	call $h,abs
	pop $14
	push 0.1
	call $14,_rin1
	cmp0
	je l1714
	push 0.4
	push $4
	pop $b
	popax
	mul $a,$b
	pop $11
	jmp l1713
l1714:
	push 0.2
	call $14,_rin1
	cmp0
	je l1716
	push 0.8
	push $4
	pop $b
	popax
	mul $a,$b
	pop $11
	jmp l1715
l1716:
	push $4
	pop $11
l1715:
l1713:
	push "_imgroto"
	push $7
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new img,[$e]
	push $10
	spushs
	push $1
	push $13
	push 1.0
	push 1.0
	spop $a
	call [$a],buildrotozoom
l1717:
	push $12
	push "null"
	cmpjne
	cmp0
	je l1718
	push $10
	spushs
	spop $a
	call [$a],getw
	push $12
	spushs
	spop $a
	call [$a],getw
	cmpje
	cmp0
	je l1718
	push $10
	spushs
	spop $a
	call [$a],geth
	push $12
	spushs
	spop $a
	call [$a],geth
	cmpje
	cmp0
	je l1718
	push $10
	spushs
	spop $a
	call [$a],getpx
	push $12
	spushs
	spop $a
	call [$a],getpx
	cmpje
	cmp0
	je l1718
	push $10
	spushs
	spop $a
	call [$a],getpy
	push $12
	spushs
	spop $a
	call [$a],getpy
	cmpje
	jmp l1720
l1718:
	push 0
	jmp l1720
l1719:
	push 1
l1720:
	cmp0
	je l1721
	push 0.2
	pop $14
	push $14
	push $11
	pop $b
	popax
	mul $a,$b
	popax
	add $13,$a
	pop $13
	push $14
	push 1.0
	pop $b
	popax
	add $a,$b
	popax
	mul $11,$a
	pop $11
	push $10
	spushs
	push $1
	push $13
	push 1.0
	push 1.0
	spop $a
	call [$a],buildrotozoom
	jmp l1717
l1721:
	push $10
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],setz
	push $10
	spushs
	spop $a
	call [$a],hide
	push $6
	cmp0
	je l1723
	push $10
	spushs
	spop $a
	call [$a],rle
l1723:
	push $10
	pop $12
	add $7,1
	pop $7
	jmp l1711
l1710:
	push "_timroto"
	push $1
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	push "global8"
	cthis cycle=
	push $9
	spushs
	push $5
	spop $a
	call [$a],setcycle
	push $9
	spushs
	push A
	push "san"
	push $1
	push "ileimgs"
	push $7
	push "slastimg"
	push $10
	push "idimg"
	push 0
	push "dir"
	push 1
	spop $a
	call [$a],vars2
	push $1
	spushs
	spop $a
	call [$a],hide
	push "_imgroto0"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	push $9
	spushs
	spop $a
	call [$a],play
	end method
	method global8
	push slastimg
	spushs
	spop $a
	call [$a],hide
	push "_imgroto"
	push idimg
	pop $b
	popax
	add $a,$b
	push san
	pop $b
	popax
	add $a,$b
	pop slastimg
	push slastimg
	spushs
	spop $a
	call [$a],show
	push idimg
	push dir
	pop $b
	popax
	add $a,$b
	pop idimg
	push idimg
	push 0
	cmpjl
	cmp0
	je l1725
	push 0
	pop idimg
	push 1
	pop dir
	jmp l1724
l1725:
	push idimg
	push ileimgs
	cmpjae
	cmp0
	je l1727
	push ileimgs
	push 1
	pop $b
	popax
	sub $a,$b
	pop idimg
	push 1
	popax
	sub 0,$a
	pop dir
l1727:
l1724:
	cthis play
	end method
	method transparent
	push 0
	push 0
	push 0
	push 0
	ret
	end method
	method red
	push 255
	push 0
	push 0
	ret
	end method
	method green
	push 0
	push 255
	push 0
	ret
	end method
	method blue
	push 0
	push 0
	push 255
	ret
	end method
	method white
	push 255
	push 255
	push 255
	ret
	end method
	method black
	push 0
	push 0
	push 0
	ret
	end method
	method grey
	localint $1
	pop $1
	push $1
	push $1
	push $1
	ret
	end method
	method yellow
	push 255
	push 255
	push 0
	ret
	end method
	class Color
	method init
	push A
	push "r"
	push "g"
	push "b"
	push "a"
	cthis vars
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],get
	cthis set
	end method
	method img=
	localdef $1
	pop $1
	push $1
	spushs
	push $1
	clparent classansearcher,firstnotrx1y
	spop $a
	call [$a],getrgba
	pop a
	pop b
	pop g
	pop r
	end method
	method get
	push r
	push g
	push b
	push a
	ret
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop a
	pop b
	pop g
	pop r
	end method
	method rgb=
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	pop b
	pop g
	pop r
	end method
	method rgb
	push r
	push g
	push b
	ret
	end method
	method print
	push "Color::"
	cthis getname
	pop $b
	popax
	add $a,$b
	push " (r,g,b,a) = ("
	pop $b
	popax
	add $a,$b
	push r
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push g
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push a
	pop $b
	popax
	add $a,$b
	push ")"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	end class

	class classasker
	parent newvars
	method init
	clparent newvars,init
	new string,sfuncyes
	push "null"
	pop sfuncyes
	new string,sfuncno
	push "null"
	pop sfuncno
	new string,ssndask
	new string,ssndyes
	new string,ssndno
	new classsound,clsnd
	end method
	method reset
	push "null"
	pop sfuncyes
	push "null"
	pop sfuncno
	call buts,resetall
	end method
	method setfuncs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sfuncyes
	push $2
	pop sfuncno
	end method
	method fxonmovon
	localstring $1
	pop $1
	push $1
	call buts,sfxonmovon
	end method
	method setmouse
	localstring $1
	pop $1
	push "yes"
	push $1
	call buts,newmouse
	push "no"
	push $1
	call buts,newmouse
	end method
	method load
	localstring $1
	localint $2
	pop $2
	pop $1
	new classbutton,buts
	push $1
	push $2
	push "null"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call buts,disableall
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push $5
	cthis setfuncs
	push $1
	push $2
	push $3
	cthis ask2
	end method
	method ask2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	pop ssndask
	push $2
	pop ssndyes
	push $3
	pop ssndno
	call gameapi,pause
	call buts,benableall
	push "bkg"
	call buts,pause
	call clsnd,creset
	push $1
	call clsnd,cbplay
	cthis getname
	push "_ask"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovon
	localstring $1
	pop $1
	push $1
	push "yes"
	cmpje
	cmp0
	je l1729
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndyes
	call clsnd,cbplay
	jmp l1728
l1729:
	push $1
	push "no"
	cmpje
	cmp0
	je l1731
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndno
	call clsnd,cbplay
l1731:
l1728:
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "bkg"
	cmpje
	cmp0
	je l1733
	ret
l1733:
	call gameapi,resume
	call buts,disableall
	push 0
	call clsnd,cactsndstop
	push $1
	push "yes"
	cmpje
	cmp0
	je l1735
	push sfuncyes
	push "null"
	cmpjne
	jmp l1737
l1735:
	push 0
	jmp l1737
l1736:
	push 1
l1737:
	cmp0
	je l1738
	push sfuncyes
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_yes"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l1734
l1738:
	push $1
	push "no"
	cmpje
	cmp0
	je l1740
	push sfuncno
	push "null"
	cmpjne
	jmp l1742
l1740:
	push 0
	jmp l1742
l1741:
	push 1
l1742:
	cmp0
	je l1743
	push sfuncno
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_no"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1743:
l1734:
	end method
	method disabled
	call buts,disabled
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	end class

	class classplacepointer
	method init
	new anima,anpointer
	push "onfinish"
	push "classplacepointer0"
	call anpointer,addmethod
	new int,_iz
	push 1000
	pop _iz
	end method
	method classplacepointer0
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anpointer,load
	push _iz
	cthis setz
	call anpointer,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push $1
	call anpointer,setz
	end method
	method stop
	push 0
	call anpointer,stop
	end method
	method stoph
	push 0
	call anpointer,stop
	call anpointer,hide
	end method
	method show
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,setpos
	push $3
	call anpointer,play
	end method
	method move
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,move
	end method
	method showob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	cthis show
	end method
	method showpob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	cthis show
	end method
	end class

	class SimpleCounter
	method init
	localint $1
	pop $1
	push "length"
	push $1
	cthis var2
	new int,iid
	push 0
	pop iid
	end method
	method next
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push length
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	end method
	method set
	localint $1
	pop $1
	push $1
	pop iid
	end method
	method reset
	push 0
	pop iid
	end method
	method get
	push iid
	end method
	end class

	module clstrdigit
	method init
	end method
	method getdigit
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	pop $3
l1744:
	call $3,length
	push $2
	cmpjl
	cmp0
	je l1745
	push "0"
	push $3
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1744
l1745:
	push $3
	ret
	end method
	method gettime
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis geth
	push $1
	cthis getm
	push $1
	cthis gets
	push "h"
	call $2,contains
	push "m"
	call $2,contains
	push "s"
	call $2,contains
	cthis getstime
	ret
	end method
	method getstime
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $7
	push ""
	pop $7
	push $4
	cmp0
	je l1747
	push $1
	popax
	add $7,$a
	pop $7
l1747:
	push $5
	cmp0
	je l1749
	push $4
	cmp0
	je l1751
	push ":"
	jmp l1750
l1751:
	push ""
l1750:
	push $2
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1749:
	push $6
	cmp0
	je l1753
	push $4
	cmp0
	jne l1755
	push $5
	jmp l1756
l1754:
	push 0
	jmp l1756
l1755:
	push 1
l1756:
	cmp0
	je l1758
	push ":"
	jmp l1757
l1758:
	push ""
l1757:
	push $3
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1753:
	push $7
	ret
	end method
	method geth
	localint $1
	pop $1
	push $1
	push 3600
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method getm
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	psax
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method gets
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method getns
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis gets
	push $2
	cthis getdigit
	ret
	end method
	method getnm
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getm
	push $2
	cthis getdigit
	ret
	end method
	method getbinary
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l1759:
	push $1
	push 0
	cmpja
	cmp0
	je l1760
	push ""
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	push 2
	popax
	div $1,$a
	mov $1,$a
	jmp l1759
l1760:
	push $2
	ret
	end method
	method bintohex
	localstring $1
	pop $1
	localstring $2
	call $1,length
	push 4
	pop $b
	popax
	div $a,$b
	push $d
	spushs
	push 3
	cmpst
	jne l1762
	spop $a
	push "0"
	jmp l1761
l1762:
	push 2
	cmpst
	jne l1763
	spop $a
	push "00"
	jmp l1761
l1763:
	push 1
	cmpst
	jne l1764
	spop $a
	push "000"
	jmp l1761
l1764:
	spop $a
	push ""
l1761:
	pop $2
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1765:
	push $3
	call $1,length
	cmpjl
	cmp0
	je l1766
	jmp l1768
l1767:
	push 4
	popax
	add $3,$a
	pop $3
	jmp l1765
l1768:
	push $3
	push 4
	call $1,getb
	spushs
	push "0000"
	cmpst
	jne l1770
	spop $a
	push "0"
	jmp l1769
l1770:
	push "0001"
	cmpst
	jne l1771
	spop $a
	push "1"
	jmp l1769
l1771:
	push "0010"
	cmpst
	jne l1772
	spop $a
	push "2"
	jmp l1769
l1772:
	push "0011"
	cmpst
	jne l1773
	spop $a
	push "3"
	jmp l1769
l1773:
	push "0100"
	cmpst
	jne l1774
	spop $a
	push "4"
	jmp l1769
l1774:
	push "0101"
	cmpst
	jne l1775
	spop $a
	push "5"
	jmp l1769
l1775:
	push "0110"
	cmpst
	jne l1776
	spop $a
	push "6"
	jmp l1769
l1776:
	push "0111"
	cmpst
	jne l1777
	spop $a
	push "7"
	jmp l1769
l1777:
	push "1000"
	cmpst
	jne l1778
	spop $a
	push "8"
	jmp l1769
l1778:
	push "1001"
	cmpst
	jne l1779
	spop $a
	push "9"
	jmp l1769
l1779:
	push "1010"
	cmpst
	jne l1780
	spop $a
	push "A"
	jmp l1769
l1780:
	push "1011"
	cmpst
	jne l1781
	spop $a
	push "B"
	jmp l1769
l1781:
	push "1100"
	cmpst
	jne l1782
	spop $a
	push "C"
	jmp l1769
l1782:
	push "1101"
	cmpst
	jne l1783
	spop $a
	push "D"
	jmp l1769
l1783:
	push "1110"
	cmpst
	jne l1784
	spop $a
	push "E"
	jmp l1769
l1784:
	push "1111"
	cmpst
	jne l1785
	spop $a
	push "F"
	jmp l1769
l1785:
	spop $a
l1769:
	popax
	add $2,$a
	pop $2
	jmp l1767
l1766:
	push $2
	end method
	end module

	method getbinary
	cthis get
	clparent clstrdigit,getbinary
	end method
	method getdigit
	localint $1
	pop $1
	cthis get
	push $1
	clparent clstrdigit,getdigit
	end method
	method getbindigit
	localint $1
	pop $1
	cthis getbinary
	push $1
	clparent clstrdigit,getdigit
	end method
	class Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1787
	push sgmfontfile
	pop $1
l1787:
	push ".ttf"
	call $1,contains
	cmp0
	je l1789
	new font,_fnt
	push $1
	push $2
	call _fnt,load
	push "_fnt"
	pop $1
l1789:
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new int,iFontSize
	push $2
	pop iFontSize
	new text,txt
	push $1
	call txt,setfont
	push $8
	call txt,setz
	push $6
	push $7
	call txt,setpos
	call txt,show
	new text,txtbg
	call txtbg,hide
	end method
	method hide
	call txt,hide
	end method
	method show
	call txt,show
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,setpos
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt,set
	push iR
	push iG
	push iB
	call txt,createtxt
	end method
	method get
	call txt,get
	ret
	end method
	method setbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	call txt,getpx
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getpy
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getw
	push iFontSize
	pop $b
	popax
	add $a,$b
	push iFontSize
	push 2
	pop $b
	popax
	mul $a,$b
	push $1
	push $2
	push $3
	push $4
	call txtbg,setbkg
	push 1
	push 255
	push 255
	push 255
	push 128
	call txtbg,setborders
	call txtbg,show
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	cthis set
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,move
	end method
	end class

	class Cypher
	parent Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push 0
	cthis set
	end method
	method add
	localint $1
	pop $1
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method iget
	cthis get
	spushs
	spop $h
	call $h,to_i
	end method
	method operator+
	localint $1
	pop $1
	push $1
	cthis add
	end method
	method operator++
	push 1
	cthis add
	end method
	method operator--
	push 1
	popax
	sub 0,$a
	cthis add
	end method
	method operator-
	localint $1
	pop $1
	push $1
	popax
	sub 0,$a
	cthis add
	end method
	method operator=
	localint $1
	pop $1
	push $1
	cthis set
	end method
	method operator==
	localint $1
	pop $1
	cthis get
	push $1
	cmpje
	end method
	method operator!=
	localint $1
	pop $1
	cthis get
	push $1
	cmpjne
	end method
	method operator>
	localint $1
	pop $1
	cthis get
	push $1
	cmpja
	end method
	method operator<
	localint $1
	pop $1
	cthis get
	push $1
	cmpjl
	end method
	end class

	class SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,sdigit
	push $1
	pop sdigit
	push A
	push "istarttime"
	push $2
	push "idtime"
	push $3
	push "itime"
	push 0
	cthis vars2
	cthis reset
	push "timcyk"
	push 1000
	push 1
	push "SecCounter0"
	cthis cnewtimerfin
	end method
	method SecCounter0
	cthis play
	cthis getbuildername
	spushs
	spop $a
	call [$a],tick
	end method
	method play
	call timcyk,play
	end method
	method stop
	push 0
	call timcyk,stop
	end method
	method sgettime
	push itime
	push sdigit
	call clstrdigit,gettime
	ret
	end method
	method gettime
	push itime
	ret
	end method
	method tick
	push idtime
	cthis update
	end method
	method reset
	push istarttime
	pop itime
	end method
	method update
	localint $1
	pop $1
	push $1
	popax
	add itime,$a
	pop itime
	end method
	end class

	class TextTimeCounter
	parent Text
	parent SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localint $10
	localint $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push $9
	push $10
	push $11
	clparent SecCounter,init
	cthis reset
	push 0
	cthis update
	end method
	method update
	localint $1
	pop $1
	push $1
	clparent SecCounter,update
	cthis sgettime
	cthis set
	push itime
	push 0
	cmpjle
	cmp0
	je l1791
	push idtime
	push 0
	cmpjl
	jmp l1793
l1791:
	push 0
	jmp l1793
l1792:
	push 1
l1793:
	cmp0
	je l1794
	cthis getname
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1794:
	end method
	end class

	class gfxObject
	method init
	localstring $1
	pop $1
	new string,sgfxobj
	push $1
	pop sgfxobj
	end method
	method setpos
	push sgfxobj
	spushs
	spop $a
	call [$a],setpos
	end method
	method move
	push sgfxobj
	spushs
	spop $a
	call [$a],move
	end method
	method getpos
	push sgfxobj
	spushs
	spop $a
	call [$a],getpos
	end method
	method getposx
	push sgfxobj
	spushs
	spop $a
	call [$a],getposx
	end method
	method getposy
	push sgfxobj
	spushs
	spop $a
	call [$a],getposy
	end method
	method getpx
	push sgfxobj
	spushs
	spop $a
	call [$a],getpx
	end method
	method getpy
	push sgfxobj
	spushs
	spop $a
	call [$a],getpy
	end method
	method getw
	push sgfxobj
	spushs
	spop $a
	call [$a],getw
	end method
	method geth
	push sgfxobj
	spushs
	spop $a
	call [$a],geth
	end method
	method getcx
	push sgfxobj
	spushs
	spop $a
	call [$a],getcx
	end method
	method getcy
	push sgfxobj
	spushs
	spop $a
	call [$a],getcy
	end method
	method getex
	push sgfxobj
	spushs
	spop $a
	call [$a],getex
	end method
	method getey
	push sgfxobj
	spushs
	spop $a
	call [$a],getey
	end method
	method lodx
	push sgfxobj
	spushs
	spop $a
	call [$a],lodx
	end method
	method lody
	push sgfxobj
	spushs
	spop $a
	call [$a],lody
	end method
	method setz
	push sgfxobj
	spushs
	spop $a
	call [$a],setz
	end method
	method getz
	push sgfxobj
	spushs
	spop $a
	call [$a],getz
	end method
	method show
	push sgfxobj
	spushs
	spop $a
	call [$a],show
	end method
	method hide
	push sgfxobj
	spushs
	spop $a
	call [$a],hide
	end method
	method isvisible
	push sgfxobj
	spushs
	spop $a
	call [$a],isvisible
	end method
	method isin
	push sgfxobj
	spushs
	spop $a
	call [$a],isin
	end method
	end class

	class gfxSquare
	parent Color
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent Color,init
	push A
	push "w"
	push "h"
	cthis vars
	push $3
	pop w
	push $4
	pop h
	new img,imggfx
	push $1
	push $2
	call imggfx,setpos
	push "imggfx"
	clparent gfxObject,init
	end method
	method build
	push w
	push h
	push r
	push g
	push b
	push a
	call imggfx,create
	end method
	method shadow
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localdef $4
	localdef $5
	call imggfx,getpos
	pop $5
	pop $4
	push 0
	push 0
	call imggfx,setpos
	new img,_img1
	new img,_img2
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1796
	push w
	push h
	cthis transparent
	call _img1,create
	push "imggfx"
	call _img1,blit
	jmp l1795
l1796:
	push w
	push h
	cthis get
	call _img1,create
l1795:
	push w
	push h
	cthis black
	push $3
	call _img2,create
	push $1
	push 0
	cmpjl
	cmp0
	je l1798
	push $1
	popax
	sub 0,$a
	push 0
	call _img1,move
	push $1
	popax
	add $4,$a
	pop $4
	jmp l1797
l1798:
	push $1
	push 0
	call _img2,move
l1797:
	push $2
	push 0
	cmpjl
	cmp0
	je l1800
	push 0
	push $2
	popax
	sub 0,$a
	call _img1,move
	push $2
	popax
	add $5,$a
	pop $5
	jmp l1799
l1800:
	push 0
	push $2
	call _img2,move
l1799:
	call $1,abs
	popax
	add w,$a
	pop w
	call $2,abs
	popax
	add h,$a
	pop h
	push w
	push h
	cthis transparent
	call imggfx,create
	push "_img2"
	call imggfx,blit
	push "_img1"
	call imggfx,blit
	delete _img1
	delete _img2
	push $4
	push $5
	call imggfx,move
	end method
	method blackborder
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $1
	cthis black
	push $2
	cthis border
	end method
	method border
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $7
	localdef $8
	call imggfx,getpos
	pop $8
	pop $7
	push 0
	push 0
	call imggfx,setpos
	new img,_img
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1802
	push w
	push h
	cthis transparent
	call _img,create
	push "imggfx"
	call _img,blit
	jmp l1801
l1802:
	push w
	push h
	cthis get
	call _img,create
l1801:
	push $1
	push $2
	call _img,move
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add w,$a
	pop w
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add h,$a
	pop h
	push w
	push h
	push $3
	push $4
	push $5
	push $6
	call imggfx,create
	push "_img"
	call imggfx,blit
	delete _img
	push $7
	push $8
	call imggfx,move
	end method
	end class

	class Rect
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push A
	push "x"
	push "y"
	push "w"
	push "h"
	cthis vars
	push $1
	push $2
	push $3
	push $4
	cthis set
	new vector,vecgr
	push "string"
	call vecgr,type
	push "gmimgvec"
	call vecgr,add
	end method
	method x2
	push x
	push w
	pop $b
	popax
	add $a,$b
	end method
	method y2
	push y
	push h
	pop $b
	popax
	add $a,$b
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	pop w
	push $4
	pop h
	end method
	method setborders
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	pop w
	push $4
	push y
	pop $b
	popax
	sub $a,$b
	pop h
	end method
	method fit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	call vecgr,contains
	cmp0
	je l1804
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],_getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1806
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1806:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],_getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1808
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1808:
	jmp l1803
l1804:
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1810
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1810:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1812
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1812:
l1803:
	cthis x2
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l1814
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1814:
	cthis y2
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1816
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1816:
	end method
	method fitrand
	localstring $1
	pop $1
	push $1
	spushs
	push x
	push w
	push $1
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	push y
	push h
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	end method
	method fitgrouprand
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1817:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1818
	jmp l1820
l1819:
	add $2,1
	pop $2
	jmp l1817
l1820:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fitrand
	jmp l1819
l1818:
	end method
	method fitgroup
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1821:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1822
	jmp l1824
l1823:
	add $2,1
	pop $2
	jmp l1821
l1824:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fit
	jmp l1823
l1822:
	end method
	method isin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push x
	cmpjae
	cmp0
	je l1825
	push $1
	push x
	push w
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1825
	push $2
	push y
	cmpjae
	cmp0
	je l1825
	push $2
	push y
	push h
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l1827
l1825:
	push 0
	jmp l1827
l1826:
	push 1
l1827:
	end method
	end class

	class ImgRect
	method init
	push A
	push "ix"
	push 0
	push "iy"
	push 0
	push "iw"
	push 0
	push "ih"
	push 0
	push "bvis"
	push 1
	push "iz"
	push 0
	cthis vars2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop ix
	push $2
	pop iy
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add ix,$a
	pop ix
	push $2
	popax
	add iy,$a
	pop iy
	end method
	method getpos
	push ix
	push iy
	ret
	end method
	method getposx
	push ix
	end method
	method getposy
	push iy
	end method
	method getpx
	push ix
	end method
	method getpy
	push iy
	end method
	method getw
	push iw
	end method
	method geth
	push ih
	end method
	method getcx
	push ix
	push iw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	push iy
	push ih
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getex
	push ix
	push iw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	push iy
	push ih
	pop $b
	popax
	add $a,$b
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop iz
	end method
	method getz
	push iz
	end method
	method show
	push 1
	pop bvis
	end method
	method hide
	push 0
	pop bvis
	end method
	method isvisible
	push bvis
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpje
	cmp0
	jne l1830
	cthis isvisible
	jmp l1831
l1829:
	push 0
	jmp l1831
l1830:
	push 1
l1831:
	cmp0
	je l1832
	push $1
	push ix
	cmpjae
	cmp0
	je l1833
	push $1
	push ix
	push iw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1833
	push $2
	push iy
	cmpjae
	cmp0
	je l1833
	push $2
	push iy
	push ih
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l1835
l1833:
	push 0
	jmp l1835
l1834:
	push 1
l1835:
	jmp l1828
l1832:
	push 0
l1828:
	end method
	method setrect
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ix
	push $2
	pop iy
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	pop iw
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	pop ih
	end method
	method print
	push "x: "
	push ix
	pop $b
	popax
	add $a,$b
	push ", y: "
	pop $b
	popax
	add $a,$b
	push iy
	pop $b
	popax
	add $a,$b
	push ", w: "
	pop $b
	popax
	add $a,$b
	push iw
	pop $b
	popax
	add $a,$b
	push ", h: "
	pop $b
	popax
	add $a,$b
	push ih
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	push $1
	spushs
	spop $a
	call [$a],getz
	push $1
	spushs
	spop $a
	call [$a],isvisible
	pop bvis
	pop iz
	pop ih
	pop iw
	pop iy
	pop ix
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	new string,_sobfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	spushs
	push _sfun
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	cmpjne
	cmp0
	je l1837
	push _sobfin
	push "null"
	cmpje
	cmp0
	je l1839
	push _sfunfin
	spushs
	spop $d
	cthis [$d]
	jmp l1838
l1839:
	push _sobfin
	spushs
	push _sfunfin
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1838:
l1837:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	cmpja
	cmp0
	je l1841
	push _ib2
	cthis _cfinito
	jmp l1840
l1841:
	push _ival
	push _ib1
	cmpjl
	cmp0
	je l1843
	push _ib1
	cthis _cfinito
	jmp l1842
l1843:
	push _sob
	spushs
	push _sfun
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l1842:
l1840:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sobfin
	push $8
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $9
	call $2,abs
	pop $9
	push $1
	push 0
	cmpjle
	cmp0
	jne l1846
	push $9
	push $5
	cmpje
	cmp0
	jne l1846
	push $9
	push $6
	cmpja
	jmp l1847
l1845:
	push 0
	jmp l1847
l1846:
	push 1
l1847:
	cmp0
	je l1848
	ret
l1848:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	cmpja
	cmp0
	je l1850
	push _ib1
	pop _ival
	jmp l1849
l1850:
	push $2
	push 0
	cmpjl
	cmp0
	je l1852
	push _ib2
	pop _ival
	jmp l1851
l1852:
	ret
l1851:
l1849:
	push $3
	spushs
	push $4
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method setopacity
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setopacity"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push "null"
	push $4
	cthis _play
	end method
	method isplaying
	call timf,isplaying
	end method
	end class

	class CutScene
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,X1
	new int,Y1
	new int,X2
	new int,Y2
	new img,_gsq
	push $1
	push $2
	push $3
	push $4
	cthis build
	push "_gsq"
	clparent gfxObject,init
	new string,_sfunc1
	new string,_sob1
	new string,_sfunc2
	new string,_sob2
	new int,_idelay
	push 10
	pop _idelay
	new classfadeinout,_clfio
	end method
	method build
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop Y2
	pop X2
	pop Y1
	pop X1
	push X2
	push X1
	pop $b
	popax
	sub $a,$b
	push Y2
	push Y1
	pop $b
	popax
	sub $a,$b
	cthis black
	push 255
	call _gsq,create
	push X1
	push Y1
	call _gsq,setpos
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method buildblack
	push X1
	push Y1
	push X2
	push Y2
	cthis build
	end method
	method buildfromfile
	localstring $1
	pop $1
	localdef $2
	cthis getz
	pop $2
	new img,_imtmp
	push $1
	call _imtmp,load
	push 255
	call _gsq,transparency
	push "_imtmp"
	call _gsq,blit
	delete _imtmp
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method buildfromscreen
	push 255
	call _gsq,transparency
	call _gsq,blitscreen
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method cloneto
	localstring $1
	pop $1
	push $1
	spushs
	push "_gsq"
	spop $a
	call [$a],clone
	end method
	method delay
	localint $1
	pop $1
	push $1
	pop _idelay
	end method
	method transparency
	localint $1
	pop $1
	push $1
	call _gsq,transparency
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "null"
	push $1
	push "null"
	push $2
	cthis playobfin
	end method
	method playobfin
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1854
	call gameapi,getgamename
	jmp l1853
l1854:
	push $1
l1853:
	pop _sob1
	push $2
	pop _sfunc1
	push $3
	push "null"
	cmpje
	cmp0
	je l1856
	call gameapi,getgamename
	jmp l1855
l1856:
	push $3
l1855:
	pop _sob2
	push $4
	pop _sfunc2
	call _gsq,show
	push 0
	call _gsq,transparency
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene0"
	call _clfio,_play
	end method
	method CutScene0
	push _sob1
	push _sfunc1
	cthis callfun
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method close
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obclose
	end method
	method obclose
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob1
	push $2
	pop _sfunc1
	push 0
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene1"
	call _clfio,_play
	end method
	method CutScene1
	call _gsq,hide
	push _sob1
	push _sfunc1
	cthis callfun
	end method
	method enter
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obenter
	end method
	method obenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob2
	push $2
	pop _sfunc2
	push 255
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method _callfun2
	call _gsq,hide
	push _sob2
	push _sfunc2
	cthis callfun
	end method
	method isplaying
	call _clfio,isplaying
	end method
	method show
	push 255
	call _gsq,transparency
	call _gsq,show
	end method
	method showloading
	push "txtloading"
	cthis hasvar
	neg
	cmp0
	je l1858
	localdef $1
	push 64
	spushs
	spop $h
	call $h,igetsc
	cthis stdfont
	pop $1
	push "txtloading"
	push "Loading"
	push $1
	push 222
	cthis grey
	cthis newtext
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call txtloading,setz
	call txtloading,txtcenterscreen
	push 1
	push $1
	call txtloading,txtshadow
l1858:
	call txtloading,txtshow
	end method
	method hideloading
	call txtloading,txthides
	end method
	end class

	method allchars
	push "a0 t_!@#$%^&*()_+-=[]\\|}{;':\",./<>?`~"
	end method
	class TextTyper
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new string,sChars
	push $6
	pop sChars
	new int,iLimit
	push $7
	pop iLimit
	push A
	push "Sdir"
	push "left"
	push "W"
	push 0
	push "iFontSize"
	push $2
	push "X"
	push 0
	push "Y"
	push 0
	cthis vars2
	new text,txt1
	push $1
	call txt1,setfont
	push ""
	call txt1,set
	new text,txt2
	push $1
	call txt2,setfont
	push "_"
	call txt2,set
	push iR
	push iG
	push iB
	call txt2,createtxt
	call txt2,hide
	new text,txtpass
	push $1
	call txtpass,setfont
	call txtpass,hide
	new int,bpass
	push 0
	pop bpass
	new string,_sob
	push "null"
	pop _sob
	new string,_sfun
	push "null"
	pop _sfun
	push "timcyk"
	push 300
	push 1
	push "fintimcyk"
	cthis cnewtimerfin
	push "txt1"
	clparent gfxObject,init
	end method
	method setaspasswd
	push 1
	pop bpass
	call txt1,hide
	call txt1,getz
	call txtpass,setz
	call txtpass,show
	cthis copytopass
	end method
	method copytopass
	localdef $1
	call txt1,get
	spushs
	spop $h
	call $h,length
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1859:
	push $3
	push $1
	cmpjl
	cmp0
	je l1860
	jmp l1862
l1861:
	add $3,1
	pop $3
	jmp l1859
l1862:
	push "*"
	popax
	add $2,$a
	pop $2
	jmp l1861
l1860:
	push $2
	call txtpass,txtset
	call txt1,getpx
	call txt1,getpy
	call txtpass,setpos
	end method
	method setastext
	push 0
	pop bpass
	call txt1,show
	call txtpass,hide
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,isin
	end method
	method getcol
	push iR
	push iG
	push iB
	ret
	end method
	method fintimcyk
	cthis getlock
	cmp0
	je l1864
	ret
l1864:
	cthis updatecyk
	cthis play
	end method
	method updatecyk
	call txt2,isvisible
	cmp0
	je l1866
	call txt2,hide
	jmp l1865
l1866:
	call txt1,getex
	call txt1,getpy
	call txt2,setpos
	call txt2,show
l1865:
	end method
	method enable
	cthis unlock
	cthis updatecyk
	call timcyk,play
	end method
	method disable
	call txt2,hide
	push 0
	call timcyk,stop
	cthis lock
	end method
	method onenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob
	push $2
	pop _sfun
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop X
	push $2
	pop Y
	cthis get
	cthis updatetxt
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push X
	push $1
	pop $b
	popax
	add $a,$b
	push Y
	push $2
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method setz
	localint $1
	pop $1
	push $1
	call txt1,setz
	push $1
	call txt2,setz
	end method
	method get
	localstring $1
	call txt1,get
	pop $1
	call $1,length
	push 0
	cmpja
	cmp0
	je l1868
	push $1
	jmp l1867
l1868:
	push ""
l1867:
	end method
	method getpx
	call txt1,getpx
	end method
	method getpy
	call txt1,getpy
	end method
	method getcx
	call txt1,getcx
	end method
	method getcy
	call txt1,getcy
	end method
	method geth
	call txt1,geth
	end method
	method getey
	call txt1,getpy
	push iFontSize
	pop $b
	popax
	add $a,$b
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,clip
	push $1
	push $2
	push $3
	push $4
	call txt2,clip
	end method
	method length
	call txt1,get
	spushs
	spop $h
	call $h,length
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt1,set
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis getcol
	call txt1,txtsetcol
	end method
	method limit=
	localint $1
	pop $1
	push $1
	pop iLimit
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1870
	ret
l1870:
	cthis getname
	push "_ontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1872
	cthis disable
	push _sob
	push _sfun
	cthis callfun
	cthis getname
	push "_onenter"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	ret
l1872:
	localstring $1
	push "t"
	call sChars,contains
	cmp0
	je l1874
	push "tab"
	call keyboard,iskey
	jmp l1876
l1874:
	push 0
	jmp l1876
l1875:
	push 1
l1876:
	cmp0
	je l1877
	push " "
	pop $1
	jmp l1873
l1877:
	call keyboard,getkey
	pop $1
l1873:
	localstring $2
	call txt1,get
	pop $2
	call keyboard,isalpha
	cmp0
	je l1879
	push "a"
	call sChars,contains
	jmp l1881
l1879:
	push 0
	jmp l1881
l1880:
	push 1
l1881:
	cmp0
	jne l1883
	call keyboard,isdigit
	cmp0
	je l1884
	push "0"
	call sChars,contains
	jmp l1886
l1884:
	push 0
	jmp l1886
l1885:
	push 1
l1886:
	cmp0
	jne l1883
	push $1
	call sChars,contains
	jmp l1887
l1882:
	push 0
	jmp l1887
l1883:
	push 1
l1887:
	cmp0
	je l1888
	push iLimit
	push 0
	cmpjle
	cmp0
	jne l1891
	push iLimit
	call $2,length
	cmpja
	jmp l1892
l1890:
	push 0
	jmp l1892
l1891:
	push 1
l1892:
	jmp l1893
l1888:
	push 0
	jmp l1893
l1889:
	push 1
l1893:
	cmp0
	je l1894
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	cthis updatetxt
	cthis updatecyk
	jmp l1878
l1894:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1896
	call $2,length
	push 0
	cmpja
	jmp l1898
l1896:
	push 0
	jmp l1898
l1897:
	push 1
l1898:
	cmp0
	je l1899
	push 1
	call $2,strsube
	cthis updatetxt
	cthis updatecyk
l1899:
l1878:
	cthis getname
	push "_ontyped"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method updatetxt
	localstring $1
	pop $1
	push $1
	call txt1,set
	push iR
	push iG
	push iB
	call txt1,createtxt
	push Sdir
	push "center"
	cmpje
	cmp0
	je l1901
	push X
	push W
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push Y
	call txt1,setpos
	jmp l1900
l1901:
	push Sdir
	push "right"
	cmpje
	cmp0
	je l1903
	push X
	push W
	pop $b
	popax
	add $a,$b
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push Y
	call txt1,setpos
	jmp l1902
l1903:
	push X
	push Y
	call txt1,setpos
l1902:
l1900:
	push bpass
	cmp0
	je l1905
	cthis copytopass
l1905:
	cthis getname
	push "_onwrite"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class ConTextTyper
	parent TextTyper
	parent ObjController
	method init
	clparent TextTyper,init
	clparent ObjController,init
	end method
	end class

	new string,sTextBoxTyperSys
	push "null"
	pop sTextBoxTyperSys
	class TextBoxTyper
	parent LObjController
	parent ImagePos
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent LObjController,init
	clparent ImagePos,init
	new def,Font
	push $1
	push $2
	cthis checkfont
	pop Font
	push A
	push "Cols"
	push $10
	push $3
	pop $b
	popax
	div $a,$b
	psax
	push "Rows"
	push $11
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	push "X"
	push $8
	push "Y"
	push $9
	push "Row"
	push 0
	push "enablemove"
	push 1
	push "W"
	push $10
	push "insystem"
	push 0
	push "H"
	push $11
	push "isvisible"
	push 1
	push "clipx1"
	push $8
	push "clipy1"
	push $9
	push "clipx2"
	push 0
	push "clipy2"
	push 0
	push "clipped"
	push 0
	cthis vars2
	new def,Size
	push $2
	pop Size
	new def,Dy
	push $12
	pop Dy
	new def,Z
	push 0
	pop Z
	localstring $13
	new gmimgvec,grtt
	new gmimgvec,gren
	localint $14
	push 0
	pop $14
l1906:
	push $14
	push Rows
	cmpjl
	cmp0
	je l1907
	jmp l1909
l1908:
	add $14,1
	pop $14
	jmp l1906
l1909:
	push "tt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $13
	push $13
	spushs
	push Font
	push $2
	push $4
	push $5
	push $6
	push $7
	push Cols
	spop $e
	new TextTyper,[$e]
	push $13
	spushs
	push $10
	spop $a
	call [$a],W=
	push $13
	spushs
	push "left"
	spop $a
	call [$a],Sdir=
	push $13
	spushs
	push $8
	push $9
	push $14
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $13
	call grtt,add
	jmp l1908
l1907:
	end method
	method settyper
	localint $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localstring $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $10
	localint $11
	localstring $12
	localstring $13
	push ""
	pop $13
	push $1
	push 0
	cmpjl
	cmp0
	je l1911
	call grtt,last
	spushs
	spop $a
	call [$a],X
	pop $10
	call grtt,last
	spushs
	spop $a
	call [$a],getey
	push Dy
	pop $b
	popax
	add $a,$b
	pop $11
	call grtt,size
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	call grtt,add
	jmp l1910
l1911:
	push $1
	call grtt,get
	pop $12
	push $12
	spushs
	spop $a
	call [$a],X
	pop $10
	push $12
	spushs
	spop $a
	call [$a],getpy
	pop $11
	push $12
	spushs
	spop $a
	call [$a],get
	pop $13
	push $12
	push 0
	push $3
	push $12
	spushs
	spop $a
	call [$a],iFontSize
	pop $b
	popax
	sub $a,$b
	call grtt,movefrom
	push $12
	spushs
	spop $d
	delete [$d]
l1910:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	push $2
	push $3
	push $5
	push $6
	push $7
	push $8
	push W
	push $4
	pop $b
	popax
	div $a,$b
	psax
	spop $e
	new TextTyper,[$e]
	push $12
	spushs
	push W
	spop $a
	call [$a],W=
	push $12
	spushs
	push $9
	spop $a
	call [$a],Sdir=
	push $12
	spushs
	push $13
	spop $a
	call [$a],updatetxt
	push $12
	spushs
	push Z
	spop $a
	call [$a],setz
	push $12
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grtt,move
	push $1
	push $2
	call gren,move
	push $1
	popax
	add X,$a
	pop X
	push $2
	popax
	add Y,$a
	pop Y
	end method
	method size
	call grtt,size
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtt,setz
	push $1
	call gren,setz
	end method
	method getz
	push Z
	end method
	method show
	push 1
	pop isvisible
	call grtt,show
	end method
	method hide
	push 0
	pop isvisible
	call grtt,hide
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 1
	pop clipped
	push $1
	pop clipx1
	push $2
	pop clipy1
	push $3
	pop clipx2
	push $4
	pop clipy2
	localint $5
	push 0
	pop $5
l1912:
	push $5
	call grtt,size
	cmpjl
	cmp0
	je l1913
	jmp l1915
l1914:
	add $5,1
	pop $5
	jmp l1912
l1915:
	push $5
	call grtt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l1914
l1913:
	end method
	method getw
	push W
	end method
	method geth
	push H
	end method
	method enumerate
	localint $1
	pop $1
	localstring $2
	localstring $3
	localint $4
	push 0
	pop $4
l1916:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1917
	jmp l1919
l1918:
	add $4,1
	pop $4
	jmp l1916
l1919:
	push "txte"
	push $4
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new text,[$e]
	push $2
	call gren,add
	push $2
	spushs
	push Z
	spop $a
	call [$a],setz
	push $2
	spushs
	push Font
	spop $a
	call [$a],setfont
	push $2
	spushs
	push ""
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	call tt0,getcol
	spop $a
	call [$a],txtsetcol
	push $2
	spushs
	push X
	push $2
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	push Y
	push $4
	push Size
	push Dy
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l1918
l1917:
	end method
	method cut
	localint $1
	pop $1
	push $1
	pop Rows
	end method
	method enable
	cthis unlock
	cthis activateact
	end method
	method disable
	cthis lock
	push "disable"
	call grtt,eval
	end method
	method actual
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	end method
	method activate
	localint $1
	pop $1
	cthis unlock
	push $1
	push 0
	cmpjae
	cmp0
	je l1921
	push $1
	push Rows
	cmpjl
	jmp l1923
l1921:
	push 0
	jmp l1923
l1922:
	push 1
l1923:
	cmp0
	je l1924
	push insystem
	cmp0
	je l1926
	push GAME
	spushs
	push sTextBoxTyperSys
	spop $a
	call [$a],isgmobj
	cmp0
	je l1928
	push sTextBoxTyperSys
	cthis getname
	cmpjne
	jmp l1930
l1928:
	push 0
	jmp l1930
l1929:
	push 1
l1930:
	cmp0
	je l1931
	push sTextBoxTyperSys
	spushs
	spop $a
	call [$a],deactivate
l1931:
	cthis getname
	pop sTextBoxTyperSys
l1926:
	cthis deactivate
	push $1
	pop Row
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],enable
	cthis getname
	push "_activate"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1924:
	end method
	method activateact
	push Row
	cthis activate
	end method
	method deactivate
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disable
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1933
	ret
l1933:
	cthis getname
	push "_boxontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1935
	localdef $1
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	pop $1
	call $1,clear
	call $1,length
	push 0
	cmpje
	cmp0
	je l1937
	push enablemove
	jmp l1939
l1937:
	push 0
	jmp l1939
l1938:
	push 1
l1939:
	cmp0
	je l1940
	localdef $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l1941:
	push $2
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l1942
	jmp l1944
l1943:
	sub $2,1
	pop $2
	jmp l1941
l1944:
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1943
l1942:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	push Rows
	cmpjl
	cmp0
	je l1946
	push ""
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis setid
l1946:
l1940:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1934
l1935:
	push "up"
	call keyboard,iskey
	cmp0
	je l1948
	push Row
	push 0
	cmpja
	jmp l1950
l1948:
	push 0
	jmp l1950
l1949:
	push 1
l1950:
	cmp0
	je l1951
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1947
l1951:
	push "down"
	call keyboard,iskey
	cmp0
	je l1953
	push Row
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l1955
l1953:
	push 0
	jmp l1955
l1954:
	push 1
l1955:
	cmp0
	je l1956
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1952
l1956:
	push "pgdown"
	call keyboard,iskey
	cmp0
	je l1958
	push Row
	push Rows
	push 10
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1960
	push Row
	push 10
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1959
l1960:
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1959:
	jmp l1957
l1958:
	push "pgup"
	call keyboard,iskey
	cmp0
	je l1962
	push Row
	push 9
	cmpja
	cmp0
	je l1964
	push Row
	push 10
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1963
l1964:
	push 0
	cthis activate
l1963:
	jmp l1961
l1962:
	push "backspace"
	call keyboard,iskey
	cmp0
	jne l1967
	push "delete"
	call keyboard,iskey
	jmp l1968
l1966:
	push 0
	jmp l1968
l1967:
	push 1
l1968:
	cmp0
	je l1969
	cthis actual
	spushs
	spop $a
	call [$a],length
	push 0
	cmpje
	jmp l1971
l1969:
	push 0
	jmp l1971
l1970:
	push 1
l1971:
	cmp0
	je l1972
	push enablemove
	cmp0
	je l1974
	localdef $2
	push Row
	pop $2
l1975:
	push $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1976
	jmp l1978
l1977:
	add $2,1
	pop $2
	jmp l1975
l1978:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1977
l1976:
	push ""
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setid
l1974:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1980
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1980:
	jmp l1965
l1972:
	push "onkeydown"
	call grtt,eval
l1965:
l1961:
l1957:
l1952:
l1947:
l1934:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1982
	ret
l1982:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push clipped
	cmp0
	je l1984
	push $1
	push $2
	push clipx1
	push clipy1
	push clipx2
	push clipy2
	call clsurf,isin
	jmp l1986
l1984:
	push 0
	jmp l1986
l1985:
	push 1
l1986:
	cmp0
	jne l1988
	push clipped
	neg
	cmp0
	je l1989
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	jmp l1991
l1989:
	push 0
	jmp l1991
l1990:
	push 1
l1991:
	jmp l1992
l1987:
	push 0
	jmp l1992
l1988:
	push 1
l1992:
	cmp0
	je l1993
	cthis deactivate
	localint $3
	push 0
	pop $3
l1994:
	push $3
	cthis size
	cmpjl
	cmp0
	je l1995
	jmp l1997
l1996:
	add $3,1
	pop $3
	jmp l1994
l1997:
	push "tt"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getey
	push $2
	cmpja
	cmp0
	je l1999
	push $3
	cthis activate
	ret
l1999:
	jmp l1996
l1995:
	jmp l1983
l1993:
	cthis getname
	push "_OUTSIDE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1983:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	cmp0
	je l2001
	push isvisible
	neg
	jmp l2003
l2001:
	push 0
	jmp l2003
l2002:
	push 1
l2003:
	cmp0
	je l2004
	push 0
	ret
l2004:
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	end method
	method getid
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method getact
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method idpx
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpx
	end method
	method idpy
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpy
	end method
	method getpx
	push X
	end method
	method getpy
	push Y
	end method
	method get
	push 0
	cthis getfrom
	end method
	method getfrom
	localint $1
	pop $1
	push $1
	push ""
	cthis getlinesfrom
	end method
	method getlinesfrom
	localint $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push ""
	pop $3
	localint $4
	push $1
	pop $4
l2005:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l2006
	jmp l2008
l2007:
	add $4,1
	pop $4
	jmp l2005
l2008:
	push "tt"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	push $2
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	jmp l2007
l2006:
	push $3
	end method
	method getlines
	push 0
	push " "
	cthis getlinesfrom
	end method
	method nonempty
	localint $1
	pop $1
	localstring $2
l2009:
	push $1
	call grtt,size
	cmpjl
	cmp0
	je l2010
	jmp l2012
l2011:
	add $1,1
	pop $1
	jmp l2009
l2012:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	pop $2
	call $2,clear
	call $2,length
	push 0
	cmpja
	cmp0
	je l2014
	push $1
	ret
l2014:
	jmp l2011
l2010:
	push 1
	popax
	sub 0,$a
	end method
	method clear
	call grtt,txtreset
	end method
	method setid
	localstring $1
	localint $2
	pop $2
	pop $1
	call grtt,size
	push $2
	cmpjae
	cmp0
	je l2016
	push "tt"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],txtset
l2016:
	end method
	method settext
	localint $1
	pop $1
l2017:
	push $1
	push 0
	cmpja
	cmp0
	je l2018
	sub $1,1
	pop $1
	push $1
	cthis setid
	jmp l2017
l2018:
	end method
	method copytodb
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
	localint $2
	push 0
	pop $2
l2019:
	push $2
	call grtt,size
	cmpjl
	cmp0
	je l2020
	jmp l2022
l2021:
	add $2,1
	pop $2
	jmp l2019
l2022:
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	call grtt,get
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],add
	jmp l2021
l2020:
	end method
	method copyfromdb
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis copyfromdbii
	end method
	method copyfromdbss
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis copyfromdbii
	end method
	method copyfromdbii
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l2025
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	jmp l2026
l2024:
	push 0
	jmp l2026
l2025:
	push 1
l2026:
	cmp0
	je l2027
	ret
l2027:
	cthis clear
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	cthis size
	cmpja
	cmp0
	je l2029
	push $2
	cthis size
	pop $b
	popax
	add $a,$b
	pop $3
l2029:
	localint $4
	push $2
	pop $4
l2030:
	push $4
	push $3
	cmpjl
	cmp0
	je l2031
	jmp l2033
l2032:
	add $4,1
	pop $4
	jmp l2030
l2033:
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmp0
	je l2035
	push $1
	spushs
	push $4
	push 0
	spop $a
	call [$a],get
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis setid
l2035:
	jmp l2032
l2031:
	end method
	method copyfromdbrow
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $4
	push $4
	cthis size
	cmpja
	cmp0
	je l2037
	cthis size
	pop $4
l2037:
	localint $5
	push $3
	pop $5
l2038:
	push $5
	push $4
	cmpjl
	cmp0
	je l2039
	jmp l2041
l2040:
	add $5,1
	pop $5
	jmp l2038
l2041:
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],get
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	cthis setid
	jmp l2040
l2039:
	end method
	method save
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l2043
	new db,__tmpdb
	push "__tmpdb"
	cthis copytodb
	push "|"
	call __tmpdb,setseparator
	push $1
	call __tmpdb,save
	delete __tmpdb
l2043:
	end method
	method load
	localstring $1
	pop $1
	new db,__tmpdb
	push $1
	call __tmpdb,load
	push "__tmpdb"
	cthis copyfromdb
	delete __tmpdb
	end method
	end class

	class GUITextBoxTyper
	parent TextBoxTyper
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	push $9
	push $10
	push $11
	push $12
	clparent TextBoxTyper,init
	push A
	push "rewinder"
	push "null"
	push "rewinderbg"
	push "null"
	cthis vars2
	end method
	method setrewinder
	localstring $1
	pop $1
	push $1
	pop rewinder
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	pop rewinderbg
	end method
	method activate
	localint $1
	pop $1
	push $1
	clparent TextBoxTyper,activate
	cthis updaterewactual
	end method
	method updaterewactual
	push Row
	cthis updaterewpos
	end method
	method updaterewpos
	localint $1
	pop $1
	push rewinder
	push "null"
	cmpjne
	cmp0
	je l2045
	localdef $2
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $a
	call [$a],getpy
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	cmpjl
	cmp0
	je l2047
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
	jmp l2046
l2047:
	push $2
	spushs
	spop $a
	call [$a],getey
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	cmpja
	cmp0
	je l2049
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
l2049:
l2046:
l2045:
	end method
	end class

	class DelayTaker
	method init
	new int,bonrel
	push 0
	pop bonrel
	new int,bstart
	push 0
	pop bstart
	new int,bclickrel
	push 1
	pop bclickrel
	push "timwez"
	push 300
	push 1
	push "DelayTaker0"
	cthis cnewtimerfin
	end method
	method DelayTaker0
	push 1
	pop bonrel
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	pop bclickrel
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	call timwez,delay
	end method
	method take
	push bclickrel
	cmp0
	je l2051
	call timwez,play
	push 0
	pop bonrel
	jmp l2050
l2051:
	push 1
	pop bonrel
l2050:
	push 1
	pop bstart
	end method
	method ret
	push 0
	pop bonrel
	push 0
	pop bstart
	push 0
	call timwez,stop
	end method
	method isonclick
	cthis stoptimer
	push bstart
	cmp0
	je l2052
	push bonrel
	neg
	jmp l2054
l2052:
	push 0
	jmp l2054
l2053:
	push 1
l2054:
	end method
	method isonrel
	cthis stoptimer
	push bstart
	cmp0
	je l2055
	push bonrel
	jmp l2057
l2055:
	push 0
	jmp l2057
l2056:
	push 1
l2057:
	end method
	method istaken
	push bstart
	end method
	method stoptimer
	push 0
	call timwez,stop
	end method
	end class

	class ImgMover
	method init
	new string,smoved
	push "null"
	pop smoved
	new int,ilastx
	new int,ilasty
	new int,irelx
	new int,irely
	end method
	method mssetobj
	localstring $1
	pop $1
	push $1
	call mouse,getpos
	cthis setobj
	end method
	method setobj
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	push 0
	cthis set
	end method
	method setcobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis setobj
	end method
	method setpobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setobj
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $4
	pop $b
	popax
	sub $a,$b
	pop ilastx
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $5
	pop $b
	popax
	sub $a,$b
	pop ilasty
	push $2
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop irelx
	push $3
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop irely
	push $1
	pop smoved
	end method
	method msmove
	call mouse,getpos
	cthis move
	end method
	method msftmove
	call mouse,getpos
	cthis ftmove
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l2059
	push smoved
	spushs
	push $1
	push smoved
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push irelx
	pop $b
	popax
	sub $a,$b
	push $2
	push smoved
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	push irely
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
l2059:
	end method
	method ftmove
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l2061
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
l2061:
	end method
	method retobj
	push 0
	push 0
	cthis ret
	end method
	method ret
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push ilastx
	push $1
	pop $b
	popax
	add $a,$b
	push ilasty
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	cthis free
	end method
	method put
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	cthis free
	end method
	method free
	push "null"
	pop smoved
	end method
	method getmover
	push smoved
	end method
	method getfree
	localdef $1
	push smoved
	pop $1
	cthis free
	push $1
	end method
	method moving
	push smoved
	push "null"
	cmpjne
	end method
	method setmoved
	localstring $1
	pop $1
	push $1
	pop smoved
	end method
	end class

	class ConImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	push smoved
	push "null"
	cmpjne
	cmp0
	je l2063
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2063:
	end method
	end class

	class DelayImgMover
	parent classlocker
	parent ImgMover
	method init
	clparent classlocker,init
	clparent ImgMover,init
	new DelayTaker,cldt
	push "b2clicks"
	push 0
	cthis var2
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method _put
	push b2clicks
	neg
	cmp0
	je l2065
	call cldt,ret
l2065:
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _get
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	push b2clicks
	neg
	cmp0
	je l2067
	call cldt,take
l2067:
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2069
	ret
l2069:
	push b2clicks
	cmp0
	je l2071
	cthis moving
	neg
	cmp0
	je l2073
	cthis _get
	jmp l2072
l2073:
	cthis _put
l2072:
	jmp l2070
l2071:
	call cldt,isonclick
	cmp0
	je l2075
	cthis _put
	jmp l2074
l2075:
	call cldt,istaken
	neg
	cmp0
	je l2077
	cthis _get
l2077:
l2074:
l2070:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2079
	ret
l2079:
	call cldt,isonrel
	cmp0
	je l2081
	push b2clicks
	neg
	jmp l2083
l2081:
	push 0
	jmp l2083
l2082:
	push 1
l2083:
	cmp0
	je l2084
	cthis _put
l2084:
	end method
	end class

	class DelayMover
	parent DelayImgMover
	parent ObjController
	method init
	clparent DelayImgMover,init
	clparent ObjController,init
	end method
	end class

	class WaitImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	call cldt,take
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	call cldt,isonrel
	cmp0
	je l2086
	cthis reset
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l2085
l2086:
	cthis moving
	cmp0
	je l2088
	cthis reset
	cthis getname
	push "_SET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2088:
l2085:
	end method
	end class

	class Rewinder
	parent classlocker
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new string,sarrowdir
	new int,ilenx
	new int,ileny
	new string,sgr
	new string,sorientation
	new int,bvertical
	new int,bfilteritem
	push 0
	pop bfilteritem
	new int,ibx1
	push 0
	pop ibx1
	new int,ibx2
	push iResX
	pop ibx2
	new int,iby1
	push 0
	pop iby1
	new int,iby2
	push iResY
	pop iby2
	new int,iodleg
	push 2
	pop iodleg
	new ImgMover,clmv
	push "timtick"
	push 1
	push 1
	push "timfin"
	cthis cnewtimercyclefin
	push A
	push "borx1"
	push $1
	push "bory1"
	push $2
	push "borx2"
	push $3
	push "bory2"
	push $4
	cthis vars2
	new snd,fxrew
	end method
	method movefilter
	push 1
	pop bfilteritem
	end method
	method movenormal
	push 0
	pop bfilteritem
	end method
	method setfxrew
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call fxrew,load
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push $1
	push $2
	push $3
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,set
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l2091
	push sorientation
	push "down"
	cmpje
	jmp l2092
l2090:
	push 0
	jmp l2092
l2091:
	push 1
l2092:
	cmp0
	je l2093
	push sgr
	spushs
	push $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	push 0
	spop $a
	call [$a],move
	jmp l2089
l2093:
	push sgr
	spushs
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	spop $a
	call [$a],move
l2089:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],remove
	end method
	method pickup
	localint $1
	localint $2
	pop $2
	pop $1
	push sgr
	spushs
	push $1
	push $2
	push 1
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l2095
	push sgr
	spushs
	spop $a
	call [$a],getsfound
	push $1
	push $2
	cthis getitem
	push 1
	ret
l2095:
	push 0
	ret
	end method
	method mspickup
	call mouse,getpos
	cthis pickup
	ret
	end method
	method freeitem
	call clmv,free
	end method
	method moveitem
	push bfilteritem
	cmp0
	je l2097
	call clmv,msftmove
	jmp l2096
l2097:
	call clmv,msmove
l2096:
	end method
	method retitem
	localstring $1
	call clmv,getmover
	pop $1
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,ret
	push $1
	cthis putitem
	end method
	method putitem
	localstring $1
	pop $1
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l2100
	push sorientation
	push "down"
	cmpje
	jmp l2101
l2099:
	push 0
	jmp l2101
l2100:
	push 1
l2101:
	cmp0
	je l2102
	push $1
	spushs
	push sgr
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l2098
l2102:
	push $1
	spushs
	push 0
	push sgr
	spushs
	spop $a
	call [$a],getey
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
l2098:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],add
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $1
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	end method
	method getmoved
	call clmv,getmover
	ret
	end method
	method getbutw
	call anupstd,getw
	ret
	end method
	method getbuth
	call anupstd,geth
	ret
	end method
	method movearrows
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grarrows,move
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $6
	pop sgr
	new anima,anupstd
	push $1
	call anupstd,load
	push $2
	call anupstd,setz
	push "up"
	push 0
	call anupstd,setframe
	push "anupstd"
	push "anupact"
	cthis copyanima
	push "up"
	push 1
	call anupact,setframe
	push "anupstd"
	push "andownact"
	cthis copyanima
	push "down"
	push 1
	call andownact,setframe
	push "anupstd"
	push "andownstd"
	cthis copyanima
	push "down"
	push 0
	call andownstd,setframe
	push "butup"
	push "anupstd"
	push "anupact"
	push "null"
	push $3
	cthis newbutan
	push "butdown"
	push "andownstd"
	push "andownact"
	push "null"
	push $3
	cthis newbutan
	push "onmoveon"
	push "_rewbutmoveon"
	call butup,addmethod
	push "onmoveon"
	push "_rewbutmoveon"
	call butdown,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butup,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butdown,addmethod
	push "onclick"
	push "_rewbutclick"
	call butup,addmethod
	push "onclick"
	push "_rewbutclick"
	call butdown,addmethod
	push "onrel"
	push "_rewbutrel"
	call butup,addmethod
	push "onrel"
	push "_rewbutrel"
	call butdown,addmethod
	push $4
	pop sorientation
	new gmimgvec,grarrows
	push "grarrows"
	push "anupstd"
	popax
	pop $b
	psax
	call [$b],operator+
	push "anupact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownstd"
	popax
	pop $b
	psax
	call [$b],operator+
	popax
	localint $7
	localint $8
	localint $9
	localint $10
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l2105
	push sorientation
	push "down"
	cmpje
	jmp l2106
l2104:
	push 0
	jmp l2106
l2105:
	push 1
l2106:
	cmp0
	je l2107
	push 0
	pop bvertical
	push $5
	pop ilenx
	push sorientation
	push "down"
	cmpje
	cmp0
	je l2109
	push borx1
	push bory2
	call anupstd,geth
	pop $b
	popax
	sub $a,$b
	call anupstd,setpos
	push borx1
	push bory2
	call anupact,geth
	pop $b
	popax
	sub $a,$b
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call andownstd,getey
	pop $7
	jmp l2108
l2109:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownact,setpos
	push bory1
	pop $7
l2108:
	call anupstd,getex
	push iodleg
	pop $b
	popax
	add $a,$b
	pop ibx1
	call andownstd,getpx
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop ibx2
	push ibx1
	pop $8
	jmp l2103
l2107:
	push 1
	pop bvertical
	push $5
	pop ileny
	push sorientation
	push "right"
	cmpje
	cmp0
	je l2111
	push borx2
	call anupstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupstd,setpos
	push borx2
	call anupact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call anupstd,getex
	pop $8
	jmp l2110
l2111:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx1
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx1
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	push borx1
	pop $8
l2110:
	call anupstd,getey
	push iodleg
	pop $b
	popax
	add $a,$b
	pop iby1
	call andownstd,getpy
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop iby2
	push iby1
	pop $7
l2103:
	cthis getname
	push "up"
	call butup,_rewbuildbut
	cthis getname
	push "down"
	call butdown,_rewbuildbut
	localint $11
	push $6
	spushs
	spop $a
	call [$a],size
	pop $11
	push $6
	spushs
	push $8
	push $7
	spop $a
	call [$a],_setpos
	new int,ilimx
	push $8
	pop ilimx
	new int,ilimy
	push $7
	pop ilimy
	localstring $12
	localint $13
	push 0
	pop $13
l2112:
	push $13
	push $11
	cmpjl
	cmp0
	je l2113
	jmp l2115
l2114:
	add $13,1
	pop $13
	jmp l2112
l2115:
	push sgr
	spushs
	push $13
	spop $a
	call [$a],get
	pop $12
	push sorientation
	push "right"
	cmpje
	cmp0
	je l2117
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l2116
l2117:
	push sorientation
	push "left"
	cmpje
	cmp0
	je l2119
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l2118
l2119:
	push sorientation
	push "up"
	cmpje
	cmp0
	je l2121
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	jmp l2120
l2121:
	push sorientation
	push "down"
	cmpje
	cmp0
	je l2123
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
l2123:
l2120:
l2118:
l2116:
	push $12
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	jmp l2114
l2113:
	end method
	method _rewbuildbut
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sob
	push $1
	pop _sob
	new string,_sdir
	push $2
	push "up"
	cmpje
	cmp0
	je l2125
	push bvertical
	push 0
	cmpje
	cmp0
	je l2127
	push "left"
	pop _sdir
	jmp l2126
l2127:
	push "up"
	pop _sdir
l2126:
	jmp l2124
l2125:
	push $2
	push "down"
	cmpje
	cmp0
	je l2129
	push bvertical
	push 0
	cmpje
	cmp0
	je l2131
	push "right"
	pop _sdir
	jmp l2130
l2131:
	push "down"
	pop _sdir
l2130:
l2129:
l2124:
	end method
	method _rewbutmoveon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _rewbutclick
	push _sdir
	cthis mstrzalkaon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method mstrzalkaon
	localstring $1
	pop $1
	push $1
	pop sarrowdir
	call timtick,play
	end method
	method _rewbutrel
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	end method
	method _rewstrzalkaoff
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method timfin
	cthis getlock
	cmp0
	je l2133
	ret
l2133:
	localint $1
	push 0
	pop $1
	push sarrowdir
	push "null"
	cmpjne
	cmp0
	je l2135
	push sgr
	spushs
	spop $a
	call [$a],empty
	neg
	jmp l2137
l2135:
	push 0
	jmp l2137
l2136:
	push 1
l2137:
	cmp0
	je l2138
	push sarrowdir
	push "up"
	cmpje
	cmp0
	je l2140
	push sgr
	spushs
	spop $a
	call [$a],getey
	call andownstd,getpy
	push ileny
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l2142
	push sgr
	spushs
	push 0
	push ileny
	popax
	sub 0,$a
	spop $a
	call [$a],move
	push 1
	pop $1
l2142:
	jmp l2139
l2140:
	push sarrowdir
	push "down"
	cmpje
	cmp0
	je l2144
	push sgr
	spushs
	spop $a
	call [$a],getpy
	push ilimy
	cmpjl
	cmp0
	je l2146
	push sgr
	spushs
	push 0
	push ileny
	spop $a
	call [$a],move
	push 1
	pop $1
l2146:
	jmp l2143
l2144:
	push sarrowdir
	push "left"
	cmpje
	cmp0
	je l2148
	push sgr
	spushs
	spop $a
	call [$a],getex
	call andownstd,getpx
	push ilenx
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l2150
	push sgr
	spushs
	push ilenx
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l2150:
	jmp l2147
l2148:
	push sarrowdir
	push "right"
	cmpje
	cmp0
	je l2152
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push ilimx
	cmpjl
	cmp0
	je l2154
	push sgr
	spushs
	push ilenx
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l2154:
l2152:
l2147:
l2143:
l2139:
l2138:
	push $1
	cmp0
	je l2156
	call fxrew,isplaying
	neg
	cmp0
	je l2158
	call fxrew,play
l2158:
	jmp l2155
l2156:
	push 0
	call fxrew,stop
l2155:
	cthis play
	end method
	end class

	class ConRewinder
	parent Rewinder
	parent ObjController
	method init
	clparent Rewinder,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	clparent Rewinder,getitem
	call cldt,take
	end method
	method _put
	call cldt,ret
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmousemove
	cthis moveitem
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2160
	ret
l2160:
	call cldt,isonrel
	cmp0
	je l2162
	cthis _put
l2162:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2164
	ret
l2164:
	call cldt,isonclick
	cmp0
	je l2166
	cthis _put
	jmp l2165
l2166:
	call cldt,istaken
	neg
	cmp0
	je l2168
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2168:
l2165:
	end method
	end class

	class Button
	parent LObjController
	method init
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	push A
	push "sobject"
	push "null"
	push "sclicked"
	push "null"
	push "bcheck2klik"
	push 0
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	end method
	method print
	call grbuts,print
	end method
	method sort
	call grbuts,sortimgs
	end method
	method addgroups
	call grbuts,addgroups
	call grbuts,sortimgs
	end method
	method addgroup
	localstring $1
	pop $1
	push $1
	call grbuts,addgr
	call grbuts,sortimgs
	end method
	method addlist
	call grbuts,addlist
	call grbuts,sortimgs
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grbuts,add
	call grbuts,sortimgs
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call grbuts,addonce
	call grbuts,sortimgs
	end method
	method addbut
	localstring $1
	pop $1
	push $1
	call grbuts,addonce
	call grbuts,sortimgs
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call grbuts,contains
	end method
	method addlocker
	localstring $1
	pop $1
	push $1
	cthis add
	push $1
	clparent classlocker,setaslocker
	end method
	method removebutlist
	push "removebut"
	cthis withlist
	end method
	method removebut
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	localint $2
	push sobject
	push "null"
	cmpjne
	cmp0
	jne l2170
	push sclicked
	push "null"
	cmpjne
	jmp l2171
l2169:
	push 0
	jmp l2171
l2170:
	push 1
l2171:
	pop $2
	push $1
	push sobject
	cmpje
	cmp0
	je l2173
	push "null"
	pop sobject
l2173:
	push $1
	push sclicked
	cmpje
	cmp0
	je l2175
	push "null"
	pop sclicked
l2175:
	push $2
	cmp0
	je l2177
	cthis onmousemove
l2177:
	end method
	method removebutmoveoff
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	push $1
	cthis checkmoveoff
	end method
	method checkmoveoff
	localstring $1
	pop $1
	push $1
	push sobject
	cmpje
	cmp0
	je l2179
	cthis lastoff
	cthis onmousemove
l2179:
	end method
	method load
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push "gmimgvec"
	push $1
	spop $a
	call [$a],varnew
	push $1
	push $2
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],each
	push $1
	cthis addgroup
	end method
	method remove
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	cmp0
	je l2181
	push $1
	call grbuts,removegr
l2181:
	end method
	method loadfrom
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	cthis getgraphpath
	pop $5
	push $2
	cthis setgraphpath
	push $1
	push $3
	push $4
	cthis load
	push $5
	cthis setgraphpath
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2183
	ret
l2183:
	cthis checktouchpad
	cmp0
	je l2185
	push bcheck2klik
	jmp l2187
l2185:
	push 0
	jmp l2187
l2186:
	push 1
l2187:
	cmp0
	je l2188
	push ipadclick
	cmp0
	je l2190
	localdef $1
	push sobject
	pop $1
	push $1
	push sobject
	cmpje
	cmp0
	je l2192
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l2191
l2192:
	push sobject
	push "null"
	cmpje
	cmp0
	je l2194
	push 0
	pop ipadclick
l2194:
l2191:
	jmp l2189
l2190:
	push 1
	pop ipadclick
l2189:
	jmp l2184
l2188:
	cthis _butmouselclick
l2184:
	end method
	method _butmouselclick
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	push "null"
	cmpjne
	cmp0
	je l2196
	push sobject
	pop sclicked
	push sobject
	spushs
	push "butclick"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2198
	push sobject
	spushs
	spop $a
	call [$a],butclick
l2198:
l2196:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2200
	ret
l2200:
	cthis checktouchpad
	cmp0
	je l2202
	cthis lastoff
l2202:
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l2204
	push sclicked
	spushs
	push "butlrel"
	spop $a
	call [$a],hasaddedmet
	jmp l2206
l2204:
	push 0
	jmp l2206
l2205:
	push 1
l2206:
	cmp0
	je l2207
	push sclicked
	spushs
	spop $a
	call [$a],butlrel
	jmp l2203
l2207:
	push "null"
	pop sclicked
l2203:
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l2209
	ret
l2209:
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l2211
	push sclicked
	spushs
	push "butmoving"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2213
	push sclicked
	spushs
	spop $a
	call [$a],butmoving
l2213:
l2211:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push "isbutin"
	call grbuts,isinfunc
	cmp0
	je l2215
	localdef $3
	call grbuts,getsfound
	pop $3
	push $3
	push sobject
	cmpjne
	cmp0
	je l2217
	cthis lastoff
	push $3
	pop sobject
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $3
	spushs
	push "butmoveon"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2219
	push $3
	spushs
	spop $a
	call [$a],butmoveon
l2219:
l2217:
	jmp l2214
l2215:
	cthis lastoff
l2214:
	end method
	method lastoff
	push sobject
	push "null"
	cmpjne
	cmp0
	je l2221
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	spushs
	push "butmoveoff"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2223
	push sobject
	spushs
	spop $a
	call [$a],butmoveoff
l2223:
	push "null"
	pop sobject
l2221:
	end method
	method refresh
	cthis lastoff
	cthis onmousemove
	end method
	end class

	method Button_isin
	push "isbutin"
	push "global9"
	cthis addmethod
	end method
	method global9
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 0
	cthis isin
	end method
	method Button_isinvis
	push "isbutin"
	push "global10"
	cthis addmethod
	end method
	method global10
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method Button_isinalpha
	push "isbutin"
	push "global11"
	cthis addmethod
	end method
	method global11
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	end method
	method Button_isinvisalpha
	push "isbutin"
	push "global12"
	cthis addmethod
	end method
	method global12
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 1
	cthis isin
	end method
	method Button_moveon
	push "butmoveon"
	push "global13"
	cthis addmethod
	end method
	method global13
	call sndfxmoveonms,playif
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l2225
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l2225:
	end method
	method Button_moveonstate
	push "butmoveon"
	push "global14"
	cthis addmethod
	end method
	method global14
	cthis advstdstate
	cmp0
	je l2227
	call sndfxmoveonms,playif
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l2229
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l2229:
l2227:
	end method
	method Button_moveonplay
	push "butmoveon"
	push "global15"
	cthis addmethod
	end method
	method global15
	call sndfxmoveonms,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l2231
	push 1
	popax
	sub 0,$a
	cthis play
l2231:
	end method
	method Button_moveoff
	push "butmoveoff"
	push "global16"
	cthis addmethod
	end method
	method global16
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method Button_moveonms
	push "butmoveon"
	push "global17"
	cthis addmethod
	end method
	method global17
	call advmouse,setbut
	end method
	method Button_moveonfxms
	push "butmoveon"
	push "global18"
	cthis addmethod
	end method
	method global18
	call advmouse,setbut
	call sndfxmoveonms,playif
	end method
	method Button_moveonfxmstate
	push "butmoveon"
	push "global19"
	cthis addmethod
	end method
	method global19
	cthis advstdstate
	cmp0
	je l2233
	call advmouse,setbut
	call sndfxmoveonms,playif
l2233:
	end method
	method Button_moveoffms
	push "butmoveoff"
	push "global20"
	cthis addmethod
	end method
	method global20
	call advmouse,setstd
	end method
	method Button_std
	cthis Button_isin
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdstate
	cthis Button_isin
	cthis Button_moveonstate
	cthis Button_moveoff
	end method
	method Button_stdalpha
	cthis Button_isinalpha
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdms
	cthis Button_isinalpha
	cthis Button_moveonms
	cthis Button_moveoffms
	end method
	method Button_stdmstate
	cthis Button_isinalpha
	cthis Button_moveonmstate
	cthis Button_moveoffms
	end method
	method Button_stdclick
	push "butclick"
	push "Button_butclick"
	cthis addmethod
	end method
	method Button_addstd
	cthis Button_std
	cthis Button_stdclick
	cthis getname
	call butgame,add
	end method
	method Button_addstdalpha
	cthis Button_stdalpha
	cthis Button_stdclick
	cthis getname
	call butgame,add
	end method
	method Button_addstdstate
	cthis Button_stdstate
	push "butclick"
	push "global21"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method global21
	cthis advstdstate
	cmp0
	je l2235
	call sndfxbutclick1,playif
	cthis Button_butclick
	jmp l2234
l2235:
	push "butclick_nostdstate_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2234:
	end method
	method Button_butclick
	push "butclick_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method Button_butmoveon
	push "butmoveon_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method Button_butmoveoff
	push "butmoveoff_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	class Buttons
	parent LObjController
	method init
	localstring $1
	pop $1
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	new int,__id
	push 0
	pop __id
	new string,sanbut
	push "anbut"
	pop sanbut
	push sanbut
	push $1
	push 10
	cthis newanima
	push sanbut
	push sanbut
	push "grbuts"
	cthis newanactionsgr
	popax
	call anbut,hide
	push 10
	call grbuts,setz
	push "Buttons0"
	call grbuts,removeif
	new string,slastb
	push "null"
	pop slastb
	push A
	push "sobject"
	push "null"
	push "bvisible"
	push 1
	push "balpha"
	push 1
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	push "bcheck2klik"
	push 0
	cthis var2
	end method
	method Buttons0
	cthis actionname
	push "bkg"
	cmpje
	cmp0
	je l2237
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setz
	push 1
	jmp l2236
l2237:
	push 0
l2236:
	end method
	method _release
	cthis checktouchpad
	cmp0
	je l2239
	push 0
	pop ipadclick
l2239:
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],setframe
	cthis copyobj
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "null"
	pop slastb
	call advmouse,setstd
	end method
	method getbut
	call grbuts,getsfound
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l2241
	ret
l2241:
	push 1
	popax
	sub 0,$a
	push 0
	call grbuts,setframe
	localdef $1
	call mouse,getpos
	push bvisible
	push balpha
	call grbuts,isin
	pop $1
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2243
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
l2243:
	push $1
	cmp0
	je l2245
	localstring $2
	call grbuts,getsfound
	pop $2
	push $2
	push slastb
	cmpjne
	cmp0
	je l2247
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2249
	cthis _release
l2249:
	push $2
	pop slastb
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	cthis copyobj
	call advmouse,setact
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2247:
	jmp l2244
l2245:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2251
	cthis _release
l2251:
l2244:
	end method
	method copyobj
	push slastb
	spushs
	spop $a
	call [$a],actionname
	pop sobject
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2253
	ret
l2253:
	cthis checktouchpad
	cmp0
	je l2255
	push bcheck2klik
	jmp l2257
l2255:
	push 0
	jmp l2257
l2256:
	push 1
l2257:
	cmp0
	je l2258
	push ipadclick
	cmp0
	je l2260
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l2259
l2260:
	push 1
	pop ipadclick
	cthis onmousemove
l2259:
	jmp l2254
l2258:
	cthis _butmouselclick
l2254:
	end method
	method _butmouselclick
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2262
	cthis copyobj
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2262:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2264
	ret
l2264:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2266
	cthis copyobj
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2266:
	end method
	method disable
	cthis lock
	call grbuts,hide
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2268
	call advmouse,setstd
	push "null"
	pop slastb
l2268:
	end method
	method enable
	cthis unlock
	call grbuts,show
	end method
	end class

	class TextDb
	parent classlocker
	parent ObjController
	parent gfxObject
	method init
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	clparent ObjController,init
	new string,sFont
	push $1
	pop sFont
	new string,sFontBold
	push "null"
	pop sFontBold
	new string,sFontItalic
	push "null"
	pop sFontItalic
	new string,sFontBoldItalic
	push "null"
	pop sFontBoldItalic
	new int,bhtml
	push 0
	pop bhtml
	localstring $12
	localint $13
	localint $14
	push "$"
	call $1,contains
	cmp0
	je l2270
	push 1
	pop bhtml
	new vector,vfont
	push "string"
	call vfont,type
	push $1
	push "$"
	call vfont,vecbuildfromstring
	push 0
	pop $14
l2271:
	push $14
	call vfont,size
	cmpjl
	cmp0
	je l2272
	jmp l2274
l2273:
	add $14,1
	pop $14
	jmp l2271
l2274:
	push $14
	call vfont,get
	pop $12
	push "_italic"
	call $12,contains
	cmp0
	je l2276
	push "_bold"
	call $12,contains
	jmp l2278
l2276:
	push 0
	jmp l2278
l2277:
	push 1
l2278:
	cmp0
	je l2279
	push $12
	pop sFontBoldItalic
	jmp l2275
l2279:
	push "_italic"
	call $12,contains
	cmp0
	je l2281
	push $12
	pop sFontItalic
	jmp l2280
l2281:
	push "_bold"
	call $12,contains
	cmp0
	je l2283
	push $12
	pop sFontBold
	jmp l2282
l2283:
	push $12
	pop sFont
l2282:
l2280:
l2275:
	jmp l2273
l2272:
	push "$"
	call sFont,contains
	cmp0
	je l2285
	push sFontItalic
	push "null"
	cmpjne
	cmp0
	je l2287
	push sFontItalic
	pop sFont
	jmp l2286
l2287:
	push sFontBold
	push "null"
	cmpjne
	cmp0
	je l2289
	push sFontBold
	pop sFont
	jmp l2288
l2289:
	push sFontBoldItalic
	pop sFont
l2288:
l2286:
l2285:
	push sFont
	pop $1
	jmp l2269
l2270:
	push $1
	push $2
	cthis checkfont
	pop $1
l2269:
	new int,iFontSize
	push $2
	pop iFontSize
	push "Z"
	push $10
	cthis var2
	localstring $15
	push "null"
	pop $15
	push ":"
	call $3,contains
	cmp0
	je l2291
	push ":"
	call $3,strgetto
	push ":"
	pop $b
	popax
	add $a,$b
	pop $15
l2291:
	push ".db"
	call $3,contains
	cmp0
	je l2293
	push $15
	push "$path:"
	cmpje
	cmp0
	je l2295
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,load
	jmp l2294
l2295:
	push "dbtxt"
	push $3
	cthis newdb
l2294:
	jmp l2292
l2293:
	push $15
	spushs
	push "$lang:"
	cmpst
	jne l2297
	spop $a
	push "dbtxt"
	push $15
	call $3,strsubbs
	cthis lang_db
	jmp l2296
l2297:
	push "$var:"
	cmpst
	jne l2298
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,dbcopy
	jmp l2296
l2298:
	push "$row:"
	cmpst
	jne l2299
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	spushs
	push ","
	spop $h
	call $h,strgetto
	pop $12
	push ","
	call $3,strgetfrom
	pop $13
	push 0
	pop $14
l2300:
	push $14
	push $12
	spushs
	push $13
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2301
	jmp l2303
l2302:
	add $14,1
	pop $14
	jmp l2300
l2303:
	call dbtxt,addrow
	popax
	push $14
	push $12
	spushs
	push $13
	push $14
	spop $a
	call [$a],get
	call dbtxt,add
	jmp l2302
l2301:
	jmp l2296
l2299:
	spop $a
	new db,dbtxt
	push $3
	call dbtxt,dbaddlast
l2296:
l2292:
	localint $16
	push 0
	pop $16
	localint $17
	call dbtxt,getrowsno
	pop $17
	push 0
	push 5
	call $11,getb
	push "limit"
	cmpje
	cmp0
	je l2305
	localint $18
	push "limit_"
	call $11,strsubbs
	pop $18
	new vector,vtmp
	push "string"
	call vtmp,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	localint $14
	push 0
	pop $14
l2306:
	push $14
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l2307
	jmp l2309
l2308:
	add $14,1
	pop $14
	jmp l2306
l2309:
	push $14
	push 0
	call dbtxt,get
	push " "
	call vtmp,vecbuildfromstring
	localint $19
	push 0
	pop $19
l2310:
	push $19
	call vtmp,size
	cmpjl
	cmp0
	je l2311
	jmp l2313
l2312:
	add $19,1
	pop $19
	jmp l2310
l2313:
	push $19
	call vtmp,get
	call vtmp2,add
	jmp l2312
l2311:
	jmp l2308
l2307:
	call dbtxt,free
	localstring $12
	push ""
	pop $12
	localstring $20
	push 0
	pop $14
l2314:
	push $14
	call vtmp2,size
	cmpjl
	cmp0
	je l2315
	jmp l2317
l2316:
	add $14,1
	pop $14
	jmp l2314
l2317:
	push $14
	call vtmp2,get
	pop $20
	push $12
	push $20
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,length
	push $18
	cmpjl
	cmp0
	je l2319
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	jmp l2318
l2319:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	pop $12
l2318:
	jmp l2316
l2315:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	call dbtxt,getrowsno
	pop $17
l2305:
	new gmimgvec,grtxt
	push $7
	push $8
	call grtxt,_setpos
	push 0
	pop $14
l2320:
	push $14
	push $17
	cmpjl
	cmp0
	je l2321
	jmp l2323
l2322:
	add $14,1
	pop $14
	jmp l2320
l2323:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	spop $e
	new text,[$e]
	localdef $21
	push $14
	push 0
	call dbtxt,get
	pop $21
	push bhtml
	cmp0
	je l2325
	push "<b>"
	call $21,contains
	cmp0
	je l2327
	push sFontBold
	pop $1
	push "<b>"
	call $21,strremove
	jmp l2326
l2327:
	push "<bi>"
	call $21,contains
	cmp0
	je l2329
	push sFontBoldItalic
	pop $1
	push "<bi>"
	call $21,strremove
	jmp l2328
l2329:
	push "<i>"
	call $21,contains
	cmp0
	je l2331
	push sFontItalic
	pop $1
	push "<i>"
	call $21,strremove
	jmp l2330
l2331:
	push sFont
	pop $1
l2330:
l2328:
l2326:
l2325:
	push $12
	spushs
	push $1
	spop $a
	call [$a],setfont
	push $12
	spushs
	push $21
	spop $a
	call [$a],set
	push $12
	spushs
	push $7
	push $8
	spop $a
	call [$a],setpos
	push $2
	push $9
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	push $12
	spushs
	push $10
	spop $a
	call [$a],setz
	push $12
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	push $12
	spushs
	spop $a
	call [$a],getw
	push $16
	cmpja
	cmp0
	je l2333
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $16
l2333:
	push $12
	call grtxt,add
	jmp l2322
l2321:
	push "Rows"
	push $17
	cthis var2
	push $11
	push "right"
	cmpje
	cmp0
	jne l2336
	push $11
	push "center"
	cmpje
	jmp l2337
l2335:
	push 0
	jmp l2337
l2336:
	push 1
l2337:
	cmp0
	je l2338
	push 0
	pop $14
l2339:
	push $14
	push $17
	cmpjl
	cmp0
	je l2340
	jmp l2342
l2341:
	add $14,1
	pop $14
	jmp l2339
l2342:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $11
	push "center"
	cmpje
	cmp0
	je l2344
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	spop $a
	call [$a],move
	jmp l2343
l2344:
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l2343:
	jmp l2341
l2340:
l2338:
	push "W"
	push $16
	cthis var2
	push "grtxt"
	clparent gfxObject,init
	end method
	method stdshadow
	localint $1
	pop $1
	push 0
	push 0
	push 0
	push $1
	cthis setshadow
	end method
	method setshadow
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	push sFont
	push iFontSize
	push "_fntbrd"
	cthis _checkfont
	pop $7
	localint $8
	push 0
	pop $8
l2345:
	push $8
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l2346
	jmp l2348
l2347:
	add $8,1
	pop $8
	jmp l2345
l2348:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "txts"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new text,[$e]
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],set
	push $6
	spushs
	push $7
	spop $a
	call [$a],setfont
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $4
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	push $6
	call grtxt,add
	jmp l2347
l2346:
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtxt,setz
	end method
	method getz
	push Z
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call grtxt,isin
	end method
	method view
	localdef $1
	pop $1
	localstring $2
l2349:
	push A
	push $1
	cmpjne
	cmp0
	je l2350
	push $1
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push "txts"
	push "txt"
	call $2,strsubbs
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l2352
	push $2
	spushs
	spop $a
	call [$a],show
l2352:
	localdef $1
	pop $1
	jmp l2349
l2350:
	end method
	method blitto
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l2353:
	push $3
	call grtxt,size
	cmpjl
	cmp0
	je l2354
	jmp l2356
l2355:
	add $3,1
	pop $3
	jmp l2353
l2356:
	push $3
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],buildfullname
	push $1
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],blit
	push GAME
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardel
	jmp l2355
l2354:
	end method
	method setcol
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l2357:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l2358
	jmp l2360
l2359:
	add $4,1
	pop $4
	jmp l2357
l2360:
	push $4
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	jmp l2359
l2358:
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l2361:
	push $5
	call grtxt,size
	cmpjl
	cmp0
	je l2362
	jmp l2364
l2363:
	add $5,1
	pop $5
	jmp l2361
l2364:
	push $5
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l2363
l2362:
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	call grtxt,getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	localdef $4
	push $2
	call grtxt,getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	call grtxt,move
	end method
	end class

	class Lexer
	method init
	end method
	method buildlex
	push A
	push "id"
	push "found"
	cthis vars
	new vector,vconsts
	push "string"
	call vconsts,type
	new vector,vtmp1
	push "string"
	call vtmp1,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	new int,dot
	push "."
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop dot
	new string,_literal_char
	push "\""
	pop _literal_char
	end method
	method setliteralchar
	localstring $1
	pop $1
	push $1
	pop _literal_char
	end method
	method getliteralchar
	push _literal_char
	end method
	method _isvar
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push id
	pop $3
	push ""
	pop found
	localint $4
l2365:
	push $3
	cthis length
	cmpjl
	cmp0
	je l2366
	push $3
	cthis getbyte
	pop $4
	push $4
	push $1
	cmpjae
	cmp0
	je l2368
	push $4
	push $2
	cmpjle
	jmp l2370
l2368:
	push 0
	jmp l2370
l2369:
	push 1
l2370:
	cmp0
	je l2371
	push $3
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $3,1
	pop $3
	jmp l2367
l2371:
	push $4
	push BYTEa
	cmpjae
	cmp0
	je l2373
	push $4
	push BYTEz
	cmpjle
	jmp l2375
l2373:
	push 0
	jmp l2375
l2374:
	push 1
l2375:
	cmp0
	jne l2377
	push $4
	push BYTEA
	cmpjae
	cmp0
	je l2378
	push $4
	push BYTEZ
	cmpjle
	jmp l2380
l2378:
	push 0
	jmp l2380
l2379:
	push 1
l2380:
	cmp0
	jne l2377
	push $4
	push BYTE_
	cmpje
	jmp l2381
l2376:
	push 0
	jmp l2381
l2377:
	push 1
l2381:
	cmp0
	je l2382
	push ""
	pop found
l2382:
	cthis length
	pop $3
l2367:
	jmp l2365
l2366:
	call found,length
	end method
	method isreal
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
	localint $3
	push 1
	pop $3
l2383:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2384
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l2386
	push $2
	push BYTE9
	cmpjle
	jmp l2388
l2386:
	push 0
	jmp l2388
l2387:
	push 1
l2388:
	cmp0
	jne l2390
	push $2
	push dot
	cmpje
	cmp0
	je l2391
	push $3
	jmp l2393
l2391:
	push 0
	jmp l2393
l2392:
	push 1
l2393:
	jmp l2394
l2389:
	push 0
	jmp l2394
l2390:
	push 1
l2394:
	cmp0
	je l2395
	push $2
	push dot
	cmpje
	cmp0
	je l2397
	push 0
	pop $3
l2397:
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l2385
l2395:
	cthis length
	pop $1
l2385:
	jmp l2383
l2384:
	push $3
	cmp0
	jne l2400
	push 0
	push 1
	call found,getb
	push "."
	cmpje
	cmp0
	jne l2400
	push 0
	push 1
	call found,gete
	push "."
	cmpje
	jmp l2401
l2399:
	push 0
	jmp l2401
l2400:
	push 1
l2401:
	cmp0
	je l2402
	push ""
	pop found
l2402:
	call found,length
	end method
	method isident
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
l2403:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2404
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTEa
	cmpjae
	cmp0
	je l2406
	push $2
	push BYTEz
	cmpjle
	jmp l2408
l2406:
	push 0
	jmp l2408
l2407:
	push 1
l2408:
	cmp0
	jne l2410
	push $2
	push BYTEA
	cmpjae
	cmp0
	je l2411
	push $2
	push BYTEZ
	cmpjle
	jmp l2413
l2411:
	push 0
	jmp l2413
l2412:
	push 1
l2413:
	cmp0
	jne l2410
	push $2
	push BYTE_
	cmpje
	cmp0
	jne l2410
	push $1
	push id
	cmpja
	cmp0
	je l2414
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l2414
	push $2
	push BYTE9
	cmpjle
	jmp l2416
l2414:
	push 0
	jmp l2416
l2415:
	push 1
l2416:
	jmp l2417
l2409:
	push 0
	jmp l2417
l2410:
	push 1
l2417:
	cmp0
	je l2418
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l2405
l2418:
	cthis length
	pop $1
l2405:
	jmp l2403
l2404:
	call found,length
	end method
	method isliteral
	cthis check
	cthis getliteralchar
	cmpjne
	cmp0
	je l2420
	push 0
	ret
l2420:
	localint $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop found
	localstring $2
l2421:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2422
	push $1
	push 1
	cthis getb
	pop $2
	push $2
	cthis getliteralchar
	cmpje
	cmp0
	je l2424
	push 1
	ret
	jmp l2423
l2424:
	push $2
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
l2423:
	jmp l2421
l2422:
	push 0
	end method
	method isconst
	localstring $1
	localint $2
	cthis isident
	pop $2
	localint $3
	push 0
	pop $3
l2425:
	push $3
	call vconsts,size
	cmpjl
	cmp0
	je l2426
	jmp l2428
l2427:
	add $3,1
	pop $3
	jmp l2425
l2428:
	push $3
	call vconsts,get
	pop $1
	push $2
	cmp0
	je l2430
	push $1
	push found
	cmpje
	cmp0
	je l2432
	push 1
	ret
l2432:
	jmp l2429
l2430:
	push id
	call $1,length
	cthis getb
	pop found
	push $1
	push found
	cmpje
	cmp0
	je l2434
	push 1
	ret
l2434:
l2429:
	jmp l2427
l2426:
	push 0
	end method
	method gettoken
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
l2435:
	cthis notend
	cmp0
	je l2436
	cthis check
	push " "
	cmpje
	cmp0
	je l2438
	add id,1
	pop id
	jmp l2437
l2438:
	cthis isconst
	cmp0
	je l2440
	push $1
	spushs
	push "$const"
	spop $a
	call [$a],add
	push $1
	spushs
	cthis read
	spop $a
	call [$a],add
	jmp l2439
l2440:
	cthis isreal
	cmp0
	je l2442
	push $1
	spushs
	push "$real"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2444
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2444:
	jmp l2441
l2442:
	cthis isint
	cmp0
	je l2446
	push $1
	spushs
	push "$int"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2448
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2448:
	jmp l2445
l2446:
	cthis isident
	cmp0
	je l2450
	push $1
	spushs
	push "$alpha"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2452
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2452:
	jmp l2449
l2450:
	cthis isliteral
	cmp0
	je l2454
	push $1
	spushs
	push "$literal"
	spop $a
	call [$a],add
	cthis next
	push 2
	popax
	add id,$a
	pop id
	push $2
	cmp0
	je l2456
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2456:
	jmp l2453
l2454:
	push $1
	spushs
	push "$error"
	spop $a
	call [$a],add
	add id,1
	pop id
l2453:
l2449:
l2445:
l2441:
l2439:
l2437:
	jmp l2435
l2436:
	end method
	method expectdb
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	localstring $4
	localint $5
	push 0
	pop $5
l2457:
	push $5
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l2458
	jmp l2460
l2459:
	add $5,1
	pop $5
	jmp l2457
l2460:
	call vtmp2,free
	push 0
	pop $3
l2461:
	push $3
	push $1
	spushs
	push $5
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2462
	jmp l2464
l2463:
	add $3,1
	pop $3
	jmp l2461
l2464:
	push $1
	spushs
	push $5
	push $3
	spop $a
	call [$a],get
	pop $4
	call $4,clear
	push $4
	push ""
	cmpjne
	cmp0
	je l2466
	push $4
	call vtmp2,add
l2466:
	jmp l2463
l2462:
	push "vtmp2"
	push $2
	cthis expectvec
	cmp0
	je l2468
	push $5
	ret
l2468:
	jmp l2459
l2458:
	push 1
	popax
	sub 0,$a
	end method
	method expectvec
	localstring $1
	localint $2
	pop $2
	pop $1
	push 0
	pop id
	push "vtmp1"
	push $2
	cthis gettoken
	push $1
	call vtmp1,veceq
	end method
	method expects
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call vtmp2,vecbuildfromstring
	push "vtmp2"
	push $3
	cthis expectvec
	end method
	method consts=
	push "addbegin"
	call vconsts,withlist
	end method
	method setas
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlex"
	push "buildlex"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlex
	push $1
	spushs
	push "start"
	push "Lexer0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "notend"
	push "Lexer1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getnext"
	push "Lexer2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "next"
	push "Lexer3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "check"
	push "Lexer4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "ischar"
	push "Lexer5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isint"
	push "Lexer6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isreal"
	push "isreal"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbinary"
	push "Lexer7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isident"
	push "isident"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isconst"
	push "isconst"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "_isvar"
	push "_isvar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "read"
	push "Lexer8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isliteral"
	push "isliteral"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettoken"
	push "gettoken"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expects"
	push "expects"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectvec"
	push "expectvec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectdb"
	push "expectdb"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "consts="
	push "consts="
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setliteralchar"
	push "setliteralchar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getliteralchar"
	push "getliteralchar"
	spop $a
	call [$a],addmethod
	end method
	method Lexer0
	localstring $1
	pop $1
	push $1
	cthis set
	push 0
	pop id
	end method
	method Lexer1
	push id
	cthis length
	cmpjl
	end method
	method Lexer2
	push id
	cthis length
	cmpje
	cmp0
	je l2470
	push "null"
	ret
l2470:
	add id,1
	pop id
	push id
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	cthis getb
	end method
	method Lexer3
	call found,length
	popax
	add id,$a
	pop id
	end method
	method Lexer4
	push id
	cthis length
	cmpje
	cmp0
	je l2472
	push "null"
	ret
l2472:
	push id
	push 1
	cthis getb
	pop found
	push found
	end method
	method Lexer5
	localstring $1
	pop $1
	push id
	push 1
	cthis getb
	call $1,contains
	end method
	method Lexer6
	push BYTE0
	push BYTE9
	cthis _isvar
	end method
	method Lexer7
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis _isvar
	end method
	method Lexer8
	cthis next
	push found
	end method
	end class

	class AnimaFx
	method init
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "_buildanfx"
	push "AnimaFx0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_buildanfx
	push $1
	spushs
	push "onsetframe"
	push "AnimaFx1"
	spop $a
	call [$a],addmethod
	end method
	method AnimaFx0
	new db,dbsnd
	push 3
	call dbsnd,dbbuild
	localint $1
	push 0
	pop $1
l2473:
	push $1
	call dbsnd,getrowsno
	cmpjl
	cmp0
	je l2474
	jmp l2476
l2475:
	add $1,1
	pop $1
	jmp l2473
l2476:
	push $1
	push 0
	push $1
	push 0
	call dbsnd,get
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	call dbsnd,set
	jmp l2475
l2474:
	end method
	method AnimaFx1
	localdef $1
	cthis actionname
	push "_"
	pop $b
	popax
	add $a,$b
	cthis framenr
	pop $b
	popax
	add $a,$b
	call dbsnd,findbyrow
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l2478
	push "fx"
	push $1
	push 2
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
l2478:
	end method
	end class

	class Localize
	method init
	end method
	method _lang_db
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push "load"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	cthis lang_path
	push ".db"
	pop $b
	popax
	add $a,$b
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method lang_db
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push ""
	cthis _lang_db
	end method
	method lang_dbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "script"
	cthis _lang_db
	end method
	method lang_dbbeh
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "beh"
	cthis _lang_db
	end method
	method lang_path
	localstring $1
	pop $1
	push LANGDIR
	call gameapi,getgamename
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	end class

	class PyzCounter
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	new int,istart
	new int,istop
	new int,istep
	new int,idigits
	push 50
	pop idigits
	new int,iactual
	new string,_sanima
	push $1
	pop _sanima
	push A
	push "idx"
	push 2
	push "itimestep"
	push $2
	cthis vars2
	new gmimgvec,grcnt
	localint $3
	push 0
	pop $3
l2479:
	push $3
	push idigits
	cmpjl
	cmp0
	je l2480
	jmp l2482
l2481:
	add $3,1
	pop $3
	jmp l2479
l2482:
	localstring $4
	push "pcc"
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $1
	push $4
	cthis copyanima
	push $4
	spushs
	spop $a
	call [$a],hide
	push $4
	call grcnt,add
	jmp l2481
l2480:
	push "timcnt"
	push $2
	push "PyzCounter0"
	cthis timer=
	end method
	method PyzCounter0
	push istep
	popax
	add iactual,$a
	pop iactual
	push iactual
	cthis view
	push iactual
	push istop
	cmpje
	cmp0
	je l2484
	cthis getbuildername
	spushs
	cthis getbuildername
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2483
l2484:
	cthis play
l2483:
	end method
	method getcypher
	localint $1
	pop $1
	push "pcc"
	push _sanima
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method start
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop istart
	push $2
	pop istop
	push $3
	pop istep
	push istart
	pop iactual
	push istart
	cthis view
	call timcnt,play
	end method
	method showcypher
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis getcypher
	pop $3
	push $3
	spushs
	push 0
	push $2
	spop $a
	call [$a],setframe
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method stop
	push 0
	call timcnt,stop
	end method
	method view
	localint $1
	pop $1
	call grcnt,hide
	push 0
	push 0
	call grcnt,setpos
	push $1
	push 0
	cmpje
	cmp0
	je l2486
	push 0
	push 0
	cthis showcypher
	jmp l2485
l2486:
	localint $2
	push 0
	pop $2
l2487:
	push $1
	push 0
	cmpja
	cmp0
	je l2488
	jmp l2490
l2489:
	add $2,1
	pop $2
	jmp l2487
l2490:
	push $2
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	push $d
	cthis showcypher
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	jmp l2489
l2488:
	localint $3
	push 0
	pop $3
	localint $4
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l2491:
	push $4
	push 0
	cmpjae
	cmp0
	je l2492
	jmp l2494
l2493:
	sub $4,1
	pop $4
	jmp l2491
l2494:
	push $4
	cthis getcypher
	spushs
	push $3
	push 0
	spop $a
	call [$a],move
	push $3
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis getcypher
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l2493
l2492:
l2485:
	end method
	end class

	class AnMover
	method init
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	new timer,tmov
	push 1
	call tmov,settick
	push 1
	call tmov,setcycle
	push A
	push "rdx"
	push $2
	push "rdy"
	push $3
	cthis vars2
	new real,rsx
	push 0
	pop rsx
	new real,rsy
	push 0
	pop rsy
	new string,sanima
	push $1
	pop sanima
	push "onfinish"
	push "AnMover0"
	call tmov,addmethod
	end method
	method AnMover0
	cthis move
	push "_finish"
	cthis builder_func
	cthis play
	end method
	method move
	push rdx
	popax
	add rsx,$a
	pop rsx
	push rdy
	popax
	add rsy,$a
	pop rsy
	localint $1
	push rsx
	pop $1
	localint $2
	push rsy
	pop $2
	push $1
	cmp0
	jne l2497
	push $2
	jmp l2498
l2496:
	push 0
	jmp l2498
l2497:
	push 1
l2498:
	cmp0
	je l2499
	push sanima
	spushs
	push $1
	push $2
	spop $a
	call [$a],move
	push $1
	popax
	sub rsx,$a
	pop rsx
	push $2
	popax
	sub rsy,$a
	pop rsy
l2499:
	end method
	method reset
	push 0
	pop rsx
	push 0
	pop rsy
	end method
	method play
	cthis reset
	call tmov,play
	end method
	method stop
	push 0
	call tmov,stop
	end method
	method enableroll
	cthis getname
	push "_finish"
	pop $b
	popax
	add $a,$b
	push "AnMover1"
	cthis addmethod
	end method
	method AnMover1
	push 0
	push 0
	cthis roll
	end method
	method roll
	localint $1
	localint $2
	pop $2
	pop $1
	push rdx
	push 0
	cmpjl
	cmp0
	je l2501
	push sanima
	spushs
	spop $a
	call [$a],getex
	push 0
	cmpjl
	jmp l2503
l2501:
	push 0
	jmp l2503
l2502:
	push 1
l2503:
	cmp0
	je l2504
	push sanima
	spushs
	push igmappw
	push $1
	pop $b
	popax
	add $a,$b
	push sanima
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],ansetbpos
	jmp l2500
l2504:
	push rdx
	push 0
	cmpja
	cmp0
	je l2506
	push sanima
	spushs
	spop $a
	call [$a],getpx
	push igmappw
	cmpjae
	jmp l2508
l2506:
	push 0
	jmp l2508
l2507:
	push 1
l2508:
	cmp0
	je l2509
	push sanima
	spushs
	push $1
	push sanima
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push sanima
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],ansetbpos
l2509:
l2500:
	push rdy
	push 0
	cmpjl
	cmp0
	je l2511
	push sanima
	spushs
	spop $a
	call [$a],getey
	push 0
	cmpjl
	jmp l2513
l2511:
	push 0
	jmp l2513
l2512:
	push 1
l2513:
	cmp0
	je l2514
	push sanima
	spushs
	push sanima
	spushs
	spop $a
	call [$a],getpx
	push igmapph
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	jmp l2510
l2514:
	push rdy
	push 0
	cmpja
	cmp0
	je l2516
	push sanima
	spushs
	spop $a
	call [$a],getpy
	push igmapph
	cmpjae
	jmp l2518
l2516:
	push 0
	jmp l2518
l2517:
	push 1
l2518:
	cmp0
	je l2519
	push sanima
	spushs
	push sanima
	spushs
	spop $a
	call [$a],getpx
	push $2
	push sanima
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],ansetbpos
l2519:
l2510:
	end method
	end class

	method SetAnMover_tmov_onfinish
	cthis getbuildername
	spushs
	spop $a
	call [$a],sam_move
	cthis play
	end method
	class SetAnMover
	method init
	end method
	method setas
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "setanmover"
	push "setanmover"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setanmover
	push $1
	spushs
	push "sam_move"
	push "sam_move"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_copy"
	push "sam_copy"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_addtimer"
	push "SetAnMover0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_playtimer"
	push "SetAnMover1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_stoptimer"
	push "SetAnMover2"
	spop $a
	call [$a],addmethod
	end method
	method SetAnMover0
	new timer,tmov
	push 1
	call tmov,settick
	push 1
	call tmov,setcycle
	push "onfinish"
	push "SetAnMover_tmov_onfinish"
	call tmov,addmethod
	end method
	method SetAnMover1
	call tmov,play
	end method
	method SetAnMover2
	push 0
	call tmov,stop
	end method
	method setanmover
	localreal $1
	localreal $2
	pop $2
	pop $1
	new real,rdx
	push $1
	pop rdx
	new real,rdy
	push $2
	pop rdy
	new real,rsx
	push 0
	pop rsx
	new real,rsy
	push 0
	pop rsy
	push "sam_speed"
	push 1.0
	cthis var2
	end method
	method sam_move
	push rdx
	push sam_speed
	pop $b
	popax
	mul $a,$b
	popax
	add rsx,$a
	pop rsx
	push rdy
	push sam_speed
	pop $b
	popax
	mul $a,$b
	popax
	add rsy,$a
	pop rsy
	localint $1
	push rsx
	pop $1
	localint $2
	push rsy
	pop $2
	push $1
	cmp0
	jne l2522
	push $2
	jmp l2523
l2521:
	push 0
	jmp l2523
l2522:
	push 1
l2523:
	cmp0
	je l2524
	push $1
	push $2
	cthis move
	push $1
	popax
	sub rsx,$a
	pop rsx
	push $2
	popax
	sub rsy,$a
	pop rsy
	push "ansamcopy"
	cthis hasvar
	cmp0
	je l2526
	push $1
	push $2
	call ansamcopy,move
	push rdx
	push 0
	cmpja
	cmp0
	je l2528
	call ansamcopy,getpx
	push rollerx
	cmpja
	cmp0
	je l2530
	localdef $3
	call ansamcopy,getpx
	cthis getw
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	call ansamcopy,move
	push $3
	push 0
	cthis move
l2530:
l2528:
l2526:
l2524:
	end method
	method sam_copy
	push A
	push "rollerx"
	push 0
	push "rollerex"
	push igmappw
	cthis vars2
	cthis getname
	push "ansamcopy"
	cthis copyanima
	call ansamcopy,show
	push rdx
	push 0
	cmpja
	cmp0
	je l2532
	cthis getpx
	cthis getw
	pop $b
	popax
	sub $a,$b
	cthis getpy
	call ansamcopy,ansetbpos
l2532:
	end method
	end class

	class classlives
	method init
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	localint $13
	localint $14
	localstring $15
	pop $15
	pop $14
	pop $13
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new int,iside
	push $15
	push "left"
	cmpje
	cmp0
	je l2534
	push 1
	popax
	sub 0,$a
	pop iside
	jmp l2533
l2534:
	push 1
	pop iside
l2533:
	new int,iilezyc
	push $1
	pop iilezyc
	new int,ibum
	push $2
	pop ibum
	localint $16
	push iilezyc
	push ibum
	pop $b
	popax
	mul $a,$b
	pop $16
	new int,iposxsila
	push $3
	pop iposxsila
	new int,iendxsila
	push $3
	push $16
	pop $b
	popax
	add $a,$b
	pop iendxsila
	new int,iposysila
	push $4
	pop iposysila
	push "imgsilapodkladka"
	push $16
	push $5
	push $6
	push $7
	push $8
	push $9
	push $14
	push 1
	pop $b
	popax
	sub $a,$b
	clparent newvars,newcanvas
	push "imgsila"
	push $16
	push $5
	push $10
	push $11
	push $12
	push $13
	push $14
	clparent newvars,newcanvas
	push iposxsila
	push iposysila
	call imgsila,setpos
	push iposxsila
	push 0
	call imgsila,getex
	push 600
	call imgsila,clip
	push iposxsila
	push iposysila
	call imgsilapodkladka,setpos
	end method
	method reset
	push iposxsila
	push iposysila
	call imgsila,setpos
	end method
	method damage
	localint $1
	pop $1
	push iside
	push $1
	pop $b
	popax
	mul $a,$b
	push ibum
	pop $b
	popax
	mul $a,$b
	push 0
	call imgsila,move
	end method
	method destroyed
	push iside
	push 0
	cmpjl
	cmp0
	je l2536
	call imgsila,getex
	push iposxsila
	cmpjl
	ret
l2536:
	call imgsila,getpx
	push iendxsila
	cmpja
	ret
	end method
	method heal
	localint $1
	pop $1
	push iside
	popax
	sub 0,$a
	push $1
	pop $b
	popax
	mul $a,$b
	push ibum
	pop $b
	popax
	mul $a,$b
	push 0
	call imgsila,move
	push iside
	push 0
	cmpja
	cmp0
	je l2538
	call imgsila,getpx
	push iposxsila
	cmpjl
	cmp0
	je l2540
	push iposxsila
	push iposysila
	call imgsila,setpos
l2540:
	jmp l2537
l2538:
	call imgsila,getpx
	push iposxsila
	cmpja
	cmp0
	je l2542
	push iposxsila
	push iposysila
	call imgsila,setpos
l2542:
l2537:
	end method
	end class

	class imganima
	parent gmimgvec
	method init
	clparent gmimgvec,init
	new int,idgran
	push 0
	pop idgran
	new timer,timan
	push 1
	call timan,settick
	push "onfinish"
	push "imganima0"
	call timan,addmethod
	end method
	method imganima0
	add idgran,1
	pop idgran
	localdef $1
	cthis getbuildername
	pop $1
	push idgran
	push $1
	spushs
	spop $a
	call [$a],size
	cmpje
	cmp0
	je l2544
	push $1
	spushs
	push $1
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2543
l2544:
	push idgran
	cthis setframe
	push $1
	spushs
	push $1
	push "_endframe"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l2543:
	end method
	method load
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	call timan,setcycle
	localint $6
	push $3
	pop $6
l2545:
	push $6
	push $4
	cmpjl
	cmp0
	je l2546
	jmp l2548
l2547:
	add $6,1
	pop $6
	jmp l2545
l2548:
	localdef $7
	push $1
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	push $7
	push "."
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis newimg
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l2547
l2546:
	push 0
	cthis setframe
	end method
	method play
	push 0
	cthis setframe
	call timan,play
	end method
	method setframe
	localint $1
	pop $1
	cthis hide
	push $1
	pop idgran
	push $1
	cthis get
	spushs
	spop $a
	call [$a],show
	end method
	end class

	class GuiItem
	method init
	end method
	method setasrototaker
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "_setasrototaker"
	push "GuiItem0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],_setasrototaker
	push $1
	spushs
	push "rototaker_start"
	push "rototaker_start"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_startwh"
	push "rototaker_startwh"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_startact"
	push "rototaker_startact"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_setroto"
	push "rototaker_setroto"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_endroto"
	push "GuiItem2"
	spop $a
	call [$a],addmethod
	end method
	method GuiItem0
	localdef $1
	localdef $2
	pop $2
	pop $1
	push A
	push "ilerotos"
	push $1
	push "idrotos"
	push 0.0
	push "ikatos"
	push $2
	push 360.0
	pop $b
	popax
	mul $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	push "rzoomx"
	push 0.0
	push "rzoomy"
	push 0.0
	push "rzoomstepx"
	push 0.0
	push "rzoomstepy"
	push 0.0
	push "rmovx"
	push 0.0
	push "rmovy"
	push 0.0
	push "istartalfa"
	push 128
	push "iendx"
	push 0.0
	push "iendy"
	push 0.0
	push "irotodir"
	push 1
	push "izoomdir"
	push 0
	cthis vars2
	new filter,ftroto
	push 2
	call ftroto,setpivottype
	new timer,timrotocenter
	push 1
	call timrotocenter,setcycle
	push "onfinish"
	push "GuiItem1"
	call timrotocenter,addmethod
	end method
	method GuiItem1
	cthis getbuildername
	spushs
	spop $a
	call [$a],rototaker_setroto
	cmp0
	je l2550
	cthis play
l2550:
	end method
	method GuiItem2
	push "rototaker_"
	cthis getname
	pop $b
	popax
	add $a,$b
	push "_endroto"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method rototaker_setroto
	push izoomdir
	cmp0
	je l2552
	localdef $1
	push idrotos
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	localdef $2
	push rzoomx
	push rzoomstepx
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $2
	localdef $3
	push rzoomy
	push rzoomstepy
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $3
	push irotodir
	push ikatos
	pop $b
	popax
	mul $a,$b
	push $2
	push $3
	call ftroto,rotatezoomxy
	jmp l2551
l2552:
	localdef $1
	push ilerotos
	push idrotos
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	push rzoomx
	push rzoomstepx
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $2
	localdef $3
	push rzoomy
	push rzoomstepy
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $3
	push irotodir
	push ikatos
	pop $b
	popax
	mul $a,$b
	push $2
	push $3
	call ftroto,rotatezoomxy
	push idrotos
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop $1
l2551:
	push istartalfa
	push 255
	cmpjl
	cmp0
	je l2554
	localreal $4
	push istartalfa
	pop $4
	push $4
	push 255.0
	push $4
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call ftroto,setopacity
l2554:
	localreal $5
	push iendx
	cthis getposx
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	pop $5
	localreal $6
	push iendy
	cthis getposy
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	mul $a,$b
	pop $6
	push $5
	push $6
	cthis move
	add idrotos,1
	pop idrotos
	push idrotos
	push ilerotos
	cmpjl
	cmp0
	je l2556
	push 1
	jmp l2555
l2556:
	call ftroto,unlink
	cthis rototaker_endroto
	push 0
l2555:
	end method
	method rototaker_startact
	localint $1
	localint $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call $3,gettype
	push "string"
	cmpjne
	cmp0
	je l2558
	push $3
	cthis nameofaction
	pop $4
	jmp l2557
l2558:
	push $3
	pop $4
l2557:
	cthis getpx
	cthis getpy
	push $1
	push $2
	cthis getw
	cthis geth
	push $4
	cthis rototaker_start
	end method
	method rototaker_start
	localint $1
	localint $2
	localint $3
	localint $4
	localreal $5
	localreal $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	push 0
	cthis setframe
	push $1
	push $2
	cthis setpos
	push $3
	push $4
	push $5
	push $6
	cthis getw
	cthis geth
	cthis rototaker_startwh
	end method
	method rototaker_startwh
	localint $1
	localint $2
	localreal $3
	localreal $4
	localreal $5
	localreal $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop iendx
	push $2
	pop iendy
	push $1
	cthis getcx
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rmovx
	push $2
	cthis getcy
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rmovy
	push $5
	push $3
	cmpja
	cmp0
	je l2560
	push $3
	push $5
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomx
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	push $5
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepx
	push 1
	pop izoomdir
	jmp l2559
l2560:
	push 0
	pop izoomdir
	push $5
	push $3
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomx
	push 1.0
	push rzoomx
	pop $b
	popax
	sub $a,$b
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepx
l2559:
	push $6
	push $4
	cmpja
	cmp0
	je l2562
	push $4
	push $6
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomy
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	push $6
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepy
	jmp l2561
l2562:
	push $6
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomy
	push 1.0
	push rzoomy
	pop $b
	popax
	sub $a,$b
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepy
l2561:
	cthis getname
	call ftroto,link
	push 0
	pop idrotos
	cthis rototaker_setroto
	cmp0
	je l2564
	call timrotocenter,play
l2564:
	end method
	end class

	class CalcFPS
	method init
	new real,rfps1
	new real,rfps2
	new real,rfps3
	new real,rsec
	push 1000.0
	pop rsec
	new real,rstart
	push 1.0
	pop rstart
	push "tickfps"
	push "CalcFPS0"
	cthis cycle=
	end method
	method CalcFPS0
	cthis getbuildername
	spushs
	spop $a
	call [$a],tick
	cthis play
	end method
	method stdset
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis stdfont
	cthis white
	push $2
	push $3
	push 1000
	cthis set
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "txtfps"
	push 0
	push $1
	push $2
	push $3
	push $4
	cthis newtext
	push $7
	call txtfps,setz
	push $5
	push $6
	cthis setpos
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txtfps,setpos
	end method
	method tick
	localreal $1
	call engine,getticks
	pop $1
	push $1
	push rstart
	cmpja
	cmp0
	je l2566
	push rfps2
	pop rfps1
	push rfps3
	pop rfps2
	push rsec
	push $1
	push rstart
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop rfps3
	push "delay: "
	push $1
	push rstart
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push " fps: "
	pop $b
	popax
	add $a,$b
	push rfps1
	push rfps2
	pop $b
	popax
	add $a,$b
	push rfps3
	pop $b
	popax
	add $a,$b
	push 3
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	call txtfps,txtset
	jmp l2565
l2566:
	push "inf"
	call txtfps,txtset
l2565:
	push $1
	pop rstart
	end method
	method play
	call tickfps,play
	end method
	method stop
	push 0
	call tickfps,stop
	end method
	end class

	class Film
	parent gfxObject
	method init
	new img,imfilm
	call imfilm,buildfullname
	push "imfilm"
	clparent gfxObject,init
	new string,sfilmpath
	new db,dbfilm
	new db,dbfilm2
	new int,istartklatka
	new int,iklatka
	new int,iendklatka
	new string,sprefilm
	new int,ifilmcycle
	new string,smusic
	new int,igameloopdelay
	push igmdelay
	pop igameloopdelay
	new gmobjvec,grsfx
	new gmimgvec,grbuf
	push A
	push "bcenter"
	push 0
	push "bborders"
	push 0
	push "musicclass"
	push "null"
	push "bbuffer"
	push 0
	push "sfileformat"
	push "jpg"
	cthis vars2
	push "timfilm"
	push "Film0"
	cthis cycle=
	end method
	method Film0
	cthis nextframe
	push iklatka
	push iendklatka
	cmpjle
	cmp0
	je l2568
	call timfilm,play
	jmp l2567
l2568:
	cthis retfps
	localdef $1
	cthis getbuildername
	pop $1
	push $1
	spushs
	push "onfinish"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2570
	push $1
	spushs
	spop $a
	call [$a],onfinish
l2570:
l2567:
	end method
	method bufferfilm
	end method
	method retfps
	push igameloopdelay
	call engine,setloopdelay
	end method
	method setfilmfps
	call engine,getloopdelay
	pop igameloopdelay
	localint $1
	push "fps:"
	call dbfilm,dbgetint
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l2572
	push $1
	call engine,setfps
l2572:
	end method
	method setcycle
	localint $1
	pop $1
	push $1
	call timfilm,setcycle
	push $1
	pop ifilmcycle
	end method
	method nextframe
	push "film_onsetframe_"
	push iklatka
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis loadframe
	add iklatka,1
	pop iklatka
	end method
	method loadframe
	localdef $1
	push iklatka
	call dbfilm,findbyrow
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l2574
	localint $2
	push 1
	pop $2
l2575:
	push $2
	push $1
	call dbfilm,getcolsno
	cmpjl
	cmp0
	je l2576
	jmp l2578
l2577:
	add $2,1
	pop $2
	jmp l2575
l2578:
	push $1
	push $2
	call dbfilm,get
	spushs
	push "fadeout:"
	cmpst
	jne l2580
	spop $a
	add $2,1
	pop $2
	push musicclass
	push "null"
	cmpjne
	cmp0
	je l2582
	push musicclass
	spushs
	push $1
	push $2
	call dbfilm,get
	spop $a
	call [$a],fadeout
l2582:
	jmp l2579
l2580:
	spop $a
	localdef $3
	push $1
	push $2
	call dbfilm,get
	pop $3
	push $3
	spushs
	push "volume_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	call dbfilm,[$d]
	spop $a
	call [$a],setvol
	push $3
	spushs
	spop $a
	call [$a],play
l2579:
	jmp l2577
l2576:
l2574:
	localdef $4
	call imfilm,getz
	pop $4
	localdef $5
	call imfilm,getpx
	pop $5
	localdef $6
	call imfilm,getpy
	pop $6
	push bbuffer
	cmp0
	je l2584
	localdef $3
	push iklatka
	push istartklatka
	pop $b
	popax
	sub $a,$b
	call grbuf,get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],createfrombuffer
	push $3
	call imfilm,copy
	push $3
	spushs
	spop $a
	call [$a],hide
	call imfilm,show
	push iklatka
	push istartklatka
	cmpja
	cmp0
	je l2586
	push iklatka
	push istartklatka
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuf,get
	spushs
	spop $a
	call [$a],free
l2586:
	jmp l2583
l2584:
	push sfilmpath
	push sprefilm
	pop $b
	popax
	add $a,$b
	push iklatka
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push sfileformat
	pop $b
	popax
	add $a,$b
	call imfilm,load
	call imfilm,show
l2583:
	push $4
	call imfilm,setz
	push bcenter
	cmp0
	je l2588
	push igmappw
	call imfilm,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	call imfilm,geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imfilm,setpos
	jmp l2587
l2588:
	push $5
	push $6
	call imfilm,setpos
l2587:
	end method
	method playfilm
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis load
	cthis play
	end method
	method load
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis isplaying
	cmp0
	je l2590
	cthis free
l2590:
	push $1
	pop sfilmpath
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push ".db"
	pop $b
	popax
	add $a,$b
	call dbfilm,load
	push "start:"
	call dbfilm,dbgetint
	pop istartklatka
	push istartklatka
	pop iklatka
	push "end:"
	call dbfilm,dbgetint
	pop iendklatka
	push "prefix:"
	call dbfilm,dbget
	pop sprefilm
	push "music:"
	call dbfilm,dbget
	pop smusic
	localdef $3
	push "format:"
	call dbfilm,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l2592
	push $3
	push 1
	call dbfilm,get
	pop sfileformat
l2592:
	push "buffer:"
	call dbfilm,dbgetint
	pop bbuffer
	push bbuffer
	cmp0
	je l2594
	localint $4
	push istartklatka
	pop $4
l2595:
	push $4
	push iendklatka
	cmpjle
	cmp0
	je l2596
	jmp l2598
l2597:
	add $4,1
	pop $4
	jmp l2595
l2598:
	localdef $5
	push "imbuf"
	push $4
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new img,[$e]
	push $5
	spushs
	push sfilmpath
	push sprefilm
	pop $b
	popax
	add $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push sfileformat
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],loadbuffer
	push $5
	call grbuf,add
	jmp l2597
l2596:
l2594:
	localint $4
	push 0
	pop $4
l2599:
	push $4
	call dbfilm,getrowsno
	cmpjl
	cmp0
	je l2600
	jmp l2602
l2601:
	add $4,1
	pop $4
	jmp l2599
l2602:
	localdef $5
	push $4
	push 0
	call dbfilm,get
	pop $5
	push $5
	clparent StringChecker,isdigit
	cmp0
	je l2604
	localint $6
	push 1
	pop $6
l2605:
	push $6
	push $4
	call dbfilm,getcolsno
	cmpjl
	cmp0
	je l2606
	jmp l2608
l2607:
	add $6,1
	pop $6
	jmp l2605
l2608:
	localdef $7
	push $4
	push $6
	call dbfilm,get
	pop $7
	push $7
	spushs
	push "fadeout:"
	cmpst
	jne l2610
	spop $a
	add $6,1
	pop $6
	jmp l2609
l2610:
	spop $a
	push "fx"
	push " "
	call $7,strgetto
	pop $b
	popax
	add $a,$b
	pop $5
	localint $8
	push 100
	pop $8
	push $5
	cthis hasvar
	neg
	cmp0
	je l2612
	push $7
	cthis sfx=
	push $5
	spushs
	spop $a
	call [$a],getvol
	pop $8
	jmp l2611
l2612:
	push " "
	call $7,contains
	cmp0
	je l2614
	push " "
	call $7,strgetfrom
	pop $8
l2614:
l2611:
	push "volume_"
	push $4
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $6
	pop $b
	popax
	add $a,$b
	push $8
	call dbfilm,var2
	push $4
	push $6
	push $5
	call dbfilm,set
	push $5
	call grsfx,addonce
l2609:
	jmp l2607
l2606:
l2604:
	jmp l2601
l2600:
	end method
	method loadborders
	push bborders
	cmp0
	je l2616
	push "imramkaup"
	cthis hasvar
	neg
	jmp l2618
l2616:
	push 0
	jmp l2618
l2617:
	push 1
l2618:
	cmp0
	je l2619
	new img,imramkaup
	new img,imramkadown
	new img,imramkaleft
	new img,imramkaright
	localint $1
	push 0.5
	push igmapph
	call imfilm,geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $1
	localdef $2
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $1
	push 0
	cmpja
	cmp0
	je l2621
	push igmappw
	push $1
	cthis black
	push 255
	call imramkaup,create
	push $2
	call imramkaup,setz
	push "imramkaup"
	call imramkadown,copy
	push 0
	push igmapph
	push $1
	pop $b
	popax
	sub $a,$b
	call imramkadown,setpos
l2621:
	localint $3
	push 0.5
	push igmappw
	call imfilm,getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l2623
	push $3
	push igmapph
	cthis black
	push 255
	call imramkaleft,create
	push $2
	call imramkaleft,setz
	push "imramkaleft"
	call imramkaright,copy
	push igmappw
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	call imramkaright,setpos
l2623:
l2619:
	end method
	method play
	push istartklatka
	pop iklatka
	cthis nextframe
	cthis loadborders
	push smusic
	push "null"
	cmpjne
	cmp0
	je l2625
	push musicclass
	push "null"
	cmpjne
	jmp l2627
l2625:
	push 0
	jmp l2627
l2626:
	push 1
l2627:
	cmp0
	je l2628
	push musicclass
	spushs
	push smusic
	spop $a
	call [$a],playstr
l2628:
	cthis setfilmfps
	call timfilm,play
	end method
	method free
	call imfilm,free
	localint $1
	push 0
	pop $1
l2629:
	push $1
	call grsfx,size
	cmpjl
	cmp0
	je l2630
	jmp l2632
l2631:
	add $1,1
	pop $1
	jmp l2629
l2632:
	push $1
	call grsfx,get
	spushs
	spop $d
	delete [$d]
	jmp l2631
l2630:
	push 0
	pop $1
l2633:
	push $1
	call grbuf,size
	cmpjl
	cmp0
	je l2634
	jmp l2636
l2635:
	add $1,1
	pop $1
	jmp l2633
l2636:
	push $1
	call grbuf,get
	spushs
	spop $d
	delete [$d]
	jmp l2635
l2634:
	call grbuf,free
	call grsfx,free
	cthis retfps
	end method
	method showframe
	localint $1
	pop $1
	push $1
	push istartklatka
	cmpjl
	cmp0
	je l2638
	push istartklatka
	pop $1
	jmp l2637
l2638:
	push $1
	push iendklatka
	cmpja
	cmp0
	je l2640
	push iendklatka
	pop $1
l2640:
l2637:
	push $1
	pop iklatka
	cthis loadframe
	end method
	method showfirstframe
	push istartklatka
	cthis showframe
	end method
	method showlastframe
	push iendklatka
	cthis showframe
	end method
	method isplaying
	call timfilm,isplaying
	end method
	method stop
	localint $1
	pop $1
	cthis retfps
	push $1
	cmp0
	je l2642
	push iendklatka
	pop iklatka
l2642:
	push $1
	call timfilm,stop
	end method
	method getimg
	call imfilm,getfullname
	end method
	end class

	new snd,_fx_pocket
	push "sounds/sfx/harfa.wav"
	call _fx_pocket,load
	new snd,sndfxmoveonms
	push "sounds/sfx/butmoveon.ogg"
	call sndfxmoveonms,load
	push 30
	call sndfxmoveonms,setvol
	new snd,sndfxmoveon2
	push "sounds/sfx/butmoveon2.ogg"
	call sndfxmoveon2,load
	push 50
	call sndfxmoveon2,setvol
	new snd,sndfxbutclick1
	push "sounds/sfx/butclick1.ogg"
	call sndfxbutclick1,load
	push 50
	call sndfxbutclick1,setvol
	class classmoddbg
	parent classlocker
	method init
	clparent classlocker,init
	new string,sstate
	push "init"
	pop sstate
	new int,ilastx
	new int,ilasty
	new text,txtpos
	push 5000
	call txtpos,setz
	push 0
	push 0
	call txtpos,setpos
	push 0
	push 0
	push 64
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpos,setbkg
	new text,txtmsg
	push 5000
	call txtmsg,setz
	push 220
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	push 10
	call txtmsg,setpos
	push 0
	push 0
	push 500
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtmsg,setbkg
	call txtmsg,hide
	new timer,timmsg
	push 4000
	call timmsg,setdelay
	push "onfinish"
	push "classmoddbg0"
	call timmsg,addmethod
	new text,txtpod
	push 5000
	call txtpod,setz
	push 0
	push 0
	push 128
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpod,setbkg
	new img,impod
	new string,slastimpod
	push "null"
	pop slastimpod
	cthis disable
	end method
	method classmoddbg0
	call txtmsg,hide
	end method
	method enable
	cthis unlock
	call txtpos,show
	call txtpod,show
	end method
	method disable
	cthis lock
	call txtpos,hide
	call txtpod,hide
	call impod,hide
	end method
	method updatetxtpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "clcamera"
	call engine,varexist
	cmp0
	je l2644
	push ""
	push $1
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtpos,set
	jmp l2643
l2644:
	push ""
	push $1
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	call txtpos,set
l2643:
	push $1
	call txtpos,getw
	pop $b
	popax
	sub $a,$b
	call advmouse,lodx
	pop $b
	popax
	sub $a,$b
	push $2
	call txtpos,geth
	pop $b
	popax
	sub $a,$b
	call advmouse,lody
	pop $b
	popax
	sub $a,$b
	call txtpos,setpos
	push $1
	call txtpod,getw
	pop $b
	popax
	sub $a,$b
	call advmouse,lodx
	pop $b
	popax
	sub $a,$b
	push $2
	push 2
	call txtpod,geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call advmouse,lody
	pop $b
	popax
	sub $a,$b
	call txtpod,setpos
	localstring $3
	push $1
	push $2
	push 1
	push 1
	push 2000
	popax
	sub 0,$a
	push 2000
	call engine,getimg
	pop $3
	push $3
	call txtpod,set
	push $3
	push "null"
	cmpje
	cmp0
	jne l2647
	push $3
	push "imgbkg"
	cmpje
	jmp l2648
l2646:
	push 0
	jmp l2648
l2647:
	push 1
l2648:
	cmp0
	je l2649
	call impod,hide
	jmp l2645
l2649:
	push $3
	call engine,varexist
	cmp0
	je l2651
	push $3
	push slastimpod
	cmpjne
	cmp0
	jne l2654
	push $3
	push slastimpod
	cmpje
	cmp0
	je l2655
	call impod,isvisible
	neg
	jmp l2657
l2655:
	push 0
	jmp l2657
l2656:
	push 1
l2657:
	cmp0
	jne l2654
	push $3
	spushs
	spop $a
	call [$a],getw
	call impod,getw
	cmpjne
	cmp0
	jne l2654
	push $3
	spushs
	spop $a
	call [$a],geth
	call impod,geth
	cmpjne
	jmp l2658
l2653:
	push 0
	jmp l2658
l2654:
	push 1
l2658:
	cmp0
	je l2659
	push $3
	spushs
	spop $a
	call [$a],getw
	push $3
	spushs
	spop $a
	call [$a],geth
	push 255
	push 255
	push 0
	push 64
	call impod,create
	call impod,show
	push 2010
	call impod,setz
	push $3
	pop slastimpod
l2659:
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	call impod,setpos
l2651:
l2645:
	call txtpos,getey
	push iResY
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l2661
	push 0
	push $2
	popax
	sub 0,$a
	call txtpos,move
	push 0
	push $2
	popax
	sub 0,$a
	call txtpod,move
l2661:
	call txtpod,getex
	push iResX
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l2663
	push $1
	popax
	sub 0,$a
	push 0
	call txtpos,move
	push $1
	popax
	sub 0,$a
	push 0
	call txtpod,move
l2663:
	call txtpod,getpx
	popax
	sub 0,$a
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l2665
	push $1
	push 0
	call txtpos,move
	push $1
	push 0
	call txtpod,move
l2665:
	end method
	method msminit
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmmove
	localint $1
	localint $2
	pop $2
	pop $1
	push "clcamera"
	call engine,varexist
	cmp0
	je l2667
	push $1
	push ilastx
	pop $b
	popax
	sub $a,$b
	push $2
	push ilasty
	pop $b
	popax
	sub $a,$b
	call clcamera,moveplans
l2667:
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmove
	cthis getlock
	cmp0
	je l2669
	ret
l2669:
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	push "msm"
	push sstate
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $d
	cthis [$d]
	push $1
	pop ilastx
	push $2
	pop ilasty
	end method
	method mslclick
	cthis getlock
	cmp0
	je l2671
	ret
l2671:
	push "space"
	call keyboard,iskeydown
	cmp0
	je l2673
	push "move"
	pop sstate
l2673:
	end method
	method mslrel
	cthis getlock
	cmp0
	je l2675
	ret
l2675:
	push "init"
	pop sstate
	end method
	method msrclick
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	push 0
	cmpjne
	cmp0
	je l2677
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	call $4,print
l2677:
	end method
	method msg
	localstring $1
	pop $1
	call txtmsg,show
	push $1
	call txtmsg,set
	push igmoffsetx
	push 100
	pop $b
	popax
	add $a,$b
	push 10
	call txtmsg,setpos
	call timmsg,play
	end method
	method dbkeydown
	push igmdebug
	neg
	cmp0
	je l2679
	ret
l2679:
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l2681
	push "l"
	call keyboard,iskey
	cmp0
	je l2683
	localdef $1
	push "cache"
	pop $1
	push "1"
	call keyboard,iskeydown
	cmp0
	je l2685
	push "1"
	popax
	add $1,$a
	pop $1
	jmp l2684
l2685:
	push "2"
	call keyboard,iskeydown
	cmp0
	je l2687
	push "2"
	popax
	add $1,$a
	pop $1
	jmp l2686
l2687:
	push "3"
	call keyboard,iskeydown
	cmp0
	je l2689
	push "3"
	popax
	add $1,$a
	pop $1
	jmp l2688
l2689:
	push "4"
	call keyboard,iskeydown
	cmp0
	je l2691
	push "4"
	popax
	add $1,$a
	pop $1
	jmp l2690
l2691:
	push "5"
	call keyboard,iskeydown
	cmp0
	je l2693
	push "5"
	popax
	add $1,$a
	pop $1
	jmp l2692
l2693:
	push "6"
	call keyboard,iskeydown
	cmp0
	je l2695
	push "6"
	popax
	add $1,$a
	pop $1
	jmp l2694
l2695:
	push "7"
	call keyboard,iskeydown
	cmp0
	je l2697
	push "7"
	popax
	add $1,$a
	pop $1
	jmp l2696
l2697:
	push "8"
	call keyboard,iskeydown
	cmp0
	je l2699
	push "8"
	popax
	add $1,$a
	pop $1
	jmp l2698
l2699:
	push "9"
	call keyboard,iskeydown
	cmp0
	je l2701
	push "9"
	popax
	add $1,$a
	pop $1
l2701:
l2698:
l2696:
l2694:
l2692:
l2690:
l2688:
l2686:
l2684:
	push $1
	cthis _load_game
	push "game loaded from "
	push $1
	pop $b
	popax
	add $a,$b
	cthis msg
	jmp l2682
l2683:
	push "s"
	call keyboard,iskey
	cmp0
	je l2703
	localdef $1
	push "cache"
	pop $1
	cthis can_save
	cmp0
	je l2705
	push "1"
	call keyboard,iskeydown
	cmp0
	je l2707
	push "1"
	popax
	add $1,$a
	pop $1
	jmp l2706
l2707:
	push "2"
	call keyboard,iskeydown
	cmp0
	je l2709
	push "2"
	popax
	add $1,$a
	pop $1
	jmp l2708
l2709:
	push "3"
	call keyboard,iskeydown
	cmp0
	je l2711
	push "3"
	popax
	add $1,$a
	pop $1
	jmp l2710
l2711:
	push "4"
	call keyboard,iskeydown
	cmp0
	je l2713
	push "4"
	popax
	add $1,$a
	pop $1
	jmp l2712
l2713:
	push "5"
	call keyboard,iskeydown
	cmp0
	je l2715
	push "5"
	popax
	add $1,$a
	pop $1
	jmp l2714
l2715:
	push "6"
	call keyboard,iskeydown
	cmp0
	je l2717
	push "6"
	popax
	add $1,$a
	pop $1
	jmp l2716
l2717:
	push "7"
	call keyboard,iskeydown
	cmp0
	je l2719
	push "7"
	popax
	add $1,$a
	pop $1
	jmp l2718
l2719:
	push "8"
	call keyboard,iskeydown
	cmp0
	je l2721
	push "8"
	popax
	add $1,$a
	pop $1
	jmp l2720
l2721:
	push "9"
	call keyboard,iskeydown
	cmp0
	je l2723
	push "9"
	popax
	add $1,$a
	pop $1
l2723:
l2720:
l2718:
l2716:
l2714:
l2712:
l2710:
l2708:
l2706:
	push $1
	cthis _save_game
	push "game saved to "
	push $1
	pop $b
	popax
	add $a,$b
	cthis msg
	jmp l2704
l2705:
	push "could not save game to "
	push $1
	pop $b
	popax
	add $a,$b
	push " , sgmstate="
	pop $b
	popax
	add $a,$b
	push sgmstate
	pop $b
	popax
	add $a,$b
	cthis msg
l2704:
	jmp l2702
l2703:
	push "b"
	call keyboard,iskey
	cmp0
	je l2725
	call gameapi,getgamename
	spushs
	push "saves/cache.bmp"
	push 1
	spop $a
	call [$a],cgetscreenshoot
	push "screenshoot in saves/cache.bmp"
	cthis msg
	jmp l2724
l2725:
	push "p"
	call keyboard,iskey
	cmp0
	je l2727
	push "debugger: "
	cthis dprint
l2727:
l2724:
l2702:
l2682:
l2681:
	push "d"
	call keyboard,iskey
	cmp0
	je l2729
	cthis getlock
	cmp0
	je l2731
	cthis enable
	push "debug mode on: ^c-b: screenshoot, ^c-s: save, ^c-l: load, d: debug on/off"
	cthis msg
	jmp l2730
l2731:
	cthis disable
	push "debug mode off"
	cthis msg
l2730:
l2729:
	end method
	end class

	new classmoddbg,moddbg
	class TPainter
	method init
	end method
	method tinit
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	localstring $6
	localdef $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l2733
	push $1
	clparent GameController,init
l2733:
	cthis unlock
	push $2
	push "null"
	cmpjne
	cmp0
	je l2735
	push $2
	cthis setgraphpath
l2735:
	push $3
	push "null"
	cmpjne
	cmp0
	je l2737
	push "anbkg"
	push $3
	push 0
	cthis newanima
l2737:
	new int,paintmode
	push 0
	pop paintmode
	push "anbrush1"
	push $4
	push 3000
	cthis newanima
	push "anbrush1"
	push "anbrush2"
	cthis copyanima
	push 0
	push 1
	call anbrush2,setframe
	call anbrush1,getz
	push 1
	pop $b
	popax
	sub $a,$b
	call anbrush2,setz
	push "anbrush1"
	clparent anima_pack,resizemethods
	push "anbrush2"
	clparent anima_pack,resizemethods
	localint $9
	localint $10
	push $7
	spushs
	push "ru"
	cmpst
	jne l2739
	spop $a
	call anbrush2,getex
	pop $9
	call anbrush2,getpy
	pop $10
	jmp l2738
l2739:
	push "rd"
	cmpst
	jne l2740
	spop $a
	call anbrush2,getex
	pop $9
	call anbrush2,getey
	pop $10
	jmp l2738
l2740:
	push "ld"
	cmpst
	jne l2741
	spop $a
	call anbrush2,getpx
	pop $9
	call anbrush2,getey
	pop $10
	jmp l2738
l2741:
	spop $a
	call anbrush2,getpx
	pop $9
	call anbrush2,getpy
	pop $10
l2738:
	push $9
	push $10
	call anbrush1,saverelpos
	push $9
	push $10
	call anbrush2,saverelpos
	call mouse,hide
	push "anfg"
	push $5
	push 100
	cthis newanima
	push "foreground"
	push 0
	call anfg,setframe
	new gmimgvec,grdraw
	push "anfg"
	push "andraw"
	push "draw"
	call anfg,actionnr
	push "grdraw"
	cthis newanframesgr
	popax
	push 10
	call grdraw,setz
	push ".pyz"
	call $6,contains
	cmp0
	je l2743
	new gmimgvec,grpaleta
	push "grpaleta"
	push $6
	popax
	pop $b
	psax
	call [$b],operator<
	push 20
	call grpaleta,setz
	jmp l2742
l2743:
	push $6
	push "grpaleta"
	cmpjne
	cmp0
	je l2745
	push $6
	spushs
	push "grpaleta"
	spop $a
	call [$a],addtogamevars
l2745:
l2742:
	new int,_ibrx
	call anbrush2,getpx
	pop _ibrx
	new int,_ibry
	call anbrush2,getpy
	pop _ibry
l2746:
	push _ibrx
	push _ibry
	push 0
	push 1
	call anbrush2,isin
	neg
	cmp0
	je l2747
	add _ibrx,1
	pop _ibrx
	push _ibrx
	call anbrush2,getex
	cmpje
	cmp0
	je l2749
	call anbrush2,getpx
	pop _ibrx
	add _ibry,1
	pop _ibry
l2749:
	jmp l2746
l2747:
	call anbrush2,getpx
	popax
	sub _ibrx,$a
	pop _ibrx
	call anbrush2,getpy
	popax
	sub _ibry,$a
	pop _ibry
	clparent TPainter,tp_mouse_move
	push $8
	push "null"
	cmpjne
	cmp0
	je l2751
	new string,savefile
	push $8
	pop savefile
	new db,dbkolory
	localdef $11
	push $8
	pop $11
	push $11
	cthis saveexist
	cmp0
	je l2753
	push $11
	call dbkolory,vecload
	push "TPainter0"
	call grdraw,each
	jmp l2752
l2753:
	push "TPainter1"
	call grdraw,each
	cthis tp_savekols
l2752:
l2751:
	end method
	method TPainter0
	localdef $1
	pop $1
	push $1
	push 0
	call dbkolory,get
	push $1
	push 1
	call dbkolory,get
	push $1
	push 2
	call dbkolory,get
	push 255
	push 0
	cthis paint
	end method
	method TPainter1
	localdef $1
	pop $1
	cthis white
	push 255
	push 0
	cthis paint
	push "255 255 255"
	push " "
	call dbkolory,dbaddstringrow
	end method
	method game_exit
	call mouse,show
	clparent GameController,game_exit
	end method
	method tp_exit
	call mouse,show
	end method
	method tp_mouse_move
	call anbrush1,mssetrelpos
	call anbrush2,mssetrelpos
	end method
	method tp_mouse_lclick
	cthis getlock
	neg
	cmp0
	je l2755
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	call grdraw,isin
	cmp0
	je l2757
	call grdraw,getsfound
	spushs
	call anbrush2,getpx
	push _ibrx
	pop $b
	popax
	add $a,$b
	call anbrush2,getpy
	push _ibry
	pop $b
	popax
	add $a,$b
	call anbrush2,getrgba
	push paintmode
	spop $a
	call [$a],paint
	cthis onpaint
	jmp l2756
l2757:
	push $1
	push $2
	push 0
	push 1
	call grpaleta,isin
	cmp0
	je l2759
	localdef $3
	localdef $4
	localdef $5
	localdef $6
	call grpaleta,getsfound
	spushs
	push $1
	push $2
	spop $a
	call [$a],getrgba
	pop $6
	pop $5
	pop $4
	pop $3
	push 255
	pop $6
	push $3
	push $4
	push $5
	push $6
	push paintmode
	call anbrush2,paint
	cthis onsetbrush
l2759:
l2756:
l2755:
	end method
	method tp_savekols
	push GAME
	spushs
	push "dbkolory"
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l2761
	ret
l2761:
	push "TPainter2"
	call grdraw,each
	push savefile
	call dbkolory,vecsave
	end method
	method TPainter2
	localdef $1
	pop $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	cthis getex
	pop $6
	localint $7
	cthis getey
	pop $7
	localint $8
	cthis getpx
	pop $8
	localint $9
	cthis getpy
	pop $9
l2762:
	push $8
	push $6
	cmpjne
	cmp0
	je l2763
	push $9
	push $7
	cmpjne
	jmp l2765
l2763:
	push 0
	jmp l2765
l2764:
	push 1
l2765:
	cmp0
	je l2766
	push $8
	push $9
	push 0
	push 1
	cthis isin
	cmp0
	je l2768
	push $8
	pop $2
	push $9
	pop $3
	push $6
	pop $8
	jmp l2767
l2768:
	add $8,1
	pop $8
l2767:
	jmp l2762
l2766:
	push $2
	push $3
	cthis getrgba
	popax
	pop $4
	pop $3
	pop $2
	push $1
	push 0
	push $2
	call dbkolory,set
	push $1
	push 1
	push $3
	call dbkolory,set
	push $1
	push 2
	push $4
	call dbkolory,set
	end method
	method tp_default_erase
	cthis white
	push 255
	cthis tp_erase
	end method
	method tp_erase
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l2769:
	push $5
	call grdraw,size
	cmpjl
	cmp0
	je l2770
	jmp l2772
l2771:
	add $5,1
	pop $5
	jmp l2769
l2772:
	push $5
	call grdraw,get
	spushs
	push $1
	push $2
	push $3
	push $4
	push paintmode
	spop $a
	call [$a],paint
	push $5
	push 0
	push 255
	call dbkolory,set
	push $5
	push 1
	push 255
	call dbkolory,set
	push $5
	push 2
	push 255
	call dbkolory,set
	jmp l2771
l2770:
	cthis tp_savekols
	end method
	end class

	class TPainterCon
	parent TPainter
	parent GameController
	method init
	end method
	end class

	new string,sAskerGame
	new int,idymekdelay
	push 300
	pop idymekdelay
	new int,bHorizon
	push "bHorizon:"
	push 1
	cthis readcfg
	pop bHorizon
	class StdGame
	parent classadv
	parent Localize
	method init
	localstring $1
	pop $1
	push 0
	pop AdventureGame
	push $1
	clparent classadv,init
	clparent Localize,init
	push $1
	cthis path=
	call advmouse,setstd
	push PrzygodaMode
	cmp0
	je l2774
	cthis advsaveonstart
	cthis advsave_game
l2774:
	end method
	method loadasker
	push bHorizon
	cmp0
	je l2776
	push "anaskerbg"
	push "$scripts/common/asker.pyz"
	push 1990
	cthis newanima
	jmp l2775
l2776:
	push "anaskerbg"
	push "$scripts/common/asker_pion.pyz"
	push 1990
	cthis newanima
l2775:
	call anaskerbg,hide
	push "anaskerbg"
	push "anaskeryes"
	cthis copyanima
	push "yes"
	push 0
	call anaskeryes,setframe
	push "anaskerbg"
	push "anaskerno"
	cthis copyanima
	push "no"
	push 0
	call anaskerno,setframe
	call anaskeryes,Button_std
	push "butclick"
	push "StdGame0"
	call anaskeryes,addmethod
	call anaskerno,Button_std
	push "butclick"
	push "StdGame1"
	call anaskerno,addmethod
	push "anaskeryes"
	call butgame,add
	push "anaskerno"
	call butgame,add
	end method
	method StdGame0
	push sgmstate
	push "state_askexit"
	cmpje
	cmp0
	je l2778
	push sAskerGame
	push "null"
	cmpjne
	cmp0
	je l2780
	push sAskerGame
	push "exit"
	cmpje
	cmp0
	je l2782
	push "state_exitgame"
	pop sgmstate
	cthis closexit
	jmp l2781
l2782:
	push sAskerGame
	cthis stdexit
l2781:
	jmp l2779
l2780:
	cthis Button_butclick
l2779:
l2778:
	end method
	method StdGame1
	push idymekdelay
	push "advsetstdstate"
	call anaskerbg,anzoomout
	push idymekdelay
	push "null"
	call anaskeryes,anzoomout
	push idymekdelay
	push "null"
	call anaskerno,anzoomout
	end method
	method closexit
	call ccs,buildblack
	push "StdGame2"
	call ccs,close
	end method
	method StdGame2
	call gameapi,exit
	end method
	method askfor
	localstring $1
	pop $1
	push "state_askexitstart"
	pop sgmstate
	push $1
	pop sAskerGame
	push idymekdelay
	push "StdGame3"
	call anaskerbg,anzoomin
	push idymekdelay
	push "null"
	call anaskeryes,anzoomin
	push idymekdelay
	push "null"
	call anaskerno,anzoomin
	end method
	method StdGame3
	push "state_askexit"
	pop sgmstate
	end method
	method stdenter
	push "refreshstdstate"
	call ccs,enter
	end method
	method refreshstdstate
	cthis advsetstdstate
	call butgame,refresh
	end method
	method timfinito
	push GAME
	spushs
	push "_timfinito"
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l2784
	push GAME
	spushs
	push "_timfinito"
	push 1000
	push "StdGame4"
	spop $a
	call [$a],timer=
l2784:
	call _timfinito,play
	end method
	method StdGame4
	cthis advstdstate
	cmp0
	je l2786
	cthis mend
l2786:
	end method
	method Button_stdoff
	push "butmoveoff"
	push "StdGame5"
	cthis addmethod
	end method
	method StdGame5
	cthis advstdstate
	cmp0
	je l2788
	call advmouse,setstd
l2788:
	end method
	method buildfadebut
	localint $1
	pop $1
	localdef $2
	cthis getname
	push "_copy"
	pop $b
	popax
	add $a,$b
	pop $2
	push GAME
	spushs
	cthis getname
	push $2
	spop $a
	call [$a],copyanima
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	push $2
	spushs
	spop $a
	call [$a],hide
	push $1
	cmp0
	je l2790
	cthis Button_isinalpha
	jmp l2789
l2790:
	cthis Button_isin
l2789:
	push "sanbutcopy"
	push $2
	cthis var2
	push "butmoveon"
	push "StdGame6"
	cthis addmethod
	push "butmoveoff"
	push "StdGame7"
	cthis addmethod
	cthis Button_stdclick
	cthis getname
	call butgame,add
	end method
	method StdGame6
	cthis advstdstate
	cmp0
	je l2792
	call advmouse,setact
	push sanbutcopy
	spushs
	push 300
	push "null"
	spop $a
	call [$a],anfadein
l2792:
	cthis Button_butmoveon
	end method
	method StdGame7
	call advmouse,setstd
	push sanbutcopy
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l2794
	push sanbutcopy
	spushs
	push 300
	push "hide"
	spop $a
	call [$a],anfadeout
l2794:
	cthis Button_butmoveoff
	end method
	method crect
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push igmoffsetx
	call $1,igetsc
	pop $b
	popax
	add $a,$b
	push igmoffsety
	call $2,igetsc
	pop $b
	popax
	add $a,$b
	push igmoffsetx
	push iResX
	pop $b
	popax
	add $a,$b
	call $3,igetsc
	pop $b
	popax
	sub $a,$b
	push igmoffsety
	push iResY
	pop $b
	popax
	add $a,$b
	call $4,igetsc
	pop $b
	popax
	sub $a,$b
	new Rect,rec
	end method
	method mkchmura
	localstring $1
	localreal $2
	pop $2
	pop $1
	localdef $3
	push "canmov"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push $1
	push $2
	push 0
	spop $e
	new AnMover,[$e]
	push $3
	spushs
	spop $a
	call [$a],enableroll
	push $3
	spushs
	spop $a
	call [$a],play
	end method
	method key_down
	push igmdebug
	cmp0
	je l2796
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l2796
	push "r"
	call keyboard,iskey
	jmp l2798
l2796:
	push 0
	jmp l2798
l2797:
	push 1
l2798:
	cmp0
	je l2799
	cthis crestart
l2799:
	end method
	end class

	new classgamepause,clpause
	class classplacepointer2
	parent classplacepointer
	method init
	clparent classplacepointer,init
	push "scripts/common/strzalka.pyz"
	cthis load
	end method
	end class

	push "MainLoader"
	call gameapi,play
	game MainLoader
	parent StdGame
	method init
	push "mainloader"
	clparent StdGame,init
	push "modadv"
	call engine,varexist
	cmp0
	je l2801
	push "scripts/scripts/defaults.adv"
	call modadv,load
	push "scripts/scripts/sounds.db"
	call modadv,loadsounds
	push "snd"
	call modadv,settalktype
	push "scripts/scripts/initscript.dsc"
	call modadv,loadscript
l2801:
	push "global.txt"
	call clsave,load
	cthis getname
	pop sgmlastscene
	push "startgame:"
	call dbconf,dbget
	call gameapi,play
	end method
	end game

	new int,bMusic
	push 1
	pop bMusic
	new string,sgmkolopref
	push "Colour"
	call sgmproject,strsubbs
	spushs
	spop $h
	call $h,to_l
	pop sgmkolopref
	new string,sgmbutorient
	push "right"
	pop sgmbutorient
	method gmbutleft
	push igmandroid
	cmp0
	jne l2803
	push sgmbutorient
	push "left"
	cmpje
	jmp l2804
l2802:
	push 0
	jmp l2804
l2803:
	push 1
l2804:
	end method
	class MermaidStd
	parent StdGame
	method init
	localstring $1
	pop $1
	push $1
	clparent StdGame,init
	push sgmkolopref
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis path=
	end method
	method cwideversion
	push 1
	end method
	method cbutexit
	push "anbutexit"
	push "$scripts/common/butexit.pyz"
	push 300
	cthis newanima
	cthis gmbutleft
	cmp0
	je l2806
	push igmoffsetx
	push 10
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	add $a,$b
	push igmoffsety
	call anbutexit,ansetbpos
	jmp l2805
l2806:
	push igmoffsetx
	push iResX
	pop $b
	popax
	add $a,$b
	push 20
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	sub $a,$b
	call anbutexit,getw
	pop $b
	popax
	sub $a,$b
	push igmoffsety
	call anbutexit,ansetbpos
l2805:
	call anbutexit,Button_addstdstate
	end method
	method cbutexitoverlay
	cthis cbutexit
	cthis cblinkbutexit
	end method
	method cblinkbutexit
	cthis checktouchpad
	neg
	cmp0
	je l2808
	cthis yellow
	push 64
	push 1200
	call anbutexit,imgbuildoverlay
l2808:
	end method
	method cblinkbut
	cthis checktouchpad
	neg
	cmp0
	je l2810
	cthis white
	push 64
	push 1200
	cthis imgbuildoverlay
l2810:
	end method
	method cbuthelp
	push "anbuthelp"
	push "$scripts/common/help.pyz"
	push 300
	cthis newanima
	cthis gmbutleft
	cmp0
	je l2812
	call anbutexit,getex
	push 5
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	add $a,$b
	push igmoffsety
	call anbuthelp,ansetbpos
	jmp l2811
l2812:
	call anbutexit,getpx
	call anbuthelp,getw
	pop $b
	popax
	sub $a,$b
	push 5
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	sub $a,$b
	push igmoffsety
	call anbuthelp,ansetbpos
l2811:
	call anbuthelp,Button_addstdstate
	end method
	method cbutmusic
	cthis cbutmuz
	end method
	method cbutmuz
	push "anbutmuz"
	push "$scripts/common/butmuz.pyz"
	push 300
	cthis newanima
	localdef $1
	push "anbutexit"
	pop $1
	push "anbuthelp"
	call engine,varexist
	cmp0
	je l2814
	push "anbuthelp"
	pop $1
l2814:
	cthis gmbutleft
	cmp0
	je l2816
	push $1
	spushs
	spop $a
	call [$a],getex
	push 5
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	add $a,$b
	push igmoffsety
	call anbutmuz,ansetbpos
	jmp l2815
l2816:
	push $1
	spushs
	spop $a
	call [$a],getpx
	call anbutmuz,getw
	pop $b
	popax
	sub $a,$b
	push 5
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	sub $a,$b
	push igmoffsety
	call anbutmuz,ansetbpos
l2815:
	call anbutmuz,Button_addstdstate
	push bMusic
	cmp0
	je l2818
	push "on"
	jmp l2817
l2818:
	push "off"
l2817:
	push 0
	call anbutmuz,setframe
	end method
	method butclick_anbutmuz
	push bMusic
	cmp0
	je l2820
	push 0
	pop bMusic
	push 500
	call music,fadeout
	push "off"
	push 0
	call anbutmuz,setframe
	jmp l2819
l2820:
	push 1
	pop bMusic
	push "on"
	push 0
	call anbutmuz,setframe
	cthis butmuz_playmusic
l2819:
	end method
	method butmuz_playmusic
	cthis playmainmusic
	end method
	method cloadboki
	localint $1
	pop $1
	push "an1366bokl"
	push "$scripts/common/boki.pyz"
	push $1
	cthis newanima
	push "an1366bokl"
	push "an1366bokr"
	cthis copyanima
	push 1
	push 0
	call an1366bokr,setframe
	end method
	method caddymek
	push GAME
	spushs
	cthis getname
	cthis getname
	push "2"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],copyanima
	localint $1
	push 0
	pop $1
l2821:
	push $1
	cthis nofactions
	push 2
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2822
	jmp l2824
l2823:
	add $1,1
	pop $1
	jmp l2821
l2824:
	localdef $2
	cthis getname
	push "iko"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push GAME
	spushs
	cthis getname
	push $2
	spop $a
	call [$a],copyanima
	push $2
	spushs
	spop $a
	call [$a],hide
	push $2
	spushs
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push $2
	spushs
	push $1
	push 2
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],setframe
	push "saniko"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	cthis var2
	jmp l2823
l2822:
	push A
	push "ilesaniko"
	push $1
	push "sancopy"
	cthis getname
	push "2"
	pop $b
	popax
	add $a,$b
	cthis vars2
	push sancopy
	spushs
	spop $a
	call [$a],hide
	push "isbutin"
	push "MermaidStd0"
	cthis addmethod
	push "butmoveon"
	push "MermaidStd1"
	cthis addmethod
	push "butmoveoff"
	push "MermaidStd2"
	cthis addmethod
	push "butclick"
	push "MermaidStd3"
	cthis addmethod
	cthis getname
	call butgame,add
	push 0
	cthis play
	end method
	method MermaidStd0
	localint $1
	localint $2
	pop $2
	pop $1
	push sancopy
	spushs
	push $1
	push $2
	push 0
	push 0
	spop $a
	call [$a],isin
	end method
	method MermaidStd1
	cthis advstdstate
	cmp0
	je l2826
	call advmouse,setact
	push 1
	cthis play
	localint $1
	push 0
	pop $1
l2827:
	push $1
	push ilesaniko
	cmpjl
	cmp0
	je l2828
	jmp l2830
l2829:
	add $1,1
	pop $1
	jmp l2827
l2830:
	push "saniko"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push 10.0
	push $1
	pop $b
	popax
	add $a,$b
	push 10.0
	pop $b
	popax
	div $a,$b
	psax
	push idymekdelay
	pop $b
	popax
	mul $a,$b
	push "null"
	spop $a
	call [$a],anzoomin
	jmp l2829
l2828:
	cthis Button_butmoveon
l2826:
	end method
	method MermaidStd2
	cthis advstdstate
	cmp0
	je l2832
	call advmouse,setstd
	push 0
	cthis play
	localint $1
	push 0
	pop $1
l2833:
	push $1
	push ilesaniko
	cmpjl
	cmp0
	je l2834
	jmp l2836
l2835:
	add $1,1
	pop $1
	jmp l2833
l2836:
	push "saniko"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push 10.0
	push $1
	pop $b
	popax
	add $a,$b
	push 10.0
	pop $b
	popax
	div $a,$b
	psax
	push idymekdelay
	pop $b
	popax
	mul $a,$b
	push "null"
	spop $a
	call [$a],anzoomout
	jmp l2835
l2834:
l2832:
	end method
	method MermaidStd3
	cthis advstdstate
	cmp0
	je l2838
	cthis Button_butclick
l2838:
	end method
	method cbuildbzyczek
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],cbzyczek
	end method
	method cplaybzyczek
	localstring $1
	pop $1
	push $1
	cthis cbuildbzyczek
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
	end method
	method anplaybzyczek
	cthis getname
	cthis cplaybzyczek
	end method
	method cbzyczek
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],ansetbpos
	localdef $4
	push "ftbzyk"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	spop $e
	new filter,[$e]
	push $4
	spushs
	push $1
	spop $a
	call [$a],link
	push $1
	spushs
	push "iliczbzyk"
	push 0
	spop $a
	call [$a],var2
	push $1
	spushs
	push "onendframe"
	push "MermaidStd4"
	spop $a
	call [$a],addmethod
	end method
	method MermaidStd4
	add iliczbzyk,1
	pop iliczbzyk
	push iliczbzyk
	push 1
	cmpje
	cmp0
	je l2840
	localdef $1
	push "ftbzyk"
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push 0
	pop iliczbzyk
	localreal $2
	push 12
	push 21
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	sub $a,$b
	pop $2
	localreal $3
	push 5
	pop $3
	localreal $4
	push $1
	spushs
	spop $a
	call [$a],getangle
	pop $4
	localreal $5
	push $4
	spushs
	spop $h
	call $h,sin
	push $3
	pop $b
	popax
	mul $a,$b
	pop $5
	localreal $6
	push $4
	spushs
	spop $h
	call $h,cos
	push $3
	pop $b
	popax
	mul $a,$b
	pop $6
	push $1
	spushs
	push $2
	spop $a
	call [$a],rotate
	push $5
	popax
	sub 0,$a
	push $6
	popax
	sub 0,$a
	cthis move
l2840:
	end method
	end class

	new int,iKoloId
	push 1
	pop iKoloId
	new int,iIleKolo
	push "iIleKolo:"
	push iKoloId
	cthis readcfg
	pop iIleKolo
	new int,bPlayMusic
	push 1
	pop bPlayMusic
	new int,igmogg
	push 1
	pop igmogg
	method playmainmusic
	push "engine"
	call music,smixer=
	push "bajka2.ogg -l -v 50"
	call music,playstr
	end method
	game MenuImg
	parent MermaidStd
	method init
	push "menu_img"
	clparent MermaidStd,init
	push A
	push "butok.pyz 30"
	push "butnext.pyz 30"
	push "putprev.pyz 30"
	push "cien.pyz 10"
	push "bgmenuimg.jpg"
	push "$scripts/common/cyfry.pyz 30"
	cthis imgs=
	cthis cbutexit
	cthis loadasker
	cthis cbutmusic
	cthis yellow
	push 64
	push 1200
	call anbutok,imgbuildoverlay
	new gmimgvec,grnr
	localint $1
	push "null"
	push iIleKolo
	cthis mputnumber
	pop $1
	localint $2
	push 1.1
	call ancyfry,getw
	pop $b
	popax
	mul $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l2841:
	push $3
	push $1
	cmpjl
	cmp0
	je l2842
	jmp l2844
l2843:
	add $3,1
	pop $3
	jmp l2841
l2844:
	localdef $4
	push "anilepuz"
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push "ancyfry"
	push $4
	cthis copyanima
	push $4
	spushs
	call anbutok,getpx
	push $2
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call ancien,getey
	push 10
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push "annr"
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push "ancyfry"
	push $4
	cthis copyanima
	push $4
	spushs
	call anbutok,getpx
	push $2
	push $3
	push $1
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call ancien,getey
	push 10
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $4
	spushs
	spop $a
	call [$a],hide
	push $4
	call grnr,add
	jmp l2843
l2842:
	push "anilepuz"
	push iIleKolo
	cthis mputnumber
	popax
	push 1
	push 0
	call ancyfry,setframe
	call anbutok,getpx
	push $2
	push $1
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call ancien,getey
	push 10
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	add $a,$b
	call ancyfry,setpos
	new img,imgpic1
	new img,imgpic2
	new string,spic1
	push "imgpic1"
	pop spic1
	new string,spic2
	push "imgpic2"
	pop spic2
	push spic1
	spushs
	spop $a
	call [$a],mload
	cthis mustawnr
	new int,ispeed
	push "timrew"
	push "MenuImg0"
	cthis cycle=
	call anbutnext,Button_addstdstate
	call anputprev,Button_addstdstate
	call anbutok,Button_addstdstate
	cthis stdenter
	end method
	method MenuImg0
	push spic1
	spushs
	push 0
	push ispeed
	spop $a
	call [$a],move
	push spic2
	spushs
	push 0
	push ispeed
	spop $a
	call [$a],move
	localdef $1
	push spic2
	spushs
	spop $a
	call [$a],getpy
	pop $1
	push ispeed
	push 0
	cmpjl
	cmp0
	je l2846
	push $1
	push 0
	cmpjl
	jmp l2848
l2846:
	push 0
	jmp l2848
l2847:
	push 1
l2848:
	cmp0
	jne l2850
	push ispeed
	push 0
	cmpja
	cmp0
	je l2851
	push $1
	push 0
	cmpja
	jmp l2853
l2851:
	push 0
	jmp l2853
l2852:
	push 1
l2853:
	jmp l2854
l2849:
	push 0
	jmp l2854
l2850:
	push 1
l2854:
	cmp0
	je l2855
	push spic1
	spushs
	spop $a
	call [$a],hide
	push spic2
	spushs
	spop $a
	call [$a],mustaw
	localdef $2
	push spic1
	pop $2
	push spic2
	pop spic1
	push $2
	pop spic2
	cthis advsetstdstate
	call ancien,show
	cthis mustawnr
	jmp l2845
l2855:
	cthis play
l2845:
	end method
	method butclick_anbutnext
	push GAME
	spushs
	push 1
	spop $a
	call [$a],mnext
	end method
	method butclick_anputprev
	push GAME
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],mnext
	end method
	method butclick_anbutok
	call ccs,showloading
	push "Kolo"
	cthis stdexit
	end method
	method mustaw
	call ancien,getcx
	call ancien,getcy
	push 1
	pop $b
	popax
	sub $a,$b
	cthis ansetcpos
	end method
	method mload
	push "scripts/"
	push sgmkolopref
	pop $b
	popax
	add $a,$b
	push "/imgscol/colcol_"
	pop $b
	popax
	add $a,$b
	push iKoloId
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	cthis load
	push 500.0
	push 912.0
	pop $b
	popax
	div $a,$b
	psax
	cthis anzoom
	push 20
	cthis setz
	push "ancien"
	cthis anclipob
	cthis show
	cthis mustaw
	end method
	method mnext
	localint $1
	pop $1
	push $1
	popax
	add iKoloId,$a
	pop iKoloId
	push iKoloId
	push 1
	cmpjl
	cmp0
	je l2857
	push iIleKolo
	pop iKoloId
	jmp l2856
l2857:
	push iKoloId
	push iIleKolo
	cmpja
	cmp0
	je l2859
	push 1
	pop iKoloId
l2859:
l2856:
	push spic2
	spushs
	spop $a
	call [$a],mload
	push 0.4
	push spic1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	mul $a,$b
	pop ispeed
	localint $2
	push 5
	pop $2
	push $1
	push 0
	cmpja
	cmp0
	je l2861
	push ispeed
	popax
	sub 0,$a
	pop ispeed
	push spic2
	spushs
	push 0
	push spic1
	spushs
	spop $a
	call [$a],geth
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
	jmp l2860
l2861:
	push spic2
	spushs
	push 0
	push spic2
	spushs
	spop $a
	call [$a],geth
	popax
	sub 0,$a
	push $2
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],move
l2860:
	push "state_rewind"
	pop sgmstate
	call timrew,play
	end method
	method mputnumber
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l2862:
	push $2
	push 0
	cmpja
	cmp0
	je l2863
	push $1
	push "null"
	cmpjne
	cmp0
	je l2865
	localdef $4
	push $1
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	spushs
	push 0
	push $2
	push 10
	pop $b
	popax
	div $a,$b
	push $d
	spop $a
	call [$a],setframe
	push $4
	spushs
	spop $a
	call [$a],show
l2865:
	push $2
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $2
	add $3,1
	pop $3
	jmp l2862
l2863:
	push $3
	end method
	method mustawnr
	call grnr,hide
	push "annr"
	push iKoloId
	cthis mputnumber
	popax
	end method
	method butclick_anbutexit
	push "Outro"
	cthis askfor
	end method
	end game

	game Intro
	parent MermaidStd
	method init
	push "intro"
	clparent MermaidStd,init
	push A
	push "bkg.jpg"
	push "tytul.pyzGH 10"
	cthis imgs=
	new int,idtyt
	push 0
	pop idtyt
	push "Intro0"
	call ccs,enter
	cthis playmainmusic
	end method
	method Intro0
	cthis advsetstdstate
	cthis mtytgo
	end method
	method mend
	push "MenuImg"
	cthis stdexit
	end method
	method mouse_lclick
	cthis mend
	end method
	method mtytgo
	push idtyt
	call grtytul,size
	cmpjae
	cmp0
	je l2867
	cthis mend
	jmp l2866
l2867:
	localint $1
	push idtyt
	call grtytul,size
	push 1
	pop $b
	popax
	sub $a,$b
	cmpje
	cmp0
	je l2869
	push 4000
	jmp l2868
l2869:
	push 1000
l2868:
	pop $1
	push idtyt
	call grtytul,get
	spushs
	push $1
	push "mtytgo"
	spop $a
	call [$a],anfadein
	add idtyt,1
	pop idtyt
l2866:
	end method
	end game

	game Outro
	parent MermaidStd
	method init
	push "outro"
	clparent MermaidStd,init
	push A
	push "nestor"
	call sgmkolopref,in
	cmp0
	je l2871
	push "outrobg.jpg"
	cthis img=
	jmp l2870
l2871:
	push A
	push "bkg.pyz"
	push "bg2.pyz 5"
	push "farm1.pyzG 10"
	push "coralreef.pyzG 10"
	push "tytul_logo.pyzG 20"
	cthis imgs=
	push "download"
	call grfarm1,getsac
	spushs
	push "linkfarm:"
	spop $a
	call [$a],mlinker
	push "download"
	call grcoralreef,getsac
	spushs
	push "linkcoral:"
	spop $a
	call [$a],mlinker
l2870:
	cthis stdenter
	push "timfinish"
	push 12000
	push "mend"
	cthis timplay
	end method
	method mlinker
	localstring $1
	pop $1
	cthis isapple
	cmp0
	je l2873
	cthis cblinkbut
	cthis Button_stdalpha
	push "butclick"
	push "Outro0"
	cthis addmethod
	cthis getname
	call butgame,add
	jmp l2872
l2873:
	cthis hide
l2872:
	end method
	method Outro0
	push igmmac
	cmp0
	jne l2876
	push igmipad
	jmp l2877
l2875:
	push 0
	jmp l2877
l2876:
	push 1
l2877:
	cmp0
	je l2878
	cthis advstdstate
	jmp l2880
l2878:
	push 0
	jmp l2880
l2879:
	push 1
l2880:
	cmp0
	je l2881
	push "open "
	push slink
	push "http://www.daamdaam.com"
	cthis readcfg
	pop $b
	popax
	add $a,$b
	call engine,system
l2881:
	end method
	method mend
	cthis advstdstate
	cmp0
	je l2883
	push "state_exit"
	pop sgmstate
	push 800
	call music,fadeout
	cthis closexit
l2883:
	end method
	method mouse_lclick
	cthis mend
	end method
	end game

	game Kolo
	parent MermaidStd
	method init
	push igmandroid
	cmp0
	je l2885
	push "koloandro"
	clparent MermaidStd,init
	jmp l2884
l2885:
	push "kolo"
	clparent MermaidStd,init
l2884:
	push A
	push "bkg.jpg"
	push "light.pyz 15"
	push "ramka.pyzG 10"
	push "brush.pyzG 15"
	push "paint.pyzH 50"
	push "specbrush.pyz 20"
	push "czysc.pyz 20"
	push "save.pyz 20"
	push "eraser.pyz 20"
	push "dec.pyz 20"
	push "inc.pyz 20"
	push "size.pyz 15"
	push "napisy.pyzG 30"
	push "imgpos.pyzH"
	push "grall"
	cthis imgsgr=
	push igmandroid
	neg
	cmp0
	je l2887
	localint $1
	push 16
	spushs
	spop $h
	call $h,igetsc
	pop $1
	push 0
	push $1
	popax
	sub 0,$a
	call grall,move
	push 2
	popax
	div $1,$a
	mov $1,$a
	push $1
	push 0
	cmpja
	cmp0
	je l2889
	new img,imgbkg2
	call imgbkg,getw
	push $1
	cthis transparent
	call imgbkg2,create
	call imgbkg,getpx
	call imgbkg,getey
	push $1
	pop $b
	popax
	sub $a,$b
	call imgbkg2,setpos
	push "imgbkg"
	call imgbkg2,blit
	call imgbkg,getpx
	call imgbkg,getey
	call imgbkg2,setpos
	new img,imgbkg3
	push "imgbkg2"
	call imgbkg3,copy
	call imgbkg,getpx
	call imgbkg2,getey
	call imgbkg3,setpos
l2889:
l2887:
	cthis cbutexit
	cthis gmbutleft
	neg
	cmp0
	je l2891
	call aneraser,getpx
	push igmoffsety
	call anbutexit,ansetbpos
l2891:
	cthis loadasker
	push A
	push "lira2"
	push "pedzel"
	push "pedzel2"
	cthis sfxs=
	new gmimgvec,grf
	push "grf"
	push "farby.pyz"
	popax
	pop $b
	psax
	call [$b],operator<
	push igmandroid
	neg
	cmp0
	je l2893
	push 0
	push 16
	spushs
	spop $h
	call $h,igetsc
	popax
	sub 0,$a
	call grf,move
l2893:
	call anczysc,hide
	call ansave,hide
	push "clear"
	call grnapisy,getsac
	spushs
	spop $a
	call [$a],hide
	push "save"
	call grnapisy,getsac
	spushs
	spop $a
	call [$a],hide
	new int,xbrush
	new int,ybrush
	new img,imbrush
	new img,imbrush2
	new int,bcandraw
	push 1
	pop bcandraw
	new int,ibrushsize
	push 50
	pop ibrushsize
	push "txtsize"
	push ""
	push 24
	spushs
	spop $h
	call $h,igetsc
	cthis stdfont
	cthis white
	cthis newtext
	push 25
	call txtsize,setz
	new string,slastcol
	push "null"
	pop slastcol
	push "Kolo0"
	call grf,eval
	call grf,last
	spushs
	cthis white
	push 255
	push 0
	spop $a
	call [$a],paint
	push "Kolo2"
	call grbrush,eval
	call aninc,Button_stdms
	push "butclick"
	push "Kolo4"
	call aninc,addmethod
	push "aninc"
	call butgame,add
	call andec,Button_stdms
	push "butclick"
	push "Kolo5"
	call andec,addmethod
	push "andec"
	call butgame,add
	call aneraser,Button_stdms
	push "butclick"
	push "mnewbrushclick"
	call aneraser,addmethod
	push "aneraser"
	call butgame,add
	call anspecbrush,Button_stdms
	push "butclick"
	push "mnewbrushclick"
	call anspecbrush,addmethod
	push "anspecbrush"
	call butgame,add
	push "ancol1"
	push "$scripts/"
	push sgmkolopref
	pop $b
	popax
	add $a,$b
	push "/imgsbw/colbw_"
	pop $b
	popax
	add $a,$b
	push iKoloId
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	push 7
	cthis newimg
	call animgpos,getpx
	call animgpos,getpy
	call ancol1,move
	push "ancol2"
	push "$scripts/"
	push sgmkolopref
	pop $b
	popax
	add $a,$b
	push "/imgscol/colcol_"
	pop $b
	popax
	add $a,$b
	push iKoloId
	pop $b
	popax
	add $a,$b
	push ".jpg"
	pop $b
	popax
	add $a,$b
	push 7
	cthis newimg
	call animgpos,getpx
	call animgpos,getpy
	call ancol2,move
	call ancol2,hide
	new img,implotno
	push igmenablesave
	cmp0
	je l2903
	cthis mgetfile
	call engine,fileexist
	jmp l2905
l2903:
	push 0
	jmp l2905
l2904:
	push 1
l2905:
	cmp0
	je l2906
	call ancol1,getw
	call ancol1,geth
	cthis transparent
	call implotno,create
	cthis mgetfile
	call implotno,loadnoscale
	jmp l2902
l2906:
	call ancol1,getw
	call ancol1,geth
	cthis transparent
	call implotno,create
l2902:
	call ancol1,getpx
	call ancol1,getpy
	call implotno,setpos
	push 8
	call implotno,setz
	new int,bclicked
	push 0
	pop bclicked
	push "timpaint"
	push "Kolo6"
	cthis cycle=
	call grbrush,first
	cthis msetbrush
	call grf,first
	cthis msetfarba
	call timpaint,play
	cthis checkbrushpos
	call ccs,hideloading
	cthis stdenter
	end method
	method Kolo0
	push 20
	cthis setz
	cthis Button_stdms
	push "butclick"
	push "Kolo1"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method Kolo1
	cthis advstdstate
	cmp0
	je l2895
	push 0
	pop bcandraw
	cthis getname
	cthis msetfarba
	call fxpedzel,play
l2895:
	end method
	method Kolo2
	cthis Button_stdms
	push "butclick"
	push "Kolo3"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method Kolo3
	cthis advstdstate
	cmp0
	je l2897
	push 0
	pop bcandraw
	cthis getname
	cthis msetbrush
	call fxpedzel2,play
l2897:
	end method
	method Kolo4
	cthis advstdstate
	cmp0
	je l2899
	push 0
	pop bcandraw
	push 10
	cthis mbrushsize
	call sndfxmoveon2,play
l2899:
	end method
	method Kolo5
	cthis advstdstate
	cmp0
	je l2901
	push 0
	pop bcandraw
	push 10
	popax
	sub 0,$a
	cthis mbrushsize
	call sndfxmoveon2,play
l2901:
	end method
	method Kolo6
	cthis advstdstate
	cmp0
	je l2908
	push bclicked
	jmp l2910
l2908:
	push 0
	jmp l2910
l2909:
	push 1
l2910:
	cmp0
	je l2911
	localreal $1
	call imbrush,getpx
	pop $1
	localreal $2
	call imbrush,getpy
	pop $2
	localreal $3
	push $1
	push xbrush
	pop $b
	popax
	sub $a,$b
	push $2
	push ybrush
	pop $b
	popax
	sub $a,$b
	call $1,length
	pop $3
	localint $4
	push $3
	call imbrush,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	div $a,$b
	psax
	pop $4
	push $4
	push 1
	cmpjl
	cmp0
	je l2913
	push 1
	pop $4
l2913:
	localreal $5
	push xbrush
	pop $5
	localreal $6
	push ybrush
	pop $6
	localreal $7
	push $1
	push $5
	pop $b
	popax
	sub $a,$b
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $7
	localreal $8
	push $2
	push $6
	pop $b
	popax
	sub $a,$b
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $8
	localint $9
	push 1
	pop $9
l2914:
	push $9
	push $4
	cmpjle
	cmp0
	je l2915
	jmp l2917
l2916:
	add $9,1
	pop $9
	jmp l2914
l2917:
	push $9
	push $4
	cmpje
	cmp0
	je l2919
	push $1
	pop xbrush
	push $2
	pop ybrush
	jmp l2918
l2919:
	push $7
	popax
	add $5,$a
	pop $5
	push $8
	popax
	add $6,$a
	pop $6
	push $5
	pop xbrush
	push $6
	pop ybrush
l2918:
	push xbrush
	push ybrush
	call imbrush,setpos
	call anspecbrush,framenr
	cmp0
	je l2921
	push "ancol2"
	push "imbrush"
	call implotno,paintfromsrc
	jmp l2920
l2921:
	call aneraser,framenr
	cmp0
	je l2923
	push "imbrush"
	call implotno,erase
	jmp l2922
l2923:
	push "ancol1"
	push "imbrush"
	call implotno,paintfromgrey
l2922:
l2920:
	jmp l2916
l2915:
l2911:
	cthis play
	end method
	method mgetfile
	cthis getsavepath
	push "kolo"
	pop $b
	popax
	add $a,$b
	push iKoloId
	pop $b
	popax
	add $a,$b
	push ".k16"
	pop $b
	popax
	add $a,$b
	end method
	method msavefile
	push igmenablesave
	cmp0
	je l2925
	localint $1
	call implotno,getpx
	pop $1
	localint $2
	call implotno,getpy
	pop $2
	push igmoffsetx
	push igmoffsety
	call implotno,setpos
	cthis mgetfile
	call implotno,save
	push $1
	push $2
	call implotno,setpos
l2925:
	end method
	method mnewbrushclick
	cthis advstdstate
	cmp0
	je l2927
	push 0
	pop bcandraw
	cthis getname
	push "aneraser"
	cmpje
	cmp0
	je l2929
	push 1
	popax
	sub 0,$a
	push 0
	call anspecbrush,setframe
	call sndfxmoveon2,play
	jmp l2928
l2929:
	push 1
	popax
	sub 0,$a
	push 0
	call aneraser,setframe
	call fxlira2,play
l2928:
	cthis framenr
	cmp0
	je l2931
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	cthis mretcol
	jmp l2930
l2931:
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
	cthis mresetcol
l2930:
l2927:
	end method
	method mbrushsize
	localint $1
	pop $1
	push 10
	push ibrushsize
	push $1
	pop $b
	popax
	add $a,$b
	push 100
	cthis between
	pop ibrushsize
	push "anpaint"
	call imbrush2,imgclone
	push 0.01
	push ibrushsize
	pop $b
	popax
	mul $a,$b
	call imbrush2,anzoom
	push "imbrush2"
	call imbrush,imgclone
	call imbrush2,hide
	call imbrush,show
	push ""
	push ibrushsize
	pop $b
	popax
	add $a,$b
	push "%"
	pop $b
	popax
	add $a,$b
	call txtsize,txtset
	push "ansize"
	call txtsize,imgputoncenter
	cthis mupdatecol
	cthis setbrushpos
	end method
	method mouse_lclick
	cthis advstdstate
	cmp0
	je l2933
	push bcandraw
	cmp0
	je l2935
	push 1
	pop bclicked
	cthis setbrushpos
	call imbrush,getpx
	pop xbrush
	call imbrush,getpy
	pop ybrush
	jmp l2934
l2935:
	push 1
	pop bcandraw
l2934:
l2933:
	end method
	method mouse_lrel
	push 0
	pop bclicked
	cthis checkbrushpos
	end method
	method msetfarba
	localstring $1
	pop $1
	push 0
	push 0
	call aneraser,setframe
	push 0
	push 0
	call anspecbrush,setframe
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push 0
	call anlight,setframe
	push $1
	call anlight,ancenterimg
	call anlight,show
	push $1
	pop slastcol
	cthis mupdatecol
	end method
	method mretcol
	push slastcol
	cthis msetfarba
	end method
	method mupdatecol
	call aneraser,framenr
	cmp0
	jne l2938
	call anspecbrush,framenr
	jmp l2939
l2937:
	push 0
	jmp l2939
l2938:
	push 1
l2939:
	cmp0
	je l2940
	cthis mresetcol
	jmp l2936
l2940:
	push slastcol
	push "null"
	cmpjne
	cmp0
	je l2942
	push slastcol
	spushs
	push slastcol
	spushs
	spop $a
	call [$a],getcx
	push slastcol
	spushs
	spop $a
	call [$a],getcy
	spop $a
	call [$a],getrgb
	push 255
	push 0
	call imbrush,paint
l2942:
l2936:
	end method
	method mresetcol
	call anlight,hide
	cthis black
	push 255
	push 0
	call imbrush,paint
	end method
	method mouse_move
	cthis setbrushpos
	end method
	method setbrushpos
	cthis checktouchpad
	cmp0
	je l2944
	call mouse,getpx
	call imbrush,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call mouse,getpy
	call imbrush,geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call imbrush,setpos
	jmp l2943
l2944:
	call mouse,getpx
	call imbrush,getw
	pop $b
	popax
	sub $a,$b
	call mouse,getpy
	call imbrush,geth
	pop $b
	popax
	sub $a,$b
	call imbrush,setpos
l2943:
	end method
	method msetbrush
	localstring $1
	pop $1
	push 1
	popax
	sub 0,$a
	push 0
	call grbrush,setframe
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	push 0
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	call anpaint,setframe
	push 0
	cthis mbrushsize
	end method
	method checkbrushpos
	push igmandroid
	cmp0
	je l2946
	push 1140
	push 520
	call imbrush,scpos
	call imbrush,getw
	popax
	sub 0,$a
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imbrush,geth
	popax
	sub 0,$a
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imbrush,move
	jmp l2945
l2946:
	cthis checktouchpad
	cmp0
	je l2948
	push 970
	push 650
	call imbrush,scpos
	call imbrush,getw
	popax
	sub 0,$a
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imbrush,geth
	popax
	sub 0,$a
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imbrush,move
l2948:
l2945:
	end method
	method butclick_anbutexit
	push 0
	pop bcandraw
	cthis msavefile
	push "MenuImg"
	cthis askfor
	end method
	end game

