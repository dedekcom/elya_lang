

class classadvpocket : classadvobject, classadvbut, gmimgvec	{
	init(string sname)	{
		classadvobject::init();
		classadvbut::init(sname);
		gmimgvec::init();
		this.setbuttyp("pocket");
		new int iX;
		new int iY;
		new int iNumItems = 0;
		new int iMaxItems = 14;
		new int iScale;
		new string sState = "closed";
		new string _sanim = this.getname();
		_sanim = _sanim.strsubbs( _spocketpref );
		new string sItem = null;
		new string sFocusItem = null;
		
		new string _sbase = "anpocket";
		new int _ibase = _sbase.length();
		
		this.setz(1000);
		
		new string sitempath;
		new vector arPocket;
		arPocket.type("string");
		this.cnewtimercyclefin("tim", 1, 1, "evalpocket");
		
		sitempath = modadv.get("itempath:",1);
		
		int z = this.getz();
		new anima imitem;
		imitem.anloopfin();
		imitem.setz(z+1);
		new img immarker;
		immarker.load( sitempath + "itemmarker.png" );
		immarker.setz(z-1);
		immarker.hide();
		
		this.hide();
		
		new bool bskip=false;
	}
	/*******************************/
	addtoadv()	{		// jezeli jest globalna kieszen
		this.addtogamevars(this.getname());
		this.enable();
		this.addasadvobject();
	}
	removefromadv()	{
		this.disable();
		this.removefromadvobjs();
	}
	hidepocket()	{
		if( sState!="closed")	{
			if( sState!="close" )	{
				this.pockettoggle();
				tim.stop(false);
			}
			while(sState!="closed")	{
				tim.evalpocket();
				tim.stop(false);
			}
		}
	}
	/*******************************/
	skip()	{	bskip=true;	}
	skipitem()	{	if( sItem!=null )	{	bskip=true;	}	}
	additem(string sname)	{
		arPocket.add(sname);
// 		string s = _sbase+iNumItems;
		string s = _sbase + sname;
		new anima <s>;
		this.add(s);
		<s>.load( sitempath + sname + ".pyz" );
		<s>.setframe("in",0);
		<s>.setz( this.getz() );
		<s>.hide();
		iNumItems++;
	}
	removeitem(string sname)	{
		arPocket.remove( sname.strsubbs(_sbase) );
		this.remove( sname );
		iNumItems--;
		if ( sState == "opened" ){	this.hide();	}
	}
	useitem()	{
		if( sItem!=null )	{
			this.removeitem( sItem );
			this.itemhide();
		}
	}
	evalpocket(){
		this.play();
		if ( sState == "open" ){
			iScale+=16;
		} else if ( sState == "close" ){
			iScale-=16;
		}
		if ( iScale > 116 ){
			this.stop(false);
			iScale = 116;
			sState = "opened";
		} else if ( iScale < 0 ){
			this.stop(false);
			iScale = 0;
			sState = "closed";
		}
		real dRadius = (iScale * iScale )/550;
		//real dRadius = iScale.sqrt(iScale)*2;
		real dAngle;
		string s;
		for (int i=0; i< iNumItems; i++){
			dAngle = dRadius*i-(dRadius*iNumItems/2.0) -90.0 + dRadius/2;
			s = this.get(i);
			<s>.setpos( dAngle.cos( dAngle ) * iScale + iX - 76/2, dAngle.sin( dAngle ) * iScale + iY - 75/2 );
			<s>.show();
		}
		if ( sState == "closed" ){
			this.hide();
		}
	}
	pocketpos(int x, int y)	{
		int ix = x-iX;
		int iy = y-iY;
		this.move(ix,iy);
		iX=x;
		iY=y;
	}
	pockettoggle(){
		if ( sState == "opened" ){
			sState = "close";
			immarker.hide();
			tim.play();
		} else if ( sState == "closed" ){
			sState = "open";
			iX = <_sanim>.getposx();
			iY = <_sanim>.getposy()-<_sanim>.geth()/2;
			this.itemhide();
			this.show();
			tim.evalpocket();
			tim.play();
		} else if ( sState == "open" ){
			sState = "close";
		} else if ( sState == "close" ){
			sState = "open";
		}
	}
	string getitem()	{	return sItem!=null ? sItem.strsubbs(_sbase) : null;	}
	itemhide(){
		sFocusItem = null;
		sItem = null;
		imitem.stop(false);
		imitem.hide();
	}
	itemclick()	{
		this.skip();
		if ( sState == "closed" ){
			this.pockettoggle();
		} else if ( sState == "opened" ){
			if ( sFocusItem != null ){
				sItem = sFocusItem;
				imitem.copy(sItem);
				<sFocusItem>.hide();
				imitem.play("out");
				imitem.setz( this.getz() + 1 );
				this.setitempos();
				this.pockettoggle();
			} else {
				this.pockettoggle();
			}
		} else if ( sState == "open" ){
			this.pockettoggle();
		} else if ( sState == "close" ){
			this.pockettoggle();
		}
	}
	int isin(int x, int y, bool bignorehidden, bool bignorealpha)	{
		int id = gmimgvec::isin(x,y,bignorehidden,bignorealpha);
		if( id )	{
			sFocusItem = this.get( id-1 );
		} else {
			sFocusItem = null;
			id = <_sanim>.isin(x,y,bignorehidden,bignorealpha);
		}
		return id;
	}
	setitempos()	{
		imitem.setpos( mouse.getpx()-76/2, mouse.getpy()-75/2 );
	}
	itemmoveoff()	{
		if ( sState == "opened" ){
			immarker.hide();
		}
	}
	itemmoveon()	{
		if ( sState == "opened" ){
			if (sFocusItem != null){
				immarker.show();
				immarker.setpos( <sFocusItem>.getpx(), <sFocusItem>.getpy() );
			} 
		}
	}
	onmouselclick(int x, int y)	{
		if(bskip)	{
			bskip=false;
		} else {
			sState=="opened" || sState=="open"  ? this.pockettoggle() : this.itemhide();
		}
	}
	onmousemove(int x, int y)	{
		if ( sItem != null ){	this.setitempos();	}
		if ( sState == "opened" && this.isin(x,y,true,true) )	{
			this.itemmoveon();
		}
	}
	/**************** button **********/
	moveoff()	{
		advmouse.setstd();
		this.itemmoveoff();	
	}
	clickon()	{	this.itemclick();	}
}
