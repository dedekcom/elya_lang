; Dominik Dagiel   ix 2005

	new string,A
	push "!!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	new real,MATH_E
	push 2.7182818284590452353602874713526624977572470937
	pop MATH_E
	new int,BYTE0
	push "0"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE0
	new int,BYTE9
	push "9"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE9
	new int,BYTEa
	push "a"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEa
	new int,BYTEz
	push "z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEz
	new int,BYTEA
	push "A"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEA
	new int,BYTEZ
	push "Z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEZ
	new int,BYTE_
	push "_"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE_
	new int,BYTESPACE
	push " "
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTESPACE
	method checktouchpad
	push 0
	end method
	method dprint
	localstring $1
	pop $1
	localint $2
	call engine,getstack
	pop $2
	push $1
	push ": "
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l2
	push $1
	push $2
	cthis varnew
l2:
	end method
	method vardelif
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l4
	push $1
	cthis vardel
l4:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global0"
	cthis addmethod
	end method
	method global0
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global1"
	cthis addmethod
	end method
	method global1
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l5:
	push A
	push $2
	cmpjne
	cmp0
	je l6
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l5
l6:
	end method
	method withlist2
	localstring $1
	pop $1
	localdef $2
	pop $2
l7:
	push A
	push $2
	cmpjne
	cmp0
	je l8
	localdef $3
	pop $3
	push $1
	spushs
	push $3
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l7
l8:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method vars2
	push "var2"
	cthis withlist2
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l9:
	push A
	push $3
	cmpjne
	cmp0
	je l10
	push $1
	neg
	cmp0
	je l12
	push $2
	push $3
	cmpje
	pop $1
l12:
	localdef $3
	pop $3
	jmp l9
l10:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l13:
	push $2
	push A
	cmpjne
	cmp0
	je l14
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l13
l14:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global2"
	cthis addmethod
	end method
	method global2
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l15:
	push $2
	push A
	cmpjne
	cmp0
	je l16
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l15
l16:
	end method
	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	method unlocked
	push _block
	push 0
	cmpje
	end method
	method setaslocker
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlocker"
	push "classlocker0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlocker
	push $1
	spushs
	push "lock"
	push "lock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlock"
	push "unlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setlock"
	push "setlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getlock"
	push "getlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlocked"
	push "unlocked"
	spop $a
	call [$a],addmethod
	end method
	method classlocker0
	new int,_block
	push 1
	pop _block
	end method
	end class

	class ClassGameController
	method init
	new gmobjvec,__grobj
	new string,GAME
	cthis getname
	pop GAME
	end method
	method addgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,add
	end method
	method removegmobj
	localstring $1
	pop $1
	push $1
	call __grobj,remove
	end method
	method isgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,contains
	end method
	method deletegmobj
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l18
	push $1
	cthis removegmobj
	push $1
	spushs
	spop $d
	delete [$d]
l18:
	end method
	method mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	end class

	class ObjController
	method init
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],addgmobj
	end method
	method removefromgame
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],removegmobj
	end method
	end class

	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l20
	push $1
	push "null"
	cmpje
	cmp0
	je l22
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l21
l22:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l21:
l20:
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	ret
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	ret
	end method
	method strgetto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l24
	cthis get
	jmp l23
l24:
	push 0
	push $2
	cthis getb
l23:
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	ret
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	ret
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method strisbetween
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	localint $4
	push 0
	pop $4
l25:
	push $4
	cthis length
	cmpjl
	cmp0
	je l26
	jmp l28
l27:
	add $4,1
	pop $4
	jmp l25
l28:
	push $4
	cthis getbyte
	pop $3
	push $3
	push $1
	cmpjl
	cmp0
	jne l31
	push $3
	push $2
	cmpja
	jmp l32
l30:
	push 0
	jmp l32
l31:
	push 1
l32:
	cmp0
	je l33
	push 0
	ret
l33:
	jmp l27
l26:
	push 1
	end method
	method strisint
	push BYTE0
	push BYTE9
	cthis strisbetween
	end method
	method strisbin
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis strisbetween
	end method
	method strisalpha
	push BYTEa
	push BYTEz
	cthis strisbetween
	end method
	method streach
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l34:
	push $3
	cthis length
	cmpjl
	cmp0
	je l35
	jmp l37
l36:
	add $3,1
	pop $3
	jmp l34
l37:
	push $3
	push 1
	cthis getb
	pop $2
	push $2
	spushs
	push $1
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l36
l35:
	end method
	method strdotpos
	localint $1
	pop $1
	push "."
	cthis strgetto
	push "."
	pop $b
	popax
	add $a,$b
	push "."
	cthis strgetfrom
	spushs
	push 0
	push $1
	spop $h
	call $h,getb
	pop $b
	popax
	add $a,$b
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l39
	push 0
	jmp l38
l39:
	push 100
	spushs
	spop $h
	call $h,rand
	push $1
	cmpjle
l38:
	end method
	method between
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l41
	push $1
	jmp l40
l41:
	push $2
	push $3
	cmpja
	cmp0
	je l43
	push $3
	jmp l42
l43:
	push $2
l42:
l40:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l45
	push $1
	jmp l44
l45:
	push $2
l44:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l47
	push $1
	jmp l46
l47:
	push $2
l46:
	end method
	method imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push "1111"
	cthis imgborderss
	end method
	method imgborderss
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 3
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l49
	push "_img_bor"
	cthis blit
l49:
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push 1
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l51
	push "_img_bor"
	cthis blit
l51:
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 0
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l53
	push "_img_bor"
	cthis blit
l53:
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push 2
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l55
	push "_img_bor"
	cthis blit
l55:
	delete _img_bor
	end method
	method imgroundborder
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis imgborders
	cthis imgerasecorners
	end method
	method imgerasecorners
	localdef $1
	cthis getpx
	pop $1
	localdef $2
	cthis getpy
	pop $2
	push $1
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	push $1
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	end method
	method imgdrawline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "blit"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgeraseline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "erase"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgputoncenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method imgfuncline
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $9
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	pop $9
	localdef $10
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	pop $10
	localreal $11
	push $9
	push 0
	cmpje
	cmp0
	je l57
	push $10
	push 0
	cmpjl
	cmp0
	je l59
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l60:
	push $11
	push $6
	cmpjae
	cmp0
	je l61
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	sub $11,$a
	pop $11
	jmp l60
l61:
	push $6
	push $11
	pop $b
	popax
	sub $a,$b
	jmp l58
l59:
	push $10
	push 0
	cmpja
	cmp0
	je l63
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l64:
	push $11
	push $6
	cmpjle
	cmp0
	je l65
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $11,$a
	pop $11
	jmp l64
l65:
	push $11
	push $6
	pop $b
	popax
	sub $a,$b
	jmp l62
l63:
	push $8
l62:
l58:
	jmp l56
l57:
	push $9
	push $10
	call $8,length
	pop $11
	localreal $12
l66:
	push $8
	push $11
	cmpjle
	cmp0
	je l67
	push 1.0
	push $11
	push $8
	pop $b
	popax
	sub $a,$b
	push $11
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $12
	push $2
	spushs
	push $12
	push $9
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push $12
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $8,$a
	pop $8
	jmp l66
l67:
	push $8
	push $11
	pop $b
	popax
	sub $a,$b
l56:
	end method
	method anfirstnontr
	cthis getname
	cthis getpx
	cthis getpy
	push 1
	push 0
	clparent classansearcher,_findnotr
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ancenterscreen
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis ansetcpos
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method ansetsframe
	localdef $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	cthis setframe
	localint $3
	push 0
	pop $3
l68:
	push $3
	push 1
	popax
	sub 0,$a
	cthis nofframes
	cmpjl
	cmp0
	je l69
	cthis framename
	push $2
	cmpjne
	jmp l71
l69:
	push 0
	jmp l71
l70:
	push 1
l71:
	cmp0
	je l72
	add $3,1
	pop $3
	push 1
	popax
	sub 0,$a
	push $3
	cthis setframe
	jmp l68
l72:
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	ret
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	end method
	method objplayloop
	cthis objloop
	cthis play
	end method
	method anplayfin
	localint $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method anposz
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	ret
	end method
	method ansetnextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cthis setframe
	end method
	method ansetnextfr
	push 1
	popax
	sub 0,$a
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	cthis setframe
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anaddfx
	cthis getname
	clparent AnimaFx,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method angetcpos
	cthis getcx
	cthis getcy
	ret
	end method
	method angetcrgba
	cthis getcx
	cthis getcy
	cthis getrgba
	end method
	method anisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l73:
	push $5
	cthis nofactions
	cmpjl
	cmp0
	je l74
	jmp l76
l75:
	add $5,1
	pop $5
	jmp l73
l76:
	push $5
	push 0
	cthis setframe
	push $1
	push $2
	push $3
	push $4
	cthis isin
	cmp0
	je l78
	push $5
	ret
l78:
	jmp l75
l74:
	push 1
	popax
	sub 0,$a
	end method
	method anreload
	localstring $1
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	localint $3
	cthis framenr
	pop $3
	localint $4
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpjne
	pop $4
	localint $5
	localint $6
	cthis getpos
	pop $6
	pop $5
	localint $7
	cthis getz
	pop $7
	push $1
	cthis getpath
	cthis load
	push $5
	push $6
	cthis setpos
	push $7
	cthis setz
	push $2
	cthis nofactions
	cmpjl
	cmp0
	je l80
	push $4
	cmp0
	je l82
	push $2
	cthis play
l82:
	push $2
	push $3
	cthis setframe
	jmp l79
l80:
	push 0
	push 0
	cthis setframe
l79:
	end method
	method anclipob
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	cthis clip
	end method
	method ancopyan
	localstring $1
	pop $1
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l84
	cthis show
	jmp l83
l84:
	cthis hide
l83:
	push $1
	spushs
	spop $a
	call [$a],getpos
	cthis setpos
	end method
	method anconstmove
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push A
	push "mvx"
	push $2
	push "mvy"
	push $3
	cthis vars2
	push $1
	cthis setdelay
	push 1
	popax
	sub 0,$a
	push "global3"
	cthis anplayfin
	end method
	method global3
	push 1
	popax
	sub 0,$a
	cthis play
	push mvx
	push mvy
	cthis move
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis set
	cthis create
	end method
	method txtsetcol
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push $2
	push $3
	push $4
	cthis createtxt
	end method
	method txtshadow
	localint $1
	localstring $2
	pop $2
	pop $1
	push "txts"
	cthis hasvar
	neg
	cmp0
	je l86
	new text,txts
	push $2
	call txts,setfont
l86:
	cthis get
	call txts,set
	cthis getpx
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $1
	pop $b
	popax
	add $a,$b
	call txts,setpos
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	call txts,setz
	call txts,show
	push 0
	push 0
	push 0
	call txts,createtxt
	end method
	method txthides
	cthis hide
	push "txts"
	cthis hasvar
	cmp0
	je l88
	call txts,hide
l88:
	end method
	method txtisin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l89
	push $1
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l89
	push $2
	cthis getpy
	cmpjae
	cmp0
	je l89
	push $2
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	cmpjle
	jmp l91
l89:
	push 0
	jmp l91
l90:
	push 1
l91:
	end method
	method txtcenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtright
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	cthis getw
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l93
	localint $2
	push 0
	pop $2
l94:
	push $2
	push $1
	cmpjl
	cmp0
	je l95
	jmp l97
l96:
	add $2,1
	pop $2
	jmp l94
l97:
	push $2
	cthis add
	jmp l96
l95:
l93:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l98:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l99
	jmp l101
l100:
	add $2,1
	pop $2
	jmp l98
l101:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l100
l99:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l103
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l103:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l105
	sub $2,1
	pop $2
	jmp l104
l105:
	push $2
	push 0
	cmpje
	cmp0
	je l107
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l107:
l104:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l108
	push $1
	cthis size
	cmpjl
	jmp l110
l108:
	push 0
	jmp l110
l109:
	push 1
l110:
	cmp0
	je l112
	push $1
	cthis get
	jmp l111
l112:
	push "null"
l111:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l114
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l113
l114:
	push "null"
l113:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l115:
	cthis size
	push $1
	cmpja
	cmp0
	je l116
	cthis vecpop
	popax
	jmp l115
l116:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	ret
	end method
	method vecreplace
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l118
	push $3
	push $2
	cthis set
l118:
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l120
	ret
l120:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l121:
	push $8
	push $1
	cmpjl
	cmp0
	je l122
	jmp l124
l123:
	add $8,1
	pop $8
	jmp l121
l124:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l125:
	push $9
	push $1
	cmpjl
	cmp0
	je l126
	jmp l128
l127:
	add $9,1
	pop $9
	jmp l125
l128:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l130
	push $6
	pop $5
	push $9
	pop $7
l130:
	jmp l127
l126:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l123
l122:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l131:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l132
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l131
l132:
	call $1,length
	push 0
	cmpja
	cmp0
	je l134
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l134:
	end method
	method obbuildfromstring2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l135:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l136
	push $4
	push 0
	cmpja
	cmp0
	je l138
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
l138:
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l135
l136:
	call $1,length
	push 0
	cmpja
	cmp0
	je l140
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l140:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecbuildfromstring2
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring2
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l141:
	push $2
	push $1
	cmpjl
	cmp0
	je l142
	jmp l144
l143:
	add $2,1
	pop $2
	jmp l141
l144:
	push 0
	cthis removeat
	jmp l143
l142:
	end method
	method vecremovefrom
	localint $1
	pop $1
l145:
	push $1
	cthis size
	cmpjl
	cmp0
	je l146
	push $1
	cthis removeat
	jmp l145
l146:
	end method
	method vecfindfrom
	localint $1
	localdef $2
	pop $2
	pop $1
l147:
	push $1
	cthis size
	cmpjl
	cmp0
	je l148
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l150
	push $1
	ret
	jmp l149
l150:
	add $1,1
	pop $1
l149:
	jmp l147
l148:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l153
	cthis size
	push 0
	cmpje
	jmp l154
l152:
	push 0
	jmp l154
l153:
	push 1
l154:
	cmp0
	je l155
	ret
l155:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l157
	localint $4
	push $1
	pop $4
l158:
	push $4
	push $2
	cmpja
	cmp0
	je l159
	jmp l161
l160:
	sub $4,1
	pop $4
	jmp l158
l161:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l160
l159:
	jmp l156
l157:
	push $1
	push $2
	cmpjl
	cmp0
	je l163
	localint $4
	push $1
	pop $4
l164:
	push $4
	push $2
	cmpjl
	cmp0
	je l165
	jmp l167
l166:
	add $4,1
	pop $4
	jmp l164
l167:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l166
l165:
l163:
l156:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l169
	push $2
	push 0
	cthis vecposfromto
	jmp l168
l169:
	push $1
	cthis addbegin
l168:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l171
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l170
l171:
	push $1
	cthis addbegin
l170:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l173
	push $3
	push $2
	cthis set
l173:
	end method
	method veceq
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjne
	cmp0
	je l175
	push 0
	ret
l175:
	localint $3
	push 0
	pop $3
l176:
	push $3
	push $2
	cmpjl
	cmp0
	je l177
	jmp l179
l178:
	add $3,1
	pop $3
	jmp l176
l179:
	push $3
	cthis get
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l181
	push 0
	ret
l181:
	jmp l178
l177:
	push 1
	end method
	method veceval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l182:
	push $2
	cthis size
	cmpjl
	cmp0
	je l183
	jmp l185
l184:
	add $2,1
	pop $2
	jmp l182
l185:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l184
l183:
	end method
	method veceval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l186:
	push $3
	cthis size
	cmpjl
	cmp0
	je l187
	jmp l189
l188:
	add $3,1
	pop $3
	jmp l186
l189:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l188
l187:
	end method
	method veceval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l190:
	push $4
	cthis size
	cmpjl
	cmp0
	je l191
	jmp l193
l192:
	add $4,1
	pop $4
	jmp l190
l193:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l192
l191:
	end method
	method vecbuild
	push "addbegin"
	cthis withlist
	end method
	method veceq2
	new vector,___v
	cthis getvectype
	call ___v,type
	call ___v,vecbuild
	localint $1
	push "___v"
	cthis veceq
	pop $1
	delete ___v
	push $1
	end method
	method veccopydbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	cthis vecadddbrow
	end method
	method vecadddbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l194:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l195
	jmp l197
l196:
	add $3,1
	pop $3
	jmp l194
l197:
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l196
l195:
	end method
	method vecchecknext
	localint $1
	pop $1
	add $1,1
	pop $1
	push $1
	cthis size
	cmpjl
	cmp0
	je l199
	push $1
	cthis get
	jmp l198
l199:
	push "null"
l198:
	end method
	method vecsum
	cthis size
	cmp0
	je l201
	localdef $1
	push 0
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
l202:
	push $2
	cthis size
	cmpjl
	cmp0
	je l203
	jmp l205
l204:
	add $2,1
	pop $2
	jmp l202
l205:
	push $2
	cthis get
	popax
	add $1,$a
	pop $1
	jmp l204
l203:
	push $1
	jmp l200
l201:
	push 0
l200:
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l207
	ret
l207:
	sub $1,1
	pop $1
	cthis free
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l208:
	push $2
	push A
	cmpjne
	cmp0
	je l209
	jmp l211
l210:
	jmp l208
l211:
	push $4
	push 0
	cmpje
	cmp0
	je l213
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l213:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l215
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l214
l215:
	push 0
l214:
	pop $4
	jmp l210
l209:
	end method
	method dbbuild2
	cthis free
	localstring $1
	pop $1
l216:
	push $1
	push A
	cmpjne
	cmp0
	je l217
	push $1
	push "null"
	cmpje
	cmp0
	je l219
	cthis addbeginrow
	popax
	jmp l218
l219:
	push 0
	push $1
	cthis addbegin
l218:
	pop $1
	jmp l216
l217:
	end method
	method dbaddvec
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l220:
	push $3
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l221
	jmp l223
l222:
	add $3,1
	pop $3
	jmp l220
l223:
	push $2
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l222
l221:
	end method
	method dbcopy
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis dbcopyfromto
	end method
	method dbcopyrow
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis dbcopyfromto
	end method
	method dbcopyfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis free
	localint $4
	localint $5
	localint $6
	push $2
	pop $4
l224:
	push $4
	push $3
	cmpjl
	cmp0
	je l225
	jmp l227
l226:
	add $4,1
	pop $4
	jmp l224
l227:
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push 0
	pop $5
l228:
	push $5
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l229
	jmp l231
l230:
	add $5,1
	pop $5
	jmp l228
l231:
	push $6
	push $1
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	cthis add
	jmp l230
l229:
	jmp l226
l225:
	end method
	method dbadddbrowtorow
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l232:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l233
	jmp l235
l234:
	add $4,1
	pop $4
	jmp l232
l235:
	push $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	cthis add
	jmp l234
l233:
	end method
	method dbremovecol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l236:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l237
	jmp l239
l238:
	add $2,1
	pop $2
	jmp l236
l239:
	push $2
	cthis getcolsno
	push $1
	cmpja
	cmp0
	je l241
	push $2
	push $1
	cthis removeat
l241:
	jmp l238
l237:
	end method
	method dbcopyfromtos
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis dbcopyfromto
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l243
l244:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l245
	cthis dbremovelast
	jmp l244
l245:
	jmp l242
l243:
	cthis free
l242:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbgetstringrow
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push $1
	cthis getcolsno
	pop $3
	localint $4
	push 0
	pop $4
l246:
	push $4
	push $3
	cmpjl
	cmp0
	je l247
	jmp l249
l248:
	add $4,1
	pop $4
	jmp l246
l249:
	push $1
	push $4
	cthis get
	popax
	add $2,$a
	pop $2
	jmp l248
l247:
	push $2
	end method
	method dbaddrow
	localdef $1
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	pop $2
l250:
	push A
	push $2
	cmpjne
	cmp0
	je l251
	push $1
	push $2
	cthis addbegin
	localdef $2
	pop $2
	jmp l250
l251:
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l253
	push $3
	push 0
	cmpjae
	jmp l255
l253:
	push 0
	jmp l255
l254:
	push 1
l255:
	cmp0
	je l256
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l257:
	push $3
	push $5
	cmpjl
	cmp0
	je l258
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l257
l258:
l256:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l260
	push $1
	push $2
	cthis get
	jmp l259
l260:
	push "null"
l259:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis findbyrow
	push $2
	cthis get
	ret
	end method
	method dbget
	localstring $1
	pop $1
	localint $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l262
	push $2
	push 1
	cthis get
	jmp l261
l262:
	push "null"
l261:
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l263:
	push $2
	push 0
	cmpjae
	cmp0
	je l264
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l266
	push $2
	ret
l266:
	sub $2,1
	pop $2
	jmp l263
l264:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	ret
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l268
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l268:
	push 0
	ret
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l270
	localint $3
	push 0
	pop $3
l271:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l272
	jmp l274
l273:
	add $3,1
	pop $3
	jmp l271
l274:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l276
	push $3
	ret
l276:
	jmp l273
l272:
l270:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l277:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l278
	jmp l280
l279:
	add $3,1
	pop $3
	jmp l277
l280:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l282
	push $3
	ret
l282:
	jmp l279
l278:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	ret
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	ret
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	ret
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method dbsetall
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l283:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l284
	jmp l286
l285:
	add $2,1
	pop $2
	jmp l283
l286:
	localdef $3
	push 0
	pop $3
l287:
	push $3
	push $2
	cthis getcolsno
	cmpjl
	cmp0
	je l288
	jmp l290
l289:
	add $3,1
	pop $3
	jmp l287
l290:
	push $2
	push $3
	push $1
	cthis set
	jmp l289
l288:
	jmp l285
l284:
	end method
	method dbeach_row
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l291:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l292
	jmp l294
l293:
	add $2,1
	pop $2
	jmp l291
l294:
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	jmp l293
l292:
	end method
	method dbeq
	localstring $1
	pop $1
	cthis getrowsno
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjne
	cmp0
	je l296
	push 0
	ret
l296:
	localint $2
	localint $3
	localint $4
	push 0
	pop $4
l297:
	push $4
	cthis getrowsno
	cmpjl
	cmp0
	je l298
	jmp l300
l299:
	add $4,1
	pop $4
	jmp l297
l300:
	push $4
	cthis getcolsno
	pop $2
	push $2
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjne
	cmp0
	je l302
	push 0
	ret
l302:
	push 0
	pop $3
l303:
	push $3
	push $2
	cmpjl
	cmp0
	je l304
	jmp l306
l305:
	add $3,1
	pop $3
	jmp l303
l306:
	push $4
	push $3
	cthis get
	push $1
	spushs
	push $4
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l308
	push 0
	ret
l308:
	jmp l305
l304:
	jmp l299
l298:
	push 1
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l310
	push 1
	popax
	sub 0,$a
	ret
l310:
	localint $3
	call $1,rand
	pop $3
l311:
	push $3
	push $2
	cmpje
	cmp0
	je l312
	jmp l314
l313:
	call $1,rand
	pop $3
	jmp l311
l314:
	jmp l313
l312:
	push $3
	ret
	end method
	method bin_to_i
	localstring $1
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	call $1,length
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l315:
	push $4
	push 0
	cmpjae
	cmp0
	je l316
	jmp l318
l317:
	sub $4,1
	pop $4
	jmp l315
l318:
	push $4
	push 1
	call $1,getb
	push "1"
	cmpje
	cmp0
	je l320
	push $2
	popax
	add $3,$a
	pop $3
l320:
	push 2
	popax
	mul $2,$a
	pop $2
	jmp l317
l316:
	push $3
	end method
	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l322
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l324
	spop $a
	push $1
	cthis copy
	jmp l323
l324:
	push "gmobjvec"
	cmpst
	jne l325
	spop $a
	push $1
	cthis copy
	jmp l323
l325:
	push "gmimgvec"
	cmpst
	jne l326
	spop $a
	push $1
	cthis copy
	jmp l323
l326:
	spop $a
	cthis free
	push $1
	cthis add
l323:
	jmp l321
l322:
	cthis free
	push $1
	cthis add
l321:
	end method
	method save
	localstring $1
	pop $1
	push $1
	call lsim,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call lsim,load
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method removegr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l327:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l328
	jmp l330
l329:
	add $2,1
	pop $2
	jmp l327
l330:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis remove
	jmp l329
l328:
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l331:
	push $2
	cthis size
	cmpjl
	cmp0
	je l332
	jmp l334
l333:
	add $2,1
	pop $2
	jmp l331
l334:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l333
l332:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l335:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l336
	jmp l338
l337:
	add $2,1
	pop $2
	jmp l335
l338:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l337
l336:
	end method
	method addgroups
	push "addgr"
	cthis withlist
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	end method
	method empty
	cthis size
	push 0
	cmpje
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	end method
	method print
	push ""
	call engine,print
	push "------ type("
	cthis gettype
	pop $b
	popax
	add $a,$b
	push ") "
	pop $b
	popax
	add $a,$b
	cthis getname
	pop $b
	popax
	add $a,$b
	push " ------"
	pop $b
	popax
	add $a,$b
	call engine,print
	call lsim,print
	push "------ end ------"
	call engine,print
	push ""
	call engine,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	end method
	method set
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,set
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method additer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l339:
	push $3
	push 0
	cmpja
	cmp0
	je l340
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	sub $3,1
	pop $3
	jmp l339
l340:
	end method
	method buildarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newarray
	push $2
	push 0
	push $3
	cthis additer
	end method
	method deleteall
	localint $1
	push 0
	pop $1
l341:
	push $1
	cthis size
	cmpjl
	cmp0
	je l342
	jmp l344
l343:
	add $1,1
	pop $1
	jmp l341
l344:
	push $1
	cthis get
	spushs
	spop $d
	delete [$d]
	jmp l343
l342:
	end method
	method deleteallgm
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l345:
	push $2
	cthis size
	cmpjl
	cmp0
	je l346
	jmp l348
l347:
	add $2,1
	pop $2
	jmp l345
l348:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],vardel
	jmp l347
l346:
	end method
	method deleteallgmobj
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l349:
	push $2
	cthis size
	cmpjl
	cmp0
	je l350
	jmp l352
l351:
	add $2,1
	pop $2
	jmp l349
l352:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],deletegmobj
	jmp l351
l350:
	end method
	method lockall
	push "lock"
	cthis eval
	end method
	method unlockall
	push "unlock"
	cthis eval
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l354
	push $1
	call lsim,add
l354:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l355:
	push $2
	push $1
	cmpjne
	cmp0
	je l356
	push $2
	cthis addbegin
	pop $2
	jmp l355
l356:
	end method
	method addlist
	push A
	cthis sepadd
	end method
	method removelist
	push "remove"
	cthis withlist
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l358
	push $1
	cthis addbegin
	jmp l357
l358:
	push $2
	push $3
	cmpjae
	cmp0
	je l360
	push $1
	cthis add
	jmp l359
l360:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l361:
	push $4
	push $2
	cmpja
	cmp0
	je l362
	jmp l364
l363:
	sub $4,1
	pop $4
	jmp l361
l364:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l363
l362:
	push $2
	push $1
	cthis set
l359:
l357:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removefirst
	push 0
	call lsim,removeat
	end method
	method removelast
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l365:
	push $1
	cthis contains
	cmp0
	je l366
	push $1
	cthis remove
	jmp l365
l366:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l367:
	push $2
	cthis size
	cmpjl
	cmp0
	je l368
	jmp l370
l369:
	add $2,1
	pop $2
	jmp l367
l370:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l372
	push $2
	cthis removeat
l372:
	jmp l369
l368:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l373:
	push $2
	push $3
	cmpjle
	cmp0
	je l374
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l373
l374:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l376
	call $1,rand
	cthis get
	jmp l375
l376:
	push "null"
l375:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l378
	localint $3
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l379:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l380
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l382
	push "null"
	ret
l382:
	jmp l379
l380:
	push $3
	cthis get
	ret
l378:
	push "null"
	end method
	method buildfullvars
	push "gmobjvec0"
	cthis each
	end method
	method gmobjvec0
	localdef $1
	pop $1
	cthis buildfullname
	end method
	method buildvars
	push "gmobjvec1"
	cthis each
	end method
	method gmobjvec1
	localdef $1
	pop $1
	cthis getname
	cthis addtogamevars
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l384
l385:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l386
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l385
l386:
l384:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method isplaying
	localint $1
	push 0
	pop $1
l387:
	push $1
	cthis size
	cmpjl
	cmp0
	je l388
	jmp l390
l389:
	add $1,1
	pop $1
	jmp l387
l390:
	push $1
	cthis get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],isplaying
	cmp0
	je l392
	push 1
	ret
l392:
	jmp l389
l388:
	push 0
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l393:
	push $5
	push 0
	cmpjae
	cmp0
	je l394
	jmp l396
l395:
	sub $5,1
	pop $5
	jmp l393
l396:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l398
	push $5
	call lsim,get
	ret
l398:
	jmp l395
l394:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l399:
	push $5
	push 0
	cmpjae
	cmp0
	je l400
	jmp l402
l401:
	sub $5,1
	pop $5
	jmp l399
l402:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l404
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l404:
	jmp l401
l400:
	push 0
	ret
	end method
	method setframe
	localdef $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l405:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l406
	jmp l408
l407:
	add $2,1
	pop $2
	jmp l405
l408:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l407
l406:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l409:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l410
	jmp l412
l411:
	add $3,1
	pop $3
	jmp l409
l412:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l411
l410:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l413:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l414
	jmp l416
l415:
	add $4,1
	pop $4
	jmp l413
l416:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l415
l414:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l417:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l418
	jmp l420
l419:
	add $5,1
	pop $5
	jmp l417
l420:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l419
l418:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l421:
	push $3
	cthis size
	cmpjl
	cmp0
	je l422
	jmp l424
l423:
	add $3,1
	pop $3
	jmp l421
l424:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l426
	push $3
	ret
l426:
	jmp l423
l422:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l427:
	push $3
	cthis size
	cmpjl
	cmp0
	je l428
	jmp l430
l429:
	add $3,1
	pop $3
	jmp l427
l430:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l432
	push $3
	ret
l432:
	jmp l429
l428:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l433:
	push $2
	cthis size
	cmpjl
	cmp0
	je l434
	jmp l436
l435:
	add $2,1
	pop $2
	jmp l433
l436:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l435
l434:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l437:
	push $3
	cthis size
	cmpjl
	cmp0
	je l438
	jmp l440
l439:
	add $3,1
	pop $3
	jmp l437
l440:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l439
l438:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l441:
	push $4
	cthis size
	cmpjl
	cmp0
	je l442
	jmp l444
l443:
	add $4,1
	pop $4
	jmp l441
l444:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l443
l442:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l445:
	push $2
	cthis size
	cmpjl
	cmp0
	je l446
	jmp l448
l447:
	add $2,1
	pop $2
	jmp l445
l448:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l450
	push 0
	ret
l450:
	jmp l447
l446:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l452
	ret
l452:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l453:
	push $6
	cthis size
	cmpjl
	cmp0
	je l454
	jmp l456
l455:
	add $6,1
	pop $6
	jmp l453
l456:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l458
	push $6
	pop $3
	push $5
	pop $4
l458:
	jmp l455
l454:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l460
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l461
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l463
l461:
	push 0
	jmp l463
l462:
	push 1
l463:
	jmp l464
l459:
	push 0
	jmp l464
l460:
	push 1
l464:
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	new string,sanload
	push "null"
	pop sanload
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	end method
	method getposy
	push _iy
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	end method
	method getpy
	push _iy
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getz
	push _iz
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l466
	push _ix
	ret
l466:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l467:
	push $4
	push $1
	cmpjl
	cmp0
	je l468
	jmp l470
l469:
	add $4,1
	pop $4
	jmp l467
l470:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l472
	push $3
	pop $2
l472:
	jmp l469
l468:
	push $2
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l474
	push _iy
	ret
l474:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l475:
	push $4
	push $1
	cmpjl
	cmp0
	je l476
	jmp l478
l477:
	add $4,1
	pop $4
	jmp l475
l478:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l480
	push $3
	pop $2
l480:
	jmp l477
l476:
	push $2
	end method
	method _getpx
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l482
	push _ix
	ret
l482:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l483:
	push $4
	push $1
	cmpjl
	cmp0
	je l484
	jmp l486
l485:
	add $4,1
	pop $4
	jmp l483
l486:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l488
	push $3
	pop $2
l488:
	jmp l485
l484:
	push $2
	end method
	method _getpy
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l490
	push _iy
	ret
l490:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l491:
	push $4
	push $1
	cmpjl
	cmp0
	je l492
	jmp l494
l493:
	add $4,1
	pop $4
	jmp l491
l494:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l496
	push $3
	pop $2
l496:
	jmp l493
l492:
	push $2
	end method
	method _getw
	cthis getex
	cthis _getpx
	pop $b
	popax
	sub $a,$b
	end method
	method _geth
	cthis getey
	cthis _getpy
	pop $b
	popax
	sub $a,$b
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l498
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l498:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l499:
	push $3
	cthis size
	cmpjl
	cmp0
	je l500
	jmp l502
l501:
	add $3,1
	pop $3
	jmp l499
l502:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l501
l500:
	end method
	method nplay
	localint $1
	pop $1
	push "play"
	push $1
	cthis eval1
	end method
	method txtreset
	localint $1
	push 0
	pop $1
l503:
	push $1
	cthis size
	cmpjl
	cmp0
	je l504
	jmp l506
l505:
	add $1,1
	pop $1
	jmp l503
l506:
	push $1
	cthis get
	spushs
	push ""
	spop $a
	call [$a],txtset
	jmp l505
l504:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l507:
	push $5
	push 0
	cmpjae
	cmp0
	je l508
	jmp l510
l509:
	sub $5,1
	pop $5
	jmp l507
l510:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l512
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l512:
	jmp l509
l508:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method isinfunc
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l513:
	push $4
	push 0
	cmpjae
	cmp0
	je l514
	jmp l516
l515:
	sub $4,1
	pop $4
	jmp l513
l516:
	push $4
	call lsim,get
	spushs
	push $3
	spushs
	push $1
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l518
	push $4
	pop _ifound
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	ret
l518:
	jmp l515
l514:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method isincut
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l519:
	push $5
	push 0
	cmpjae
	cmp0
	je l520
	jmp l522
l521:
	sub $5,1
	pop $5
	jmp l519
l522:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],withincut
	cmp0
	je l524
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l526
l524:
	push 0
	jmp l526
l525:
	push 1
l526:
	cmp0
	je l527
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l527:
	jmp l521
l520:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method withincut
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push $1
	push "gmimgvec0"
	cthis ineach
	pop $1
	pop $2
	end method
	method gmimgvec0
	localdef $1
	pop $1
	localint $2
	pop $2
	localint $3
	pop $3
	push $2
	push $3
	cthis withincut
	push $3
	push $2
	end method
	method findif
	localstring $1
	pop $1
	push $1
	push 1
	cthis _find
	end method
	method getfound
	push _ifound
	end method
	method getsfound
	push _ifound
	cthis get
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findsfr
	localstring $1
	pop $1
	push "framename"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "anactnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec1"
	cthis find_closest
	end method
	method gmimgvec1
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method getsac
	localstring $1
	pop $1
	push $1
	cthis findsac
	cthis get
	end method
	method getsacfr
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l528:
	push $3
	cthis size
	cmpjl
	cmp0
	je l529
	jmp l531
l530:
	add $3,1
	pop $3
	jmp l528
l531:
	push $3
	cthis get
	spushs
	spop $a
	call [$a],actionname
	push $1
	cmpje
	cmp0
	je l533
	push $3
	cthis get
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpje
	jmp l535
l533:
	push 0
	jmp l535
l534:
	push 1
l535:
	cmp0
	je l536
	push $3
	cthis get
	ret
l536:
	jmp l530
l529:
	push "null"
	end method
	method blitto
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l537:
	push $2
	cthis size
	cmpjl
	cmp0
	je l538
	jmp l540
l539:
	add $2,1
	pop $2
	jmp l537
l540:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],blit
	jmp l539
l538:
	end method
	method sortz
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l541:
	push $2
	cthis size
	cmpjl
	cmp0
	je l542
	jmp l544
l543:
	add $2,1
	pop $2
	jmp l541
l544:
	push $2
	cthis get
	spushs
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	jmp l543
l542:
	end method
	method ancopies
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l545:
	push $3
	push $2
	cmpjl
	cmp0
	je l546
	jmp l548
l547:
	add $3,1
	pop $3
	jmp l545
l548:
	push GAME
	spushs
	push $1
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],copyanima
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l547
l546:
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method addsrcanima
	localstring $1
	pop $1
	push "srcanima"
	push $1
	cthis var2
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l550
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l552
	new vector,_vtmp
	push "string"
	call _vtmp,type
	push $1
	push "/"
	call _vtmp,vecbuildfromstring
	push "an"
	call _vtmp,last
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	delete _vtmp
	jmp l551
l552:
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
l551:
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l549
l550:
	push $1
	pop $3
l549:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l554
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l553
l554:
	push $1
	pop $3
l553:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method deleteloaded
	cthis deleteallgm
	push sanload
	push "null"
	cmpjne
	cmp0
	je l556
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l556:
	end method
	method deleteinit
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l557:
	push $2
	cthis size
	cmpjl
	cmp0
	je l558
	jmp l560
l559:
	add $2,1
	pop $2
	jmp l557
l560:
	localdef $3
	push $2
	cthis get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],gettype
	push "gmimgvec"
	cmpje
	cmp0
	je l562
	push $3
	spushs
	spop $a
	call [$a],deleteinit
l562:
	push $1
	spushs
	push $3
	spop $a
	call [$a],vardel
	jmp l559
l558:
	push sanload
	push "null"
	cmpjne
	cmp0
	je l564
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l564:
	end method
	end class

	class gmadvvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l565:
	push $5
	push 0
	cmpjae
	cmp0
	je l566
	jmp l568
l567:
	sub $5,1
	pop $5
	jmp l565
l568:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],butisin
	cmp0
	je l570
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l570:
	jmp l567
l566:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	end class

	class gmmaskvec
	parent gmadvvec
	method init
	clparent gmadvvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,butisin
	end method
	end class

	class Button
	parent ObjController
	method init
	clparent ObjController,init
	new gmimgvec,grbuts
	push A
	push "sobject"
	push "null"
	push "sclicked"
	push "null"
	push "bcheck2klik"
	push 0
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	end method
	method print
	call grbuts,print
	end method
	method sort
	call grbuts,sortimgs
	end method
	method addgroups
	call grbuts,addgroups
	call grbuts,sortimgs
	end method
	method addgroup
	localstring $1
	pop $1
	push $1
	call grbuts,addgr
	call grbuts,sortimgs
	end method
	method addlist
	call grbuts,addlist
	call grbuts,sortimgs
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grbuts,add
	call grbuts,sortimgs
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call grbuts,addonce
	call grbuts,sortimgs
	end method
	method addbut
	localstring $1
	pop $1
	push $1
	call grbuts,addonce
	call grbuts,sortimgs
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call grbuts,contains
	end method
	method removebutlist
	push "removebut"
	cthis withlist
	end method
	method removebut
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	localint $2
	push sobject
	push "null"
	cmpjne
	cmp0
	jne l572
	push sclicked
	push "null"
	cmpjne
	jmp l573
l571:
	push 0
	jmp l573
l572:
	push 1
l573:
	pop $2
	push $1
	push sobject
	cmpje
	cmp0
	je l575
	push "null"
	pop sobject
l575:
	push $1
	push sclicked
	cmpje
	cmp0
	je l577
	push "null"
	pop sclicked
l577:
	push $2
	cmp0
	je l579
	cthis onmousemove
l579:
	end method
	method load
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push "gmimgvec"
	push $1
	spop $a
	call [$a],varnew
	push $1
	push $2
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],each
	push $1
	cthis addgroup
	end method
	method remove
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	cmp0
	je l581
	push $1
	call grbuts,removegr
l581:
	end method
	method loadfrom
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	cthis getgraphpath
	pop $5
	push $2
	cthis setgraphpath
	push $1
	push $3
	push $4
	cthis load
	push $5
	cthis setgraphpath
	end method
	method onmouselclick
	cthis checktouchpad
	cmp0
	je l583
	push bcheck2klik
	jmp l585
l583:
	push 0
	jmp l585
l584:
	push 1
l585:
	cmp0
	je l586
	push ipadclick
	cmp0
	je l588
	localdef $1
	push sobject
	pop $1
	push $1
	push sobject
	cmpje
	cmp0
	je l590
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l589
l590:
	push sobject
	push "null"
	cmpje
	cmp0
	je l592
	push 0
	pop ipadclick
l592:
l589:
	jmp l587
l588:
	push 1
	pop ipadclick
l587:
	jmp l582
l586:
	cthis _butmouselclick
l582:
	end method
	method _butmouselclick
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	push "null"
	cmpjne
	cmp0
	je l594
	push sobject
	pop sclicked
	push sobject
	spushs
	push "butclick"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l596
	push sobject
	spushs
	spop $a
	call [$a],butclick
l596:
l594:
	end method
	method onmouselrel
	cthis checktouchpad
	cmp0
	je l598
	cthis lastoff
l598:
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l600
	push sclicked
	spushs
	push "butlrel"
	spop $a
	call [$a],hasaddedmet
	jmp l602
l600:
	push 0
	jmp l602
l601:
	push 1
l602:
	cmp0
	je l603
	push sclicked
	spushs
	spop $a
	call [$a],butlrel
	jmp l599
l603:
	push "null"
	pop sclicked
l599:
	end method
	method onmousemove
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l605
	push sclicked
	spushs
	push "butmoving"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l607
	push sclicked
	spushs
	spop $a
	call [$a],butmoving
l607:
l605:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push "isbutin"
	call grbuts,isinfunc
	cmp0
	je l609
	localdef $3
	call grbuts,getsfound
	pop $3
	push $3
	push sobject
	cmpjne
	cmp0
	je l611
	cthis lastoff
	push $3
	pop sobject
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $3
	spushs
	push "butmoveon"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l613
	push $3
	spushs
	spop $a
	call [$a],butmoveon
l613:
l611:
	jmp l608
l609:
	cthis lastoff
l608:
	end method
	method lastoff
	push sobject
	push "null"
	cmpjne
	cmp0
	je l615
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	spushs
	push "butmoveoff"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l617
	push sobject
	spushs
	spop $a
	call [$a],butmoveoff
l617:
	push "null"
	pop sobject
l615:
	end method
	end class

	new snd,sndfxmoveonms
	push "sounds/sfx/butmoveon2.ogg"
	call sndfxmoveonms,load
	push 50
	call sndfxmoveonms,setvol
	method Button_isin
	push "isbutin"
	push "global4"
	cthis addmethod
	end method
	method global4
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 0
	cthis isin
	end method
	method Button_isinvis
	push "isbutin"
	push "global5"
	cthis addmethod
	end method
	method global5
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method Button_isinalpha
	push "isbutin"
	push "global6"
	cthis addmethod
	end method
	method global6
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	end method
	method Button_isinvisalpha
	push "isbutin"
	push "global7"
	cthis addmethod
	end method
	method global7
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 1
	cthis isin
	end method
	method Button_moveon
	push "butmoveon"
	push "global8"
	cthis addmethod
	end method
	method global8
	call sndakskermovon,playif
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l619
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l619:
	end method
	method Button_moveonplay
	push "butmoveon"
	push "global9"
	cthis addmethod
	end method
	method global9
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l621
	push 1
	popax
	sub 0,$a
	cthis play
l621:
	end method
	method Button_moveoff
	push "butmoveoff"
	push "global10"
	cthis addmethod
	end method
	method global10
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method Button_moveonms
	push "butmoveon"
	push "global11"
	cthis addmethod
	end method
	method global11
	call advmouse,setbut
	end method
	method Button_moveonfxms
	push "butmoveon"
	push "global12"
	cthis addmethod
	end method
	method global12
	call advmouse,setbut
	call sndfxmoveonms,playif
	end method
	method Button_moveoffms
	push "butmoveoff"
	push "global13"
	cthis addmethod
	end method
	method global13
	call advmouse,setstd
	end method
	method Button_std
	cthis Button_isin
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdalpha
	cthis Button_isinalpha
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdms
	cthis Button_isinalpha
	cthis Button_moveonms
	cthis Button_moveoffms
	end method
	class gfxObject
	method init
	localstring $1
	pop $1
	new string,sgfxobj
	push $1
	pop sgfxobj
	end method
	method setpos
	push sgfxobj
	spushs
	spop $a
	call [$a],setpos
	end method
	method move
	push sgfxobj
	spushs
	spop $a
	call [$a],move
	end method
	method getpos
	push sgfxobj
	spushs
	spop $a
	call [$a],getpos
	end method
	method getposx
	push sgfxobj
	spushs
	spop $a
	call [$a],getposx
	end method
	method getposy
	push sgfxobj
	spushs
	spop $a
	call [$a],getposy
	end method
	method getpx
	push sgfxobj
	spushs
	spop $a
	call [$a],getpx
	end method
	method getpy
	push sgfxobj
	spushs
	spop $a
	call [$a],getpy
	end method
	method getw
	push sgfxobj
	spushs
	spop $a
	call [$a],getw
	end method
	method geth
	push sgfxobj
	spushs
	spop $a
	call [$a],geth
	end method
	method getcx
	push sgfxobj
	spushs
	spop $a
	call [$a],getcx
	end method
	method getcy
	push sgfxobj
	spushs
	spop $a
	call [$a],getcy
	end method
	method getex
	push sgfxobj
	spushs
	spop $a
	call [$a],getex
	end method
	method getey
	push sgfxobj
	spushs
	spop $a
	call [$a],getey
	end method
	method lodx
	push sgfxobj
	spushs
	spop $a
	call [$a],lodx
	end method
	method lody
	push sgfxobj
	spushs
	spop $a
	call [$a],lody
	end method
	method setz
	push sgfxobj
	spushs
	spop $a
	call [$a],setz
	end method
	method getz
	push sgfxobj
	spushs
	spop $a
	call [$a],getz
	end method
	method show
	push sgfxobj
	spushs
	spop $a
	call [$a],show
	end method
	method hide
	push sgfxobj
	spushs
	spop $a
	call [$a],hide
	end method
	method isvisible
	push sgfxobj
	spushs
	spop $a
	call [$a],isvisible
	end method
	method isin
	push sgfxobj
	spushs
	spop $a
	call [$a],isin
	end method
	end class

	method allchars
	push "a0 t_!@#$%^&*()_+-=[]\\|}{;':\",./<>?`~"
	end method
	class TextTyper
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new int,iR
	push $2
	pop iR
	new int,iG
	push $3
	pop iG
	new int,iB
	push $4
	pop iB
	new string,sChars
	push $5
	pop sChars
	new int,iLimit
	push $6
	pop iLimit
	push A
	push "Sdir"
	push "left"
	push "W"
	push 0
	push "iFontSize"
	push $1
	spushs
	spop $a
	call [$a],getsize
	push "X"
	push 0
	push "Y"
	push 0
	cthis vars2
	new text,txt1
	push $1
	call txt1,setfont
	push ""
	call txt1,set
	new text,txt2
	push $1
	call txt2,setfont
	push "_"
	call txt2,set
	push iR
	push iG
	push iB
	call txt2,createtxt
	call txt2,hide
	new text,txtpass
	push $1
	call txtpass,setfont
	call txtpass,hide
	new int,bpass
	push 0
	pop bpass
	new string,_sob
	push "null"
	pop _sob
	new string,_sfun
	push "null"
	pop _sfun
	new timer,timcyk
	push 300
	call timcyk,setdelay
	push "onfinish"
	push "fintimcyk"
	call timcyk,addmethod
	push "txt1"
	clparent gfxObject,init
	end method
	method setaspasswd
	push 1
	pop bpass
	call txt1,hide
	call txt1,getz
	call txtpass,setz
	call txtpass,show
	cthis copytopass
	end method
	method copytopass
	localdef $1
	call txt1,get
	spushs
	spop $h
	call $h,length
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l622:
	push $3
	push $1
	cmpjl
	cmp0
	je l623
	jmp l625
l624:
	add $3,1
	pop $3
	jmp l622
l625:
	push "*"
	popax
	add $2,$a
	pop $2
	jmp l624
l623:
	push $2
	call txtpass,txtset
	call txt1,getpx
	call txt1,getpy
	call txtpass,setpos
	end method
	method setastext
	push 0
	pop bpass
	call txt1,show
	call txtpass,hide
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,isin
	end method
	method getcol
	push iR
	push iG
	push iB
	ret
	end method
	method fintimcyk
	cthis getlock
	cmp0
	je l627
	ret
l627:
	cthis updatecyk
	cthis play
	end method
	method updatecyk
	call txt2,isvisible
	cmp0
	je l629
	call txt2,hide
	jmp l628
l629:
	call txt1,getex
	call txt1,getpy
	call txt2,setpos
	call txt2,show
l628:
	end method
	method enable
	cthis unlock
	cthis updatecyk
	call timcyk,play
	end method
	method disable
	call txt2,hide
	push 0
	call timcyk,stop
	cthis lock
	end method
	method onenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob
	push $2
	pop _sfun
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop X
	push $2
	pop Y
	cthis get
	cthis updatetxt
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push X
	push $1
	pop $b
	popax
	add $a,$b
	push Y
	push $2
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method setz
	localint $1
	pop $1
	push $1
	call txt1,setz
	push $1
	call txt2,setz
	end method
	method get
	localstring $1
	call txt1,get
	pop $1
	call $1,length
	push 0
	cmpja
	cmp0
	je l631
	push $1
	jmp l630
l631:
	push ""
l630:
	end method
	method getpx
	call txt1,getpx
	end method
	method getpy
	call txt1,getpy
	end method
	method getcx
	call txt1,getcx
	end method
	method getcy
	call txt1,getcy
	end method
	method geth
	call txt1,geth
	end method
	method getey
	call txt1,getpy
	push iFontSize
	pop $b
	popax
	add $a,$b
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,clip
	push $1
	push $2
	push $3
	push $4
	call txt2,clip
	end method
	method length
	call txt1,get
	spushs
	spop $h
	call $h,length
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt1,set
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis getcol
	call txt1,txtsetcol
	end method
	method limit=
	localint $1
	pop $1
	push $1
	pop iLimit
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l633
	ret
l633:
	cthis getname
	push "_ontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis getlock
	cmp0
	je l635
	ret
l635:
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l637
	cthis disable
	push _sob
	push _sfun
	cthis callfun
	cthis getname
	push "_onenter"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	ret
l637:
	localstring $1
	push "t"
	call sChars,contains
	cmp0
	je l639
	push "tab"
	call keyboard,iskey
	jmp l641
l639:
	push 0
	jmp l641
l640:
	push 1
l641:
	cmp0
	je l642
	push " "
	pop $1
	jmp l638
l642:
	call keyboard,getkey
	pop $1
l638:
	localstring $2
	call txt1,get
	pop $2
	call keyboard,isalpha
	cmp0
	je l644
	push "a"
	call sChars,contains
	jmp l646
l644:
	push 0
	jmp l646
l645:
	push 1
l646:
	cmp0
	jne l648
	call keyboard,isdigit
	cmp0
	je l649
	push "0"
	call sChars,contains
	jmp l651
l649:
	push 0
	jmp l651
l650:
	push 1
l651:
	cmp0
	jne l648
	push $1
	call sChars,contains
	jmp l652
l647:
	push 0
	jmp l652
l648:
	push 1
l652:
	cmp0
	je l653
	push iLimit
	push 0
	cmpjle
	cmp0
	jne l656
	push iLimit
	call $2,length
	cmpja
	jmp l657
l655:
	push 0
	jmp l657
l656:
	push 1
l657:
	jmp l658
l653:
	push 0
	jmp l658
l654:
	push 1
l658:
	cmp0
	je l659
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	cthis updatetxt
	cthis updatecyk
	jmp l643
l659:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l661
	call $2,length
	push 0
	cmpja
	jmp l663
l661:
	push 0
	jmp l663
l662:
	push 1
l663:
	cmp0
	je l664
	push 1
	call $2,strsube
	cthis updatetxt
	cthis updatecyk
l664:
l643:
	cthis getname
	push "_ontyped"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method updatetxt
	localstring $1
	pop $1
	push $1
	call txt1,set
	push iR
	push iG
	push iB
	call txt1,createtxt
	push Sdir
	push "center"
	cmpje
	cmp0
	je l666
	push X
	push W
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push Y
	call txt1,setpos
	jmp l665
l666:
	push Sdir
	push "right"
	cmpje
	cmp0
	je l668
	push X
	push W
	pop $b
	popax
	add $a,$b
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push Y
	call txt1,setpos
	jmp l667
l668:
	push X
	push Y
	call txt1,setpos
l667:
l665:
	push bpass
	cmp0
	je l670
	cthis copytopass
l670:
	cthis getname
	push "_onwrite"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class TextDb
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localstring $10
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new string,sFont
	push $1
	pop sFont
	new string,sFontBold
	push "null"
	pop sFontBold
	new string,sFontItalic
	push "null"
	pop sFontItalic
	new string,sFontBoldItalic
	push "null"
	pop sFontBoldItalic
	new int,bhtml
	push 0
	pop bhtml
	localstring $11
	localint $12
	localint $13
	new int,iFontSize
	push $1
	spushs
	spop $a
	call [$a],getsize
	pop iFontSize
	localint $14
	push iFontSize
	pop $14
	push "Z"
	push $9
	cthis var2
	localstring $15
	push "null"
	pop $15
	push ":"
	call $2,contains
	cmp0
	je l672
	push ":"
	call $2,strgetto
	push ":"
	pop $b
	popax
	add $a,$b
	pop $15
l672:
	push "."
	call $2,contains
	cmp0
	je l674
	push $15
	push "$path:"
	cmpje
	cmp0
	je l676
	new db,dbtxt
	push $15
	call $2,strsubbs
	call dbtxt,load
	jmp l675
l676:
	push "dbtxt"
	push $2
	cthis newdb
l675:
	jmp l673
l674:
	push $15
	spushs
	push "$lang:"
	cmpst
	jne l678
	spop $a
	push "dbtxt"
	push $15
	call $2,strsubbs
	cthis lang_db
	jmp l677
l678:
	push "$var:"
	cmpst
	jne l679
	spop $a
	new db,dbtxt
	push $15
	call $2,strsubbs
	call dbtxt,dbcopy
	jmp l677
l679:
	push "$row:"
	cmpst
	jne l680
	spop $a
	new db,dbtxt
	push $15
	call $2,strsubbs
	spushs
	push ","
	spop $h
	call $h,strgetto
	pop $11
	push ","
	call $2,strgetfrom
	pop $12
	push 0
	pop $13
l681:
	push $13
	push $11
	spushs
	push $12
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l682
	jmp l684
l683:
	add $13,1
	pop $13
	jmp l681
l684:
	call dbtxt,addrow
	popax
	push $13
	push $11
	spushs
	push $12
	push $13
	spop $a
	call [$a],get
	call dbtxt,add
	jmp l683
l682:
	jmp l677
l680:
	spop $a
	new db,dbtxt
	push $2
	call dbtxt,dbaddlast
l677:
l673:
	localint $16
	push 0
	pop $16
	localint $17
	call dbtxt,getrowsno
	pop $17
	push 0
	push 5
	call $10,getb
	push "limit"
	cmpje
	cmp0
	je l686
	localint $18
	push "limit_"
	call $10,strsubbs
	pop $18
	new vector,vtmp
	push "string"
	call vtmp,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	localint $13
	push 0
	pop $13
l687:
	push $13
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l688
	jmp l690
l689:
	add $13,1
	pop $13
	jmp l687
l690:
	push $13
	push 0
	call dbtxt,get
	push " "
	call vtmp,vecbuildfromstring
	localint $19
	push 0
	pop $19
l691:
	push $19
	call vtmp,size
	cmpjl
	cmp0
	je l692
	jmp l694
l693:
	add $19,1
	pop $19
	jmp l691
l694:
	push $19
	call vtmp,get
	call vtmp2,add
	jmp l693
l692:
	jmp l689
l688:
	call dbtxt,free
	localstring $11
	push ""
	pop $11
	localstring $20
	push 0
	pop $13
l695:
	push $13
	call vtmp2,size
	cmpjl
	cmp0
	je l696
	jmp l698
l697:
	add $13,1
	pop $13
	jmp l695
l698:
	push $13
	call vtmp2,get
	pop $20
	push $11
	push $20
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,length
	push $18
	cmpjl
	cmp0
	je l700
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $11,$a
	pop $11
	jmp l699
l700:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $11
	call dbtxt,add
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	pop $11
l699:
	jmp l697
l696:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $11
	call dbtxt,add
	call dbtxt,getrowsno
	pop $17
l686:
	new gmimgvec,grtxt
	push $6
	push $7
	call grtxt,_setpos
	push 0
	pop $13
l701:
	push $13
	push $17
	cmpjl
	cmp0
	je l702
	jmp l704
l703:
	add $13,1
	pop $13
	jmp l701
l704:
	push "txt"
	push $13
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	spushs
	spop $e
	new text,[$e]
	push $13
	call dbtxt,getcolsno
	push 0
	cmpja
	cmp0
	je l706
	localdef $21
	push $13
	push 0
	call dbtxt,get
	pop $21
	push bhtml
	cmp0
	je l708
	push "<b>"
	call $21,contains
	cmp0
	je l710
	push sFontBold
	pop $1
	push "<b>"
	call $21,strremove
	jmp l709
l710:
	push "<bi>"
	call $21,contains
	cmp0
	je l712
	push sFontBoldItalic
	pop $1
	push "<bi>"
	call $21,strremove
	jmp l711
l712:
	push "<i>"
	call $21,contains
	cmp0
	je l714
	push sFontItalic
	pop $1
	push "<i>"
	call $21,strremove
	jmp l713
l714:
	push sFont
	pop $1
l713:
l711:
l709:
l708:
	push $11
	spushs
	push $1
	spop $a
	call [$a],setfont
	push $11
	spushs
	push $21
	spop $a
	call [$a],set
	push $11
	spushs
	push $6
	push $7
	spop $a
	call [$a],setpos
	push $14
	push $8
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	push $11
	spushs
	push $9
	spop $a
	call [$a],setz
	push $11
	spushs
	push $3
	push $4
	push $5
	spop $a
	call [$a],createtxt
	push $11
	spushs
	spop $a
	call [$a],getw
	push $16
	cmpja
	cmp0
	je l716
	push $11
	spushs
	spop $a
	call [$a],getw
	pop $16
l716:
l706:
	push $11
	call grtxt,add
	jmp l703
l702:
	push "Rows"
	push $17
	cthis var2
	push $10
	push "right"
	cmpje
	cmp0
	jne l719
	push $10
	push "center"
	cmpje
	jmp l720
l718:
	push 0
	jmp l720
l719:
	push 1
l720:
	cmp0
	je l721
	push 0
	pop $13
l722:
	push $13
	push $17
	cmpjl
	cmp0
	je l723
	jmp l725
l724:
	add $13,1
	pop $13
	jmp l722
l725:
	push "txt"
	push $13
	pop $b
	popax
	add $a,$b
	pop $11
	push $10
	push "center"
	cmpje
	cmp0
	je l727
	push $11
	spushs
	push $16
	push $11
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	spop $a
	call [$a],move
	jmp l726
l727:
	push $11
	spushs
	push $16
	push $11
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l726:
	jmp l724
l723:
l721:
	push "W"
	push $16
	cthis var2
	push "grtxt"
	clparent gfxObject,init
	end method
	method stdshadow
	localint $1
	pop $1
	push 0
	push 0
	push 0
	push $1
	cthis setshadow
	end method
	method setshadow
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	push sFont
	push iFontSize
	push "_fntbrd"
	cthis _checkfont
	pop $7
	localint $8
	push 0
	pop $8
l728:
	push $8
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l729
	jmp l731
l730:
	add $8,1
	pop $8
	jmp l728
l731:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "txts"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new text,[$e]
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],set
	push $6
	spushs
	push $7
	spop $a
	call [$a],setfont
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $4
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	push $6
	call grtxt,add
	jmp l730
l729:
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtxt,setz
	end method
	method getz
	push Z
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call grtxt,isin
	end method
	method view
	localdef $1
	pop $1
	localstring $2
l732:
	push A
	push $1
	cmpjne
	cmp0
	je l733
	push $1
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push "txts"
	push "txt"
	call $2,strsubbs
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l735
	push $2
	spushs
	spop $a
	call [$a],show
l735:
	localdef $1
	pop $1
	jmp l732
l733:
	end method
	method blitto
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l736:
	push $3
	call grtxt,size
	cmpjl
	cmp0
	je l737
	jmp l739
l738:
	add $3,1
	pop $3
	jmp l736
l739:
	push $3
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],buildfullname
	push $1
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],blit
	push GAME
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardel
	jmp l738
l737:
	end method
	method setcol
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l740:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l741
	jmp l743
l742:
	add $4,1
	pop $4
	jmp l740
l743:
	push $4
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	jmp l742
l741:
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l744:
	push $5
	call grtxt,size
	cmpjl
	cmp0
	je l745
	jmp l747
l746:
	add $5,1
	pop $5
	jmp l744
l747:
	push $5
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l746
l745:
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	call grtxt,getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	localdef $4
	push $2
	call grtxt,getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	call grtxt,move
	end method
	end class

	method inv_imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push "_img_bor"
	cthis blit
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push "_img_bor"
	cthis blit
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push "_img_bor"
	cthis blit
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push "_img_bor"
	cthis blit
	delete _img_bor
	end method
	method white
	push 255
	push 255
	push 255
	ret
	end method
	method black
	push 0
	push 0
	push 0
	ret
	end method
	method grey
	localint $1
	pop $1
	push $1
	push $1
	push $1
	ret
	end method
	method blue
	push 0
	push 0
	push 255
	ret
	end method
	method red
	push 255
	push 0
	push 0
	ret
	end method
	method green
	push 0
	push 255
	push 0
	ret
	end method
	method transparent
	push 0
	push 0
	push 0
	push 0
	ret
	end method
	method inv_dbaddrow
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	end method
	method inv_dbaddrowbegin
	localstring $1
	pop $1
	cthis addbeginrow
	popax
	push 0
	push $1
	cthis add
	end method
	method inv_dbaddrows
	localdef $1
	pop $1
l748:
	push $1
	push A
	cmpjne
	cmp0
	je l749
	push $1
	cthis inv_dbaddrowbegin
	localdef $1
	pop $1
	jmp l748
l749:
	end method
	push "Main"
	call gameapi,play
	game Main
	method init
	new db,dbgra
	push "scripts/config.db"
	call dbgra,loadscript
	call dbgra,getrowsno
	push 0
	cmpja
	cmp0
	je l751
	push 0
	call dbgra,getcolsno
	push 1
	cmpja
	jmp l753
l751:
	push 0
	jmp l753
l752:
	push 1
l753:
	cmp0
	je l754
	push 0
	push 1
	call dbgra,get
	call gameapi,play
	jmp l750
l754:
	push "Invest"
	call gameapi,play
l750:
	end method
	end game

	game Invest
	method init
	push 3
	call engine,setdebugstate
	new string,spath
	push "input_invest/"
	pop spath
	new string,soutpath
	push "output_invest/"
	pop soutpath
	new font,fnt
	push "configs/fonts/normal.ttf"
	push 10
	call fnt,load
	new text,txt1
	push "fnt"
	call txt1,setfont
	new db,dbconf
	push spath
	push "invest.cfg"
	pop $b
	popax
	add $a,$b
	call dbconf,load
	new db,dbdane
	localstring $1
	push "null"
	pop $1
	new db,dbp
	new img,img1
	new img,imbg
	push 1
	call imbg,setz
	new img,imchart
	new int,depth
	new int,wswieca
	push 5
	pop wswieca
	new int,chartw
	push 50
	pop chartw
	new int,charth
	push 50
	pop charth
	new int,dx
	push 2
	pop dx
	new int,dotylu
	new int,doprzodu
	new int,isize
	new real,hchart
	push 200
	pop hchart
	localreal $2
	localreal $3
	localreal $4
	localreal $5
	localreal $6
	localreal $7
	localreal $8
	localreal $9
	localint $10
	localint $11
	localint $12
	localstring $13
	localstring $14
	localreal $15
	localreal $16
	new int,idpom
	new int,ilecen
	push 5
	pop ilecen
	localint $17
	localreal $18
	localint $19
	push 25
	pop $19
	localint $20
	push 10
	pop $20
	new db,dbhtm
	push A
	push "<html>"
	push "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
	push "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"pl\" lang=\"pl\">"
	push "<head>"
	push "<meta http-equiv=\"Content-Language\" content=\"pl\" />"
	push "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-2\" />"
	push "<meta name=\"Author\" content=\"Dominik Dagiel\" />"
	push "<title>Dominik Dagiel: Analiza wykresow</title>"
	push "</head>"
	push "<body>"
	push "<h3> Analiza wykresow dla sesji "
	call dbhtm,inv_dbaddrows
	localint $21
	push 1
	pop $21
	push 1
	popax
	sub 0,$a
	pop $17
	localint $22
	push 0
	pop $22
l755:
	push $22
	call dbconf,getrowsno
	cmpjl
	cmp0
	je l756
	jmp l758
l757:
	add $22,1
	pop $22
	jmp l755
l758:
	push $22
	push 2
	call dbconf,get
	push $1
	cmpjne
	cmp0
	je l760
	push $22
	push 2
	call dbconf,get
	pop $1
	push spath
	push $1
	pop $b
	popax
	add $a,$b
	call dbdane,loadscript
	call dbdane,getrowsno
	pop isize
	push $21
	cmp0
	je l762
	push 0
	pop $21
	push isize
	push 1
	pop $b
	popax
	sub $a,$b
	push 0
	call dbdane,get
	push "</h3>"
	pop $b
	popax
	add $a,$b
	call dbhtm,inv_dbaddrow
l762:
	push "<br /><h4>"
	push $1
	pop $b
	popax
	add $a,$b
	push "</h4><br />"
	pop $b
	popax
	add $a,$b
	call dbhtm,inv_dbaddrow
	push 0.0
	pop $18
l760:
	push $22
	push 1
	call dbconf,get
	pop depth
	push depth
	push $19
	cmpjle
	cmp0
	je l764
	push 0
	pop $17
l764:
	push depth
	push 50
	cmpjl
	cmp0
	je l766
	push 5
	pop wswieca
	push 1
	pop dx
	jmp l765
l766:
	push depth
	push 100
	cmpjl
	cmp0
	je l768
	push 3
	pop wswieca
	push 1
	pop dx
	jmp l767
l768:
	push 3
	pop wswieca
	push 0
	pop dx
l767:
l765:
	push spath
	push $22
	push 0
	call dbconf,get
	pop $b
	popax
	add $a,$b
	call dbp,loadscript
	push depth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push depth
	pop $b
	popax
	add $a,$b
	pop dotylu
	push depth
	pop doprzodu
	push "<table>"
	call dbhtm,inv_dbaddrow
	localint $23
	push 0
	pop $23
l769:
	push $23
	call dbp,getrowsno
	cmpjl
	cmp0
	je l770
	jmp l772
l771:
	add $23,1
	pop $23
	jmp l769
l772:
	push dotylu
	push 1
	pop $b
	popax
	add $a,$b
	push doprzodu
	pop $b
	popax
	add $a,$b
	push wswieca
	push dx
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	push hchart
	push 240
	cthis grey
	push 255
	call imchart,create
	call imchart,getw
	push 2
	push chartw
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call imchart,geth
	push 2
	push charth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis white
	push 255
	call imbg,create
	push 1
	cthis black
	push 255
	call imbg,inv_imgborders
	push $23
	push 1
	call dbp,get
	pop idpom
	push wswieca
	call imchart,geth
	push 192
	cthis grey
	push 255
	call img1,create
	push dotylu
	cthis swpos
	push 0
	call img1,setpos
	push "img1"
	call imchart,blit
	push idpom
	push 0
	call dbdane,get
	call txt1,txtset
	push chartw
	call img1,getcx
	pop $b
	popax
	add $a,$b
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push charth
	call txt1,geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
	push wswieca
	call imchart,geth
	push 192
	cthis grey
	push 255
	call img1,create
	push dotylu
	push depth
	pop $b
	popax
	sub $a,$b
	cthis swpos
	push 0
	call img1,setpos
	push "img1"
	call imchart,blit
	push idpom
	push depth
	pop $b
	popax
	sub $a,$b
	push 0
	call dbdane,get
	call txt1,txtset
	push chartw
	call img1,getcx
	pop $b
	popax
	add $a,$b
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push charth
	call txt1,geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
	push wswieca
	push dx
	pop $b
	popax
	add $a,$b
	push depth
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	call imchart,geth
	push 222
	cthis grey
	push 255
	call img1,create
	push dotylu
	push depth
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	cthis swpos
	push 0
	call img1,setpos
	push "img1"
	call imchart,blit
	push 1
	call imchart,geth
	cthis black
	push 32
	call img1,create
	push 0
	pop $10
	localint $24
	push dotylu
	popax
	sub 0,$a
	pop $24
l773:
	push $24
	push doprzodu
	push 1
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l774
	jmp l776
l775:
	push $20
	popax
	add $24,$a
	pop $24
	jmp l773
l776:
	push $24
	push dotylu
	pop $b
	popax
	add $a,$b
	cthis swpos
	push wswieca
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push 0
	call img1,setpos
	push "img1"
	call imchart,blit
	push idpom
	push $24
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	push isize
	cmpjl
	cmp0
	je l778
	push $11
	push 0
	cmpjae
	jmp l780
l778:
	push 0
	jmp l780
l779:
	push 1
l780:
	cmp0
	je l781
	push $10
	push 1
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	pop $10
	push $11
	push 0
	call dbdane,get
	call txt1,txtset
	push chartw
	call img1,getpx
	pop $b
	popax
	add $a,$b
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call imbg,geth
	push charth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	add $a,$b
	call txt1,setpos
	push $10
	cmp0
	je l783
	push 0
	call txt1,geth
	push 1
	pop $b
	popax
	add $a,$b
	call txt1,move
l783:
	push "txt1"
	call imbg,blit
l781:
	jmp l775
l774:
	call imchart,getw
	push 1
	cthis black
	push 32
	call img1,create
	localint $24
	push 0
	pop $24
l784:
	push $24
	push ilecen
	cmpjle
	cmp0
	je l785
	jmp l787
l786:
	add $24,1
	pop $24
	jmp l784
l787:
	push 0
	push $24
	call imchart,geth
	pop $b
	popax
	mul $a,$b
	push ilecen
	pop $b
	popax
	div $a,$b
	psax
	call img1,setpos
	push "img1"
	call imchart,blit
	jmp l786
l785:
	push 0.0
	pop $2
	push 10000000.0
	pop $3
	localint $25
	push dotylu
	popax
	sub 0,$a
	pop $25
l788:
	push $25
	push 1
	push doprzodu
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l789
	jmp l791
l790:
	add $25,1
	pop $25
	jmp l788
l791:
	push $25
	push idpom
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	push 0
	cmpjae
	cmp0
	je l793
	push $10
	push isize
	cmpjl
	jmp l795
l793:
	push 0
	jmp l795
l794:
	push 1
l795:
	cmp0
	je l796
	push $10
	push 2
	call dbdane,get
	pop $4
	push $10
	push 3
	call dbdane,get
	pop $5
	push $4
	push $2
	cmpja
	cmp0
	je l798
	push $4
	pop $2
l798:
	push $5
	push $3
	cmpjl
	cmp0
	je l800
	push $5
	pop $3
l800:
l796:
	jmp l790
l789:
	push $2
	pop $15
	push $2
	push $3
	pop $b
	popax
	sub $a,$b
	pop $2
	call hchart,to_r
	push $2
	pop $b
	popax
	div $a,$b
	psax
	pop $7
	push $3
	pop $8
	push $3
	pop $16
	push wswieca
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $11
	localint $25
	push dotylu
	popax
	sub 0,$a
	pop $25
l801:
	push $25
	push 1
	push doprzodu
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l802
	jmp l804
l803:
	add $25,1
	pop $25
	jmp l801
l804:
	push $25
	push idpom
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	push 0
	cmpjae
	cmp0
	je l806
	push $10
	push isize
	cmpjl
	jmp l808
l806:
	push 0
	jmp l808
l807:
	push 1
l808:
	cmp0
	je l809
	push $10
	push 1
	call dbdane,get
	pop $3
	push $10
	push 2
	call dbdane,get
	pop $4
	push $10
	push 3
	call dbdane,get
	pop $5
	push $10
	push 4
	call dbdane,get
	pop $6
	push $4
	push $5
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	mul $a,$b
	pop $12
	push $12
	push 0
	cmpjle
	cmp0
	je l811
	push 1
	pop $12
l811:
	push 1
	push $12
	cthis black
	push 255
	call img1,create
	push $25
	push dotylu
	pop $b
	popax
	add $a,$b
	cthis swpos
	push $11
	pop $b
	popax
	add $a,$b
	push hchart
	push $4
	push $8
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call img1,setpos
	push "img1"
	call imchart,blit
	push $3
	push $6
	cmpjle
	cmp0
	je l813
	push $3
	push $6
	cmpje
	cmp0
	je l815
	push wswieca
	push 1
	cthis black
	push 255
	call img1,create
	jmp l814
l815:
	push $6
	push $3
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	mul $a,$b
	pop $12
	push $12
	push 0
	cmpjle
	cmp0
	je l817
	push 1
	pop $12
l817:
	push wswieca
	push $12
	cthis white
	push 255
	call img1,create
	push 1
	cthis black
	push 255
	call img1,inv_imgborders
l814:
	push $25
	push dotylu
	pop $b
	popax
	add $a,$b
	cthis swpos
	push hchart
	push $6
	push $8
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call img1,setpos
	push "img1"
	call imchart,blit
	jmp l812
l813:
	push $3
	push $6
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	mul $a,$b
	pop $12
	push $12
	push 0
	cmpjle
	cmp0
	je l819
	push 1
	pop $12
l819:
	push wswieca
	push $12
	cthis black
	push 255
	call img1,create
	push $25
	push dotylu
	pop $b
	popax
	add $a,$b
	cthis swpos
	push hchart
	push $3
	push $8
	pop $b
	popax
	sub $a,$b
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call img1,setpos
	push "img1"
	call imchart,blit
l812:
l809:
	jmp l803
l802:
	push chartw
	push charth
	call imchart,setpos
	push "imchart"
	call imbg,blit
	push 0
	push 0
	call imchart,setpos
	localint $24
	push 0
	pop $24
l820:
	push $24
	push ilecen
	cmpjle
	cmp0
	je l821
	jmp l823
l822:
	add $24,1
	pop $24
	jmp l820
l823:
	push $15
	call $24,to_r
	push $15
	push $16
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	call ilecen,to_r
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt1,txtset
	call imbg,getw
	push chartw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	add $a,$b
	push charth
	push $24
	call imchart,geth
	pop $b
	popax
	mul $a,$b
	call ilecen,to_r
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	call txt1,geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
	jmp l822
l821:
	push $1
	push "  depth: "
	pop $b
	popax
	add $a,$b
	push $22
	push 1
	call dbconf,get
	pop $b
	popax
	add $a,$b
	call txt1,txtset
	call imbg,getcx
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push charth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0.66
	call txt1,geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
	push $22
	push 0
	call dbconf,get
	push $23
	pop $b
	popax
	add $a,$b
	push ".bmp"
	pop $b
	popax
	add $a,$b
	pop $14
	push soutpath
	push $14
	pop $b
	popax
	add $a,$b
	call imbg,save
	push depth
	push $19
	cmpjle
	cmp0
	je l825
	push $17
	push 0
	cmpje
	cmp0
	je l827
	push "<tr>"
	call dbhtm,inv_dbaddrow
	push 1
	pop $17
	jmp l826
l827:
	push 0
	pop $17
l826:
	jmp l824
l825:
	push "<tr>"
	call dbhtm,inv_dbaddrow
l824:
	localdef $26
	push $22
	push 0
	call dbconf,get
	push $23
	pop $b
	popax
	add $a,$b
	push ".png"
	pop $b
	popax
	add $a,$b
	pop $26
	push "<td><img src=\""
	push $26
	pop $b
	popax
	add $a,$b
	push "\" /></td>"
	pop $b
	popax
	add $a,$b
	call dbhtm,inv_dbaddrow
	push "<td style=\"font-size: 9pt;\">"
	push $26
	pop $b
	popax
	add $a,$b
	push "</td>"
	pop $b
	popax
	add $a,$b
	call dbhtm,inv_dbaddrow
	push depth
	push $19
	cmpjle
	cmp0
	je l829
	push $17
	push 0
	cmpje
	cmp0
	je l831
	push "</tr>"
	call dbhtm,inv_dbaddrow
l831:
	jmp l828
l829:
	push "</tr>"
	call dbhtm,inv_dbaddrow
l828:
	jmp l771
l770:
	push depth
	push $19
	cmpjle
	cmp0
	je l833
	push $17
	push 1
	cmpje
	jmp l835
l833:
	push 0
	jmp l835
l834:
	push 1
l835:
	cmp0
	je l836
	push 0
	pop $17
	push "</tr>"
	call dbhtm,inv_dbaddrow
l836:
	push "</table>"
	call dbhtm,inv_dbaddrow
	jmp l757
l756:
	push "</body>"
	call dbhtm,inv_dbaddrow
	push "</html>"
	call dbhtm,inv_dbaddrow
	push soutpath
	push "index.html"
	pop $b
	popax
	add $a,$b
	call dbhtm,savescript
	push "exit"
	call gameapi,play
	end method
	method swpos
	localint $1
	pop $1
	push $1
	push wswieca
	push dx
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	end method
	end game

	new int,iResX
	push 1024
	pop iResX
	new int,iResY
	push 700
	pop iResY
	new int,iScreenX
	push 1024
	pop iScreenX
	new int,iScreenY
	push 768
	pop iScreenY
	method imgclonesize
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	cthis transparent
	cthis create
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setpos
	end method
	method imgclone
	localstring $1
	pop $1
	push $1
	cthis imgclonesize
	push $1
	cthis blit
	push $1
	spushs
	spop $a
	call [$a],getz
	cthis setz
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l838
	cthis show
	jmp l837
l838:
	cthis hide
l837:
	end method
	game Invest2
	parent ClassGameController
	method init
	clparent ClassGameController,init
	new string,stxtnosuchfile
	push "No such file: "
	pop stxtnosuchfile
	new string,stxtnoanalysis
	push "<no analysis>"
	pop stxtnoanalysis
	new Button,butgame
	new string,sgmstate
	push "state_std"
	pop sgmstate
	new string,spath
	push "scripts/invest2/"
	pop spath
	new int,iilecharts
	push 6
	pop iilecharts
	new int,ichartz
	push 5
	pop ichartz
	new string,sdbin
	new db,dblog
	new string,sactchart
	new font,fnt
	push "configs/fonts/normal.ttf"
	push 10
	call fnt,load
	new text,txt1
	push "fnt"
	call txt1,setfont
	new text,txtdata
	push "fnt"
	call txtdata,setfont
	push 128
	cthis grey
	call txtdata,createtxt
	new db,dbsave
	push spath
	push "save.db"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l840
	push spath
	push "save.db"
	pop $b
	popax
	add $a,$b
	call dbsave,load
l840:
	localdef $1
	push 10
	pop $1
	localdef $2
	push 10
	pop $2
	localdef $3
	push 2
	pop $3
	localdef $4
	push 10
	pop $4
	localint $5
	push 30
	pop $5
	new text,txdata
	push "fnt"
	call txdata,setfont
	push $4
	call txdata,setz
	push $1
	push $2
	call txdata,setpos
	cthis black
	call txdata,createtxt
	new text,txopen
	push "fnt"
	call txopen,setfont
	push $4
	call txopen,setz
	push $1
	call txdata,getey
	push $3
	pop $b
	popax
	add $a,$b
	call txopen,setpos
	push 0
	push 0
	push 128
	call txopen,createtxt
	new text,txmin
	push "fnt"
	call txmin,setfont
	push $4
	call txmin,setz
	push $1
	call txopen,getey
	push $3
	pop $b
	popax
	add $a,$b
	call txmin,setpos
	push 128
	push 0
	push 0
	call txmin,createtxt
	new text,txmax
	push "fnt"
	call txmax,setfont
	push $4
	call txmax,setz
	push $1
	call txmin,getey
	push $3
	pop $b
	popax
	add $a,$b
	call txmax,setpos
	push 0
	push 128
	push 0
	call txmax,createtxt
	new text,txclose
	push "fnt"
	call txclose,setfont
	push $4
	call txclose,setz
	push $1
	call txmax,getey
	push $3
	pop $b
	popax
	add $a,$b
	call txclose,setpos
	push 0
	push 0
	push 128
	call txclose,createtxt
	new text,txzmiana
	push "fnt"
	call txzmiana,setfont
	push $4
	call txzmiana,setz
	push $1
	call txclose,getey
	push $3
	pop $b
	popax
	add $a,$b
	call txzmiana,setpos
	new text,txprice
	push "fnt"
	call txprice,setfont
	push $4
	call txprice,setz
	push 64
	push 0
	push 0
	call txprice,createtxt
	new text,txhelp
	push "fnt"
	call txhelp,setfont
	push $4
	call txhelp,setz
	push 0
	push 64
	push 0
	call txhelp,createtxt
	new text,txstate
	push "fnt"
	call txstate,setfont
	push $4
	call txstate,setz
	cthis black
	call txstate,createtxt
	new text,txlink
	push "fnt"
	call txlink,setfont
	push $4
	call txlink,setz
	cthis black
	call txlink,createtxt
	push "http://podtworca.blogspot.com"
	call txlink,txtset
	push "fnt"
	cthis black
	push "a0._"
	push 32
	new TextTyper,tcfile
	push 10
	push iResY
	push 50
	pop $b
	popax
	sub $a,$b
	call tcfile,setpos
	push $4
	call tcfile,setz
	push "fnt"
	cthis black
	push "a0._"
	push 36
	new TextTyper,tcanalysis
	push iResX
	push 3
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 50
	pop $b
	popax
	sub $a,$b
	call tcanalysis,setpos
	push $4
	call tcanalysis,setz
	push stxtnoanalysis
	call tcanalysis,txtset
	new string,sfileanal
	push stxtnoanalysis
	pop sfileanal
	push 100
	popax
	add $1,$a
	pop $1
	cthis setstdstate
	push $1
	push $2
	call txstate,setpos
	push "Type 'h' for help"
	call txhelp,txtset
	push $1
	call txstate,getey
	push $3
	pop $b
	popax
	add $a,$b
	call txhelp,setpos
	push $1
	call txhelp,getey
	push $3
	pop $b
	popax
	add $a,$b
	call txprice,setpos
	push iResX
	push 3
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	new img,imgsave
	call imgsave,setasbut
	push $4
	call imgsave,setz
	push "butclick"
	push "Invest20"
	call imgsave,addmethod
	push "save analysis"
	call imgsave,createbut
	push $1
	push $2
	call imgsave,setpos
	new img,imgload
	call imgload,setasbut
	push $4
	call imgload,setz
	push "butclick"
	push "Invest21"
	call imgload,addmethod
	push "load analysis"
	call imgload,createbut
	push $1
	push $2
	call imgsave,geth
	pop $b
	popax
	add $a,$b
	push 5
	pop $b
	popax
	add $a,$b
	call imgload,setpos
	new img,imgcfg
	call imgcfg,setasbut
	push $4
	call imgcfg,setz
	push "butclick"
	push "Invest22"
	call imgcfg,addmethod
	push "reload config"
	call imgcfg,createbut
	push $1
	call imgload,getey
	push 5
	pop $b
	popax
	add $a,$b
	call imgcfg,setpos
	new db,dbconf
	new img,imbghelp
	push 800
	push 700
	cthis white
	push 255
	call imbghelp,create
	push 2
	cthis black
	push 128
	call imbghelp,imgborders
	push iResX
	call imbghelp,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	call imbghelp,geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imbghelp,setpos
	push $5
	call imbghelp,setz
	call imbghelp,hide
	push "fnt"
	push "$path:scripts/invest2/invest2_help.txt"
	cthis black
	call imbghelp,getpx
	push 10
	pop $b
	popax
	add $a,$b
	call imbghelp,getpy
	push 10
	pop $b
	popax
	add $a,$b
	push 2
	push $5
	push 2
	pop $b
	popax
	add $a,$b
	push "left"
	new TextDb,tchelp
	call tchelp,hide
	new vector,vin
	push "string"
	call vin,type
	new string,sfileinput
	push "null"
	pop sfileinput
	push 0
	call keyboard,autorepeat
	new img,imgbkg
	push iScreenX
	push iScreenY
	cthis white
	push 255
	call imgbkg,create
	new img,imbg
	new img,immspos
	push 1
	call immspos,setz
	push A
	push "svin"
	push "null"
	call immspos,vars2
	new img,imhorizon
	new img,imgdot
	new img,imfibo0
	push A
	push "svin"
	push "null"
	push "rfibo"
	push 0.0
	call imfibo0,vars2
	new img,imfibo236
	push A
	push "svin"
	push "null"
	push "rfibo"
	push 0.236
	call imfibo236,vars2
	new img,imfibo382
	push A
	push "svin"
	push "null"
	push "rfibo"
	push 0.382
	call imfibo382,vars2
	new img,imfibo50
	push A
	push "svin"
	push "null"
	push "rfibo"
	push 0.5
	call imfibo50,vars2
	new img,imfibo618
	push A
	push "svin"
	push "null"
	push "rfibo"
	push 0.618
	call imfibo618,vars2
	new img,imfibo1
	push A
	push "svin"
	push "null"
	push "rfibo"
	push 1.0
	call imfibo1,vars2
	new img,imfibo1618
	push A
	push "svin"
	push "null"
	push "rfibo"
	push 1.618
	call imfibo1618,vars2
	new vector,grfibo
	push "string"
	call grfibo,type
	push "begin"
	push "imfibo0"
	push "imfibo236"
	push "imfibo382"
	push "imfibo50"
	push "imfibo618"
	push "imfibo1"
	push "imfibo1618"
	call grfibo,beginadd
	new real,price
	new real,rmin
	new real,rmax
	new real,rh1
	push 5
	pop rh1
	new real,rh2
	push 5
	pop rh2
	new int,Depth
	new int,Height
	new int,Dswieca
	new int,WykresStart
	new int,ShowData
	push 0
	pop ShowData
	new int,viewx1
	new int,viewx2
	new int,ShowFiboData
	push 0
	pop ShowFiboData
	new int,bBgChart
	push 0
	pop bBgChart
	new int,bShowLine
	push 0
	pop bShowLine
	new int,lastlinex
	new int,lastliney
	new int,bIchimoku
	push 0
	pop bIchimoku
	new int,tenkan_sen
	new int,kijun_sen
	new int,chikou_span
	new int,senkou_span1
	new int,senkou_span2
	new int,bSMATR
	push 0
	pop bSMATR
	new real,rsmatrx1
	new real,rsmatry1
	new real,rsmatry2
	new real,rsmatry3
	new real,rsmatry4
	new int,ismadepth
	new int,ismax
	new int,bATR
	push 0
	pop bATR
	new real,ratrx
	new real,ratry
	new real,ratry1
	new real,ratry2
	new real,ratry3
	new int,iatrdepth
	new int,iatrsma
	new int,bMinMax
	push 0
	pop bMinMax
	new real,rmimax
	new real,rmimay1
	new real,rmimay2
	new real,rmimay3
	new int,imimamin
	new int,imimamax1
	new int,imimamax2
	cthis reloadcfg
	new int,InitialDepth
	push "depth:"
	push 230
	cthis readcfg
	pop InitialDepth
	new timer,timkey
	push 50
	call timkey,setdelay
	push 1
	call timkey,settick
	push "onfinish"
	push "Invest23"
	call timkey,addmethod
	call timkey,play
	new int,b_skip_click
	push 0
	pop b_skip_click
	new int,iIleSaves
	push 15
	pop iIleSaves
	localint $6
	push 0
	pop $6
l877:
	push $6
	push iIleSaves
	cmpjl
	cmp0
	je l878
	jmp l880
l879:
	add $6,1
	pop $6
	jmp l877
l880:
	localdef $7
	push "imgsav"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	spushs
	spop $e
	new img,[$e]
	push $7
	spushs
	push A
	push "myid"
	push $6
	push "myval"
	push "null"
	spop $a
	call [$a],vars2
	push $7
	spushs
	spop $a
	call [$a],setasbut
	push $7
	spushs
	push "butclick"
	push "Invest24"
	spop $a
	call [$a],addmethod
	push $7
	spushs
	push $4
	spop $a
	call [$a],setz
	jmp l879
l878:
	cthis updatesavebutspos
	new int,idactchart
	push 1
	pop idactchart
	call imgcfg,getex
	push 30
	pop $b
	popax
	add $a,$b
	pop $1
	call imgsave,getpy
	pop $2
	new gmimgvec,grcharts
	push 1
	pop $6
l888:
	push $6
	push iilecharts
	cmpjle
	cmp0
	je l889
	jmp l891
l890:
	add $6,1
	pop $6
	jmp l888
l891:
	push "imgbutchart"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	spushs
	spop $e
	new img,[$e]
	push $7
	spushs
	spop $a
	call [$a],setasbut
	push $7
	spushs
	push $4
	spop $a
	call [$a],setz
	push $7
	spushs
	push "butclick"
	push "Invest25"
	spop $a
	call [$a],addmethod
	push $7
	spushs
	push "chart "
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],createbut
	push $7
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	localdef $8
	push "imbutshowhidechart"
	push $6
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	spushs
	spop $e
	new img,[$e]
	push $8
	spushs
	spop $a
	call [$a],setasbut
	push $8
	spushs
	push $4
	spop $a
	call [$a],setz
	push $8
	spushs
	push "schart"
	push "imgchart"
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],var2
	push $8
	spushs
	push "butclick"
	push "Invest27"
	spop $a
	call [$a],addmethod
	push $8
	spushs
	push "hide/show"
	spop $a
	call [$a],createbut
	push $8
	spushs
	push $1
	push $7
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	push 5
	pop $b
	popax
	add $a,$b
	push $2
	spop $a
	call [$a],setpos
	push $6
	push 3
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cmpje
	cmp0
	je l903
	push $8
	spushs
	spop $a
	call [$a],getex
	push 15
	pop $b
	popax
	add $a,$b
	pop $1
	call imgsave,getpy
	pop $2
	jmp l902
l903:
	push $7
	spushs
	spop $a
	call [$a],geth
	push 5
	pop $b
	popax
	add $a,$b
	popax
	add $2,$a
	pop $2
l902:
	localdef $9
	push "dbchart"
	push $6
	pop $b
	popax
	add $a,$b
	pop $9
	push $7
	spushs
	push A
	push "idchart"
	push $6
	push "idepth"
	push InitialDepth
	push "iwykresstart"
	push WykresStart
	push "bshowline"
	push bShowLine
	push "sdbfile"
	push "null"
	push "sdb"
	push $9
	spop $a
	call [$a],vars2
	push $9
	spushs
	spop $e
	new db,[$e]
	push $9
	push "rew"
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new db,[$e]
	push $9
	push "log"
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new db,[$e]
	push "imgchart"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	spushs
	spop $e
	new img,[$e]
	push $7
	call grcharts,add
	jmp l890
l889:
	push 1
	cthis setactchart
	push "input_chart"
	push "input_chart:"
	push "wig20_d.csv"
	cthis readstringcfg
	cthis getsav
	cthis load_chart
	cthis draw_initial
	end method
	method Invest20
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l842
	push "state_saveanal"
	push "Saving analysis"
	cthis setstate
	call tcanalysis,enable
	push 1
	pop b_skip_click
l842:
	end method
	method Invest21
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l844
	push "state_loadanal"
	push "Loading analysis"
	cthis setstate
	call tcanalysis,enable
	push 1
	pop b_skip_click
l844:
	end method
	method Invest22
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l846
	cthis reloadcfg
	push 1
	pop b_skip_click
	push "Config reloaded"
	cthis showmsg
	cthis redraw
l846:
	end method
	method Invest23
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l848
	push "up"
	call keyboard,iskeydown
	cmp0
	je l850
	push "lshift"
	call keyboard,iskeydown
	cmp0
	je l852
	push 50
	push Depth
	push 5
	pop $b
	popax
	div $a,$b
	psax
	cthis max
	popax
	sub 0,$a
	cthis setdepth
	jmp l851
l852:
	push "rshift"
	call keyboard,iskeydown
	cmp0
	je l854
	push Depth
	popax
	sub 0,$a
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setdepth
	jmp l853
l854:
	push 10
	push Depth
	push 20
	pop $b
	popax
	div $a,$b
	psax
	cthis max
	popax
	sub 0,$a
	cthis setdepth
l853:
l851:
	cthis redraw
	jmp l849
l850:
	push "down"
	call keyboard,iskeydown
	cmp0
	je l856
	push "lshift"
	call keyboard,iskeydown
	cmp0
	je l858
	push 50
	push Depth
	push 5
	pop $b
	popax
	div $a,$b
	psax
	cthis max
	cthis setdepth
	jmp l857
l858:
	push "rshift"
	call keyboard,iskeydown
	cmp0
	je l860
	push Depth
	cthis setdepth
	jmp l859
l860:
	push 10
	push Depth
	push 20
	pop $b
	popax
	div $a,$b
	psax
	cthis max
	cthis setdepth
l859:
l857:
	cthis redraw
	jmp l855
l856:
	push "left"
	call keyboard,iskeydown
	cmp0
	je l862
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l864
	push sactchart
	spushs
	push 10
	push 0
	spop $a
	call [$a],move
	jmp l863
l864:
	push "rshift"
	call keyboard,iskeydown
	cmp0
	je l866
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setchartstart
	jmp l865
l866:
	push "lshift"
	call keyboard,iskeydown
	cmp0
	je l868
	push 50
	push Depth
	push 50
	pop $b
	popax
	div $a,$b
	psax
	cthis max
	cthis setchartstart
	jmp l867
l868:
	push 10
	push Depth
	push 20
	pop $b
	popax
	div $a,$b
	psax
	cthis max
	cthis setchartstart
l867:
l865:
	cthis redraw
l863:
	jmp l861
l862:
	push "right"
	call keyboard,iskeydown
	cmp0
	je l870
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l872
	push sactchart
	spushs
	push 10
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
	jmp l871
l872:
	push "rshift"
	call keyboard,iskeydown
	cmp0
	je l874
	push WykresStart
	popax
	sub 0,$a
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setchartstart
	jmp l873
l874:
	push "lshift"
	call keyboard,iskeydown
	cmp0
	je l876
	push 50
	push Depth
	push 50
	pop $b
	popax
	div $a,$b
	psax
	cthis max
	popax
	sub 0,$a
	cthis setchartstart
	jmp l875
l876:
	push 10
	push Depth
	push 20
	pop $b
	popax
	div $a,$b
	psax
	cthis max
	popax
	sub 0,$a
	cthis setchartstart
l875:
l873:
	cthis redraw
l871:
l870:
l861:
l855:
l849:
l848:
	cthis play
	end method
	method Invest24
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l882
	localstring $1
	call tcfile,get
	pop $1
	push myval
	call tcfile,txtset
	cthis checkbgchart
	push myval
	push $1
	cthis load_new_chart
	push 1
	pop b_skip_click
	jmp l881
l882:
	push sgmstate
	push "state_loadanal"
	cmpje
	cmp0
	jne l885
	push sgmstate
	push "state_saveanal"
	cmpje
	jmp l886
l884:
	push 0
	jmp l886
l885:
	push 1
l886:
	cmp0
	je l887
	push myval
	call tcanalysis,txtset
l887:
l881:
	end method
	method Invest25
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l893
	push sactchart
	push "null"
	cmpjne
	cmp0
	je l895
	push "imgbutchart"
	push idactchart
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],Invest26
l895:
	push idchart
	cthis setactchart
	push sdbfile
	push "null"
	cmpje
	cmp0
	je l897
	call gameapi,getgamename
	spushs
	push "input_chart"
	push "input_chart:"
	push "wig20_d.csv"
	cthis readstringcfg
	cthis getsav
	spop $a
	call [$a],load_chart
	push "input_chart"
	call dbsave,dbget
	pop sdbfile
	jmp l896
l897:
	push idepth
	pop Depth
	push iwykresstart
	pop WykresStart
	push bshowline
	pop bShowLine
	call gameapi,getgamename
	spushs
	push sdbfile
	spop $a
	call [$a],load_chart
l896:
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],redraw
l893:
	push 1
	pop b_skip_click
	end method
	method Invest26
	push Depth
	pop idepth
	push WykresStart
	pop iwykresstart
	push bShowLine
	pop bshowline
	push "input_chart"
	call dbsave,dbget
	pop sdbfile
	end method
	method Invest27
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l899
	push schart
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l901
	push schart
	spushs
	spop $a
	call [$a],hide
	jmp l900
l901:
	push schart
	spushs
	spop $a
	call [$a],show
l900:
l899:
	push 1
	pop b_skip_click
	end method
	method mchartcol
	localint $1
	pop $1
	push $1
	spushs
	push 1
	cmpst
	jne l905
	spop $a
	push 0
	push 0
	push 0
	ret
	jmp l904
l905:
	push 2
	cmpst
	jne l906
	spop $a
	push 32
	push 0
	push 0
	ret
	jmp l904
l906:
	push 3
	cmpst
	jne l907
	spop $a
	push 0
	push 32
	push 0
	ret
	jmp l904
l907:
	push 4
	cmpst
	jne l908
	spop $a
	push 0
	push 0
	push 32
	ret
	jmp l904
l908:
	push 5
	cmpst
	jne l909
	spop $a
	push 32
	push 32
	push 0
	ret
	jmp l904
l909:
	push 6
	cmpst
	jne l910
	spop $a
	push 0
	push 32
	push 32
	ret
	jmp l904
l910:
	spop $a
	push 0
	push 0
	push 0
	ret
l904:
	end method
	method setactchartdb
	push "dbchart"
	push idactchart
	pop $b
	popax
	add $a,$b
	pop sdbin
	end method
	method setactchart
	localint $1
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	spop $a
	call [$a],Invest28
	end method
	method Invest28
	localint $1
	pop $1
	push sactchart
	push "null"
	cmpjne
	cmp0
	je l912
	new img,imgpomc
	new filter,ftpomc
	push sactchart
	call imgpomc,imgclone
	push "imgpomc"
	call ftpomc,link
	push 128
	call ftpomc,setopacity
	push sactchart
	spushs
	push "imgpomc"
	spop $a
	call [$a],imgclone
	delete ftpomc
	delete imgpomc
l912:
	push $1
	pop idactchart
	cthis setactchartdb
	push "imgchart"
	push $1
	pop $b
	popax
	add $a,$b
	pop sactchart
	push sactchart
	spushs
	spop $a
	call [$a],show
	end method
	method copydbrew
	localdef $1
	push "dbchart"
	push idactchart
	pop $b
	popax
	add $a,$b
	push "rew"
	pop $b
	popax
	add $a,$b
	pop $1
	push sdbin
	push $1
	cmpje
	cmp0
	je l914
	cthis setactchartdb
	jmp l913
l914:
	push $1
	spushs
	spop $a
	call [$a],free
	push $1
	spushs
	push sdbin
	spop $a
	call [$a],dbcopy
	localreal $2
	localint $3
	push 0
	pop $3
l915:
	push $3
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l916
	jmp l918
l917:
	add $3,1
	pop $3
	jmp l915
l918:
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	push 4
	cmpja
	cmp0
	je l920
	push $1
	spushs
	push $3
	push 1
	spop $a
	call [$a],get
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l922
	push 1.0
	push $2
	pop $b
	popax
	div $a,$b
	psax
	pop $2
	push $1
	spushs
	push $3
	push 1
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	push 2
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	push 3
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	push 4
	push $2
	spop $a
	call [$a],set
	jmp l921
l922:
	push $1
	spushs
	push $3
	push 1
	push 1
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	push 2
	push 1
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	push 3
	push 1
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	push 4
	push 1
	spop $a
	call [$a],set
l921:
l920:
	jmp l917
l916:
	push $1
	pop sdbin
l913:
	end method
	method logdata
	localdef $1
	push "dbchart"
	push idactchart
	pop $b
	popax
	add $a,$b
	push "log"
	pop $b
	popax
	add $a,$b
	pop $1
	push sdbin
	push $1
	cmpje
	cmp0
	je l924
	cthis setactchartdb
	jmp l923
l924:
	push $1
	spushs
	spop $a
	call [$a],free
	localreal $2
	localint $3
	push 0
	pop $3
l925:
	push $3
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l926
	jmp l928
l927:
	add $3,1
	pop $3
	jmp l925
l928:
	push sdbin
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	push 4
	cmpja
	cmp0
	je l930
	localint $4
	push $1
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	push $1
	spushs
	push $4
	push sdbin
	spushs
	push $3
	push 0
	spop $a
	call [$a],get
	spop $a
	call [$a],add
	push $1
	spushs
	push $4
	push sdbin
	spushs
	push $3
	push 1
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
	spushs
	spop $h
	call $h,log
	spop $a
	call [$a],add
	push $1
	spushs
	push $4
	push sdbin
	spushs
	push $3
	push 2
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
	spushs
	spop $h
	call $h,log
	spop $a
	call [$a],add
	push $1
	spushs
	push $4
	push sdbin
	spushs
	push $3
	push 3
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
	spushs
	spop $h
	call $h,log
	spop $a
	call [$a],add
	push $1
	spushs
	push $4
	push sdbin
	spushs
	push $3
	push 4
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
	spushs
	spop $h
	call $h,log
	spop $a
	call [$a],add
	push sdbin
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	push 5
	cmpja
	cmp0
	je l932
	push $1
	spushs
	push $4
	push sdbin
	spushs
	push $3
	push 5
	spop $a
	call [$a],get
	spop $a
	call [$a],add
l932:
l930:
	jmp l927
l926:
	push $1
	pop sdbin
l923:
	end method
	method setasbut
	push "isbutin"
	push "Invest29"
	cthis addmethod
	push "butmoveon"
	push "Invest210"
	cthis addmethod
	push "butmoveoff"
	push "Invest211"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method Invest29
	localdef $1
	localdef $2
	pop $2
	pop $1
	cthis getw
	push 0
	cmpja
	cmp0
	je l933
	push $1
	push $2
	push 1
	push 1
	cthis isin
	jmp l935
l933:
	push 0
	jmp l935
l934:
	push 1
l935:
	end method
	method Invest210
	push 200
	cthis transparency
	end method
	method Invest211
	push 255
	cthis transparency
	end method
	method reloadcfg
	push spath
	push "invest2.cfg"
	pop $b
	popax
	add $a,$b
	call dbconf,loadscript
	push "tenkan_sen:"
	push 9
	cthis readcfg
	pop tenkan_sen
	push "kijun_sen:"
	push 26
	cthis readcfg
	pop kijun_sen
	push "chikou_span:"
	push 26
	cthis readcfg
	pop chikou_span
	push "senkou_span1:"
	push 26
	cthis readcfg
	pop senkou_span1
	push "senkou_span2:"
	push 52
	cthis readcfg
	pop senkou_span2
	push "smaminmax:"
	push 50
	cthis readcfg
	pop ismadepth
	push "minmaxd:"
	push 14
	cthis readcfg
	pop ismax
	push "atrdepth:"
	push 40
	cthis readcfg
	pop iatrdepth
	push "atrsma:"
	push 15
	cthis readcfg
	pop iatrsma
	push "mimamin:"
	push 220
	cthis readcfg
	pop imimamin
	push "mimamax1:"
	push 220
	cthis readcfg
	pop imimamax1
	push "mimamax2:"
	push 90
	cthis readcfg
	pop imimamax2
	end method
	method getsavedinput
	localint $1
	pop $1
	push "last_input_"
	push $1
	pop $b
	popax
	add $a,$b
	push "null"
	cthis getsav
	end method
	method updatesavimg
	localstring $1
	push myid
	cthis getsavedinput
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l937
	push $1
	pop myval
	push $1
	cthis createbut
l937:
	end method
	method createbut
	localstring $1
	pop $1
	localint $2
	push 3
	pop $2
	push $1
	cthis black
	call txt1,txtsetcol
	call txt1,getw
	push 2
	push $2
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call txt1,geth
	push 2
	push $2
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push 192
	cthis grey
	push 255
	cthis create
	push 2
	cthis black
	push 64
	cthis imgborders
	push 0
	push 0
	cthis setpos
	push $2
	push $2
	call txt1,setpos
	push "txt1"
	cthis blit
	end method
	method updatesavebutspos
	localdef $1
	push 5
	pop $1
	localdef $2
	call tcfile,getey
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	localstring $3
	localint $4
	push 0
	pop $4
l938:
	push $4
	push iIleSaves
	cmpjl
	cmp0
	je l939
	jmp l941
l940:
	add $4,1
	pop $4
	jmp l938
l941:
	localdef $5
	push "imgsav"
	push $4
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $a
	call [$a],updatesavimg
	push $5
	spushs
	spop $a
	call [$a],getw
	push 0
	cmpja
	cmp0
	je l943
	push $4
	push 0
	cmpja
	cmp0
	je l945
	localdef $6
	push $3
	spushs
	spop $a
	call [$a],getex
	pop $6
	push $6
	push $5
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	push iResX
	push $1
	pop $b
	popax
	sub $a,$b
	cmpjae
	cmp0
	je l947
	push $3
	spushs
	spop $a
	call [$a],geth
	push $1
	pop $b
	popax
	add $a,$b
	popax
	add $2,$a
	pop $2
	call tcfile,getpx
	push $1
	pop $b
	popax
	sub $a,$b
	pop $6
l947:
	push $5
	spushs
	push $6
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	spop $a
	call [$a],setpos
	jmp l944
l945:
	push $5
	spushs
	call tcfile,getpx
	push $2
	spop $a
	call [$a],setpos
l944:
l943:
	push $5
	pop $3
	jmp l940
l939:
	end method
	method setdepth
	localint $1
	pop $1
	push $1
	popax
	add Depth,$a
	pop Depth
	push Depth
	push 1
	cmpjl
	cmp0
	je l949
	push 1
	pop Depth
l949:
	push Depth
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l951
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop Depth
l951:
	end method
	method setchartstart
	localint $1
	pop $1
	push $1
	popax
	add WykresStart,$a
	pop WykresStart
	push WykresStart
	push Depth
	pop $b
	popax
	add $a,$b
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l953
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	push Depth
	pop $b
	popax
	sub $a,$b
	pop WykresStart
l953:
	push WykresStart
	push 0
	cmpjl
	cmp0
	je l955
	push 0
	pop WykresStart
l955:
	end method
	method setstdstate
	push "state_std"
	push "State: normal"
	cthis setstate
	end method
	method setstate
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sgmstate
	push $2
	cthis showmsg
	end method
	method stdstate
	localstring $1
	pop $1
	push "state_std"
	push $1
	cthis setstate
	end method
	method showmsg
	localstring $1
	pop $1
	push $1
	call txstate,txtset
	end method
	method get_chart_file
	localstring $1
	pop $1
	push spath
	push "input/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method get_anal_file
	localstring $1
	pop $1
	push spath
	push "analysis/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method getactdb
	push "dbchart"
	push idactchart
	pop $b
	popax
	add $a,$b
	end method
	method load_chart
	localstring $1
	pop $1
	push $1
	cthis get_chart_file
	call engine,fileexist
	neg
	cmp0
	je l957
	ret
l957:
	push "input_chart"
	push $1
	call dbsave,setsav
	push $1
	pop sfileinput
	push $1
	call tcfile,txtset
	localstring $2
	call vin,size
	cmp0
	je l959
	localint $3
	push 0
	pop $3
l960:
	push $3
	call vin,size
	cmpjl
	cmp0
	je l961
	jmp l963
l962:
	add $3,1
	pop $3
	jmp l960
l963:
	push $3
	call vin,get
	pop $2
	push $2
	spushs
	spop $d
	delete [$d]
	jmp l962
l961:
	call vin,free
l959:
	cthis setactchartdb
	push sdbin
	spushs
	push sfileinput
	cthis get_chart_file
	spop $a
	call [$a],loadscript
	push 0
	push 3
	call sfileinput,gete
	push "csv"
	cmpje
	cmp0
	jne l966
	push 0
	push 3
	call sfileinput,gete
	push "txt"
	cmpje
	jmp l967
l965:
	push 0
	jmp l967
l966:
	push 1
l967:
	cmp0
	je l968
	localdef $2
	push sdbin
	spushs
	push 0
	push 0
	spop $a
	call [$a],get
	pop $2
	push $2
	push "Date,Time,Open,High,Low,Close,Volume,OpenInt"
	cmpje
	cmp0
	je l970
	push sdbin
	spushs
	push 0
	spop $a
	call [$a],removerow
	localint $3
	push 0
	pop $3
l971:
	push $3
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l972
	jmp l974
l973:
	add $3,1
	pop $3
	jmp l971
l974:
	push sdbin
	spushs
	push $3
	push 0
	spop $a
	call [$a],get
	push ","
	call vin,vecbuildfromstring
	push sdbin
	spushs
	push $3
	push 0
	call vin,first
	spop $a
	call [$a],set
	localint $4
	push 2
	pop $4
l975:
	push $4
	call vin,size
	cmpjl
	cmp0
	je l976
	jmp l978
l977:
	add $4,1
	pop $4
	jmp l975
l978:
	push sdbin
	spushs
	push $3
	push $4
	call vin,get
	spop $a
	call [$a],add
	jmp l977
l976:
	jmp l973
l972:
	call vin,free
	jmp l969
l970:
	push 0
	push 1
	call $2,getb
	spushs
	spop $h
	call $h,strisint
	neg
	cmp0
	je l980
	push sdbin
	spushs
	push 0
	spop $a
	call [$a],removerow
l980:
	localint $3
	push 0
	pop $3
l981:
	push $3
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l982
	jmp l984
l983:
	add $3,1
	pop $3
	jmp l981
l984:
	push sdbin
	spushs
	push $3
	push 0
	spop $a
	call [$a],get
	push ","
	call vin,vecbuildfromstring
	push sdbin
	spushs
	push $3
	push 0
	call vin,first
	spop $a
	call [$a],set
	localint $4
	push 1
	pop $4
l985:
	push $4
	call vin,size
	cmpjl
	cmp0
	je l986
	jmp l988
l987:
	add $4,1
	pop $4
	jmp l985
l988:
	push sdbin
	spushs
	push $3
	push $4
	call vin,get
	spop $a
	call [$a],add
	jmp l987
l986:
	jmp l983
l982:
	call vin,free
l969:
l968:
	localint $3
	push 0
	pop $3
l989:
	push $3
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l990
	jmp l992
l991:
	add $3,1
	pop $3
	jmp l989
l992:
	localdef $2
	push "ivin"
	push $3
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new int,[$e]
	push $2
	call vin,add
	push $2
	spushs
	push A
	push "sdata"
	push "null"
	push "knotx"
	push 0
	push "knoty"
	push 0
	push "knotey"
	push 0
	spop $a
	call [$a],vars2
	jmp l991
l990:
	end method
	method draw_initial
	push InitialDepth
	pop Depth
	push 500
	pop Height
	push 3
	pop Dswieca
	push 0
	pop WykresStart
	push 0
	cthis setdepth
	push 0
	cthis setchartstart
	cthis redraw
	end method
	method redraw
	push Depth
	push Height
	push Dswieca
	cthis draw_chart
	end method
	method draw_chart
	localint $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	push 0
	cmpjle
	cmp0
	jne l995
	push $1
	push 0
	cmpjle
	cmp0
	jne l995
	push $2
	push 0
	cmpjle
	cmp0
	jne l995
	push $3
	push 1
	cmpjl
	jmp l996
l994:
	push 0
	jmp l996
l995:
	push 1
l996:
	cmp0
	je l997
	ret
l997:
	localreal $4
	push 1
	pop $4
	localint $5
	push 20
	pop $5
	push $1
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l999
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
l999:
	push 3
	pop $4
	push 5
	pop $3
	localreal $6
	push 5
	pop $6
	localreal $7
	push 5
	pop $7
	localint $8
	push $3
	push $4
	pop $b
	popax
	add $a,$b
	push $1
	push 12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	push $6
	pop $b
	popax
	add $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
l1000:
	push $8
	push 1000
	cmpja
	cmp0
	je l1001
	push $4
	push 1
	cmpja
	cmp0
	je l1003
	sub $4,1
	pop $4
	jmp l1002
l1003:
	push $3
	push 1
	cmpja
	cmp0
	je l1005
	sub $3,1
	pop $3
	jmp l1004
l1005:
	push $4
	push 0
	cmpjl
	cmp0
	je l1007
	push 1.025
	push $4
	pop $b
	popax
	mul $a,$b
	pop $4
	jmp l1006
l1007:
	push $4
	push 0.25
	cmpjl
	cmp0
	je l1009
	push 0.25
	popax
	sub 0,$a
	pop $4
	jmp l1008
l1009:
	push 0.975
	push $4
	pop $b
	popax
	mul $a,$b
	pop $4
l1008:
l1006:
l1004:
l1002:
	push $3
	push $4
	pop $b
	popax
	add $a,$b
	push $1
	push 12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	push $6
	pop $b
	popax
	add $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	jmp l1000
l1001:
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $5
	push 0.0
	pop rmax
	localreal $9
	localreal $10
	localreal $11
	localint $12
	localint $13
	localint $14
	localint $15
	localint $16
	localint $17
	localint $18
	localint $19
	localint $20
	localreal $21
	push 0
	pop $21
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push WykresStart
	pop $b
	popax
	sub $a,$b
	pop $12
	push $12
	push $1
	cmpjl
	cmp0
	je l1011
	push $1
	pop $12
l1011:
	push sdbin
	spushs
	push $12
	push 3
	spop $a
	call [$a],get
	pop rmin
	localreal $22
	push $12
	push 1
	cthis getwol
	pop $22
	push $12
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	cmpjl
	cmp0
	je l1013
	push $12
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
l1013:
	localreal $23
	push 0.0
	pop $23
	localint $24
	push 1
	pop $24
l1014:
	push $24
	push $1
	cmpjle
	cmp0
	je l1015
	jmp l1017
l1016:
	add $24,1
	pop $24
	jmp l1014
l1017:
	push $12
	push $24
	pop $b
	popax
	sub $a,$b
	pop $13
	push sdbin
	spushs
	push $13
	push 2
	spop $a
	call [$a],get
	pop $9
	push $9
	push rmax
	cmpja
	cmp0
	je l1019
	push $9
	pop rmax
l1019:
	push sdbin
	spushs
	push $13
	push 3
	spop $a
	call [$a],get
	pop $9
	push $9
	push rmin
	cmpjl
	cmp0
	je l1021
	push $9
	pop rmin
l1021:
	push $13
	push $22
	cthis getwol
	pop $14
	push $22
	push 0
	cmpje
	cmp0
	je l1023
	push $14
	push 0
	cmpja
	jmp l1025
l1023:
	push 0
	jmp l1025
l1024:
	push 1
l1025:
	cmp0
	je l1026
	push $14
	pop $22
	push $14
	pop $21
l1026:
	push $14
	push $22
	cmpjl
	cmp0
	je l1028
	push $14
	pop $22
l1028:
	push $14
	push $21
	cmpja
	cmp0
	je l1030
	push $14
	pop $21
l1030:
	push $14
	popax
	add $23,$a
	pop $23
	jmp l1016
l1015:
	push $23
	call $1,to_r
	pop $b
	popax
	div $a,$b
	psax
	pop $23
	localreal $25
	push rmax
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $25
	push $25
	push 0
	cmpje
	cmp0
	je l1032
	ret
l1032:
	push $2
	push rh1
	pop $b
	popax
	sub $a,$b
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	pop $b
	popax
	div $a,$b
	psax
	pop $25
	push 0
	push 0
	call imbg,setpos
	push bBgChart
	cmp0
	je l1034
	push 0
	pop bBgChart
	jmp l1033
l1034:
	push $3
	push $4
	pop $b
	popax
	add $a,$b
	push $1
	push 12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	push $6
	pop $b
	popax
	add $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	push $2
	cthis transparent
	call imbg,create
	push sactchart
	spushs
	call imbg,getw
	call imbg,geth
	cthis transparent
	spop $a
	call [$a],create
	push sactchart
	spushs
	push 0
	push 0
	spop $a
	call [$a],setpos
l1033:
	push 1
	call imbg,geth
	cthis black
	push 64
	call immspos,create
	call imbg,getw
	push 1
	cthis black
	push 32
	call imhorizon,create
	new img,imp1
	localreal $26
	localreal $27
	push $21
	push $22
	pop $b
	popax
	sub $a,$b
	pop $27
	localreal $28
	push 90
	pop $28
	localreal $29
	push 240
	pop $29
	localreal $30
	push $29
	push $28
	pop $b
	popax
	sub $a,$b
	pop $30
	localint $31
	localint $32
	localint $33
	localint $34
	push 1
	pop $34
	localreal $35
	localreal $36
	localreal $37
	localreal $38
	localreal $39
	localreal $40
	localreal $41
	localreal $42
	localreal $43
	localreal $44
	localreal $45
	localreal $46
	localreal $47
	localreal $48
	localreal $49
	localint $50
	push 1
	popax
	sub 0,$a
	pop $50
	localint $51
	push 1
	popax
	sub 0,$a
	pop $51
	localint $52
	call mouse,getposx
	pop $52
	localint $53
	push 1
	popax
	sub 0,$a
	pop $53
	localint $54
	push $12
	push $1
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop viewx1
	push $12
	pop viewx2
	localint $55
	localint $56
	localint $57
	push 1
	popax
	sub 0,$a
	pop $57
	localint $58
	push 1
	popax
	sub 0,$a
	pop $58
	localint $59
	push 1
	popax
	sub 0,$a
	pop $59
	localint $60
	push 1
	popax
	sub 0,$a
	pop $60
	localint $61
	push 1
	popax
	sub 0,$a
	pop $61
	localint $62
	push 1
	popax
	sub 0,$a
	pop $62
	localint $63
	push 1
	popax
	sub 0,$a
	pop $63
	localint $64
	push 1
	popax
	sub 0,$a
	pop $64
	localint $65
	push 1
	popax
	sub 0,$a
	pop $65
	localint $66
	push 1
	popax
	sub 0,$a
	pop $66
	localreal $67
	localreal $68
	localreal $69
	localreal $70
	localreal $71
	localreal $72
	localreal $73
	localreal $74
	localreal $75
	localreal $76
	push 1
	popax
	sub 0,$a
	pop rsmatrx1
	push 1
	popax
	sub 0,$a
	pop ratrx
	push 1
	popax
	sub 0,$a
	pop lastlinex
	push 1
	popax
	sub 0,$a
	pop rmimax
	localint $24
	push 1
	pop $24
l1035:
	push $24
	push $1
	cmpjle
	cmp0
	je l1036
	jmp l1038
l1037:
	add $24,1
	pop $24
	jmp l1035
l1038:
	push $12
	push $1
	pop $b
	popax
	sub $a,$b
	push $24
	pop $b
	popax
	add $a,$b
	pop $13
	push sdbin
	spushs
	push $13
	push 1
	spop $a
	call [$a],get
	pop $43
	push sdbin
	spushs
	push $13
	push 2
	spop $a
	call [$a],get
	pop $44
	push sdbin
	spushs
	push $13
	push 3
	spop $a
	call [$a],get
	pop $45
	push sdbin
	spushs
	push $13
	push 4
	spop $a
	call [$a],get
	pop $46
	push $13
	push $22
	cthis getwol
	pop $47
	push $21
	push $47
	pop $b
	popax
	sub $a,$b
	pop $26
	push $26
	push 0
	cmpja
	cmp0
	je l1040
	push 0
	pop $34
	push $26
	push $27
	pop $b
	popax
	div $a,$b
	psax
	pop $26
	push $26
	push $26
	pop $b
	popax
	mul $a,$b
	push $26
	pop $b
	popax
	mul $a,$b
	pop $26
	push $26
	push $30
	pop $b
	popax
	mul $a,$b
	push $28
	pop $b
	popax
	add $a,$b
	pop $26
	push 0
	pop $31
	push 0
	pop $32
	push $26
	push $29
	push 0.7
	pop $b
	popax
	mul $a,$b
	cmpja
	cmp0
	je l1042
	push 0.5
	push $26
	pop $b
	popax
	mul $a,$b
	pop $33
	jmp l1041
l1042:
	push $26
	push $29
	push 0.5
	pop $b
	popax
	mul $a,$b
	cmpja
	cmp0
	je l1044
	push 0.3
	push $26
	pop $b
	popax
	mul $a,$b
	pop $33
	jmp l1043
l1044:
	push 0
	pop $33
l1043:
l1041:
	jmp l1039
l1040:
	push 128
	pop $26
	push 0
	pop $31
	push 0
	pop $32
	push 0
	pop $33
l1039:
	push $43
	push $46
	cmpja
	cmp0
	je l1046
	push $26
	pop $31
	push $33
	pop $32
	push $46
	pop $35
	jmp l1045
l1046:
	push $26
	pop $32
	push $33
	pop $31
	push $43
	pop $35
l1045:
	push $25
	push $44
	push $45
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $9
	push $9
	push 1
	cmpjl
	cmp0
	je l1048
	push 1
	pop $9
l1048:
	push $24
	push $5
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cmpje
	cmp0
	je l1050
	push $2
	push rh1
	pop $b
	popax
	sub $a,$b
	push rh2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpja
	cmp0
	je l1052
	push 1
	push $2
	push rh1
	pop $b
	popax
	sub $a,$b
	push rh2
	pop $b
	popax
	sub $a,$b
	push 64
	cthis grey
	push 32
	call imp1,create
	push $6
	push $4
	push $3
	pop $b
	popax
	add $a,$b
	push $24
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	call imp1,geth
	pop $b
	popax
	sub $a,$b
	call imp1,setpos
	push "imp1"
	call imbg,blit
	jmp l1051
l1052:
	push "rheight-rh1-rh2 <= 0"
	spushs
	spop $h
	call $h,print
l1051:
l1050:
	push $47
	push 0
	cmpja
	cmp0
	je l1054
	push 0
	push 1
	cmpje
	jmp l1056
l1054:
	push 0
	jmp l1056
l1055:
	push 1
l1056:
	cmp0
	je l1057
	push $27
	push 0
	cmpjle
	cmp0
	je l1059
	push "rvol <= 0 : "
	push $27
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	jmp l1058
l1059:
	push $43
	push $46
	cmpja
	cmp0
	je l1061
	push 1
	push 1.0
	push $21
	push $47
	pop $b
	popax
	sub $a,$b
	push $27
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	push 0.5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	mul $a,$b
	push 5
	pop $b
	popax
	add $a,$b
	cthis red
	push 64
	call imp1,create
	jmp l1060
l1061:
	push 1
	push 1.0
	push $21
	push $47
	pop $b
	popax
	sub $a,$b
	push $27
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	push 0.5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	mul $a,$b
	push 5
	pop $b
	popax
	add $a,$b
	cthis green
	push 64
	call imp1,create
l1060:
	push $6
	push $4
	push $3
	pop $b
	popax
	add $a,$b
	push $24
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	call imp1,geth
	pop $b
	popax
	sub $a,$b
	call imp1,setpos
	push "imp1"
	call imbg,blit
l1058:
l1057:
	push 1
	push $9
	push $31
	push $32
	push $33
	push 255
	call imp1,create
	push $6
	push $4
	push $3
	pop $b
	popax
	add $a,$b
	push $24
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $15
	push $15
	pop $55
	push $15
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $45
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call imp1,geth
	pop $b
	popax
	sub $a,$b
	call imp1,setpos
	push bShowLine
	neg
	cmp0
	je l1063
	push sactchart
	spushs
	push "imp1"
	spop $a
	call [$a],blit
l1063:
	push $15
	push $52
	pop $b
	popax
	sub $a,$b
	push iResX
	call imbg,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,abs
	pop $16
	push $53
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1066
	push $16
	push $54
	cmpjl
	jmp l1067
l1065:
	push 0
	jmp l1067
l1066:
	push 1
l1067:
	cmp0
	je l1068
	push $13
	pop $53
	push $16
	pop $54
l1068:
	localdef $77
	push $13
	call vin,get
	pop $77
	push $77
	spushs
	call imp1,getpx
	spop $a
	call [$a],knotx=
	push $77
	spushs
	call imp1,getpy
	spop $a
	call [$a],knoty=
	push $77
	spushs
	call imp1,getey
	spop $a
	call [$a],knotey=
	push $77
	spushs
	push sdbin
	spushs
	push $13
	push 0
	spop $a
	call [$a],get
	spop $a
	call [$a],sdata=
	push $25
	push $43
	push $46
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $b
	popax
	mul $a,$b
	pop $9
	push $9
	push 1
	cmpjl
	cmp0
	je l1070
	push 1
	pop $9
l1070:
	push $3
	push $9
	push $31
	push $32
	push $33
	push 255
	call imp1,create
	push $35
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $9
	push $6
	push $4
	push $3
	pop $b
	popax
	add $a,$b
	push $24
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $9
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call imp1,geth
	pop $b
	popax
	sub $a,$b
	call imp1,setpos
	push bShowLine
	neg
	cmp0
	je l1072
	push sactchart
	spushs
	push "imp1"
	spop $a
	call [$a],blit
l1072:
	push $24
	push $5
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cmpje
	cmp0
	je l1074
	push $24
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	cmpjle
	jmp l1076
l1074:
	push 0
	jmp l1076
l1075:
	push 1
l1076:
	cmp0
	je l1077
	push sdbin
	spushs
	push $13
	push 0
	spop $a
	call [$a],get
	call txtdata,txtset
	call imp1,getpx
	push $2
	call txtdata,geth
	pop $b
	popax
	sub $a,$b
	call txtdata,setpos
	push "txtdata"
	call imbg,blit
l1077:
	push bShowLine
	cmp0
	je l1079
	push lastlinex
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l1081
	push $55
	pop lastlinex
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $46
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop lastliney
	jmp l1080
l1081:
	push 1
	push 1
	push idactchart
	cthis mchartcol
	push 160
	call imgdot,create
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $46
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push sactchart
	spushs
	push "imgdot"
	push lastlinex
	push lastliney
	push $55
	push $56
	push 1
	push 1
	spop $a
	call [$a],imgdrawline
	popax
	push $55
	pop lastlinex
	push $56
	pop lastliney
l1080:
l1079:
	push bMinMax
	cmp0
	je l1083
	push rmimax
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l1085
	push $55
	pop rmimax
	localreal $78
	push $13
	push imimamin
	cthis getminc
	pop $78
	localreal $79
	push $13
	push imimamax1
	cthis getmaxc
	pop $79
	localreal $80
	push $13
	push imimamax2
	cthis getmaxc
	pop $80
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $78
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop rmimay1
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $79
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop rmimay2
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $80
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop rmimay3
	jmp l1084
l1085:
	push $78
	push 0
	cmpjl
	cmp0
	je l1087
	push $13
	push imimamin
	cthis getminc
	pop $78
	push $13
	push imimamax1
	cthis getmaxc
	pop $79
	push $13
	push imimamax2
	cthis getmaxc
	pop $80
	jmp l1086
l1087:
	push $13
	push imimamin
	push $78
	cthis calcminc
	pop $78
	push $13
	push imimamax1
	push $79
	cthis calcmaxc
	pop $79
	push $13
	push imimamax2
	push $80
	cthis calcmaxc
	pop $80
l1086:
	push 1
	push 1
	push 255
	push 0
	push 192
	push 160
	call imgdot,create
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $78
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push "imgdot"
	push rmimax
	push rmimay1
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $56
	pop rmimay1
	push 1
	push 1
	push 0
	push 255
	push 128
	push 160
	call imgdot,create
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $79
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push "imgdot"
	push rmimax
	push rmimay2
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $56
	pop rmimay2
	push 1
	push 1
	push 255
	push 128
	push 0
	push 160
	call imgdot,create
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $80
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push "imgdot"
	push rmimax
	push rmimay3
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $56
	pop rmimay3
	push $55
	pop rmimax
l1084:
l1083:
	push bATR
	cmp0
	je l1089
	push ratrx
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l1091
	push $55
	pop ratrx
	localreal $81
	push $13
	push iatrdepth
	cthis getatr
	pop $81
	localreal $82
	push $13
	push iatrsma
	cthis sumclose
	pop $82
	push $82
	push 0
	cmpjl
	cmp0
	je l1093
	localreal $83
	push 0
	pop $83
	jmp l1092
l1093:
	localreal $83
	push $82
	push iatrsma
	pop $b
	popax
	div $a,$b
	psax
	pop $83
l1092:
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $81
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop ratry
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $83
	push $81
	pop $b
	popax
	sub $a,$b
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop ratry1
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $83
	push $81
	pop $b
	popax
	add $a,$b
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop ratry2
	jmp l1090
l1091:
	localreal $81
	push $13
	push iatrdepth
	cthis getatr
	pop $81
	push $82
	push 0
	cmpjl
	cmp0
	je l1095
	push $13
	push iatrsma
	cthis sumclose
	pop $82
	jmp l1094
l1095:
	push $13
	push iatrsma
	cthis calcsma
	popax
	add $82,$a
	pop $82
l1094:
	push $82
	push 0
	cmpjl
	cmp0
	je l1097
	push 0
	pop $83
	jmp l1096
l1097:
	push $82
	push iatrsma
	pop $b
	popax
	div $a,$b
	psax
	pop $83
l1096:
	localreal $84
	push $83
	push $81
	pop $b
	popax
	sub $a,$b
	pop $84
	localreal $85
	push $83
	push $81
	pop $b
	popax
	add $a,$b
	pop $85
	push $46
	push $84
	cmpjl
	cmp0
	je l1099
	push 1
	push 1
	push 255
	push 0
	push 192
	push 160
	call imgdot,create
	jmp l1098
l1099:
	push $46
	push $85
	cmpja
	cmp0
	je l1101
	push 1
	push 1
	push 0
	push 255
	push 128
	push 160
	call imgdot,create
	jmp l1100
l1101:
	push 1
	push 1
	push 255
	push 128
	push 0
	push 160
	call imgdot,create
l1100:
l1098:
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $81
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push "imgdot"
	push ratrx
	push ratry
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $56
	pop ratry
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $83
	push $81
	pop $b
	popax
	sub $a,$b
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push "imgdot"
	push ratrx
	push ratry1
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $56
	pop ratry1
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $83
	push $81
	pop $b
	popax
	add $a,$b
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push "imgdot"
	push ratrx
	push ratry2
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $56
	pop ratry2
	push $55
	pop ratrx
l1090:
l1089:
	push bSMATR
	cmp0
	je l1103
	push rsmatrx1
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l1105
	push $55
	pop rsmatrx1
	localreal $86
	localreal $87
	push $13
	push ismadepth
	push ismax
	cthis sumsmax
	pop $87
	pop $86
	push $86
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l1107
	push 0
	pop $9
	push 0
	pop $10
	jmp l1106
l1107:
	push $86
	push ismadepth
	pop $b
	popax
	div $a,$b
	psax
	pop $9
	push $87
	push ismadepth
	pop $b
	popax
	div $a,$b
	psax
	pop $10
l1106:
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $9
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop rsmatry1
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $10
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop rsmatry2
	push rsmatry1
	push rsmatry2
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop rsmatry3
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $13
	push ismadepth
	cthis getsma
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop rsmatry4
	jmp l1104
l1105:
	push $86
	push 0
	cmpjl
	cmp0
	je l1109
	push $13
	push ismadepth
	push ismax
	cthis sumsmax
	pop $87
	pop $86
	push 0
	pop $9
	push 0
	pop $10
	jmp l1108
l1109:
	push $13
	push ismadepth
	push ismax
	cthis calcsmax
	pop $10
	pop $9
	push $9
	popax
	add $86,$a
	pop $86
	push $10
	popax
	add $87,$a
	pop $87
	push $86
	push ismadepth
	pop $b
	popax
	div $a,$b
	psax
	pop $9
	push $87
	push ismadepth
	pop $b
	popax
	div $a,$b
	psax
	pop $10
l1108:
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $9
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push $9
	push $46
	cmpjl
	cmp0
	je l1111
	push 1
	push 1
	push 0
	push 255
	push 0
	push 160
	call imgdot,create
	jmp l1110
l1111:
	push $10
	push $46
	cmpja
	cmp0
	je l1113
	push 1
	push 1
	push 255
	push 0
	push 0
	push 160
	call imgdot,create
	jmp l1112
l1113:
	push 1
	push 1
	push 0
	push 0
	push 255
	push 160
	call imgdot,create
l1112:
l1110:
	push "imgdot"
	push rsmatrx1
	push rsmatry1
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $56
	pop rsmatry1
	localreal $88
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $10
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $88
	push "imgdot"
	push rsmatrx1
	push rsmatry2
	push $55
	push $88
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $88
	pop rsmatry2
	push "imgdot"
	push rsmatrx1
	push rsmatry3
	push $55
	push $56
	push $88
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $56
	push $88
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop rsmatry3
	push $55
	pop rsmatrx1
l1104:
l1103:
	push bIchimoku
	cmp0
	je l1115
	push $13
	push tenkan_sen
	pop $b
	popax
	sub $a,$b
	push $13
	cthis getextremes
	pop $68
	pop $67
	popax
	popax
	push $13
	push kijun_sen
	pop $b
	popax
	sub $a,$b
	push $13
	cthis getextremes
	pop $70
	pop $69
	popax
	popax
	push $13
	push senkou_span2
	pop $b
	popax
	sub $a,$b
	push $13
	cthis getextremes
	pop $72
	pop $71
	popax
	popax
	push $57
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	je l1117
	push $55
	pop $57
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $67
	push $68
	pop $b
	popax
	add $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $58
	push $55
	pop $59
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $69
	push $70
	pop $b
	popax
	add $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $60
	push $6
	push $4
	push $3
	pop $b
	popax
	add $a,$b
	push $24
	push chikou_span
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $61
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $46
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $62
	push $6
	push $4
	push $3
	pop $b
	popax
	add $a,$b
	push $24
	push senkou_span1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $63
	push $58
	push $60
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $64
	push $63
	pop $65
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $71
	push $72
	pop $b
	popax
	add $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $66
	jmp l1116
l1117:
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $67
	push $68
	pop $b
	popax
	add $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push 1
	push 1
	push 150
	push 100
	push 0
	push 160
	call imgdot,create
	push "imgdot"
	push $57
	push $58
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $55
	pop $57
	push $56
	pop $58
	push $24
	push 2
	cmpje
	cmp0
	je l1119
	push "tenkan sen"
	call txt1,txtset
	push $55
	push $56
	call txt1,geth
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
l1119:
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $69
	push $70
	pop $b
	popax
	add $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push 1
	push 1
	push 0
	push 0
	push 160
	push 160
	call imgdot,create
	push "imgdot"
	push $59
	push $60
	push $55
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $55
	pop $59
	push $56
	pop $60
	push $24
	push 2
	cmpje
	cmp0
	je l1121
	push "kijun sen"
	call txt1,txtset
	push $55
	push $56
	call txt1,geth
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
l1121:
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $46
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $56
	push $6
	push $4
	push $3
	pop $b
	popax
	add $a,$b
	push $24
	push chikou_span
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $75
	push 1
	push 1
	push 192
	push 180
	push 0
	push 128
	call imgdot,create
	push "imgdot"
	push $61
	push $62
	push $75
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $75
	pop $61
	push $56
	pop $62
	push $24
	push 2
	push chikou_span
	pop $b
	popax
	add $a,$b
	cmpje
	cmp0
	je l1123
	push "chikou span"
	call txt1,txtset
	push $61
	push $62
	call txt1,geth
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
l1123:
	push $6
	push $4
	push $3
	pop $b
	popax
	add $a,$b
	push $24
	push senkou_span1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $75
	push $58
	push $60
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $56
	push $2
	push rh2
	pop $b
	popax
	sub $a,$b
	push $25
	push $71
	push $72
	pop $b
	popax
	add $a,$b
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	pop $76
	push $56
	push $76
	cmpja
	cmp0
	je l1125
	push 1
	push 1
	push 255
	push 0
	push 0
	push 96
	call imgdot,create
	jmp l1124
l1125:
	push 1
	push 1
	push 0
	push 255
	push 0
	push 96
	call imgdot,create
l1124:
	push "imgdot"
	push $75
	push $56
	push $75
	push $76
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push 1
	push 1
	push 128
	push 28
	push 128
	push 96
	call imgdot,create
	push "imgdot"
	push $63
	push $64
	push $75
	push $56
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push 1
	push 1
	push 28
	push 128
	push 128
	push 96
	call imgdot,create
	push "imgdot"
	push $65
	push $66
	push $75
	push $76
	push 1
	push 1
	call imbg,imgdrawline
	popax
	push $75
	pop $63
	push $56
	pop $64
	push $75
	pop $65
	push $76
	pop $66
	push $24
	push 2
	cmpje
	cmp0
	je l1127
	push "senkou span A"
	call txt1,txtset
	push $63
	push $64
	call txt1,geth
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
	push "senkou span B"
	call txt1,txtset
	push $65
	push $66
	call txt1,geth
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
l1127:
l1116:
l1115:
	jmp l1037
l1036:
	push ShowData
	cmp0
	je l1129
	push 0
	pop ShowData
	push "search_extreme_depth:"
	push 7
	cthis readcfg
	pop $17
	push $53
	push $17
	pop $b
	popax
	sub $a,$b
	pop $18
	push $18
	push 0
	cmpjl
	cmp0
	je l1131
	push 0
	pop $18
l1131:
	push $53
	push $17
	pop $b
	popax
	add $a,$b
	pop $19
	push $19
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1133
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
l1133:
	push $18
	push $19
	cthis getextremes
	pop $36
	pop $35
	pop $17
	pop $16
	push sdbin
	spushs
	push $16
	push 0
	spop $a
	call [$a],get
	push " "
	pop $b
	popax
	add $a,$b
	push sdbin
	spushs
	push $16
	push 2
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call txt1,txtset
	localdef $77
	push $16
	call vin,get
	pop $77
	localdef $89
	push 3
	pop $89
	push $77
	spushs
	spop $a
	call [$a],knotx
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $77
	spushs
	spop $a
	call [$a],knoty
	call txt1,geth
	pop $b
	popax
	sub $a,$b
	push $89
	pop $b
	popax
	sub $a,$b
	call txt1,setpos
	call txt1,getpy
	call imbg,getpy
	cmpjl
	cmp0
	je l1135
	push 0
	call imbg,getpy
	call txt1,getpy
	pop $b
	popax
	sub $a,$b
	call txt1,move
l1135:
	call txt1,getey
	call imbg,getey
	cmpja
	cmp0
	je l1137
	push 0
	call imbg,getey
	call txt1,getey
	pop $b
	popax
	sub $a,$b
	push 2
	call txt1,geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call txt1,move
l1137:
	call txt1,getpx
	call imbg,getpx
	cmpjl
	cmp0
	je l1139
	call imbg,getpx
	call txt1,getpx
	pop $b
	popax
	sub $a,$b
	push 0
	call txt1,move
l1139:
	call txt1,getex
	call imbg,getex
	cmpja
	cmp0
	je l1141
	call imbg,getex
	call txt1,getex
	pop $b
	popax
	sub $a,$b
	push 0
	call txt1,move
l1141:
	push "txt1"
	call imbg,blit
	push sdbin
	spushs
	push $17
	push 0
	spop $a
	call [$a],get
	push " "
	pop $b
	popax
	add $a,$b
	push sdbin
	spushs
	push $17
	push 3
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call txt1,txtset
	localdef $90
	push $17
	call vin,get
	pop $90
	push $90
	spushs
	spop $a
	call [$a],knotx
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $90
	spushs
	spop $a
	call [$a],knotey
	push $89
	pop $b
	popax
	add $a,$b
	call txt1,setpos
	call txt1,getpy
	call imbg,getpy
	cmpjl
	cmp0
	je l1143
	push 0
	call imbg,getpy
	call txt1,getpy
	pop $b
	popax
	sub $a,$b
	call txt1,move
l1143:
	call txt1,getey
	call imbg,getey
	cmpja
	cmp0
	je l1145
	push 0
	call imbg,getey
	call txt1,getey
	pop $b
	popax
	sub $a,$b
	push 2
	call txt1,geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call txt1,move
l1145:
	call txt1,getpx
	call imbg,getpx
	cmpjl
	cmp0
	je l1147
	call imbg,getpx
	call txt1,getpx
	pop $b
	popax
	sub $a,$b
	push 0
	call txt1,move
l1147:
	call txt1,getex
	call imbg,getex
	cmpja
	cmp0
	je l1149
	call imbg,getex
	call txt1,getex
	pop $b
	popax
	sub $a,$b
	push 0
	call txt1,move
l1149:
	push "txt1"
	call imbg,blit
	push $77
	spushs
	spop $a
	call [$a],knotx
	push $90
	spushs
	spop $a
	call [$a],knotx
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	cmp0
	je l1151
	push $77
	spushs
	spop $a
	call [$a],knoty
	push $90
	spushs
	spop $a
	call [$a],knotey
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	jmp l1153
l1151:
	push 0
	jmp l1153
l1152:
	push 1
l1153:
	cmp0
	je l1154
	new img,imp2
	push $77
	spushs
	spop $a
	call [$a],knotx
	push $90
	spushs
	spop $a
	call [$a],knotx
	cmpjl
	cmp0
	je l1156
	push $77
	spushs
	spop $a
	call [$a],knotx
	pop $12
	push $90
	spushs
	spop $a
	call [$a],knotx
	pop $13
	jmp l1155
l1156:
	push $90
	spushs
	spop $a
	call [$a],knotx
	pop $12
	push $77
	spushs
	spop $a
	call [$a],knotx
	pop $13
l1155:
	push $77
	spushs
	spop $a
	call [$a],knoty
	push $90
	spushs
	spop $a
	call [$a],knotey
	cmpjl
	cmp0
	je l1158
	push $77
	spushs
	spop $a
	call [$a],knoty
	pop $14
	push $90
	spushs
	spop $a
	call [$a],knotey
	pop $15
	jmp l1157
l1158:
	push $90
	spushs
	spop $a
	call [$a],knoty
	pop $14
	push $77
	spushs
	spop $a
	call [$a],knotey
	pop $15
l1157:
	push $13
	push $12
	pop $b
	popax
	sub $a,$b
	push $15
	push $14
	pop $b
	popax
	sub $a,$b
	push 255
	push 0
	push 0
	push 64
	call imp2,create
	push $12
	push $14
	call imp2,setpos
	push "imp2"
	call imbg,blit
	delete imp2
l1154:
l1129:
	push ShowFiboData
	push 2
	cmpje
	cmp0
	je l1160
	localint $91
	call imbg,getpy
	pop $91
	call imfibo0,svin
	spushs
	spop $a
	call [$a],knotx
	push $91
	call imfibo0,setpos
	call imfibo0,svin
	spushs
	spop $a
	call [$a],sdata
	call txt1,txtset
	call imfibo0,getpx
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call imfibo0,getpy
	call txt1,setpos
	push "txt1"
	call imbg,blit
	call imfibo1,svin
	spushs
	spop $a
	call [$a],knotx
	push $91
	call imfibo1,setpos
	call imfibo1,svin
	spushs
	spop $a
	call [$a],sdata
	call txt1,txtset
	call imfibo1,getpx
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call imfibo1,getpy
	call txt1,setpos
	push "txt1"
	call imbg,blit
	push "imfibo0"
	call imbg,blit
	localint $92
	call imfibo1,svin
	spushs
	spop $a
	call [$a],knotx
	call imfibo0,svin
	spushs
	spop $a
	call [$a],knotx
	pop $b
	popax
	sub $a,$b
	pop $92
	localint $93
	call imfibo0,getpx
	pop $93
	call imfibo0,hide
	localint $24
	push 1
	pop $24
l1161:
	push $24
	call grfibo,size
	cmpjl
	cmp0
	je l1162
	jmp l1164
l1163:
	add $24,1
	pop $24
	jmp l1161
l1164:
	localdef $77
	push $24
	call grfibo,get
	pop $77
	push $77
	push "imfibo1"
	cmpjne
	cmp0
	je l1166
	push $77
	spushs
	push $93
	push $77
	spushs
	spop $a
	call [$a],rfibo
	push $92
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $91
	spop $a
	call [$a],setpos
l1166:
	push $77
	call imbg,blit
	push $77
	spushs
	spop $a
	call [$a],hide
	push $77
	spushs
	spop $a
	call [$a],rfibo
	call txt1,txtset
	push $77
	spushs
	spop $a
	call [$a],getpx
	call txt1,getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $77
	spushs
	spop $a
	call [$a],getpy
	push $24
	call txt1,geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call txt1,setpos
	push "txt1"
	call imbg,blit
	jmp l1163
l1162:
l1160:
	delete imp1
	push iResX
	call imbg,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	call imbg,geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imbg,setpos
	push sactchart
	spushs
	call imbg,getpx
	call imbg,getpy
	spop $a
	call [$a],setpos
	push ichartz
	push 1
	pop $b
	popax
	sub $a,$b
	call grcharts,setz
	push sactchart
	spushs
	push ichartz
	spop $a
	call [$a],setz
	push ichartz
	push 1
	pop $b
	popax
	add $a,$b
	call imbg,setz
	call imbg,getpx
	call imbg,getpy
	call txprice,geth
	pop $b
	popax
	sub $a,$b
	call txprice,setpos
	call imbg,getpx
	call imbg,getey
	call txlink,setpos
	cthis updatemspos
	end method
	method readcfg
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbconf,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1168
	push $3
	push 1
	call dbconf,get
	spushs
	spop $h
	call $h,to_i
	jmp l1167
l1168:
	push $2
l1167:
	end method
	method readstringcfg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	call dbconf,dbget
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1170
	push $2
	jmp l1169
l1170:
	push $1
l1169:
	end method
	method sumclose
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1173
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjl
	jmp l1174
l1172:
	push 0
	jmp l1174
l1173:
	push 1
l1174:
	cmp0
	je l1175
	push 1
	popax
	sub 0,$a
	ret
l1175:
	localreal $3
	push 0.0
	pop $3
	localint $4
	push $1
	pop $4
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
l1176:
	push $1
	push $4
	cmpjle
	cmp0
	je l1177
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	popax
	add $3,$a
	pop $3
	add $1,1
	pop $1
	jmp l1176
l1177:
	push $3
	end method
	method getmaxc
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1180
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	cmpjl
	jmp l1181
l1179:
	push 0
	jmp l1181
l1180:
	push 1
l1181:
	cmp0
	je l1182
	push 1
	popax
	sub 0,$a
	ret
l1182:
	localint $3
	push $1
	pop $3
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	localreal $4
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	pop $4
	add $1,1
	pop $1
l1183:
	push $1
	push $3
	cmpjle
	cmp0
	je l1184
	push $4
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	cmpjl
	cmp0
	je l1186
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	pop $4
l1186:
	add $1,1
	pop $1
	jmp l1183
l1184:
	push $4
	end method
	method calcmaxc
	localint $1
	localint $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1189
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	cmpjl
	jmp l1190
l1188:
	push 0
	jmp l1190
l1189:
	push 1
l1190:
	cmp0
	je l1191
	push 1
	popax
	sub 0,$a
	ret
l1191:
	push $3
	push sdbin
	spushs
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 4
	spop $a
	call [$a],get
	cmpje
	cmp0
	je l1193
	push $1
	push $2
	cthis getmaxc
	jmp l1192
l1193:
	push $3
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	cmpja
	cmp0
	je l1195
	push $3
	jmp l1194
l1195:
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
l1194:
l1192:
	end method
	method getminc
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1198
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	cmpjl
	jmp l1199
l1197:
	push 0
	jmp l1199
l1198:
	push 1
l1199:
	cmp0
	je l1200
	push 1
	popax
	sub 0,$a
	ret
l1200:
	localint $3
	push $1
	pop $3
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	localreal $4
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	pop $4
	add $1,1
	pop $1
l1201:
	push $1
	push $3
	cmpjle
	cmp0
	je l1202
	push $4
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	cmpja
	cmp0
	je l1204
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	pop $4
l1204:
	add $1,1
	pop $1
	jmp l1201
l1202:
	push $4
	end method
	method calcminc
	localint $1
	localint $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1207
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	cmpjl
	jmp l1208
l1206:
	push 0
	jmp l1208
l1207:
	push 1
l1208:
	cmp0
	je l1209
	push 1
	popax
	sub 0,$a
	ret
l1209:
	push $3
	push sdbin
	spushs
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 4
	spop $a
	call [$a],get
	cmpje
	cmp0
	je l1211
	push $1
	push $2
	cthis getminc
	jmp l1210
l1211:
	push $3
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	cmpjl
	cmp0
	je l1213
	push $3
	jmp l1212
l1213:
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
l1212:
l1210:
	end method
	method calcsma
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1216
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	cmpjl
	jmp l1217
l1215:
	push 0
	jmp l1217
l1216:
	push 1
l1217:
	cmp0
	je l1218
	push 1
	popax
	sub 0,$a
	ret
l1218:
	push 0.0
	push sdbin
	spushs
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 4
	spop $a
	call [$a],get
	pop $b
	popax
	sub $a,$b
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	end method
	method getsma
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1221
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjl
	jmp l1222
l1220:
	push 0
	jmp l1222
l1221:
	push 1
l1222:
	cmp0
	je l1223
	push 1
	popax
	sub 0,$a
	ret
l1223:
	localreal $3
	push 0.0
	pop $3
	localint $4
	push $1
	pop $4
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
l1224:
	push $1
	push $4
	cmpjle
	cmp0
	je l1225
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	popax
	add $3,$a
	pop $3
	add $1,1
	pop $1
	jmp l1224
l1225:
	push $3
	call $2,to_r
	pop $b
	popax
	div $a,$b
	psax
	end method
	method getatr
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1228
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	cmpjl
	jmp l1229
l1227:
	push 0
	jmp l1229
l1228:
	push 1
l1229:
	cmp0
	je l1230
	push 1
	popax
	sub 0,$a
	ret
l1230:
	localreal $3
	push 0.0
	pop $3
	localint $4
	push $1
	pop $4
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	localreal $5
	localreal $6
	localreal $7
	localreal $8
	localreal $9
l1231:
	push $1
	push $4
	cmpjle
	cmp0
	je l1232
	push sdbin
	spushs
	push $1
	push 2
	spop $a
	call [$a],get
	pop $5
	push sdbin
	spushs
	push $1
	push 3
	spop $a
	call [$a],get
	pop $6
	push sdbin
	spushs
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	push 4
	spop $a
	call [$a],get
	pop $7
	push $5
	push $6
	pop $b
	popax
	sub $a,$b
	pop $8
	push $5
	push $7
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $9
	push $9
	push $8
	cmpja
	cmp0
	je l1234
	push $9
	pop $8
l1234:
	push $6
	push $7
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $9
	push $9
	push $8
	cmpja
	cmp0
	je l1236
	push $9
	pop $8
l1236:
	push $8
	popax
	add $3,$a
	pop $3
	add $1,1
	pop $1
	jmp l1231
l1232:
	push $3
	call $2,to_r
	pop $b
	popax
	div $a,$b
	psax
	end method
	method getsmax
	localint $1
	localreal $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1239
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjl
	jmp l1240
l1238:
	push 0
	jmp l1240
l1239:
	push 1
l1240:
	cmp0
	je l1241
	push 0.0
	push 0.0
	ret
l1241:
	localreal $4
	push 0.0
	pop $4
	localreal $5
	push 0.0
	pop $5
	localreal $6
	localreal $7
	localint $8
	push $1
	pop $8
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
l1242:
	push $1
	push $8
	cmpjle
	cmp0
	je l1243
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	push $1
	cthis getextremes
	pop $6
	pop $7
	popax
	popax
	push $7
	popax
	add $4,$a
	pop $4
	push $6
	popax
	add $5,$a
	pop $5
	add $1,1
	pop $1
	jmp l1242
l1243:
	push $4
	push $2
	pop $b
	popax
	div $a,$b
	psax
	push $5
	push $2
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method sumsmax
	localint $1
	localreal $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1246
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjl
	jmp l1247
l1245:
	push 0
	jmp l1247
l1246:
	push 1
l1247:
	cmp0
	je l1248
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
l1248:
	localreal $4
	push 0.0
	pop $4
	localreal $5
	push 0.0
	pop $5
	localreal $6
	localreal $7
	localint $8
	push $1
	pop $8
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
l1249:
	push $1
	push $8
	cmpjle
	cmp0
	je l1250
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	push $1
	cthis getextremes
	pop $6
	pop $7
	popax
	popax
	push $7
	popax
	add $4,$a
	pop $4
	push $6
	popax
	add $5,$a
	pop $5
	add $1,1
	pop $1
	jmp l1249
l1250:
	push $4
	push $5
	ret
	end method
	method calcsmax
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1253
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push $3
	pop $b
	popax
	sub $a,$b
	push 1
	cmpjl
	jmp l1254
l1252:
	push 0
	jmp l1254
l1253:
	push 1
l1254:
	cmp0
	je l1255
	push 0.0
	push 0.0
	ret
l1255:
	localint $4
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	pop $4
	localreal $5
	localreal $6
	localreal $7
	localreal $8
	push $4
	push $3
	pop $b
	popax
	sub $a,$b
	push $4
	cthis getextremes
	pop $7
	pop $5
	popax
	popax
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	push $1
	cthis getextremes
	pop $8
	pop $6
	popax
	popax
	push $6
	push $5
	pop $b
	popax
	sub $a,$b
	push $8
	push $7
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method getsmatr
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	jne l1258
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjl
	jmp l1259
l1257:
	push 0
	jmp l1259
l1258:
	push 1
l1259:
	cmp0
	je l1260
	push 1
	popax
	sub 0,$a
	ret
l1260:
	localreal $4
	push 0.0
	pop $4
	localint $5
	push $1
	pop $5
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
l1261:
	push $1
	push $5
	cmpjle
	cmp0
	je l1262
	localint $6
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $6
l1263:
	push $6
	push $1
	cmpjle
	cmp0
	je l1264
	jmp l1266
l1265:
	add $6,1
	pop $6
	jmp l1263
l1266:
	jmp l1265
l1264:
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	popax
	add $4,$a
	pop $4
	add $1,1
	pop $1
	jmp l1261
l1262:
	push $4
	call $2,to_r
	pop $b
	popax
	div $a,$b
	psax
	end method
	method cutindex
	localint $1
	pop $1
	push $1
	push 0
	cmpjl
	cmp0
	je l1268
	push 0
	jmp l1267
l1268:
	push $1
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1270
	push sdbin
	spushs
	spop $a
	call [$a],getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	jmp l1269
l1270:
	push $1
l1269:
l1267:
	end method
	method getextremes
	localint $1
	localint $2
	pop $2
	pop $1
	localreal $3
	localreal $4
	localreal $5
	localint $6
	push 1
	popax
	sub 0,$a
	pop $6
	localint $7
	push 1
	popax
	sub 0,$a
	pop $7
	push $1
	cthis cutindex
	pop $1
	push $2
	cthis cutindex
	pop $2
l1271:
	push $1
	push $2
	cmpjle
	cmp0
	je l1272
	push sdbin
	spushs
	push $1
	push 2
	spop $a
	call [$a],get
	pop $3
	push $7
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1275
	push $4
	push $3
	cmpjl
	jmp l1276
l1274:
	push 0
	jmp l1276
l1275:
	push 1
l1276:
	cmp0
	je l1277
	push $1
	pop $7
	push $3
	pop $4
l1277:
	push sdbin
	spushs
	push $1
	push 3
	spop $a
	call [$a],get
	pop $3
	push $6
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1280
	push $5
	push $3
	cmpja
	jmp l1281
l1279:
	push 0
	jmp l1281
l1280:
	push 1
l1281:
	cmp0
	je l1282
	push $1
	pop $6
	push $3
	pop $5
l1282:
	add $1,1
	pop $1
	jmp l1271
l1272:
	push $7
	push $6
	push $4
	push $5
	ret
	end method
	method updatemspos
	localint $1
	push 1
	popax
	sub 0,$a
	pop $1
	localint $2
	localint $3
	call mouse,getpx
	call imbg,getpx
	pop $b
	popax
	sub $a,$b
	pop $3
	localint $4
	push viewx1
	pop $4
l1283:
	push $4
	push viewx2
	cmpjle
	cmp0
	je l1284
	jmp l1286
l1285:
	add $4,1
	pop $4
	jmp l1283
l1286:
	localdef $5
	push $4
	call vin,get
	pop $5
	push $1
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1289
	push $5
	spushs
	spop $a
	call [$a],knotx
	push $3
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	push $2
	cmpjl
	jmp l1290
l1288:
	push 0
	jmp l1290
l1289:
	push 1
l1290:
	cmp0
	je l1291
	push $4
	pop $1
	push $5
	spushs
	spop $a
	call [$a],knotx
	push $3
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $2
l1291:
	jmp l1285
l1284:
	push $1
	call vin,get
	call immspos,svin=
	push $1
	call vin,get
	spushs
	spop $a
	call [$a],knotx
	call imbg,getpx
	pop $b
	popax
	add $a,$b
	call imbg,getpy
	call immspos,setpos
	localint $6
	call mouse,getposy
	pop $6
	push $6
	call imbg,getpy
	cmpjl
	cmp0
	je l1293
	call imbg,getpy
	pop $6
	jmp l1292
l1293:
	push $6
	call imbg,getey
	cmpjae
	cmp0
	je l1295
	call imbg,getey
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
l1295:
l1292:
	call imbg,getpx
	push $6
	call imhorizon,setpos
	localstring $7
	localint $8
	push 0
	push 3
	call sdbin,gete
	push "log"
	cmpje
	cmp0
	je l1297
	push "dbchart"
	push idactchart
	pop $b
	popax
	add $a,$b
	pop $7
	push 1
	pop $8
	jmp l1296
l1297:
	push sdbin
	pop $7
	push 0
	pop $8
l1296:
	push $7
	spushs
	push $1
	push 0
	spop $a
	call [$a],get
	call txdata,txtset
	push "O: "
	push $7
	spushs
	push $1
	push 1
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call txopen,txtset
	push "H: "
	push $7
	spushs
	push $1
	push 2
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call txmax,txtset
	push "L: "
	push $7
	spushs
	push $1
	push 3
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call txmin,txtset
	push "C: "
	push $7
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	pop $b
	popax
	add $a,$b
	call txclose,txtset
	localreal $9
	push 0.0
	pop $9
	push $1
	push 1
	cmpjae
	cmp0
	je l1299
	localreal $10
	push sdbin
	spushs
	push $1
	push 4
	spop $a
	call [$a],get
	pop $10
	push $10
	push 0
	cmpjne
	cmp0
	je l1301
	push $10
	push sdbin
	spushs
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	push 4
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,to_r
	pop $b
	popax
	sub $a,$b
	push $10
	pop $b
	popax
	div $a,$b
	psax
	push 100.0
	pop $b
	popax
	mul $a,$b
	pop $9
l1301:
l1299:
	localdef $5
	push ""
	push $9
	pop $b
	popax
	add $a,$b
	push "%"
	pop $b
	popax
	add $a,$b
	pop $5
	push $9
	push 0
	cmpja
	cmp0
	je l1303
	push $5
	push 0
	push 128
	push 0
	call txzmiana,txtsetcol
	jmp l1302
l1303:
	push $9
	push 0
	cmpjl
	cmp0
	je l1305
	push $5
	push 128
	push 0
	push 0
	call txzmiana,txtsetcol
	jmp l1304
l1305:
	push $5
	push 0
	push 0
	push 128
	call txzmiana,txtsetcol
l1304:
l1302:
	call imbg,getey
	push rh2
	pop $b
	popax
	sub $a,$b
	call mouse,getpy
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	call imbg,geth
	push rh1
	pop $b
	popax
	sub $a,$b
	push rh2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	pop $b
	popax
	div $a,$b
	psax
	push rmax
	push rmin
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	push rmin
	pop $b
	popax
	add $a,$b
	pop price
	push $8
	cmp0
	je l1307
	push sfileinput
	push ": "
	pop $b
	popax
	add $a,$b
	push price
	spushs
	push MATH_E
	spop $h
	call $h,pow
	pop $b
	popax
	add $a,$b
	push " ,   depth: "
	pop $b
	popax
	add $a,$b
	push Depth
	pop $b
	popax
	add $a,$b
	call txprice,txtset
	jmp l1306
l1307:
	push sfileinput
	push ": "
	pop $b
	popax
	add $a,$b
	push price
	pop $b
	popax
	add $a,$b
	push " ,   depth: "
	pop $b
	popax
	add $a,$b
	push Depth
	pop $b
	popax
	add $a,$b
	call txprice,txtset
l1306:
	end method
	method getwol
	localint $1
	localint $2
	pop $2
	pop $1
	push sdbin
	spushs
	push $1
	spop $a
	call [$a],getcolsno
	push 5
	cmpja
	cmp0
	je l1309
	push sdbin
	spushs
	push $1
	push 5
	spop $a
	call [$a],get
	jmp l1308
l1309:
	push $2
l1308:
	end method
	method keydown
	call tcfile,onkeydown
	call tcanalysis,onkeydown
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l1311
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l1313
	push "s"
	call keyboard,iskey
	cmp0
	je l1315
	localstring $1
	push spath
	push "output/"
	pop $b
	popax
	add $a,$b
	push sfileinput
	pop $b
	popax
	add $a,$b
	push ".bmp"
	pop $b
	popax
	add $a,$b
	pop $1
	new img,imgscreen
	push iResX
	push iResY
	push 255
	push 255
	push 255
	push 255
	call imgscreen,create
	push 2000
	call imgscreen,setz
	call imgscreen,blitscreen
	push "txprice"
	call imgscreen,blit
	push "txclose"
	call imgscreen,blit
	push "txdata"
	call imgscreen,blit
	push "txmax"
	call imgscreen,blit
	push "txmin"
	call imgscreen,blit
	push "txopen"
	call imgscreen,blit
	push "txzmiana"
	call imgscreen,blit
	push $1
	call imgscreen,save
	delete imgscreen
	push "Chart saved to "
	push $1
	pop $b
	popax
	add $a,$b
	cthis showmsg
	jmp l1314
l1315:
	push "l"
	call keyboard,iskey
	cmp0
	je l1317
	push "state_loadfile"
	push "Loading data to chart"
	cthis setstate
	call tcfile,enable
	jmp l1316
l1317:
	push "r"
	call keyboard,iskey
	cmp0
	je l1319
	push "Config reloaded"
	cthis showmsg
	cthis reloadcfg
	cthis redraw
	jmp l1318
l1319:
	push "g"
	call keyboard,iskey
	cmp0
	je l1321
	push "Log data"
	cthis showmsg
	cthis logdata
	cthis redraw
l1321:
l1318:
l1316:
l1314:
	jmp l1312
l1313:
	push "space"
	call keyboard,iskeydown
	cmp0
	je l1323
	cthis draw_initial
	jmp l1322
l1323:
	push "i"
	call keyboard,iskeydown
	cmp0
	je l1325
	push bIchimoku
	neg
	pop bIchimoku
	cthis redraw
	jmp l1324
l1325:
	push "h"
	call keyboard,iskeydown
	cmp0
	je l1327
	push "state_printhelp"
	pop sgmstate
	call tchelp,show
	call imbghelp,show
	jmp l1326
l1327:
	push "s"
	call keyboard,iskey
	cmp0
	je l1329
	push bSMATR
	neg
	pop bSMATR
	cthis redraw
	jmp l1328
l1329:
	push "a"
	call keyboard,iskey
	cmp0
	je l1331
	push bATR
	neg
	pop bATR
	cthis redraw
	jmp l1330
l1331:
	push "l"
	call keyboard,iskey
	cmp0
	je l1333
	push bShowLine
	neg
	pop bShowLine
	cthis redraw
	jmp l1332
l1333:
	push "m"
	call keyboard,iskey
	cmp0
	je l1335
	push bMinMax
	neg
	pop bMinMax
	cthis redraw
	jmp l1334
l1335:
	push "r"
	call keyboard,iskey
	cmp0
	je l1337
	cthis copydbrew
	cthis redraw
l1337:
l1334:
l1332:
l1330:
l1328:
l1326:
l1324:
l1322:
l1312:
	jmp l1310
l1311:
	push sgmstate
	push "state_printhelp"
	cmpje
	cmp0
	je l1339
	push "escape"
	call keyboard,iskey
	cmp0
	jne l1342
	push "h"
	call keyboard,iskey
	jmp l1343
l1341:
	push 0
	jmp l1343
l1342:
	push 1
l1343:
	cmp0
	je l1344
	cthis setstdstate
	call tchelp,hide
	call imbghelp,hide
l1344:
l1339:
l1310:
	end method
	method checkbgchart
	push "lshift"
	call keyboard,iskeydown
	cmp0
	je l1346
	push 1
	pop bBgChart
	push bShowLine
	neg
	pop bShowLine
l1346:
	end method
	method tcfile_onenter
	localstring $1
	cthis get
	cthis get_chart_file
	pop $1
	push $1
	call engine,fileexist
	neg
	cmp0
	je l1348
	push stxtnosuchfile
	push $1
	pop $b
	popax
	add $a,$b
	cthis txtset
	push "Unable to load "
	push $1
	pop $b
	popax
	add $a,$b
	cthis stdstate
	jmp l1347
l1348:
	cthis checkbgchart
	cthis get
	push sfileinput
	cthis load_new_chart
l1347:
	end method
	method tcanalysis_onenter
	localstring $1
	cthis get
	cthis get_anal_file
	pop $1
	push sgmstate
	push "state_loadanal"
	cmpje
	cmp0
	je l1350
	push $1
	call engine,fileexist
	neg
	cmp0
	je l1352
	push sfileanal
	cthis txtset
	push "Unable to load "
	push $1
	pop $b
	popax
	add $a,$b
	cthis stdstate
	jmp l1351
l1352:
	cthis get
	pop sfileanal
	push GAME
	spushs
	push $1
	spop $a
	call [$a],loadanalysis
l1351:
	jmp l1349
l1350:
	cthis get
	pop $1
	push "<"
	call $1,contains
	cmp0
	jne l1355
	push ">"
	call $1,contains
	jmp l1356
l1354:
	push 0
	jmp l1356
l1355:
	push 1
l1356:
	cmp0
	je l1357
	push sfileanal
	cthis txtset
	push "Unable to save "
	push $1
	pop $b
	popax
	add $a,$b
	cthis stdstate
	jmp l1353
l1357:
	push GAME
	spushs
	cthis get
	spop $a
	call [$a],saveanalysis
l1353:
l1349:
	end method
	method load_new_chart
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sfileinput
	push "null"
	cmpje
	cmp0
	je l1359
	ret
l1359:
	call gameapi,getgamename
	spushs
	push $1
	spop $a
	call [$a],load_chart
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],redraw
	push "Succesfuly loaded "
	push $1
	pop $b
	popax
	add $a,$b
	cthis stdstate
	push 0
	call stxtnosuchfile,length
	call $2,getb
	push stxtnosuchfile
	cmpjne
	cmp0
	je l1361
	localint $3
	push iIleSaves
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localint $4
	push 0
	pop $4
l1362:
	push $4
	push iIleSaves
	cmpjl
	cmp0
	je l1363
	jmp l1365
l1364:
	add $4,1
	pop $4
	jmp l1362
l1365:
	push $4
	cthis getsavedinput
	push $2
	cmpje
	cmp0
	je l1367
	push $4
	pop $3
l1367:
	jmp l1364
l1363:
	localint $4
	push $3
	pop $4
l1368:
	push $4
	push 0
	cmpja
	cmp0
	je l1369
	jmp l1371
l1370:
	sub $4,1
	pop $4
	jmp l1368
l1371:
	push "last_input_"
	push $4
	pop $b
	popax
	add $a,$b
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getsavedinput
	cthis setsav
	jmp l1370
l1369:
	push "last_input_0"
	push $2
	cthis setsav
	cthis updatesavebutspos
l1361:
	end method
	method tcfile_ontype
	push "escape"
	call keyboard,iskeydown
	cmp0
	je l1373
	cthis disable
	push "Loading data canceled"
	cthis stdstate
	push sfileinput
	cthis txtset
	jmp l1372
l1373:
	push "delete"
	call keyboard,iskeydown
	cmp0
	je l1375
	push ""
	cthis txtset
l1375:
l1372:
	end method
	method tcanalysis_ontype
	push "escape"
	call keyboard,iskeydown
	cmp0
	je l1377
	cthis disable
	push "Loading analysis canceled"
	cthis stdstate
	push sfileanal
	cthis txtset
	jmp l1376
l1377:
	push "delete"
	call keyboard,iskeydown
	cmp0
	je l1379
	push ""
	cthis txtset
l1379:
l1376:
	end method
	method setsav
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsave,findbyrow
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1381
	call dbsave,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsave,add
	push $3
	push $2
	call dbsave,add
	jmp l1380
l1381:
	push $3
	push 1
	push $2
	call dbsave,set
l1380:
	cthis savesav
	end method
	method getsav
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsave,findbyrow
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1383
	push $1
	push $2
	cthis setsav
	push $2
	jmp l1382
l1383:
	push $3
	push 1
	call dbsave,get
l1382:
	end method
	method issav
	localstring $1
	pop $1
	call dbsave,findbyrow
	push 0
	cmpjae
	end method
	method savesav
	push spath
	push "save.db"
	pop $b
	popax
	add $a,$b
	call dbsave,save
	end method
	method mouse_rclick
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l1385
	push 0
	pop ShowData
	cthis redraw
l1385:
	end method
	method mouse_lclick
	push b_skip_click
	cmp0
	je l1387
	push 0
	pop b_skip_click
	jmp l1386
l1387:
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l1389
	push ShowFiboData
	push 2
	cmpje
	cmp0
	je l1391
	push 0
	pop ShowFiboData
	cthis redraw
	jmp l1390
l1391:
	push ShowFiboData
	push 1
	cmpje
	cmp0
	je l1393
	push 2
	pop ShowFiboData
	push "immspos"
	call imfibo1,clone
	call immspos,svin
	call imfibo1,svin=
	cthis redraw
	jmp l1392
l1393:
	push "f"
	call keyboard,iskeydown
	cmp0
	je l1395
	push ShowFiboData
	push 0
	cmpje
	jmp l1397
l1395:
	push 0
	jmp l1397
l1396:
	push 1
l1397:
	cmp0
	je l1398
	push 0
	pop ShowData
	push 1
	pop ShowFiboData
	push "clone"
	push "immspos"
	call grfibo,veceval1
	call immspos,svin
	call imfibo0,svin=
	cthis redraw
	jmp l1394
l1398:
	push 1
	pop ShowData
	cthis redraw
l1394:
l1392:
l1390:
	jmp l1388
l1389:
	push sgmstate
	push "state_loadanal"
	cmpje
	cmp0
	jne l1401
	push sgmstate
	push "state_saveanal"
	cmpje
	jmp l1402
l1400:
	push 0
	jmp l1402
l1401:
	push 1
l1402:
	cmp0
	je l1403
	call mouse,getpos
	push 0
	push 0
	call tcfile,isin
	cmp0
	je l1405
	call tcfile,get
	call tcanalysis,txtset
l1405:
l1403:
l1388:
l1386:
	end method
	method mouse_move
	push sgmstate
	push "state_std"
	cmpje
	cmp0
	je l1407
	cthis updatemspos
l1407:
	end method
	method exit
	cthis savesav
	end method
	method saveanalysis
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis get_anal_file
	pop $2
	push $1
	pop sfileanal
	new db,dbs
	push "depth "
	push Depth
	pop $b
	popax
	add $a,$b
	push " "
	call dbs,dbaddstringrow
	push "chartstart "
	push WykresStart
	pop $b
	popax
	add $a,$b
	push " "
	call dbs,dbaddstringrow
	push "line "
	push bShowLine
	pop $b
	popax
	add $a,$b
	push " "
	call dbs,dbaddstringrow
	push "ichimoku "
	push bIchimoku
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push tenkan_sen
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push kijun_sen
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push chikou_span
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push senkou_span1
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push senkou_span2
	pop $b
	popax
	add $a,$b
	push " "
	call dbs,dbaddstringrow
	push "smatr "
	push bSMATR
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push ismadepth
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push ismax
	pop $b
	popax
	add $a,$b
	push " "
	call dbs,dbaddstringrow
	push "atr "
	push bATR
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push iatrdepth
	pop $b
	popax
	add $a,$b
	push " "
	pop $b
	popax
	add $a,$b
	push iatrsma
	pop $b
	popax
	add $a,$b
	push " "
	call dbs,dbaddstringrow
	push $2
	call dbs,save
	delete dbs
	push "Analyse saved to "
	push $2
	pop $b
	popax
	add $a,$b
	cthis stdstate
	end method
	method loadanalysis
	localstring $1
	pop $1
	new db,dbl
	push $1
	call dbl,loadscript
	localint $2
	push "depth"
	call dbl,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1409
	push $2
	push 1
	call dbl,get
	pop Depth
l1409:
	push "chartstart"
	call dbl,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1411
	push $2
	push 1
	call dbl,get
	pop WykresStart
l1411:
	push "line"
	call dbl,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1413
	push $2
	push 1
	call dbl,get
	pop bShowLine
l1413:
	push "ichimoku"
	call dbl,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1415
	push $2
	push 1
	call dbl,get
	pop bIchimoku
	push $2
	push 2
	call dbl,get
	pop tenkan_sen
	push $2
	push 3
	call dbl,get
	pop kijun_sen
	push $2
	push 4
	call dbl,get
	pop chikou_span
	push $2
	push 5
	call dbl,get
	pop senkou_span1
	push $2
	push 6
	call dbl,get
	pop senkou_span2
l1415:
	push "smatr"
	call dbl,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1417
	push $2
	push 1
	call dbl,get
	pop bSMATR
	push $2
	push 2
	call dbl,get
	pop ismadepth
	push $2
	push 3
	call dbl,get
	pop ismax
l1417:
	push "atr"
	call dbl,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1419
	push $2
	push 1
	call dbl,get
	pop bATR
	push $2
	push 2
	call dbl,get
	pop iatrdepth
	push $2
	push 3
	call dbl,get
	pop iatrsma
l1419:
	delete dbl
	push "Analyse loaded from "
	push $1
	pop $b
	popax
	add $a,$b
	cthis stdstate
	cthis redraw
	end method
	end game

