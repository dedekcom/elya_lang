/*****************************************************/
public _stdanloop()	{	this.play(-1); }
public _stdanhide()	{	this.hide();	}
public _stdsndloop()	{	this.play(); }
public __std_finish()	{	this.<this+"_FINISH">();	}
public looponfinish(string san)	{	<san>.addmethod("onfinish", "_stdanloop");	}
public hideonfinish(string san)	{	<san>.addmethod("onfinish", "_stdanhide");	}
/*****************************************************/
public string strsube(int ile)	{	this.getb( 0, this.length()-ile );	}
public string strsubb(int ile)	{	this.getb( ile, this.length() - ile );	}
public string strsubbs(string s)	{	this.strsubb( s.length() );	}
public string strsubes(string s)	{	this.strsube( s.length() );	 }
public string strgetto(string schar)	{
	@id = .find(schar);
	id<0 ? .get : .getb(0, id);
}
public string strgeteto(string schar)	{
	@id = .rfind(schar);
	id<0 ? .get : .getb(id+1, .length);
}
public bool streq(string s)	{	.get == s.getb(0, .length);	}
public string strgetfromto(int ipos, string schar)	{	this.getb(ipos, this.find(schar));	}
public string strgetfrom(string schar)	{	.getb(.find(schar)+schar.length, .length );	}
public strremove(string s)	{	.set( .strgetto(s) + .strgetfrom(s) ); }
public bool strisbetween(int b1, int b2)	{
	int ib;
	for(int i=0; i<.length; i++)	{
		ib = .getbyte(i);
		if( ib<b1 || ib>b2 )	return false;
	}
	true;
}
public bool strisint		{	.strisbetween(BYTE0, BYTE9);	}
public bool strisbin	{	.strisbetween(BYTE0, BYTE0+1);	}
public bool strisalpha	{	.strisbetween(BYTEa, BYTEz);	}
public streach(string sfun)	{
	string s;
	for( int i=0; i<.length; i++) {
		s = .getb(i,1);
		<s>.<sfun>(i);
	}
}
public string strdotpos(int pos)	{	.strgetto(".") + "." + .strgetfrom(".")->getb(0,pos);}
/*****************************************************/
public swap(string s1, string s2)	{
	[s1];
	<s1> = [s2];
	<s2> = _;
}
public bool stats(int ile)	{	(ile <= 0) ? false : ( 100->rand <= ile );}
public def between(def i1, def i, def i2)	{	( i < i1 ) ? i1 : (i>i2) ? i2 : i;}
public def max(def val1, def val2)	{	val1>val2 ? val1 : val2;	}
public def min(def val1, def val2)		{	val1<val2 ? val1 : val2;	}
public inextrol(int id, int ile)	{
	int i = id + .get;
	if( i < 1 ) .set(ile);
	else if ( i > ile ) .set(1);
	else .set(i);
}
/*************** do wykorzystania na obiektach!! ***********************************/
public movoffsetr	{	.move(igmoffsetx,0);	}
public movoffsetl	{	.move(-igmoffsetx,0);	}
public imgprint	{
	(this+": pos="+.getposx+","+.getposy+" xy="+.getpx+","+.getpy+" wh="+.getw + ","+.geth + 
		" exy="+.getex +","+.getey+" lod="+.lodx+","+.lody+" z="+.getz)->print;
}
public imgborders(int w, int r, int g, int b, int a)	{	.imgborderss(w,r,g,b,a,"1111"); }
public imgborderss(int w, int r, int g, int b, int a, string sbor)	{
	new img _img_bor;
	_img_bor.create(.getw, w, r,g,b,a);
	_img_bor.setpos(.getpx, .getpy );
	if(sbor.getb(3,1)=="1")
		.blit("_img_bor");
	_img_bor.move(0, .geth-w);
	if(sbor.getb(1,1)=="1")
		.blit("_img_bor");
	_img_bor.create(w,.geth,r,g,b,a);
	_img_bor.setpos(.getpx, .getpy);
	if(sbor.getb(0,1)=="1")
		.blit("_img_bor");
	_img_bor.move(.getw-w, 0);
	if(sbor.getb(2,1)=="1")
		.blit("_img_bor");
	delete _img_bor;
}
public imgroundborder(int w, int r, int g, int b, int a)	{
	.imgborders(w,r,g,b,a);
	.imgerasecorners;
}
public imgerasecorners	{
	@x = .getpx;
	@y = .getpy;
	.putrgba(x,y,.transparent);
	.putrgba(.getex-1,y,.transparent);
	.putrgba(.getex-1,.getey-1,.transparent);
	.putrgba(x,.getey-1,.transparent);
}
public real imgdrawline(string sbrush, int xstart, int ystart, int xstop, int ystop, real istep, real rdy)	{
	.imgfuncline("blit",sbrush,xstart,ystart,xstop,ystop,istep,rdy);
}
public real imgeraseline(string sbrush, int xstart, int ystart, int xstop, int ystop, real istep, real rdy)	{
	.imgfuncline("erase",sbrush,xstart,ystart,xstop,ystop,istep,rdy);
}
public imgputoncenter(string simg)	{	.setpos( <simg>.getcx-.getw/2, <simg>.getcy-.geth/2);	}
public real imgfuncline(string sfun, string sbrush, int xstart, int ystart, int xstop, int ystop, real istep, real rdy)	{
	@dx = xstop-xstart;
	@dy = ystop-ystart;
	real r;
	if( dx==0 )	{
		if( dy<0 )	{
			r = rdy+ystart;
			while( r>=ystop )	{
				<sbrush>.setpos(xstart, r);
				.<sfun>(sbrush);
				r-=istep;
			}
			ystop-r;
		} else if (dy>0)	{
			r = rdy+ystart;
			while( r<=ystop )	{
				<sbrush>.setpos(xstart, r);
				.<sfun>(sbrush);
				r+=istep;
			}
			r-ystop;
		} else rdy;
	} else {
		r = rdy.length(dx, dy);
		real rd;
		while( rdy<=r )	{
			rd = 1.0 - (r-rdy)/r;
			<sbrush>.setpos( (rd*dx)+xstart, (rd*dy)+ystart );
			.<sfun>(sbrush);
			rdy+=istep;
		}
		rdy-r;
	}
}
public anresizemets()	{	anima_pack::resizemethods(this.getname());	}
//public def anfirstnontr	{	classansearcher::firstnotrx1y(this);	}
public def anfirstnontr	{	classansearcher::_findnotr(this,.getpx, .getpy, 1, 0);	}
public anloopfin()	{	this.addmethod("onfinish", "_stdanloop");	}
public anloopplay(int iact)	{	this.anloopfin();	this.play(iact);	}
public anloopsplay(string sact)	{	this.anloopfin();	this.play(sact);	}
public anhidefin()	{	this.addmethod("onfinish","_stdanhide");	}
public anputgr()	{	this.setz( this.getey() );	}
public anputy(int ypos)	{	this.move(0, ypos - this.geth() - this.getpy());	}
public anputx(int xpos)	{	this.move(0, xpos - this.geth() - this.getpy());	}
public ansetposgr(int x, int y)	{	this.setpos(x,y);	this.anputgr();	}
public anplayz(int id, int z)	{	this.setz(z);	this.play(id);	}
public anplaygr(int id)	{	this.play(id);	this.anputgr();	}
public anplayzpos(int id, int z, int x, int y)	{	this.setpos(x,y);	this.anplayz(id,z);	}
public anplaypos(int x, int y)	{	this.setpos(x,y);	this.play(-1);	}
public anplayposgr(int x, int y)	{	this.ansetposgr(x,y);	this.play(-1);	}
public anplaypos2(int x, int y, string sact)	{	this.setpos(x,y);	this.play(sact);	}
public anplaypos3(int x, int y, int iact)	{	this.setpos(x,y);	this.play(iact);	}
public anhide()	{	this.stop(false);	this.hide();	}
public andownpos(int x, int y)	{	this.setpos( x, y-this.geth() );	}
public ansetbpos(int x, int y)	{	this.setpos( x-this.lodx(), y-this.lody() );	}
public ansetcpos(int x, int y)	{	.ansetbpos( x - .getw/2, y - .geth/2 );	}
public ancenterscreen {       .ansetcpos( igmappw/2, igmapph/2 ); }
public ancenterimg(string simg)	{	.ansetcpos( <simg>.getpx+<simg>.getw/2, <simg>.getpy+<simg>.geth/2 );	}
public imgfit(int x, int y, int ex, int ey)	{
	if( .getpx < x ) .move( x-.getpx, 0 );
	if( .getpy < y ) .move( 0, y-.getpy );
	if( .getex > ex ) .move( ex-.getex, 0 );
	if( .getey > ey ) .move( 0, ey-.getey );
}
public imgfitscreen	{	.imgfit( igmoffsetx, igmoffsety, iResX+igmoffsetx, iResY+igmoffsety );	}
public ansetframe(int id)	{	this.setframe( this.actionnr(-1), id );	}
public ansetsframe(def d, string s)	{
	.setframe(d,0);
	int id = 0;
	while( id < .nofframes(-1) && .framename!=s )	{
		id++;
		.setframe(-1,id);
	}
}
public ansetlastframe(def act)	{	.setframe( act, .nofframes(act)-1 );	}
public int anonscreen()	{	clsurf.inscreen(this.getcx(), this.getcy(), this.getw()/2, this.geth()/2);	}
public objplayfin(string sfun)	{	this.addmethod("onfinish", sfun);	this.play();	}
public objloop()	{	this.addmethod("onfinish","_stdsndloop");	}
public objplayloop()	{	this.objloop;	this.play();	}
public anplayfin(def act, string sfun)	{	this.addmethod("onfinish", sfun);	this.play(act);	}
public anplaysmoothfin(def act, string sfun)	{	.addmethod("onfinish", sfun);	.playsmooth(act);	}
public anplayif(def act)	{ if( .isplaying(act)==false ) .play(act);	}
public anytoz()	{	this.setz(this.getposy());	}
public anposz(int x, int y, int z)	{	.setpos(x,y);	.setz(z);	}
public string annextaction(string sact)	{ this.nameofaction( (this.actionnr(sact)+1)%this.nofactions() );}
public int annextact	{ (.actionnr(-1)+1)%.nofactions; }
public ansetnextact	{	.setframe( (.actionnr(-1)+1)%.nofactions, 0 ); }
public ansetnextfr		{	.setframe( -1, (.framenr+1)%.nofframes(-1)); }
public ansetrandfr	{	.setframe(-1, .nofframes(-1)->rand);	}
public anhasaction(string sac)	{	.actionnr(sac) != .nofactions;}
public anaddfilter()	{	classanfilter::build(this.getname());	}
public anaddfx	{	AnimaFx::build( this );	}
public anputc(int x1, int y1, int x2, int y2)	{
	.ansetbpos(x1,y1);
	.move( (x2-x1-.getw)/2, (y2-y1-.geth)/2 );
}
public aninlod(int itoler)	{	itoler.length( .getpx - .lodx, .getpy - .lody ) <= itoler; }
public angetcpos	{	return .getcx, .getcy;	}
public anactnr	{	.actionnr(-1);	}
public angetcrgba	{	.getrgba(.getcx, .getcy);	}
public anisin(int x, int y, bool bv, bool ba)	{
	for( int i=0; i<.nofactions; i++)	{
		.setframe(i, 0);
		if( .isin(x,y,bv,ba) ) return i;
	}
	-1;
}
public anreload(string sfile)	{
	int id = .actionnr(-1);
	int fr = .framenr;
	bool bplay = .isplaying(-1)!=false;
	|int x, int y| = .getpos;
	int z = .getz;
	.load( .getpath(sfile) );
	.setpos(x, y);
	.setz(z);
	if( id < .nofactions ) {
		if( bplay ) .play(id);
		.setframe(id ,fr );
	} else .setframe(0 ,0);
}
public anclipob(string sob)	{	.clip(<sob>.getpx, <sob>.getpy, <sob>.getex, <sob>.getey);	}
public anclipscreen		{	.clip(0,0,igmappw,igmapph);	}
public ancopy(string san)	{	// 4.06.2014 zmienione z ancopyan
	.setframe( <san>.actionnr(-1), <san>.framenr );
	<san>.isvisible ? .show : .hide;
	.setpos( <san>.getpos );
}
public anconstmove(int delay, int x, int y)	{
	.vars2(A, "mvx", x, "mvy", y);
	.setdelay(delay);
	.anplayfin(-1, func { .play(-1); .move(mvx, mvy); });
}
//---------------- sounds --------------------
public fxplayifgr(string ssnd,int istart, int iend)	{
	while( <ssnd+istart>.isplaying && istart < iend )	{
		istart++;
	}
	<ssnd+istart>.playif;
}
//--------------- scale ----------------
public scmove(int x, int y)	{	.move( rgmscalex*x, rgmscaley*y );	}
public scpos(int x, int y)	{	.setpos( rgmscalex*x, rgmscaley*y );	}
public int igetsc		{
	if( .get < 0 ) (rgmscalex*.get-0.5)->to_i;
	else (rgmscalex*.get + 0.5)->to_i;
}
public int igetsc1		{
	@id = .igetsc;
	(id.abs<1 ? id.sgn : id);
}
public real rgetsc		{	rgmscalex * .get;	}
/***************** text ****************/
public txtset(string s)	{	.set(s);	.create;	}
public txtsetcol(string s, int r, int g, int b)	{	.set(s);	.createtxt(r,g,b);	}
public txtshadow(int w, string sfont)	{
	if( !.hasvar("txts") )	{
		new text txts;
		txts.setfont(sfont);
	}
	txts.set(.get);
	txts.setpos(.getpx+w, .getpy+w);
	txts.setz(.getz-1);
	txts.show;
	txts.createtxt(0,0,0);
}
public txthides	{	.hide; if(.hasvar("txts")) txts.hide; }
public txtshows	{	.show; if(.hasvar("txts")) txts.show; }
public txtisin(int x, int y)	{
	x>=.getpx && x<.getpx+.getw && y>=.getpy && y<=.getpy+.geth;
}
public txtcenter(string sob)	{	.setpos( <sob>.getcx - .getw/2, <sob>.getcy - .geth/2 );}
public txtright(string sob)	{	.setpos( <sob>.getex - .getw, <sob>.getcy - .geth/2 );}
public txtcenterscreen		{	.setpos( (igmappw-.getw)/2, (igmapph-.geth)/2 );	}
public imgfittxt( string stxt, string simg, string simgtxt, int stepy, bool bcreate )	{
	if( bcreate )	{
		.create( <simg>.getw, <simg>.geth + 2*stepy, .transparent );
		.setpos( <simg>.getpx, <simg>.getpy );
	}
	
	new vector _vtmplin;
	_vtmplin.type("string");
	_vtmplin.vecbuildfromstring(stxt, " ");
	string s = "", string s2, string s3;
	int x, int y, int ex, int ey;
	bool bnewline, bool bnextline;
	string snewline = "\\n";
	
	int yp = <simg>.getpy;
	|x, y| = classansearcher::_findnotr(simg, <simg>.getpx, yp, 1, 0);
	|ex, ey| = classansearcher::_findnotr(simg, <simg>.getex-1, yp, -1, 0);
	for( int i=0; i< _vtmplin.size; i++)	{
		s2 = s;
		s3 = _vtmplin.get(i);
		
		if( s3.contains(snewline) )	{
			string st1 = s3.strgetto(snewline);
			string st2 = s3.strgetfrom(snewline);
			if( st1.length > 0 ) {
				s3 = st1;
			} else s3 = "";
			if( st2.length > 0 )	{
				_vtmplin.vecaddat(i+1, st2);
			}
			bnewline=true;
		} else bnewline = false;
		s += s3 + " ";
		<simgtxt>.txtset(s);
		<simgtxt>.setpos( x, yp );
		if( <simgtxt>.getpx + <simgtxt>.getw > ex || bnewline )	{
			if( <simgtxt>.getpx + <simgtxt>.getw <= ex )	{
				s2 = "";
			} else if ( bnewline && i+1<_vtmplin.size)	{
				_vtmplin.set(i+1, snewline + _vtmplin.get(i+1));
			}
			if( s2!="" ) {
				<simgtxt>.txtset(s2);
				s = s3 + " ";
				s2 = s;
			} else {
				s = "";
				s2 = "";
			}
			.blit( simgtxt );
			yp += stepy;
			if( yp < <simg>.getey )	{
				|x, y| = classansearcher::_findnotr(simg, <simg>.getpx, yp, 1, 0);
				|ex, ey| = classansearcher::_findnotr(simg, <simg>.getex-1, yp, -1, 0);
			}
		}
	}
	if( s!="" ) {
		<simgtxt>.txtset(s);
		<simgtxt>.setpos( x, yp );
		.blit(simgtxt);
	}
	delete _vtmplin;
}
/***************** vector ****************/
public vecinc(int pos)	{	this.set( pos, this.get(pos)+1 );	}
public vecdec(int pos)	{	this.set( pos, this.get(pos)-1 );		}
public vecnewint(int ile)	{
	this.free();
	if( ile>0 )	for( int i=0; i<ile; i++)	{	this.add(i);	}
}
public veccopy(string svec)	{
	this.free();
	for( int i=0; i< <svec>.size(); i++ )	this.add( <svec>.get(i) );
}
public int vecnextid(def val)	{
	int id = .find(val);
	if( id>=0 )	id = (id+1)%.size;
	id;
}
public int vecprevid(def val)	{
	int id = .find(val);
	if( id>0 )	id--;
	else if (id==0)	id = .size-1;
	id;
}
public def vecget(int id)	{
	( id>=0 && id<.size) ? .get(id) : null;
}
public def vecnext(def val)	{	.vecget( .vecnextid(val) );	}
public def vecprev(def val)	{	.vecget( .vecprevid(val) );	}
public def veclast()	{
	int ile = this.size();
	ile>0 ? this.get(ile-1) : null;
}
public def vecpop()	{
	@x = .last;
	.removeat( .size - 1 );
	x;
}
public veclimes(int ile)	{	while( .size > ile )	_ = .vecpop;	}
public def vecpopfront()	{
	def x = this.get(0);
	this.removeat( 0 );
	x;
}
public vecreplace(def d1, def d2)	{
	@id = .find(d1);
	if( id>=0 )	.set(id,d2);
}
public insertsort(int ile, string sgetfun, string scomparefun, string sswapfun)	{
	if( ile<=1 )	{	return;	}
	def s[2], int id, int i, int j;
	for( i=0; i<ile; i++)	{
		s0 = this.<sgetfun>(i);
		id = i;
		for( j=i+1; j<ile; j++)	{
			s1 = this.<sgetfun>(j);
			if( this.<scomparefun>(s1,s0) )	{
				s0 = s1;
				id = j;
			}
		}
		this.<sswapfun>(i,id);
	}
}
public obbuildfromstring(string s, string separator, string sfunadd)	{
	int pos = s.find(separator);
	while( pos>-1 )	{
		this.<sfunadd>( s.getb(0,pos) );
		s = s.strsubb(pos+1);
		pos = s.find(separator);
	}
	if( s.length()>0 )	{	this.<sfunadd>(s);	}
}
public obbuildfromstring2(string s, string separator, string sfunadd)	{
	int pos = s.find(separator);
	while( pos>-1 )	{
		if( pos>0 )	this.<sfunadd>( s.getb(0,pos) );
		s = s.strsubb(pos+1);
		pos = s.find(separator);
	}
	if( s.length()>0 )	{	this.<sfunadd>(s);	}
}
public vecsort(string scomparefun)	{ .insertsort( .size, "get", scomparefun,"swap" ); }
public string vecbuildfromstring(string s, string separator)	{
	this.free();
	this.obbuildfromstring(s,separator,"add");
}
public string vecbuildfromstring2(string s, string separator)	{
	this.free();
	this.obbuildfromstring2(s,separator,"add");
}
public vecremoveto(int ito)		{	for( int i=0; i<ito; i++ ) this.removeat(0);		}
public vecremovefrom(int ifrom)	{	while( ifrom<this.size() ) this.removeat(ifrom);	}
public vecfindfrom(int ifrom, def d)	{
	while (ifrom<.size)	{
		if( .get(ifrom)==d ) return ifrom;
		else ifrom++;
	}
	-1;
}
public vecposfromto(int i1, int i2)	{
	if( i1==i2 || .size==0 )	return;
	def x = .get(i1);
	if( i1>i2 )	for( int i=i1; i>i2; i--)	{	.set(i, .get(i-1));		}
	else if (i1<i2)	for( int i=i1; i<i2; i++)	{	.set(i, .get(i+1));	}
	.set(i2,x);
}
public vecposfirst( def x )	{
	int id = .find(x);
	if( id>=0 )	.vecposfromto(id, 0);
	else	.addbegin(x);
}
public vecposlast( def x )	{
	int id = .find(x);
	if( id>=0 )	.vecposfromto(id, .size-1);
	else	.addbegin(x);
}
public vecset(def x, def d2)	{
	int id = .find(x);
	if( id>=0 )	.set(id,d2);
}
public bool veceq(string svec)	{
	int id = .size;
	if( id != <svec>.size  )	return false;
	for( int i=0; i< id; i++)	if( .get(i)!=<svec>.get(i) ) return false;
	true;
}
public vecbuild	{	.withlist("addbegin");}
public bool veceq2	{
	new vector ___v;
	___v.type(.getvectype);
	___v.vecbuild;
	bool b = .veceq("___v");
	delete ___v;
	b;
}
public veccopydbrow(string sdb, int irow)	{	.free;	 .vecadddbrow(sdb,irow);	}
public vecadddbrow(string sdb, int irow)	{	for( int i=0; i< <sdb>.getcolsno(irow); i++)	.add( <sdb>.get(irow,i) );	}
public def vecchecknext(int id)	{
	id++;
	id < .size ? .get(id) : null;
}
public vecaddat(int pos, def val)	{
	if( pos>=0 && pos <= .size )	{
		.add(val);
		for( int i=.size-1; i>pos; i-- )	{
			.set(i, .get(i-1));
		}
		.set(pos,val);
	}
}
public def vecsumto(int ile)	{
	if( ile<0 || .size==0 ) {
		return 0;
	} else if( ile > .size ) {
		ile = .size;
	}
	def sum = .get(0);
	for( int i=1; i<ile; i++)	{
		sum+=.get(i);
	}
	sum;
}
public def vecsum	{	.vecsumto(.size);	}
public int vecclosest(def val)	{
	int ile = .size;
	if( ile <= 0 ) return -1;
	int id = 0;
	def ipom = (val - .get(0))->abs;
	for( int i=1; i<ile; i++)	{
		def ipom2 = (val - .get(i))->abs;
		if( ipom2<ipom )	{
			id = i;
			ipom = ipom2;
		}
	}
	id;
}
public vecloadargs	{
	@s = _;
	while(s!=A)	{
		.addbegin(s);
		@s = _;
	}
}
public vecbuildlines(string stxt, int charlimit)	{
	.free;
	.type("string");
	if( charlimit <= 0 ) return;
	new vector _vtmplin;
	_vtmplin.type("string");
	_vtmplin.vecbuildfromstring(stxt, " ");
	string s = "";
	for( int i=0; i< _vtmplin.size; i++)	{
		s+=_vtmplin.get(i) + " ";
		if( s.length >= charlimit )	{
			.add(s);
			s = "";
		}
	}
	if( s!="" ) .add(s);
	delete _vtmplin;
}
/************** db ************************/
public dbbuild(int icol)	{
	if( icol<=0 )	return;
	icol--;
	.free;
	string s = _, int id;
	for( int i = 0; s!=A; )	{
		if( i==0 )	id = this.addbeginrow() - 1;
		this.addbegin(0,s);
		s = _;
		i = (i<icol)? i+1 : 0;
	}
}
public dbbuild2	{
	.free;
	string s = _;
	while( s!=A )	{
		if( s==null )	_ = .addbeginrow;
		else .addbegin(0,s);
		s = _;
	}
}
public dbaddvec(string svec)	{
	@id = .addrow-1;
	for( int i=0; i< <svec>.size; i++)	.add(id, <svec>.get(i));
}
public dbcopy(string sdb)	{	.dbcopyfromto(sdb, 0, <sdb>.getrowsno);}
public dbcopyrow(string sdb, int irow)	{	.dbcopyfromto(sdb,irow,irow+1);	}
public dbcopyfromto(string sdb, int i1, int i2)	{
	.free;
	.dbaddrowfromto(sdb,i1,i2);
}
public dbaddrowfromto(string sdb, int i1, int i2)	{
	int i, int j, int row;
	for( i =i1; i< i2; i++)	{
		row = .addrow-1;
		for( j=0; j< <sdb>.getcolsno(i); j++)	{
			.add( row, <sdb>.get(i,j) );
		}
	}
}
public dbadddbrowtorow(int myrow, string sdb, int row)	{
	for( int i=0; i< <sdb>.getcolsno(row); i++)	{
		.add( myrow, <sdb>.get(row,i) );
	}
}
public dbremovecol(int col)	{	for(int i=0; i<.getrowsno; i++) if( .getcolsno(i)>col ) .removeat(i,col);	}
public dbcopyfromtos(string sdb, string sfrom, string sto)	{
	.dbcopyfromto(sdb, <sdb>.findbyrow(sfrom)+1, <sdb>.findbyrow(sto));
}
public dbremovelast()	{
	.removerow( .getrowsno-1 );
}
public dbcuttosize(int isize)	{
	if( isize>0 ) while( .getrowsno > isize )	.dbremovelast;
	else	.free;
}
public dbaddlast(string svar)	{	this.add( this.getrowsno()-1, svar );	}
public dbaddstringrow(string s, string separator)	{
	_ = this.addrow();
	this.obbuildfromstring(s,separator,"dbaddlast");
}
public dbrowtostring(int row, int colstart, int colend, string separator)	{
	string s="";
	int ile = .getcolsno(row)-1;
	if( colend<0 || colend > ile )
		colend = ile;
	for( ; colstart<=colend; colstart++) s+= .get(row,colstart) + separator;
	s;
}
public dbgetstringrow(int row)	{	.dbrowtostring(row, 0, -1, "");	}
public dbaddrow	{
	@id = .addrow - 1;
	@s = _;
	while(A!=s)	{
		.addbegin(id, s);
		@s = _;
	}
}
public dbaddrowfrom(string sdb, int irow, int icol)	{
	if( <sdb>.rowinrange(irow) && icol>=0)	{
		int id = this.addrow()-1;
		int ile = <sdb>.getcolsno(irow);
		while( icol < ile )	{
			this.add( id, <sdb>.get( irow, icol ) );
			icol++;
		}
	}
}
public string dbchecknext(int irow, int icol)	{
	icol++;
	icol < this.getcolsno(irow) ? this.get(irow,icol) : null;
}
public string dbgets(string s, int icol)	{
	@id = .findbyrow(s);
	if( id>=0 && .getcolsno(id)>icol ) .get(id,icol);
	else null;
}
public string dbget(string s)	{ @id=.findbyrow(s); id>=0 ? .get( id, 1 ) : null; }
public int dbgetint(string s)	{ @id=.findbyrow(s); id>=0 ? .get( id, 1 )->to_i : 0; }
public def dbgetdef(string s, def val)	{ @id=.findbyrow(s); id>=0 ? .get( id, 1 ) : val; }
public real dbgetscr(string s)	{ @id=.findbyrow(s); id>=0 ? .get( id, 1 )->to_r*rgmscalex : 0.0; }
public int dbinsertless(int i1)	{
	int id = this.addrow()-1;
	this.add(id,i1);
	this.dbsort("cmpless");
	while( id>=0 )	{
		if( i1==this.get(id,0) )	return id;
		id--;
	}
	-1;
}
public bool dbdelvar(int irow, string svar)	{ this.dbdelvarn(irow,svar,1);}
public bool dbdelvarn(int irow, string svar, int n)	{
	int id = this.dbfindinrow(irow,svar);
	if( id>=0 )	{
		this.removen(irow,id,n);
		return true;
	}
	false;
}
public int dbfindinrow(int irow, string svar)	{
	if( this.rowinrange(irow) )	{
		for( int i=0; i<this.getcolsno(irow); i++)	if( this.get(irow,i)==svar )	return i;
	}
	-1;
}
public int dbfindbycol(int icol, string svar)	{
	for( int i=0; i<this.getrowsno(); i++)	{if( this.get(i,icol)==svar ) return i;}
	-1;
}
public bool dbrowcontains(int irow, string svar)	{	this.dbfindinrow(irow,svar)!=-1;	}
public string dbfirst(int id)		{	this.get(id,0);	}	
public bool cmpless(int i1, int i2)	{	i1<i2;	}
public bool cmpabove(int i1, int i2)	{	i1>i2;	}
public bool dbfirstless(int i1, int i2)	{	.get(i1,0) < .get(i2,0);	}
public dbsort(string scomparefun)	{	.insertsort( .getrowsno, "dbfirst",scomparefun, "swap" ); }
public dbsetall(string svar)	{	for( @i=0; i<.getrowsno; i++)	for(@j=0; j<.getcolsno(i); j++)	.set(i,j,svar);	}
public dbeach_row(string sfun)	{	for( @i=0; i<.getrowsno; i++) .<sfun>(i);	}
public dbeq(string sdb)	{
	if( .getrowsno != <sdb>.getrowsno ) return false;
	int ile, int j;
	for( int i=0; i<.getrowsno; i++)	{
		ile = .getcolsno(i);
		if( ile!=<sdb>.getcolsno(i) ) return false;
		for( j=0; j<ile; j++)	{
			if( .get(i,j)!=<sdb>.get(i,j) ) return false;
		}
	}
	true;
}
/************** int ************************/
public int randdiff(int zakres, int odjakiej)	{
	if( zakres<=1 )		return -1;
	for( int i1 = zakres.rand; i1==odjakiej; i1= zakres.rand )	{}
	i1;
}
public int bin_to_i	{
	string s = .get;
	int idwa = 1;
	int iout = 0;
	for( int i=s.length-1; i>=0; i--)	{
		if( s.getb(i,1)=="1") iout+=idwa;
		idwa*=2;
	}
	iout;
}
//----------------- timer ------------
public timsetmstick(int ims)	{	.settick(ims.imstotick);	}
