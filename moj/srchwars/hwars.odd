; Dominik Dagiel   ix 2005

	new db,dbconf
	push "configs/config.beh"
	call dbconf,loadscript
	method readcfg
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbconf,findbyrow
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l2
	push $2
	jmp l1
l2:
	push $3
	push 1
	call dbconf,get
l1:
	end method
	method ireadscfg
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	call $2,igetsc
	cthis readcfg
	spushs
	spop $h
	call $h,to_i
	spushs
	spop $h
	call $h,igetsc
	end method
	push "enginedebug:"
	push 0
	cthis readcfg
	call engine,setdebugstate
	new int,igmdebug
	push "igmdebug:"
	push 0
	cthis readcfg
	pop igmdebug
	new int,igmpcdebug
	push "igmpcdebug:"
	push 0
	cthis readcfg
	pop igmpcdebug
	push igmpcdebug
	cmp0
	je l4
	call mouse,showsys
l4:
	new int,igmexportan
	push "igmexportan:"
	push 0
	cthis readcfg
	pop igmexportan
	new int,igmimportan
	push "igmimportan:"
	push 0
	cthis readcfg
	pop igmimportan
	new int,igmenablesave
	push "igmenablesave:"
	push 0
	cthis readcfg
	pop igmenablesave
	new int,igmdelay
	push "igmdelay:"
	call engine,getloopdelay
	cthis readcfg
	pop igmdelay
	method imstotick
	push 0.5
	cthis to_r
	push igmdelay
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,to_i
	end method
	method iticktoms
	push igmdelay
	cthis get
	pop $b
	popax
	mul $a,$b
	end method
	new int,igmwinlocal
	push "igmwinlocal:"
	push 0
	cthis readcfg
	pop igmwinlocal
	new int,igmmac
	push "igmmac:"
	push 0
	cthis readcfg
	pop igmmac
	new int,igmipad
	push "igmipad:"
	push 0
	cthis readcfg
	pop igmipad
	new int,igmiphone
	push "igmiphone:"
	push 0
	cthis readcfg
	pop igmiphone
	new int,igmandroid
	push "igmandroid:"
	push 0
	cthis readcfg
	pop igmandroid
	new string,sgmdeveloper
	push "sgmdeveloper:"
	push "Dagiel"
	cthis readcfg
	pop sgmdeveloper
	new string,sgmproject
	push "sgmproject:"
	call dbconf,dbget
	pop sgmproject
	method isapple
	push igmipad
	cmp0
	jne l6
	push igmmac
	cmp0
	jne l6
	push igmiphone
	jmp l7
l5:
	push 0
	jmp l7
l6:
	push 1
l7:
	end method
	method checktouchpad
	push igmipad
	cmp0
	jne l9
	push igmiphone
	cmp0
	jne l9
	push igmandroid
	jmp l10
l8:
	push 0
	jmp l10
l9:
	push 1
l10:
	end method
	new int,igmappw
	new int,igmapph
	call engine,getappsize
	pop igmapph
	pop igmappw
	new int,igmoffsetx
	new int,igmoffsety
	call engine,getscreenoffset
	pop igmoffsety
	pop igmoffsetx
	new int,iResX
	new int,iResY
	call engine,getscreenres
	pop iResY
	pop iResX
	new real,rgmscalex
	new real,rgmscaley
	call engine,getscreenscale
	pop rgmscaley
	pop rgmscalex
	new int,i1024offsetx
	push 171
	spushs
	spop $h
	call $h,igetsc
	pop i1024offsetx
	method getxoffset
	push igmandroid
	cmp0
	je l12
	call engine,getxandro
	push igmoffsetx
	cmpjl
	cmp0
	je l14
	push igmoffsetx
	jmp l13
l14:
	call engine,getxandro
l13:
	jmp l11
l12:
	push igmoffsetx
l11:
	end method
	method getappcenter
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method edgeex
	push iResX
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	end method
	method edgeey
	push iResY
	push igmoffsety
	pop $b
	popax
	add $a,$b
	end method
	method getwinpath
	localstring $1
	pop $1
	localstring $2
	push "appdata"
	call engine,getspecialpath
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l16
	push $2
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	jmp l15
l16:
	push $1
l15:
	end method
	method getsavepath
	cthis isapple
	cmp0
	je l18
	call engine,getsavepath
	jmp l17
l18:
	push igmwinlocal
	cmp0
	je l20
	push "saves/"
	cthis getwinpath
	jmp l19
l20:
	push "saves/"
l19:
l17:
	end method
	method buildsavedir
	push igmwinlocal
	cmp0
	je l22
	cthis isapple
	neg
	jmp l24
l22:
	push 0
	jmp l24
l23:
	push 1
l24:
	cmp0
	je l25
	localstring $1
	push "appdata"
	call engine,getspecialpath
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l27
	push "/"
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	localint $2
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l30
	push $2
	push 1
	cmpje
	jmp l31
l29:
	push 0
	jmp l31
l30:
	push 1
l31:
	cmp0
	je l32
	push "/"
	push sgmproject
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l35
	push $2
	push 1
	cmpje
	jmp l36
l34:
	push 0
	jmp l36
l35:
	push 1
l36:
	cmp0
	je l37
	push "/saves"
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	popax
l37:
l32:
l27:
l25:
	end method
	cthis buildsavedir
	new string,A
	push "!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	new int,BYTE0
	push "0"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE0
	new int,BYTE9
	push "9"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE9
	new int,BYTEa
	push "a"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEa
	new int,BYTEz
	push "z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEz
	new int,BYTEA
	push "A"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEA
	new int,BYTEZ
	push "Z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEZ
	new int,BYTE_
	push "_"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE_
	new int,BYTESPACE
	push " "
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTESPACE
	method empty_func
	end method
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l39
	push $1
	push $2
	cthis varnew
l39:
	end method
	method vardelif
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l41
	push $1
	cthis vardel
l41:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global0"
	cthis addmethod
	end method
	method global0
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global1"
	cthis addmethod
	end method
	method global1
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l42:
	push A
	push $2
	cmpjne
	cmp0
	je l43
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l42
l43:
	end method
	method withlist2
	localstring $1
	pop $1
	localdef $2
	pop $2
l44:
	push A
	push $2
	cmpjne
	cmp0
	je l45
	localdef $3
	pop $3
	push $1
	spushs
	push $3
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l44
l45:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method vars2
	push "var2"
	cthis withlist2
	end method
	method builder_func
	localstring $1
	pop $1
	cthis getbuildername
	spushs
	cthis getbuildername
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l47
	push $1
	push "null"
	cmpje
	cmp0
	je l49
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l48
l49:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l48:
l47:
	end method
	method add_callfun
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],global2
	end method
	method global2
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localdef $4
	push $1
	push "_callfun_"
	pop $b
	popax
	add $a,$b
	pop $4
	push A
	push $4
	push "sob"
	pop $b
	popax
	add $a,$b
	push $2
	push $4
	push "sfun"
	pop $b
	popax
	add $a,$b
	push $3
	cthis vars2
	push $4
	push "global3"
	cthis addmethod
	push $4
	end method
	method global3
	localdef $1
	cthis methodname
	pop $1
	push $1
	push "sob"
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	push $1
	push "sfun"
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	cthis callfun
	end method
	method fullname_callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis getfullname
	push $1
	push $2
	cthis add_callfun
	end method
	method dprint
	localstring $1
	pop $1
	localint $2
	call engine,getstack
	pop $2
	push "stack="
	push $2
	pop $b
	popax
	add $a,$b
	push " : "
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	method printargs
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l50:
	push $1
	push 0
	cmpja
	cmp0
	je l51
	localdef $3
	pop $3
	push "("
	call $3,gettype
	pop $b
	popax
	add $a,$b
	push ") "
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push "  "
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	sub $1,1
	pop $1
	jmp l50
l51:
	push "args: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l52:
	push A
	push $3
	cmpjne
	cmp0
	je l53
	push $1
	neg
	cmp0
	je l55
	push $2
	push $3
	cmpje
	pop $1
l55:
	localdef $3
	pop $3
	jmp l52
l53:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l56:
	push $2
	push A
	cmpjne
	cmp0
	je l57
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l56
l57:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global4"
	cthis addmethod
	end method
	method global4
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l58:
	push $2
	push A
	cmpjne
	cmp0
	je l59
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l58
l59:
	end method
	method mresize
	cthis gettype
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	cthis getname
	spop $a
	 clparent [$a],resizemethods
	end method
	method times
	localstring $1
	pop $1
	push 0
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis for_plus
	end method
	method upto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_plus
	end method
	method downto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_minus
	end method
	method for_plus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l61
	ret
l61:
l62:
	push $1
	push $2
	cmpjle
	cmp0
	je l63
	jmp l65
l64:
	add $1,1
	pop $1
	jmp l62
l65:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l64
l63:
	end method
	method for_minus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l67
	ret
l67:
l68:
	push $1
	push $2
	cmpjae
	cmp0
	je l69
	jmp l71
l70:
	sub $1,1
	pop $1
	jmp l68
l71:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l70
l69:
	end method
	method double_for
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	push 0
	pop $5
l72:
	push $5
	push $1
	cmpjl
	cmp0
	je l73
	jmp l75
l74:
	add $5,1
	pop $5
	jmp l72
l75:
	push 0
	pop $4
l76:
	push $4
	push $2
	cmpjl
	cmp0
	je l77
	jmp l79
l78:
	add $4,1
	pop $4
	jmp l76
l79:
	push $3
	spushs
	push $5
	push $4
	spop $d
	cthis [$d]
	jmp l78
l77:
	jmp l74
l73:
	end method
	class classobjcounter
	method init
	localstring $1
	pop $1
	new string,_sprefix
	push $1
	pop _sprefix
	new int,_iile
	push 0
	pop _iile
	push "limit"
	push 0
	cthis var2
	end method
	method get
	push limit
	push 0
	cmpja
	cmp0
	je l81
	push _iile
	push limit
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop _iile
	jmp l80
l81:
	add _iile,1
	pop _iile
l80:
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	end method
	method getid
	localint $1
	pop $1
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	end method
	end class

	class classsignals
	method init
	end method
	method stdfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "classsignals0"
	spop $a
	call [$a],addmethod
	end method
	method classsignals0
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdstart
	localstring $1
	pop $1
	push $1
	spushs
	push "onstart"
	push "classsignals1"
	spop $a
	call [$a],addmethod
	end method
	method classsignals1
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdsigs
	localstring $1
	pop $1
	push $1
	cthis stdstart
	push $1
	cthis stdfinish
	end method
	method buildanima
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "onendframe"
	push "classsignals2"
	spop $a
	call [$a],addmethod
	end method
	method classsignals2
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildsnd
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	end method
	method buildtimer
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "ontick"
	push "classsignals3"
	spop $a
	call [$a],addmethod
	end method
	method classsignals3
	cthis getname
	push "_TICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildbut
	localstring $1
	pop $1
	push $1
	spushs
	push "onclick"
	push "classsignals4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onrel"
	push "classsignals5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveon"
	push "classsignals6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveoff"
	push "classsignals7"
	spop $a
	call [$a],addmethod
	end method
	method classsignals4
	cthis getname
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals5
	cthis getname
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals6
	cthis getname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals7
	cthis getname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	method unlocked
	push _block
	push 0
	cmpje
	end method
	method setaslocker
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlocker"
	push "classlocker0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlocker
	push $1
	spushs
	push "lock"
	push "lock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlock"
	push "unlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setlock"
	push "setlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getlock"
	push "getlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlocked"
	push "unlocked"
	spop $a
	call [$a],addmethod
	end method
	method classlocker0
	new int,_block
	push 1
	pop _block
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l82:
	push $2
	push $3
	cmpjl
	cmp0
	je l83
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l82
l83:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l85
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
l85:
	end method
	end module

	class collection
	method init
	localstring $1
	pop $1
	new string,stype
	push $1
	pop stype
	end method
	method type
	push stype
	end method
	end class

	class array
	parent collection
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	clparent collection,init
	new int,idim
	push $2
	pop idim
	new int,isize
	push $3
	pop isize
	new vector,vec
	push $1
	call vec,type
	push $2
	push 0
	cmpja
	cmp0
	je l87
	push $3
	push 0
	cmpja
	jmp l89
l87:
	push 0
	jmp l89
l88:
	push 1
l89:
	cmp0
	je l90
	push $2
	call $3,pow
	push 0
	call vec,resize
l90:
	end method
	method getid
	localint $1
	push 0
	pop $1
	localint $2
	push idim
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l91:
	push $2
	push 0
	cmpja
	cmp0
	je l92
	popax
	add $1,$a
	pop $1
	push isize
	popax
	mul $1,$a
	pop $1
	sub $2,1
	pop $2
	jmp l91
l92:
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method get
	cthis getid
	call vec,get
	end method
	method set
	localdef $1
	pop $1
	cthis getid
	push $1
	call vec,set
	end method
	method getsize
	push isize
	end method
	method getdim
	push idim
	end method
	end class

	class stack
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vec
	push $1
	call vec,type
	push $1
	spushs
	spop $d
	new [$d],var
	end method
	method push
	localstring $1
	pop $1
	push $1
	call vec,add
	end method
	method top
	call vec,last
	end method
	method pop
	cthis top
	pop var
	call vec,size
	push 1
	pop $b
	popax
	sub $a,$b
	call vec,removeat
	push var
	end method
	method free
	call vec,free
	end method
	end class

	class map
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new int,isize
	push 0
	pop isize
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	neg
	cmp0
	je l94
	push $1
	cthis add
l94:
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],set
	end method
	method add
	localstring $1
	pop $1
	push stype
	spushs
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method get
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	end method
	method remove
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method contains
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	end method
	end class

	class map2
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vn
	push "string"
	call vn,type
	new vector,vec
	push $1
	call vec,type
	end method
	method add
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,add
	push $2
	call vec,add
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis contains
	cmp0
	je l96
	push $1
	call vn,find
	push $2
	call vec,set
	jmp l95
l96:
	push $1
	push $2
	cthis add
l95:
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call vn,contains
	end method
	method get
	localstring $1
	pop $1
	push $1
	call vn,find
	call vec,get
	end method
	method calc
	localstring $1
	localstring $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localdef $4
	push $1
	call vn,find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l98
	localdef $5
	push $4
	call vec,get
	pop $5
	push $2
	spushs
	push "+"
	cmpst
	jne l100
	spop $a
	push $1
	push $5
	push $3
	pop $b
	popax
	add $a,$b
	cthis set
	jmp l99
l100:
	push "-"
	cmpst
	jne l101
	spop $a
	push $1
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	cthis set
	jmp l99
l101:
	push "*"
	cmpst
	jne l102
	spop $a
	push $1
	push $5
	push $3
	pop $b
	popax
	mul $a,$b
	cthis set
	jmp l99
l102:
	push "/"
	cmpst
	jne l103
	spop $a
	push $1
	push $5
	push $3
	pop $b
	popax
	div $a,$b
	psax
	cthis set
	jmp l99
l103:
	push "%"
	cmpst
	jne l104
	spop $a
	push $1
	push $5
	push $3
	pop $b
	popax
	div $a,$b
	push $d
	cthis set
	jmp l99
l104:
	spop $a
l99:
l98:
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call vn,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l106
	push $2
	call vec,removeat
	push $2
	call vn,removeat
l106:
	end method
	method free
	call vn,free
	call vec,free
	end method
	method print
	localint $1
	push 0
	pop $1
l107:
	push $1
	call vn,size
	cmpjl
	cmp0
	je l108
	jmp l110
l109:
	add $1,1
	pop $1
	jmp l107
l110:
	push $1
	call vn,get
	push ": "
	pop $b
	popax
	add $a,$b
	push $1
	call vec,get
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	jmp l109
l108:
	end method
	end class

	class Music
	method init
	new vector,vmus
	push "string"
	call vmus,type
	new int,ilastid
	push A
	push "musicvolume"
	push 100
	push "globalvolume"
	push 100
	cthis vars2
	new string,smixer
	push "gameapi"
	pop smixer
	end method
	method smixer
	push smixer
	end method
	method smixer=
	localstring $1
	pop $1
	push $1
	pop smixer
	cthis updatevolume
	end method
	method playdb
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	call vmus,free
l111:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l112
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l111
l112:
	push 0
	pop ilastid
	cthis play
	end method
	method playvec
	localstring $1
	localint $2
	pop $2
	pop $1
	call vmus,free
l113:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l114
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	call vmus,add
	add $2,1
	pop $2
	jmp l113
l114:
	push 0
	pop ilastid
	cthis play
	end method
	method playstr
	localstring $1
	pop $1
	push $1
	push " "
	call vmus,vecbuildfromstring
	push 0
	pop ilastid
	cthis play
	end method
	method play
	push ilastid
	call vmus,size
	cmpjae
	cmp0
	je l116
	ret
l116:
	localstring $1
	push MUSICPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
	push 0
	push 3
	call $1,gete
	push "ogg"
	cmpjne
	cmp0
	je l118
	push 0
	push 3
	call $1,gete
	push "wav"
	cmpjne
	jmp l120
l118:
	push 0
	jmp l120
l119:
	push 1
l120:
	cmp0
	je l121
	push ".ogg"
	popax
	add $1,$a
	pop $1
l121:
	push $1
	call engine,fileexist
	neg
	cmp0
	je l123
	push SFXPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
l123:
	add ilastid,1
	pop ilastid
	localint $2
	push 0
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	push 0
	pop $4
	push globalvolume
	pop musicvolume
	localint $5
	push ilastid
	pop $5
l124:
	push $5
	call vmus,size
	cmpjl
	cmp0
	je l125
	jmp l127
l126:
	add $5,1
	pop $5
	jmp l124
l127:
	localdef $6
	push $5
	call vmus,get
	pop $6
	push $6
	spushs
	push "-l"
	cmpst
	jne l129
	spop $a
	push 1
	pop $2
	jmp l128
l129:
	push "-v"
	cmpst
	je l131
	push "-vol"
	cmpst
	je l131
	jmp l130
l131:
	spop $a
	add $5,1
	pop $5
	push $5
	call vmus,get
	pop musicvolume
	jmp l128
l130:
	push "-fin"
	cmpst
	jne l132
	spop $a
	add $5,1
	pop $5
	push $5
	call vmus,get
	pop $3
	jmp l128
l132:
	push "-fout"
	cmpst
	jne l133
	spop $a
	add $5,1
	pop $5
	push $5
	call vmus,get
	pop $4
	jmp l128
l133:
	push "-p"
	cmpst
	jne l134
	spop $a
	jmp l128
l134:
	spop $a
	push $5
	pop ilastid
	call vmus,size
	pop $5
l128:
	jmp l126
l125:
	cthis updatevolume
	push $2
	cmp0
	je l136
	call vmus,size
	pop ilastid
	push smixer
	push "engine"
	cmpje
	cmp0
	je l138
	call engine,ismusicplaying
	cmp0
	je l138
	call engine,getactmusic
	push $1
	cmpje
	jmp l140
l138:
	push 0
	jmp l140
l139:
	push 1
l140:
	cmp0
	je l141
	jmp l137
l141:
	push smixer
	spushs
	push $1
	spop $a
	call [$a],playmusic
l137:
	jmp l135
l136:
	push smixer
	spushs
	push $1
	spop $a
	call [$a],loadmusic
	push $3
	cmp0
	je l143
	push smixer
	spushs
	push $3
	spop $a
	call [$a],fadeinmusic
	jmp l142
l143:
	push smixer
	spushs
	spop $a
	call [$a],startmusic
l142:
	push $4
	cmp0
	je l145
	push smixer
	spushs
	push $4
	spop $a
	call [$a],fadeoutmusic
l145:
l135:
	end method
	method getvol
	push globalvolume
	push musicvolume
	pop $b
	popax
	mul $a,$b
	push 100
	pop $b
	popax
	div $a,$b
	psax
	end method
	method fadeout
	localint $1
	pop $1
	push smixer
	spushs
	spop $a
	call [$a],ismusicplaying
	cmp0
	je l147
	push smixer
	spushs
	push $1
	spop $a
	call [$a],fadeoutmusic
	call vmus,size
	pop ilastid
l147:
	end method
	method updatevolume
	push smixer
	spushs
	cthis getvol
	spop $a
	call [$a],setmusicvol
	end method
	method isplaying
	push smixer
	spushs
	spop $a
	call [$a],ismusicplaying
	end method
	method getactmusic
	call engine,getactmusic
	end method
	method stop
	push smixer
	spushs
	push 0
	spop $a
	call [$a],endmusic
	end method
	end class

	new int,igmstate
	new string,sgmstate
	method printstate
	push "sgmstate = "
	push sgmstate
	pop $b
	popax
	add $a,$b
	push " ,  igmstate = "
	pop $b
	popax
	add $a,$b
	push igmstate
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	new int,igmdemo
	push "igmdemo:"
	push 0
	cthis readcfg
	pop igmdemo
	new int,igmbegin
	push 1
	pop igmbegin
	new int,igmsoundson
	push "igmsoundson:"
	push 1
	cthis readcfg
	pop igmsoundson
	new string,sgmfontfile
	push "sgmfontfile:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontfile
	new string,sgmfontmono
	push "sgmfontmono:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontmono
	new string,sgmfontmonobold
	push "sgmfontmonobold:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontmonobold
	new string,sgmfontbold
	push "sgmfontbold:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontbold
	new string,sgmfontitalic
	push "sgmfontitalic:"
	push "configs/fonts/normal.ttf"
	cthis readcfg
	pop sgmfontitalic
	new string,SFXPATH
	push "sfxpath:"
	push "sounds/sfx/"
	cthis readcfg
	pop SFXPATH
	new string,BGRPATH
	push "sndbgrpath:"
	push "sounds/sfx/"
	cthis readcfg
	pop BGRPATH
	new string,MUSICPATH
	push "musicpath:"
	push "sounds/music/"
	cthis readcfg
	pop MUSICPATH
	new string,LANG
	new string,LANGDIR
	new string,SNDPATH
	method LANG=
	localdef $1
	pop $1
	push $1
	pop LANG
	push "sounds/"
	push LANG
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop SNDPATH
	push "lang/"
	push LANG
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop LANGDIR
	end method
	push "lang:"
	push "eng"
	cthis readcfg
	cthis LANG=
	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method _checkfont
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l149
	push sgmfontfile
	pop $1
l149:
	push ".ttf"
	call $1,contains
	cmp0
	je l151
	push $3
	spushs
	spop $e
	new font,[$e]
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	pop $1
l151:
	push $1
	end method
	method checkfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "_fnt"
	cthis _checkfont
	end method
	method begingame
	push igmbegin
	neg
	pop igmbegin
	push igmbegin
	neg
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpjle
	cmp0
	je l153
	ret
l153:
	sub $3,1
	pop $3
l154:
	push $3
	push 0
	cmpjae
	cmp0
	je l155
	push $1
	spushs
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l154
l155:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	push $1
	call engine,setpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	end method
	method getsndpath
	push _sclwavpath
	end method
	method getpath
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l157
	push 1
	call $1,strsubb
	jmp l156
l157:
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
l156:
	end method
	method pathload
	localstring $1
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	cthis load
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new anima,[$e]
	push 0
	push 4
	call $2,gete
	push ".pyz"
	cmpjne
	cmp0
	je l159
	push ".pyz"
	popax
	add $2,$a
	pop $2
l159:
	localdef $4
	push $2
	cthis getpath
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],load
	push igmdebug
	cmp0
	je l161
	push igmexportan
	cmp0
	je l163
	push $1
	spushs
	push "debug/"
	push 0
	call $4,length
	push "/"
	call $4,strgeteto
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	sub $a,$b
	call $4,getb
	pop $b
	popax
	add $a,$b
	push "/"
	call $4,strgeteto
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],saveimages
	jmp l162
l163:
	push igmimportan
	cmp0
	je l165
	push "debug/"
	push ".pyz"
	call $4,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push "0.png"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l167
	push $1
	spushs
	push $4
	spop $a
	call [$a],loadimages
l167:
l165:
l162:
l161:
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	spushs
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpja
	cmp0
	je l169
	localint $5
	push 0
	pop $5
l170:
	push $5
	push $4
	cmpjl
	cmp0
	je l171
	jmp l173
l172:
	add $5,1
	pop $5
	jmp l170
l173:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l172
l171:
l169:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpja
	cmp0
	je l175
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
l175:
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	spushs
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l176:
	push $6
	push $5
	cmpjl
	cmp0
	je l177
	jmp l179
l178:
	add $6,1
	pop $6
	jmp l176
l179:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	cmpjne
	cmp0
	je l181
	push $4
	spushs
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l181:
	jmp l178
l177:
	push $5
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	spushs
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new img,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	push MUSICPATH
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method snewsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	end method
	method _newsnd
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push "."
	call $2,contains
	neg
	cmp0
	je l183
	push ".wav"
	popax
	add $2,$a
	pop $2
l183:
	push $2
	call engine,fileexist
	neg
	cmp0
	je l185
	push "wav"
	call $2,strsubes
	push "ogg"
	pop $b
	popax
	add $a,$b
	pop $2
l185:
	push $3
	cmp0
	je l187
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
l187:
	push $1
	spushs
	push $2
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l189
	push $1
	push $2
	call subtitle,register
l189:
	end method
	method newsfx
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push SFXPATH
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis _newsnd
	end method
	method newbgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push BGRPATH
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis _newsnd
	end method
	method newbgrloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newbgr
	push $1
	cthis sndplayloop
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis _newsnd
	end method
	method newsndfree
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	push 1
	cthis _newsnd
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l190:
	push $8
	push $7
	cmpjl
	cmp0
	je l191
	jmp l193
l192:
	add $8,1
	pop $8
	jmp l190
l193:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new snd,[$e]
	push $6
	spushs
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l192
l191:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],setcycle
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	cmp0
	je l195
	push $1
	cthis looponfinish
	jmp l194
l195:
	push "H"
	call $2,contains
	cmp0
	je l197
	push $1
	cthis hideonfinish
l197:
l194:
	push "P"
	call $2,contains
	cmp0
	je l199
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l199:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l200:
	push $6
	push $4
	cmpjl
	cmp0
	je l201
	jmp l203
l202:
	add $6,1
	pop $6
	jmp l200
l203:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	cmpjne
	cmp0
	je l205
	push $3
	spushs
	push $5
	spop $a
	call [$a],add
l205:
	jmp l202
l201:
	push $4
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	push 0
	pop $5
l206:
	push $5
	push $4
	cmpjl
	cmp0
	je l207
	jmp l209
l208:
	add $5,1
	pop $5
	jmp l206
l209:
	push $1
	push $2
	push $5
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	push $3
	cthis newanframesgr
	popax
	jmp l208
l207:
	push $4
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	spushs
	spop $a
	call [$a],hide
	push $6
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],loadscritp
	end method
	method vargmset
	localstring $1
	localdef $2
	pop $2
	pop $1
	localstring $3
	call gameapi,getgamename
	pop $3
	push $3
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l211
	push $3
	spushs
	call $2,gettype
	push $1
	spop $a
	call [$a],varnew
l211:
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	end class

	new anima,anmsc
	class classadvmouse
	method init
	new string,sactac
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	push "onendframe"
	push "setnextframe"
	call anmsc,addmethod
	push "onsetframe"
	push "classadvmouse0"
	call anmsc,addmethod
	call anmsc,hide
	end method
	method classadvmouse0
	cthis hide
	end method
	method stdload
	push igmdebug
	neg
	cmp0
	je l213
	cthis checktouchpad
	jmp l215
l213:
	push 0
	jmp l215
l214:
	push 1
l215:
	cmp0
	je l216
	push "scripts/common/kursorypad.pyz"
	cthis load
	jmp l212
l216:
	push "scripts/common/cursors.pyz"
	cthis load
l212:
	end method
	method setnextframe
	call anmsc,ansetnextfr
	push "anmsc"
	call mouse,setcursor
	end method
	method setif
	localstring $1
	pop $1
	cthis get
	push $1
	cmpjne
	cmp0
	je l218
	push $1
	cthis set
l218:
	end method
	method set
	localstring $1
	pop $1
	push $1
	pop sactac
	push $1
	call anmsc,isplaying
	neg
	cmp0
	je l220
	push $1
	call anmsc,play
l220:
	push "anmsc"
	call mouse,setcursor
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setact
	push "active"
	cthis set
	end method
	method setbut
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	end method
	method lodx
	call anmsc,lodx
	end method
	method lody
	call anmsc,lody
	end method
	method refresh
	push sactac
	push "null"
	cmpjne
	cmp0
	je l222
	push sactac
	cthis set
l222:
	end method
	end class

	new classadvmouse,advmouse
	call advmouse,stdload
	cthis checktouchpad
	neg
	cmp0
	je l224
	call advmouse,setstd
	push "anmsc"
	call engine,stdbutcursor
l224:
	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l225
	push $1
	push $5
	cmpjle
	cmp0
	je l225
	push $2
	push $4
	cmpjae
	cmp0
	je l225
	push $2
	push $6
	cmpjle
	jmp l227
l225:
	push 0
	jmp l227
l226:
	push 1
l227:
	end method
	method isin2
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l228
	push $1
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l228
	push $2
	push $4
	cmpjae
	cmp0
	je l228
	push $2
	push $4
	push $6
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l230
l228:
	push 0
	jmp l230
l229:
	push 1
l230:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	end method
	method insurf
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $3
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis isin
	end method
	method issurfin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l232
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l232
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l232
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l232
	push $1
	push $5
	cmpjl
	cmp0
	je l233
	push $3
	push $7
	cmpja
	cmp0
	je l233
	push $2
	push $6
	cmpjl
	cmp0
	je l233
	push $4
	push $8
	cmpja
	jmp l235
l233:
	push 0
	jmp l235
l234:
	push 1
l235:
	jmp l236
l231:
	push 0
	jmp l236
l232:
	push 1
l236:
	end method
	method commonsurface
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis issurfin
	cmp0
	jne l238
	push $5
	push $6
	push $7
	push $8
	push $1
	push $2
	push $3
	push $4
	cthis issurfin
	jmp l239
l237:
	push 0
	jmp l239
l238:
	push 1
l239:
	end method
	method commonimgs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis commonsurface
	end method
	method commonimgsurf
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push $3
	push $4
	push $5
	cthis commonsurface
	end method
	method surfwithinsurf
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l240
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l240
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l240
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l242
l240:
	push 0
	jmp l242
l241:
	push 1
l242:
	end method
	method imgwithinimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis surfwithinsurf
	end method
	end module

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	end method
	method ileny
	push ily
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen5
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis ilen
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	cmpjae
	cmp0
	je l243
	push ilx
	push $6
	cmpjle
	cmp0
	je l243
	push ily
	push $5
	cmpjae
	cmp0
	je l243
	push ily
	push $7
	cmpjle
	jmp l245
l243:
	push 0
	jmp l245
l244:
	push 1
l245:
	end method
	method ilodlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],lody
	push $2
	spushs
	spop $a
	call [$a],lodx
	push $2
	spushs
	spop $a
	call [$a],lody
	cthis ilen
	end method
	method iposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpos
	push $2
	spushs
	spop $a
	call [$a],getpos
	cthis ilen
	end method
	end module

	class classansearcher
	method init
	end method
	method _findnotr
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $6
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $7
l246:
	push $2
	push $6
	cmpjne
	cmp0
	je l247
	push $3
	push $7
	cmpjne
	jmp l249
l247:
	push 0
	jmp l249
l248:
	push 1
l249:
	cmp0
	je l250
	push $1
	spushs
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l252
	push $2
	push $3
	ret
l252:
	push $4
	popax
	add $2,$a
	pop $2
	push $5
	popax
	add $3,$a
	pop $3
	jmp l246
l250:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method firstnotrx1y
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	method firstnotrexy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrxy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrx1ey
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	end class

	method anfindnotr
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	cthis getex
	pop $5
	localint $6
	cthis getey
	pop $6
l253:
	push $1
	push $5
	cmpjne
	cmp0
	je l254
	push $2
	push $6
	cmpjne
	jmp l256
l254:
	push 0
	jmp l256
l255:
	push 1
l256:
	cmp0
	je l257
	push $1
	push $2
	push 0
	push 1
	cthis isin
	cmp0
	je l259
	push $1
	push $2
	ret
l259:
	push $3
	popax
	add $1,$a
	pop $1
	push $4
	popax
	add $2,$a
	pop $2
	jmp l253
l257:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method anfindalfa
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	cthis getex
	pop $6
	localint $7
	cthis getey
	pop $7
l260:
	push $1
	push $6
	cmpjne
	cmp0
	je l261
	push $2
	push $7
	cmpjne
	jmp l263
l261:
	push 0
	jmp l263
l262:
	push 1
l263:
	cmp0
	je l264
	push $1
	push $2
	push 0
	push 1
	cthis isin
	cmp0
	je l266
	localint $8
	push $1
	push $2
	cthis getrgba
	pop $8
	popax
	popax
	popax
	push $8
	push $5
	cmpje
	cmp0
	je l268
	push $1
	push $2
	ret
l268:
l266:
	push $3
	popax
	add $1,$a
	pop $1
	push $4
	popax
	add $2,$a
	pop $2
	jmp l260
l264:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method anfirstnotrx1y
	cthis getpx
	cthis getpy
	push 1
	push 0
	cthis anfindnotr
	ret
	end method
	method anfirstnotrexy1
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getpy
	push 0
	push 1
	cthis anfindnotr
	ret
	end method
	method anfirstnotrxy1
	cthis getpx
	cthis getpy
	push 0
	push 1
	cthis anfindnotr
	ret
	end method
	method anfirstnotrx1ey
	cthis getpx
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis anfindnotr
	ret
	end method
	class signal_pack
	method init
	end method
	method addsignals
	localstring $1
	pop $1
	push $1
	spushs
	push "operator<"
	push "signal_pack0"
	spop $a
	call [$a],addmethod
	end method
	method signal_pack0
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	end method
	end class

	class ImagePos
	method init
	end method
	method getex
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	end class

	class ImageVisible
	method init
	new int,_isvisible
	push 1
	pop _isvisible
	end method
	method isvisible
	push _isvisible
	end method
	method show
	push 1
	pop _isvisible
	end method
	method hide
	push 0
	pop _isvisible
	end method
	end class

	class Image
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push A
	push "getz"
	push 0
	push "getpx"
	push 0
	push "getpy"
	push 0
	push "getw"
	push 0
	push "geth"
	push 0
	push "isvisible"
	push 0
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "show"
	push "Image0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "hide"
	push "Image1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setz"
	push "Image2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpos"
	push "Image3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "move"
	push "Image4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getex"
	push "Image5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getey"
	push "Image6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcx"
	push "Image7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcy"
	push "Image8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isin"
	push "Image9"
	spop $a
	call [$a],addmethod
	end method
	method Image0
	push 1
	pop isvisible
	end method
	method Image1
	push 0
	pop isvisible
	end method
	method Image2
	localint $1
	pop $1
	push $1
	pop getz
	end method
	method Image3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop getpx
	push $2
	pop getpy
	end method
	method Image4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add getpx,$a
	pop getpx
	push $2
	popax
	add getpy,$a
	pop getpy
	end method
	method Image5
	push getpx
	push getw
	pop $b
	popax
	add $a,$b
	end method
	method Image6
	push getpy
	push geth
	pop $b
	popax
	add $a,$b
	end method
	method Image7
	push getpx
	push getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image8
	push getpy
	push geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image9
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	neg
	cmp0
	je l270
	push $3
	neg
	cmp0
	jne l273
	push $3
	cmp0
	je l274
	push isvisible
	jmp l276
l274:
	push 0
	jmp l276
l275:
	push 1
l276:
	jmp l277
l272:
	push 0
	jmp l277
l273:
	push 1
l277:
	cmp0
	je l278
	push $1
	push getpx
	cmpjae
	cmp0
	je l279
	push $1
	cthis getex
	cmpjl
	cmp0
	je l279
	push $2
	push getpy
	cmpjae
	cmp0
	je l279
	push $2
	cthis getey
	cmpjl
	jmp l281
l279:
	push 0
	jmp l281
l280:
	push 1
l281:
	jmp l271
l278:
	push 0
l271:
	jmp l269
l270:
	push 0
l269:
	end method
	end class

	class anima_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "_clanbuildpomvars"
	push "anima_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_clanbuildpomvars
	push $1
	spushs
	push "setbpos"
	push "anima_pack1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "saverelpos"
	push "anima_pack2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrelpos"
	push "anima_pack3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssaverelpos"
	push "anima_pack4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssetrelpos"
	push "anima_pack5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rplay"
	push "anima_pack6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setcpos"
	push "anima_pack7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator="
	push "anima_pack8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator=="
	push "anima_pack9"
	spop $a
	call [$a],addmethod
	push $1
	cthis addsignals
	end method
	method anima_pack0
	new int,_ixp
	new int,_iyp
	end method
	method anima_pack1
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anima_pack2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method anima_pack3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack4
	call mouse,getpos
	cthis saverelpos
	end method
	method anima_pack5
	call mouse,getpos
	cthis setrelpos
	end method
	method anima_pack6
	localstring $1
	pop $1
	push $1
	cthis isplaying
	neg
	cmp0
	je l283
	push $1
	cthis play
l283:
	end method
	method anima_pack7
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack8
	localstring $1
	pop $1
	push $1
	cthis copy
	end method
	method anima_pack9
	localstring $1
	pop $1
	cthis actionnr
	push $1
	spushs
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l284
	cthis framenr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l286
l284:
	push 0
	jmp l286
l285:
	push 1
l286:
	end method
	end class

	class timer_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	cthis addsignals
	end method
	end class

	class vector_pack
	method init
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l287:
	push $2
	cthis size
	cmpjl
	cmp0
	je l288
	jmp l290
l289:
	add $2,1
	pop $2
	jmp l287
l290:
	push $1
	spushs
	push $2
	cthis get
	spop $d
	cthis [$d]
	jmp l289
l288:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "each"
	push "each"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator-"
	push "vector_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator+"
	push "vector_pack1"
	spop $a
	call [$a],addmethod
	end method
	method vector_pack0
	localdef $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method vector_pack1
	localdef $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	end class

	method new_object
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $1
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	 clparent [$a],resizemethods
	end method
	method new_anima
	localstring $1
	pop $1
	push "anima"
	push $1
	cthis new_object
	end method
	method new_vector
	localstring $1
	pop $1
	push "vector"
	push $1
	cthis new_object
	end method
	class classanfilter
	method init
	end method
	method buildanfilter
	new filter,ft
	cthis getname
	call ft,link
	push 1
	call ft,setpivottype
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "buildanfilter"
	push "buildanfilter"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildanfilter
	push $1
	spushs
	push "setopacity"
	push "classanfilter0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setzoom"
	push "classanfilter1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setangle"
	push "classanfilter2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getangle"
	push "classanfilter3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rotate"
	push "classanfilter4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpivottype"
	push "classanfilter5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlink"
	push "classanfilter6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "link"
	push "classanfilter7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "blend"
	push "classanfilter8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mask"
	push "classanfilter9"
	spop $a
	call [$a],addmethod
	end method
	method classanfilter0
	localint $1
	pop $1
	push $1
	call ft,setopacity
	end method
	method classanfilter1
	localreal $1
	pop $1
	push $1
	call ft,setzoom
	end method
	method classanfilter2
	localreal $1
	pop $1
	push $1
	call ft,setangle
	end method
	method classanfilter3
	call ft,getangle
	ret
	end method
	method classanfilter4
	localreal $1
	pop $1
	push $1
	call ft,rotate
	end method
	method classanfilter5
	localint $1
	pop $1
	push $1
	call ft,setpivottype
	end method
	method classanfilter6
	call ft,unlink
	end method
	method classanfilter7
	cthis getname
	call ft,link
	end method
	method classanfilter8
	localstring $1
	pop $1
	push $1
	call ft,blend
	end method
	method classanfilter9
	localstring $1
	pop $1
	push $1
	call ft,mask
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l291:
	push $1
	push iile
	cmpjl
	cmp0
	je l292
	jmp l294
l293:
	add $1,1
	pop $1
	jmp l291
l294:
	push $1
	call _vs,get
	neg
	cmp0
	je l296
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
l296:
	jmp l293
l292:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _san
	call $1,strsubbs
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	method allfree
	call _vs,vecsum
	push 0
	cmpje
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l298
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l300
	spop $a
	push $1
	cthis copy
	jmp l299
l300:
	push "gmobjvec"
	cmpst
	jne l301
	spop $a
	push $1
	cthis copy
	jmp l299
l301:
	push "gmimgvec"
	cmpst
	jne l302
	spop $a
	push $1
	cthis copy
	jmp l299
l302:
	spop $a
	cthis free
	push $1
	cthis add
l299:
	jmp l297
l298:
	cthis free
	push $1
	cthis add
l297:
	end method
	method save
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l304
	push $1
	call lsim,save
l304:
	end method
	method load
	localstring $1
	pop $1
	push $1
	call lsim,load
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method removegr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l305:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l306
	jmp l308
l307:
	add $2,1
	pop $2
	jmp l305
l308:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis remove
	jmp l307
l306:
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l309:
	push $2
	cthis size
	cmpjl
	cmp0
	je l310
	jmp l312
l311:
	add $2,1
	pop $2
	jmp l309
l312:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l311
l310:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l313:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l314
	jmp l316
l315:
	add $2,1
	pop $2
	jmp l313
l316:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l315
l314:
	end method
	method addgroups
	push "addgr"
	cthis withlist
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	end method
	method empty
	cthis size
	push 0
	cmpje
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	end method
	method print
	push ""
	call engine,print
	push "------ type("
	cthis gettype
	pop $b
	popax
	add $a,$b
	push ") "
	pop $b
	popax
	add $a,$b
	cthis getname
	pop $b
	popax
	add $a,$b
	push " ------"
	pop $b
	popax
	add $a,$b
	call engine,print
	call lsim,print
	push "------ end ------"
	call engine,print
	push ""
	call engine,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	end method
	method set
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,set
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method additer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l317:
	push $3
	push 0
	cmpja
	cmp0
	je l318
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	sub $3,1
	pop $3
	jmp l317
l318:
	end method
	method buildarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newarray
	push $2
	push 0
	push $3
	cthis additer
	end method
	method deleteall
	localint $1
	push 0
	pop $1
l319:
	push $1
	cthis size
	cmpjl
	cmp0
	je l320
	jmp l322
l321:
	add $1,1
	pop $1
	jmp l319
l322:
	push $1
	cthis get
	spushs
	spop $d
	delete [$d]
	jmp l321
l320:
	end method
	method deleteallgm
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l323:
	push $2
	cthis size
	cmpjl
	cmp0
	je l324
	jmp l326
l325:
	add $2,1
	pop $2
	jmp l323
l326:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],vardel
	jmp l325
l324:
	end method
	method deleteallgmobj
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l327:
	push $2
	cthis size
	cmpjl
	cmp0
	je l328
	jmp l330
l329:
	add $2,1
	pop $2
	jmp l327
l330:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],deletegmobj
	jmp l329
l328:
	end method
	method pause
	push "pause"
	cthis eval
	end method
	method resume
	push "resume"
	cthis eval
	end method
	method lockall
	push "lock"
	cthis eval
	end method
	method unlockall
	push "unlock"
	cthis eval
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l332
	push $1
	call lsim,add
l332:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l333:
	push $2
	push $1
	cmpjne
	cmp0
	je l334
	push $2
	cthis addbegin
	pop $2
	jmp l333
l334:
	end method
	method addlist
	push A
	cthis sepadd
	end method
	method removelist
	push "remove"
	cthis withlist
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l336
	push $1
	cthis addbegin
	jmp l335
l336:
	push $2
	push $3
	cmpjae
	cmp0
	je l338
	push $1
	cthis add
	jmp l337
l338:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l339:
	push $4
	push $2
	cmpja
	cmp0
	je l340
	jmp l342
l341:
	sub $4,1
	pop $4
	jmp l339
l342:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l341
l340:
	push $2
	push $1
	cthis set
l337:
l335:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removefirst
	push 0
	call lsim,removeat
	end method
	method removelast
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l343:
	push $1
	cthis contains
	cmp0
	je l344
	push $1
	cthis remove
	jmp l343
l344:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l345:
	push $2
	cthis size
	cmpjl
	cmp0
	je l346
	jmp l348
l347:
	add $2,1
	pop $2
	jmp l345
l348:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l350
	push $2
	cthis removeat
l350:
	jmp l347
l346:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l351:
	push $2
	push $3
	cmpjle
	cmp0
	je l352
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l351
l352:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l354
	call $1,rand
	cthis get
	jmp l353
l354:
	push "null"
l353:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l356
	localint $3
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l357:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l358
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l360
	push "null"
	ret
l360:
	jmp l357
l358:
	push $3
	cthis get
	jmp l355
l356:
	push "null"
l355:
	end method
	method buildfullvars
	push "gmobjvec0"
	cthis each
	end method
	method gmobjvec0
	localdef $1
	pop $1
	cthis buildfullname
	end method
	method buildvars
	push "gmobjvec1"
	cthis each
	end method
	method gmobjvec1
	localdef $1
	pop $1
	cthis getname
	cthis addtogamevars
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l362
l363:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l364
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l363
l364:
l362:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method isplaying
	localint $1
	push 0
	pop $1
l365:
	push $1
	cthis size
	cmpjl
	cmp0
	je l366
	jmp l368
l367:
	add $1,1
	pop $1
	jmp l365
l368:
	push $1
	cthis get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],isplaying
	cmp0
	je l370
	push 1
	ret
l370:
	jmp l367
l366:
	push 0
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l371:
	push $5
	push 0
	cmpjae
	cmp0
	je l372
	jmp l374
l373:
	sub $5,1
	pop $5
	jmp l371
l374:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l376
	push $5
	call lsim,get
	ret
l376:
	jmp l373
l372:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l377:
	push $5
	push 0
	cmpjae
	cmp0
	je l378
	jmp l380
l379:
	sub $5,1
	pop $5
	jmp l377
l380:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l382
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l382:
	jmp l379
l378:
	push 0
	ret
	end method
	method isroundin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localint $6
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
l383:
	push $6
	push 0
	cmpjae
	cmp0
	je l384
	jmp l386
l385:
	sub $6,1
	pop $6
	jmp l383
l386:
	push $6
	call lsim,get
	pop $5
	push $5
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	jne l389
	push $5
	spushs
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	jne l389
	push $5
	spushs
	push $1
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	jne l389
	push $5
	spushs
	push $1
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	jne l389
	push $5
	spushs
	push $1
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l390
l388:
	push 0
	jmp l390
l389:
	push 1
l390:
	cmp0
	je l391
	push $6
	push 1
	pop $b
	popax
	add $a,$b
	ret
l391:
	jmp l385
l384:
	push 0
	end method
	method setframe
	localdef $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l392:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l393
	jmp l395
l394:
	add $2,1
	pop $2
	jmp l392
l395:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l394
l393:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l396:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l397
	jmp l399
l398:
	add $3,1
	pop $3
	jmp l396
l399:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l398
l397:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l400:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l401
	jmp l403
l402:
	add $4,1
	pop $4
	jmp l400
l403:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l402
l401:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l404:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l405
	jmp l407
l406:
	add $5,1
	pop $5
	jmp l404
l407:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l406
l405:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l408:
	push $3
	cthis size
	cmpjl
	cmp0
	je l409
	jmp l411
l410:
	add $3,1
	pop $3
	jmp l408
l411:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l413
	push $3
	ret
l413:
	jmp l410
l409:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l414:
	push $3
	cthis size
	cmpjl
	cmp0
	je l415
	jmp l417
l416:
	add $3,1
	pop $3
	jmp l414
l417:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l419
	push $3
	ret
l419:
	jmp l416
l415:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l420:
	push $2
	cthis size
	cmpjl
	cmp0
	je l421
	jmp l423
l422:
	add $2,1
	pop $2
	jmp l420
l423:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l422
l421:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l424:
	push $3
	cthis size
	cmpjl
	cmp0
	je l425
	jmp l427
l426:
	add $3,1
	pop $3
	jmp l424
l427:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l426
l425:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l428:
	push $4
	cthis size
	cmpjl
	cmp0
	je l429
	jmp l431
l430:
	add $4,1
	pop $4
	jmp l428
l431:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l430
l429:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l432:
	push $2
	cthis size
	cmpjl
	cmp0
	je l433
	jmp l435
l434:
	add $2,1
	pop $2
	jmp l432
l435:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l437
	push 0
	ret
l437:
	jmp l434
l433:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l439
	push 1
	popax
	sub 0,$a
	ret
l439:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l440:
	push $6
	cthis size
	cmpjl
	cmp0
	je l441
	jmp l443
l442:
	add $6,1
	pop $6
	jmp l440
l443:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l445
	push $6
	pop $3
	push $4
	pop $5
l445:
	jmp l442
l441:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpz"
	call lsim,vecsort
	end method
	method _scmpz
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l447
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l448
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l450
l448:
	push 0
	jmp l450
l449:
	push 1
l450:
	jmp l451
l446:
	push 0
	jmp l451
l447:
	push 1
l451:
	end method
	method sortpx
	push "gmobjvec2"
	call lsim,vecsort
	end method
	method gmobjvec2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpx
	cmpjl
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_bvisible
	push 1
	pop _bvisible
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	new string,sanload
	push "null"
	pop sanload
	end method
	method isvisible
	push _bvisible
	end method
	method hide
	push 0
	pop _bvisible
	push "hide"
	cthis eval
	end method
	method show
	push 1
	pop _bvisible
	push "show"
	cthis eval
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	end method
	method getposy
	push _iy
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	end method
	method getpy
	push _iy
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getz
	push _iz
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l453
	push _ix
	ret
l453:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l454:
	push $4
	push $1
	cmpjl
	cmp0
	je l455
	jmp l457
l456:
	add $4,1
	pop $4
	jmp l454
l457:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l459
	push $3
	pop $2
l459:
	jmp l456
l455:
	push $2
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l461
	push _iy
	ret
l461:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l462:
	push $4
	push $1
	cmpjl
	cmp0
	je l463
	jmp l465
l464:
	add $4,1
	pop $4
	jmp l462
l465:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l467
	push $3
	pop $2
l467:
	jmp l464
l463:
	push $2
	end method
	method _getpx
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l469
	push _ix
	ret
l469:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l470:
	push $4
	push $1
	cmpjl
	cmp0
	je l471
	jmp l473
l472:
	add $4,1
	pop $4
	jmp l470
l473:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l475
	push $3
	pop $2
l475:
	jmp l472
l471:
	push $2
	end method
	method _getpy
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l477
	push _iy
	ret
l477:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l478:
	push $4
	push $1
	cmpjl
	cmp0
	je l479
	jmp l481
l480:
	add $4,1
	pop $4
	jmp l478
l481:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l483
	push $3
	pop $2
l483:
	jmp l480
l479:
	push $2
	end method
	method _getw
	cthis getex
	cthis _getpx
	pop $b
	popax
	sub $a,$b
	end method
	method _geth
	cthis getey
	cthis _getpy
	pop $b
	popax
	sub $a,$b
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l485
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l485:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l486:
	push $3
	cthis size
	cmpjl
	cmp0
	je l487
	jmp l489
l488:
	add $3,1
	pop $3
	jmp l486
l489:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l488
l487:
	end method
	method nplay
	localint $1
	pop $1
	push "play"
	push $1
	cthis eval1
	end method
	method txtreset
	localint $1
	push 0
	pop $1
l490:
	push $1
	cthis size
	cmpjl
	cmp0
	je l491
	jmp l493
l492:
	add $1,1
	pop $1
	jmp l490
l493:
	push $1
	cthis get
	spushs
	push ""
	spop $a
	call [$a],txtset
	jmp l492
l491:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l494:
	push $5
	push 0
	cmpjae
	cmp0
	je l495
	jmp l497
l496:
	sub $5,1
	pop $5
	jmp l494
l497:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l499
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l499:
	jmp l496
l495:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method isinfunc
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l500:
	push $4
	push 0
	cmpjae
	cmp0
	je l501
	jmp l503
l502:
	sub $4,1
	pop $4
	jmp l500
l503:
	push $4
	call lsim,get
	spushs
	push $3
	spushs
	push $1
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l505
	push $4
	pop _ifound
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	ret
l505:
	jmp l502
l501:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method isincut
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l506:
	push $5
	push 0
	cmpjae
	cmp0
	je l507
	jmp l509
l508:
	sub $5,1
	pop $5
	jmp l506
l509:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],withincut
	cmp0
	je l511
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l513
l511:
	push 0
	jmp l513
l512:
	push 1
l513:
	cmp0
	je l514
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l514:
	jmp l508
l507:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	method withincut
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push $1
	push "gmimgvec0"
	cthis ineach
	pop $1
	pop $2
	end method
	method gmimgvec0
	localdef $1
	pop $1
	localint $2
	pop $2
	localint $3
	pop $3
	push $2
	push $3
	cthis withincut
	push $3
	push $2
	end method
	method findif
	localstring $1
	pop $1
	push $1
	push 1
	cthis _find
	end method
	method getfound
	push _ifound
	end method
	method getsfound
	push _ifound
	cthis get
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findsfr
	localstring $1
	pop $1
	push "framename"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "anactnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec1"
	cthis find_closest
	end method
	method gmimgvec1
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method getsac
	localstring $1
	pop $1
	push $1
	cthis findsac
	cthis get
	end method
	method getsacfr
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l515:
	push $3
	cthis size
	cmpjl
	cmp0
	je l516
	jmp l518
l517:
	add $3,1
	pop $3
	jmp l515
l518:
	push $3
	cthis get
	spushs
	spop $a
	call [$a],actionname
	push $1
	cmpje
	cmp0
	je l520
	push $3
	cthis get
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpje
	jmp l522
l520:
	push 0
	jmp l522
l521:
	push 1
l522:
	cmp0
	je l523
	push $3
	cthis get
	ret
l523:
	jmp l517
l516:
	push "null"
	end method
	method blitto
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l524:
	push $2
	cthis size
	cmpjl
	cmp0
	je l525
	jmp l527
l526:
	add $2,1
	pop $2
	jmp l524
l527:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],blit
	jmp l526
l525:
	end method
	method sortz
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l528:
	push $2
	cthis size
	cmpjl
	cmp0
	je l529
	jmp l531
l530:
	add $2,1
	pop $2
	jmp l528
l531:
	push $2
	cthis get
	spushs
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	jmp l530
l529:
	end method
	method ancopies
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $1
	push $2
	cthis ancopiesname
	end method
	method ancopiesname
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l532:
	push $4
	push $3
	cmpjl
	cmp0
	je l533
	jmp l535
l534:
	add $4,1
	pop $4
	jmp l532
l535:
	push GAME
	spushs
	push $1
	push $2
	push "_"
	pop $b
	popax
	add $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],copyanima
	push $2
	push "_"
	pop $b
	popax
	add $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l534
l533:
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method addsrcanima
	localstring $1
	pop $1
	push "srcanima"
	push $1
	cthis var2
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l537
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l539
	new vector,_vtmp
	push "string"
	call _vtmp,type
	push $1
	push "/"
	call _vtmp,vecbuildfromstring
	push "an"
	call _vtmp,last
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	delete _vtmp
	jmp l538
l539:
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
l538:
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l536
l537:
	push $1
	pop $3
l536:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l541
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l540
l541:
	push $1
	pop $3
l540:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method deleteloaded
	cthis deleteallgm
	push sanload
	push "null"
	cmpjne
	cmp0
	je l543
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l543:
	end method
	method deleteinit
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l544:
	push $2
	cthis size
	cmpjl
	cmp0
	je l545
	jmp l547
l546:
	add $2,1
	pop $2
	jmp l544
l547:
	localdef $3
	push $2
	cthis get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],gettype
	push "gmimgvec"
	cmpje
	cmp0
	je l549
	push $3
	spushs
	spop $a
	call [$a],deleteinit
l549:
	push $1
	spushs
	push $3
	spop $a
	call [$a],vardel
	jmp l546
l545:
	push sanload
	push "null"
	cmpjne
	cmp0
	je l551
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l551:
	end method
	end class

	class gmadvvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l552:
	push $5
	push 0
	cmpjae
	cmp0
	je l553
	jmp l555
l554:
	sub $5,1
	pop $5
	jmp l552
l555:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],butisin
	cmp0
	je l557
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l557:
	jmp l554
l553:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	end method
	end class

	class gmmaskvec
	parent gmadvvec
	method init
	clparent gmadvvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,butisin
	end method
	end class

	new int,igmsubtitle
	push "igmsubtitle:"
	push 0
	cthis readcfg
	pop igmsubtitle
	new int,igmlektor
	push "igmlektor:"
	push 1
	cthis readcfg
	pop igmlektor
	new int,igmchardelay
	push "igmchardelay:"
	push 100
	cthis readcfg
	pop igmchardelay
	new int,igmsubmindelay
	push 2000
	push "igmsubmindelay:"
	push 2000
	cthis readcfg
	push 200000
	cthis between
	pop igmsubmindelay
	class Subtitle
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	localreal $3
	push 0.5
	pop $3
	new int,col0
	new int,col1
	new int,col2
	cthis restorecolor
	localstring $4
	push SNDPATH
	pop $4
	new string,ssubpos
	push "sgmsubtitlespos:"
	push "down"
	cthis readcfg
	pop ssubpos
	localdef $5
	push "sgmsubtitlespos:"
	push 2
	call dbconf,dbgets
	pop $5
	new int,isubpos
	push $5
	push "null"
	cmpjne
	cmp0
	je l559
	push $5
	jmp l558
l559:
	push 15
l558:
	pop isubpos
	new int,bshadow
	push "igmsubshadow:"
	push 0
	cthis readcfg
	pop bshadow
	new int,bblackbg
	push "igmsubblackbg:"
	push 170
	cthis readcfg
	pop bblackbg
	new int,iborx
	push $2
	pop iborx
	new int,ifontsize
	call fntsubtitle,getsize
	pop ifontsize
	new db,dbl
	push LANGDIR
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,load
	localint $6
	push 0
	pop $6
	localstring $5
l560:
	push $6
	call dbl,getrowsno
	cmpjl
	cmp0
	je l561
	push $6
	call dbl,getcolsno
	push 2
	cmpjl
	cmp0
	jne l564
	push $6
	push 0
	call dbl,get
	spushs
	push 0
	push 1
	spop $h
	call $h,getb
	push "#"
	cmpje
	jmp l565
l563:
	push 0
	jmp l565
l564:
	push 1
l565:
	cmp0
	je l566
	push $6
	call dbl,removerow
	jmp l562
l566:
	add $6,1
	pop $6
l562:
	jmp l560
l561:
	localstring $7
	new vector,v1
	push "string"
	call v1,type
	localint $8
	push iResX
	push 2
	push $2
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $3
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop $8
	localint $9
	localint $10
	localint $11
	push 0
	pop $11
	localint $6
	push 0
	pop $6
l567:
	push $6
	call dbl,getrowsno
	cmpjl
	cmp0
	je l568
	jmp l570
l569:
	add $6,1
	pop $6
	jmp l567
l570:
	push $4
	push $6
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	neg
	cmp0
	je l572
	push $4
	push $6
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".ogg"
	pop $b
	popax
	add $a,$b
	pop $5
l572:
	push $6
	push 0
	push $5
	call dbl,set
	push $6
	push 1
	call dbl,get
	pop $5
	push $5
	push " "
	call v1,vecbuildfromstring
	push ""
	pop $7
	push 1
	pop $9
	push 0
	pop $10
l573:
	push $10
	call v1,size
	cmpjl
	cmp0
	je l574
	jmp l576
l575:
	add $10,1
	pop $10
	jmp l573
l576:
	call $7,length
	push $10
	call v1,get
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	push $8
	cmpjle
	cmp0
	je l578
	push " "
	push $10
	call v1,get
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l577
l578:
	push $9
	push 1
	cmpje
	cmp0
	je l580
	push $6
	push $9
	push $7
	call dbl,set
	jmp l579
l580:
	push $6
	push $7
	call dbl,add
l579:
	push $10
	call v1,get
	pop $7
	add $9,1
	pop $9
l577:
	jmp l575
l574:
	push $9
	push 1
	cmpje
	cmp0
	je l582
	push $6
	push $9
	push $7
	call dbl,set
	jmp l581
l582:
	push $6
	push $7
	call dbl,add
l581:
	push $9
	push $11
	cmpja
	cmp0
	je l584
	push $9
	pop $11
l584:
	jmp l569
l568:
	new gmimgvec,grtxt
	new gmimgvec,grtxts
	localint $6
	push 0
	pop $6
l585:
	push $6
	push $11
	cmpjl
	cmp0
	je l586
	jmp l588
l587:
	add $6,1
	pop $6
	jmp l585
l588:
	push "txt"
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push bshadow
	cmp0
	je l590
	push "txts"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	push ""
	push "fntsubtitle"
	cthis black
	clparent classgame,newtext
	push $7
	call grtxts,add
	jmp l589
l590:
	push bblackbg
	cmp0
	je l592
	push "imgs"
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	spushs
	spop $e
	new img,[$e]
	push $7
	call grtxts,add
l592:
l589:
	push $5
	push ""
	push "fntsubtitle"
	cthis getcolor
	clparent classgame,newtext
	push $5
	call grtxt,add
	jmp l587
l586:
	new db,dbsnd
	new timer,timtxt
	push 1
	call timtxt,settick
	push 1
	call timtxt,setcycle
	push "onfinish"
	push "Subtitle0"
	call timtxt,addmethod
	push 12000
	cthis setz
	end method
	method Subtitle0
	cthis cisplaying
	neg
	cmp0
	je l594
	cthis hidesubs
	jmp l593
l594:
	cthis play
l593:
	end method
	method geth
	call grtxts,size
	cmp0
	je l596
	call grtxts,first
	spushs
	spop $a
	call [$a],geth
	jmp l595
l596:
	call grtxt,size
	cmp0
	je l598
	call grtxt,last
	spushs
	spop $a
	call [$a],geth
	jmp l597
l598:
	push 0
l597:
l595:
	end method
	method reset
	cthis stop
	call dbsnd,free
	end method
	method hidesubs
	call grtxt,hide
	call grtxts,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	call grtxt,setz
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxts,setz
	end method
	method stop
	cthis hidesubs
	push 0
	call timtxt,stop
	end method
	method register
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push $2
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l600
	localdef $4
	push $1
	call dbsnd,findbyrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l602
	push $4
	push 1
	push $3
	call dbsnd,set
	jmp l601
l602:
	localdef $4
	call dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	call dbsnd,add
	push $4
	push $3
	call dbsnd,add
l601:
l600:
	end method
	method getiddialog
	localstring $1
	pop $1
	push $1
	call dbsnd,findbyrow
	end method
	method hasdialog
	localstring $1
	pop $1
	push $1
	cthis getiddialog
	push 0
	cmpjae
	end method
	method play
	localstring $1
	pop $1
	cthis stop
	localdef $2
	push $1
	call dbsnd,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l604
	localint $3
	push 0
	pop $3
	push $2
	push 1
	call dbsnd,get
	pop $2
	localdef $4
	push $2
	call dbl,getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	push 0
	push 0
	call grtxt,setpos
	localint $8
	push 2
	pop $8
	localint $9
	push 0
	pop $9
l605:
	push $9
	push $4
	cmpjl
	cmp0
	je l606
	jmp l608
l607:
	add $9,1
	pop $9
	jmp l605
l608:
	push $9
	call grtxt,get
	pop $5
	push $5
	spushs
	push $2
	push $9
	push 1
	pop $b
	popax
	add $a,$b
	call dbl,get
	push col0
	push col1
	push col2
	spop $a
	call [$a],txtsetcol
	push $5
	spushs
	spop $a
	call [$a],get
	spushs
	spop $h
	call $h,length
	popax
	add $3,$a
	pop $3
	push $5
	spushs
	push iResX
	push $5
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	push $9
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push $8
	pop $b
	popax
	add $a,$b
	push igmoffsety
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $5
	spushs
	spop $a
	call [$a],show
	push bshadow
	cmp0
	je l610
	push $9
	call grtxt,get
	pop $6
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	push col0
	push col1
	push col2
	spop $a
	call [$a],txtsetcol
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push 1
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	spop $a
	call [$a],show
l610:
	jmp l607
l606:
	push bblackbg
	cmp0
	je l612
	call grtxt,first
	pop $5
	call grtxts,first
	pop $6
	push ssubpos
	push "up"
	cmpje
	cmp0
	je l614
	push $6
	spushs
	push iResX
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxt,get
	spushs
	spop $a
	call [$a],getey
	cthis black
	push bblackbg
	spop $a
	call [$a],create
	push $6
	spushs
	push igmoffsetx
	push igmoffsety
	spop $a
	call [$a],setpos
	jmp l613
l614:
	push $6
	spushs
	push iResX
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	call grtxt,get
	spushs
	spop $a
	call [$a],getey
	push $5
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	cthis black
	push bblackbg
	spop $a
	call [$a],create
	push $6
	spushs
	push igmoffsetx
	push $5
	spushs
	spop $a
	call [$a],getpy
	push igmoffsety
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
l613:
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	spop $a
	call [$a],show
l612:
	push ssubpos
	push "up"
	cmpje
	cmp0
	je l616
	push 0
	pop $8
	jmp l615
l616:
	push iResY
	push $4
	push ifontsize
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push isubpos
	pop $b
	popax
	sub $a,$b
	pop $8
	push 0
	push $8
	call grtxt,move
	push bshadow
	cmp0
	jne l619
	push bblackbg
	jmp l620
l618:
	push 0
	jmp l620
l619:
	push 1
l620:
	cmp0
	je l621
	push 0
	push $8
	call grtxts,move
l621:
l615:
	call timtxt,play
	push igmchardelay
	popax
	mul $3,$a
	pop $3
	push $3
	push igmsubmindelay
	cmpjl
	cmp0
	je l623
	push igmsubmindelay
	jmp l622
l623:
	push $3
l622:
	jmp l603
l604:
	push 0
l603:
	end method
	method setcolor
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop col0
	push $2
	pop col1
	push $3
	pop col2
	end method
	method getcolor
	push col0
	push col1
	push col2
	ret
	end method
	method restorecolor
	cthis white
	cthis setcolor
	end method
	end class

	push igmsubtitle
	cmp0
	je l625
	new font,fntsubtitle
	push "subtitles_font:"
	push sgmfontfile
	cthis readcfg
	push "subtitles_fontsize:"
	push 24
	spushs
	spop $h
	call $h,igetsc
	cthis readcfg
	call fntsubtitle,load
	push "subtitles_src:"
	push "subtitles.db"
	cthis readcfg
	push 50
	new Subtitle,subtitle
l625:
	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	new timer,timlektor
	call timlektor,classsound0
	push "setsndfin"
	push "classsound1"
	call timlektor,addmethod
	push "onfinish"
	push "classsound2"
	call timlektor,addmethod
	push igmsubtitle
	cmp0
	je l631
	call subtitle,reset
l631:
	end method
	method classsound0
	new int,bsndfin
	push 1
	pop bsndfin
	end method
	method classsound1
	localint $1
	pop $1
	push $1
	pop bsndfin
	end method
	method classsound2
	push bsndfin
	cmp0
	je l627
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l629
	push _csplay
	spushs
	spop $a
	call [$a],onfinish
l629:
	jmp l626
l627:
	push 1
	pop bsndfin
l626:
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	end method
	method cisactsnd
	localstring $1
	pop $1
	push $1
	push _csplay
	cmpje
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l633
	push $1
	cthis cbplay
	jmp l632
l633:
	cthis cgetactsnd
	push $1
	cmpjne
	cmp0
	je l635
	push $1
	cthis cbplay
l635:
l632:
	end method
	method cbselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	jne l638
	cthis cgetactsnd
	push $1
	cmpjne
	jmp l639
l637:
	push 0
	jmp l639
l638:
	push 1
l639:
	cmp0
	je l640
	push $1
	cthis cbplay
l640:
	end method
	method cbplay
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l642
	push 1
	cthis csplaystop
l642:
	push $1
	cthis cbsplay
	end method
	method cbsplay
	localstring $1
	pop $1
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l644
	push $1
	cthis csubplay
l644:
	end method
	method cbplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	cthis cbplay
	end method
	method cbplay2
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l646
	push 0
	cthis csplaystop
l646:
	push $1
	cthis cbsplay
	end method
	method crplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l648
	push $1
	cthis cbsplay
l648:
	end method
	method cbplayif
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l650
	push $1
	cthis cbplay
l650:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l652
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	jmp l654
l652:
	push 0
	jmp l654
l653:
	push 1
l654:
	cmp0
	je l655
	push $1
	cthis csubplay
l655:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call $2,rand
	push 0
	cmpje
	cmp0
	je l657
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
l657:
	end method
	method cplayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "c"
	push $1
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $d
	cthis [$d]
	push $2
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l659
	push $3
	push "null"
	cmpjne
	jmp l661
l659:
	push 0
	jmp l661
l660:
	push 1
l661:
	cmp0
	je l662
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l662:
	end method
	method cactsndstop
	localint $1
	pop $1
	cthis cisplaying
	cmp0
	je l664
	push $1
	cthis csplaystop
l664:
	end method
	method csplaystop
	localint $1
	pop $1
	call timlektor,isplaying
	cmp0
	je l666
	push $1
	call timlektor,setsndfin
	push 1
	call timlektor,stop
	jmp l665
l666:
	push _csplay
	spushs
	push $1
	spop $a
	call [$a],stop
l665:
	end method
	method cstopsnds
	localint $1
	pop $1
	call _csplay,in
	cmp0
	je l668
	cthis cisplaying
	jmp l670
l668:
	push 0
	jmp l670
l669:
	push 1
l670:
	cmp0
	je l671
	push $1
	cthis cactsndstop
l671:
	end method
	method cisplaying
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l673
	call timlektor,isplaying
	cmp0
	jne l675
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l676
l674:
	push 0
	jmp l676
l675:
	push 1
l676:
	jmp l672
l673:
	push 0
l672:
	end method
	method cisplayingsnd
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l678
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l677
l678:
	push 0
l677:
	end method
	method csubplay
	localstring $1
	pop $1
	push igmsubtitle
	cmp0
	je l680
	localint $2
	push igmlektor
	pop $2
	push $1
	spushs
	spop $a
	call [$a],loaded
	neg
	cmp0
	je l682
	push 0
	pop igmlektor
l682:
	localdef $3
	push $1
	call subtitle,play
	pop $3
	push igmlektor
	cmp0
	jne l685
	push $3
	push 0
	cmpjle
	jmp l686
l684:
	push 0
	jmp l686
l685:
	push 1
l686:
	cmp0
	je l687
	push $1
	spushs
	spop $a
	call [$a],play
	jmp l683
l687:
	push $3
	call timlektor,setdelay
	call timlektor,play
l683:
	push $2
	pop igmlektor
	jmp l679
l680:
	push $1
	spushs
	spop $a
	call [$a],play
l679:
	end method
	method cisdialogplaying
	cthis cisplaying
	cmp0
	je l688
	cthis cgetactsnd
	call subtitle,hasdialog
	jmp l690
l688:
	push 0
	jmp l690
l689:
	push 1
l690:
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	je l692
	push 0
	pop iile
	ret
l692:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l693:
	push $3
	push $2
	cmpjl
	cmp0
	je l694
	jmp l696
l695:
	add $3,1
	pop $3
	jmp l693
l696:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l695
l694:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	cmpjle
	cmp0
	je l698
	push 0
	pop iile
	ret
l698:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	cmpje
	cmp0
	je l700
	call iile,rand
	pop ilicz
l700:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l701:
	push $3
	push iile
	cmpjl
	cmp0
	je l702
	jmp l704
l703:
	add $3,1
	pop $3
	jmp l701
l704:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l703
l702:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	cmpjne
	cmp0
	je l706
	push splay
	spushs
	push $1
	spop $a
	call [$a],stop
l706:
	end method
	method isplaying
	push splay
	push "null"
	cmpjne
	cmp0
	je l708
	push splay
	spushs
	spop $a
	call [$a],isplaying
	jmp l707
l708:
	push 0
l707:
	end method
	method randplay
	localint $1
	pop $1
	call $1,rand
	push 0
	cmpje
	cmp0
	je l710
	cthis play
l710:
	end method
	method playid
	localint $1
	pop $1
	push $1
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	cthis play
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method reset
	push 0
	pop ilicz
	end method
	method rbgplay
	cthis isplaying
	neg
	cmp0
	je l712
	cthis bgplay
l712:
	end method
	method rplay
	cthis isplaying
	neg
	cmp0
	je l714
	cthis play
l714:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	spushs
	spop $a
	call [$a],play
	push itype
	push 0
	cmpje
	cmp0
	je l716
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l715
l716:
	push itype
	push 1
	cmpje
	cmp0
	je l718
	call iile,rand
	pop ilicz
l718:
l715:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l719:
	push $2
	push iile
	cmpjl
	cmp0
	je l720
	jmp l722
l721:
	add $2,1
	pop $2
	jmp l719
l722:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setvol
	jmp l721
l720:
	end method
	end class

	class SoundSource
	method init
	end method
	method setvol
	localstring $1
	localint $2
	localint $3
	localreal $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call $5,abs
	push $4
	cmpjae
	cmp0
	je l724
	push $1
	spushs
	push $3
	spop $a
	call [$a],setvol
	jmp l723
l724:
	push 1.0
	call $5,abs
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push 100
	cmpja
	cmp0
	je l726
	push 100
	pop $2
l726:
	push $1
	spushs
	push $2
	spop $a
	call [$a],setvol
l723:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,_iconstid
	new gmobjvec,_grsfxs
	end method
	method bkg=
	localdef $1
	pop $1
	push ".pyz"
	call $1,contains
	cmp0
	je l728
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l727
l728:
	push "imgbkg"
	push $1
	push 0
	cthis newimg
l727:
	end method
	method bgr=
	localdef $1
	pop $1
	push $1
	cthis csndbgr
	end method
	method path=
	localdef $1
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	end method
	method cycle=
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis cnewtimercyclefin
	end method
	method timer=
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	end method
	method timplay
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method cycletimer=
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call $2,imstotick
	pop $2
	push $2
	push 1
	cmpjl
	cmp0
	je l730
	push 1
	pop $2
l730:
	push $1
	push 1
	push $2
	push $3
	cthis cnewtimercyclefin
	end method
	method _getflags
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
	push "L"
	call $1,contains
	cmp0
	je l732
	push "L"
	call $1,strremove
	push 1
	pop $2
l732:
	localdef $3
	push 0
	pop $3
	push "P"
	call $1,contains
	cmp0
	je l734
	push "P"
	call $1,strremove
	push 1
	pop $3
l734:
	localdef $4
	push 0
	pop $4
	push "H"
	call $1,contains
	cmp0
	je l736
	push "H"
	call $1,strremove
	push 1
	pop $4
l736:
	push $1
	push $2
	push $3
	push $4
	ret
	end method
	method img=
	localdef $1
	pop $1
	push $1
	cthis _build_img
	popax
	end method
	method getlangfile
	localstring $1
	pop $1
	localdef $2
	push 4
	call $1,strsube
	push "_"
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	push 0
	push 4
	call $1,gete
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	cthis getpath
	call engine,fileexist
	cmp0
	je l738
	push $2
	jmp l737
l738:
	push $1
l737:
	end method
	method getlangpath
	localstring $1
	pop $1
	push $1
	cthis getlangfile
	cthis getpath
	end method
	method _build_img
	localdef $1
	pop $1
	localdef $2
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
	push "G"
	call $1,contains
	cmp0
	je l740
	push "G"
	call $1,strremove
	push 1
	pop $5
l740:
	localdef $6
	push 0
	pop $6
	push " "
	call $1,contains
	cmp0
	je l742
	push " "
	call $1,strgetfrom
	pop $6
	push " "
	call $1,strgetto
	pop $1
l742:
	localstring $7
	push "/"
	call $1,contains
	cmp0
	je l744
	new vector,_v_sfile
	push "string"
	call _v_sfile,type
	push $1
	push "/"
	call _v_sfile,vecbuildfromstring
	call _v_sfile,last
	spushs
	push 4
	spop $h
	call $h,strsube
	pop $7
	delete _v_sfile
	jmp l743
l744:
	push 4
	call $1,strsube
	pop $7
l743:
	localstring $8
	push ".pyz"
	call $1,contains
	cmp0
	je l746
	push $5
	cmp0
	je l748
	push "gr"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	push $6
	cthis newgrimg
	jmp l747
l748:
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newanima
l747:
	jmp l745
l746:
	push "img"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newimg
l745:
	push $2
	cmp0
	je l750
	push $8
	spushs
	spop $a
	call [$a],anloopfin
l750:
	push $3
	cmp0
	je l752
	push $8
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l752:
	push $4
	cmp0
	je l754
	push $8
	spushs
	spop $a
	call [$a],hide
l754:
	push $8
	end method
	method imgsgr=
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	localdef $3
	pop $3
l755:
	push A
	push $3
	cmpjne
	cmp0
	je l756
	push $1
	spushs
	push $3
	cthis _build_img
	spop $a
	call [$a],add
	localdef $3
	pop $3
	jmp l755
l756:
	end method
	method imgs=
	push "img="
	cthis withlist
	end method
	method clone
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	cthis getname
	cthis gettype
	push $1
	spop $a
	call [$a],classgame0
	end method
	method classgame0
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	push $3
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method clones=
	push "clone"
	cthis withlist
	end method
	method list=
	localdef $1
	pop $1
	localdef $2
	pop $2
	push $1
	spushs
	spop $e
	new gmobjvec,[$e]
l757:
	push A
	push $2
	cmpjne
	cmp0
	je l758
	push $1
	spushs
	push $2
	spop $a
	call [$a],addbegin
	pop $2
	jmp l757
l758:
	end method
	method list2=
	localdef $1
	push "gmobjvec"
	cthis newconst
	pop $1
	push $1
	cthis list=
	push $1
	end method
	method debug=
	localdef $1
	pop $1
	push $1
	call engine,setdebugstate
	end method
	method sfx=
	localstring $1
	pop $1
	localint $2
	push "N"
	call $1,contains
	pop $2
	push $2
	cmp0
	je l760
	push "N"
	call $1,strremove
l760:
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	popax
	pop $4
	pop $3
	pop $1
	localdef $5
	push 100
	pop $5
	push " "
	call $1,contains
	cmp0
	je l762
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l762:
	localstring $6
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsfx
	push $6
	spushs
	push $5
	spop $a
	call [$a],setvol
	push $3
	cmp0
	je l764
	push $6
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l764:
	push $4
	cmp0
	je l766
	push $6
	spushs
	spop $a
	call [$a],play
	jmp l765
l766:
	push $2
	cmp0
	je l768
	push $6
	spushs
	spop $a
	call [$a],playloop
l768:
l765:
	push $6
	call _grsfxs,add
	end method
	method sfxs=
	push "sfx="
	cthis withlist
	end method
	method snd=
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsndfree
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method tickstart
	push "__timspeed"
	cthis hasvar
	neg
	cmp0
	je l770
	new TicksCounter,__timspeed
l770:
	call __timspeed,start
	end method
	method tickstop
	push "ticker: "
	call __timspeed,print
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis newbgr
	push "sndbgr"
	cthis sndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l772
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	push "imgkursor"
	pop $1
l772:
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call mouse,setcursor
	push $1
	call engine,stdbutcursor
	end method
	method newimgarray
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildarray
	end method
	method newfont
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new font,[$e]
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],load
	end method
	method monofont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontmono
	push $2
	cthis newfont
	end method
	method newfontbold
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontbold
	push $2
	cthis newfont
	end method
	method snewfont
	localstring $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "font"
	cthis newconst
	pop $3
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	end method
	method stdfont
	localint $1
	pop $1
	push sgmfontfile
	push $1
	cthis snewfont
	end method
	method stdmono
	localint $1
	pop $1
	push sgmfontmono
	push $1
	cthis snewfont
	end method
	method stdbold
	localint $1
	pop $1
	push sgmfontbold
	push $1
	cthis snewfont
	end method
	method getconstid
	add _iconstid,1
	pop _iconstid
	push _iconstid
	push 1
	pop $b
	popax
	sub $a,$b
	end method
	method newconst
	localstring $1
	pop $1
	localstring $2
	push "const"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getconstid
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $2
	end method
	method consttext
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $8
	push "text"
	cthis newconst
	pop $8
	localstring $9
	push $4
	cthis stdfont
	pop $9
	push $8
	spushs
	push $9
	spop $a
	call [$a],setfont
	push $8
	spushs
	push $1
	spop $a
	call [$a],set
	push $8
	spushs
	push $5
	push $6
	push $7
	spop $a
	call [$a],createtxt
	push $8
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $8
	end method
	method newtxt
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	cthis newtext
	end method
	method newtext
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	spushs
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	spop $a
	call [$a],setfont
	push $1
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	end method
	method newtextposz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	cthis newtext
	push $1
	spushs
	push $7
	push $8
	push $9
	spop $a
	call [$a],anposz
	end method
	method newgrimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	push $2
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l773:
	push $2
	push $3
	cmpjle
	cmp0
	je l774
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l773
l774:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	spushs
	spop $e
	new classancounter,[$e]
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l775:
	push $6
	push $5
	cmpjl
	cmp0
	je l776
	jmp l778
l777:
	add $6,1
	pop $6
	jmp l775
l778:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l777
l776:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l779:
	push $7
	push $5
	cmpjl
	cmp0
	je l780
	jmp l782
l781:
	add $7,1
	pop $7
	jmp l779
l782:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l781
l780:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l783:
	push $7
	push $5
	cmpjl
	cmp0
	je l784
	jmp l786
l785:
	add $7,1
	pop $7
	jmp l783
l786:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l785
l784:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	spushs
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l787:
	push $3
	push $4
	cmpjl
	cmp0
	je l788
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	cmpjne
	cmp0
	je l790
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	cmpje
	cmp0
	jne l793
	push $12
	push "sfx"
	cmpje
	jmp l794
l792:
	push 0
	jmp l794
l793:
	push 1
l794:
	cmp0
	je l795
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	cmpje
	cmp0
	je l797
	push $14
	push $13
	cthis newsfx
	jmp l796
l797:
	push $14
	push $13
	cthis newsnd
l796:
	push $7
	push $6
	cmpjl
	cmp0
	je l799
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l801
	push $14
	spushs
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l800
l801:
	push 0
	push 4
	call $12,gete
	push "play"
	cmpje
	cmp0
	je l803
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l802
l803:
	push $12
	push "vol"
	cmpje
	cmp0
	je l805
	push $14
	spushs
	push $13
	spop $a
	call [$a],setvol
l805:
l802:
l800:
l799:
	jmp l791
l795:
	push $12
	push "group"
	cmpje
	cmp0
	je l807
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	cmpjl
	cmp0
	je l809
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l811
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
l811:
	jmp l808
l809:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l808:
	jmp l806
l807:
	push $12
	push "bank"
	cmpje
	cmp0
	je l813
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	cmpjl
	cmp0
	je l815
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l817
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	spushs
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l816
l817:
	push $12
	push "vol"
	cmpje
	cmp0
	je l819
	push $14
	spushs
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
l819:
l816:
l815:
	jmp l812
l813:
	push $12
	push "method"
	cmpje
	cmp0
	je l821
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l822:
	push $8
	push $9
	cmpjle
	cmp0
	je l823
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l822
l823:
	jmp l820
l821:
	push $12
	push "singlebank"
	cmpje
	cmp0
	je l825
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l824
l825:
	push $12
	push "bgr"
	cmpje
	cmp0
	je l827
	push $14
	cthis csndbgr
	push $7
	push $6
	cmpjl
	cmp0
	je l829
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l831
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l831:
l829:
	jmp l826
l827:
	push $12
	push "music"
	cmpje
	cmp0
	je l833
	push $14
	cthis playmusic
	push $7
	push $6
	cmpjl
	cmp0
	je l835
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l837
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l837:
l835:
l833:
l826:
l824:
l820:
l812:
l806:
l791:
l790:
	add $3,1
	pop $3
	jmp l787
l788:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	method cgetscreenshoot
	localstring $1
	localreal $2
	pop $2
	pop $1
	push igmenablesave
	cmp0
	je l839
	new img,_imgsavebkg
	push iResX
	push iResY
	cthis white
	push 255
	call _imgsavebkg,create
	push 2000
	call _imgsavebkg,setz
	call _imgsavebkg,blitscreen
	push $2
	push 1.0
	cmpjne
	cmp0
	je l841
	new filter,_ftbg
	push "_imgsavebkg"
	call _ftbg,link
	push 1
	call _ftbg,setsmooth
	push $2
	call _ftbg,setzoom
l841:
	push 0
	push 0
	call _imgsavebkg,setpos
	new img,_im_1
	push $2
	push iResX
	pop $b
	popax
	mul $a,$b
	push $2
	push iResY
	pop $b
	popax
	mul $a,$b
	cthis white
	push 255
	call _im_1,create
	call _imgsavebkg,getpx
	call _imgsavebkg,getpy
	call _im_1,setpos
	push "_imgsavebkg"
	call _im_1,blit
	push $1
	call _im_1,save
	delete _im_1
	push $2
	push 1.0
	cmpjne
	cmp0
	je l843
	call _ftbg,unlink
	delete _ftbg
l843:
	delete _imgsavebkg
l839:
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l844:
	push $2
	push $3
	cmpjle
	cmp0
	je l845
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $5
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	cmpje
	cmp0
	je l847
	push $2
	ret
l847:
	add $2,1
	pop $2
	jmp l844
l845:
	push 1
	popax
	sub 0,$a
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	cmpjae
	cmp0
	je l849
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l849:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis build2
	end method
	method build2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new anima,[$e]
	push $5
	spushs
	push $1
	spop $a
	call [$a],load
	push $5
	spushs
	push $2
	spop $a
	call [$a],setz
	localint $6
	push $5
	spushs
	spop $a
	call [$a],nofactions
	pop $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $9
	localstring $10
	localstring $11
	localstring $12
	localstring $13
	localint $14
	push 0
	pop $14
l850:
	push $14
	push $6
	cmpjl
	cmp0
	je l851
	jmp l853
l852:
	add $14,1
	pop $14
	jmp l850
l853:
	push "null"
	pop $10
	push "null"
	pop $11
	push "null"
	pop $12
	push $5
	spushs
	push $14
	spop $a
	call [$a],nofframes
	pop $7
	push 1
	pop $8
l854:
	push $8
	push $7
	cmpjle
	cmp0
	je l855
	jmp l857
l856:
	add $8,1
	pop $8
	jmp l854
l857:
	push san
	push $9
	pop $b
	popax
	add $a,$b
	pop $13
	push $8
	push 1
	cmpje
	cmp0
	je l859
	push $13
	pop $10
	jmp l858
l859:
	push $8
	push 2
	cmpje
	cmp0
	je l861
	push $13
	pop $11
	jmp l860
l861:
	push $8
	push 3
	cmpje
	cmp0
	je l863
	push $13
	pop $12
l863:
l860:
l858:
	push $5
	push $13
	clparent newvars,copyanima
	push $13
	spushs
	push $14
	push $8
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $9,1
	pop $9
	jmp l856
l855:
	push $4
	push "null"
	cmpjne
	cmp0
	je l865
	push $4
	spushs
	push $5
	spushs
	push $14
	spop $a
	call [$a],nameofaction
	spop $a
	call [$a],contains
	jmp l867
l865:
	push 0
	jmp l867
l866:
	push 1
l867:
	cmp0
	je l868
	push $10
	spushs
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	jmp l864
l868:
	push $10
	push $11
	push $12
	push $3
	cthis addbut
l864:
	jmp l852
l851:
	push $5
	spushs
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l870
	push sfxmon
	spushs
	spop $a
	call [$a],play
l870:
	push _sfunmovon
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpje
	cmp0
	je l872
	ret
l872:
	push $1
	spushs
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $4
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	spushs
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l873:
	push $5
	push iilebut
	cmpjl
	cmp0
	je l874
	jmp l876
l875:
	add $5,1
	pop $5
	jmp l873
l876:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l875
l874:
	end method
	method print
	localint $1
	push 0
	pop $1
l877:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l878
	jmp l880
l879:
	add $1,1
	pop $1
	jmp l877
l880:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l879
l878:
	end method
	method setrect
	localstring $1
	localint $2
	push 0
	pop $2
l881:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l882
	jmp l884
l883:
	add $2,1
	pop $2
	jmp l881
l884:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getimg
	pop $1
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	spop $a
	call [$a],setrect
	jmp l883
l882:
	end method
	method setflags
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l885:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l886
	jmp l888
l887:
	add $3,1
	pop $3
	jmp l885
l888:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setflags
	jmp l887
l886:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l890
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	jmp l889
l890:
	push "null"
l889:
	ret
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l891:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l892
	jmp l894
l893:
	add $2,1
	pop $2
	jmp l891
l894:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l893
l892:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	cmpja
	cmp0
	je l896
	push iilebut
	pop $2
l896:
	localint $3
	push 0
	pop $3
l897:
	push $3
	push $2
	cmpjl
	cmp0
	je l898
	jmp l900
l899:
	add $3,1
	pop $3
	jmp l897
l900:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l899
l898:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method disabled
	push sbut
	push 0
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disabled
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method resetall
	localint $1
	push 0
	pop $1
l901:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l902
	jmp l904
l903:
	add $1,1
	pop $1
	jmp l901
l904:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setcursorpos
	jmp l903
l902:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l905:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l906
	jmp l908
l907:
	add $3,1
	pop $3
	jmp l905
l908:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setcursorpos
	jmp l907
l906:
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l910
	push $2
	spushs
	spop $a
	call [$a],getimg
	jmp l909
l910:
	push "null"
l909:
	ret
	end method
	method callimgfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getimg
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	cmpjne
	cmp0
	je l912
	push $3
	spushs
	push $2
	spop $a
	call [$a],setmouse
l912:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l914
	ret
l914:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	spushs
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	spushs
	push _sfcl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	spushs
	push _sfrl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l916
	push sfxmon
	spushs
	spop $a
	call [$a],play
l916:
	push _sobmn
	spushs
	push _sfmn
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	spushs
	push _sfmf
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l917:
	push $4
	push $3
	cmpjl
	cmp0
	je l918
	jmp l920
l919:
	add $4,1
	pop $4
	jmp l917
l920:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l919
l918:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	cmpje
	cmp0
	je l922
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l921
l922:
	push $5
	spushs
	push $2
	spop $a
	call [$a],_cbuildbutname
l921:
	push $4
	cmp0
	je l924
	push $5
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	spushs
	spop $a
	call [$a],hide
l924:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method _stdsndloop
	cthis play
	end method
	method __std_finish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	end method
	method strgetto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l926
	cthis get
	jmp l925
l926:
	push 0
	push $2
	cthis getb
l925:
	end method
	method strgeteto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis rfind
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l928
	cthis get
	jmp l927
l928:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
l927:
	end method
	method streq
	localstring $1
	pop $1
	cthis get
	push 0
	cthis length
	call $1,getb
	cmpje
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method strisbetween
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	localint $4
	push 0
	pop $4
l929:
	push $4
	cthis length
	cmpjl
	cmp0
	je l930
	jmp l932
l931:
	add $4,1
	pop $4
	jmp l929
l932:
	push $4
	cthis getbyte
	pop $3
	push $3
	push $1
	cmpjl
	cmp0
	jne l935
	push $3
	push $2
	cmpja
	jmp l936
l934:
	push 0
	jmp l936
l935:
	push 1
l936:
	cmp0
	je l937
	push 0
	ret
l937:
	jmp l931
l930:
	push 1
	end method
	method strisint
	push BYTE0
	push BYTE9
	cthis strisbetween
	end method
	method strisbin
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis strisbetween
	end method
	method strisalpha
	push BYTEa
	push BYTEz
	cthis strisbetween
	end method
	method streach
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l938:
	push $3
	cthis length
	cmpjl
	cmp0
	je l939
	jmp l941
l940:
	add $3,1
	pop $3
	jmp l938
l941:
	push $3
	push 1
	cthis getb
	pop $2
	push $2
	spushs
	push $1
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l940
l939:
	end method
	method strdotpos
	localint $1
	pop $1
	push "."
	cthis strgetto
	push "."
	pop $b
	popax
	add $a,$b
	push "."
	cthis strgetfrom
	spushs
	push 0
	push $1
	spop $h
	call $h,getb
	pop $b
	popax
	add $a,$b
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l943
	push 0
	jmp l942
l943:
	push 100
	spushs
	spop $h
	call $h,rand
	push $1
	cmpjle
l942:
	end method
	method between
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l945
	push $1
	jmp l944
l945:
	push $2
	push $3
	cmpja
	cmp0
	je l947
	push $3
	jmp l946
l947:
	push $2
l946:
l944:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l949
	push $1
	jmp l948
l949:
	push $2
l948:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l951
	push $1
	jmp l950
l951:
	push $2
l950:
	end method
	method inextrol
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	push 1
	cmpjl
	cmp0
	je l953
	push $2
	cthis set
	jmp l952
l953:
	push $3
	push $2
	cmpja
	cmp0
	je l955
	push 1
	cthis set
	jmp l954
l955:
	push $3
	cthis set
l954:
l952:
	end method
	method movoffsetr
	push igmoffsetx
	push 0
	cthis move
	end method
	method movoffsetl
	push igmoffsetx
	popax
	sub 0,$a
	push 0
	cthis move
	end method
	method imgprint
	cthis getname
	push ": pos="
	pop $b
	popax
	add $a,$b
	cthis getposx
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis getposy
	pop $b
	popax
	add $a,$b
	push " xy="
	pop $b
	popax
	add $a,$b
	cthis getpx
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis getpy
	pop $b
	popax
	add $a,$b
	push " wh="
	pop $b
	popax
	add $a,$b
	cthis getw
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis geth
	pop $b
	popax
	add $a,$b
	push " exy="
	pop $b
	popax
	add $a,$b
	cthis getex
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis getey
	pop $b
	popax
	add $a,$b
	push " lod="
	pop $b
	popax
	add $a,$b
	cthis lodx
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	cthis lody
	pop $b
	popax
	add $a,$b
	push " z="
	pop $b
	popax
	add $a,$b
	cthis getz
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	method imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push "1111"
	cthis imgborderss
	end method
	method imgborderss
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 3
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l957
	push "_img_bor"
	cthis blit
l957:
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push 1
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l959
	push "_img_bor"
	cthis blit
l959:
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 0
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l961
	push "_img_bor"
	cthis blit
l961:
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push 2
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l963
	push "_img_bor"
	cthis blit
l963:
	delete _img_bor
	end method
	method imgroundborder
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis imgborders
	cthis imgerasecorners
	end method
	method imgerasecorners
	localdef $1
	cthis getpx
	pop $1
	localdef $2
	cthis getpy
	pop $2
	push $1
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	push $1
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	end method
	method imgdrawline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "blit"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgeraseline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "erase"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgputoncenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method imgfuncline
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $9
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	pop $9
	localdef $10
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	pop $10
	localreal $11
	push $9
	push 0
	cmpje
	cmp0
	je l965
	push $10
	push 0
	cmpjl
	cmp0
	je l967
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l968:
	push $11
	push $6
	cmpjae
	cmp0
	je l969
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	sub $11,$a
	pop $11
	jmp l968
l969:
	push $6
	push $11
	pop $b
	popax
	sub $a,$b
	jmp l966
l967:
	push $10
	push 0
	cmpja
	cmp0
	je l971
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l972:
	push $11
	push $6
	cmpjle
	cmp0
	je l973
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $11,$a
	pop $11
	jmp l972
l973:
	push $11
	push $6
	pop $b
	popax
	sub $a,$b
	jmp l970
l971:
	push $8
l970:
l966:
	jmp l964
l965:
	push $9
	push $10
	call $8,length
	pop $11
	localreal $12
l974:
	push $8
	push $11
	cmpjle
	cmp0
	je l975
	push 1.0
	push $11
	push $8
	pop $b
	popax
	sub $a,$b
	push $11
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $12
	push $2
	spushs
	push $12
	push $9
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push $12
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $8,$a
	pop $8
	jmp l974
l975:
	push $8
	push $11
	pop $b
	popax
	sub $a,$b
l964:
	end method
	method anresizemets
	cthis getname
	clparent anima_pack,resizemethods
	end method
	method anfirstnontr
	cthis getname
	cthis getpx
	cthis getpy
	push 1
	push 0
	clparent classansearcher,_findnotr
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ancenterscreen
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis ansetcpos
	end method
	method ancenterimg
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	cthis ansetcpos
	end method
	method imgfit
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	cthis getpx
	push $1
	cmpjl
	cmp0
	je l977
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push 0
	cthis move
l977:
	cthis getpy
	push $2
	cmpjl
	cmp0
	je l979
	push 0
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
l979:
	cthis getex
	push $3
	cmpja
	cmp0
	je l981
	push $3
	cthis getex
	pop $b
	popax
	sub $a,$b
	push 0
	cthis move
l981:
	cthis getey
	push $4
	cmpja
	cmp0
	je l983
	push 0
	push $4
	cthis getey
	pop $b
	popax
	sub $a,$b
	cthis move
l983:
	end method
	method imgfitscreen
	push igmoffsetx
	push igmoffsety
	push iResX
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	push iResY
	push igmoffsety
	pop $b
	popax
	add $a,$b
	cthis imgfit
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method ansetsframe
	localdef $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	cthis setframe
	localint $3
	push 0
	pop $3
l984:
	push $3
	push 1
	popax
	sub 0,$a
	cthis nofframes
	cmpjl
	cmp0
	je l985
	cthis framename
	push $2
	cmpjne
	jmp l987
l985:
	push 0
	jmp l987
l986:
	push 1
l987:
	cmp0
	je l988
	add $3,1
	pop $3
	push 1
	popax
	sub 0,$a
	push $3
	cthis setframe
	jmp l984
l988:
	end method
	method ansetlastframe
	localdef $1
	pop $1
	push $1
	push $1
	cthis nofframes
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setframe
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	end method
	method objplayloop
	cthis objloop
	cthis play
	end method
	method anplayfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anplaysmoothfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis playsmooth
	end method
	method anplayif
	localdef $1
	pop $1
	push $1
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l990
	push $1
	cthis play
l990:
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method anposz
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	end method
	method annextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method ansetnextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cthis setframe
	end method
	method ansetnextfr
	push 1
	popax
	sub 0,$a
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	cthis setframe
	end method
	method ansetrandfr
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	cthis nofframes
	spushs
	spop $h
	call $h,rand
	cthis setframe
	end method
	method anhasaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	cthis nofactions
	cmpjne
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anaddfx
	cthis getname
	clparent AnimaFx,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method angetcpos
	cthis getcx
	cthis getcy
	ret
	end method
	method anactnr
	push 1
	popax
	sub 0,$a
	cthis actionnr
	end method
	method angetcrgba
	cthis getcx
	cthis getcy
	cthis getrgba
	end method
	method anisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l991:
	push $5
	cthis nofactions
	cmpjl
	cmp0
	je l992
	jmp l994
l993:
	add $5,1
	pop $5
	jmp l991
l994:
	push $5
	push 0
	cthis setframe
	push $1
	push $2
	push $3
	push $4
	cthis isin
	cmp0
	je l996
	push $5
	ret
l996:
	jmp l993
l992:
	push 1
	popax
	sub 0,$a
	end method
	method anreload
	localstring $1
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	localint $3
	cthis framenr
	pop $3
	localint $4
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpjne
	pop $4
	localint $5
	localint $6
	cthis getpos
	pop $6
	pop $5
	localint $7
	cthis getz
	pop $7
	push $1
	cthis getpath
	cthis load
	push $5
	push $6
	cthis setpos
	push $7
	cthis setz
	push $2
	cthis nofactions
	cmpjl
	cmp0
	je l998
	push $4
	cmp0
	je l1000
	push $2
	cthis play
l1000:
	push $2
	push $3
	cthis setframe
	jmp l997
l998:
	push 0
	push 0
	cthis setframe
l997:
	end method
	method anclipob
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	cthis clip
	end method
	method anclipscreen
	push 0
	push 0
	push igmappw
	push igmapph
	cthis clip
	end method
	method ancopy
	localstring $1
	pop $1
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l1002
	cthis show
	jmp l1001
l1002:
	cthis hide
l1001:
	push $1
	spushs
	spop $a
	call [$a],getpos
	cthis setpos
	end method
	method anconstmove
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push A
	push "mvx"
	push $2
	push "mvy"
	push $3
	cthis vars2
	push $1
	cthis setdelay
	push 1
	popax
	sub 0,$a
	push "global5"
	cthis anplayfin
	end method
	method global5
	push 1
	popax
	sub 0,$a
	cthis play
	push mvx
	push mvy
	cthis move
	end method
	method fxplayifgr
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l1003:
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l1004
	push $2
	push $3
	cmpjl
	jmp l1006
l1004:
	push 0
	jmp l1006
l1005:
	push 1
l1006:
	cmp0
	je l1007
	add $2,1
	pop $2
	jmp l1003
l1007:
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],playif
	end method
	method scmove
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	method scpos
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis setpos
	end method
	method igetsc
	cthis get
	push 0
	cmpjl
	cmp0
	je l1009
	push rgmscalex
	cthis get
	pop $b
	popax
	mul $a,$b
	push 0.5
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_i
	jmp l1008
l1009:
	push rgmscalex
	cthis get
	pop $b
	popax
	mul $a,$b
	push 0.5
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,to_i
l1008:
	end method
	method igetsc1
	localdef $1
	cthis igetsc
	pop $1
	call $1,abs
	push 1
	cmpjl
	cmp0
	je l1011
	call $1,sgn
	jmp l1010
l1011:
	push $1
l1010:
	end method
	method rgetsc
	push rgmscalex
	cthis get
	pop $b
	popax
	mul $a,$b
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis set
	cthis create
	end method
	method txtsetcol
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push $2
	push $3
	push $4
	cthis createtxt
	end method
	method txtshadow
	localint $1
	localstring $2
	pop $2
	pop $1
	push "txts"
	cthis hasvar
	neg
	cmp0
	je l1013
	new text,txts
	push $2
	call txts,setfont
l1013:
	cthis get
	call txts,set
	cthis getpx
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $1
	pop $b
	popax
	add $a,$b
	call txts,setpos
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	call txts,setz
	call txts,show
	push 0
	push 0
	push 0
	call txts,createtxt
	end method
	method txthides
	cthis hide
	push "txts"
	cthis hasvar
	cmp0
	je l1015
	call txts,hide
l1015:
	end method
	method txtshows
	cthis show
	push "txts"
	cthis hasvar
	cmp0
	je l1017
	call txts,show
l1017:
	end method
	method txtisin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l1018
	push $1
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1018
	push $2
	cthis getpy
	cmpjae
	cmp0
	je l1018
	push $2
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	cmpjle
	jmp l1020
l1018:
	push 0
	jmp l1020
l1019:
	push 1
l1020:
	end method
	method txtcenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtright
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	cthis getw
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtcenterscreen
	push igmappw
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setpos
	end method
	method imgfittxt
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	cmp0
	je l1022
	push $2
	spushs
	spop $a
	call [$a],getw
	push $2
	spushs
	spop $a
	call [$a],geth
	push 2
	push $4
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis transparent
	cthis create
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis setpos
l1022:
	new vector,_vtmplin
	push "string"
	call _vtmplin,type
	push $1
	push " "
	call _vtmplin,vecbuildfromstring
	localstring $6
	push ""
	pop $6
	localstring $7
	localstring $8
	localint $9
	localint $10
	localint $11
	localint $12
	localint $13
	localint $14
	localstring $15
	push "\\n"
	pop $15
	localint $16
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $16
	push $2
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $16
	push 1
	push 0
	clparent classansearcher,_findnotr
	pop $10
	pop $9
	push $2
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $16
	push 1
	popax
	sub 0,$a
	push 0
	clparent classansearcher,_findnotr
	pop $12
	pop $11
	localint $17
	push 0
	pop $17
l1023:
	push $17
	call _vtmplin,size
	cmpjl
	cmp0
	je l1024
	jmp l1026
l1025:
	add $17,1
	pop $17
	jmp l1023
l1026:
	push $6
	pop $7
	push $17
	call _vtmplin,get
	pop $8
	push $15
	call $8,contains
	cmp0
	je l1028
	localstring $18
	push $15
	call $8,strgetto
	pop $18
	localstring $19
	push $15
	call $8,strgetfrom
	pop $19
	call $18,length
	push 0
	cmpja
	cmp0
	je l1030
	push $18
	pop $8
	jmp l1029
l1030:
	push ""
	pop $8
l1029:
	call $19,length
	push 0
	cmpja
	cmp0
	je l1032
	push $17
	push 1
	pop $b
	popax
	add $a,$b
	push $19
	call _vtmplin,vecaddat
l1032:
	push 1
	pop $13
	jmp l1027
l1028:
	push 0
	pop $13
l1027:
	push $8
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $6,$a
	pop $6
	push $3
	spushs
	push $6
	spop $a
	call [$a],txtset
	push $3
	spushs
	push $9
	push $16
	spop $a
	call [$a],setpos
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	push $11
	cmpja
	cmp0
	jne l1035
	push $13
	jmp l1036
l1034:
	push 0
	jmp l1036
l1035:
	push 1
l1036:
	cmp0
	je l1037
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	push $11
	cmpjle
	cmp0
	je l1039
	push ""
	pop $7
	jmp l1038
l1039:
	push $13
	cmp0
	je l1041
	push $17
	push 1
	pop $b
	popax
	add $a,$b
	call _vtmplin,size
	cmpjl
	jmp l1043
l1041:
	push 0
	jmp l1043
l1042:
	push 1
l1043:
	cmp0
	je l1044
	push $17
	push 1
	pop $b
	popax
	add $a,$b
	push $15
	push $17
	push 1
	pop $b
	popax
	add $a,$b
	call _vtmplin,get
	pop $b
	popax
	add $a,$b
	call _vtmplin,set
l1044:
l1038:
	push $7
	push ""
	cmpjne
	cmp0
	je l1046
	push $3
	spushs
	push $7
	spop $a
	call [$a],txtset
	push $8
	push " "
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	pop $7
	jmp l1045
l1046:
	push ""
	pop $6
	push ""
	pop $7
l1045:
	push $3
	cthis blit
	push $4
	popax
	add $16,$a
	pop $16
	push $16
	push $2
	spushs
	spop $a
	call [$a],getey
	cmpjl
	cmp0
	je l1048
	push $2
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $16
	push 1
	push 0
	clparent classansearcher,_findnotr
	pop $10
	pop $9
	push $2
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $16
	push 1
	popax
	sub 0,$a
	push 0
	clparent classansearcher,_findnotr
	pop $12
	pop $11
l1048:
l1037:
	jmp l1025
l1024:
	push $6
	push ""
	cmpjne
	cmp0
	je l1050
	push $3
	spushs
	push $6
	spop $a
	call [$a],txtset
	push $3
	spushs
	push $9
	push $16
	spop $a
	call [$a],setpos
	push $3
	cthis blit
l1050:
	delete _vtmplin
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l1052
	localint $2
	push 0
	pop $2
l1053:
	push $2
	push $1
	cmpjl
	cmp0
	je l1054
	jmp l1056
l1055:
	add $2,1
	pop $2
	jmp l1053
l1056:
	push $2
	cthis add
	jmp l1055
l1054:
l1052:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l1057:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1058
	jmp l1060
l1059:
	add $2,1
	pop $2
	jmp l1057
l1060:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l1059
l1058:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1062
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l1062:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1064
	sub $2,1
	pop $2
	jmp l1063
l1064:
	push $2
	push 0
	cmpje
	cmp0
	je l1066
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l1066:
l1063:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1067
	push $1
	cthis size
	cmpjl
	jmp l1069
l1067:
	push 0
	jmp l1069
l1068:
	push 1
l1069:
	cmp0
	je l1071
	push $1
	cthis get
	jmp l1070
l1071:
	push "null"
l1070:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l1073
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l1072
l1073:
	push "null"
l1072:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l1074:
	cthis size
	push $1
	cmpja
	cmp0
	je l1075
	cthis vecpop
	popax
	jmp l1074
l1075:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	end method
	method vecreplace
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1077
	push $3
	push $2
	cthis set
l1077:
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1079
	ret
l1079:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l1080:
	push $8
	push $1
	cmpjl
	cmp0
	je l1081
	jmp l1083
l1082:
	add $8,1
	pop $8
	jmp l1080
l1083:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l1084:
	push $9
	push $1
	cmpjl
	cmp0
	je l1085
	jmp l1087
l1086:
	add $9,1
	pop $9
	jmp l1084
l1087:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l1089
	push $6
	pop $5
	push $9
	pop $7
l1089:
	jmp l1086
l1085:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l1082
l1081:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l1090:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l1091
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l1090
l1091:
	call $1,length
	push 0
	cmpja
	cmp0
	je l1093
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l1093:
	end method
	method obbuildfromstring2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l1094:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l1095
	push $4
	push 0
	cmpja
	cmp0
	je l1097
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
l1097:
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l1094
l1095:
	call $1,length
	push 0
	cmpja
	cmp0
	je l1099
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l1099:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecbuildfromstring2
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring2
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l1100:
	push $2
	push $1
	cmpjl
	cmp0
	je l1101
	jmp l1103
l1102:
	add $2,1
	pop $2
	jmp l1100
l1103:
	push 0
	cthis removeat
	jmp l1102
l1101:
	end method
	method vecremovefrom
	localint $1
	pop $1
l1104:
	push $1
	cthis size
	cmpjl
	cmp0
	je l1105
	push $1
	cthis removeat
	jmp l1104
l1105:
	end method
	method vecfindfrom
	localint $1
	localdef $2
	pop $2
	pop $1
l1106:
	push $1
	cthis size
	cmpjl
	cmp0
	je l1107
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1109
	push $1
	ret
	jmp l1108
l1109:
	add $1,1
	pop $1
l1108:
	jmp l1106
l1107:
	push 1
	popax
	sub 0,$a
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l1112
	cthis size
	push 0
	cmpje
	jmp l1113
l1111:
	push 0
	jmp l1113
l1112:
	push 1
l1113:
	cmp0
	je l1114
	ret
l1114:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l1116
	localint $4
	push $1
	pop $4
l1117:
	push $4
	push $2
	cmpja
	cmp0
	je l1118
	jmp l1120
l1119:
	sub $4,1
	pop $4
	jmp l1117
l1120:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l1119
l1118:
	jmp l1115
l1116:
	push $1
	push $2
	cmpjl
	cmp0
	je l1122
	localint $4
	push $1
	pop $4
l1123:
	push $4
	push $2
	cmpjl
	cmp0
	je l1124
	jmp l1126
l1125:
	add $4,1
	pop $4
	jmp l1123
l1126:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l1125
l1124:
l1122:
l1115:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1128
	push $2
	push 0
	cthis vecposfromto
	jmp l1127
l1128:
	push $1
	cthis addbegin
l1127:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1130
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l1129
l1130:
	push $1
	cthis addbegin
l1129:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1132
	push $3
	push $2
	cthis set
l1132:
	end method
	method veceq
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjne
	cmp0
	je l1134
	push 0
	ret
l1134:
	localint $3
	push 0
	pop $3
l1135:
	push $3
	push $2
	cmpjl
	cmp0
	je l1136
	jmp l1138
l1137:
	add $3,1
	pop $3
	jmp l1135
l1138:
	push $3
	cthis get
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1140
	push 0
	ret
l1140:
	jmp l1137
l1136:
	push 1
	end method
	method vecbuild
	push "addbegin"
	cthis withlist
	end method
	method veceq2
	new vector,___v
	cthis getvectype
	call ___v,type
	call ___v,vecbuild
	localint $1
	push "___v"
	cthis veceq
	pop $1
	delete ___v
	push $1
	end method
	method veccopydbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	cthis vecadddbrow
	end method
	method vecadddbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1141:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1142
	jmp l1144
l1143:
	add $3,1
	pop $3
	jmp l1141
l1144:
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1143
l1142:
	end method
	method vecchecknext
	localint $1
	pop $1
	add $1,1
	pop $1
	push $1
	cthis size
	cmpjl
	cmp0
	je l1146
	push $1
	cthis get
	jmp l1145
l1146:
	push "null"
l1145:
	end method
	method vecaddat
	localint $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1148
	push $1
	cthis size
	cmpjle
	jmp l1150
l1148:
	push 0
	jmp l1150
l1149:
	push 1
l1150:
	cmp0
	je l1151
	push $2
	cthis add
	localint $3
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l1152:
	push $3
	push $1
	cmpja
	cmp0
	je l1153
	jmp l1155
l1154:
	sub $3,1
	pop $3
	jmp l1152
l1155:
	push $3
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l1154
l1153:
	push $1
	push $2
	cthis set
l1151:
	end method
	method vecsumto
	localint $1
	pop $1
	push $1
	push 0
	cmpjl
	cmp0
	jne l1158
	cthis size
	push 0
	cmpje
	jmp l1159
l1157:
	push 0
	jmp l1159
l1158:
	push 1
l1159:
	cmp0
	je l1160
	push 0
	ret
	jmp l1156
l1160:
	push $1
	cthis size
	cmpja
	cmp0
	je l1162
	cthis size
	pop $1
l1162:
l1156:
	localdef $2
	push 0
	cthis get
	pop $2
	localint $3
	push 1
	pop $3
l1163:
	push $3
	push $1
	cmpjl
	cmp0
	je l1164
	jmp l1166
l1165:
	add $3,1
	pop $3
	jmp l1163
l1166:
	push $3
	cthis get
	popax
	add $2,$a
	pop $2
	jmp l1165
l1164:
	push $2
	end method
	method vecsum
	cthis size
	cthis vecsumto
	end method
	method vecclosest
	localdef $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpjle
	cmp0
	je l1168
	push 1
	popax
	sub 0,$a
	ret
l1168:
	localint $3
	push 0
	pop $3
	localdef $4
	push $1
	push 0
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $4
	localint $5
	push 1
	pop $5
l1169:
	push $5
	push $2
	cmpjl
	cmp0
	je l1170
	jmp l1172
l1171:
	add $5,1
	pop $5
	jmp l1169
l1172:
	localdef $6
	push $1
	push $5
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $6
	push $6
	push $4
	cmpjl
	cmp0
	je l1174
	push $5
	pop $3
	push $6
	pop $4
l1174:
	jmp l1171
l1170:
	push $3
	end method
	method vecloadargs
	localdef $1
	pop $1
l1175:
	push $1
	push A
	cmpjne
	cmp0
	je l1176
	push $1
	cthis addbegin
	localdef $1
	pop $1
	jmp l1175
l1176:
	end method
	method vecbuildlines
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push "string"
	cthis type
	push $2
	push 0
	cmpjle
	cmp0
	je l1178
	ret
l1178:
	new vector,_vtmplin
	push "string"
	call _vtmplin,type
	push $1
	push " "
	call _vtmplin,vecbuildfromstring
	localstring $3
	push ""
	pop $3
	localint $4
	push 0
	pop $4
l1179:
	push $4
	call _vtmplin,size
	cmpjl
	cmp0
	je l1180
	jmp l1182
l1181:
	add $4,1
	pop $4
	jmp l1179
l1182:
	push $4
	call _vtmplin,get
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	call $3,length
	push $2
	cmpjae
	cmp0
	je l1184
	push $3
	cthis add
	push ""
	pop $3
l1184:
	jmp l1181
l1180:
	push $3
	push ""
	cmpjne
	cmp0
	je l1186
	push $3
	cthis add
l1186:
	delete _vtmplin
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l1188
	ret
l1188:
	sub $1,1
	pop $1
	cthis free
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l1189:
	push $2
	push A
	cmpjne
	cmp0
	je l1190
	jmp l1192
l1191:
	jmp l1189
l1192:
	push $4
	push 0
	cmpje
	cmp0
	je l1194
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l1194:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l1196
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l1195
l1196:
	push 0
l1195:
	pop $4
	jmp l1191
l1190:
	end method
	method dbbuild2
	cthis free
	localstring $1
	pop $1
l1197:
	push $1
	push A
	cmpjne
	cmp0
	je l1198
	push $1
	push "null"
	cmpje
	cmp0
	je l1200
	cthis addbeginrow
	popax
	jmp l1199
l1200:
	push 0
	push $1
	cthis addbegin
l1199:
	pop $1
	jmp l1197
l1198:
	end method
	method dbaddvec
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l1201:
	push $3
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1202
	jmp l1204
l1203:
	add $3,1
	pop $3
	jmp l1201
l1204:
	push $2
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1203
l1202:
	end method
	method dbcopy
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis dbcopyfromto
	end method
	method dbcopyrow
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis dbcopyfromto
	end method
	method dbcopyfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push $3
	cthis dbaddrowfromto
	end method
	method dbaddrowfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	localint $6
	push $2
	pop $4
l1205:
	push $4
	push $3
	cmpjl
	cmp0
	je l1206
	jmp l1208
l1207:
	add $4,1
	pop $4
	jmp l1205
l1208:
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push 0
	pop $5
l1209:
	push $5
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1210
	jmp l1212
l1211:
	add $5,1
	pop $5
	jmp l1209
l1212:
	push $6
	push $1
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	cthis add
	jmp l1211
l1210:
	jmp l1207
l1206:
	end method
	method dbadddbrowtorow
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1213:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1214
	jmp l1216
l1215:
	add $4,1
	pop $4
	jmp l1213
l1216:
	push $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	cthis add
	jmp l1215
l1214:
	end method
	method dbremovecol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l1217:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1218
	jmp l1220
l1219:
	add $2,1
	pop $2
	jmp l1217
l1220:
	push $2
	cthis getcolsno
	push $1
	cmpja
	cmp0
	je l1222
	push $2
	push $1
	cthis removeat
l1222:
	jmp l1219
l1218:
	end method
	method dbcopyfromtos
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis dbcopyfromto
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l1224
l1225:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l1226
	cthis dbremovelast
	jmp l1225
l1226:
	jmp l1223
l1224:
	cthis free
l1223:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbrowtostring
	localint $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push ""
	pop $5
	localint $6
	push $1
	cthis getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push $3
	push 0
	cmpjl
	cmp0
	jne l1229
	push $3
	push $6
	cmpja
	jmp l1230
l1228:
	push 0
	jmp l1230
l1229:
	push 1
l1230:
	cmp0
	je l1231
	push $6
	pop $3
l1231:
l1232:
	push $2
	push $3
	cmpjle
	cmp0
	je l1233
	jmp l1235
l1234:
	add $2,1
	pop $2
	jmp l1232
l1235:
	push $1
	push $2
	cthis get
	push $4
	pop $b
	popax
	add $a,$b
	popax
	add $5,$a
	pop $5
	jmp l1234
l1233:
	push $5
	end method
	method dbgetstringrow
	localint $1
	pop $1
	push $1
	push 0
	push 1
	popax
	sub 0,$a
	push ""
	cthis dbrowtostring
	end method
	method dbaddrow
	localdef $1
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	pop $2
l1236:
	push A
	push $2
	cmpjne
	cmp0
	je l1237
	push $1
	push $2
	cthis addbegin
	localdef $2
	pop $2
	jmp l1236
l1237:
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l1239
	push $3
	push 0
	cmpjae
	jmp l1241
l1239:
	push 0
	jmp l1241
l1240:
	push 1
l1241:
	cmp0
	je l1242
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l1243:
	push $3
	push $5
	cmpjl
	cmp0
	je l1244
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l1243
l1244:
l1242:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1246
	push $1
	push $2
	cthis get
	jmp l1245
l1246:
	push "null"
l1245:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1248
	push $3
	cthis getcolsno
	push $2
	cmpja
	jmp l1250
l1248:
	push 0
	jmp l1250
l1249:
	push 1
l1250:
	cmp0
	je l1251
	push $3
	push $2
	cthis get
	jmp l1247
l1251:
	push "null"
l1247:
	end method
	method dbget
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1253
	push $2
	push 1
	cthis get
	jmp l1252
l1253:
	push "null"
l1252:
	end method
	method dbgetint
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1255
	push $2
	push 1
	cthis get
	spushs
	spop $h
	call $h,to_i
	jmp l1254
l1255:
	push 0
l1254:
	end method
	method dbgetdef
	localstring $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1257
	push $3
	push 1
	cthis get
	jmp l1256
l1257:
	push $2
l1256:
	end method
	method dbgetscr
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1259
	push $2
	push 1
	cthis get
	spushs
	spop $h
	call $h,to_r
	push rgmscalex
	pop $b
	popax
	mul $a,$b
	jmp l1258
l1259:
	push 0.0
l1258:
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l1260:
	push $2
	push 0
	cmpjae
	cmp0
	je l1261
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l1263
	push $2
	ret
l1263:
	sub $2,1
	pop $2
	jmp l1260
l1261:
	push 1
	popax
	sub 0,$a
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1265
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l1265:
	push 0
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l1267
	localint $3
	push 0
	pop $3
l1268:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1269
	jmp l1271
l1270:
	add $3,1
	pop $3
	jmp l1268
l1271:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l1273
	push $3
	ret
l1273:
	jmp l1270
l1269:
l1267:
	push 1
	popax
	sub 0,$a
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1274:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l1275
	jmp l1277
l1276:
	add $3,1
	pop $3
	jmp l1274
l1277:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1279
	push $3
	ret
l1279:
	jmp l1276
l1275:
	push 1
	popax
	sub 0,$a
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method dbsetall
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1280:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1281
	jmp l1283
l1282:
	add $2,1
	pop $2
	jmp l1280
l1283:
	localdef $3
	push 0
	pop $3
l1284:
	push $3
	push $2
	cthis getcolsno
	cmpjl
	cmp0
	je l1285
	jmp l1287
l1286:
	add $3,1
	pop $3
	jmp l1284
l1287:
	push $2
	push $3
	push $1
	cthis set
	jmp l1286
l1285:
	jmp l1282
l1281:
	end method
	method dbeach_row
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1288:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1289
	jmp l1291
l1290:
	add $2,1
	pop $2
	jmp l1288
l1291:
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	jmp l1290
l1289:
	end method
	method dbeq
	localstring $1
	pop $1
	cthis getrowsno
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjne
	cmp0
	je l1293
	push 0
	ret
l1293:
	localint $2
	localint $3
	localint $4
	push 0
	pop $4
l1294:
	push $4
	cthis getrowsno
	cmpjl
	cmp0
	je l1295
	jmp l1297
l1296:
	add $4,1
	pop $4
	jmp l1294
l1297:
	push $4
	cthis getcolsno
	pop $2
	push $2
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjne
	cmp0
	je l1299
	push 0
	ret
l1299:
	push 0
	pop $3
l1300:
	push $3
	push $2
	cmpjl
	cmp0
	je l1301
	jmp l1303
l1302:
	add $3,1
	pop $3
	jmp l1300
l1303:
	push $4
	push $3
	cthis get
	push $1
	spushs
	push $4
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1305
	push 0
	ret
l1305:
	jmp l1302
l1301:
	jmp l1296
l1295:
	push 1
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1307
	push 1
	popax
	sub 0,$a
	ret
l1307:
	localint $3
	call $1,rand
	pop $3
l1308:
	push $3
	push $2
	cmpje
	cmp0
	je l1309
	jmp l1311
l1310:
	call $1,rand
	pop $3
	jmp l1308
l1311:
	jmp l1310
l1309:
	push $3
	end method
	method bin_to_i
	localstring $1
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	call $1,length
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1312:
	push $4
	push 0
	cmpjae
	cmp0
	je l1313
	jmp l1315
l1314:
	sub $4,1
	pop $4
	jmp l1312
l1315:
	push $4
	push 1
	call $1,getb
	push "1"
	cmpje
	cmp0
	je l1317
	push $2
	popax
	add $3,$a
	pop $3
l1317:
	push 2
	popax
	mul $2,$a
	pop $2
	jmp l1314
l1313:
	push $3
	end method
	method timsetmstick
	localint $1
	pop $1
	call $1,imstotick
	cthis settick
	end method
	method std_anfadeout_finish
	cthis unlink_internal_filter
	cthis hide
	end method
	method delete_internals
	call gameapi,getgamename
	spushs
	push "__ft"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardelif
	push "__ft"
	cthis getname
	pop $b
	popax
	add $a,$b
	cthis vardelif
	push "__tim"
	cthis getname
	pop $b
	popax
	add $a,$b
	cthis vardelif
	end method
	method internal_filter
	localdef $1
	push "__ft"
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis hasvar
	neg
	cmp0
	je l1319
	push $1
	spushs
	spop $e
	new filter,[$e]
	push $1
	spushs
	spop $a
	call [$a],buildfullname
l1319:
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],link
	push $1
	spushs
	spop $a
	call [$a],getfullname
	end method
	method internal_timer
	localdef $1
	push "__tim"
	cthis getname
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	cthis hasvar
	neg
	cmp0
	je l1321
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push 1
	spop $a
	call [$a],setcycle
	push $1
	spushs
	push A
	push "sfunc"
	push "null"
	push "sfilter"
	push "null"
	push "rstep"
	push 0.0
	push "ropacity"
	push 0.0
	push "rstepzoom"
	push 0.0
	push "rzoom"
	push 0.0
	push "rzoomsmall"
	push 0.0
	push "rzoombig"
	push 1.0
	push "ralfamin"
	push 0.0
	push "ralfamax"
	push 255.0
	spop $a
	call [$a],vars2
l1321:
	push $1
	end method
	method unlink_internal_filter
	localdef $1
	cthis internal_timer
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1323
	push $1
	spushs
	push 0
	spop $a
	call [$a],stop
l1323:
	cthis internal_filter
	spushs
	spop $a
	call [$a],unlink
	end method
	method anhideonsetframe
	push "bhideonsf"
	cthis var
	push "bopacityfr"
	cthis hasvar
	neg
	cmp0
	je l1325
	push "onsetframe"
	push "_stdanhide"
	cthis addmethod
l1325:
	end method
	method anopacityframe
	push "bopacityfr"
	cthis var
	push "onsetframe"
	push "global6"
	cthis addmethod
	end method
	method global6
	localdef $1
	cthis framename
	pop $1
	push 0
	push 2
	call $1,getb
	push "op"
	cmpje
	cmp0
	je l1327
	cthis internal_filter
	spushs
	push 2
	call $1,strsubb
	spushs
	spop $h
	call $h,to_r
	push 100.0
	pop $b
	popax
	div $a,$b
	psax
	push 255
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],setopacity
	jmp l1326
l1327:
	cthis internal_filter
	spushs
	push 255
	spop $a
	call [$a],setopacity
l1326:
	push "bhideonsf"
	cthis hasvar
	cmp0
	je l1329
	cthis hide
l1329:
	end method
	method anrandfrplay
	push "brandfrplay"
	cthis var
	push "onendframe"
	push "ansetrandfr"
	cthis addmethod
	end method
	method ansetopacity
	localint $1
	pop $1
	cthis internal_filter
	spushs
	push $1
	spop $a
	call [$a],setopacity
	end method
	method anzoom
	localreal $1
	pop $1
	localdef $2
	cthis internal_filter
	pop $2
	push $2
	spushs
	push 1
	spop $a
	call [$a],setpivottype
	push $2
	spushs
	push 1
	spop $a
	call [$a],setsmooth
	push $2
	spushs
	push $1
	spop $a
	call [$a],setzoom
	end method
	method anzoomxy
	localreal $1
	localreal $2
	pop $2
	pop $1
	localdef $3
	cthis internal_filter
	pop $3
	push $3
	spushs
	push 1
	spop $a
	call [$a],setpivottype
	push $3
	spushs
	push 1
	spop $a
	call [$a],setsmooth
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],setzoomxy
	end method
	method anzoomin
	localint $1
	localstring $2
	pop $2
	pop $1
	push 255
	cthis ansetopacity
	push $1
	push 1
	push 0
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomout
	localint $1
	localstring $2
	pop $2
	pop $1
	push 255
	cthis ansetopacity
	push $1
	push 1
	popax
	sub 0,$a
	push 0
	push $2
	cthis anzoomfadeinout
	end method
	method anfadein
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push 1
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadein
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadeout
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	push $2
	cthis anzoomfadeinout
	end method
	method anfadeout
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push 1
	popax
	sub 0,$a
	push $2
	cthis anzoomfadeinout
	end method
	method anzoomfadeinout
	localint $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push 0
	push 255
	push 0.0
	push 1.0
	cthis _anzoomfadeinout
	end method
	method _anzoomfadeinout
	localint $1
	localint $2
	localint $3
	localstring $4
	localreal $5
	localreal $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpja
	cmp0
	je l1331
	push 1
	pop $3
	jmp l1330
l1331:
	push $3
	push 0
	cmpjl
	cmp0
	je l1333
	push 1
	popax
	sub 0,$a
	pop $3
l1333:
l1330:
	push $2
	push 0
	cmpja
	cmp0
	je l1335
	push 1
	pop $2
	jmp l1334
l1335:
	push $2
	push 0
	cmpjl
	cmp0
	je l1337
	push 1
	popax
	sub 0,$a
	pop $2
l1337:
l1334:
	cthis show
	localdef $9
	cthis internal_filter
	pop $9
	localdef $10
	cthis internal_timer
	pop $10
	push $9
	spushs
	cthis getname
	spop $a
	call [$a],link
	push $10
	spushs
	push $4
	spop $a
	call [$a],sfunc=
	push $1
	call engine,getloopdelay
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l1339
	push $3
	push 0
	cmpja
	cmp0
	je l1341
	push $6
	cthis ansetopacity
	jmp l1340
l1341:
	push $5
	cthis ansetopacity
l1340:
	push $4
	push "null"
	cmpjne
	cmp0
	je l1343
	push $4
	spushs
	spop $d
	cthis [$d]
l1343:
	ret
l1339:
	localreal $11
	push $6
	push $5
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	pop $11
	push $11
	push 1.0
	cmpjl
	cmp0
	je l1345
	push 1.0
	pop $11
l1345:
	localreal $12
	push $8
	push $7
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	pop $12
	push $10
	spushs
	push $9
	spop $a
	call [$a],sfilter=
	push $10
	spushs
	push $11
	push $3
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],rstep=
	push $10
	spushs
	push $5
	spop $a
	call [$a],ropacity=
	push $10
	spushs
	push $12
	push $2
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],rstepzoom=
	push $10
	spushs
	push 0.0
	spop $a
	call [$a],rzoom=
	push $10
	spushs
	push $7
	spop $a
	call [$a],rzoomsmall=
	push $10
	spushs
	push $8
	spop $a
	call [$a],rzoombig=
	push $10
	spushs
	push $5
	spop $a
	call [$a],ralfamin=
	push $10
	spushs
	push $6
	spop $a
	call [$a],ralfamax=
	push $3
	cmp0
	je l1347
	push $9
	spushs
	push $3
	push 1
	cmpje
	cmp0
	je l1349
	push $5
	jmp l1348
l1349:
	push $6
l1348:
	spop $a
	call [$a],setopacity
	push $10
	spushs
	push $9
	spushs
	spop $a
	call [$a],getopacity
	spop $a
	call [$a],ropacity=
l1347:
	push $2
	cmp0
	je l1351
	push $9
	spushs
	push $2
	push 1
	cmpje
	cmp0
	je l1353
	push $7
	push $12
	pop $b
	popax
	add $a,$b
	jmp l1352
l1353:
	push $8
l1352:
	spop $a
	call [$a],setzoom
	push $10
	spushs
	push $9
	spushs
	spop $a
	call [$a],getzoomx
	spop $a
	call [$a],rzoom=
l1351:
	push $10
	spushs
	push "onfinish"
	push "global7"
	spop $a
	call [$a],addmethod
	push $10
	spushs
	spop $a
	call [$a],play
	end method
	method global7
	push rstep
	popax
	add ropacity,$a
	pop ropacity
	push rstepzoom
	popax
	add rzoom,$a
	pop rzoom
	push ropacity
	push ralfamax
	cmpjae
	cmp0
	je l1355
	push rstep
	push 0.0
	cmpja
	jmp l1357
l1355:
	push 0
	jmp l1357
l1356:
	push 1
l1357:
	cmp0
	jne l1359
	push rzoom
	push rzoombig
	cmpjae
	cmp0
	je l1360
	push rstepzoom
	push 0.0
	cmpja
	jmp l1362
l1360:
	push 0
	jmp l1362
l1361:
	push 1
l1362:
	jmp l1363
l1358:
	push 0
	jmp l1363
l1359:
	push 1
l1363:
	cmp0
	je l1364
	push rstepzoom
	push 0.0
	cmpja
	cmp0
	je l1366
	push sfilter
	spushs
	push rzoombig
	spop $a
	call [$a],setzoom
l1366:
	push rstep
	push 0.0
	cmpja
	cmp0
	je l1368
	push sfilter
	spushs
	push ralfamax
	spop $a
	call [$a],setopacity
l1368:
	push sfunc
	push "null"
	cmpjne
	cmp0
	je l1370
	cthis getbuildername
	spushs
	push sfunc
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1370:
	jmp l1354
l1364:
	push ropacity
	push ralfamin
	cmpjle
	cmp0
	je l1372
	push rstep
	push 0.0
	cmpjl
	jmp l1374
l1372:
	push 0
	jmp l1374
l1373:
	push 1
l1374:
	cmp0
	jne l1376
	push rstepzoom
	push 0.0
	cmpjl
	cmp0
	je l1377
	push rzoom
	push rzoomsmall
	push rstepzoom
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l1379
l1377:
	push 0
	jmp l1379
l1378:
	push 1
l1379:
	jmp l1380
l1375:
	push 0
	jmp l1380
l1376:
	push 1
l1380:
	cmp0
	je l1381
	push rstepzoom
	push 0.0
	cmpjl
	cmp0
	je l1383
	push rzoomsmall
	push 0.0
	cmpje
	jmp l1385
l1383:
	push 0
	jmp l1385
l1384:
	push 1
l1385:
	cmp0
	jne l1387
	push rstep
	push 0.0
	cmpjl
	cmp0
	je l1388
	push ropacity
	push ralfamin
	cmpjle
	jmp l1390
l1388:
	push 0
	jmp l1390
l1389:
	push 1
l1390:
	jmp l1391
l1386:
	push 0
	jmp l1391
l1387:
	push 1
l1391:
	cmp0
	je l1392
	push sfilter
	spushs
	spop $a
	call [$a],unlink
	cthis getbuildername
	spushs
	spop $a
	call [$a],hide
l1392:
	push sfunc
	push "null"
	cmpjne
	cmp0
	je l1394
	cthis getbuildername
	spushs
	push sfunc
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1394:
	jmp l1371
l1381:
	push rstep
	push 0.0
	cmpjne
	cmp0
	je l1396
	push sfilter
	spushs
	push ropacity
	spop $a
	call [$a],setopacity
l1396:
	push rstepzoom
	push 0.0
	cmpjne
	cmp0
	je l1398
	push sfilter
	spushs
	push rzoom
	spop $a
	call [$a],setzoom
l1398:
	cthis play
l1371:
l1354:
	end method
	method imgbuildfromlist
	new vector,__vtmp
	push "string"
	call __vtmp,type
	call __vtmp,vecloadargs
	push "__vtmp"
	cthis imgbuildfromvec
	delete __vtmp
	end method
	method imgbuildfromvec
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],empty
	cmp0
	je l1400
	ret
l1400:
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],first
	pop $2
	localint $3
	push $2
	spushs
	spop $a
	call [$a],getpx
	pop $3
	localint $4
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $4
	localint $5
	push $2
	spushs
	spop $a
	call [$a],getex
	pop $5
	localint $6
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $6
	localint $7
	push 1
	pop $7
l1401:
	push $7
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1402
	jmp l1404
l1403:
	add $7,1
	pop $7
	jmp l1401
l1404:
	push $1
	spushs
	push $7
	spop $a
	call [$a],get
	pop $2
	push $3
	push $2
	spushs
	spop $a
	call [$a],getpx
	cmpja
	cmp0
	je l1406
	push $2
	spushs
	spop $a
	call [$a],getpx
	pop $3
l1406:
	push $4
	push $2
	spushs
	spop $a
	call [$a],getpy
	cmpja
	cmp0
	je l1408
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $4
l1408:
	push $5
	push $2
	spushs
	spop $a
	call [$a],getex
	cmpjl
	cmp0
	je l1410
	push $2
	spushs
	spop $a
	call [$a],getex
	pop $5
l1410:
	push $6
	push $2
	spushs
	spop $a
	call [$a],getey
	cmpjl
	cmp0
	je l1412
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $6
l1412:
	jmp l1403
l1402:
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis create
	push $3
	push $4
	cthis setpos
	push 0
	pop $7
l1413:
	push $7
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1414
	jmp l1416
l1415:
	add $7,1
	pop $7
	jmp l1413
l1416:
	push $1
	spushs
	push $7
	spop $a
	call [$a],get
	cthis blit
	jmp l1415
l1414:
	end method
	method anfadeoutloop
	push ifadedelay
	push "anfadeinloop"
	cthis anfadeout
	end method
	method anfadeinloop
	push ifadedelay
	push "anfadeoutloop"
	cthis anfadein
	end method
	method imgstopoverlay
	localdef $1
	cthis imgetoverlay
	pop $1
	push $1
	spushs
	spop $a
	call [$a],unlink_internal_filter
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method imgetoverlay
	push "imgoverlay_"
	cthis getname
	pop $b
	popax
	add $a,$b
	end method
	method imgstartoverlay
	cthis imgetoverlay
	spushs
	spop $a
	call [$a],anfadeinloop
	end method
	method _imgbuildoverlay
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l1418
	push GAME
	spushs
	push "img"
	push $1
	spop $a
	call [$a],varnew
l1418:
	push $1
	spushs
	cthis getname
	spop $a
	call [$a],imgclone
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push 0
	spop $a
	call [$a],paint
	push $6
	push 0
	cmpja
	cmp0
	je l1420
	push $1
	spushs
	push "ifadedelay"
	spop $a
	call [$a],hasvar
	neg
	jmp l1422
l1420:
	push 0
	jmp l1422
l1421:
	push 1
l1422:
	cmp0
	je l1423
	push $1
	spushs
	push "ifadedelay"
	push $6
	spop $a
	call [$a],var2
	push $1
	spushs
	spop $a
	call [$a],anfadeinloop
l1423:
	end method
	method imgbuildoverlay
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	cthis imgetoverlay
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _imgbuildoverlay
	end method
	method imgsetoverlay
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push 0
	cthis imgbuildoverlay
	end method
	method imgclonesize
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	cthis transparent
	cthis create
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setpos
	end method
	method imgclonesizecol
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	push $2
	push $3
	push $4
	push $5
	cthis create
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setpos
	end method
	method imgclone
	localstring $1
	pop $1
	push $1
	cthis imgclonesize
	push $1
	cthis blit
	push $1
	spushs
	spop $a
	call [$a],getz
	cthis setz
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l1425
	cthis show
	jmp l1424
l1425:
	cthis hide
l1424:
	end method
	method imgclonezoom
	localstring $1
	localreal $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],anzoom
	push $1
	cthis imgclone
	push $1
	spushs
	spop $a
	call [$a],unlink_internal_filter
	end method
	method imgloadzoom
	localstring $1
	localreal $2
	pop $2
	pop $1
	push "_imtmpload"
	push $1
	push 0
	cthis newimg
	push "_imtmpload"
	push $2
	cthis imgclonezoom
	delete _imtmpload
	end method
	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push iResX
	push iResY
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class TicksCounter
	method init
	new int,istart
	end method
	method start
	call engine,getticks
	pop istart
	end method
	method stop
	call engine,getticks
	push istart
	pop $b
	popax
	sub $a,$b
	pop istart
	end method
	method get
	push istart
	ret
	end method
	method stopget
	cthis stop
	cthis get
	ret
	end method
	method print
	localstring $1
	pop $1
	push $1
	push " delay: "
	pop $b
	popax
	add $a,$b
	cthis stopget
	pop $b
	popax
	add $a,$b
	push " ms"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method put
	push ""
	cthis print
	end method
	end class

	class ObjController
	method init
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],addgmobj
	end method
	method removefromgame
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],removegmobj
	end method
	end class

	class LObjController
	parent ObjController
	parent classlocker
	method init
	clparent ObjController,init
	clparent classlocker,init
	end method
	end class

	class gmbankvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	push "iid"
	push 1
	popax
	sub 0,$a
	cthis var2
	end method
	method startrand
	cthis size
	push 0
	cmpja
	cmp0
	je l1427
	cthis size
	spushs
	spop $h
	call $h,rand
	pop iid
l1427:
	end method
	method play
	push 0
	cthis stop
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpje
	cmp0
	je l1429
	ret
l1429:
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	cthis get
	spushs
	spop $a
	call [$a],play
	end method
	method onfinish
	end method
	method stop
	localint $1
	pop $1
	cthis isplaying
	cmp0
	je l1431
	cthis getplay
	spushs
	push $1
	spop $a
	call [$a],stop
	push $1
	cmp0
	je l1433
	cthis onfinish
l1433:
l1431:
	end method
	method isplaying
	push iid
	push 0
	cmpjae
	cmp0
	je l1435
	cthis getplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l1434
l1435:
	push 0
l1434:
	end method
	method getplay
	push iid
	cthis get
	end method
	end class

	class ClassGameController
	method init
	new gmobjvec,__grobj
	new string,GAME
	cthis getname
	pop GAME
	end method
	method addgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,add
	end method
	method removegmobj
	localstring $1
	pop $1
	push $1
	call __grobj,remove
	end method
	method isgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,contains
	end method
	method deletegmobj
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1437
	push $1
	cthis removegmobj
	push $1
	spushs
	spop $d
	delete [$d]
l1437:
	end method
	method setpriority
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $3
	call __grobj,find
	pop $3
	localint $4
	push $4
	call __grobj,find
	pop $4
	push $3
	push 0
	cmpjae
	cmp0
	je l1439
	push $4
	push 0
	cmpjae
	cmp0
	je l1439
	push $3
	push $4
	cmpja
	jmp l1441
l1439:
	push 0
	jmp l1441
l1440:
	push 1
l1441:
	cmp0
	je l1442
	push $3
	push $4
	call __grobj,swap
l1442:
	end method
	method mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	end class

	class GameController
	parent ClassGameController
	parent classlocker
	method init
	localstring $1
	pop $1
	clparent ClassGameController,init
	clparent classlocker,init
	new db,_dbsnd
	push "|"
	call _dbsnd,setseparator
	new string,_sndbase
	push $1
	pop _sndbase
	new timer,__dblclick
	push 250
	call __dblclick,delay
	push 1
	call __dblclick,settick
	new int,_itimersnddelay
	push 50
	pop _itimersnddelay
	new int,_b_ismoddbg
	push "moddbg"
	call engine,varexist
	pop _b_ismoddbg
	new int,_b_skip_mouselclick
	push 0
	pop _b_skip_mouselclick
	end method
	method game_exit
	end method
	method setsndbase
	localstring $1
	pop $1
	push $1
	pop _sndbase
	end method
	method say
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis sayf
	end method
	method sayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push $2
	cthis getsndtxt
	pop $4
	push $4
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	push $4
	push $3
	cthis cplayf
	end method
	method getsndtxt
	localstring $1
	pop $1
	localstring $2
	push "snd"
	push _sndbase
	pop $b
	popax
	add $a,$b
	call _dbsnd,getrowsno
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push $1
	cthis addsnd
	push $2
	end method
	method _sndtimerstart
	localint $1
	push 1
	cthis getname
	call _dbsnd,dbfindbycol
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1444
	push $1
	push 2
	call _dbsnd,get
	call engine,print
	jmp l1443
l1444:
	cthis getname
	push " not in _dbsnd"
	pop $b
	popax
	add $a,$b
	call engine,print
l1443:
	push ""
	call engine,print
	end method
	method addsndf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis addsnd
	push $3
	push "null"
	cmpjne
	cmp0
	je l1446
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1448
	push 1
	call $1,strsubb
	pop $1
l1448:
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l1446:
	end method
	method asf
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push "end"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addsndff
	end method
	method addsndff
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis addsndf
	end method
	method gmconsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l1450
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	call subtitle,register
l1450:
	end method
	method addsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	call _dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1452
	push 1
	call $1,strsubb
	pop $1
	push _sndbase
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1451
l1452:
	push _sndbase
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
l1451:
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	push ".ogg"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l1454
	push ".ogg"
	popax
	add $4,$a
	pop $4
	jmp l1453
l1454:
	push ".wav"
	popax
	add $4,$a
	pop $4
l1453:
	localstring $5
	call gameapi,getgamename
	pop $5
	push igmsoundson
	cmp0
	je l1456
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	jmp l1458
l1456:
	push 0
	jmp l1458
l1457:
	push 1
l1458:
	cmp0
	je l1459
	push $5
	spushs
	push $1
	push $4
	spop $a
	call [$a],gmconsnd
	jmp l1455
l1459:
	push $5
	spushs
	push $1
	call $2,length
	push _itimersnddelay
	pop $b
	popax
	mul $a,$b
	push 1
	spop $a
	call [$a],newtimer
	push $1
	spushs
	push "onstart"
	push "_sndtimerstart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstartstopflag"
	push "GameController0"
	spop $a
	call [$a],addmethod
l1455:
	push $3
	push $4
	call _dbsnd,add
	push $3
	push $1
	call _dbsnd,add
	push $3
	push $2
	call _dbsnd,add
	end method
	method GameController0
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method addbank
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	localstring $3
	pop $3
	localstring $4
l1460:
	push $3
	push A
	cmpjne
	cmp0
	je l1461
	push $3
	cthis getsndtxt
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],addbegin
	push $2
	push "null"
	cmpjne
	cmp0
	je l1463
	push $4
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
l1463:
	pop $3
	jmp l1460
l1461:
	end method
	method exportbank
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1465
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $e
	new db,[$e]
	call [$e],GameController1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
l1465:
	end method
	method GameController1
	localdef $1
	pop $1
	push 1
	cthis dbbuild
	push "|"
	cthis setseparator
	push "GameController2"
	cthis dbeach_row
	push igmdebug
	cmp0
	je l1467
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis save
l1467:
	end method
	method GameController2
	localdef $1
	pop $1
	localdef $2
	cthis getname
	spushs
	push "__db"
	spop $h
	call $h,strsubbs
	pop $2
	push $1
	push "snd"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis addbegin
	push $1
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis addbegin
	end method
	method importbank
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	push $2
	push $3
	push "null"
	push $1
	cthis importgroupto
	end method
	method exportsnd
	localstring $1
	pop $1
	push igmdebug
	cmp0
	je l1469
	push $1
	call _dbsnd,save
l1469:
	end method
	method stdexportsnd
	push "exports/"
	push _sndbase
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis exportsnd
	end method
	method sounds=
	cthis buildsnds
	end method
	method sounds_from
	localstring $1
	pop $1
	new db,__tmpdb
	localdef $2
	push _sndbase
	pop $2
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localdef $3
	pop $3
	localint $4
	localstring $5
l1470:
	push A
	push $3
	cmpjne
	cmp0
	je l1471
	localdef $6
	pop $6
	push 1
	push $6
	call __tmpdb,dbfindbycol
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1473
	cthis getsndpath
	push $4
	push 0
	call __tmpdb,get
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	cmp0
	je l1475
	push GAME
	spushs
	push $6
	push $4
	push 0
	call __tmpdb,get
	spop $a
	call [$a],gmconsnd
	push $6
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	jmp l1474
l1475:
	push $6
	push $4
	push 1
	call __tmpdb,get
	push $3
	cthis addsndf
l1474:
l1473:
	localdef $3
	pop $3
	jmp l1470
l1471:
	call _dbsnd,free
	delete __tmpdb
	push $2
	cthis setsndbase
	end method
	method buildsnds
	call _dbsnd,free
	new db,__dbsnd
	push 3
	call __dbsnd,dbbuild
	push "__dbsnd"
	cthis buildfromdb
	delete __dbsnd
	end method
	method buildfromdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1476:
	push $2
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1477
	jmp l1479
l1478:
	add $2,1
	pop $2
	jmp l1476
l1479:
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 2
	spop $a
	call [$a],get
	cthis addsndf
	jmp l1478
l1477:
	cthis stdexportsnd
	end method
	method importsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis importgroup
	end method
	method importgroup
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis importgroupto
	end method
	method importgroupto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	new db,__tmpdb
	localdef $5
	push _sndbase
	pop $5
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localstring $6
	localint $7
	push 0
	pop $7
l1480:
	push $7
	call __tmpdb,getrowsno
	cmpjl
	cmp0
	je l1481
	jmp l1483
l1482:
	add $7,1
	pop $7
	jmp l1480
l1483:
	push $7
	push 1
	call __tmpdb,get
	pop $6
	push $3
	push "null"
	cmpje
	cmp0
	jne l1486
	push $3
	spushs
	push $6
	spop $a
	call [$a],contains
	jmp l1487
l1485:
	push 0
	jmp l1487
l1486:
	push 1
l1487:
	cmp0
	je l1488
	push $6
	push $7
	push 2
	call __tmpdb,get
	push $2
	cthis addsndf
	push $4
	push "null"
	cmpjne
	cmp0
	je l1490
	push $4
	spushs
	push $6
	spop $a
	call [$a],add
l1490:
l1488:
	jmp l1482
l1481:
	call _dbsnd,free
	call __tmpdb,free
	delete __tmpdb
	push $5
	cthis setsndbase
	end method
	method freesnd
	call _dbsnd,free
	end method
	method lockall
	push "lock"
	call __grobj,eval
	cthis lock
	end method
	method unlockall
	push "unlock"
	call __grobj,eval
	cthis unlock
	end method
	method gmunlockall
	push GAME
	spushs
	spop $a
	call [$a],unlockall
	end method
	method gmlockall
	push GAME
	spushs
	spop $a
	call [$a],lockall
	end method
	method lock=
	localint $1
	pop $1
	push $1
	cmp0
	je l1492
	cthis gmlockall
	jmp l1491
l1492:
	cthis gmunlockall
l1491:
	end method
	method gmcontrol_mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	push _b_ismoddbg
	cmp0
	je l1494
	call moddbg,msmove
l1494:
	end method
	method skipmouselclick
	push 1
	pop _b_skip_mouselclick
	end method
	method gmcontrol_mouselclick
	push "onmouselclick"
	call __grobj,eval
	push _b_skip_mouselclick
	cmp0
	je l1496
	push 0
	pop _b_skip_mouselclick
	cthis mouse_unskipped_lclick
	jmp l1495
l1496:
	cthis mouse_lclick
l1495:
	call __dblclick,isplaying
	cmp0
	je l1498
	cthis mouse_dblclick
	jmp l1497
l1498:
	call __dblclick,play
l1497:
	push _b_ismoddbg
	cmp0
	je l1500
	call moddbg,mslclick
l1500:
	end method
	method is_dblclick
	call __dblclick,isplaying
	end method
	method reset_dblclick
	call __dblclick,play
	end method
	method gmcontrol_mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method gmcontrol_mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	push _b_ismoddbg
	cmp0
	je l1502
	call moddbg,mslrel
l1502:
	end method
	method gmcontrol_mouserrel
	push "onmouserrel"
	call __grobj,eval
	cthis mouse_rrel
	end method
	method gmcontrol_keydown
	push "onkeydown"
	call __grobj,eval
	cthis key_down
	push _b_ismoddbg
	cmp0
	je l1504
	call moddbg,dbkeydown
l1504:
	end method
	method mousemove
	cthis gmcontrol_mousemove
	end method
	method mouselclick
	cthis gmcontrol_mouselclick
	end method
	method mouselrel
	cthis gmcontrol_mouselrel
	end method
	method mouserclick
	cthis gmcontrol_mouserclick
	end method
	method mouserrel
	cthis gmcontrol_mouserrel
	end method
	method keydown
	cthis gmcontrol_keydown
	end method
	end class

	new int,PrzygodaNumer
	push 1
	pop PrzygodaNumer
	new int,PrzygodaMode
	push "PrzygodaMode:"
	push 0
	cthis readcfg
	pop PrzygodaMode
	new int,AdventureGame
	push "save.txt"
	new classfullsave,clsave
	new string,sgmlastscene
	push "null"
	pop sgmlastscene
	new string,sgmglobpath
	push "null"
	pop sgmglobpath
	new string,sgmgame
	push "null"
	pop sgmgame
	push 0
	push 0
	push igmappw
	push igmapph
	new CutScene,ccs
	push 2000
	call ccs,setz
	class classadv
	parent classgame
	parent GameController
	method init
	localstring $1
	pop $1
	push igmdelay
	call engine,setloopdelay
	clparent classgame,init
	push SNDPATH
	cthis setwavpath
	push $1
	clparent GameController,init
	new string,_s_game_path
	new int,bmslock
	push 0
	pop bmslock
	new int,_b_ismodadvglob
	push "modadvglob"
	call engine,varexist
	pop _b_ismodadvglob
	new Music,music
	new Button,butgame
	push 0
	pop igmstate
	push "state_init"
	pop sgmstate
	end method
	method butenable
	cthis getname
	call butgame,addbut
	end method
	method butdisable
	cthis getname
	call butgame,removebut
	end method
	method butrefresh
	call butgame,onmousemove
	end method
	method advmslock
	push 1
	pop bmslock
	end method
	method advmsunlock
	push 0
	pop bmslock
	end method
	method advgetlock
	push bmslock
	end method
	method advmssetlock
	localint $1
	pop $1
	push $1
	cmp0
	je l1506
	cthis advmslock
	jmp l1505
l1506:
	cthis advmsunlock
l1505:
	end method
	method switch_path
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],getgraphpath
	pop _s_game_path
	call gameapi,getgamename
	spushs
	push $1
	spop $a
	call [$a],setgraphpath
	end method
	method restore_path
	call gameapi,getgamename
	spushs
	push _s_game_path
	spop $a
	call [$a],setgraphpath
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new path,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbutton,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	method advsaveonstart
	push "GAME_game"
	call gameapi,getgamename
	call clsave,set
	push "GAME_sgmgame"
	push sgmgame
	call clsave,set
	push "GAME_sgmglobpath"
	push sgmglobpath
	call clsave,set
	push "GAME_sgmlastscene"
	push sgmlastscene
	call clsave,set
	push "GAME_ccs"
	call ccs,isvisible
	call clsave,set
	cthis advautosave
	end method
	method advautosave
	push "autosave.txt"
	call clsave,save
	push _b_ismodadvglob
	cmp0
	je l1508
	push "autosave"
	call modadvglob,savepck
l1508:
	end method
	method advautoload
	push "autosave"
	cthis _advload
	end method
	method advcacheload
	push "cache"
	cthis _advload
	end method
	method advcachesave
	push "cache"
	cthis _advsave
	end method
	method _advload
	localstring $1
	pop $1
	call modadvglob,delheros
	push $1
	call modadvglob,loadpck
	push $1
	push ".txt"
	pop $b
	popax
	add $a,$b
	call clsave,load
	push "GAME_sgmgame"
	call clsave,get
	pop sgmgame
	push "GAME_sgmglobpath"
	call clsave,get
	pop sgmglobpath
	push "GAME_sgmlastscene"
	call clsave,get
	pop sgmlastscene
	push "GAME_ccs"
	call clsave,bis
	cmp0
	je l1510
	call ccs,show
	jmp l1509
l1510:
	call ccs,hide
l1509:
	push "GAME_game"
	call clsave,get
	call gameapi,play
	end method
	method _advsave
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1512
	push $1
	push ".txt"
	pop $b
	popax
	add $a,$b
	new classfullsave,_saver
	push "autosave.txt"
	call _saver,load
	call _saver,stdsave
	delete _saver
	new vector,_vcsave
	push "string"
	call _vcsave,type
	new vector,_vcsv2
	push "string"
	call _vcsv2,type
	push "grpck_autosave.txt"
	cthis saveexist
	cmp0
	je l1514
	push "grpck_autosave.txt"
	call _vcsave,vecload
l1514:
	push "grpck_"
	push $1
	pop $b
	popax
	add $a,$b
	push ".txt"
	pop $b
	popax
	add $a,$b
	call _vcsave,vecsave
	localdef $2
	localint $3
	push 0
	pop $3
l1515:
	push $3
	call _vcsave,size
	cmpjl
	cmp0
	je l1516
	jmp l1518
l1517:
	add $3,1
	pop $3
	jmp l1515
l1518:
	push $3
	call _vcsave,get
	pop $2
	push $2
	push "autosave_name.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecload
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push "_name.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecsave
	push $2
	push "autosave_file.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecload
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push "_file.txt"
	pop $b
	popax
	add $a,$b
	call _vcsv2,vecsave
	jmp l1517
l1516:
	delete _vcsave
	delete _vcsv2
l1512:
	end method
	method getsavename
	push "save"
	push PrzygodaNumer
	pop $b
	popax
	add $a,$b
	end method
	method advload_game
	cthis getsavename
	cthis _advload
	end method
	method advsave_game
	cthis getsavename
	cthis _advsave
	end method
	method advstdstate
	push sgmstate
	push "state_std"
	cmpje
	end method
	method advsetstdstate
	push "state_std"
	cthis advsetstate
	end method
	method advsetstate
	localstring $1
	pop $1
	push $1
	pop sgmstate
	end method
	method advisstate
	localstring $1
	pop $1
	push sgmstate
	push $1
	cmpje
	end method
	method stdexitdefadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "GAME_snextgame"
	push $2
	call clsave,set
	push "GAME_snextgamepath"
	push $1
	call clsave,set
	push "GAME_snextgametype"
	push "-def"
	call clsave,set
	cthis stdexitgame
	end method
	method stdexitadvadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "GAME_snextgame"
	push $2
	call clsave,set
	push "GAME_snextgamepath"
	push $1
	call clsave,set
	push "GAME_snextgametype"
	push "-adv"
	call clsave,set
	cthis stdexitgame
	end method
	method stdexit
	localstring $1
	pop $1
	push $1
	push "exit"
	cmpje
	cmp0
	je l1520
	push 0
	call ccs,benableloading=
l1520:
	push "GAME_snextgame"
	push $1
	call clsave,set
	push "GAME_snextgamepath"
	push "null"
	call clsave,set
	push "GAME_snextgametype"
	push "-mg"
	call clsave,set
	cthis stdexitgame
	end method
	method stdexitgame
	push sgmstate
	push "state_end"
	cmpjne
	cmp0
	je l1522
	push "GAME_fadeout_music"
	call clsave,bis
	cmp0
	je l1524
	push "GAME_fadeout_music"
	push 0
	call clsave,set
	push 1000
	call music,fadeout
l1524:
	push "state_end"
	pop sgmstate
	push "classadv0"
	call ccs,close
l1522:
	end method
	method classadv0
	localstring $1
	push "GAME_snextgame"
	call clsave,get
	pop $1
	push "GAME_snextgametype"
	call clsave,get
	spushs
	push "-def"
	cmpst
	jne l1526
	spop $a
	push "GAME_snextgamepath"
	call clsave,get
	push $1
	cthis gotoadv
	jmp l1525
l1526:
	push "-adv"
	cmpst
	jne l1527
	spop $a
	push "GAME_snextgamepath"
	call clsave,get
	push $1
	cthis gotoadv2
	jmp l1525
l1527:
	spop $a
	push $1
	call gameapi,play
l1525:
	end method
	method fadescreen
	localstring $1
	pop $1
	call ccs,buildfromscreen
	push "state_fadescreen"
	pop sgmstate
	push $1
	call ccs,enter
	end method
	method gotoadv
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push $2
	pop sgmgame
	push "gameadvdef"
	call gameapi,play
	end method
	method gotoadv2
	localstring $1
	localstring $2
	pop $2
	pop $1
	call gameapi,getgamename
	pop sgmlastscene
	push $1
	pop sgmglobpath
	push "null"
	pop sgmgame
	push $2
	call gameapi,play
	end method
	method onmusicfin
	call music,play
	end method
	method exit
	cthis game_exit
	push igmsubtitle
	cmp0
	je l1529
	call subtitle,reset
l1529:
	push _b_ismodadvglob
	cmp0
	je l1531
	call modadvglob,onexit
l1531:
	end method
	method appdeactivate
	call gameapi,pause
	end method
	method appactivate
	call gameapi,resume
	end method
	end class

	method winsave
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1533
	new db,_db_win
	push "output.db"
	call _db_win,load
	localdef $2
	call _db_win,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	call _db_win,add
	push "output.db"
	call _db_win,save
	delete _db_win
l1533:
	end method
	method saveexist
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	end method
	method vecsave
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1535
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis save
l1535:
	end method
	method vecload
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis load
	end method
	class classfullsave
	method init
	localstring $1
	pop $1
	new db,dbsav
	push "|"
	call dbsav,setseparator
	new string,sstdfile
	push $1
	cthis setfile
	new int,saveonset
	push 0
	pop saveonset
	end method
	method save
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l1537
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call dbsav,save
l1537:
	end method
	method _load
	localstring $1
	pop $1
	push $1
	call engine,fileexist
	cmp0
	je l1539
	call dbsav,free
	push $1
	call dbsav,load
l1539:
	end method
	method load
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis _load
	end method
	method print
	call dbsav,print
	end method
	method printvar
	localstring $1
	pop $1
	cthis getname
	push ".var: "
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push " = "
	pop $b
	popax
	add $a,$b
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method setfile
	localstring $1
	pop $1
	push $1
	pop sstdfile
	end method
	method stdload
	push sstdfile
	cthis load
	end method
	method stdsave
	push sstdfile
	cthis save
	end method
	method free
	call dbsav,free
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1541
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l1540
l1541:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l1540:
	push saveonset
	cmp0
	je l1543
	cthis stdsave
l1543:
	end method
	method bset
	localstring $1
	pop $1
	push $1
	push 1
	cthis set
	end method
	method bunset
	localstring $1
	pop $1
	push $1
	push 0
	cthis set
	end method
	method get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1545
	push $2
	push 1
	call dbsav,get
	jmp l1544
l1545:
	push "null"
l1544:
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1547
	push $3
	push 1
	call dbsav,get
	push $2
	cmpje
	jmp l1546
l1547:
	push 0
l1546:
	end method
	method bis
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1549
	push $2
	push 1
	call dbsav,get
	push 0
	cmpjne
	jmp l1548
l1549:
	push 0
l1548:
	end method
	method sbis
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "!"
	cmpje
	cmp0
	je l1551
	push 1
	call $1,strsubb
	cthis bis
	neg
	jmp l1550
l1551:
	push $1
	cthis bis
l1550:
	end method
	method bislist
	localstring $1
	pop $1
	new vector,vtmp
	push "string"
	call vtmp,type
	push $1
	push " "
	call vtmp,vecbuildfromstring
	localint $2
	push 0
	pop $2
	call vtmp,size
	cmp0
	je l1553
	call vtmp,first
	cthis sbis
	pop $2
	localint $3
	push 1
	pop $3
l1554:
	push $3
	call vtmp,size
	cmpjl
	cmp0
	je l1555
	push $3
	call vtmp,get
	spushs
	push "&"
	cmpst
	jne l1557
	spop $a
	push $2
	cmp0
	je l1558
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	call vtmp,get
	cthis sbis
	jmp l1560
l1558:
	push 0
	jmp l1560
l1559:
	push 1
l1560:
	pop $2
	push 2
	popax
	add $3,$a
	pop $3
	jmp l1556
l1557:
	push "|"
	cmpst
	jne l1561
	spop $a
	push $2
	cmp0
	jne l1563
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	call vtmp,get
	cthis sbis
	jmp l1564
l1562:
	push 0
	jmp l1564
l1563:
	push 1
l1564:
	pop $2
	push 2
	popax
	add $3,$a
	pop $3
	jmp l1556
l1561:
	spop $a
	add $3,1
	pop $3
l1556:
	jmp l1554
l1555:
l1553:
	delete vtmp
	push $2
	end method
	method bisand2
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	push $2
	push ""
	cthis bisand
	end method
	method bisand
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 1
	pop $5
l1565:
	push $2
	push $3
	cmpjle
	cmp0
	je l1566
	push $5
	cmp0
	je l1567
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	cthis bis
	jmp l1569
l1567:
	push 0
	jmp l1569
l1568:
	push 1
l1569:
	pop $5
	add $2,1
	pop $2
	jmp l1565
l1566:
	push $5
	end method
	method has
	localstring $1
	pop $1
	push $1
	call dbsav,findbyrow
	push 0
	cmpjae
	end method
	method bgo
	localstring $1
	pop $1
	push $1
	cthis bis
	neg
	cmp0
	je l1571
	push $1
	cthis bset
	push 1
	jmp l1570
l1571:
	push 0
l1570:
	end method
	method saveonset=
	localint $1
	pop $1
	push $1
	pop saveonset
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1573
	push $2
	call dbsav,removerow
	push saveonset
	cmp0
	je l1575
	cthis stdsave
l1575:
l1573:
	end method
	method replace
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis has
	cmp0
	je l1577
	push $1
	push $2
	cthis get
	cthis set
	jmp l1576
l1577:
	push $1
	cthis remove
l1576:
	end method
	method add
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis has
	neg
	cmp0
	je l1579
	push $1
	push $2
	cthis set
	jmp l1578
l1579:
	push $1
	push $2
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	cthis set
l1578:
	end method
	method inc
	localstring $1
	pop $1
	push $1
	push 1
	cthis add
	end method
	method dec
	localstring $1
	pop $1
	push $1
	push 1
	popax
	sub 0,$a
	cthis add
	end method
	method getdef
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1581
	push $3
	push 1
	call dbsav,get
	jmp l1580
l1581:
	push $2
l1580:
	end method
	end class

	class StringChecker
	method init
	end method
	method isdigit
	localstring $1
	pop $1
	call $1,to_i
	push 0
	cmpjne
	cmp0
	jne l1583
	push 0
	push 1
	call $1,getb
	push "0"
	cmpje
	jmp l1584
l1582:
	push 0
	jmp l1584
l1583:
	push 1
l1584:
	end method
	method getint
	localstring $1
	pop $1
	call $1,to_i
	end method
	method getreal
	localstring $1
	pop $1
	call $1,to_r
	end method
	method isreal
	localstring $1
	pop $1
	push $1
	cthis isdigit
	cmp0
	je l1585
	push "."
	call $1,contains
	jmp l1587
l1585:
	push 0
	jmp l1587
l1586:
	push 1
l1587:
	end method
	method isstring
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "\""
	cmpje
	end method
	method getstring
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	end method
	end class

	class Script
	method init
	localstring $1
	pop $1
	new db,__dbcode
	new string,__sdb
	new int,__irow
	new int,__icol
	new string,__sreads
	new vector,__vec
	push "string"
	call __vec,type
	new string,__sarg
	new int,__iarg
	new real,__rarg
	new StringChecker,__csc
	push "int"
	new map2,__mp
	localint $2
	push 0
	pop $2
l1588:
	push $2
	push 10
	cmpjl
	cmp0
	je l1589
	jmp l1591
l1590:
	add $2,1
	pop $2
	jmp l1588
l1591:
	push "ARG"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	jmp l1590
l1589:
	push $1
	cthis load
	end method
	method ARG=
	localint $1
	localstring $2
	pop $2
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method ARG
	localint $1
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	end method
	method load
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1593
	ret
l1593:
	push "."
	call $1,contains
	cmp0
	je l1595
	push "__dbcode"
	pop __sdb
	push $1
	call __dbcode,loadbeh
	jmp l1594
l1595:
	push $1
	pop __sdb
l1594:
	call __mp,free
	localint $2
	push 0
	pop $2
l1596:
	push $2
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1597
	jmp l1599
l1598:
	add $2,1
	pop $2
	jmp l1596
l1599:
	push __sdb
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push "func"
	cmpje
	cmp0
	je l1601
	push __sdb
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $2
	call __mp,add
l1601:
	jmp l1598
l1597:
	push "init"
	cthis call
	end method
	method get
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method isvar
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	end method
	method getvar
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	neg
	cmp0
	je l1603
	push $1
	spushs
	spop $e
	new def,[$e]
l1603:
	push $1
	end method
	method isfunc
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l1604
	push $1
	call __csc,isreal
	neg
	jmp l1606
l1604:
	push 0
	jmp l1606
l1605:
	push 1
l1606:
	cmp0
	jne l1608
	push "::"
	call $1,contains
	jmp l1609
l1607:
	push 0
	jmp l1609
l1608:
	push 1
l1609:
	end method
	method getfunc
	localstring $1
	pop $1
	call __vec,free
	push "."
	call $1,contains
	cmp0
	je l1611
	push "."
	call $1,strgetto
	call __vec,add
	push "."
	call $1,strgetfrom
	call __vec,add
	jmp l1610
l1611:
	push "::"
	call $1,strgetto
	call __vec,add
	push "::"
	call $1,strgetfrom
	call __vec,add
l1610:
	end method
	method _get
	add __icol,1
	pop __icol
	push __sdb
	spushs
	push __irow
	push __icol
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	end method
	method isnext
	push __icol
	push __sdb
	spushs
	push __irow
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1613
	push __sdb
	spushs
	push __irow
	push __icol
	spop $a
	call [$a],get
	pop __sreads
	push 1
	jmp l1612
l1613:
	push 0
l1612:
	end method
	method perror
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cmp0
	je l1615
	push "error: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
l1615:
	end method
	method interpcall
	localstring $1
	pop $1
	push $1
	cthis getfunc
	localstring $2
	push 0
	call __vec,get
	pop $2
	push 0
	push 1
	call $2,getb
	push "*"
	cmpje
	cmp0
	je l1617
	push 1
	call $2,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1617:
	localstring $3
	push 1
	call __vec,get
	pop $3
	push 0
	push 1
	call $3,getb
	push "*"
	cmpje
	cmp0
	je l1619
	push 1
	call $3,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1619:
	call __vec,free
	add __icol,1
	pop __icol
	localstring $4
	cthis _get
	pop $4
l1620:
	push $4
	push ")"
	cmpjne
	cmp0
	je l1621
	push $4
	cthis getexpr
	cthis _get
	pop $4
	jmp l1620
l1621:
	push "::"
	call $1,contains
	cmp0
	je l1623
	push $2
	spushs
	push $3
	spushs
	spop $d
	spop $a
	 clparent [$a],[$d]
	jmp l1622
l1623:
	push $2
	push "this"
	cmpje
	cmp0
	je l1625
	push "null"
	pop $2
l1625:
	push $2
	push $3
	cthis callfun
l1622:
	end method
	method getvname
	localstring $1
	pop $1
	push $1
	cthis isvar
	cmp0
	je l1627
	push $1
	cthis getvar
	pop $1
	jmp l1626
l1627:
	push $1
	call __csc,isreal
	cmp0
	je l1629
	call $1,to_r
	pop __rarg
	push "__rarg"
	pop $1
	jmp l1628
l1629:
	push $1
	call __csc,isdigit
	cmp0
	je l1631
	push $1
	pop __iarg
	push "__iarg"
	pop $1
	jmp l1630
l1631:
	push $1
	call __csc,isstring
	cmp0
	je l1633
	push $1
	call __csc,getstring
	pop __sarg
	push "__sarg"
	pop $1
l1633:
l1630:
l1628:
l1626:
	push $1
	end method
	method isscriptfun
	localstring $1
	pop $1
	push "->"
	call $1,contains
	end method
	method getscriptfun
	localstring $1
	pop $1
	push 2
	call $1,strsubb
	end method
	method getexpr
	localstring $1
	pop $1
	push $1
	call __csc,isstring
	cmp0
	je l1635
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
	jmp l1634
l1635:
	push $1
	cthis isfunc
	cmp0
	je l1637
	push $1
	cthis interpcall
	jmp l1636
l1637:
	push $1
	cthis isscriptfun
	cmp0
	je l1639
	localint $2
	push __irow
	pop $2
	localint $3
	push __icol
	pop $3
	push $1
	cthis getscriptfun
	cthis call
	push $2
	pop __irow
	push $3
	pop __icol
	jmp l1638
l1639:
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
l1638:
l1636:
l1634:
	end method
	method cmp
	localint $1
	push 0
	pop $1
	localdef $2
	cthis _get
	cthis getexpr
	pop $2
	localstring $3
	cthis _get
	pop $3
	localdef $4
	cthis _get
	cthis getexpr
	pop $4
	push $3
	spushs
	push "=="
	cmpst
	jne l1641
	spop $a
	push $2
	push $4
	cmpje
	pop $1
	jmp l1640
l1641:
	push "!="
	cmpst
	jne l1642
	spop $a
	push $2
	push $4
	cmpjne
	pop $1
	jmp l1640
l1642:
	push "<"
	cmpst
	jne l1643
	spop $a
	push $2
	push $4
	cmpjl
	pop $1
	jmp l1640
l1643:
	push ">"
	cmpst
	jne l1644
	spop $a
	push $2
	push $4
	cmpja
	pop $1
	jmp l1640
l1644:
	push "<="
	cmpst
	jne l1645
	spop $a
	push $2
	push $4
	cmpjle
	pop $1
	jmp l1640
l1645:
	push ">="
	cmpst
	jne l1646
	spop $a
	push $2
	push $4
	cmpjae
	pop $1
	jmp l1640
l1646:
	spop $a
l1640:
	cthis _get
	pop $3
	push $3
	push "||"
	cmpje
	cmp0
	je l1648
	push $1
	cmp0
	jne l1650
	cthis cmp
	jmp l1651
l1649:
	push 0
	jmp l1651
l1650:
	push 1
l1651:
	jmp l1647
l1648:
	push $3
	push "&&"
	cmpje
	cmp0
	je l1653
	push $1
	cmp0
	je l1654
	cthis cmp
	jmp l1656
l1654:
	push 0
	jmp l1656
l1655:
	push 1
l1656:
	jmp l1652
l1653:
	push $1
l1652:
l1647:
	end method
	method containsfun
	localstring $1
	pop $1
	push $1
	call __mp,contains
	end method
	method addscript
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push A
	push "_script_eval"
	cthis getname
	push "_smetscript_"
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],vars2
	push $1
	spushs
	push $2
	push "Script0"
	spop $a
	call [$a],addmethod
	end method
	method Script0
	push _script_eval
	spushs
	push "_smetscript_"
	cthis methodname
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spop $a
	call [$a],call
	end method
	method call
	localstring $1
	pop $1
	push $1
	call __mp,contains
	neg
	cmp0
	je l1658
	ret
l1658:
	push $1
	call __mp,get
	pop __irow
	add __irow,1
	pop __irow
	push 0
	pop __icol
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	localint $12
	localint $13
l1659:
	push $2
	cmp0
	je l1660
	push 0
	pop __icol
	cthis _get
	pop $8
	push $8
	spushs
	push "new"
	cmpst
	jne l1662
	spop $a
	cthis _get
	pop $8
	cthis _get
	pop $9
	push 1
	call $9,strsubb
	pop $9
	cthis isnext
	cmp0
	je l1664
	push __sreads
	push "["
	cmpje
	cmp0
	je l1666
	add __icol,1
	pop __icol
	cthis _get
	pop $11
	push 0
	pop $12
l1667:
	push $12
	push $11
	cmpjl
	cmp0
	je l1668
	jmp l1670
l1669:
	add $12,1
	pop $12
	jmp l1667
l1670:
	push $8
	spushs
	push $9
	push $12
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	jmp l1669
l1668:
	jmp l1665
l1666:
	add __icol,1
	pop __icol
l1671:
	cthis isnext
	cmp0
	je l1672
	push __sreads
	push ")"
	cmpjne
	jmp l1674
l1672:
	push 0
	jmp l1674
l1673:
	push 1
l1674:
	cmp0
	je l1675
	cthis _get
	cthis getexpr
	jmp l1671
l1675:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1665:
	jmp l1663
l1664:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1663:
	add __irow,1
	pop __irow
	jmp l1661
l1662:
	push "delete"
	cmpst
	jne l1676
	spop $a
	cthis _get
	cthis getvar
	spushs
	spop $d
	delete [$d]
	add __irow,1
	pop __irow
	jmp l1661
l1676:
	push $8
	push "if"
	cmpje
	cmp0
	jne l1678
	push $6
	cmp0
	jne l1678
	push $5
	jmp l1679
l1677:
	push 0
	jmp l1679
l1678:
	push 1
l1679:
	cmp0
	je l1681
	push $8
	jmp l1680
l1681:
	push ""
l1680:
	cmpst
	jne l1682
	spop $a
	add __icol,1
	pop __icol
	cthis cmp
	pop $4
	push $8
	push "if"
	cmpje
	cmp0
	je l1684
	push 1
	pop $3
l1684:
	push 0
	pop $6
	push 0
	pop $5
	add __irow,1
	pop __irow
	push $4
	neg
	cmp0
	je l1686
	push 1
	pop $12
l1687:
	push $12
	cmp0
	je l1688
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	pop $8
	push $8
	push "else"
	cmpje
	cmp0
	jne l1691
	push $8
	push "elif"
	cmpje
	cmp0
	jne l1691
	push $8
	push "fi"
	cmpje
	cmp0
	jne l1691
	push $8
	push "done"
	cmpje
	jmp l1692
l1690:
	push 0
	jmp l1692
l1691:
	push 1
l1692:
	cmp0
	je l1693
	push 0
	pop $12
	jmp l1689
l1693:
	add __irow,1
	pop __irow
l1689:
	jmp l1687
l1688:
l1686:
	jmp l1661
l1682:
	push "else"
	cmpst
	jne l1694
	spop $a
	push $3
	neg
	push "else without if"
	cthis perror
	add __irow,1
	pop __irow
	push $4
	cmp0
	je l1696
l1697:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1698
	add __irow,1
	pop __irow
	jmp l1697
l1698:
l1696:
	jmp l1661
l1694:
	push "fi"
	cmpst
	jne l1699
	spop $a
	push $3
	neg
	push "fi without if"
	cthis perror
	push 0
	pop $3
	push 0
	pop $4
	push 0
	pop $6
	add __irow,1
	pop __irow
	jmp l1661
l1699:
	push "elif"
	cmpst
	jne l1700
	spop $a
	push $4
	cmp0
	je l1702
	add __irow,1
	pop __irow
l1703:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1704
	add __irow,1
	pop __irow
	jmp l1703
l1704:
	jmp l1701
l1702:
	push 1
	pop $6
l1701:
	jmp l1661
l1700:
	push "end"
	cmpst
	jne l1705
	spop $a
	push 0
	pop $2
	jmp l1661
l1705:
	push "while"
	cmpst
	jne l1706
	spop $a
	push __irow
	pop $7
	push 1
	pop $5
	jmp l1661
l1706:
	push "done"
	cmpst
	jne l1707
	spop $a
	push $4
	cmp0
	je l1709
	push $7
	pop __irow
	jmp l1708
l1709:
	add __irow,1
	pop __irow
l1708:
	jmp l1661
l1707:
	push "print"
	cmpst
	jne l1710
	spop $a
	push ""
	pop $8
l1711:
	cthis isnext
	cmp0
	je l1712
	cthis _get
	cthis getexpr
	popax
	add $8,$a
	pop $8
	jmp l1711
l1712:
	push $8
	call engine,print
	add __irow,1
	pop __irow
	jmp l1661
l1710:
	push "return"
	cmpst
	jne l1713
	spop $a
	cthis isnext
	cmp0
	je l1715
	push __sreads
	cthis getexpr
l1715:
	ret
	jmp l1661
l1713:
	spop $a
	push 0
	push 1
	call $8,getb
	push "$"
	cmpje
	cmp0
	je l1717
	push $8
	cthis getvar
	pop $8
	add __icol,1
	pop __icol
	push $8
	spushs
	cthis _get
	cthis getexpr
	spop $b
	popax
	mov [$b],$a
l1718:
	cthis isnext
	cmp0
	je l1719
	add __icol,1
	pop __icol
	localdef $14
	cthis _get
	cthis getexpr
	pop $14
	push __sreads
	spushs
	push "+"
	cmpst
	jne l1721
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	add [$b],$a
	pop [$b]
	jmp l1720
l1721:
	push "-"
	cmpst
	jne l1722
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	sub [$b],$a
	pop [$b]
	jmp l1720
l1722:
	push "*"
	cmpst
	jne l1723
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	mul [$b],$a
	pop [$b]
	jmp l1720
l1723:
	push "/"
	cmpst
	jne l1724
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$a
	jmp l1720
l1724:
	push "%"
	cmpst
	jne l1725
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$d
	jmp l1720
l1725:
	spop $a
l1720:
	jmp l1718
l1719:
	jmp l1716
l1717:
	push $8
	cthis getexpr
l1716:
	add __irow,1
	pop __irow
l1661:
	push __irow
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1727
	push 1
	push "function "
	push $1
	pop $b
	popax
	add $a,$b
	push " not finished!"
	pop $b
	popax
	add $a,$b
	cthis perror
	push 0
	pop $2
l1727:
	jmp l1659
l1660:
	end method
	end class

	class classbgplan
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,rpx
	new real,rpy
	new real,scalex
	new real,scaley
	new int,_ix
	new int,_iy
	end method
	method setscale
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	push $2
	pop scaley
	pop scalex
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add rpx,$a
	pop rpx
	push $2
	popax
	add rpy,$a
	pop rpy
	localint $3
	push rpx
	pop $3
	localint $4
	push rpy
	pop $4
	push $3
	popax
	sub rpx,$a
	pop rpx
	push $4
	popax
	sub rpy,$a
	pop rpy
	push $3
	cmp0
	jne l1730
	push $4
	jmp l1731
l1729:
	push 0
	jmp l1731
l1730:
	push 1
l1731:
	cmp0
	je l1732
	push $3
	popax
	add _ix,$a
	pop _ix
	push $4
	popax
	add _iy,$a
	pop _iy
	push $3
	push $4
	clparent gmobjvec,move
l1732:
	end method
	method movebgr
	localreal $1
	localreal $2
	pop $2
	pop $1
	push scalex
	push $1
	pop $b
	popax
	mul $a,$b
	push scaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	method getpx
	push _ix
	end method
	method getpy
	push _iy
	end method
	method shift
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	clparent gmobjvec,move
	end method
	end class

	class classgrplans
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new real,_rxp
	new real,_ryp
	end method
	method move
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add _rxp,$a
	pop _rxp
	push $2
	popax
	add _ryp,$a
	pop _ryp
	push "movebgr"
	push $1
	push $2
	cthis eval2
	end method
	method getposx
	push _rxp
	end method
	method getposy
	push _ryp
	end method
	method shift
	localint $1
	localint $2
	pop $2
	pop $1
	push "shift"
	push $1
	push $2
	cthis eval2
	end method
	end class

	class CameraPos
	method init
	localreal $1
	localreal $2
	pop $2
	pop $1
	new real,_x
	new real,_y
	push $1
	push $2
	cthis setpos
	end method
	method setpos
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	pop _x
	push $2
	pop _y
	end method
	method getposx
	push _x
	end method
	method getposy
	push _y
	end method
	end class

	class classadvcamera
	method init
	new classgrplans,grbgrs
	new string,sancamera
	push "null"
	pop sancamera
	new string,smsmvfun
	push "null"
	pop smsmvfun
	new real,_rxmod
	new real,_rymod
	push 0.05
	push 0.05
	pop _rymod
	pop _rxmod
	new real,rleft
	new real,rtop
	new real,rright
	new real,rbottom
	push 0.0
	push 0.0
	push igmappw
	push 1
	pop $b
	popax
	sub $a,$b
	push igmapph
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbottom
	pop rright
	pop rtop
	pop rleft
	new int,icamx
	new int,icamy
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamy
	pop icamx
	new real,rborx
	new real,rbory
	push igmappw
	push 1
	pop $b
	popax
	sub $a,$b
	push igmapph
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbory
	pop rborx
	new real,_lastx
	push 0
	pop _lastx
	new real,_lasty
	push 0
	pop _lasty
	new string,_sfunxedge
	push "null"
	pop _sfunxedge
	new string,_sfunyedge
	push "null"
	pop _sfunyedge
	push 0
	push 0
	new CameraPos,_campos
	new timer,timcamera
	push 1
	call timcamera,settick
	push 1
	call timcamera,setcycle
	push "onfinish"
	push "_camerafin"
	call timcamera,addmethod
	end method
	method _camerafin
	cthis checkcamera
	cthis play
	end method
	method setscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop rleft
	push $2
	pop rtop
	push $3
	pop rright
	push $4
	pop rbottom
	push $3
	pop rborx
	push $4
	pop rbory
	push $1
	pop _lastx
	push $2
	pop _lasty
	push $1
	push $3
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamx
	push $2
	push $4
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop icamy
	end method
	method pause
	call timcamera,pause
	end method
	method resume
	call timcamera,resume
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1733:
	push $2
	call grbgrs,size
	cmpjl
	cmp0
	je l1734
	jmp l1736
l1735:
	add $2,1
	pop $2
	jmp l1733
l1736:
	push $2
	call grbgrs,get
	spushs
	push $1
	spop $a
	call [$a],remove
	jmp l1735
l1734:
	end method
	method funxedge
	localstring $1
	pop $1
	push $1
	pop _sfunxedge
	end method
	method funyedge
	localstring $1
	pop $1
	push $1
	pop _sfunyedge
	end method
	method setcenter
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop icamy
	pop icamx
	end method
	method setcenterscreen
	push igmappw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setcenter
	end method
	method setborders
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop rbottom
	pop rright
	end method
	method countcenter
	push rleft
	push rright
	push rleft
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push rtop
	push rbottom
	push rtop
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	cthis setcenter
	end method
	method getposx
	call grbgrs,getposx
	end method
	method getposy
	call grbgrs,getposy
	end method
	method setmetonmsmove
	localstring $1
	pop $1
	push $1
	pop smsmvfun
	end method
	method start
	call timcamera,play
	end method
	method stop
	push 0
	call timcamera,stop
	end method
	method setactor
	localstring $1
	pop $1
	push $1
	pop sancamera
	end method
	method setcampos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call _campos,setpos
	push "_campos"
	cthis setactor
	end method
	method isactor
	localstring $1
	pop $1
	push $1
	push sancamera
	cmpje
	end method
	method getactor
	push sancamera
	end method
	method scalemodifiers
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	push $2
	pop _rymod
	pop _rxmod
	end method
	method newbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbgplan,[$e]
	push $1
	push $2
	push $3
	cthis addbgr
	end method
	method addbgr
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setscale
	push $1
	call grbgrs,add
	end method
	method findinbgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1737:
	push $2
	call grbgrs,size
	cmpjl
	cmp0
	je l1738
	jmp l1740
l1739:
	add $2,1
	pop $2
	jmp l1737
l1740:
	push $2
	call grbgrs,get
	spushs
	push $1
	spop $a
	call [$a],contains
	cmp0
	je l1742
	push $2
	call grbgrs,get
	ret
l1742:
	jmp l1739
l1738:
	push "null"
	end method
	method removefrombgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1743:
	push $2
	call grbgrs,size
	cmpjl
	cmp0
	je l1744
	jmp l1746
l1745:
	add $2,1
	pop $2
	jmp l1743
l1746:
	push $2
	call grbgrs,get
	spushs
	push $1
	spop $a
	call [$a],remove
	jmp l1745
l1744:
	end method
	method addtobgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],add
	end method
	method setscene
	push 1.0
	push 1.0
	cthis _setscene
	end method
	method _setscene
	localreal $1
	localreal $2
	pop $2
	pop $1
	push sancamera
	push "null"
	cmpje
	cmp0
	je l1748
	ret
l1748:
	localreal $3
	push icamx
	push sancamera
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	push $1
	popax
	mul $3,$a
	pop $3
	localreal $4
	push icamy
	push sancamera
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $2
	popax
	mul $4,$a
	pop $4
	localreal $5
	cthis getposx
	push $3
	pop $b
	popax
	add $a,$b
	pop $5
	localreal $6
	cthis getposy
	push $4
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push rleft
	cmpjae
	cmp0
	je l1750
	cthis getposx
	popax
	sub 0,$a
	pop $3
	jmp l1749
l1750:
	push $5
	push rright
	pop $b
	popax
	add $a,$b
	push rborx
	cmpjle
	cmp0
	je l1752
	push rborx
	cthis getposx
	push rright
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $3
l1752:
l1749:
	push $6
	push rtop
	cmpja
	cmp0
	je l1754
	push rtop
	cthis getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	jmp l1753
l1754:
	push $6
	push rtop
	pop $b
	popax
	add $a,$b
	push rbottom
	pop $b
	popax
	add $a,$b
	push rbory
	cmpjle
	cmp0
	je l1756
	push rbory
	cthis getposy
	push rtop
	pop $b
	popax
	add $a,$b
	push rbottom
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $4
l1756:
l1753:
	push $3
	cmp0
	jne l1759
	push $4
	jmp l1760
l1758:
	push 0
	jmp l1760
l1759:
	push 1
l1760:
	cmp0
	je l1761
	push $3
	push $4
	call grbgrs,move
	push smsmvfun
	push "null"
	cmpjne
	cmp0
	je l1763
	push smsmvfun
	spushs
	spop $d
	cthis [$d]
l1763:
l1761:
	push $3
	push 0
	cmpje
	cmp0
	je l1765
	push _lastx
	push 0
	cmpjne
	cmp0
	je l1765
	push _sfunxedge
	push "null"
	cmpjne
	jmp l1767
l1765:
	push 0
	jmp l1767
l1766:
	push 1
l1767:
	cmp0
	je l1768
	push _sfunxedge
	spushs
	spop $d
	cthis [$d]
l1768:
	push $4
	push 0
	cmpje
	cmp0
	je l1770
	push _lasty
	push 0
	cmpjne
	cmp0
	je l1770
	push _sfunyedge
	push "null"
	cmpjne
	jmp l1772
l1770:
	push 0
	jmp l1772
l1771:
	push 1
l1772:
	cmp0
	je l1773
	push _sfunyedge
	spushs
	spop $d
	cthis [$d]
l1773:
	push $3
	pop _lastx
	push $4
	pop _lasty
	end method
	method checkcamera
	push sancamera
	push "null"
	cmpjne
	cmp0
	je l1775
	push _rxmod
	push _rymod
	cthis _setscene
l1775:
	end method
	method moveplans
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add rleft,$a
	pop rleft
	push $1
	popax
	add rright,$a
	pop rright
	push $2
	popax
	add rtop,$a
	pop rtop
	push $2
	popax
	add rbottom,$a
	pop rbottom
	push $1
	popax
	add rborx,$a
	pop rborx
	push $2
	popax
	add rbory,$a
	pop rbory
	push $1
	popax
	add icamx,$a
	pop icamx
	push $2
	popax
	add icamy,$a
	pop icamy
	push $1
	push $2
	call grbgrs,shift
	end method
	end class

	method animaloader_load
	localstring $1
	pop $1
	new db,_dbanl
	push $1
	cthis getpath
	call _dbanl,loadbeh
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	localstring $6
	localint $7
	localint $8
	localint $9
	localreal $10
	localreal $11
	localint $12
	push 0
	pop $12
l1776:
	push $12
	call _dbanl,getrowsno
	cmpjl
	cmp0
	je l1777
	jmp l1779
l1778:
	add $12,1
	pop $12
	jmp l1776
l1779:
	push $12
	call _dbanl,getcolsno
	push 0
	cmpja
	cmp0
	je l1781
	push 0
	pop $7
	push $12
	push $7
	call _dbanl,get
	spushs
	push "an:"
	cmpst
	jne l1783
	spop $a
	add $7,1
	pop $7
	push $12
	push $7
	call _dbanl,get
	pop $2
	add $7,1
	pop $7
	push ".pyz"
	call $2,contains
	cmp0
	je l1785
	push "an"
	push ".pyz"
	call $2,strsubes
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push 0
	cthis newanima
	jmp l1784
l1785:
	push $12
	push $7
	call _dbanl,get
	push $2
	cthis copyanima
	add $7,1
	pop $7
l1784:
	localint $13
	push $7
	pop $13
l1786:
	push $13
	push $12
	call _dbanl,getcolsno
	cmpjl
	cmp0
	je l1787
	jmp l1789
l1788:
	add $13,1
	pop $13
	jmp l1786
l1789:
	push $12
	push $13
	call _dbanl,get
	pop $6
	push $6
	spushs
	push "-z"
	cmpst
	jne l1791
	spop $a
	add $13,1
	pop $13
	push $5
	spushs
	push $12
	push $13
	call _dbanl,get
	spop $a
	call [$a],setz
	jmp l1790
l1791:
	push "-hide"
	cmpst
	jne l1792
	spop $a
	push $5
	spushs
	spop $a
	call [$a],hide
	jmp l1790
l1792:
	push "-opacityframe"
	cmpst
	jne l1793
	spop $a
	push $5
	spushs
	spop $a
	call [$a],anopacityframe
	jmp l1790
l1793:
	push "-nplay"
	cmpst
	jne l1794
	spop $a
	add $13,1
	pop $13
	push $5
	spushs
	push $12
	push $13
	call _dbanl,get
	spushs
	spop $h
	call $h,to_i
	spop $a
	call [$a],play
	jmp l1790
l1794:
	push "-play"
	cmpst
	jne l1795
	spop $a
	add $13,1
	pop $13
	push $5
	spushs
	push $12
	push $13
	call _dbanl,get
	spop $a
	call [$a],play
	jmp l1790
l1795:
	push "-delay"
	cmpst
	jne l1796
	spop $a
	add $13,1
	pop $13
	push $5
	spushs
	push $12
	push $13
	call _dbanl,get
	spop $a
	call [$a],setdelay
	jmp l1790
l1796:
	push "-drawmode"
	cmpst
	jne l1797
	spop $a
	push $12
	push $13
	call _dbanl,get
	pop $2
	add $13,1
	pop $13
	push $2
	push "lineardodge"
	cmpje
	cmp0
	je l1799
	push $5
	spushs
	push 1
	spop $a
	call [$a],setdrawmode
l1799:
	jmp l1790
l1797:
	push "-hideonstart"
	cmpst
	jne l1800
	spop $a
	push $5
	spushs
	spop $a
	call [$a],anhideonsetframe
	jmp l1790
l1800:
	push "-buildroto"
	cmpst
	je l1802
	push "-buildrotorle"
	cmpst
	je l1802
	jmp l1801
l1802:
	spop $a
	add $13,1
	pop $13
	localreal $14
	push $12
	push $13
	call _dbanl,get
	pop $14
	add $13,1
	pop $13
	localreal $15
	push $12
	push $13
	call _dbanl,get
	pop $15
	add $13,1
	pop $13
	localreal $16
	push $12
	push $13
	call _dbanl,get
	pop $16
	add $13,1
	pop $13
	localint $17
	push $12
	push $13
	call _dbanl,get
	pop $17
	push $5
	push $14
	push $15
	push $16
	push $17
	push $6
	push "-buildrotorle"
	cmpje
	cmp0
	je l1804
	push 1
	jmp l1803
l1804:
	push 0
l1803:
	cthis gmbuildroto
	jmp l1790
l1801:
	spop $a
	push $5
	push "_dbanl"
	push $12
	push $13
	cthis animaloader_an
	pop $13
l1790:
	jmp l1788
l1787:
	jmp l1782
l1783:
	spop $a
l1782:
l1781:
	jmp l1778
l1777:
	end method
	method animaloader_an
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	end method
	method gmbuildroto
	localstring $1
	localreal $2
	localreal $3
	localreal $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $7
	localint $8
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $8
	push $1
	spushs
	push 1
	push 0
	spop $a
	call [$a],setframe
	push $1
	spushs
	push $7
	push $8
	spop $a
	call [$a],ansetbpos
	localstring $9
	localstring $10
	localreal $11
	push 0.0
	pop $11
	call $4,abs
	pop $4
	push 0
	pop $7
	localstring $12
	push "null"
	pop $12
	localreal $13
	push $3
	pop $13
l1805:
	push $13
	push $2
	cmpjle
	cmp0
	je l1806
	jmp l1808
l1807:
	push $11
	popax
	add $13,$a
	pop $13
	jmp l1805
l1808:
	localreal $14
	push $13
	push $3
	pop $b
	popax
	sub $a,$b
	push $2
	push $3
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	div $a,$b
	psax
	spushs
	spop $h
	call $h,abs
	pop $14
	push 0.1
	call $14,_rin1
	cmp0
	je l1810
	push 0.4
	push $4
	pop $b
	popax
	mul $a,$b
	pop $11
	jmp l1809
l1810:
	push 0.2
	call $14,_rin1
	cmp0
	je l1812
	push 0.8
	push $4
	pop $b
	popax
	mul $a,$b
	pop $11
	jmp l1811
l1812:
	push $4
	pop $11
l1811:
l1809:
	push "_imgroto"
	push $7
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	pop $10
	push $10
	spushs
	spop $e
	new img,[$e]
	push $10
	spushs
	push $1
	push $13
	push 1.0
	push 1.0
	spop $a
	call [$a],buildrotozoom
l1813:
	push $12
	push "null"
	cmpjne
	cmp0
	je l1814
	push $10
	spushs
	spop $a
	call [$a],getw
	push $12
	spushs
	spop $a
	call [$a],getw
	cmpje
	cmp0
	je l1814
	push $10
	spushs
	spop $a
	call [$a],geth
	push $12
	spushs
	spop $a
	call [$a],geth
	cmpje
	cmp0
	je l1814
	push $10
	spushs
	spop $a
	call [$a],getpx
	push $12
	spushs
	spop $a
	call [$a],getpx
	cmpje
	cmp0
	je l1814
	push $10
	spushs
	spop $a
	call [$a],getpy
	push $12
	spushs
	spop $a
	call [$a],getpy
	cmpje
	jmp l1816
l1814:
	push 0
	jmp l1816
l1815:
	push 1
l1816:
	cmp0
	je l1817
	push 0.2
	pop $14
	push $14
	push $11
	pop $b
	popax
	mul $a,$b
	popax
	add $13,$a
	pop $13
	push $14
	push 1.0
	pop $b
	popax
	add $a,$b
	popax
	mul $11,$a
	pop $11
	push $10
	spushs
	push $1
	push $13
	push 1.0
	push 1.0
	spop $a
	call [$a],buildrotozoom
	jmp l1813
l1817:
	push $10
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],setz
	push $10
	spushs
	spop $a
	call [$a],hide
	push $6
	cmp0
	je l1819
	push $10
	spushs
	spop $a
	call [$a],rle
l1819:
	push $10
	pop $12
	add $7,1
	pop $7
	jmp l1807
l1806:
	push "_timroto"
	push $1
	pop $b
	popax
	add $a,$b
	pop $9
	push $9
	push "global8"
	cthis cycle=
	push $9
	spushs
	push $5
	spop $a
	call [$a],setcycle
	push $9
	spushs
	push A
	push "san"
	push $1
	push "ileimgs"
	push $7
	push "slastimg"
	push $10
	push "idimg"
	push 0
	push "dir"
	push 1
	spop $a
	call [$a],vars2
	push $1
	spushs
	spop $a
	call [$a],hide
	push "_imgroto0"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	push $9
	spushs
	spop $a
	call [$a],play
	end method
	method global8
	push slastimg
	spushs
	spop $a
	call [$a],hide
	push "_imgroto"
	push idimg
	pop $b
	popax
	add $a,$b
	push san
	pop $b
	popax
	add $a,$b
	pop slastimg
	push slastimg
	spushs
	spop $a
	call [$a],show
	push idimg
	push dir
	pop $b
	popax
	add $a,$b
	pop idimg
	push idimg
	push 0
	cmpjl
	cmp0
	je l1821
	push 0
	pop idimg
	push 1
	pop dir
	jmp l1820
l1821:
	push idimg
	push ileimgs
	cmpjae
	cmp0
	je l1823
	push ileimgs
	push 1
	pop $b
	popax
	sub $a,$b
	pop idimg
	push 1
	popax
	sub 0,$a
	pop dir
l1823:
l1820:
	cthis play
	end method
	method transparent
	push 0
	push 0
	push 0
	push 0
	ret
	end method
	method red
	push 255
	push 0
	push 0
	ret
	end method
	method green
	push 0
	push 255
	push 0
	ret
	end method
	method blue
	push 0
	push 0
	push 255
	ret
	end method
	method white
	push 255
	push 255
	push 255
	ret
	end method
	method black
	push 0
	push 0
	push 0
	ret
	end method
	method grey
	localint $1
	pop $1
	push $1
	push $1
	push $1
	ret
	end method
	method yellow
	push 255
	push 255
	push 0
	ret
	end method
	class Color
	method init
	push A
	push "r"
	push "g"
	push "b"
	push "a"
	cthis vars
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],get
	cthis set
	end method
	method img=
	localdef $1
	pop $1
	push $1
	spushs
	push $1
	clparent classansearcher,firstnotrx1y
	spop $a
	call [$a],getrgba
	pop a
	pop b
	pop g
	pop r
	end method
	method get
	push r
	push g
	push b
	push a
	ret
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop a
	pop b
	pop g
	pop r
	end method
	method rgb=
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	pop b
	pop g
	pop r
	end method
	method rgb
	push r
	push g
	push b
	ret
	end method
	method print
	push "Color::"
	cthis getname
	pop $b
	popax
	add $a,$b
	push " (r,g,b,a) = ("
	pop $b
	popax
	add $a,$b
	push r
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push g
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push a
	pop $b
	popax
	add $a,$b
	push ")"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	end class

	class classasker
	parent newvars
	method init
	clparent newvars,init
	new string,sfuncyes
	push "null"
	pop sfuncyes
	new string,sfuncno
	push "null"
	pop sfuncno
	new string,ssndask
	new string,ssndyes
	new string,ssndno
	new classsound,clsnd
	end method
	method reset
	push "null"
	pop sfuncyes
	push "null"
	pop sfuncno
	call buts,resetall
	end method
	method setfuncs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sfuncyes
	push $2
	pop sfuncno
	end method
	method fxonmovon
	localstring $1
	pop $1
	push $1
	call buts,sfxonmovon
	end method
	method setmouse
	localstring $1
	pop $1
	push "yes"
	push $1
	call buts,newmouse
	push "no"
	push $1
	call buts,newmouse
	end method
	method load
	localstring $1
	localint $2
	pop $2
	pop $1
	new classbutton,buts
	push $1
	push $2
	push "null"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call buts,disableall
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push $5
	cthis setfuncs
	push $1
	push $2
	push $3
	cthis ask2
	end method
	method ask2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	pop ssndask
	push $2
	pop ssndyes
	push $3
	pop ssndno
	call gameapi,pause
	call buts,benableall
	push "bkg"
	call buts,pause
	call clsnd,creset
	push $1
	call clsnd,cbplay
	cthis getname
	push "_ask"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovon
	localstring $1
	pop $1
	push $1
	push "yes"
	cmpje
	cmp0
	je l1825
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndyes
	call clsnd,cbplay
	jmp l1824
l1825:
	push $1
	push "no"
	cmpje
	cmp0
	je l1827
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndno
	call clsnd,cbplay
l1827:
l1824:
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "bkg"
	cmpje
	cmp0
	je l1829
	ret
l1829:
	call gameapi,resume
	call buts,disableall
	push 0
	call clsnd,cactsndstop
	push $1
	push "yes"
	cmpje
	cmp0
	je l1831
	push sfuncyes
	push "null"
	cmpjne
	jmp l1833
l1831:
	push 0
	jmp l1833
l1832:
	push 1
l1833:
	cmp0
	je l1834
	push sfuncyes
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_yes"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l1830
l1834:
	push $1
	push "no"
	cmpje
	cmp0
	je l1836
	push sfuncno
	push "null"
	cmpjne
	jmp l1838
l1836:
	push 0
	jmp l1838
l1837:
	push 1
l1838:
	cmp0
	je l1839
	push sfuncno
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_no"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1839:
l1830:
	end method
	method disabled
	call buts,disabled
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	end class

	class classplacepointer
	method init
	new anima,anpointer
	push "onfinish"
	push "classplacepointer0"
	call anpointer,addmethod
	new int,_iz
	push 1000
	pop _iz
	end method
	method classplacepointer0
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anpointer,load
	push _iz
	cthis setz
	call anpointer,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push $1
	call anpointer,setz
	end method
	method stop
	push 0
	call anpointer,stop
	end method
	method stoph
	push 0
	call anpointer,stop
	call anpointer,hide
	end method
	method show
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,setpos
	push $3
	call anpointer,play
	end method
	method move
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,move
	end method
	method showob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	cthis show
	end method
	method showpob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	cthis show
	end method
	end class

	class SimpleCounter
	method init
	localint $1
	pop $1
	push "length"
	push $1
	cthis var2
	new int,iid
	push 0
	pop iid
	end method
	method next
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push length
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	end method
	method set
	localint $1
	pop $1
	push $1
	pop iid
	end method
	method reset
	push 0
	pop iid
	end method
	method get
	push iid
	end method
	end class

	module clstrdigit
	method init
	end method
	method getdigit
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	pop $3
l1840:
	call $3,length
	push $2
	cmpjl
	cmp0
	je l1841
	push "0"
	push $3
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1840
l1841:
	push $3
	end method
	method gettime
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis geth
	push $1
	cthis getm
	push $1
	cthis gets
	push "h"
	call $2,contains
	push "m"
	call $2,contains
	push "s"
	call $2,contains
	cthis getstime
	end method
	method getstime
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $7
	push ""
	pop $7
	push $4
	cmp0
	je l1843
	push $1
	popax
	add $7,$a
	pop $7
l1843:
	push $5
	cmp0
	je l1845
	push $4
	cmp0
	je l1847
	push ":"
	jmp l1846
l1847:
	push ""
l1846:
	push $2
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1845:
	push $6
	cmp0
	je l1849
	push $4
	cmp0
	jne l1851
	push $5
	jmp l1852
l1850:
	push 0
	jmp l1852
l1851:
	push 1
l1852:
	cmp0
	je l1854
	push ":"
	jmp l1853
l1854:
	push ""
l1853:
	push $3
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1849:
	push $7
	end method
	method geth
	localint $1
	pop $1
	push $1
	push 3600
	pop $b
	popax
	div $a,$b
	psax
	end method
	method getm
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	psax
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method gets
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method getns
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis gets
	push $2
	cthis getdigit
	end method
	method getnm
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getm
	push $2
	cthis getdigit
	end method
	method getbinary
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l1855:
	push $1
	push 0
	cmpja
	cmp0
	je l1856
	push ""
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	push 2
	popax
	div $1,$a
	mov $1,$a
	jmp l1855
l1856:
	push $2
	end method
	method bintohex
	localstring $1
	pop $1
	localstring $2
	call $1,length
	push 4
	pop $b
	popax
	div $a,$b
	push $d
	spushs
	push 3
	cmpst
	jne l1858
	spop $a
	push "0"
	jmp l1857
l1858:
	push 2
	cmpst
	jne l1859
	spop $a
	push "00"
	jmp l1857
l1859:
	push 1
	cmpst
	jne l1860
	spop $a
	push "000"
	jmp l1857
l1860:
	spop $a
	push ""
l1857:
	pop $2
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1861:
	push $3
	call $1,length
	cmpjl
	cmp0
	je l1862
	jmp l1864
l1863:
	push 4
	popax
	add $3,$a
	pop $3
	jmp l1861
l1864:
	push $3
	push 4
	call $1,getb
	spushs
	push "0000"
	cmpst
	jne l1866
	spop $a
	push "0"
	jmp l1865
l1866:
	push "0001"
	cmpst
	jne l1867
	spop $a
	push "1"
	jmp l1865
l1867:
	push "0010"
	cmpst
	jne l1868
	spop $a
	push "2"
	jmp l1865
l1868:
	push "0011"
	cmpst
	jne l1869
	spop $a
	push "3"
	jmp l1865
l1869:
	push "0100"
	cmpst
	jne l1870
	spop $a
	push "4"
	jmp l1865
l1870:
	push "0101"
	cmpst
	jne l1871
	spop $a
	push "5"
	jmp l1865
l1871:
	push "0110"
	cmpst
	jne l1872
	spop $a
	push "6"
	jmp l1865
l1872:
	push "0111"
	cmpst
	jne l1873
	spop $a
	push "7"
	jmp l1865
l1873:
	push "1000"
	cmpst
	jne l1874
	spop $a
	push "8"
	jmp l1865
l1874:
	push "1001"
	cmpst
	jne l1875
	spop $a
	push "9"
	jmp l1865
l1875:
	push "1010"
	cmpst
	jne l1876
	spop $a
	push "A"
	jmp l1865
l1876:
	push "1011"
	cmpst
	jne l1877
	spop $a
	push "B"
	jmp l1865
l1877:
	push "1100"
	cmpst
	jne l1878
	spop $a
	push "C"
	jmp l1865
l1878:
	push "1101"
	cmpst
	jne l1879
	spop $a
	push "D"
	jmp l1865
l1879:
	push "1110"
	cmpst
	jne l1880
	spop $a
	push "E"
	jmp l1865
l1880:
	push "1111"
	cmpst
	jne l1881
	spop $a
	push "F"
	jmp l1865
l1881:
	spop $a
l1865:
	popax
	add $2,$a
	pop $2
	jmp l1863
l1862:
	push $2
	end method
	end module

	method getbinary
	cthis get
	clparent clstrdigit,getbinary
	end method
	method getdigit
	localint $1
	pop $1
	cthis get
	push $1
	clparent clstrdigit,getdigit
	end method
	method getbindigit
	localint $1
	pop $1
	cthis getbinary
	push $1
	clparent clstrdigit,getdigit
	end method
	class Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1883
	push sgmfontfile
	pop $1
l1883:
	push ".ttf"
	call $1,contains
	cmp0
	je l1885
	new font,_fnt
	push $1
	push $2
	call _fnt,load
	push "_fnt"
	pop $1
l1885:
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new int,iFontSize
	push $2
	pop iFontSize
	new text,txt
	push $1
	call txt,setfont
	push $8
	call txt,setz
	push $6
	push $7
	call txt,setpos
	call txt,show
	new text,txtbg
	call txtbg,hide
	end method
	method hide
	call txt,hide
	end method
	method show
	call txt,show
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,setpos
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt,set
	push iR
	push iG
	push iB
	call txt,createtxt
	end method
	method get
	call txt,get
	ret
	end method
	method setbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	call txt,getpx
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getpy
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getw
	push iFontSize
	pop $b
	popax
	add $a,$b
	push iFontSize
	push 2
	pop $b
	popax
	mul $a,$b
	push $1
	push $2
	push $3
	push $4
	call txtbg,setbkg
	push 1
	push 255
	push 255
	push 255
	push 128
	call txtbg,setborders
	call txtbg,show
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	cthis set
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,move
	end method
	end class

	class Cypher
	parent Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push 0
	cthis set
	end method
	method add
	localint $1
	pop $1
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method iget
	cthis get
	spushs
	spop $h
	call $h,to_i
	end method
	method operator+
	localint $1
	pop $1
	push $1
	cthis add
	end method
	method operator++
	push 1
	cthis add
	end method
	method operator--
	push 1
	popax
	sub 0,$a
	cthis add
	end method
	method operator-
	localint $1
	pop $1
	push $1
	popax
	sub 0,$a
	cthis add
	end method
	method operator=
	localint $1
	pop $1
	push $1
	cthis set
	end method
	method operator==
	localint $1
	pop $1
	cthis get
	push $1
	cmpje
	end method
	method operator!=
	localint $1
	pop $1
	cthis get
	push $1
	cmpjne
	end method
	method operator>
	localint $1
	pop $1
	cthis get
	push $1
	cmpja
	end method
	method operator<
	localint $1
	pop $1
	cthis get
	push $1
	cmpjl
	end method
	end class

	class SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,sdigit
	push $1
	pop sdigit
	push A
	push "istarttime"
	push $2
	push "idtime"
	push $3
	push "itime"
	push 0
	cthis vars2
	cthis reset
	push "timcyk"
	push 1000
	push 1
	push "SecCounter0"
	cthis cnewtimerfin
	end method
	method SecCounter0
	cthis play
	cthis getbuildername
	spushs
	spop $a
	call [$a],tick
	end method
	method play
	call timcyk,play
	end method
	method stop
	push 0
	call timcyk,stop
	end method
	method sgettime
	push itime
	push sdigit
	call clstrdigit,gettime
	ret
	end method
	method gettime
	push itime
	ret
	end method
	method tick
	push idtime
	cthis update
	end method
	method reset
	push istarttime
	pop itime
	end method
	method update
	localint $1
	pop $1
	push $1
	popax
	add itime,$a
	pop itime
	end method
	end class

	class TextTimeCounter
	parent Text
	parent SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localint $10
	localint $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push $9
	push $10
	push $11
	clparent SecCounter,init
	cthis reset
	push 0
	cthis update
	end method
	method update
	localint $1
	pop $1
	push $1
	clparent SecCounter,update
	cthis sgettime
	cthis set
	push itime
	push 0
	cmpjle
	cmp0
	je l1887
	push idtime
	push 0
	cmpjl
	jmp l1889
l1887:
	push 0
	jmp l1889
l1888:
	push 1
l1889:
	cmp0
	je l1890
	cthis getname
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1890:
	end method
	end class

	class gfxObject
	method init
	localstring $1
	pop $1
	new string,sgfxobj
	push $1
	pop sgfxobj
	end method
	method setpos
	push sgfxobj
	spushs
	spop $a
	call [$a],setpos
	end method
	method move
	push sgfxobj
	spushs
	spop $a
	call [$a],move
	end method
	method getpos
	push sgfxobj
	spushs
	spop $a
	call [$a],getpos
	end method
	method getposx
	push sgfxobj
	spushs
	spop $a
	call [$a],getposx
	end method
	method getposy
	push sgfxobj
	spushs
	spop $a
	call [$a],getposy
	end method
	method getpx
	push sgfxobj
	spushs
	spop $a
	call [$a],getpx
	end method
	method getpy
	push sgfxobj
	spushs
	spop $a
	call [$a],getpy
	end method
	method getw
	push sgfxobj
	spushs
	spop $a
	call [$a],getw
	end method
	method geth
	push sgfxobj
	spushs
	spop $a
	call [$a],geth
	end method
	method getcx
	push sgfxobj
	spushs
	spop $a
	call [$a],getcx
	end method
	method getcy
	push sgfxobj
	spushs
	spop $a
	call [$a],getcy
	end method
	method getex
	push sgfxobj
	spushs
	spop $a
	call [$a],getex
	end method
	method getey
	push sgfxobj
	spushs
	spop $a
	call [$a],getey
	end method
	method lodx
	push sgfxobj
	spushs
	spop $a
	call [$a],lodx
	end method
	method lody
	push sgfxobj
	spushs
	spop $a
	call [$a],lody
	end method
	method setz
	push sgfxobj
	spushs
	spop $a
	call [$a],setz
	end method
	method getz
	push sgfxobj
	spushs
	spop $a
	call [$a],getz
	end method
	method show
	push sgfxobj
	spushs
	spop $a
	call [$a],show
	end method
	method hide
	push sgfxobj
	spushs
	spop $a
	call [$a],hide
	end method
	method isvisible
	push sgfxobj
	spushs
	spop $a
	call [$a],isvisible
	end method
	method isin
	push sgfxobj
	spushs
	spop $a
	call [$a],isin
	end method
	end class

	class gfxSquare
	parent Color
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent Color,init
	push A
	push "w"
	push "h"
	cthis vars
	push $3
	pop w
	push $4
	pop h
	new img,imggfx
	push $1
	push $2
	call imggfx,setpos
	push "imggfx"
	clparent gfxObject,init
	end method
	method build
	push w
	push h
	push r
	push g
	push b
	push a
	call imggfx,create
	end method
	method shadow
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localdef $4
	localdef $5
	call imggfx,getpos
	pop $5
	pop $4
	push 0
	push 0
	call imggfx,setpos
	new img,_img1
	new img,_img2
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1892
	push w
	push h
	cthis transparent
	call _img1,create
	push "imggfx"
	call _img1,blit
	jmp l1891
l1892:
	push w
	push h
	cthis get
	call _img1,create
l1891:
	push w
	push h
	cthis black
	push $3
	call _img2,create
	push $1
	push 0
	cmpjl
	cmp0
	je l1894
	push $1
	popax
	sub 0,$a
	push 0
	call _img1,move
	push $1
	popax
	add $4,$a
	pop $4
	jmp l1893
l1894:
	push $1
	push 0
	call _img2,move
l1893:
	push $2
	push 0
	cmpjl
	cmp0
	je l1896
	push 0
	push $2
	popax
	sub 0,$a
	call _img1,move
	push $2
	popax
	add $5,$a
	pop $5
	jmp l1895
l1896:
	push 0
	push $2
	call _img2,move
l1895:
	call $1,abs
	popax
	add w,$a
	pop w
	call $2,abs
	popax
	add h,$a
	pop h
	push w
	push h
	cthis transparent
	call imggfx,create
	push "_img2"
	call imggfx,blit
	push "_img1"
	call imggfx,blit
	delete _img1
	delete _img2
	push $4
	push $5
	call imggfx,move
	end method
	method blackborder
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $1
	cthis black
	push $2
	cthis border
	end method
	method border
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $7
	localdef $8
	call imggfx,getpos
	pop $8
	pop $7
	push 0
	push 0
	call imggfx,setpos
	new img,_img
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1898
	push w
	push h
	cthis transparent
	call _img,create
	push "imggfx"
	call _img,blit
	jmp l1897
l1898:
	push w
	push h
	cthis get
	call _img,create
l1897:
	push $1
	push $2
	call _img,move
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add w,$a
	pop w
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add h,$a
	pop h
	push w
	push h
	push $3
	push $4
	push $5
	push $6
	call imggfx,create
	push "_img"
	call imggfx,blit
	delete _img
	push $7
	push $8
	call imggfx,move
	end method
	end class

	class Rect
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push A
	push "x"
	push "y"
	push "w"
	push "h"
	cthis vars
	push $1
	push $2
	push $3
	push $4
	cthis set
	new vector,vecgr
	push "string"
	call vecgr,type
	push "gmimgvec"
	call vecgr,add
	end method
	method x2
	push x
	push w
	pop $b
	popax
	add $a,$b
	end method
	method y2
	push y
	push h
	pop $b
	popax
	add $a,$b
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	pop w
	push $4
	pop h
	end method
	method setborders
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	pop w
	push $4
	push y
	pop $b
	popax
	sub $a,$b
	pop h
	end method
	method fit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	call vecgr,contains
	cmp0
	je l1900
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],_getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1902
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1902:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],_getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1904
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1904:
	jmp l1899
l1900:
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1906
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1906:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1908
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1908:
l1899:
	cthis x2
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l1910
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1910:
	cthis y2
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1912
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1912:
	end method
	method fitrand
	localstring $1
	pop $1
	push $1
	spushs
	push x
	push w
	push $1
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	push y
	push h
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	end method
	method fitgrouprand
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1913:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1914
	jmp l1916
l1915:
	add $2,1
	pop $2
	jmp l1913
l1916:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fitrand
	jmp l1915
l1914:
	end method
	method fitgroup
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1917:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1918
	jmp l1920
l1919:
	add $2,1
	pop $2
	jmp l1917
l1920:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fit
	jmp l1919
l1918:
	end method
	method isin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push x
	cmpjae
	cmp0
	je l1921
	push $1
	push x
	push w
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1921
	push $2
	push y
	cmpjae
	cmp0
	je l1921
	push $2
	push y
	push h
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l1923
l1921:
	push 0
	jmp l1923
l1922:
	push 1
l1923:
	end method
	end class

	class ImgRect
	method init
	push A
	push "ix"
	push 0
	push "iy"
	push 0
	push "iw"
	push 0
	push "ih"
	push 0
	push "bvis"
	push 1
	push "iz"
	push 0
	push "ilodx"
	push 0
	push "ilody"
	push 0
	cthis vars2
	end method
	method create
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop iw
	push $2
	pop ih
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop ix
	push $2
	pop iy
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add ix,$a
	pop ix
	push $2
	popax
	add iy,$a
	pop iy
	end method
	method getpos
	push ix
	push iy
	ret
	end method
	method getposx
	push ix
	end method
	method getposy
	push iy
	end method
	method getpx
	push ix
	end method
	method getpy
	push iy
	end method
	method getw
	push iw
	end method
	method geth
	push ih
	end method
	method getcx
	push ix
	push iw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	push iy
	push ih
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getex
	push ix
	push iw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	push iy
	push ih
	pop $b
	popax
	add $a,$b
	end method
	method lodx
	push ilodx
	end method
	method lody
	push ilody
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop iz
	end method
	method getz
	push iz
	end method
	method show
	push 1
	pop bvis
	end method
	method hide
	push 0
	pop bvis
	end method
	method isvisible
	push bvis
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpje
	cmp0
	jne l1926
	cthis isvisible
	jmp l1927
l1925:
	push 0
	jmp l1927
l1926:
	push 1
l1927:
	cmp0
	je l1928
	push $1
	push ix
	cmpjae
	cmp0
	je l1929
	push $1
	push ix
	push iw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l1929
	push $2
	push iy
	cmpjae
	cmp0
	je l1929
	push $2
	push iy
	push ih
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l1931
l1929:
	push 0
	jmp l1931
l1930:
	push 1
l1931:
	jmp l1924
l1928:
	push 0
l1924:
	end method
	method setrect
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop ix
	push $2
	pop iy
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	pop iw
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	pop ih
	end method
	method print
	push "x: "
	push ix
	pop $b
	popax
	add $a,$b
	push ", y: "
	pop $b
	popax
	add $a,$b
	push iy
	pop $b
	popax
	add $a,$b
	push ", w: "
	pop $b
	popax
	add $a,$b
	push iw
	pop $b
	popax
	add $a,$b
	push ", h: "
	pop $b
	popax
	add $a,$b
	push ih
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getw
	push $1
	spushs
	spop $a
	call [$a],geth
	push $1
	spushs
	spop $a
	call [$a],getz
	push $1
	spushs
	spop $a
	call [$a],isvisible
	pop bvis
	pop iz
	pop ih
	pop iw
	pop iy
	pop ix
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	new string,_sobfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	spushs
	push _sfun
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	cmpjne
	cmp0
	je l1933
	push _sobfin
	push "null"
	cmpje
	cmp0
	je l1935
	push _sfunfin
	spushs
	spop $d
	cthis [$d]
	jmp l1934
l1935:
	push _sobfin
	spushs
	push _sfunfin
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1934:
l1933:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	cmpja
	cmp0
	je l1937
	push _ib2
	cthis _cfinito
	jmp l1936
l1937:
	push _ival
	push _ib1
	cmpjl
	cmp0
	je l1939
	push _ib1
	cthis _cfinito
	jmp l1938
l1939:
	push _sob
	spushs
	push _sfun
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l1938:
l1936:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sobfin
	push $8
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $9
	call $2,abs
	pop $9
	push $1
	push 0
	cmpjle
	cmp0
	jne l1942
	push $9
	push $5
	cmpje
	cmp0
	jne l1942
	push $9
	push $6
	cmpja
	jmp l1943
l1941:
	push 0
	jmp l1943
l1942:
	push 1
l1943:
	cmp0
	je l1944
	ret
l1944:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	cmpja
	cmp0
	je l1946
	push _ib1
	pop _ival
	jmp l1945
l1946:
	push $2
	push 0
	cmpjl
	cmp0
	je l1948
	push _ib2
	pop _ival
	jmp l1947
l1948:
	ret
l1947:
l1945:
	push $3
	spushs
	push $4
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method setopacity
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setopacity"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push "null"
	push $4
	cthis _play
	end method
	method isplaying
	call timf,isplaying
	end method
	end class

	class CutScene
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,X1
	new int,Y1
	new int,X2
	new int,Y2
	new img,_gsq
	push $1
	push $2
	push $3
	push $4
	cthis build
	push "_gsq"
	clparent gfxObject,init
	new string,_sfunc1
	new string,_sob1
	new string,_sfunc2
	new string,_sob2
	new int,_idelay
	push 10
	pop _idelay
	new classfadeinout,_clfio
	new int,benableloading
	push 0
	pop benableloading
	end method
	method benableloading=
	localint $1
	pop $1
	push $1
	pop benableloading
	end method
	method build
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop Y2
	pop X2
	pop Y1
	pop X1
	push X2
	push X1
	pop $b
	popax
	sub $a,$b
	push Y2
	push Y1
	pop $b
	popax
	sub $a,$b
	cthis black
	push 255
	call _gsq,create
	push X1
	push Y1
	call _gsq,setpos
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method buildblack
	push X1
	push Y1
	push X2
	push Y2
	cthis build
	end method
	method buildfromfile
	localstring $1
	pop $1
	localdef $2
	cthis getz
	pop $2
	new img,_imtmp
	push $1
	call _imtmp,load
	push 255
	call _gsq,transparency
	push "_imtmp"
	call _gsq,blit
	delete _imtmp
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method buildfromscreen
	push 255
	call _gsq,transparency
	call _gsq,blitscreen
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method cloneto
	localstring $1
	pop $1
	push $1
	spushs
	push "_gsq"
	spop $a
	call [$a],clone
	end method
	method delay
	localint $1
	pop $1
	push $1
	pop _idelay
	end method
	method transparency
	localint $1
	pop $1
	push $1
	call _gsq,transparency
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "null"
	push $1
	push "null"
	push $2
	cthis playobfin
	end method
	method playobfin
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1950
	call gameapi,getgamename
	jmp l1949
l1950:
	push $1
l1949:
	pop _sob1
	push $2
	pop _sfunc1
	push $3
	push "null"
	cmpje
	cmp0
	je l1952
	call gameapi,getgamename
	jmp l1951
l1952:
	push $3
l1951:
	pop _sob2
	push $4
	pop _sfunc2
	call _gsq,show
	push 0
	call _gsq,transparency
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene0"
	call _clfio,_play
	end method
	method CutScene0
	push _sob1
	push _sfunc1
	cthis callfun
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method close
	localstring $1
	pop $1
	push benableloading
	cmp0
	je l1954
	cthis showloading
l1954:
	call gameapi,getgamename
	push $1
	cthis obclose
	end method
	method obclose
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob1
	push $2
	pop _sfunc1
	push 0
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene1"
	call _clfio,_play
	end method
	method CutScene1
	call _gsq,hide
	push _sob1
	push _sfunc1
	cthis callfun
	end method
	method enter
	localstring $1
	pop $1
	push benableloading
	cmp0
	je l1956
	cthis hideloading
l1956:
	call gameapi,getgamename
	push $1
	cthis obenter
	end method
	method obenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob2
	push $2
	pop _sfunc2
	push 255
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method _callfun2
	call _gsq,hide
	push _sob2
	push _sfunc2
	cthis callfun
	end method
	method isplaying
	call _clfio,isplaying
	end method
	method show
	push 255
	call _gsq,transparency
	call _gsq,show
	end method
	method loadloading
	localstring $1
	pop $1
	new img,txtloading
	push $1
	call txtloading,load
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call txtloading,setz
	call txtloading,ancenterscreen
	push "txtshow"
	push "CutScene2"
	call txtloading,addmethod
	push "txthides"
	push "CutScene3"
	call txtloading,addmethod
	end method
	method CutScene2
	cthis show
	end method
	method CutScene3
	cthis hide
	end method
	method showloading
	push "txtloading"
	cthis hasvar
	neg
	cmp0
	je l1958
	push "scripts/common/loading.png"
	call engine,fileexist
	cmp0
	je l1960
	push "scripts/common/loading.png"
	cthis loadloading
	jmp l1959
l1960:
	localdef $1
	push 64
	spushs
	spop $h
	call $h,igetsc
	cthis stdfont
	pop $1
	push "txtloading"
	push "Loading"
	push $1
	push 222
	cthis grey
	cthis newtext
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call txtloading,setz
	call txtloading,txtcenterscreen
	push 1
	push $1
	call txtloading,txtshadow
l1959:
l1958:
	call txtloading,txtshow
	end method
	method hideloading
	push "txtloading"
	cthis hasvar
	cmp0
	je l1962
	call txtloading,txthides
l1962:
	end method
	end class

	method allchars
	push "a0 t_!@#$%^&*()_+-=[]\\|}{;':\",./<>?`~"
	end method
	class TextTyper
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new string,sChars
	push $6
	pop sChars
	new int,iLimit
	push $7
	pop iLimit
	push A
	push "Sdir"
	push "left"
	push "W"
	push 0
	push "iFontSize"
	push $2
	push "X"
	push 0
	push "Y"
	push 0
	push "insystem"
	push 0
	cthis vars2
	new text,txt1
	push $1
	call txt1,setfont
	push ""
	call txt1,set
	new text,txt2
	push $1
	call txt2,setfont
	push "_"
	call txt2,set
	push iR
	push iG
	push iB
	call txt2,createtxt
	call txt2,hide
	new text,txtpass
	push $1
	call txtpass,setfont
	call txtpass,hide
	new int,bpass
	push 0
	pop bpass
	new string,_sob
	push "null"
	pop _sob
	new string,_sfun
	push "null"
	pop _sfun
	push "timcyk"
	push 300
	push 1
	push "fintimcyk"
	cthis cnewtimerfin
	push "txt1"
	clparent gfxObject,init
	end method
	method setaspasswd
	push 1
	pop bpass
	call txt1,hide
	call txt1,getz
	call txtpass,setz
	call txtpass,show
	cthis copytopass
	end method
	method copytopass
	localdef $1
	call txt1,get
	spushs
	spop $h
	call $h,length
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1963:
	push $3
	push $1
	cmpjl
	cmp0
	je l1964
	jmp l1966
l1965:
	add $3,1
	pop $3
	jmp l1963
l1966:
	push "*"
	popax
	add $2,$a
	pop $2
	jmp l1965
l1964:
	push $2
	call txtpass,txtset
	call txt1,getpx
	call txt1,getpy
	call txtpass,setpos
	end method
	method setastext
	push 0
	pop bpass
	call txt1,show
	call txtpass,hide
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,isin
	end method
	method getcol
	push iR
	push iG
	push iB
	ret
	end method
	method fintimcyk
	cthis getlock
	cmp0
	je l1968
	ret
l1968:
	cthis updatecyk
	cthis play
	end method
	method updatecyk
	call txt2,isvisible
	cmp0
	je l1970
	call txt2,hide
	jmp l1969
l1970:
	call txt1,getex
	call txt1,getpy
	call txt2,setpos
	call txt2,show
l1969:
	end method
	method enable
	cthis unlock
	cthis updatecyk
	call timcyk,play
	push insystem
	cmp0
	je l1972
	push GAME
	spushs
	push sTextBoxTyperSys
	spop $a
	call [$a],isgmobj
	cmp0
	je l1974
	push sTextBoxTyperSys
	cthis getname
	cmpjne
	jmp l1976
l1974:
	push 0
	jmp l1976
l1975:
	push 1
l1976:
	cmp0
	je l1977
	push sTextBoxTyperSys
	spushs
	spop $a
	call [$a],deactivate
l1977:
	cthis getname
	pop sTextBoxTyperSys
l1972:
	end method
	method deactivate
	cthis disable
	end method
	method disable
	call txt2,hide
	push 0
	call timcyk,stop
	cthis lock
	end method
	method onenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob
	push $2
	pop _sfun
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop X
	push $2
	pop Y
	cthis get
	cthis updatetxt
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push X
	push $1
	pop $b
	popax
	add $a,$b
	push Y
	push $2
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method setz
	localint $1
	pop $1
	push $1
	call txt1,setz
	push $1
	call txt2,setz
	end method
	method get
	localstring $1
	call txt1,get
	pop $1
	call $1,length
	push 0
	cmpja
	cmp0
	je l1979
	push $1
	jmp l1978
l1979:
	push ""
l1978:
	end method
	method getpx
	call txt1,getpx
	end method
	method getpy
	call txt1,getpy
	end method
	method getcx
	call txt1,getcx
	end method
	method getcy
	call txt1,getcy
	end method
	method geth
	call txt1,geth
	end method
	method getey
	call txt1,getpy
	push iFontSize
	pop $b
	popax
	add $a,$b
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,clip
	push $1
	push $2
	push $3
	push $4
	call txt2,clip
	end method
	method length
	call txt1,get
	spushs
	spop $h
	call $h,length
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt1,set
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis getcol
	call txt1,txtsetcol
	end method
	method limit=
	localint $1
	pop $1
	push $1
	pop iLimit
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1981
	ret
l1981:
	cthis getname
	push "_ontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1983
	cthis disable
	push _sob
	push _sfun
	cthis callfun
	cthis getname
	push "_onenter"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	ret
l1983:
	localstring $1
	push "t"
	call sChars,contains
	cmp0
	je l1985
	push "tab"
	call keyboard,iskey
	jmp l1987
l1985:
	push 0
	jmp l1987
l1986:
	push 1
l1987:
	cmp0
	je l1988
	push " "
	pop $1
	jmp l1984
l1988:
	call keyboard,getkey
	pop $1
l1984:
	localstring $2
	call txt1,get
	pop $2
	call keyboard,isalpha
	cmp0
	je l1990
	push "a"
	call sChars,contains
	jmp l1992
l1990:
	push 0
	jmp l1992
l1991:
	push 1
l1992:
	cmp0
	jne l1994
	call keyboard,isdigit
	cmp0
	je l1995
	push "0"
	call sChars,contains
	jmp l1997
l1995:
	push 0
	jmp l1997
l1996:
	push 1
l1997:
	cmp0
	jne l1994
	push $1
	call sChars,contains
	jmp l1998
l1993:
	push 0
	jmp l1998
l1994:
	push 1
l1998:
	cmp0
	je l1999
	push iLimit
	push 0
	cmpjle
	cmp0
	jne l2002
	push iLimit
	call $2,length
	cmpja
	jmp l2003
l2001:
	push 0
	jmp l2003
l2002:
	push 1
l2003:
	jmp l2004
l1999:
	push 0
	jmp l2004
l2000:
	push 1
l2004:
	cmp0
	je l2005
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	cthis updatetxt
	cthis updatecyk
	jmp l1989
l2005:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l2007
	call $2,length
	push 0
	cmpja
	jmp l2009
l2007:
	push 0
	jmp l2009
l2008:
	push 1
l2009:
	cmp0
	je l2010
	push 1
	call $2,strsube
	cthis updatetxt
	cthis updatecyk
l2010:
l1989:
	cthis getname
	push "_ontyped"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method updatetxt
	localstring $1
	pop $1
	push $1
	call txt1,set
	push iR
	push iG
	push iB
	call txt1,createtxt
	push Sdir
	push "center"
	cmpje
	cmp0
	je l2012
	push X
	push W
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push Y
	call txt1,setpos
	jmp l2011
l2012:
	push Sdir
	push "right"
	cmpje
	cmp0
	je l2014
	push X
	push W
	pop $b
	popax
	add $a,$b
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push Y
	call txt1,setpos
	jmp l2013
l2014:
	push X
	push Y
	call txt1,setpos
l2013:
l2011:
	push bpass
	cmp0
	je l2016
	cthis copytopass
l2016:
	cthis getname
	push "_onwrite"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class ConTextTyper
	parent TextTyper
	parent ObjController
	method init
	clparent TextTyper,init
	clparent ObjController,init
	end method
	end class

	new string,sTextBoxTyperSys
	push "null"
	pop sTextBoxTyperSys
	class TextBoxTyper
	parent LObjController
	parent ImagePos
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent LObjController,init
	clparent ImagePos,init
	new def,Font
	push $1
	push $2
	cthis checkfont
	pop Font
	push A
	push "Cols"
	push $10
	push $3
	pop $b
	popax
	div $a,$b
	psax
	push "Rows"
	push $11
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	push "X"
	push $8
	push "Y"
	push $9
	push "Row"
	push 0
	push "enablemove"
	push 1
	push "W"
	push $10
	push "insystem"
	push 0
	push "H"
	push $11
	push "isvisible"
	push 1
	push "clipx1"
	push $8
	push "clipy1"
	push $9
	push "clipx2"
	push 0
	push "clipy2"
	push 0
	push "clipped"
	push 0
	cthis vars2
	new def,Size
	push $2
	pop Size
	new def,Dy
	push $12
	pop Dy
	new def,Z
	push 0
	pop Z
	localstring $13
	new gmimgvec,grtt
	new gmimgvec,gren
	localint $14
	push 0
	pop $14
l2017:
	push $14
	push Rows
	cmpjl
	cmp0
	je l2018
	jmp l2020
l2019:
	add $14,1
	pop $14
	jmp l2017
l2020:
	push "tt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $13
	push $13
	spushs
	push Font
	push $2
	push $4
	push $5
	push $6
	push $7
	push Cols
	spop $e
	new TextTyper,[$e]
	push $13
	spushs
	push $10
	spop $a
	call [$a],W=
	push $13
	spushs
	push "left"
	spop $a
	call [$a],Sdir=
	push $13
	spushs
	push $8
	push $9
	push $14
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $13
	call grtt,add
	jmp l2019
l2018:
	end method
	method settyper
	localint $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localstring $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $10
	localint $11
	localstring $12
	localstring $13
	push ""
	pop $13
	push $1
	push 0
	cmpjl
	cmp0
	je l2022
	call grtt,last
	spushs
	spop $a
	call [$a],X
	pop $10
	call grtt,last
	spushs
	spop $a
	call [$a],getey
	push Dy
	pop $b
	popax
	add $a,$b
	pop $11
	call grtt,size
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	call grtt,add
	jmp l2021
l2022:
	push $1
	call grtt,get
	pop $12
	push $12
	spushs
	spop $a
	call [$a],X
	pop $10
	push $12
	spushs
	spop $a
	call [$a],getpy
	pop $11
	push $12
	spushs
	spop $a
	call [$a],get
	pop $13
	push $12
	push 0
	push $3
	push $12
	spushs
	spop $a
	call [$a],iFontSize
	pop $b
	popax
	sub $a,$b
	call grtt,movefrom
	push $12
	spushs
	spop $d
	delete [$d]
l2021:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	push $2
	push $3
	push $5
	push $6
	push $7
	push $8
	push W
	push $4
	pop $b
	popax
	div $a,$b
	psax
	spop $e
	new TextTyper,[$e]
	push $12
	spushs
	push W
	spop $a
	call [$a],W=
	push $12
	spushs
	push $9
	spop $a
	call [$a],Sdir=
	push $12
	spushs
	push $13
	spop $a
	call [$a],updatetxt
	push $12
	spushs
	push Z
	spop $a
	call [$a],setz
	push $12
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grtt,move
	push $1
	push $2
	call gren,move
	push $1
	popax
	add X,$a
	pop X
	push $2
	popax
	add Y,$a
	pop Y
	end method
	method size
	call grtt,size
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtt,setz
	push $1
	call gren,setz
	end method
	method getz
	push Z
	end method
	method show
	push 1
	pop isvisible
	call grtt,show
	end method
	method hide
	push 0
	pop isvisible
	call grtt,hide
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 1
	pop clipped
	push $1
	pop clipx1
	push $2
	pop clipy1
	push $3
	pop clipx2
	push $4
	pop clipy2
	localint $5
	push 0
	pop $5
l2023:
	push $5
	call grtt,size
	cmpjl
	cmp0
	je l2024
	jmp l2026
l2025:
	add $5,1
	pop $5
	jmp l2023
l2026:
	push $5
	call grtt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l2025
l2024:
	end method
	method getw
	push W
	end method
	method geth
	push H
	end method
	method enumerate
	localint $1
	pop $1
	localstring $2
	localstring $3
	localint $4
	push 0
	pop $4
l2027:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l2028
	jmp l2030
l2029:
	add $4,1
	pop $4
	jmp l2027
l2030:
	push "txte"
	push $4
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new text,[$e]
	push $2
	call gren,add
	push $2
	spushs
	push Z
	spop $a
	call [$a],setz
	push $2
	spushs
	push Font
	spop $a
	call [$a],setfont
	push $2
	spushs
	push ""
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	call tt0,getcol
	spop $a
	call [$a],txtsetcol
	push $2
	spushs
	push X
	push $2
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	push Y
	push $4
	push Size
	push Dy
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2029
l2028:
	end method
	method cut
	localint $1
	pop $1
	push $1
	pop Rows
	end method
	method enable
	cthis unlock
	cthis activateact
	end method
	method disable
	cthis lock
	push "disable"
	call grtt,eval
	end method
	method actual
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	end method
	method activate
	localint $1
	pop $1
	cthis unlock
	push $1
	push 0
	cmpjae
	cmp0
	je l2032
	push $1
	push Rows
	cmpjl
	jmp l2034
l2032:
	push 0
	jmp l2034
l2033:
	push 1
l2034:
	cmp0
	je l2035
	push insystem
	cmp0
	je l2037
	push GAME
	spushs
	push sTextBoxTyperSys
	spop $a
	call [$a],isgmobj
	cmp0
	je l2039
	push sTextBoxTyperSys
	cthis getname
	cmpjne
	jmp l2041
l2039:
	push 0
	jmp l2041
l2040:
	push 1
l2041:
	cmp0
	je l2042
	push sTextBoxTyperSys
	spushs
	spop $a
	call [$a],deactivate
l2042:
	cthis getname
	pop sTextBoxTyperSys
l2037:
	cthis deactivate
	push $1
	pop Row
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],enable
	cthis getname
	push "_activate"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2035:
	end method
	method activateact
	push Row
	cthis activate
	end method
	method deactivate
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disable
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l2044
	ret
l2044:
	cthis getname
	push "_boxontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l2046
	localdef $1
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	pop $1
	call $1,clear
	call $1,length
	push 0
	cmpje
	cmp0
	je l2048
	push enablemove
	jmp l2050
l2048:
	push 0
	jmp l2050
l2049:
	push 1
l2050:
	cmp0
	je l2051
	localdef $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l2052:
	push $2
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l2053
	jmp l2055
l2054:
	sub $2,1
	pop $2
	jmp l2052
l2055:
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l2054
l2053:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	push Rows
	cmpjl
	cmp0
	je l2057
	push ""
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis setid
l2057:
l2051:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l2045
l2046:
	push "up"
	call keyboard,iskey
	cmp0
	je l2059
	push Row
	push 0
	cmpja
	jmp l2061
l2059:
	push 0
	jmp l2061
l2060:
	push 1
l2061:
	cmp0
	je l2062
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l2058
l2062:
	push "down"
	call keyboard,iskey
	cmp0
	je l2064
	push Row
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l2066
l2064:
	push 0
	jmp l2066
l2065:
	push 1
l2066:
	cmp0
	je l2067
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l2063
l2067:
	push "pgdown"
	call keyboard,iskey
	cmp0
	je l2069
	push Row
	push Rows
	push 10
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2071
	push Row
	push 10
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l2070
l2071:
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l2070:
	jmp l2068
l2069:
	push "pgup"
	call keyboard,iskey
	cmp0
	je l2073
	push Row
	push 9
	cmpja
	cmp0
	je l2075
	push Row
	push 10
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l2074
l2075:
	push 0
	cthis activate
l2074:
	jmp l2072
l2073:
	push "backspace"
	call keyboard,iskey
	cmp0
	jne l2078
	push "delete"
	call keyboard,iskey
	jmp l2079
l2077:
	push 0
	jmp l2079
l2078:
	push 1
l2079:
	cmp0
	je l2080
	cthis actual
	spushs
	spop $a
	call [$a],length
	push 0
	cmpje
	jmp l2082
l2080:
	push 0
	jmp l2082
l2081:
	push 1
l2082:
	cmp0
	je l2083
	push enablemove
	cmp0
	je l2085
	localdef $2
	push Row
	pop $2
l2086:
	push $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2087
	jmp l2089
l2088:
	add $2,1
	pop $2
	jmp l2086
l2089:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l2088
l2087:
	push ""
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setid
l2085:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l2091
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l2091:
	jmp l2076
l2083:
	push "onkeydown"
	call grtt,eval
l2076:
l2072:
l2068:
l2063:
l2058:
l2045:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2093
	ret
l2093:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push clipped
	cmp0
	je l2095
	push $1
	push $2
	push clipx1
	push clipy1
	push clipx2
	push clipy2
	call clsurf,isin
	jmp l2097
l2095:
	push 0
	jmp l2097
l2096:
	push 1
l2097:
	cmp0
	jne l2099
	push clipped
	neg
	cmp0
	je l2100
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	jmp l2102
l2100:
	push 0
	jmp l2102
l2101:
	push 1
l2102:
	jmp l2103
l2098:
	push 0
	jmp l2103
l2099:
	push 1
l2103:
	cmp0
	je l2104
	cthis deactivate
	localint $3
	push 0
	pop $3
l2105:
	push $3
	cthis size
	cmpjl
	cmp0
	je l2106
	jmp l2108
l2107:
	add $3,1
	pop $3
	jmp l2105
l2108:
	push "tt"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getey
	push $2
	cmpja
	cmp0
	je l2110
	push $3
	cthis activate
	ret
l2110:
	jmp l2107
l2106:
	jmp l2094
l2104:
	cthis getname
	push "_OUTSIDE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2094:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	cmp0
	je l2112
	push isvisible
	neg
	jmp l2114
l2112:
	push 0
	jmp l2114
l2113:
	push 1
l2114:
	cmp0
	je l2115
	push 0
	ret
l2115:
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	end method
	method getid
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method getact
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method idpx
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpx
	end method
	method idpy
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpy
	end method
	method getpx
	push X
	end method
	method getpy
	push Y
	end method
	method get
	push 0
	cthis getfrom
	end method
	method getfrom
	localint $1
	pop $1
	push $1
	push ""
	cthis getlinesfrom
	end method
	method getlinesfrom
	localint $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push ""
	pop $3
	localint $4
	push $1
	pop $4
l2116:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l2117
	jmp l2119
l2118:
	add $4,1
	pop $4
	jmp l2116
l2119:
	push "tt"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	push $2
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	jmp l2118
l2117:
	push $3
	end method
	method getlines
	push 0
	push " "
	cthis getlinesfrom
	end method
	method nonempty
	localint $1
	pop $1
	localstring $2
l2120:
	push $1
	call grtt,size
	cmpjl
	cmp0
	je l2121
	jmp l2123
l2122:
	add $1,1
	pop $1
	jmp l2120
l2123:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	pop $2
	call $2,clear
	call $2,length
	push 0
	cmpja
	cmp0
	je l2125
	push $1
	ret
l2125:
	jmp l2122
l2121:
	push 1
	popax
	sub 0,$a
	end method
	method clear
	call grtt,txtreset
	end method
	method setid
	localstring $1
	localint $2
	pop $2
	pop $1
	call grtt,size
	push $2
	cmpjae
	cmp0
	je l2127
	push "tt"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],txtset
l2127:
	end method
	method settext
	localint $1
	pop $1
l2128:
	push $1
	push 0
	cmpja
	cmp0
	je l2129
	sub $1,1
	pop $1
	push $1
	cthis setid
	jmp l2128
l2129:
	end method
	method copytodb
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
	localint $2
	push 0
	pop $2
l2130:
	push $2
	call grtt,size
	cmpjl
	cmp0
	je l2131
	jmp l2133
l2132:
	add $2,1
	pop $2
	jmp l2130
l2133:
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	call grtt,get
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],add
	jmp l2132
l2131:
	end method
	method copyfromdb
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis copyfromdbii
	end method
	method copyfromdbss
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis copyfromdbii
	end method
	method copyfromdbii
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l2136
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	jmp l2137
l2135:
	push 0
	jmp l2137
l2136:
	push 1
l2137:
	cmp0
	je l2138
	ret
l2138:
	cthis clear
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	cthis size
	cmpja
	cmp0
	je l2140
	push $2
	cthis size
	pop $b
	popax
	add $a,$b
	pop $3
l2140:
	localint $4
	push $2
	pop $4
l2141:
	push $4
	push $3
	cmpjl
	cmp0
	je l2142
	jmp l2144
l2143:
	add $4,1
	pop $4
	jmp l2141
l2144:
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmp0
	je l2146
	push $1
	spushs
	push $4
	push 0
	spop $a
	call [$a],get
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis setid
l2146:
	jmp l2143
l2142:
	end method
	method copyfromdbrow
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $4
	push $4
	cthis size
	cmpja
	cmp0
	je l2148
	cthis size
	pop $4
l2148:
	localint $5
	push $3
	pop $5
l2149:
	push $5
	push $4
	cmpjl
	cmp0
	je l2150
	jmp l2152
l2151:
	add $5,1
	pop $5
	jmp l2149
l2152:
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],get
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	cthis setid
	jmp l2151
l2150:
	end method
	method save
	localstring $1
	pop $1
	push igmenablesave
	cmp0
	je l2154
	new db,__tmpdb
	push "__tmpdb"
	cthis copytodb
	push "|"
	call __tmpdb,setseparator
	push $1
	call __tmpdb,save
	delete __tmpdb
l2154:
	end method
	method load
	localstring $1
	pop $1
	new db,__tmpdb
	push $1
	call __tmpdb,load
	push "__tmpdb"
	cthis copyfromdb
	delete __tmpdb
	end method
	end class

	class GUITextBoxTyper
	parent TextBoxTyper
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	push $9
	push $10
	push $11
	push $12
	clparent TextBoxTyper,init
	push A
	push "rewinder"
	push "null"
	push "rewinderbg"
	push "null"
	cthis vars2
	end method
	method setrewinder
	localstring $1
	pop $1
	push $1
	pop rewinder
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	pop rewinderbg
	end method
	method activate
	localint $1
	pop $1
	push $1
	clparent TextBoxTyper,activate
	cthis updaterewactual
	end method
	method updaterewactual
	push Row
	cthis updaterewpos
	end method
	method updaterewpos
	localint $1
	pop $1
	push rewinder
	push "null"
	cmpjne
	cmp0
	je l2156
	localdef $2
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $a
	call [$a],getpy
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	cmpjl
	cmp0
	je l2158
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
	jmp l2157
l2158:
	push $2
	spushs
	spop $a
	call [$a],getey
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	cmpja
	cmp0
	je l2160
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
l2160:
l2157:
l2156:
	end method
	end class

	class DelayTaker
	method init
	new int,bonrel
	push 0
	pop bonrel
	new int,bstart
	push 0
	pop bstart
	new int,bclickrel
	push 1
	pop bclickrel
	push "timwez"
	push 300
	push 1
	push "DelayTaker0"
	cthis cnewtimerfin
	end method
	method DelayTaker0
	push 1
	pop bonrel
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	pop bclickrel
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	call timwez,delay
	end method
	method take
	push bclickrel
	cmp0
	je l2162
	call timwez,play
	push 0
	pop bonrel
	jmp l2161
l2162:
	push 1
	pop bonrel
l2161:
	push 1
	pop bstart
	end method
	method ret
	push 0
	pop bonrel
	push 0
	pop bstart
	push 0
	call timwez,stop
	end method
	method isonclick
	cthis stoptimer
	push bstart
	cmp0
	je l2163
	push bonrel
	neg
	jmp l2165
l2163:
	push 0
	jmp l2165
l2164:
	push 1
l2165:
	end method
	method isonrel
	cthis stoptimer
	push bstart
	cmp0
	je l2166
	push bonrel
	jmp l2168
l2166:
	push 0
	jmp l2168
l2167:
	push 1
l2168:
	end method
	method istaken
	push bstart
	end method
	method stoptimer
	push 0
	call timwez,stop
	end method
	end class

	class ImgMover
	method init
	new string,smoved
	push "null"
	pop smoved
	new int,ilastx
	new int,ilasty
	new int,irelx
	new int,irely
	end method
	method mssetobj
	localstring $1
	pop $1
	push $1
	call mouse,getpos
	cthis setobj
	end method
	method setobj
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	push 0
	cthis set
	end method
	method setcobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis setobj
	end method
	method setpobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setobj
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $4
	pop $b
	popax
	sub $a,$b
	pop ilastx
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $5
	pop $b
	popax
	sub $a,$b
	pop ilasty
	push $2
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop irelx
	push $3
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop irely
	push $1
	pop smoved
	end method
	method msmove
	call mouse,getpos
	cthis move
	end method
	method msftmove
	call mouse,getpos
	cthis ftmove
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l2170
	push smoved
	spushs
	push $1
	push smoved
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push irelx
	pop $b
	popax
	sub $a,$b
	push $2
	push smoved
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	push irely
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
l2170:
	end method
	method ftmove
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l2172
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
l2172:
	end method
	method retobj
	push 0
	push 0
	cthis ret
	end method
	method ret
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push ilastx
	push $1
	pop $b
	popax
	add $a,$b
	push ilasty
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	cthis free
	end method
	method put
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	cthis free
	end method
	method free
	push "null"
	pop smoved
	end method
	method getmover
	push smoved
	end method
	method getfree
	localdef $1
	push smoved
	pop $1
	cthis free
	push $1
	end method
	method moving
	push smoved
	push "null"
	cmpjne
	end method
	method setmoved
	localstring $1
	pop $1
	push $1
	pop smoved
	end method
	end class

	class ConImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	push smoved
	push "null"
	cmpjne
	cmp0
	je l2174
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2174:
	end method
	end class

	class DelayImgMover
	parent classlocker
	parent ImgMover
	method init
	clparent classlocker,init
	clparent ImgMover,init
	new DelayTaker,cldt
	push "b2clicks"
	push 0
	cthis var2
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method _put
	push b2clicks
	neg
	cmp0
	je l2176
	call cldt,ret
l2176:
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _get
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	push b2clicks
	neg
	cmp0
	je l2178
	call cldt,take
l2178:
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2180
	ret
l2180:
	push b2clicks
	cmp0
	je l2182
	cthis moving
	neg
	cmp0
	je l2184
	cthis _get
	jmp l2183
l2184:
	cthis _put
l2183:
	jmp l2181
l2182:
	call cldt,isonclick
	cmp0
	je l2186
	cthis _put
	jmp l2185
l2186:
	call cldt,istaken
	neg
	cmp0
	je l2188
	cthis _get
l2188:
l2185:
l2181:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2190
	ret
l2190:
	call cldt,isonrel
	cmp0
	je l2192
	push b2clicks
	neg
	jmp l2194
l2192:
	push 0
	jmp l2194
l2193:
	push 1
l2194:
	cmp0
	je l2195
	cthis _put
l2195:
	end method
	end class

	class DelayMover
	parent DelayImgMover
	parent ObjController
	method init
	clparent DelayImgMover,init
	clparent ObjController,init
	end method
	end class

	class WaitImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	call cldt,take
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	call cldt,isonrel
	cmp0
	je l2197
	cthis reset
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l2196
l2197:
	cthis moving
	cmp0
	je l2199
	cthis reset
	cthis getname
	push "_SET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2199:
l2196:
	end method
	end class

	class Rewinder
	parent classlocker
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new string,sarrowdir
	new int,ilenx
	new int,ileny
	new string,sgr
	new string,sorientation
	new int,bvertical
	new int,bfilteritem
	push 0
	pop bfilteritem
	new int,ibx1
	push 0
	pop ibx1
	new int,ibx2
	push iResX
	pop ibx2
	new int,iby1
	push 0
	pop iby1
	new int,iby2
	push iResY
	pop iby2
	new int,iodleg
	push 2
	pop iodleg
	new ImgMover,clmv
	push "timtick"
	push 1
	push 1
	push "timfin"
	cthis cnewtimercyclefin
	push A
	push "borx1"
	push $1
	push "bory1"
	push $2
	push "borx2"
	push $3
	push "bory2"
	push $4
	cthis vars2
	new snd,fxrew
	end method
	method movefilter
	push 1
	pop bfilteritem
	end method
	method movenormal
	push 0
	pop bfilteritem
	end method
	method setfxrew
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call fxrew,load
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push $1
	push $2
	push $3
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,set
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l2202
	push sorientation
	push "down"
	cmpje
	jmp l2203
l2201:
	push 0
	jmp l2203
l2202:
	push 1
l2203:
	cmp0
	je l2204
	push sgr
	spushs
	push $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	push 0
	spop $a
	call [$a],move
	jmp l2200
l2204:
	push sgr
	spushs
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	spop $a
	call [$a],move
l2200:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],remove
	end method
	method pickup
	localint $1
	localint $2
	pop $2
	pop $1
	push sgr
	spushs
	push $1
	push $2
	push 1
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l2206
	push sgr
	spushs
	spop $a
	call [$a],getsfound
	push $1
	push $2
	cthis getitem
	push 1
	ret
l2206:
	push 0
	ret
	end method
	method mspickup
	call mouse,getpos
	cthis pickup
	ret
	end method
	method freeitem
	call clmv,free
	end method
	method moveitem
	push bfilteritem
	cmp0
	je l2208
	call clmv,msftmove
	jmp l2207
l2208:
	call clmv,msmove
l2207:
	end method
	method retitem
	localstring $1
	call clmv,getmover
	pop $1
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,ret
	push $1
	cthis putitem
	end method
	method putitem
	localstring $1
	pop $1
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l2211
	push sorientation
	push "down"
	cmpje
	jmp l2212
l2210:
	push 0
	jmp l2212
l2211:
	push 1
l2212:
	cmp0
	je l2213
	push $1
	spushs
	push sgr
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l2209
l2213:
	push $1
	spushs
	push 0
	push sgr
	spushs
	spop $a
	call [$a],getey
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
l2209:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],add
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $1
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	end method
	method getmoved
	call clmv,getmover
	ret
	end method
	method getbutw
	call anupstd,getw
	ret
	end method
	method getbuth
	call anupstd,geth
	ret
	end method
	method movearrows
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grarrows,move
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $6
	pop sgr
	new anima,anupstd
	push $1
	call anupstd,load
	push $2
	call anupstd,setz
	push "up"
	push 0
	call anupstd,setframe
	push "anupstd"
	push "anupact"
	cthis copyanima
	push "up"
	push 1
	call anupact,setframe
	push "anupstd"
	push "andownact"
	cthis copyanima
	push "down"
	push 1
	call andownact,setframe
	push "anupstd"
	push "andownstd"
	cthis copyanima
	push "down"
	push 0
	call andownstd,setframe
	push "butup"
	push "anupstd"
	push "anupact"
	push "null"
	push $3
	cthis newbutan
	push "butdown"
	push "andownstd"
	push "andownact"
	push "null"
	push $3
	cthis newbutan
	push "onmoveon"
	push "_rewbutmoveon"
	call butup,addmethod
	push "onmoveon"
	push "_rewbutmoveon"
	call butdown,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butup,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butdown,addmethod
	push "onclick"
	push "_rewbutclick"
	call butup,addmethod
	push "onclick"
	push "_rewbutclick"
	call butdown,addmethod
	push "onrel"
	push "_rewbutrel"
	call butup,addmethod
	push "onrel"
	push "_rewbutrel"
	call butdown,addmethod
	push $4
	pop sorientation
	new gmimgvec,grarrows
	push "grarrows"
	push "anupstd"
	popax
	pop $b
	psax
	call [$b],operator+
	push "anupact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownstd"
	popax
	pop $b
	psax
	call [$b],operator+
	popax
	localint $7
	localint $8
	localint $9
	localint $10
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l2216
	push sorientation
	push "down"
	cmpje
	jmp l2217
l2215:
	push 0
	jmp l2217
l2216:
	push 1
l2217:
	cmp0
	je l2218
	push 0
	pop bvertical
	push $5
	pop ilenx
	push sorientation
	push "down"
	cmpje
	cmp0
	je l2220
	push borx1
	push bory2
	call anupstd,geth
	pop $b
	popax
	sub $a,$b
	call anupstd,setpos
	push borx1
	push bory2
	call anupact,geth
	pop $b
	popax
	sub $a,$b
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call andownstd,getey
	pop $7
	jmp l2219
l2220:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownact,setpos
	push bory1
	pop $7
l2219:
	call anupstd,getex
	push iodleg
	pop $b
	popax
	add $a,$b
	pop ibx1
	call andownstd,getpx
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop ibx2
	push ibx1
	pop $8
	jmp l2214
l2218:
	push 1
	pop bvertical
	push $5
	pop ileny
	push sorientation
	push "right"
	cmpje
	cmp0
	je l2222
	push borx2
	call anupstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupstd,setpos
	push borx2
	call anupact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call anupstd,getex
	pop $8
	jmp l2221
l2222:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx1
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx1
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	push borx1
	pop $8
l2221:
	call anupstd,getey
	push iodleg
	pop $b
	popax
	add $a,$b
	pop iby1
	call andownstd,getpy
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop iby2
	push iby1
	pop $7
l2214:
	cthis getname
	push "up"
	call butup,_rewbuildbut
	cthis getname
	push "down"
	call butdown,_rewbuildbut
	localint $11
	push $6
	spushs
	spop $a
	call [$a],size
	pop $11
	push $6
	spushs
	push $8
	push $7
	spop $a
	call [$a],_setpos
	new int,ilimx
	push $8
	pop ilimx
	new int,ilimy
	push $7
	pop ilimy
	localstring $12
	localint $13
	push 0
	pop $13
l2223:
	push $13
	push $11
	cmpjl
	cmp0
	je l2224
	jmp l2226
l2225:
	add $13,1
	pop $13
	jmp l2223
l2226:
	push sgr
	spushs
	push $13
	spop $a
	call [$a],get
	pop $12
	push sorientation
	push "right"
	cmpje
	cmp0
	je l2228
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l2227
l2228:
	push sorientation
	push "left"
	cmpje
	cmp0
	je l2230
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l2229
l2230:
	push sorientation
	push "up"
	cmpje
	cmp0
	je l2232
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	jmp l2231
l2232:
	push sorientation
	push "down"
	cmpje
	cmp0
	je l2234
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
l2234:
l2231:
l2229:
l2227:
	push $12
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	jmp l2225
l2224:
	end method
	method _rewbuildbut
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sob
	push $1
	pop _sob
	new string,_sdir
	push $2
	push "up"
	cmpje
	cmp0
	je l2236
	push bvertical
	push 0
	cmpje
	cmp0
	je l2238
	push "left"
	pop _sdir
	jmp l2237
l2238:
	push "up"
	pop _sdir
l2237:
	jmp l2235
l2236:
	push $2
	push "down"
	cmpje
	cmp0
	je l2240
	push bvertical
	push 0
	cmpje
	cmp0
	je l2242
	push "right"
	pop _sdir
	jmp l2241
l2242:
	push "down"
	pop _sdir
l2241:
l2240:
l2235:
	end method
	method _rewbutmoveon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _rewbutclick
	push _sdir
	cthis mstrzalkaon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method mstrzalkaon
	localstring $1
	pop $1
	push $1
	pop sarrowdir
	call timtick,play
	end method
	method _rewbutrel
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	end method
	method _rewstrzalkaoff
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method timfin
	cthis getlock
	cmp0
	je l2244
	ret
l2244:
	localint $1
	push 0
	pop $1
	push sarrowdir
	push "null"
	cmpjne
	cmp0
	je l2246
	push sgr
	spushs
	spop $a
	call [$a],empty
	neg
	jmp l2248
l2246:
	push 0
	jmp l2248
l2247:
	push 1
l2248:
	cmp0
	je l2249
	push sarrowdir
	push "up"
	cmpje
	cmp0
	je l2251
	push sgr
	spushs
	spop $a
	call [$a],getey
	call andownstd,getpy
	push ileny
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l2253
	push sgr
	spushs
	push 0
	push ileny
	popax
	sub 0,$a
	spop $a
	call [$a],move
	push 1
	pop $1
l2253:
	jmp l2250
l2251:
	push sarrowdir
	push "down"
	cmpje
	cmp0
	je l2255
	push sgr
	spushs
	spop $a
	call [$a],getpy
	push ilimy
	cmpjl
	cmp0
	je l2257
	push sgr
	spushs
	push 0
	push ileny
	spop $a
	call [$a],move
	push 1
	pop $1
l2257:
	jmp l2254
l2255:
	push sarrowdir
	push "left"
	cmpje
	cmp0
	je l2259
	push sgr
	spushs
	spop $a
	call [$a],getex
	call andownstd,getpx
	push ilenx
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l2261
	push sgr
	spushs
	push ilenx
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l2261:
	jmp l2258
l2259:
	push sarrowdir
	push "right"
	cmpje
	cmp0
	je l2263
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push ilimx
	cmpjl
	cmp0
	je l2265
	push sgr
	spushs
	push ilenx
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l2265:
l2263:
l2258:
l2254:
l2250:
l2249:
	push $1
	cmp0
	je l2267
	call fxrew,isplaying
	neg
	cmp0
	je l2269
	call fxrew,play
l2269:
	jmp l2266
l2267:
	push 0
	call fxrew,stop
l2266:
	cthis play
	end method
	end class

	class ConRewinder
	parent Rewinder
	parent ObjController
	method init
	clparent Rewinder,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	clparent Rewinder,getitem
	call cldt,take
	end method
	method _put
	call cldt,ret
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmousemove
	cthis moveitem
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2271
	ret
l2271:
	call cldt,isonrel
	cmp0
	je l2273
	cthis _put
l2273:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2275
	ret
l2275:
	call cldt,isonclick
	cmp0
	je l2277
	cthis _put
	jmp l2276
l2277:
	call cldt,istaken
	neg
	cmp0
	je l2279
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2279:
l2276:
	end method
	end class

	class Button
	parent LObjController
	method init
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	push A
	push "sobject"
	push "null"
	push "sclicked"
	push "null"
	push "bcheck2klik"
	push 0
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	end method
	method print
	call grbuts,print
	end method
	method sort
	call grbuts,sortimgs
	end method
	method addgroups
	call grbuts,addgroups
	call grbuts,sortimgs
	end method
	method addgroup
	localstring $1
	pop $1
	push $1
	call grbuts,addgr
	call grbuts,sortimgs
	end method
	method addlist
	call grbuts,addlist
	call grbuts,sortimgs
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grbuts,add
	call grbuts,sortimgs
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call grbuts,addonce
	call grbuts,sortimgs
	end method
	method addbut
	localstring $1
	pop $1
	push $1
	call grbuts,addonce
	call grbuts,sortimgs
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call grbuts,contains
	end method
	method addlocker
	localstring $1
	pop $1
	push $1
	cthis add
	push $1
	clparent classlocker,setaslocker
	end method
	method removebutlist
	push "removebut"
	cthis withlist
	end method
	method removebut
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	localint $2
	push sobject
	push "null"
	cmpjne
	cmp0
	jne l2281
	push sclicked
	push "null"
	cmpjne
	jmp l2282
l2280:
	push 0
	jmp l2282
l2281:
	push 1
l2282:
	pop $2
	push $1
	push sobject
	cmpje
	cmp0
	je l2284
	push "null"
	pop sobject
l2284:
	push $1
	push sclicked
	cmpje
	cmp0
	je l2286
	push "null"
	pop sclicked
l2286:
	push $2
	cmp0
	je l2288
	cthis onmousemove
l2288:
	end method
	method removebutmoveoff
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	push $1
	cthis checkmoveoff
	end method
	method checkmoveoff
	localstring $1
	pop $1
	push $1
	push sobject
	cmpje
	cmp0
	je l2290
	cthis lastoff
	cthis onmousemove
l2290:
	end method
	method load
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push "gmimgvec"
	push $1
	spop $a
	call [$a],varnew
	push $1
	push $2
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],each
	push $1
	cthis addgroup
	end method
	method remove
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	cmp0
	je l2292
	push $1
	call grbuts,removegr
l2292:
	end method
	method loadfrom
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	cthis getgraphpath
	pop $5
	push $2
	cthis setgraphpath
	push $1
	push $3
	push $4
	cthis load
	push $5
	cthis setgraphpath
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2294
	ret
l2294:
	cthis checktouchpad
	cmp0
	je l2296
	push bcheck2klik
	jmp l2298
l2296:
	push 0
	jmp l2298
l2297:
	push 1
l2298:
	cmp0
	je l2299
	push ipadclick
	cmp0
	je l2301
	localdef $1
	push sobject
	pop $1
	push $1
	push sobject
	cmpje
	cmp0
	je l2303
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l2302
l2303:
	push sobject
	push "null"
	cmpje
	cmp0
	je l2305
	push 0
	pop ipadclick
l2305:
l2302:
	jmp l2300
l2301:
	push 1
	pop ipadclick
l2300:
	jmp l2295
l2299:
	cthis _butmouselclick
l2295:
	end method
	method onmouserclick
	cthis getlock
	neg
	cmp0
	je l2307
	push sobject
	push "null"
	cmpjne
	cmp0
	je l2309
	push sobject
	spushs
	push "butrclick"
	spop $a
	call [$a],hasaddedmet
	jmp l2311
l2309:
	push 0
	jmp l2311
l2310:
	push 1
l2311:
	cmp0
	je l2312
	push sobject
	spushs
	spop $a
	call [$a],butrclick
l2312:
l2307:
	end method
	method _butmouselclick
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	push "null"
	cmpjne
	cmp0
	je l2314
	push sobject
	pop sclicked
	push sobject
	spushs
	push "butclick"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2316
	push sobject
	spushs
	spop $a
	call [$a],butclick
l2316:
l2314:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2318
	ret
l2318:
	cthis checktouchpad
	cmp0
	je l2320
	cthis lastoff
l2320:
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l2322
	push sclicked
	spushs
	push "butlrel"
	spop $a
	call [$a],hasaddedmet
	jmp l2324
l2322:
	push 0
	jmp l2324
l2323:
	push 1
l2324:
	cmp0
	je l2325
	push sclicked
	spushs
	spop $a
	call [$a],butlrel
	jmp l2321
l2325:
	push "null"
	pop sclicked
l2321:
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l2327
	ret
l2327:
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l2329
	push sclicked
	spushs
	push "butmoving"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2331
	push sclicked
	spushs
	spop $a
	call [$a],butmoving
l2331:
l2329:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push "isbutin"
	call grbuts,isinfunc
	cmp0
	je l2333
	localdef $3
	call grbuts,getsfound
	pop $3
	push $3
	push sobject
	cmpjne
	cmp0
	je l2335
	cthis lastoff
	push $3
	pop sobject
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $3
	spushs
	push "butmoveon"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2337
	push $3
	spushs
	spop $a
	call [$a],butmoveon
l2337:
l2335:
	jmp l2332
l2333:
	cthis lastoff
l2332:
	end method
	method lastoff
	push sobject
	push "null"
	cmpjne
	cmp0
	je l2339
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	spushs
	push "butmoveoff"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2341
	push sobject
	spushs
	spop $a
	call [$a],butmoveoff
l2341:
	push "null"
	pop sobject
l2339:
	end method
	method refresh
	cthis lastoff
	cthis onmousemove
	end method
	end class

	method Button_isin
	push "isbutin"
	push "global9"
	cthis addmethod
	end method
	method global9
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 0
	cthis isin
	end method
	method Button_isinvis
	push "isbutin"
	push "global10"
	cthis addmethod
	end method
	method global10
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method Button_isinalpha
	push "isbutin"
	push "global11"
	cthis addmethod
	end method
	method global11
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	end method
	method Button_isinvisalpha
	push "isbutin"
	push "global12"
	cthis addmethod
	end method
	method global12
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 1
	cthis isin
	end method
	method Button_moveon
	push "butmoveon"
	push "global13"
	cthis addmethod
	end method
	method global13
	call sndfxmoveonms,playif
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l2343
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l2343:
	end method
	method Button_moveonstate
	push "butmoveon"
	push "global14"
	cthis addmethod
	end method
	method global14
	cthis advstdstate
	cmp0
	je l2345
	call sndfxmoveonms,playif
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l2347
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l2347:
l2345:
	end method
	method Button_moveonplay
	push "butmoveon"
	push "global15"
	cthis addmethod
	end method
	method global15
	call sndfxmoveonms,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l2349
	push 1
	popax
	sub 0,$a
	cthis play
l2349:
	end method
	method Button_moveoff
	push "butmoveoff"
	push "global16"
	cthis addmethod
	end method
	method global16
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method Button_moveonms
	push "butmoveon"
	push "global17"
	cthis addmethod
	end method
	method global17
	call advmouse,setbut
	end method
	method Button_moveonfxms
	push "butmoveon"
	push "global18"
	cthis addmethod
	end method
	method global18
	call advmouse,setbut
	call sndfxmoveonms,playif
	end method
	method Button_moveonfxmstate
	push "butmoveon"
	push "global19"
	cthis addmethod
	end method
	method global19
	cthis advstdstate
	cmp0
	je l2351
	call advmouse,setbut
	call sndfxmoveonms,playif
l2351:
	end method
	method Button_moveoffms
	push "butmoveoff"
	push "global20"
	cthis addmethod
	end method
	method global20
	call advmouse,setstd
	end method
	method Button_std
	cthis Button_isin
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdstate
	cthis Button_isin
	cthis Button_moveonstate
	cthis Button_moveoff
	end method
	method Button_stdalpha
	cthis Button_isinalpha
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdms
	cthis Button_isinalpha
	cthis Button_moveonms
	cthis Button_moveoffms
	end method
	method Button_stdmstate
	cthis Button_isinalpha
	cthis Button_moveonmstate
	cthis Button_moveoffms
	end method
	method Button_stdclick
	push "butclick"
	push "Button_butclick"
	cthis addmethod
	end method
	method Button_addstd
	cthis Button_std
	cthis Button_stdclick
	cthis getname
	call butgame,add
	end method
	method Button_addstdalpha
	cthis Button_stdalpha
	cthis Button_stdclick
	cthis getname
	call butgame,add
	end method
	method Button_addstdstate
	cthis Button_stdstate
	push "butclick"
	push "global21"
	cthis addmethod
	cthis getname
	call butgame,add
	end method
	method global21
	cthis advstdstate
	cmp0
	je l2353
	call sndfxbutclick1,playif
	cthis Button_butclick
	jmp l2352
l2353:
	push "butclick_nostdstate_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2352:
	end method
	method Button_butclick
	push "butclick_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method Button_butmoveon
	push "butmoveon_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method Button_butmoveoff
	push "butmoveoff_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	class Buttons
	parent LObjController
	method init
	localstring $1
	pop $1
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	new int,__id
	push 0
	pop __id
	new string,sanbut
	push "anbut"
	pop sanbut
	push sanbut
	push $1
	push 10
	cthis newanima
	push sanbut
	push sanbut
	push "grbuts"
	cthis newanactionsgr
	popax
	call anbut,hide
	push 10
	call grbuts,setz
	push "Buttons0"
	call grbuts,removeif
	new string,slastb
	push "null"
	pop slastb
	push A
	push "sobject"
	push "null"
	push "bvisible"
	push 1
	push "balpha"
	push 1
	cthis vars2
	new int,ipadclick
	push 0
	pop ipadclick
	push "bcheck2klik"
	push 0
	cthis var2
	end method
	method Buttons0
	cthis actionname
	push "bkg"
	cmpje
	cmp0
	je l2355
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setz
	push 1
	jmp l2354
l2355:
	push 0
l2354:
	end method
	method _release
	cthis checktouchpad
	cmp0
	je l2357
	push 0
	pop ipadclick
l2357:
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],setframe
	cthis copyobj
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "null"
	pop slastb
	call advmouse,setstd
	end method
	method getbut
	call grbuts,getsfound
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l2359
	ret
l2359:
	push 1
	popax
	sub 0,$a
	push 0
	call grbuts,setframe
	localdef $1
	call mouse,getpos
	push bvisible
	push balpha
	call grbuts,isin
	pop $1
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2361
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
l2361:
	push $1
	cmp0
	je l2363
	localstring $2
	call grbuts,getsfound
	pop $2
	push $2
	push slastb
	cmpjne
	cmp0
	je l2365
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2367
	cthis _release
l2367:
	push $2
	pop slastb
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	cthis copyobj
	call advmouse,setact
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2365:
	jmp l2362
l2363:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2369
	cthis _release
l2369:
l2362:
	end method
	method copyobj
	push slastb
	spushs
	spop $a
	call [$a],actionname
	pop sobject
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l2371
	ret
l2371:
	cthis checktouchpad
	cmp0
	je l2373
	push bcheck2klik
	jmp l2375
l2373:
	push 0
	jmp l2375
l2374:
	push 1
l2375:
	cmp0
	je l2376
	push ipadclick
	cmp0
	je l2378
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l2377
l2378:
	push 1
	pop ipadclick
	cthis onmousemove
l2377:
	jmp l2372
l2376:
	cthis _butmouselclick
l2372:
	end method
	method _butmouselclick
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2380
	cthis copyobj
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2380:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l2382
	ret
l2382:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2384
	cthis copyobj
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2384:
	end method
	method disable
	cthis lock
	call grbuts,hide
	push slastb
	push "null"
	cmpjne
	cmp0
	je l2386
	call advmouse,setstd
	push "null"
	pop slastb
l2386:
	end method
	method enable
	cthis unlock
	call grbuts,show
	end method
	end class

	class TextDb
	parent classlocker
	parent ObjController
	parent gfxObject
	method init
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	clparent ObjController,init
	new string,sFont
	push $1
	pop sFont
	new string,sFontBold
	push "null"
	pop sFontBold
	new string,sFontItalic
	push "null"
	pop sFontItalic
	new string,sFontBoldItalic
	push "null"
	pop sFontBoldItalic
	new int,bhtml
	push 0
	pop bhtml
	localstring $12
	localint $13
	localint $14
	push "$"
	call $1,contains
	cmp0
	je l2388
	push 1
	pop bhtml
	new vector,vfont
	push "string"
	call vfont,type
	push $1
	push "$"
	call vfont,vecbuildfromstring
	push 0
	pop $14
l2389:
	push $14
	call vfont,size
	cmpjl
	cmp0
	je l2390
	jmp l2392
l2391:
	add $14,1
	pop $14
	jmp l2389
l2392:
	push $14
	call vfont,get
	pop $12
	push "_italic"
	call $12,contains
	cmp0
	je l2394
	push "_bold"
	call $12,contains
	jmp l2396
l2394:
	push 0
	jmp l2396
l2395:
	push 1
l2396:
	cmp0
	je l2397
	push $12
	pop sFontBoldItalic
	jmp l2393
l2397:
	push "_italic"
	call $12,contains
	cmp0
	je l2399
	push $12
	pop sFontItalic
	jmp l2398
l2399:
	push "_bold"
	call $12,contains
	cmp0
	je l2401
	push $12
	pop sFontBold
	jmp l2400
l2401:
	push $12
	pop sFont
l2400:
l2398:
l2393:
	jmp l2391
l2390:
	push "$"
	call sFont,contains
	cmp0
	je l2403
	push sFontItalic
	push "null"
	cmpjne
	cmp0
	je l2405
	push sFontItalic
	pop sFont
	jmp l2404
l2405:
	push sFontBold
	push "null"
	cmpjne
	cmp0
	je l2407
	push sFontBold
	pop sFont
	jmp l2406
l2407:
	push sFontBoldItalic
	pop sFont
l2406:
l2404:
l2403:
	push sFont
	pop $1
	jmp l2387
l2388:
	push $1
	push $2
	cthis checkfont
	pop $1
l2387:
	new int,iFontSize
	push $2
	pop iFontSize
	push "Z"
	push $10
	cthis var2
	localstring $15
	push "null"
	pop $15
	push ":"
	call $3,contains
	cmp0
	je l2409
	push ":"
	call $3,strgetto
	push ":"
	pop $b
	popax
	add $a,$b
	pop $15
l2409:
	push ".db"
	call $3,contains
	cmp0
	je l2411
	push $15
	push "$path:"
	cmpje
	cmp0
	je l2413
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,load
	jmp l2412
l2413:
	push "dbtxt"
	push $3
	cthis newdb
l2412:
	jmp l2410
l2411:
	push $15
	spushs
	push "$lang:"
	cmpst
	jne l2415
	spop $a
	push "dbtxt"
	push $15
	call $3,strsubbs
	cthis lang_db
	jmp l2414
l2415:
	push "$var:"
	cmpst
	jne l2416
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,dbcopy
	jmp l2414
l2416:
	push "$row:"
	cmpst
	jne l2417
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	spushs
	push ","
	spop $h
	call $h,strgetto
	pop $12
	push ","
	call $3,strgetfrom
	pop $13
	push 0
	pop $14
l2418:
	push $14
	push $12
	spushs
	push $13
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2419
	jmp l2421
l2420:
	add $14,1
	pop $14
	jmp l2418
l2421:
	call dbtxt,addrow
	popax
	push $14
	push $12
	spushs
	push $13
	push $14
	spop $a
	call [$a],get
	call dbtxt,add
	jmp l2420
l2419:
	jmp l2414
l2417:
	spop $a
	new db,dbtxt
	push $3
	call dbtxt,dbaddlast
l2414:
l2410:
	localint $16
	push 0
	pop $16
	localint $17
	call dbtxt,getrowsno
	pop $17
	push 0
	push 5
	call $11,getb
	push "limit"
	cmpje
	cmp0
	je l2423
	localint $18
	push "limit_"
	call $11,strsubbs
	pop $18
	new vector,vtmp
	push "string"
	call vtmp,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	localint $14
	push 0
	pop $14
l2424:
	push $14
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l2425
	jmp l2427
l2426:
	add $14,1
	pop $14
	jmp l2424
l2427:
	push $14
	push 0
	call dbtxt,get
	push " "
	call vtmp,vecbuildfromstring
	localint $19
	push 0
	pop $19
l2428:
	push $19
	call vtmp,size
	cmpjl
	cmp0
	je l2429
	jmp l2431
l2430:
	add $19,1
	pop $19
	jmp l2428
l2431:
	push $19
	call vtmp,get
	call vtmp2,add
	jmp l2430
l2429:
	jmp l2426
l2425:
	call dbtxt,free
	localstring $12
	push ""
	pop $12
	localstring $20
	push 0
	pop $14
l2432:
	push $14
	call vtmp2,size
	cmpjl
	cmp0
	je l2433
	jmp l2435
l2434:
	add $14,1
	pop $14
	jmp l2432
l2435:
	push $14
	call vtmp2,get
	pop $20
	push $12
	push $20
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,length
	push $18
	cmpjl
	cmp0
	je l2437
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	jmp l2436
l2437:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	pop $12
l2436:
	jmp l2434
l2433:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	call dbtxt,getrowsno
	pop $17
l2423:
	new gmimgvec,grtxt
	push $7
	push $8
	call grtxt,_setpos
	push 0
	pop $14
l2438:
	push $14
	push $17
	cmpjl
	cmp0
	je l2439
	jmp l2441
l2440:
	add $14,1
	pop $14
	jmp l2438
l2441:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	spop $e
	new text,[$e]
	localdef $21
	push $14
	push 0
	call dbtxt,get
	pop $21
	push bhtml
	cmp0
	je l2443
	push "<b>"
	call $21,contains
	cmp0
	je l2445
	push sFontBold
	pop $1
	push "<b>"
	call $21,strremove
	jmp l2444
l2445:
	push "<bi>"
	call $21,contains
	cmp0
	je l2447
	push sFontBoldItalic
	pop $1
	push "<bi>"
	call $21,strremove
	jmp l2446
l2447:
	push "<i>"
	call $21,contains
	cmp0
	je l2449
	push sFontItalic
	pop $1
	push "<i>"
	call $21,strremove
	jmp l2448
l2449:
	push sFont
	pop $1
l2448:
l2446:
l2444:
l2443:
	push $12
	spushs
	push $1
	spop $a
	call [$a],setfont
	push $12
	spushs
	push $21
	spop $a
	call [$a],set
	push $12
	spushs
	push $7
	push $8
	spop $a
	call [$a],setpos
	push $2
	push $9
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	push $12
	spushs
	push $10
	spop $a
	call [$a],setz
	push $12
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	push $12
	spushs
	spop $a
	call [$a],getw
	push $16
	cmpja
	cmp0
	je l2451
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $16
l2451:
	push $12
	call grtxt,add
	jmp l2440
l2439:
	push "Rows"
	push $17
	cthis var2
	push $11
	push "right"
	cmpje
	cmp0
	jne l2454
	push $11
	push "center"
	cmpje
	jmp l2455
l2453:
	push 0
	jmp l2455
l2454:
	push 1
l2455:
	cmp0
	je l2456
	push 0
	pop $14
l2457:
	push $14
	push $17
	cmpjl
	cmp0
	je l2458
	jmp l2460
l2459:
	add $14,1
	pop $14
	jmp l2457
l2460:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $11
	push "center"
	cmpje
	cmp0
	je l2462
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	spop $a
	call [$a],move
	jmp l2461
l2462:
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l2461:
	jmp l2459
l2458:
l2456:
	push "W"
	push $16
	cthis var2
	push "grtxt"
	clparent gfxObject,init
	end method
	method stdshadow
	localint $1
	pop $1
	push 0
	push 0
	push 0
	push $1
	cthis setshadow
	end method
	method setshadow
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	push sFont
	push iFontSize
	push "_fntbrd"
	cthis _checkfont
	pop $7
	localint $8
	push 0
	pop $8
l2463:
	push $8
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l2464
	jmp l2466
l2465:
	add $8,1
	pop $8
	jmp l2463
l2466:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "txts"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new text,[$e]
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],set
	push $6
	spushs
	push $7
	spop $a
	call [$a],setfont
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $4
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	push $6
	call grtxt,add
	jmp l2465
l2464:
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtxt,setz
	end method
	method getz
	push Z
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call grtxt,isin
	end method
	method view
	localdef $1
	pop $1
	localstring $2
l2467:
	push A
	push $1
	cmpjne
	cmp0
	je l2468
	push $1
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push "txts"
	push "txt"
	call $2,strsubbs
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l2470
	push $2
	spushs
	spop $a
	call [$a],show
l2470:
	localdef $1
	pop $1
	jmp l2467
l2468:
	end method
	method blitto
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l2471:
	push $3
	call grtxt,size
	cmpjl
	cmp0
	je l2472
	jmp l2474
l2473:
	add $3,1
	pop $3
	jmp l2471
l2474:
	push $3
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],buildfullname
	push $1
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],blit
	push GAME
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardel
	jmp l2473
l2472:
	end method
	method setcol
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l2475:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l2476
	jmp l2478
l2477:
	add $4,1
	pop $4
	jmp l2475
l2478:
	push $4
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	jmp l2477
l2476:
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l2479:
	push $5
	call grtxt,size
	cmpjl
	cmp0
	je l2480
	jmp l2482
l2481:
	add $5,1
	pop $5
	jmp l2479
l2482:
	push $5
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l2481
l2480:
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	call grtxt,getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	localdef $4
	push $2
	call grtxt,getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	call grtxt,move
	end method
	end class

	class Lexer
	method init
	end method
	method buildlex
	push A
	push "id"
	push "found"
	cthis vars
	new vector,vconsts
	push "string"
	call vconsts,type
	new vector,vtmp1
	push "string"
	call vtmp1,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	new int,dot
	push "."
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop dot
	new string,_literal_char
	push "\""
	pop _literal_char
	end method
	method setliteralchar
	localstring $1
	pop $1
	push $1
	pop _literal_char
	end method
	method getliteralchar
	push _literal_char
	end method
	method _isvar
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push id
	pop $3
	push ""
	pop found
	localint $4
l2483:
	push $3
	cthis length
	cmpjl
	cmp0
	je l2484
	push $3
	cthis getbyte
	pop $4
	push $4
	push $1
	cmpjae
	cmp0
	je l2486
	push $4
	push $2
	cmpjle
	jmp l2488
l2486:
	push 0
	jmp l2488
l2487:
	push 1
l2488:
	cmp0
	je l2489
	push $3
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $3,1
	pop $3
	jmp l2485
l2489:
	push $4
	push BYTEa
	cmpjae
	cmp0
	je l2491
	push $4
	push BYTEz
	cmpjle
	jmp l2493
l2491:
	push 0
	jmp l2493
l2492:
	push 1
l2493:
	cmp0
	jne l2495
	push $4
	push BYTEA
	cmpjae
	cmp0
	je l2496
	push $4
	push BYTEZ
	cmpjle
	jmp l2498
l2496:
	push 0
	jmp l2498
l2497:
	push 1
l2498:
	cmp0
	jne l2495
	push $4
	push BYTE_
	cmpje
	jmp l2499
l2494:
	push 0
	jmp l2499
l2495:
	push 1
l2499:
	cmp0
	je l2500
	push ""
	pop found
l2500:
	cthis length
	pop $3
l2485:
	jmp l2483
l2484:
	call found,length
	end method
	method isreal
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
	localint $3
	push 1
	pop $3
l2501:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2502
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l2504
	push $2
	push BYTE9
	cmpjle
	jmp l2506
l2504:
	push 0
	jmp l2506
l2505:
	push 1
l2506:
	cmp0
	jne l2508
	push $2
	push dot
	cmpje
	cmp0
	je l2509
	push $3
	jmp l2511
l2509:
	push 0
	jmp l2511
l2510:
	push 1
l2511:
	jmp l2512
l2507:
	push 0
	jmp l2512
l2508:
	push 1
l2512:
	cmp0
	je l2513
	push $2
	push dot
	cmpje
	cmp0
	je l2515
	push 0
	pop $3
l2515:
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l2503
l2513:
	cthis length
	pop $1
l2503:
	jmp l2501
l2502:
	push $3
	cmp0
	jne l2518
	push 0
	push 1
	call found,getb
	push "."
	cmpje
	cmp0
	jne l2518
	push 0
	push 1
	call found,gete
	push "."
	cmpje
	jmp l2519
l2517:
	push 0
	jmp l2519
l2518:
	push 1
l2519:
	cmp0
	je l2520
	push ""
	pop found
l2520:
	call found,length
	end method
	method isident
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
l2521:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2522
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTEa
	cmpjae
	cmp0
	je l2524
	push $2
	push BYTEz
	cmpjle
	jmp l2526
l2524:
	push 0
	jmp l2526
l2525:
	push 1
l2526:
	cmp0
	jne l2528
	push $2
	push BYTEA
	cmpjae
	cmp0
	je l2529
	push $2
	push BYTEZ
	cmpjle
	jmp l2531
l2529:
	push 0
	jmp l2531
l2530:
	push 1
l2531:
	cmp0
	jne l2528
	push $2
	push BYTE_
	cmpje
	cmp0
	jne l2528
	push $1
	push id
	cmpja
	cmp0
	je l2532
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l2532
	push $2
	push BYTE9
	cmpjle
	jmp l2534
l2532:
	push 0
	jmp l2534
l2533:
	push 1
l2534:
	jmp l2535
l2527:
	push 0
	jmp l2535
l2528:
	push 1
l2535:
	cmp0
	je l2536
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l2523
l2536:
	cthis length
	pop $1
l2523:
	jmp l2521
l2522:
	call found,length
	end method
	method isliteral
	cthis check
	cthis getliteralchar
	cmpjne
	cmp0
	je l2538
	push 0
	ret
l2538:
	localint $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop found
	localstring $2
l2539:
	push $1
	cthis length
	cmpjl
	cmp0
	je l2540
	push $1
	push 1
	cthis getb
	pop $2
	push $2
	cthis getliteralchar
	cmpje
	cmp0
	je l2542
	push 1
	ret
	jmp l2541
l2542:
	push $2
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
l2541:
	jmp l2539
l2540:
	push 0
	end method
	method isconst
	localstring $1
	localint $2
	cthis isident
	pop $2
	localint $3
	push 0
	pop $3
l2543:
	push $3
	call vconsts,size
	cmpjl
	cmp0
	je l2544
	jmp l2546
l2545:
	add $3,1
	pop $3
	jmp l2543
l2546:
	push $3
	call vconsts,get
	pop $1
	push $2
	cmp0
	je l2548
	push $1
	push found
	cmpje
	cmp0
	je l2550
	push 1
	ret
l2550:
	jmp l2547
l2548:
	push id
	call $1,length
	cthis getb
	pop found
	push $1
	push found
	cmpje
	cmp0
	je l2552
	push 1
	ret
l2552:
l2547:
	jmp l2545
l2544:
	push 0
	end method
	method gettoken
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
l2553:
	cthis notend
	cmp0
	je l2554
	cthis check
	push " "
	cmpje
	cmp0
	je l2556
	add id,1
	pop id
	jmp l2555
l2556:
	cthis isconst
	cmp0
	je l2558
	push $1
	spushs
	push "$const"
	spop $a
	call [$a],add
	push $1
	spushs
	cthis read
	spop $a
	call [$a],add
	jmp l2557
l2558:
	cthis isreal
	cmp0
	je l2560
	push $1
	spushs
	push "$real"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2562
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2562:
	jmp l2559
l2560:
	cthis isint
	cmp0
	je l2564
	push $1
	spushs
	push "$int"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2566
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2566:
	jmp l2563
l2564:
	cthis isident
	cmp0
	je l2568
	push $1
	spushs
	push "$alpha"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2570
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2570:
	jmp l2567
l2568:
	cthis isliteral
	cmp0
	je l2572
	push $1
	spushs
	push "$literal"
	spop $a
	call [$a],add
	cthis next
	push 2
	popax
	add id,$a
	pop id
	push $2
	cmp0
	je l2574
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2574:
	jmp l2571
l2572:
	push $1
	spushs
	push "$error"
	spop $a
	call [$a],add
	add id,1
	pop id
l2571:
l2567:
l2563:
l2559:
l2557:
l2555:
	jmp l2553
l2554:
	end method
	method expectdb
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	localstring $4
	localint $5
	push 0
	pop $5
l2575:
	push $5
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l2576
	jmp l2578
l2577:
	add $5,1
	pop $5
	jmp l2575
l2578:
	call vtmp2,free
	push 0
	pop $3
l2579:
	push $3
	push $1
	spushs
	push $5
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2580
	jmp l2582
l2581:
	add $3,1
	pop $3
	jmp l2579
l2582:
	push $1
	spushs
	push $5
	push $3
	spop $a
	call [$a],get
	pop $4
	call $4,clear
	push $4
	push ""
	cmpjne
	cmp0
	je l2584
	push $4
	call vtmp2,add
l2584:
	jmp l2581
l2580:
	push "vtmp2"
	push $2
	cthis expectvec
	cmp0
	je l2586
	push $5
	ret
l2586:
	jmp l2577
l2576:
	push 1
	popax
	sub 0,$a
	end method
	method expectvec
	localstring $1
	localint $2
	pop $2
	pop $1
	push 0
	pop id
	push "vtmp1"
	push $2
	cthis gettoken
	push $1
	call vtmp1,veceq
	end method
	method expects
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call vtmp2,vecbuildfromstring
	push "vtmp2"
	push $3
	cthis expectvec
	end method
	method consts=
	push "addbegin"
	call vconsts,withlist
	end method
	method setas
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlex"
	push "buildlex"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlex
	push $1
	spushs
	push "start"
	push "Lexer0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "notend"
	push "Lexer1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getnext"
	push "Lexer2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "next"
	push "Lexer3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "check"
	push "Lexer4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "ischar"
	push "Lexer5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isint"
	push "Lexer6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isreal"
	push "isreal"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbinary"
	push "Lexer7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isident"
	push "isident"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isconst"
	push "isconst"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "_isvar"
	push "_isvar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "read"
	push "Lexer8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isliteral"
	push "isliteral"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettoken"
	push "gettoken"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expects"
	push "expects"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectvec"
	push "expectvec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectdb"
	push "expectdb"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "consts="
	push "consts="
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setliteralchar"
	push "setliteralchar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getliteralchar"
	push "getliteralchar"
	spop $a
	call [$a],addmethod
	end method
	method Lexer0
	localstring $1
	pop $1
	push $1
	cthis set
	push 0
	pop id
	end method
	method Lexer1
	push id
	cthis length
	cmpjl
	end method
	method Lexer2
	push id
	cthis length
	cmpje
	cmp0
	je l2588
	push "null"
	ret
l2588:
	add id,1
	pop id
	push id
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	cthis getb
	end method
	method Lexer3
	call found,length
	popax
	add id,$a
	pop id
	end method
	method Lexer4
	push id
	cthis length
	cmpje
	cmp0
	je l2590
	push "null"
	ret
l2590:
	push id
	push 1
	cthis getb
	pop found
	push found
	end method
	method Lexer5
	localstring $1
	pop $1
	push id
	push 1
	cthis getb
	call $1,contains
	end method
	method Lexer6
	push BYTE0
	push BYTE9
	cthis _isvar
	end method
	method Lexer7
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis _isvar
	end method
	method Lexer8
	cthis next
	push found
	end method
	end class

	class AnimaFx
	method init
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "_buildanfx"
	push "AnimaFx0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_buildanfx
	push $1
	spushs
	push "onsetframe"
	push "AnimaFx1"
	spop $a
	call [$a],addmethod
	end method
	method AnimaFx0
	new db,dbsnd
	push 3
	call dbsnd,dbbuild
	localint $1
	push 0
	pop $1
l2591:
	push $1
	call dbsnd,getrowsno
	cmpjl
	cmp0
	je l2592
	jmp l2594
l2593:
	add $1,1
	pop $1
	jmp l2591
l2594:
	push $1
	push 0
	push $1
	push 0
	call dbsnd,get
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	call dbsnd,set
	jmp l2593
l2592:
	end method
	method AnimaFx1
	localdef $1
	cthis actionname
	push "_"
	pop $b
	popax
	add $a,$b
	cthis framenr
	pop $b
	popax
	add $a,$b
	call dbsnd,findbyrow
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l2596
	push "fx"
	push $1
	push 2
	call dbsnd,get
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
l2596:
	end method
	end class

	class Localize
	method init
	end method
	method _lang_db
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push "load"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	cthis lang_path
	push ".db"
	pop $b
	popax
	add $a,$b
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method lang_db
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push ""
	cthis _lang_db
	end method
	method lang_dbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "script"
	cthis _lang_db
	end method
	method lang_dbbeh
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "beh"
	cthis _lang_db
	end method
	method lang_path
	localstring $1
	pop $1
	push LANGDIR
	call gameapi,getgamename
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	end class

	class PyzCounter
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	new int,istart
	new int,istop
	new int,istep
	new int,idigits
	push 50
	pop idigits
	new int,iactual
	new string,_sanima
	push $1
	pop _sanima
	push A
	push "idx"
	push 2
	push "itimestep"
	push $2
	cthis vars2
	new gmimgvec,grcnt
	localint $3
	push 0
	pop $3
l2597:
	push $3
	push idigits
	cmpjl
	cmp0
	je l2598
	jmp l2600
l2599:
	add $3,1
	pop $3
	jmp l2597
l2600:
	localstring $4
	push "pcc"
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $1
	push $4
	cthis copyanima
	push $4
	spushs
	spop $a
	call [$a],hide
	push $4
	call grcnt,add
	jmp l2599
l2598:
	push "timcnt"
	push $2
	push "PyzCounter0"
	cthis timer=
	end method
	method PyzCounter0
	push istep
	popax
	add iactual,$a
	pop iactual
	push iactual
	cthis view
	push iactual
	push istop
	cmpje
	cmp0
	je l2602
	cthis getbuildername
	spushs
	cthis getbuildername
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2601
l2602:
	cthis play
l2601:
	end method
	method getcypher
	localint $1
	pop $1
	push "pcc"
	push _sanima
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method start
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop istart
	push $2
	pop istop
	push $3
	pop istep
	push istart
	pop iactual
	push istart
	cthis view
	call timcnt,play
	end method
	method showcypher
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis getcypher
	pop $3
	push $3
	spushs
	push 0
	push $2
	spop $a
	call [$a],setframe
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method stop
	push 0
	call timcnt,stop
	end method
	method view
	localint $1
	pop $1
	call grcnt,hide
	push 0
	push 0
	call grcnt,setpos
	push $1
	push 0
	cmpje
	cmp0
	je l2604
	push 0
	push 0
	cthis showcypher
	jmp l2603
l2604:
	localint $2
	push 0
	pop $2
l2605:
	push $1
	push 0
	cmpja
	cmp0
	je l2606
	jmp l2608
l2607:
	add $2,1
	pop $2
	jmp l2605
l2608:
	push $2
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	push $d
	cthis showcypher
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	jmp l2607
l2606:
	localint $3
	push 0
	pop $3
	localint $4
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l2609:
	push $4
	push 0
	cmpjae
	cmp0
	je l2610
	jmp l2612
l2611:
	sub $4,1
	pop $4
	jmp l2609
l2612:
	push $4
	cthis getcypher
	spushs
	push $3
	push 0
	spop $a
	call [$a],move
	push $3
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis getcypher
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l2611
l2610:
l2603:
	end method
	end class

	method setasanmover
	new real,_r_roadx
	new real,_r_roady
	push "movereal"
	push "global22"
	cthis addmethod
	end method
	method global22
	localreal $1
	localreal $2
	pop $2
	pop $1
	push $1
	popax
	add _r_roadx,$a
	pop _r_roadx
	push $2
	popax
	add _r_roady,$a
	pop _r_roady
	push _r_roadx
	push _r_roady
	cthis move
	call _r_roadx,to_i
	popax
	sub _r_roadx,$a
	pop _r_roadx
	call _r_roady,to_i
	popax
	sub _r_roady,$a
	pop _r_roady
	end method
	class AnMover
	method init
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	new timer,tmov
	push 1
	call tmov,settick
	push 1
	call tmov,setcycle
	push A
	push "rdx"
	push $2
	push "rdy"
	push $3
	cthis vars2
	new real,rsx
	push 0
	pop rsx
	new real,rsy
	push 0
	pop rsy
	new string,sanima
	push $1
	pop sanima
	push "onfinish"
	push "AnMover0"
	call tmov,addmethod
	end method
	method AnMover0
	cthis move
	push "_finish"
	cthis builder_func
	cthis play
	end method
	method move
	push rdx
	popax
	add rsx,$a
	pop rsx
	push rdy
	popax
	add rsy,$a
	pop rsy
	localint $1
	push rsx
	pop $1
	localint $2
	push rsy
	pop $2
	push $1
	cmp0
	jne l2615
	push $2
	jmp l2616
l2614:
	push 0
	jmp l2616
l2615:
	push 1
l2616:
	cmp0
	je l2617
	push sanima
	spushs
	push $1
	push $2
	spop $a
	call [$a],move
	push $1
	popax
	sub rsx,$a
	pop rsx
	push $2
	popax
	sub rsy,$a
	pop rsy
l2617:
	end method
	method reset
	push 0
	pop rsx
	push 0
	pop rsy
	end method
	method play
	cthis reset
	call tmov,play
	end method
	method stop
	push 0
	call tmov,stop
	end method
	method enableroll
	cthis getname
	push "_finish"
	pop $b
	popax
	add $a,$b
	push "AnMover1"
	cthis addmethod
	end method
	method AnMover1
	push 0
	push 0
	cthis roll
	end method
	method roll
	localint $1
	localint $2
	pop $2
	pop $1
	push rdx
	push 0
	cmpjl
	cmp0
	je l2619
	push sanima
	spushs
	spop $a
	call [$a],getex
	push 0
	cmpjl
	jmp l2621
l2619:
	push 0
	jmp l2621
l2620:
	push 1
l2621:
	cmp0
	je l2622
	push sanima
	spushs
	push igmappw
	push $1
	pop $b
	popax
	add $a,$b
	push sanima
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],ansetbpos
	jmp l2618
l2622:
	push rdx
	push 0
	cmpja
	cmp0
	je l2624
	push sanima
	spushs
	spop $a
	call [$a],getpx
	push igmappw
	cmpjae
	jmp l2626
l2624:
	push 0
	jmp l2626
l2625:
	push 1
l2626:
	cmp0
	je l2627
	push sanima
	spushs
	push $1
	push sanima
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push sanima
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],ansetbpos
l2627:
l2618:
	push rdy
	push 0
	cmpjl
	cmp0
	je l2629
	push sanima
	spushs
	spop $a
	call [$a],getey
	push 0
	cmpjl
	jmp l2631
l2629:
	push 0
	jmp l2631
l2630:
	push 1
l2631:
	cmp0
	je l2632
	push sanima
	spushs
	push sanima
	spushs
	spop $a
	call [$a],getpx
	push igmapph
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	jmp l2628
l2632:
	push rdy
	push 0
	cmpja
	cmp0
	je l2634
	push sanima
	spushs
	spop $a
	call [$a],getpy
	push igmapph
	cmpjae
	jmp l2636
l2634:
	push 0
	jmp l2636
l2635:
	push 1
l2636:
	cmp0
	je l2637
	push sanima
	spushs
	push sanima
	spushs
	spop $a
	call [$a],getpx
	push $2
	push sanima
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],ansetbpos
l2637:
l2628:
	end method
	end class

	method SetAnMover_tmov_onfinish
	cthis getbuildername
	spushs
	spop $a
	call [$a],sam_move
	cthis play
	end method
	class SetAnMover
	method init
	end method
	method setas
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "setanmover"
	push "setanmover"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],setanmover
	push $1
	spushs
	push "sam_move"
	push "sam_move"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_copy"
	push "sam_copy"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_addtimer"
	push "SetAnMover0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_playtimer"
	push "SetAnMover1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "sam_stoptimer"
	push "SetAnMover2"
	spop $a
	call [$a],addmethod
	end method
	method SetAnMover0
	new timer,tmov
	push 1
	call tmov,settick
	push 1
	call tmov,setcycle
	push "onfinish"
	push "SetAnMover_tmov_onfinish"
	call tmov,addmethod
	end method
	method SetAnMover1
	call tmov,play
	end method
	method SetAnMover2
	push 0
	call tmov,stop
	end method
	method setanmover
	localreal $1
	localreal $2
	pop $2
	pop $1
	new real,rdx
	push $1
	pop rdx
	new real,rdy
	push $2
	pop rdy
	new real,rsx
	push 0
	pop rsx
	new real,rsy
	push 0
	pop rsy
	push A
	push "sam_speed"
	push 1.0
	push "moved_x"
	push 0
	push "moved_y"
	push 0
	cthis vars2
	end method
	method sam_move
	push rdx
	push sam_speed
	pop $b
	popax
	mul $a,$b
	popax
	add rsx,$a
	pop rsx
	push rdy
	push sam_speed
	pop $b
	popax
	mul $a,$b
	popax
	add rsy,$a
	pop rsy
	push rsx
	pop moved_x
	push rsy
	pop moved_y
	push moved_x
	cmp0
	jne l2640
	push moved_y
	jmp l2641
l2639:
	push 0
	jmp l2641
l2640:
	push 1
l2641:
	cmp0
	je l2642
	push moved_x
	push moved_y
	cthis move
	push moved_x
	popax
	sub rsx,$a
	pop rsx
	push moved_y
	popax
	sub rsy,$a
	pop rsy
	push "ansamcopy"
	cthis hasvar
	cmp0
	je l2644
	push moved_x
	push moved_y
	call ansamcopy,move
	push rdx
	push 0.0
	cmpja
	cmp0
	je l2646
	call ansamcopy,getpx
	push rollerx
	cmpja
	cmp0
	je l2648
	localdef $1
	call ansamcopy,getpx
	cthis getw
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	call ansamcopy,move
	push $1
	push 0
	cthis move
l2648:
	jmp l2645
l2646:
	call ansamcopy,getex
	push rollerex
	cmpjl
	cmp0
	je l2650
	cthis getw
	push 0
	cthis move
	cthis getw
	push 0
	call ansamcopy,move
l2650:
l2645:
l2644:
l2642:
	end method
	method sam_copy
	cthis gettype
	push "anima"
	cmpje
	cmp0
	je l2652
	cthis getname
	push "ansamcopy"
	cthis copyanima
	jmp l2651
l2652:
	new img,ansamcopy
	cthis getname
	call ansamcopy,copy
l2651:
	call ansamcopy,buildfullname
	push A
	push "rollerx"
	push 0
	push "rollerex"
	push igmappw
	push "get_sam_copy"
	call ansamcopy,getfullname
	cthis vars2
	call ansamcopy,show
	push rdx
	push 0.0
	cmpja
	cmp0
	je l2654
	cthis getpx
	cthis getw
	pop $b
	popax
	sub $a,$b
	cthis getpy
	call ansamcopy,ansetbpos
	jmp l2653
l2654:
	cthis getex
	cthis getpy
	call ansamcopy,ansetbpos
l2653:
	end method
	end class

	class classlives
	method init
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	localint $13
	localint $14
	localstring $15
	pop $15
	pop $14
	pop $13
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new int,iside
	push $15
	push "left"
	cmpje
	cmp0
	je l2656
	push 1
	popax
	sub 0,$a
	pop iside
	jmp l2655
l2656:
	push 1
	pop iside
l2655:
	new int,iilezyc
	push $1
	pop iilezyc
	new int,ibum
	push $2
	pop ibum
	localint $16
	push iilezyc
	push ibum
	pop $b
	popax
	mul $a,$b
	pop $16
	new int,iposxsila
	push $3
	pop iposxsila
	new int,iendxsila
	push $3
	push $16
	pop $b
	popax
	add $a,$b
	pop iendxsila
	new int,iposysila
	push $4
	pop iposysila
	push "imgsilapodkladka"
	push $16
	push $5
	push $6
	push $7
	push $8
	push $9
	push $14
	push 1
	pop $b
	popax
	sub $a,$b
	clparent newvars,newcanvas
	push "imgsila"
	push $16
	push $5
	push $10
	push $11
	push $12
	push $13
	push $14
	clparent newvars,newcanvas
	push iposxsila
	push iposysila
	call imgsila,setpos
	push iposxsila
	push 0
	call imgsila,getex
	push 600
	call imgsila,clip
	push iposxsila
	push iposysila
	call imgsilapodkladka,setpos
	end method
	method reset
	push iposxsila
	push iposysila
	call imgsila,setpos
	end method
	method damage
	localint $1
	pop $1
	push iside
	push $1
	pop $b
	popax
	mul $a,$b
	push ibum
	pop $b
	popax
	mul $a,$b
	push 0
	call imgsila,move
	end method
	method destroyed
	push iside
	push 0
	cmpjl
	cmp0
	je l2658
	call imgsila,getex
	push iposxsila
	cmpjl
	ret
l2658:
	call imgsila,getpx
	push iendxsila
	cmpja
	ret
	end method
	method heal
	localint $1
	pop $1
	push iside
	popax
	sub 0,$a
	push $1
	pop $b
	popax
	mul $a,$b
	push ibum
	pop $b
	popax
	mul $a,$b
	push 0
	call imgsila,move
	push iside
	push 0
	cmpja
	cmp0
	je l2660
	call imgsila,getpx
	push iposxsila
	cmpjl
	cmp0
	je l2662
	push iposxsila
	push iposysila
	call imgsila,setpos
l2662:
	jmp l2659
l2660:
	call imgsila,getpx
	push iposxsila
	cmpja
	cmp0
	je l2664
	push iposxsila
	push iposysila
	call imgsila,setpos
l2664:
l2659:
	end method
	end class

	class imganima
	parent gmimgvec
	method init
	clparent gmimgvec,init
	new int,idgran
	push 0
	pop idgran
	new timer,timan
	push 1
	call timan,settick
	push "onfinish"
	push "imganima0"
	call timan,addmethod
	end method
	method imganima0
	add idgran,1
	pop idgran
	localdef $1
	cthis getbuildername
	pop $1
	push idgran
	push $1
	spushs
	spop $a
	call [$a],size
	cmpje
	cmp0
	je l2666
	push $1
	spushs
	push $1
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2665
l2666:
	push idgran
	cthis setframe
	push $1
	spushs
	push $1
	push "_endframe"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l2665:
	end method
	method load
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $5
	call timan,setcycle
	localint $6
	push $3
	pop $6
l2667:
	push $6
	push $4
	cmpjl
	cmp0
	je l2668
	jmp l2670
l2669:
	add $6,1
	pop $6
	jmp l2667
l2670:
	localdef $7
	push $1
	push $6
	pop $b
	popax
	add $a,$b
	pop $7
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	push $7
	push "."
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	push 0
	cthis newimg
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l2669
l2668:
	push 0
	cthis setframe
	end method
	method play
	push 0
	cthis setframe
	call timan,play
	end method
	method setframe
	localint $1
	pop $1
	cthis hide
	push $1
	pop idgran
	push $1
	cthis get
	spushs
	spop $a
	call [$a],show
	end method
	end class

	class GuiItem
	method init
	end method
	method setasrototaker
	localstring $1
	localreal $2
	localreal $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push "_setasrototaker"
	push "GuiItem0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],_setasrototaker
	push $1
	spushs
	push "rototaker_start"
	push "rototaker_start"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_startwh"
	push "rototaker_startwh"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_startact"
	push "rototaker_startact"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_setroto"
	push "rototaker_setroto"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rototaker_endroto"
	push "GuiItem2"
	spop $a
	call [$a],addmethod
	end method
	method GuiItem0
	localdef $1
	localdef $2
	pop $2
	pop $1
	push A
	push "ilerotos"
	push $1
	push "idrotos"
	push 0.0
	push "ikatos"
	push $2
	push 360.0
	pop $b
	popax
	mul $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	psax
	push "rzoomx"
	push 0.0
	push "rzoomy"
	push 0.0
	push "rzoomstepx"
	push 0.0
	push "rzoomstepy"
	push 0.0
	push "rmovx"
	push 0.0
	push "rmovy"
	push 0.0
	push "istartalfa"
	push 128
	push "iendx"
	push 0.0
	push "iendy"
	push 0.0
	push "irotodir"
	push 1
	push "izoomdir"
	push 0
	cthis vars2
	new filter,ftroto
	push 2
	call ftroto,setpivottype
	new timer,timrotocenter
	push 1
	call timrotocenter,setcycle
	push "onfinish"
	push "GuiItem1"
	call timrotocenter,addmethod
	end method
	method GuiItem1
	cthis getbuildername
	spushs
	spop $a
	call [$a],rototaker_setroto
	cmp0
	je l2672
	cthis play
l2672:
	end method
	method GuiItem2
	push "rototaker_"
	cthis getname
	pop $b
	popax
	add $a,$b
	push "_endroto"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method rototaker_setroto
	push izoomdir
	cmp0
	je l2674
	localdef $1
	push idrotos
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	localdef $2
	push rzoomx
	push rzoomstepx
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $2
	localdef $3
	push rzoomy
	push rzoomstepy
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $3
	push irotodir
	push ikatos
	pop $b
	popax
	mul $a,$b
	push $2
	push $3
	call ftroto,rotatezoomxy
	jmp l2673
l2674:
	localdef $1
	push ilerotos
	push idrotos
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	push rzoomx
	push rzoomstepx
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $2
	localdef $3
	push rzoomy
	push rzoomstepy
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	pop $3
	push irotodir
	push ikatos
	pop $b
	popax
	mul $a,$b
	push $2
	push $3
	call ftroto,rotatezoomxy
	push idrotos
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop $1
l2673:
	push istartalfa
	push 255
	cmpjl
	cmp0
	je l2676
	localreal $4
	push istartalfa
	pop $4
	push $4
	push 255.0
	push $4
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call ftroto,setopacity
l2676:
	localreal $5
	push iendx
	cthis getposx
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	pop $5
	localreal $6
	push iendy
	cthis getposy
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	mul $a,$b
	pop $6
	push $5
	push $6
	cthis move
	add idrotos,1
	pop idrotos
	push idrotos
	push ilerotos
	cmpjl
	cmp0
	je l2678
	push 1
	jmp l2677
l2678:
	call ftroto,unlink
	cthis rototaker_endroto
	push 0
l2677:
	end method
	method rototaker_startact
	localint $1
	localint $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call $3,gettype
	push "string"
	cmpjne
	cmp0
	je l2680
	push $3
	cthis nameofaction
	pop $4
	jmp l2679
l2680:
	push $3
	pop $4
l2679:
	cthis getpx
	cthis getpy
	push $1
	push $2
	cthis getw
	cthis geth
	push $4
	cthis rototaker_start
	end method
	method rototaker_start
	localint $1
	localint $2
	localint $3
	localint $4
	localreal $5
	localreal $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	push 0
	cthis setframe
	push $1
	push $2
	cthis setpos
	push $3
	push $4
	push $5
	push $6
	cthis getw
	cthis geth
	cthis rototaker_startwh
	end method
	method rototaker_startwh
	localint $1
	localint $2
	localreal $3
	localreal $4
	localreal $5
	localreal $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop iendx
	push $2
	pop iendy
	push $1
	cthis getcx
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rmovx
	push $2
	cthis getcy
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rmovy
	push $5
	push $3
	cmpja
	cmp0
	je l2682
	push $3
	push $5
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomx
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	push $5
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepx
	push 1
	pop izoomdir
	jmp l2681
l2682:
	push 0
	pop izoomdir
	push $5
	push $3
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomx
	push 1.0
	push rzoomx
	pop $b
	popax
	sub $a,$b
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepx
l2681:
	push $6
	push $4
	cmpja
	cmp0
	je l2684
	push $4
	push $6
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomy
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	push $6
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepy
	jmp l2683
l2684:
	push $6
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomy
	push 1.0
	push rzoomy
	pop $b
	popax
	sub $a,$b
	push ilerotos
	pop $b
	popax
	div $a,$b
	psax
	pop rzoomstepy
l2683:
	cthis getname
	call ftroto,link
	push 0
	pop idrotos
	cthis rototaker_setroto
	cmp0
	je l2686
	call timrotocenter,play
l2686:
	end method
	end class

	class CalcFPS
	method init
	new real,rfps1
	new real,rfps2
	new real,rfps3
	new real,rsec
	push 1000.0
	pop rsec
	new real,rstart
	push 1.0
	pop rstart
	push "tickfps"
	push "CalcFPS0"
	cthis cycle=
	end method
	method CalcFPS0
	cthis getbuildername
	spushs
	spop $a
	call [$a],tick
	cthis play
	end method
	method stdset
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	cthis stdfont
	cthis white
	push $2
	push $3
	push 1000
	cthis set
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "txtfps"
	push 0
	push $1
	push $2
	push $3
	push $4
	cthis newtext
	push $7
	call txtfps,setz
	push $5
	push $6
	cthis setpos
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txtfps,setpos
	end method
	method tick
	localreal $1
	call engine,getticks
	pop $1
	push $1
	push rstart
	cmpja
	cmp0
	je l2688
	push rfps2
	pop rfps1
	push rfps3
	pop rfps2
	push rsec
	push $1
	push rstart
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop rfps3
	push "delay: "
	push $1
	push rstart
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push " fps: "
	pop $b
	popax
	add $a,$b
	push rfps1
	push rfps2
	pop $b
	popax
	add $a,$b
	push rfps3
	pop $b
	popax
	add $a,$b
	push 3
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	call txtfps,txtset
	jmp l2687
l2688:
	push "inf"
	call txtfps,txtset
l2687:
	push $1
	pop rstart
	end method
	method play
	call tickfps,play
	end method
	method stop
	push 0
	call tickfps,stop
	end method
	end class

	class Film
	parent gfxObject
	method init
	new img,imfilm
	call imfilm,buildfullname
	push "imfilm"
	clparent gfxObject,init
	new string,sfilmpath
	new db,dbfilm
	new db,dbfilm2
	new int,istartklatka
	new int,iklatka
	new int,iendklatka
	new string,sprefilm
	new int,ifilmcycle
	new string,smusic
	new int,igameloopdelay
	push igmdelay
	pop igameloopdelay
	new gmobjvec,grsfx
	new gmimgvec,grbuf
	push A
	push "bcenter"
	push 0
	push "bborders"
	push 0
	push "musicclass"
	push "null"
	push "bbuffer"
	push 0
	push "sfileformat"
	push "jpg"
	cthis vars2
	push "timfilm"
	push "Film0"
	cthis cycle=
	end method
	method Film0
	cthis nextframe
	push iklatka
	push iendklatka
	cmpjle
	cmp0
	je l2690
	call timfilm,play
	jmp l2689
l2690:
	cthis retfps
	localdef $1
	cthis getbuildername
	pop $1
	push $1
	spushs
	push "onfinish"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2692
	push $1
	spushs
	spop $a
	call [$a],onfinish
l2692:
l2689:
	end method
	method bufferfilm
	end method
	method retfps
	push igameloopdelay
	call engine,setloopdelay
	end method
	method setfilmfps
	call engine,getloopdelay
	pop igameloopdelay
	localint $1
	push "fps:"
	call dbfilm,dbgetint
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l2694
	push $1
	call engine,setfps
l2694:
	end method
	method setcycle
	localint $1
	pop $1
	push $1
	call timfilm,setcycle
	push $1
	pop ifilmcycle
	end method
	method nextframe
	push "film_onsetframe_"
	push iklatka
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	cthis loadframe
	add iklatka,1
	pop iklatka
	end method
	method loadframe
	localdef $1
	push iklatka
	call dbfilm,findbyrow
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l2696
	localint $2
	push 1
	pop $2
l2697:
	push $2
	push $1
	call dbfilm,getcolsno
	cmpjl
	cmp0
	je l2698
	jmp l2700
l2699:
	add $2,1
	pop $2
	jmp l2697
l2700:
	push $1
	push $2
	call dbfilm,get
	spushs
	push "fadeout:"
	cmpst
	jne l2702
	spop $a
	add $2,1
	pop $2
	push musicclass
	push "null"
	cmpjne
	cmp0
	je l2704
	push musicclass
	spushs
	push $1
	push $2
	call dbfilm,get
	spop $a
	call [$a],fadeout
l2704:
	jmp l2701
l2702:
	spop $a
	localdef $3
	push $1
	push $2
	call dbfilm,get
	pop $3
	push $3
	spushs
	push "volume_"
	push $1
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	call dbfilm,[$d]
	spop $a
	call [$a],setvol
	push $3
	spushs
	spop $a
	call [$a],play
l2701:
	jmp l2699
l2698:
l2696:
	localdef $4
	call imfilm,getz
	pop $4
	localdef $5
	call imfilm,getpx
	pop $5
	localdef $6
	call imfilm,getpy
	pop $6
	push bbuffer
	cmp0
	je l2706
	localdef $3
	push iklatka
	push istartklatka
	pop $b
	popax
	sub $a,$b
	call grbuf,get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],createfrombuffer
	push $3
	call imfilm,copy
	push $3
	spushs
	spop $a
	call [$a],hide
	call imfilm,show
	push iklatka
	push istartklatka
	cmpja
	cmp0
	je l2708
	push iklatka
	push istartklatka
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuf,get
	spushs
	spop $a
	call [$a],free
l2708:
	jmp l2705
l2706:
	push sfilmpath
	push sprefilm
	pop $b
	popax
	add $a,$b
	push iklatka
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push sfileformat
	pop $b
	popax
	add $a,$b
	call imfilm,load
	call imfilm,show
l2705:
	push $4
	call imfilm,setz
	push bcenter
	cmp0
	je l2710
	push igmappw
	call imfilm,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push igmapph
	call imfilm,geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call imfilm,setpos
	jmp l2709
l2710:
	push $5
	push $6
	call imfilm,setpos
l2709:
	end method
	method playfilm
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis load
	cthis play
	end method
	method load
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis isplaying
	cmp0
	je l2712
	cthis free
l2712:
	push $1
	pop sfilmpath
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	push ".db"
	pop $b
	popax
	add $a,$b
	call dbfilm,load
	push "start:"
	call dbfilm,dbgetint
	pop istartklatka
	push istartklatka
	pop iklatka
	push "end:"
	call dbfilm,dbgetint
	pop iendklatka
	push "prefix:"
	call dbfilm,dbget
	pop sprefilm
	push "music:"
	call dbfilm,dbget
	pop smusic
	localdef $3
	push "format:"
	call dbfilm,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l2714
	push $3
	push 1
	call dbfilm,get
	pop sfileformat
l2714:
	push "buffer:"
	call dbfilm,dbgetint
	pop bbuffer
	push bbuffer
	cmp0
	je l2716
	localint $4
	push istartklatka
	pop $4
l2717:
	push $4
	push iendklatka
	cmpjle
	cmp0
	je l2718
	jmp l2720
l2719:
	add $4,1
	pop $4
	jmp l2717
l2720:
	localdef $5
	push "imbuf"
	push $4
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new img,[$e]
	push $5
	spushs
	push sfilmpath
	push sprefilm
	pop $b
	popax
	add $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push sfileformat
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],loadbuffer
	push $5
	call grbuf,add
	jmp l2719
l2718:
l2716:
	localint $4
	push 0
	pop $4
l2721:
	push $4
	call dbfilm,getrowsno
	cmpjl
	cmp0
	je l2722
	jmp l2724
l2723:
	add $4,1
	pop $4
	jmp l2721
l2724:
	localdef $5
	push $4
	push 0
	call dbfilm,get
	pop $5
	push $5
	clparent StringChecker,isdigit
	cmp0
	je l2726
	localint $6
	push 1
	pop $6
l2727:
	push $6
	push $4
	call dbfilm,getcolsno
	cmpjl
	cmp0
	je l2728
	jmp l2730
l2729:
	add $6,1
	pop $6
	jmp l2727
l2730:
	localdef $7
	push $4
	push $6
	call dbfilm,get
	pop $7
	push $7
	spushs
	push "fadeout:"
	cmpst
	jne l2732
	spop $a
	add $6,1
	pop $6
	jmp l2731
l2732:
	spop $a
	push "fx"
	push " "
	call $7,strgetto
	pop $b
	popax
	add $a,$b
	pop $5
	localint $8
	push 100
	pop $8
	push $5
	cthis hasvar
	neg
	cmp0
	je l2734
	push $7
	cthis sfx=
	push $5
	spushs
	spop $a
	call [$a],getvol
	pop $8
	jmp l2733
l2734:
	push " "
	call $7,contains
	cmp0
	je l2736
	push " "
	call $7,strgetfrom
	pop $8
l2736:
l2733:
	push "volume_"
	push $4
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $6
	pop $b
	popax
	add $a,$b
	push $8
	call dbfilm,var2
	push $4
	push $6
	push $5
	call dbfilm,set
	push $5
	call grsfx,addonce
l2731:
	jmp l2729
l2728:
l2726:
	jmp l2723
l2722:
	end method
	method loadborders
	push bborders
	cmp0
	je l2738
	push "imramkaup"
	cthis hasvar
	neg
	jmp l2740
l2738:
	push 0
	jmp l2740
l2739:
	push 1
l2740:
	cmp0
	je l2741
	new img,imramkaup
	new img,imramkadown
	new img,imramkaleft
	new img,imramkaright
	localint $1
	push 0.5
	push igmapph
	call imfilm,geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $1
	localdef $2
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $1
	push 0
	cmpja
	cmp0
	je l2743
	push igmappw
	push $1
	cthis black
	push 255
	call imramkaup,create
	push $2
	call imramkaup,setz
	push "imramkaup"
	call imramkadown,copy
	push 0
	push igmapph
	push $1
	pop $b
	popax
	sub $a,$b
	call imramkadown,setpos
l2743:
	localint $3
	push 0.5
	push igmappw
	call imfilm,getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push 2.0
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l2745
	push $3
	push igmapph
	cthis black
	push 255
	call imramkaleft,create
	push $2
	call imramkaleft,setz
	push "imramkaleft"
	call imramkaright,copy
	push igmappw
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	call imramkaright,setpos
l2745:
l2741:
	end method
	method play
	push istartklatka
	pop iklatka
	cthis nextframe
	cthis loadborders
	push smusic
	push "null"
	cmpjne
	cmp0
	je l2747
	push musicclass
	push "null"
	cmpjne
	jmp l2749
l2747:
	push 0
	jmp l2749
l2748:
	push 1
l2749:
	cmp0
	je l2750
	push musicclass
	spushs
	push smusic
	spop $a
	call [$a],playstr
l2750:
	cthis setfilmfps
	call timfilm,play
	end method
	method free
	call imfilm,free
	localint $1
	push 0
	pop $1
l2751:
	push $1
	call grsfx,size
	cmpjl
	cmp0
	je l2752
	jmp l2754
l2753:
	add $1,1
	pop $1
	jmp l2751
l2754:
	push $1
	call grsfx,get
	spushs
	spop $d
	delete [$d]
	jmp l2753
l2752:
	push 0
	pop $1
l2755:
	push $1
	call grbuf,size
	cmpjl
	cmp0
	je l2756
	jmp l2758
l2757:
	add $1,1
	pop $1
	jmp l2755
l2758:
	push $1
	call grbuf,get
	spushs
	spop $d
	delete [$d]
	jmp l2757
l2756:
	call grbuf,free
	call grsfx,free
	cthis retfps
	end method
	method showframe
	localint $1
	pop $1
	push $1
	push istartklatka
	cmpjl
	cmp0
	je l2760
	push istartklatka
	pop $1
	jmp l2759
l2760:
	push $1
	push iendklatka
	cmpja
	cmp0
	je l2762
	push iendklatka
	pop $1
l2762:
l2759:
	push $1
	pop iklatka
	cthis loadframe
	end method
	method showfirstframe
	push istartklatka
	cthis showframe
	end method
	method showlastframe
	push iendklatka
	cthis showframe
	end method
	method isplaying
	call timfilm,isplaying
	end method
	method stop
	localint $1
	pop $1
	cthis retfps
	push $1
	cmp0
	je l2764
	push iendklatka
	pop iklatka
l2764:
	push $1
	call timfilm,stop
	end method
	method getimg
	call imfilm,getfullname
	end method
	end class

	new snd,_fx_pocket
	push "sounds/sfx/harfa.wav"
	call _fx_pocket,load
	new snd,sndfxmoveonms
	push "sounds/sfx/butmoveon.ogg"
	call sndfxmoveonms,load
	push 30
	call sndfxmoveonms,setvol
	new snd,sndfxmoveon2
	push "sounds/sfx/butmoveon2.ogg"
	call sndfxmoveon2,load
	push 50
	call sndfxmoveon2,setvol
	new snd,sndfxbutclick1
	push "sounds/sfx/butclick1.ogg"
	call sndfxbutclick1,load
	push 50
	call sndfxbutclick1,setvol
	class GUI
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	push "sGui"
	push $1
	cthis var2
	push $1
	push "null"
	cmpjne
	cmp0
	je l2766
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	jmp l2768
l2766:
	push 0
	jmp l2768
l2767:
	push 1
l2768:
	cmp0
	je l2769
	push $1
	spushs
	spop $e
	new Button,[$e]
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	spushs
	push $1
	push "_lclick"
	pop $b
	popax
	add $a,$b
	push "GUI0"
	spop $a
	call [$a],addmethod
l2769:
	new int,istdwidth
	push 20
	spushs
	spop $h
	call $h,igetsc
	pop istdwidth
	new gmobjvec,grouter
	new Color,wndcol
	push 239
	cthis grey
	push 255
	call wndcol,set
	new Color,wndconcave
	push 199
	cthis grey
	push 255
	call wndconcave,set
	new Color,wndact
	push 103
	push 141
	push 178
	push 255
	call wndact,set
	new Color,wndtextcol
	cthis white
	push 255
	call wndtextcol,set
	new Color,wndborder
	cthis black
	push 255
	call wndborder,set
	new Color,wndborderL
	cthis white
	push 255
	call wndborderL,set
	new int,bround
	push 0
	pop bround
	new Color,wndshadow
	cthis black
	push 128
	call wndshadow,set
	new Color,wndbar
	push 60
	push 132
	push 204
	push 255
	call wndbar,set
	new Color,wndbarb
	push 32
	push 71
	push 110
	push 255
	call wndbarb,set
	push A
	push "iwndshadow"
	push 1
	push "swndshadow"
	push "0110"
	push "ititlebar"
	push 1.5
	push $2
	pop $b
	popax
	mul $a,$b
	spushs
	spop $h
	call $h,to_i
	push "ibar"
	push 4
	spushs
	spop $h
	call $h,igetsc1
	push "iytextlength"
	push 2
	spushs
	spop $h
	call $h,igetsc1
	push "istdfont"
	push $2
	push "iwndborder"
	push 1
	push "setstdfont"
	push sgmfontfile
	push "setmonofont"
	push sgmfontmono
	cthis vars2
	new font,stdfont
	call stdfont,buildfullname
	new font,stdmonofont
	call stdmonofont,buildfullname
	new int,monowidth
	push $2
	cthis setfontsize
	new Color,fontcol
	cthis black
	push 255
	call fontcol,set
	new font,stitlefont
	push sgmfontbold
	push istdfont
	call stitlefont,load
	new Color,titlecol
	cthis white
	push 255
	call titlecol,set
	new img,imgquit
	push istdwidth
	push istdwidth
	push 93
	push 152
	push 211
	push 255
	call imgquit,create
	push 1
	call wndbarb,get
	call imgquit,imgroundborder
	call imgquit,hide
	new img,imgquitact
	push istdwidth
	push istdwidth
	push 143
	push 202
	push 251
	push 255
	call imgquitact,create
	push 1
	cthis white
	push 128
	call imgquitact,imgroundborder
	call imgquitact,hide
	new string,squit
	cthis getname
	push "quit"
	pop $b
	popax
	add $a,$b
	pop squit
	push squit
	call imgquit,addtogamevars
	push squit
	push "act"
	pop $b
	popax
	add $a,$b
	call imgquitact,addtogamevars
	new img,im3
	push 2
	push 2
	call wndbarb,get
	call im3,create
	push 1
	call imgquit,drawX
	push 1
	call imgquitact,drawX
	push 2
	push 2
	cthis white
	push 255
	call im3,create
	push 0
	call imgquit,drawX
	push 0
	call imgquitact,drawX
	push "arrowleft"
	push "null"
	push istdwidth
	push istdwidth
	push 0
	cthis buildguibut
	push "arrowleftact"
	push "null"
	push istdwidth
	push istdwidth
	push 1
	cthis buildguibut
	push "arrowright"
	push "imgarrowleft"
	push 0
	push 0
	push 0
	cthis buildguibut
	push "arrowrightact"
	push "imgarrowleftact"
	push 0
	push 0
	push 0
	cthis buildguibut
	push "arrowup"
	push "null"
	push istdwidth
	push istdwidth
	push 0
	cthis buildguibut
	push "arrowupact"
	push "null"
	push istdwidth
	push istdwidth
	push 1
	cthis buildguibut
	push "arrowdown"
	push "imgarrowleft"
	push 0
	push 0
	push 0
	cthis buildguibut
	push "arrowdownact"
	push "imgarrowleftact"
	push 0
	push 0
	push 0
	cthis buildguibut
	push 1
	push 1
	cthis black
	push 255
	call im3,create
	push "left"
	call imgarrowleft,drawarrow
	push "left"
	call imgarrowleftact,drawarrow
	push "right"
	call imgarrowright,drawarrow
	push "right"
	call imgarrowrightact,drawarrow
	push "up"
	call imgarrowup,drawarrow
	push "up"
	call imgarrowupact,drawarrow
	push "down"
	call imgarrowdown,drawarrow
	push "down"
	call imgarrowdownact,drawarrow
	new timer,timbutclick
	push 100
	call timbutclick,delay
	push 1
	call timbutclick,settick
	new string,sButClick
	push "null"
	pop sButClick
	push "onfinish"
	push "GUI1"
	call timbutclick,addmethod
	cthis reset
	end method
	method GUI0
	push "butouterclick"
	call grouter,eval
	cthis getname
	push "_gui_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method GUI1
	push sButClick
	push "null"
	cmpjne
	cmp0
	je l2771
	localdef $1
	push sButClick
	pop $1
	push "null"
	pop sButClick
	push $1
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2771:
	end method
	method isstdclicked
	call timbutclick,isplaying
	end method
	method calcmonowidth
	new text,_txtpom
	push "stdmonofont"
	call _txtpom,setfont
	push "a"
	call _txtpom,txtset
	call _txtpom,getw
	pop monowidth
	delete _txtpom
	end method
	method setfontsize
	localint $1
	pop $1
	push $1
	pop istdfont
	push setstdfont
	push istdfont
	call stdfont,load
	push setmonofont
	push istdfont
	call stdmonofont,load
	push $1
	pop monowidth
	end method
	method drawarrow
	localstring $1
	pop $1
	localdef $2
	cthis getcx
	pop $2
	localdef $3
	cthis getcy
	pop $3
	push $1
	spushs
	push "left"
	cmpst
	jne l2773
	spop $a
	push "im3"
	push $2
	push 2
	pop $b
	popax
	sub $a,$b
	push $3
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push $3
	push 2
	pop $b
	popax
	sub $a,$b
	push $2
	push $3
	push 2
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push 3
	pop $b
	popax
	sub $a,$b
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push 3
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	jmp l2772
l2773:
	push "right"
	cmpst
	jne l2774
	spop $a
	push "im3"
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push 3
	pop $b
	popax
	sub $a,$b
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push 3
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push $3
	push 2
	pop $b
	popax
	sub $a,$b
	push $2
	push $3
	push 2
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push $2
	push 2
	pop $b
	popax
	add $a,$b
	push $3
	push 1
	push 0
	cthis imgdrawline
	popax
	jmp l2772
l2774:
	push "up"
	cmpst
	jne l2775
	spop $a
	push "im3"
	push $2
	push $3
	push 2
	pop $b
	popax
	sub $a,$b
	push $2
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 2
	pop $b
	popax
	sub $a,$b
	push $3
	push $2
	push 2
	pop $b
	popax
	add $a,$b
	push $3
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 3
	pop $b
	popax
	sub $a,$b
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	push 3
	pop $b
	popax
	add $a,$b
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	jmp l2772
l2775:
	push "down"
	cmpst
	jne l2776
	spop $a
	push "im3"
	push $2
	push 3
	pop $b
	popax
	sub $a,$b
	push $3
	push 2
	pop $b
	popax
	sub $a,$b
	push $2
	push 3
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 2
	pop $b
	popax
	sub $a,$b
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	push 2
	pop $b
	popax
	add $a,$b
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	push $2
	push $3
	push $2
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	jmp l2772
l2776:
	spop $a
l2772:
	end method
	method drawX
	localint $1
	pop $1
	localint $2
	push 4
	spushs
	spop $h
	call $h,igetsc
	pop $2
	push "im3"
	cthis getpx
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis getex
	push $2
	pop $b
	popax
	sub $a,$b
	call im3,getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis getey
	push $2
	pop $b
	popax
	sub $a,$b
	call im3,geth
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	push "im3"
	cthis getex
	push $2
	pop $b
	popax
	sub $a,$b
	call im3,getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getpy
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpx
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push $2
	pop $b
	popax
	sub $a,$b
	call im3,geth
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push 1
	push 0
	cthis imgdrawline
	popax
	end method
	method buildguibut
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	push "img"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new img,[$e]
	push $2
	push "null"
	cmpje
	cmp0
	je l2778
	push $5
	cmp0
	je l2780
	push $6
	spushs
	push $3
	push $4
	call wndconcave,get
	spop $a
	call [$a],create
	push $6
	spushs
	push 2
	call wndshadow,get
	push "1001"
	spop $a
	call [$a],imgborderss
	push $6
	spushs
	push 1
	cthis black
	push 255
	push "1001"
	spop $a
	call [$a],imgborderss
	push $6
	spushs
	push 1
	cthis white
	push 255
	push "0110"
	spop $a
	call [$a],imgborderss
	jmp l2779
l2780:
	push $6
	spushs
	push $3
	push $4
	call wndcol,get
	spop $a
	call [$a],create
	push $6
	spushs
	push 2
	call wndshadow,get
	push "0110"
	spop $a
	call [$a],imgborderss
	push $6
	spushs
	push 1
	cthis black
	push 255
	push "0110"
	spop $a
	call [$a],imgborderss
	push $6
	spushs
	push 1
	cthis white
	push 255
	push "1001"
	spop $a
	call [$a],imgborderss
l2779:
	jmp l2777
l2778:
	push $6
	spushs
	push $2
	spop $a
	call [$a],clone
l2777:
	push $6
	spushs
	spop $a
	call [$a],hide
	localstring $7
	push "s"
	push $1
	pop $b
	popax
	add $a,$b
	pop $7
	push $7
	spushs
	spop $e
	new string,[$e]
	push $7
	spushs
	cthis getname
	push $1
	pop $b
	popax
	add $a,$b
	spop $b
	popax
	mov [$b],$a
	push $6
	spushs
	push $7
	popax
	mov $a,[$a]
	psax
	spop $a
	call [$a],addtogamevars
	end method
	method addtogui
	push sGui
	push "null"
	cmpjne
	cmp0
	je l2782
	push sGui
	spushs
	cthis getname
	spop $a
	call [$a],add
l2782:
	end method
	method removefromgui
	push sGui
	push "null"
	cmpjne
	cmp0
	je l2784
	push sGui
	spushs
	cthis getname
	spop $a
	call [$a],removebut
l2784:
	end method
	method reset
	end method
	method dellist
	push "delobj"
	cthis withlist
	end method
	method delobj
	localstring $1
	pop $1
	push "del"
	push $1
	spushs
	spop $a
	call [$a],guitype
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
	end method
	method newwnd
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "wndborder"
	push "wndborder"
	push "wndcol"
	push iwndborder
	push swndshadow
	cthis _newwnd
	end method
	method newwndconvex
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "wndborderL"
	push "wndborder"
	push "wndcol"
	push iwndborder
	push swndshadow
	cthis _newwnd
	end method
	method newwndconcave
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "wndborder"
	push "wndborderL"
	push "wndconcave"
	push 2
	push "1001"
	cthis _newwnd
	end method
	method newwndtext
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "wndborder"
	push "wndborderL"
	push "wndtextcol"
	push 2
	push "1001"
	cthis _newwnd
	end method
	method _newwnd
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	localint $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	spushs
	push $2
	push $3
	push $6
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],create
	push $1
	spushs
	push "guitype"
	push "wnd"
	spop $a
	call [$a],var2
	push $7
	cmp0
	je l2786
	new img,im1
	push $2
	push $7
	push $4
	spushs
	spop $a
	call [$a],get
	call im1,create
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push $2
	push $7
	push $5
	spushs
	spop $a
	call [$a],get
	call im1,create
	push 0
	push $1
	spushs
	spop $a
	call [$a],getey
	push $7
	pop $b
	popax
	sub $a,$b
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push $7
	push $3
	push $4
	spushs
	spop $a
	call [$a],get
	call im1,create
	push 0
	push 0
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push $7
	push $3
	push $5
	spushs
	spop $a
	call [$a],get
	call im1,create
	push $1
	spushs
	spop $a
	call [$a],getex
	push $7
	pop $b
	popax
	sub $a,$b
	push 0
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	delete im1
l2786:
	push $1
	push 0
	push $7
	push $7
	push $2
	push 2
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push iwndshadow
	push $8
	cthis _mk_shadow
	push $1
	push 1
	push $1
	spushs
	spop $a
	call [$a],getex
	push $7
	pop $b
	popax
	sub $a,$b
	push iwndshadow
	pop $b
	popax
	sub $a,$b
	push $7
	push iwndshadow
	push $3
	push 2
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $8
	cthis _mk_shadow
	push $1
	push 2
	push $7
	push $1
	spushs
	spop $a
	call [$a],getey
	push $7
	pop $b
	popax
	sub $a,$b
	push iwndshadow
	pop $b
	popax
	sub $a,$b
	push $2
	push 2
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push iwndshadow
	push $8
	cthis _mk_shadow
	push $1
	push 3
	push $7
	push $7
	push iwndshadow
	push $3
	push 2
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $8
	cthis _mk_shadow
	end method
	method _mk_shadow
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $8
	push $2
	push 1
	call $7,getb
	pop $8
	push $8
	cmp0
	je l2788
	push $5
	cmp0
	je l2788
	push $6
	jmp l2790
l2788:
	push 0
	jmp l2790
l2789:
	push 1
l2790:
	cmp0
	je l2791
	new img,im1
	push $5
	push $6
	call wndshadow,get
	call im1,create
	push $3
	push $4
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	delete im1
l2791:
	end method
	method newwndtitle
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	spushs
	push "guitype"
	push "wnd"
	spop $a
	call [$a],var2
	localdef $6
	push 2
	push ibar
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	pop $6
	localdef $7
	push ibar
	push ititlebar
	pop $b
	popax
	add $a,$b
	push $5
	pop $b
	popax
	add $a,$b
	pop $7
	push $1
	spushs
	push $6
	push $7
	call wndcol,get
	spop $a
	call [$a],create
	new img,im1
	push $6
	push ititlebar
	call wndbar,get
	call im1,create
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push $6
	push ibar
	call wndbar,get
	call im1,create
	push 0
	push $1
	spushs
	spop $a
	call [$a],getey
	push ibar
	pop $b
	popax
	sub $a,$b
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push ibar
	push $7
	call wndbar,get
	call im1,create
	push 0
	push 0
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push $1
	spushs
	spop $a
	call [$a],getex
	push ibar
	pop $b
	popax
	sub $a,$b
	push 0
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push $1
	spushs
	push 0
	push 0
	cthis transparent
	spop $a
	call [$a],putrgba
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push 0
	cthis transparent
	spop $a
	call [$a],putrgba
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	spop $a
	call [$a],putrgba
	push $1
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	spop $a
	call [$a],putrgba
	push $6
	push 2
	pop $b
	popax
	sub $a,$b
	push 1
	call wndbarb,get
	call im1,create
	push 1
	push 0
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push 1
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push 1
	push $7
	push 2
	pop $b
	popax
	sub $a,$b
	call wndbarb,get
	call im1,create
	push 0
	push 1
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	call im1,setpos
	push $1
	spushs
	push "im1"
	spop $a
	call [$a],blit
	delete im1
	push $2
	push "null"
	cmpjne
	cmp0
	je l2793
	push $2
	spushs
	push 7
	spushs
	spop $h
	call $h,igetsc
	push 4
	spushs
	spop $h
	call $h,igetsc
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $a
	call [$a],blit
l2793:
	new text,txt1
	push "stitlefont"
	call txt1,setfont
	push $3
	call wndbarb,rgb
	call txt1,txtsetcol
	localint $8
	push ititlebar
	push istdfont
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $8
	push $8
	push 1
	cmpjl
	cmp0
	je l2795
	push 1
	pop $8
l2795:
	push 33
	spushs
	spop $h
	call $h,igetsc
	push $8
	call txt1,setpos
	push $1
	spushs
	push "txt1"
	spop $a
	call [$a],blit
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	call txt1,move
	push $3
	call titlecol,rgb
	call txt1,txtsetcol
	push $1
	spushs
	push "txt1"
	spop $a
	call [$a],blit
	delete txt1
	push $1
	spushs
	push squit
	spop $a
	call [$a],GUI2
	push $1
	spushs
	spop $a
	call [$a],stdlocker
	push $1
	spushs
	push "isbutin"
	push "GUI3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winmove"
	push "GUI4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winshow"
	push "GUI5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winhide"
	push "GUI6"
	spop $a
	call [$a],addmethod
	push $1
	cthis stdwinsetpos
	push $1
	spushs
	push "winsetz"
	push "GUI7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butmoveon"
	push "GUI8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butmoveoff"
	push "GUI9"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butclick"
	push "GUI10"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],addtogui
	end method
	method GUI2
	localstring $1
	pop $1
	new img,imquit
	push $1
	call imquit,copy
	call imquit,show
	cthis getex
	call imquit,getw
	pop $b
	popax
	sub $a,$b
	push 5
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	sub $a,$b
	cthis getpx
	push 3
	spushs
	spop $h
	call $h,igetsc
	pop $b
	popax
	add $a,$b
	call imquit,setpos
	cthis getz
	push 1
	pop $b
	popax
	add $a,$b
	call imquit,setz
	new img,imquitact
	push $1
	push "act"
	pop $b
	popax
	add $a,$b
	call imquitact,copy
	call imquit,getpx
	call imquit,getpy
	call imquitact,setpos
	call imquit,getz
	call imquitact,setz
	call imquitact,hide
	push "imquit"
	cthis blit
	end method
	method GUI3
	localint $1
	localint $2
	pop $2
	pop $1
	cthis unlocked
	cmp0
	je l2796
	cthis isvisible
	cmp0
	je l2796
	push $1
	push $2
	push 0
	push 0
	call imquit,isin
	jmp l2798
l2796:
	push 0
	jmp l2798
l2797:
	push 1
l2798:
	end method
	method GUI4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis move
	push $1
	push $2
	call imquit,move
	push $1
	push $2
	call imquitact,move
	end method
	method GUI5
	cthis show
	call imquit,show
	call imquitact,hide
	end method
	method GUI6
	cthis hide
	call imquit,hide
	call imquitact,hide
	end method
	method GUI7
	localint $1
	pop $1
	push $1
	cthis setz
	push $1
	call imquit,setz
	push $1
	call imquitact,setz
	push sGui
	spushs
	spop $a
	call [$a],sort
	end method
	method GUI8
	cthis unlocked
	cmp0
	je l2800
	cthis isvisible
	jmp l2802
l2800:
	push 0
	jmp l2802
l2801:
	push 1
l2802:
	cmp0
	je l2803
	call imquit,hide
	call imquitact,show
l2803:
	end method
	method GUI9
	cthis unlocked
	cmp0
	je l2805
	cthis isvisible
	jmp l2807
l2805:
	push 0
	jmp l2807
l2806:
	push 1
l2807:
	cmp0
	je l2808
	call imquit,show
	call imquitact,hide
l2808:
	end method
	method GUI10
	cthis unlocked
	cmp0
	je l2810
	push sButClick
	push "null"
	cmpje
	jmp l2812
l2810:
	push 0
	jmp l2812
l2811:
	push 1
l2812:
	cmp0
	je l2813
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l2813:
	end method
	method stdwinsetpos
	localstring $1
	pop $1
	push $1
	spushs
	push "winsetpos"
	push "GUI11"
	spop $a
	call [$a],addmethod
	end method
	method GUI11
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis winmove
	end method
	method stdwinmove
	localstring $1
	pop $1
	push $1
	spushs
	push "winmove"
	push "GUI12"
	spop $a
	call [$a],addmethod
	end method
	method GUI12
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis move
	end method
	method stdwinsetz
	localstring $1
	pop $1
	push $1
	spushs
	push "winsetz"
	push "GUI13"
	spop $a
	call [$a],addmethod
	end method
	method GUI13
	localint $1
	pop $1
	push $1
	cthis setz
	push sGui
	spushs
	spop $a
	call [$a],sort
	end method
	method printcenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis getstdtext
	push $1
	call txt1,txtcenter
	push $1
	spushs
	push "txt1"
	spop $a
	call [$a],blit
	delete txt1
	end method
	method print
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	cthis getstdtext
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $3
	pop $b
	popax
	add $a,$b
	call txt1,setpos
	push $1
	spushs
	push "txt1"
	spop $a
	call [$a],blit
	delete txt1
	end method
	method getstdtext
	localstring $1
	pop $1
	new text,txt1
	push "stdfont"
	call txt1,setfont
	push $1
	call fontcol,rgb
	call txt1,txtsetcol
	end method
	method stdlocker
	cthis getname
	clparent classlocker,setaslocker
	cthis unlock
	end method
	method stdbutin
	localint $1
	localint $2
	pop $2
	pop $1
	cthis unlocked
	cmp0
	je l2814
	push $1
	push $2
	push 1
	push 0
	cthis isin
	jmp l2816
l2814:
	push 0
	jmp l2816
l2815:
	push 1
l2816:
	end method
	method stdclick
	cthis unlocked
	cmp0
	je l2818
	push sButClick
	push "null"
	cmpje
	jmp l2820
l2818:
	push 0
	jmp l2820
l2819:
	push 1
l2820:
	cmp0
	je l2821
	cthis getname
	pop sButClick
	call timbutclick,play
l2821:
	end method
	method stdmoveon
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdmoveoff
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method newbutton
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	push $4
	cthis newwndconvex
	push $2
	cthis getstdtext
	push $2
	call txt1,txtset
	push $1
	call txt1,txtcenter
	push $1
	spushs
	push "txt1"
	spop $a
	call [$a],blit
	localdef $5
	push $1
	push "clicked"
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $3
	push $4
	cthis newwndconcave
	push $5
	spushs
	push "txt1"
	spop $a
	call [$a],blit
	push $5
	spushs
	spop $a
	call [$a],hide
	delete txt1
	push $1
	spushs
	spop $a
	call [$a],stdlocker
	push $1
	spushs
	push "isbutin"
	push "stdbutin"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butmoveon"
	push "stdmoveon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butmoveoff"
	push "stdmoveoff"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push A
	push "butstate"
	push "std"
	push "guitype"
	push "button"
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "butclick"
	push "GUI14"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unclick"
	push "GUI15"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "clicked"
	push "GUI16"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unclicked"
	push "GUI17"
	spop $a
	call [$a],addmethod
	push $1
	cthis stdwinsetz
	push $1
	spushs
	spop $a
	call [$a],addtogui
	end method
	method GUI14
	cthis unlocked
	cmp0
	je l2823
	push sButClick
	push "null"
	cmpje
	jmp l2825
l2823:
	push 0
	jmp l2825
l2824:
	push 1
l2825:
	cmp0
	je l2826
	push butstate
	push "std"
	cmpje
	cmp0
	je l2828
	cthis getname
	pop sButClick
	cthis hide
	localdef $1
	push sButClick
	push "clicked"
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	cthis getpx
	cthis getpy
	spop $a
	call [$a],setpos
	push $1
	spushs
	cthis getz
	spop $a
	call [$a],setz
	push $1
	spushs
	spop $a
	call [$a],show
	push "clicked"
	pop butstate
	call timbutclick,play
	jmp l2827
l2828:
	push butstate
	push "clicked"
	cmpje
	cmp0
	je l2830
	push "clickclicked"
	pop butstate
	cthis getname
	pop sButClick
	call timbutclick,play
l2830:
l2827:
l2826:
	end method
	method GUI15
	cthis show
	cthis getname
	push "clicked"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	push "std"
	pop butstate
	end method
	method GUI16
	push butstate
	push "clicked"
	cmpje
	end method
	method GUI17
	push butstate
	push "clickclicked"
	cmpje
	end method
	method delbutton
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],removefromgui
	push GAME
	spushs
	push $1
	spop $a
	call [$a],vardel
	push GAME
	spushs
	push $1
	push "clicked"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],vardel
	push $1
	spushs
	spop $d
	delete [$d]
	push $1
	push "clicked"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method delwnd
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],removefromgui
	push GAME
	spushs
	push $1
	spop $a
	call [$a],vardel
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method newmenubut
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	call wndcol,get
	spop $a
	call [$a],create
	push $1
	spushs
	push "slabel"
	push $4
	spop $a
	call [$a],var2
	localdef $5
	push $1
	push "act"
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new img,[$e]
	push $4
	cthis getstdtext
	push $1
	call txt1,txtcenter
	push $1
	spushs
	push "txt1"
	spop $a
	call [$a],blit
	push $5
	spushs
	push $2
	push $3
	call wndact,get
	spop $a
	call [$a],create
	push $5
	spushs
	push "txt1"
	spop $a
	call [$a],blit
	push $5
	spushs
	spop $a
	call [$a],hide
	delete txt1
	end method
	method newsubmenu
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _newmenu
	push $1
	spushs
	spop $a
	call [$a],stdlocker
	push $1
	spushs
	push A
	push "active"
	push "null"
	push "movedon"
	push "null"
	push "idclicked"
	push 1
	popax
	sub 0,$a
	push "iwbut"
	push $2
	push "ihbut"
	push $3
	push "dir"
	push $5
	push "idmoved"
	push 1
	popax
	sub 0,$a
	push "hideonouter"
	push 0
	spop $a
	call [$a],vars2
	push $1
	spushs
	push $4
	spop $a
	call [$a],GUI18
	push $1
	spushs
	push "hidesubmenus"
	push "GUI19"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "viewsubmenu"
	push "GUI20"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbutin"
	push "GUI21"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "deactivate"
	push "GUI22"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "activate"
	push "GUI23"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butmoveon"
	push "stdmoveon"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butmoveoff"
	push "stdmoveoff"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butclick"
	push "GUI24"
	spop $a
	call [$a],addmethod
	push $1
	call grouter,add
	push $1
	spushs
	push "butouterclick"
	push "GUI25"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],addtogui
	end method
	method GUI18
	localstring $1
	pop $1
	new vector,vsubmenu
	push "string"
	call vsubmenu,type
	push $1
	spushs
	spop $a
	call [$a],size
	push "null"
	call vsubmenu,resize
	end method
	method GUI19
	localdef $1
	localint $2
	push 0
	pop $2
l2831:
	push $2
	call vsubmenu,size
	cmpjl
	cmp0
	je l2832
	jmp l2834
l2833:
	add $2,1
	pop $2
	jmp l2831
l2834:
	push $2
	call vsubmenu,get
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l2836
	push $1
	spushs
	spop $a
	call [$a],hide
l2836:
	jmp l2833
l2832:
	end method
	method GUI20
	localint $1
	pop $1
	localdef $2
	push $1
	call vsubmenu,get
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l2838
	cthis hidesubmenus
	push $2
	spushs
	spop $a
	call [$a],show
	push 1
	jmp l2837
l2838:
	push 0
l2837:
	end method
	method GUI21
	localint $1
	localint $2
	pop $2
	pop $1
	cthis getlock
	cmp0
	je l2840
	ret
l2840:
	localdef $3
	push 0
	cthis get
	pop $3
	push 0
	cthis removeat
	localdef $4
	push $1
	push $2
	cthis stdbutin
	pop $4
	push $4
	cmp0
	je l2842
	cthis getsfound
	pop movedon
	cthis getfound
	pop idmoved
	push movedon
	cthis activate
	jmp l2841
l2842:
	cthis deactivate
l2841:
	push $3
	cthis addbegin
	push $4
	end method
	method GUI22
	push active
	push "null"
	cmpjne
	cmp0
	je l2844
	push active
	push "act"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	push "null"
	pop active
l2844:
	end method
	method GUI23
	localstring $1
	pop $1
	push $1
	push active
	cmpjne
	cmp0
	je l2846
	cthis deactivate
	push $1
	pop active
	localdef $2
	push $1
	push "act"
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push $2
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],setpos
	push $2
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
l2846:
	end method
	method GUI24
	push movedon
	push "null"
	cmpjne
	cmp0
	je l2848
	push idmoved
	pop idclicked
l2848:
	push idclicked
	cthis viewsubmenu
	neg
	cmp0
	je l2850
	cthis stdclick
l2850:
	end method
	method GUI25
	cthis deactivate
	push hideonouter
	cmp0
	je l2852
	cthis hide
l2852:
	end method
	method _newmenu
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	localint $6
	push iwndborder
	push iwndshadow
	pop $b
	popax
	add $a,$b
	pop $6
	localint $7
	push $6
	pop $7
	localdef $8
	push $1
	push "bkg"
	pop $b
	popax
	add $a,$b
	pop $8
	localint $9
	push $4
	spushs
	spop $a
	call [$a],size
	pop $9
	push $5
	push "horizontal"
	cmpje
	cmp0
	je l2854
	push $8
	push $9
	push $2
	pop $b
	popax
	mul $a,$b
	push 2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $3
	push 2
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis newwnd
	jmp l2853
l2854:
	push $8
	push $2
	push 2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $9
	push $3
	pop $b
	popax
	mul $a,$b
	push 2
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis newwnd
l2853:
	push $1
	spushs
	push $8
	spop $a
	call [$a],add
	localint $10
	push 0
	pop $10
l2855:
	push $10
	push $9
	cmpjl
	cmp0
	je l2856
	jmp l2858
l2857:
	add $10,1
	pop $10
	jmp l2855
l2858:
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $10
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $2
	push $3
	push $4
	spushs
	push $10
	spop $a
	call [$a],get
	cthis newmenubut
	push $8
	spushs
	push $6
	push $7
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $8
	spop $a
	call [$a],add
	push $5
	push "horizontal"
	cmpje
	cmp0
	je l2860
	push $2
	popax
	add $6,$a
	pop $6
	jmp l2859
l2860:
	push $3
	popax
	add $7,$a
	pop $7
l2859:
	jmp l2857
l2856:
	end method
	method addsubmenu
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	push $1
	spushs
	spop $a
	call [$a],dir
	push "horizontal"
	cmpje
	cmp0
	je l2862
	push "vertical"
	jmp l2861
l2862:
	push "horizontal"
l2861:
	pop $5
	localdef $6
	push $1
	spushs
	spop $a
	call [$a],iwbut
	pop $6
	localdef $7
	push $1
	spushs
	spop $a
	call [$a],ihbut
	pop $7
	push $3
	push $6
	push $7
	push $4
	push $5
	cthis newsubmenu
	push $1
	spushs
	push $3
	push $2
	spop $a
	call [$a],GUI26
	push $3
	spushs
	push 1
	spop $a
	call [$a],hideonouter=
	push $5
	push "horizontal"
	cmpje
	cmp0
	je l2864
	push $3
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	push $7
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
	jmp l2863
l2864:
	push $3
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $7
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
l2863:
	push $3
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	spop $a
	call [$a],setz
	push $3
	spushs
	spop $a
	call [$a],hide
	end method
	method GUI26
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $2
	push $1
	call vsubmenu,set
	end method
	method newtextline
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	push $1
	push "wnd"
	pop $b
	popax
	add $a,$b
	pop $5
	localdef $6
	push iwndborder
	push iwndshadow
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push $3
	push 2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $4
	push 2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis newwndtext
	push $1
	spushs
	call stdmonofont,getfullname
	push istdfont
	call fontcol,rgb
	push $2
	push $3
	push monowidth
	pop $b
	popax
	div $a,$b
	psax
	push 1
	pop $b
	popax
	sub $a,$b
	spop $e
	new ConTextTyper,[$e]
	push $1
	spushs
	push monowidth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $5
	spushs
	spop $a
	call [$a],geth
	push istdfont
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	spop $a
	call [$a],move
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	spushs
	push "winsetz"
	push "GUI27"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winmove"
	push "GUI28"
	spop $a
	call [$a],addmethod
	push $1
	cthis stdwinsetpos
	push $1
	spushs
	push "guitype"
	push "textbox"
	spop $a
	call [$a],var2
	push $1
	spushs
	push "winhide"
	push "GUI29"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winshow"
	push "GUI30"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],unlock
	end method
	method GUI27
	localint $1
	pop $1
	push $1
	cthis setz
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setz
	push sGui
	spushs
	spop $a
	call [$a],sort
	end method
	method GUI28
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis move
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],move
	end method
	method GUI29
	cthis hide
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	end method
	method GUI30
	cthis show
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	end method
	method newtextbox
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	push $1
	push "wnd"
	pop $b
	popax
	add $a,$b
	pop $5
	localdef $6
	push iwndborder
	push iwndshadow
	pop $b
	popax
	add $a,$b
	pop $6
	push $5
	push $3
	push 2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $4
	push 2
	push $6
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	cthis newwndtext
	push $1
	spushs
	call stdmonofont,getfullname
	push istdfont
	push monowidth
	call fontcol,rgb
	push $2
	push $6
	push 1
	pop $b
	popax
	add $a,$b
	push $6
	push 1
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push iytextlength
	spop $e
	new TextBoxTyper,[$e]
	push $1
	spushs
	push 1
	spop $a
	call [$a],insystem=
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	spushs
	push "winsetz"
	push "GUI31"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winmove"
	push "GUI32"
	spop $a
	call [$a],addmethod
	push $1
	cthis stdwinsetpos
	push $1
	spushs
	push "guitype"
	push "textbox"
	spop $a
	call [$a],var2
	push $1
	spushs
	push "winhide"
	push "GUI33"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winshow"
	push "GUI34"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],unlock
	end method
	method GUI31
	localint $1
	pop $1
	push $1
	cthis setz
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setz
	push sGui
	spushs
	spop $a
	call [$a],sort
	end method
	method GUI32
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis move
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],move
	end method
	method GUI33
	cthis hide
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	end method
	method GUI34
	cthis show
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	end method
	method deltextline
	localstring $1
	pop $1
	push $1
	cthis deltextbox
	end method
	method deltextbox
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],deletegmobj
	push $1
	spushs
	spop $d
	delete [$d]
	push $1
	push "wnd"
	pop $b
	popax
	add $a,$b
	cthis delwnd
	end method
	method newsqltable
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	spop $a
	call [$a],getrowsno
	push 0
	cmpje
	cmp0
	jne l2867
	push $2
	spushs
	push 0
	spop $a
	call [$a],getcolsno
	push 0
	cmpje
	jmp l2868
l2866:
	push 0
	jmp l2868
l2867:
	push 1
l2868:
	cmp0
	je l2869
	ret
l2869:
	new AlgImg,alg1
	localint $4
	localint $5
	localint $6
	localint $7
	new vector,vh
	new vector,vw
	localint $8
	push $2
	spushs
	push 0
	spop $a
	call [$a],getcolsno
	pop $8
	localint $9
	push $2
	spushs
	spop $a
	call [$a],getrowsno
	pop $9
	localint $10
	push 2
	pop $10
	localint $11
	push iwndshadow
	push iwndborder
	pop $b
	popax
	add $a,$b
	push 2
	pop $b
	popax
	mul $a,$b
	pop $11
	push 0
	pop $5
l2870:
	push $5
	push $8
	cmpjl
	cmp0
	je l2871
	jmp l2873
l2872:
	add $5,1
	pop $5
	jmp l2870
l2873:
	push 0.6
	push istdfont
	pop $b
	popax
	mul $a,$b
	push $2
	spushs
	push 0
	push $5
	spop $a
	call [$a],get
	pop $b
	popax
	mul $a,$b
	push $11
	pop $b
	popax
	add $a,$b
	call vw,add
	jmp l2872
l2871:
	localint $12
	push 1
	pop $12
l2874:
	push $12
	push $9
	cmpjl
	cmp0
	je l2875
	jmp l2877
l2876:
	add $12,1
	pop $12
	jmp l2874
l2877:
	push 0
	pop $4
	push 0
	pop $5
l2878:
	push $5
	push $8
	cmpjl
	cmp0
	je l2879
	jmp l2881
l2880:
	add $5,1
	pop $5
	jmp l2878
l2881:
	push $2
	spushs
	push $12
	push $5
	spop $a
	call [$a],get
	push $2
	spushs
	push 0
	push $5
	spop $a
	call [$a],get
	call alg1,counttextrows
	pop $6
	push $4
	push $6
	cmpjl
	cmp0
	je l2883
	push $6
	pop $4
l2883:
	jmp l2880
l2879:
	push $4
	push istdfont
	pop $b
	popax
	mul $a,$b
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	push $10
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push $11
	pop $b
	popax
	add $a,$b
	call vh,add
	jmp l2876
l2875:
	push $1
	call vw,vecsum
	push $11
	pop $b
	popax
	add $a,$b
	call vh,vecsum
	push $11
	pop $b
	popax
	add $a,$b
	cthis newwnd
	localint $13
	push iwndborder
	push iwndshadow
	pop $b
	popax
	add $a,$b
	pop $13
	localint $14
	push $13
	pop $14
	localint $15
	push $13
	pop $15
	new text,txt1
	push "stdfont"
	call txt1,setfont
	cthis black
	call txt1,createtxt
	push 0
	pop $5
l2884:
	push $5
	push $8
	cmpjl
	cmp0
	je l2885
	jmp l2887
l2886:
	add $5,1
	pop $5
	jmp l2884
l2887:
	push $1
	push $14
	push $15
	push "txt1"
	push $2
	spushs
	push 1
	push $5
	spop $a
	call [$a],get
	push $2
	spushs
	push 0
	push $5
	spop $a
	call [$a],get
	push istdfont
	push 0.6
	push istdfont
	pop $b
	popax
	mul $a,$b
	push $10
	push $3
	call alg1,textbox
	push $5
	call vw,get
	popax
	add $14,$a
	pop $14
	jmp l2886
l2885:
	push 0
	call vh,get
	popax
	add $15,$a
	pop $15
	localstring $16
	push $1
	push "tab"
	pop $b
	popax
	add $a,$b
	pop $16
	push 2
	pop $12
l2888:
	push $12
	push $9
	cmpjl
	cmp0
	je l2889
	jmp l2891
l2890:
	add $12,1
	pop $12
	jmp l2888
l2891:
	push $12
	push 1
	pop $b
	popax
	sub $a,$b
	call vh,get
	pop $4
	push $13
	pop $14
	push 0
	pop $5
l2892:
	push $5
	push $8
	cmpjl
	cmp0
	je l2893
	jmp l2895
l2894:
	add $5,1
	pop $5
	jmp l2892
l2895:
	push $16
	push $5
	call vw,get
	push $4
	cthis newwndtext
	push $16
	push 2
	push 2
	push "txt1"
	push $2
	spushs
	push $12
	push $5
	spop $a
	call [$a],get
	push $2
	spushs
	push 0
	push $5
	spop $a
	call [$a],get
	push istdfont
	push 0.6
	push istdfont
	pop $b
	popax
	mul $a,$b
	push $10
	push $3
	call alg1,textbox
	push $16
	spushs
	push $14
	push $15
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $16
	spop $a
	call [$a],blit
	push $16
	cthis delobj
	push $5
	call vw,get
	popax
	add $14,$a
	pop $14
	jmp l2894
l2893:
	push $12
	push 1
	pop $b
	popax
	sub $a,$b
	call vh,get
	popax
	add $15,$a
	pop $15
	jmp l2890
l2889:
	delete txt1
	delete vh
	delete vw
	delete alg1
	push $1
	cthis stdwinsetz
	push $1
	cthis stdwinmove
	push $1
	cthis stdwinsetpos
	end method
	method getbrzeg
	push iwndshadow
	push iwndborder
	pop $b
	popax
	add $a,$b
	end method
	method newrewinder
	localstring $1
	localint $2
	localint $3
	localreal $4
	localreal $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $7
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	cthis getbrzeg
	pop $8
	localint $9
	push $4
	push 0
	cmpjne
	cmp0
	je l2896
	push $4
	push $6
	spushs
	spop $a
	call [$a],getw
	cmpjl
	jmp l2898
l2896:
	push 0
	jmp l2898
l2897:
	push 1
l2898:
	pop $9
	localint $10
	push $5
	push 0
	cmpjne
	cmp0
	je l2899
	push $5
	push $6
	spushs
	spop $a
	call [$a],geth
	cmpjl
	jmp l2901
l2899:
	push 0
	jmp l2901
l2900:
	push 1
l2901:
	pop $10
	push $9
	neg
	cmp0
	je l2903
	push $6
	spushs
	spop $a
	call [$a],getw
	pop $4
l2903:
	push $10
	neg
	cmp0
	je l2905
	push $6
	spushs
	spop $a
	call [$a],geth
	pop $5
l2905:
	push $7
	push $4
	push $5
	cthis newwnd
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $1
	spop $a
	call [$a],addtogamevars
	push $1
	spushs
	push A
	push "guitype"
	push "rewinder"
	push "srewinded"
	push $6
	push "bisw"
	push $9
	push "bish"
	push $10
	push "imover"
	push 10
	spop $a
	call [$a],vars2
	localstring $11
	localstring $12
	push $9
	cmp0
	je l2907
	localstring $13
	push $1
	push "w"
	pop $b
	popax
	add $a,$b
	pop $13
	push $13
	push $4
	push istdwidth
	cthis newwndconcave
	push $13
	spushs
	push 0
	push $5
	spop $a
	call [$a],move
	localreal $14
	push $6
	spushs
	spop $a
	call [$a],getw
	pop $14
	push $1
	spushs
	push "rwmover"
	push $14
	push $4
	pop $b
	popax
	div $a,$b
	psax
	spop $a
	call [$a],var2
	push $1
	spushs
	spop $a
	call [$a],rwmover
	push 1
	cmpjl
	cmp0
	je l2909
	push $1
	spushs
	push 1
	spop $a
	call [$a],rwmover=
l2909:
	localreal $15
	push $4
	push $14
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push 40.0
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $15
	push $15
	push $14
	cmpja
	cmp0
	je l2911
	push $14
	pop $15
	jmp l2910
l2911:
	push $15
	push 1
	cmpjl
	cmp0
	je l2913
	push 1
	push $8
	pop $b
	popax
	add $a,$b
	pop $15
l2913:
l2910:
	push $1
	push "tmpsuw"
	pop $b
	popax
	add $a,$b
	pop $11
	push $11
	push $15
	push $13
	spushs
	spop $a
	call [$a],geth
	cthis newwndconvex
	push $11
	spushs
	push 0
	push $5
	spop $a
	call [$a],move
	jmp l2906
l2907:
	push "null"
	pop $11
l2906:
	push $10
	cmp0
	je l2915
	localstring $16
	push $1
	push "h"
	pop $b
	popax
	add $a,$b
	pop $16
	push $16
	push istdwidth
	push $5
	cthis newwndconcave
	push $16
	spushs
	push $4
	push 0
	spop $a
	call [$a],move
	localreal $17
	push $6
	spushs
	spop $a
	call [$a],geth
	pop $17
	push $1
	spushs
	push "rhmover"
	push $17
	push $5
	pop $b
	popax
	div $a,$b
	psax
	spop $a
	call [$a],var2
	push $1
	spushs
	spop $a
	call [$a],rhmover
	push 1
	cmpjl
	cmp0
	je l2917
	push $1
	spushs
	push 1
	spop $a
	call [$a],rhmover=
l2917:
	localreal $18
	push $5
	push $17
	pop $b
	popax
	div $a,$b
	psax
	push $5
	push 40.0
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	pop $18
	push $18
	push $17
	cmpja
	cmp0
	je l2919
	push $17
	pop $18
	jmp l2918
l2919:
	push $18
	push 1
	cmpjl
	cmp0
	je l2921
	push 1
	push $8
	pop $b
	popax
	add $a,$b
	pop $18
l2921:
l2918:
	push $1
	push "tmpsuwh"
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	push $16
	spushs
	spop $a
	call [$a],getw
	push $18
	cthis newwndconvex
	push $12
	spushs
	push $4
	push 0
	spop $a
	call [$a],move
	jmp l2914
l2915:
	push "null"
	pop $12
l2914:
	push $1
	spushs
	push $11
	push $12
	spop $a
	call [$a],GUI35
	push $11
	push "null"
	cmpjne
	cmp0
	je l2927
	push $11
	cthis delwnd
l2927:
	push $12
	push "null"
	cmpjne
	cmp0
	je l2929
	push $12
	cthis delwnd
l2929:
	push $1
	push "tim"
	pop $b
	popax
	add $a,$b
	push "GUI36"
	cthis cycle=
	push $1
	spushs
	spop $a
	call [$a],stdlocker
	push $1
	spushs
	push "isbutin"
	push "GUI37"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winmove"
	push "GUI38"
	spop $a
	call [$a],addmethod
	push $1
	cthis stdwinsetpos
	push $1
	spushs
	push "winmoveall"
	push "GUI39"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winsetallpos"
	push "GUI40"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],winmove
	push $1
	spushs
	push "winsetz"
	push "GUI41"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setactsuw"
	push "GUI42"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butclick"
	push "GUI43"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butlrel"
	push "GUI44"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winrewind"
	push "GUI45"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rewind"
	push "GUI46"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "stabilizerew"
	push "GUI47"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butmoving"
	push "GUI48"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrewinded"
	push "GUI49"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],setrewinded
	push $1
	spushs
	spop $a
	call [$a],addtogui
	end method
	method GUI35
	localstring $1
	localstring $2
	pop $2
	pop $1
	new gmimgvec,grels
	cthis getname
	push "bg"
	pop $b
	popax
	add $a,$b
	call grels,add
	localstring $3
	push A
	push "bsuwakx"
	push 0
	push "bsuwaky"
	push 0
	push "suwakx"
	push 0
	push "suwaky"
	push 0
	push "ssuwed"
	push "null"
	cthis vars2
	push bisw
	cmp0
	je l2923
	cthis getname
	push "w"
	pop $b
	popax
	add $a,$b
	pop $3
	push "reww"
	push $3
	cthis var2
	push $3
	call grels,add
	new img,imgleft
	push sarrowleft
	call imgleft,copy
	call imgleft,show
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	call imgleft,setpos
	push "imgleft"
	call grels,add
	new img,imgleftact
	push sarrowleftact
	call imgleftact,copy
	call imgleftact,hide
	call imgleft,getpx
	call imgleft,getpy
	call imgleftact,setpos
	push "imgleftact"
	call grels,add
	new img,imgright
	push sarrowright
	call imgright,copy
	call imgright,show
	push "imgright"
	call grels,add
	push $3
	spushs
	spop $a
	call [$a],getex
	call imgright,getw
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getpy
	call imgright,setpos
	new img,imgrightact
	push sarrowrightact
	call imgrightact,copy
	call imgrightact,hide
	call imgright,getpx
	call imgright,getpy
	call imgrightact,setpos
	push "imgrightact"
	call grels,add
	new img,imgsuwak
	push $1
	call imgsuwak,clone
	call imgleft,getex
	call imgleft,getpy
	call imgsuwak,setpos
	push "imgsuwak"
	call grels,add
	new real,wsuw
	call imgright,getpx
	call imgleft,getex
	pop $b
	popax
	sub $a,$b
	pop wsuw
l2923:
	push bish
	cmp0
	je l2925
	cthis getname
	push "h"
	pop $b
	popax
	add $a,$b
	pop $3
	push "rewh"
	push $3
	cthis var2
	push $3
	call grels,add
	new img,imgup
	push sarrowup
	call imgup,copy
	call imgup,show
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	call imgup,setpos
	push "imgup"
	call grels,add
	new img,imgupact
	push sarrowupact
	call imgupact,copy
	call imgup,getpx
	call imgup,getpy
	call imgupact,setpos
	call imgupact,hide
	push "imgupact"
	call grels,add
	new img,imgdown
	push sarrowdown
	call imgdown,copy
	call imgdown,show
	push "imgdown"
	call grels,add
	call imgup,getpx
	push $3
	spushs
	spop $a
	call [$a],getey
	call imgdown,geth
	pop $b
	popax
	sub $a,$b
	call imgdown,setpos
	new img,imgdownact
	push sarrowdownact
	call imgdownact,copy
	call imgdownact,hide
	call imgdown,getpx
	call imgdown,getpy
	call imgdownact,setpos
	push "imgdownact"
	call grels,add
	new img,imgsuwaky
	push $2
	call imgsuwaky,clone
	call imgup,getpx
	call imgup,getpy
	call imgsuwaky,setpos
	push "imgsuwaky"
	call grels,add
	new real,hsuw
	call imgdown,getpy
	call imgup,getey
	pop $b
	popax
	sub $a,$b
	pop hsuw
l2925:
	end method
	method GUI36
	cthis getname
	spushs
	push "tim"
	spop $a
	call $a,strsubes
	spushs
	spop $a
	call [$a],winrewind
	cthis play
	end method
	method GUI37
	localint $1
	localint $2
	pop $2
	pop $1
	cthis unlocked
	cmp0
	je l2930
	push $1
	push $2
	push 1
	push 0
	call grels,isin
	jmp l2932
l2930:
	push 0
	jmp l2932
l2931:
	push 1
l2932:
	end method
	method GUI38
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis move
	push $1
	push $2
	call grels,move
	localdef $3
	cthis getname
	push "bg"
	pop $b
	popax
	add $a,$b
	pop $3
	push srewinded
	spushs
	push $3
	spushs
	spop $a
	call [$a],getpx
	cthis getbrzeg
	pop $b
	popax
	add $a,$b
	push $3
	spushs
	spop $a
	call [$a],getpy
	cthis getbrzeg
	pop $b
	popax
	add $a,$b
	push $3
	spushs
	spop $a
	call [$a],getex
	cthis getbrzeg
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	cthis getbrzeg
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],clip
	end method
	method GUI39
	localint $1
	localint $2
	pop $2
	pop $1
	push srewinded
	spushs
	push "winmove"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l2934
	push srewinded
	spushs
	push $1
	push $2
	spop $a
	call [$a],winmove
	jmp l2933
l2934:
	push srewinded
	spushs
	push $1
	push $2
	spop $a
	call [$a],move
l2933:
	push $1
	push $2
	cthis winmove
	end method
	method GUI40
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis winmoveall
	end method
	method GUI41
	localint $1
	pop $1
	push $1
	cthis setz
	push $1
	call grels,setz
	push sGui
	spushs
	spop $a
	call [$a],sort
	end method
	method GUI42
	localstring $1
	pop $1
	push $1
	pop ssuwed
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	push "act"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	cthis getname
	push "tim"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
	end method
	method GUI43
	call grels,getsfound
	spushs
	push "imgleft"
	cmpst
	jne l2936
	spop $a
	push "imgleft"
	cthis setactsuw
	jmp l2935
l2936:
	push "imgright"
	cmpst
	jne l2937
	spop $a
	push "imgright"
	cthis setactsuw
	jmp l2935
l2937:
	push "imgsuwak"
	cmpst
	jne l2938
	spop $a
	push 1
	pop bsuwakx
	call mouse,getposx
	call imgsuwak,getpx
	pop $b
	popax
	sub $a,$b
	pop suwakx
	jmp l2935
l2938:
	push "imgup"
	cmpst
	jne l2939
	spop $a
	push "imgup"
	cthis setactsuw
	jmp l2935
l2939:
	push "imgdown"
	cmpst
	jne l2940
	spop $a
	push "imgdown"
	cthis setactsuw
	jmp l2935
l2940:
	push "imgsuwaky"
	cmpst
	jne l2941
	spop $a
	push 1
	pop bsuwaky
	call mouse,getposy
	call imgsuwaky,getpy
	pop $b
	popax
	sub $a,$b
	pop suwaky
	jmp l2935
l2941:
	spop $a
l2935:
	end method
	method GUI44
	cthis getname
	push "tim"
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssuwed
	push "null"
	cmpjne
	cmp0
	je l2943
	push ssuwed
	push "act"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	push ssuwed
	spushs
	spop $a
	call [$a],show
	push "null"
	pop ssuwed
l2943:
	push 0
	pop bsuwakx
	push 0
	pop bsuwaky
	end method
	method GUI45
	push bisw
	cmp0
	je l2945
	call imgleftact,isvisible
	cmp0
	je l2947
	push srewinded
	spushs
	push imover
	push 0
	spop $a
	call [$a],move
	jmp l2946
l2947:
	call imgrightact,isvisible
	cmp0
	je l2949
	push srewinded
	spushs
	push imover
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
l2949:
l2946:
l2945:
	push bish
	cmp0
	je l2951
	call imgupact,isvisible
	cmp0
	je l2953
	push srewinded
	spushs
	push 0
	push imover
	spop $a
	call [$a],move
	jmp l2952
l2953:
	call imgdownact,isvisible
	cmp0
	je l2955
	push srewinded
	spushs
	push 0
	push imover
	popax
	sub 0,$a
	spop $a
	call [$a],move
l2955:
l2952:
l2951:
	cthis stabilizerew
	cthis setrewinded
	end method
	method GUI46
	localint $1
	localint $2
	pop $2
	pop $1
	push bisw
	cmp0
	je l2957
	push srewinded
	spushs
	push $1
	push 0
	spop $a
	call [$a],move
l2957:
	push bish
	cmp0
	je l2959
	push srewinded
	spushs
	push 0
	push $2
	spop $a
	call [$a],move
l2959:
	cthis stabilizerew
	cthis setrewinded
	end method
	method GUI47
	push bisw
	cmp0
	je l2961
	push srewinded
	spushs
	spop $a
	call [$a],getpx
	push reww
	spushs
	spop $a
	call [$a],getpx
	cthis getbrzeg
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l2963
	push srewinded
	spushs
	push reww
	spushs
	spop $a
	call [$a],getpx
	cthis getbrzeg
	pop $b
	popax
	add $a,$b
	push srewinded
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],setpos
	jmp l2962
l2963:
	push srewinded
	spushs
	spop $a
	call [$a],getex
	push reww
	spushs
	spop $a
	call [$a],getex
	cthis getbrzeg
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2965
	push srewinded
	spushs
	push reww
	spushs
	spop $a
	call [$a],getex
	cthis getbrzeg
	pop $b
	popax
	sub $a,$b
	push srewinded
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l2965:
l2962:
l2961:
	push bish
	cmp0
	je l2967
	push srewinded
	spushs
	spop $a
	call [$a],getpy
	push rewh
	spushs
	spop $a
	call [$a],getpy
	cthis getbrzeg
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l2969
	push srewinded
	spushs
	push srewinded
	spushs
	spop $a
	call [$a],getpx
	push rewh
	spushs
	spop $a
	call [$a],getpy
	cthis getbrzeg
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l2968
l2969:
	push srewinded
	spushs
	spop $a
	call [$a],getey
	push rewh
	spushs
	spop $a
	call [$a],getey
	cthis getbrzeg
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l2971
	push srewinded
	spushs
	push 0
	push rewh
	spushs
	spop $a
	call [$a],getey
	cthis getbrzeg
	pop $b
	popax
	sub $a,$b
	push srewinded
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],move
l2971:
l2968:
l2967:
	end method
	method GUI48
	push bsuwakx
	cmp0
	je l2973
	localreal $1
	call imgsuwak,getpx
	pop $1
	call mouse,getposx
	push suwakx
	pop $b
	popax
	sub $a,$b
	call imgsuwak,getpy
	call imgsuwak,setpos
	push srewinded
	spushs
	push rwmover
	push $1
	call imgsuwak,getpx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	push 0
	spop $a
	call [$a],move
	cthis stabilizerew
	cthis setrewinded
	jmp l2972
l2973:
	push bsuwaky
	cmp0
	je l2975
	localreal $2
	call imgsuwaky,getpy
	pop $2
	call imgsuwaky,getpx
	call mouse,getposy
	push suwaky
	pop $b
	popax
	sub $a,$b
	call imgsuwaky,setpos
	push srewinded
	spushs
	push 0
	push rhmover
	push $2
	call imgsuwaky,getpy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	mul $a,$b
	spop $a
	call [$a],move
	cthis stabilizerew
	cthis setrewinded
l2975:
l2972:
	end method
	method GUI49
	push bisw
	cmp0
	je l2977
	localreal $1
	push reww
	spushs
	spop $a
	call [$a],getpx
	push srewinded
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push srewinded
	spushs
	spop $a
	call [$a],getw
	spushs
	spop $h
	call $h,to_r
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	call imgleft,getex
	push $1
	push wsuw
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call imgsuwak,getpy
	call imgsuwak,setpos
	call imgright,getpx
	call imgsuwak,getex
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	cmpjl
	cmp0
	je l2979
	push $1
	push 0
	call imgsuwak,move
l2979:
l2977:
	push bish
	cmp0
	je l2981
	localreal $2
	push rewh
	spushs
	spop $a
	call [$a],getpy
	push srewinded
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,to_r
	push srewinded
	spushs
	spop $a
	call [$a],geth
	spushs
	spop $h
	call $h,to_r
	pop $b
	popax
	div $a,$b
	psax
	pop $2
	call imgsuwaky,getpx
	call imgup,getey
	push $2
	push hsuw
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call imgsuwaky,setpos
	call imgdown,getpy
	call imgsuwaky,getey
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l2983
	push 0
	push $2
	call imgsuwaky,move
l2983:
l2981:
	end method
	method delrewinder
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],bisw
	cmp0
	je l2985
	push $1
	push "w"
	pop $b
	popax
	add $a,$b
	cthis delobj
l2985:
	push $1
	spushs
	spop $a
	call [$a],bish
	cmp0
	je l2987
	push $1
	push "h"
	pop $b
	popax
	add $a,$b
	cthis delobj
l2987:
	push $1
	spushs
	spop $a
	call [$a],removefromgui
	push GAME
	spushs
	push $1
	spop $a
	call [$a],deletegmobj
	push GAME
	spushs
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],deletegmobj
	push $1
	spushs
	spop $d
	delete [$d]
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	push $1
	push "tim"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method newcheckbox
	localstring $1
	pop $1
	push $1
	push 15
	push 15
	cthis newwndtext
	push $1
	spushs
	spop $a
	call [$a],GUI50
	push $1
	spushs
	spop $a
	call [$a],stdlocker
	push $1
	spushs
	push "butclick"
	push "GUI51"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "check"
	push "GUI52"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "uncheck"
	push "GUI53"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "checked"
	push "GUI54"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "winmove"
	push "GUI55"
	spop $a
	call [$a],addmethod
	push $1
	cthis stdwinsetpos
	push $1
	spushs
	push "winsetz"
	push "GUI56"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbutin"
	push "stdbutin"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],addtogui
	end method
	method GUI50
	new img,imcheck
	push 15
	push 15
	cthis transparent
	call imcheck,create
	new img,im1
	push 2
	push 2
	cthis black
	push 255
	call im1,create
	push "im1"
	push 4
	push 7
	push 6
	push 9
	push 1
	push 0
	call imcheck,imgdrawline
	popax
	push "im1"
	push 6
	push 9
	push 10
	push 5
	push 1
	push 0
	call imcheck,imgdrawline
	popax
	delete im1
	call imcheck,hide
	end method
	method GUI51
	cthis getlock
	cmp0
	je l2989
	ret
l2989:
	cthis checked
	cmp0
	je l2991
	cthis uncheck
	jmp l2990
l2991:
	cthis check
l2990:
	end method
	method GUI52
	call imcheck,show
	end method
	method GUI53
	call imcheck,hide
	end method
	method GUI54
	call imcheck,isvisible
	end method
	method GUI55
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis move
	push $1
	push $2
	call imcheck,move
	end method
	method GUI56
	localint $1
	pop $1
	push $1
	cthis setz
	push $1
	call imcheck,setz
	end method
	end class

	class classmoddbg
	parent classlocker
	method init
	clparent classlocker,init
	new string,sstate
	push "init"
	pop sstate
	new int,ilastx
	new int,ilasty
	new text,txtpos
	push 5000
	call txtpos,setz
	push 0
	push 0
	call txtpos,setpos
	push 0
	push 0
	push 64
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpos,setbkg
	new text,txtmsg
	push 5000
	call txtmsg,setz
	push 220
	push igmoffsetx
	pop $b
	popax
	add $a,$b
	push 10
	call txtmsg,setpos
	push 0
	push 0
	push 500
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtmsg,setbkg
	call txtmsg,hide
	new timer,timmsg
	push 4000
	call timmsg,setdelay
	push "onfinish"
	push "classmoddbg0"
	call timmsg,addmethod
	new text,txtpod
	push 5000
	call txtpod,setz
	push 0
	push 0
	push 128
	push 16
	push 0
	push 0
	push 0
	push 192
	call txtpod,setbkg
	new img,impod
	new string,slastimpod
	push "null"
	pop slastimpod
	cthis disable
	end method
	method classmoddbg0
	call txtmsg,hide
	end method
	method enable
	cthis unlock
	call txtpos,show
	call txtpod,show
	end method
	method disable
	cthis lock
	call txtpos,hide
	call txtpod,hide
	call impod,hide
	end method
	method updatetxtpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "clcamera"
	call engine,varexist
	cmp0
	je l2993
	push ""
	push $1
	call clcamera,getposx
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push $2
	call clcamera,getposy
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	call txtpos,set
	jmp l2992
l2993:
	push ""
	push $1
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	call txtpos,set
l2992:
	push $1
	call txtpos,getw
	pop $b
	popax
	sub $a,$b
	call advmouse,lodx
	pop $b
	popax
	sub $a,$b
	push $2
	call txtpos,geth
	pop $b
	popax
	sub $a,$b
	call advmouse,lody
	pop $b
	popax
	sub $a,$b
	call txtpos,setpos
	push $1
	call txtpod,getw
	pop $b
	popax
	sub $a,$b
	call advmouse,lodx
	pop $b
	popax
	sub $a,$b
	push $2
	push 2
	call txtpod,geth
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	call advmouse,lody
	pop $b
	popax
	sub $a,$b
	call txtpod,setpos
	localstring $3
	push $1
	push $2
	push 1
	push 1
	push 2000
	popax
	sub 0,$a
	push 2000
	call engine,getimg
	pop $3
	push $3
	call txtpod,set
	push $3
	push "null"
	cmpje
	cmp0
	jne l2996
	push $3
	push "imgbkg"
	cmpje
	jmp l2997
l2995:
	push 0
	jmp l2997
l2996:
	push 1
l2997:
	cmp0
	je l2998
	call impod,hide
	jmp l2994
l2998:
	push $3
	call engine,varexist
	cmp0
	je l3000
	push $3
	push slastimpod
	cmpjne
	cmp0
	jne l3003
	push $3
	push slastimpod
	cmpje
	cmp0
	je l3004
	call impod,isvisible
	neg
	jmp l3006
l3004:
	push 0
	jmp l3006
l3005:
	push 1
l3006:
	cmp0
	jne l3003
	push $3
	spushs
	spop $a
	call [$a],getw
	call impod,getw
	cmpjne
	cmp0
	jne l3003
	push $3
	spushs
	spop $a
	call [$a],geth
	call impod,geth
	cmpjne
	jmp l3007
l3002:
	push 0
	jmp l3007
l3003:
	push 1
l3007:
	cmp0
	je l3008
	push $3
	spushs
	spop $a
	call [$a],getw
	push $3
	spushs
	spop $a
	call [$a],geth
	push 255
	push 255
	push 0
	push 64
	call impod,create
	call impod,show
	push 2010
	call impod,setz
	push $3
	pop slastimpod
l3008:
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	call impod,setpos
l3000:
l2994:
	call txtpos,getey
	push iResY
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l3010
	push 0
	push $2
	popax
	sub 0,$a
	call txtpos,move
	push 0
	push $2
	popax
	sub 0,$a
	call txtpod,move
l3010:
	call txtpod,getex
	push iResX
	pop $b
	popax
	sub $a,$b
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l3012
	push $1
	popax
	sub 0,$a
	push 0
	call txtpos,move
	push $1
	popax
	sub 0,$a
	push 0
	call txtpod,move
l3012:
	call txtpod,getpx
	popax
	sub 0,$a
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l3014
	push $1
	push 0
	call txtpos,move
	push $1
	push 0
	call txtpod,move
l3014:
	end method
	method msminit
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmmove
	localint $1
	localint $2
	pop $2
	pop $1
	push "clcamera"
	call engine,varexist
	cmp0
	je l3016
	push $1
	push ilastx
	pop $b
	popax
	sub $a,$b
	push $2
	push ilasty
	pop $b
	popax
	sub $a,$b
	call clcamera,moveplans
l3016:
	push $1
	push $2
	cthis updatetxtpos
	end method
	method msmove
	cthis getlock
	cmp0
	je l3018
	ret
l3018:
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	push "msm"
	push sstate
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $d
	cthis [$d]
	push $1
	pop ilastx
	push $2
	pop ilasty
	end method
	method mslclick
	cthis getlock
	cmp0
	je l3020
	ret
l3020:
	push "space"
	call keyboard,iskeydown
	cmp0
	je l3022
	push "move"
	pop sstate
l3022:
	end method
	method mslrel
	cthis getlock
	cmp0
	je l3024
	ret
l3024:
	push "init"
	pop sstate
	end method
	method msrclick
	localint $1
	call mouse,getpx
	pop $1
	localint $2
	call mouse,getpy
	pop $2
	localint $3
	push $1
	push $2
	push 1
	push 1
	call grbuts,isin
	pop $3
	push $3
	push 0
	cmpjne
	cmp0
	je l3026
	localstring $4
	push $3
	push 1
	pop $b
	popax
	sub $a,$b
	call grbuts,get
	pop $4
	call $4,print
l3026:
	end method
	method msg
	localstring $1
	pop $1
	call txtmsg,show
	push $1
	call txtmsg,set
	push igmoffsetx
	push 100
	pop $b
	popax
	add $a,$b
	push 10
	call txtmsg,setpos
	call timmsg,play
	end method
	method dbkeydown
	push igmdebug
	neg
	cmp0
	je l3028
	ret
l3028:
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l3030
	push "l"
	call keyboard,iskey
	cmp0
	je l3032
	localdef $1
	push "cache"
	pop $1
	push "1"
	call keyboard,iskeydown
	cmp0
	je l3034
	push "1"
	popax
	add $1,$a
	pop $1
	jmp l3033
l3034:
	push "2"
	call keyboard,iskeydown
	cmp0
	je l3036
	push "2"
	popax
	add $1,$a
	pop $1
	jmp l3035
l3036:
	push "3"
	call keyboard,iskeydown
	cmp0
	je l3038
	push "3"
	popax
	add $1,$a
	pop $1
	jmp l3037
l3038:
	push "4"
	call keyboard,iskeydown
	cmp0
	je l3040
	push "4"
	popax
	add $1,$a
	pop $1
	jmp l3039
l3040:
	push "5"
	call keyboard,iskeydown
	cmp0
	je l3042
	push "5"
	popax
	add $1,$a
	pop $1
	jmp l3041
l3042:
	push "6"
	call keyboard,iskeydown
	cmp0
	je l3044
	push "6"
	popax
	add $1,$a
	pop $1
	jmp l3043
l3044:
	push "7"
	call keyboard,iskeydown
	cmp0
	je l3046
	push "7"
	popax
	add $1,$a
	pop $1
	jmp l3045
l3046:
	push "8"
	call keyboard,iskeydown
	cmp0
	je l3048
	push "8"
	popax
	add $1,$a
	pop $1
	jmp l3047
l3048:
	push "9"
	call keyboard,iskeydown
	cmp0
	je l3050
	push "9"
	popax
	add $1,$a
	pop $1
l3050:
l3047:
l3045:
l3043:
l3041:
l3039:
l3037:
l3035:
l3033:
	push $1
	cthis _load_game
	push "game loaded from "
	push $1
	pop $b
	popax
	add $a,$b
	cthis msg
	jmp l3031
l3032:
	push "s"
	call keyboard,iskey
	cmp0
	je l3052
	localdef $1
	push "cache"
	pop $1
	cthis can_save
	cmp0
	je l3054
	push "1"
	call keyboard,iskeydown
	cmp0
	je l3056
	push "1"
	popax
	add $1,$a
	pop $1
	jmp l3055
l3056:
	push "2"
	call keyboard,iskeydown
	cmp0
	je l3058
	push "2"
	popax
	add $1,$a
	pop $1
	jmp l3057
l3058:
	push "3"
	call keyboard,iskeydown
	cmp0
	je l3060
	push "3"
	popax
	add $1,$a
	pop $1
	jmp l3059
l3060:
	push "4"
	call keyboard,iskeydown
	cmp0
	je l3062
	push "4"
	popax
	add $1,$a
	pop $1
	jmp l3061
l3062:
	push "5"
	call keyboard,iskeydown
	cmp0
	je l3064
	push "5"
	popax
	add $1,$a
	pop $1
	jmp l3063
l3064:
	push "6"
	call keyboard,iskeydown
	cmp0
	je l3066
	push "6"
	popax
	add $1,$a
	pop $1
	jmp l3065
l3066:
	push "7"
	call keyboard,iskeydown
	cmp0
	je l3068
	push "7"
	popax
	add $1,$a
	pop $1
	jmp l3067
l3068:
	push "8"
	call keyboard,iskeydown
	cmp0
	je l3070
	push "8"
	popax
	add $1,$a
	pop $1
	jmp l3069
l3070:
	push "9"
	call keyboard,iskeydown
	cmp0
	je l3072
	push "9"
	popax
	add $1,$a
	pop $1
l3072:
l3069:
l3067:
l3065:
l3063:
l3061:
l3059:
l3057:
l3055:
	push $1
	cthis _save_game
	push "game saved to "
	push $1
	pop $b
	popax
	add $a,$b
	cthis msg
	jmp l3053
l3054:
	push "could not save game to "
	push $1
	pop $b
	popax
	add $a,$b
	push " , sgmstate="
	pop $b
	popax
	add $a,$b
	push sgmstate
	pop $b
	popax
	add $a,$b
	cthis msg
l3053:
	jmp l3051
l3052:
	push "b"
	call keyboard,iskey
	cmp0
	je l3074
	call gameapi,getgamename
	spushs
	push "saves/cache.bmp"
	push 1
	spop $a
	call [$a],cgetscreenshoot
	push "screenshoot in saves/cache.bmp"
	cthis msg
	jmp l3073
l3074:
	push "p"
	call keyboard,iskey
	cmp0
	je l3076
	push "debugger: "
	cthis dprint
l3076:
l3073:
l3051:
l3031:
l3030:
	push "d"
	call keyboard,iskey
	cmp0
	je l3078
	cthis getlock
	cmp0
	je l3080
	cthis enable
	push "debug mode on: ^c-b: screenshoot, ^c-s: save, ^c-l: load, d: debug on/off"
	cthis msg
	jmp l3079
l3080:
	cthis disable
	push "debug mode off"
	cthis msg
l3079:
l3078:
	end method
	end class

	new classmoddbg,moddbg
	class TPainter
	method init
	end method
	method tinit
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	localstring $6
	localdef $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l3082
	push $1
	clparent GameController,init
l3082:
	cthis unlock
	push $2
	push "null"
	cmpjne
	cmp0
	je l3084
	push $2
	cthis setgraphpath
l3084:
	push $3
	push "null"
	cmpjne
	cmp0
	je l3086
	push "anbkg"
	push $3
	push 0
	cthis newanima
l3086:
	new int,paintmode
	push 0
	pop paintmode
	push "anbrush1"
	push $4
	push 3000
	cthis newanima
	push "anbrush1"
	push "anbrush2"
	cthis copyanima
	push 0
	push 1
	call anbrush2,setframe
	call anbrush1,getz
	push 1
	pop $b
	popax
	sub $a,$b
	call anbrush2,setz
	push "anbrush1"
	clparent anima_pack,resizemethods
	push "anbrush2"
	clparent anima_pack,resizemethods
	localint $9
	localint $10
	push $7
	spushs
	push "ru"
	cmpst
	jne l3088
	spop $a
	call anbrush2,getex
	pop $9
	call anbrush2,getpy
	pop $10
	jmp l3087
l3088:
	push "rd"
	cmpst
	jne l3089
	spop $a
	call anbrush2,getex
	pop $9
	call anbrush2,getey
	pop $10
	jmp l3087
l3089:
	push "ld"
	cmpst
	jne l3090
	spop $a
	call anbrush2,getpx
	pop $9
	call anbrush2,getey
	pop $10
	jmp l3087
l3090:
	spop $a
	call anbrush2,getpx
	pop $9
	call anbrush2,getpy
	pop $10
l3087:
	push $9
	push $10
	call anbrush1,saverelpos
	push $9
	push $10
	call anbrush2,saverelpos
	call mouse,hide
	push "anfg"
	push $5
	push 100
	cthis newanima
	push "foreground"
	push 0
	call anfg,setframe
	new gmimgvec,grdraw
	push "anfg"
	push "andraw"
	push "draw"
	call anfg,actionnr
	push "grdraw"
	cthis newanframesgr
	popax
	push 10
	call grdraw,setz
	push ".pyz"
	call $6,contains
	cmp0
	je l3092
	new gmimgvec,grpaleta
	push "grpaleta"
	push $6
	popax
	pop $b
	psax
	call [$b],operator<
	push 20
	call grpaleta,setz
	jmp l3091
l3092:
	push $6
	push "grpaleta"
	cmpjne
	cmp0
	je l3094
	push $6
	spushs
	push "grpaleta"
	spop $a
	call [$a],addtogamevars
l3094:
l3091:
	new int,_ibrx
	call anbrush2,getpx
	pop _ibrx
	new int,_ibry
	call anbrush2,getpy
	pop _ibry
l3095:
	push _ibrx
	push _ibry
	push 0
	push 1
	call anbrush2,isin
	neg
	cmp0
	je l3096
	add _ibrx,1
	pop _ibrx
	push _ibrx
	call anbrush2,getex
	cmpje
	cmp0
	je l3098
	call anbrush2,getpx
	pop _ibrx
	add _ibry,1
	pop _ibry
l3098:
	jmp l3095
l3096:
	call anbrush2,getpx
	popax
	sub _ibrx,$a
	pop _ibrx
	call anbrush2,getpy
	popax
	sub _ibry,$a
	pop _ibry
	clparent TPainter,tp_mouse_move
	push $8
	push "null"
	cmpjne
	cmp0
	je l3100
	new string,savefile
	push $8
	pop savefile
	new db,dbkolory
	push $8
	cthis saveexist
	cmp0
	je l3102
	push $8
	call dbkolory,vecload
	push "TPainter0"
	call grdraw,each
	jmp l3101
l3102:
	push "TPainter1"
	call grdraw,each
	cthis tp_savekols
l3101:
l3100:
	end method
	method TPainter0
	localdef $1
	pop $1
	push $1
	push 0
	call dbkolory,get
	push $1
	push 1
	call dbkolory,get
	push $1
	push 2
	call dbkolory,get
	push 255
	push paintmode
	cthis paint
	end method
	method TPainter1
	localdef $1
	pop $1
	cthis white
	push 255
	push paintmode
	cthis paint
	push "255 255 255"
	push " "
	call dbkolory,dbaddstringrow
	end method
	method game_exit
	call mouse,show
	clparent GameController,game_exit
	end method
	method tp_exit
	call mouse,show
	end method
	method tp_mouse_move
	call anbrush1,mssetrelpos
	call anbrush2,mssetrelpos
	end method
	method tp_mouse_lclick
	cthis getlock
	neg
	cmp0
	je l3104
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	call grdraw,isin
	cmp0
	je l3106
	call grdraw,getsfound
	spushs
	call anbrush2,getpx
	push _ibrx
	pop $b
	popax
	add $a,$b
	call anbrush2,getpy
	push _ibry
	pop $b
	popax
	add $a,$b
	call anbrush2,getrgba
	push paintmode
	spop $a
	call [$a],paint
	cthis onpaint
	jmp l3105
l3106:
	push $1
	push $2
	push 0
	push 1
	call grpaleta,isin
	cmp0
	je l3108
	localdef $3
	localdef $4
	localdef $5
	localdef $6
	call grpaleta,getsfound
	spushs
	push $1
	push $2
	spop $a
	call [$a],getrgba
	pop $6
	pop $5
	pop $4
	pop $3
	push 255
	pop $6
	push $3
	push $4
	push $5
	push $6
	push paintmode
	call anbrush2,paint
	cthis onsetbrush
l3108:
l3105:
l3104:
	end method
	method tp_savekols
	push GAME
	spushs
	push "dbkolory"
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l3110
	ret
l3110:
	push "TPainter2"
	call grdraw,each
	push savefile
	call dbkolory,vecsave
	end method
	method TPainter2
	localdef $1
	pop $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	cthis getex
	pop $6
	localint $7
	cthis getey
	pop $7
	localint $8
	cthis getpx
	pop $8
	localint $9
	cthis getpy
	pop $9
l3111:
	push $8
	push $6
	cmpjne
	cmp0
	je l3112
	push $9
	push $7
	cmpjne
	jmp l3114
l3112:
	push 0
	jmp l3114
l3113:
	push 1
l3114:
	cmp0
	je l3115
	push $8
	push $9
	push 0
	push 1
	cthis isin
	cmp0
	je l3117
	push $8
	pop $2
	push $9
	pop $3
	push $6
	pop $8
	jmp l3116
l3117:
	add $8,1
	pop $8
l3116:
	jmp l3111
l3115:
	push $2
	push $3
	cthis getrgba
	popax
	pop $4
	pop $3
	pop $2
	push $1
	push 0
	push $2
	call dbkolory,set
	push $1
	push 1
	push $3
	call dbkolory,set
	push $1
	push 2
	push $4
	call dbkolory,set
	end method
	method tp_default_erase
	cthis white
	push 255
	cthis tp_erase
	end method
	method tp_erase
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l3118:
	push $5
	call grdraw,size
	cmpjl
	cmp0
	je l3119
	jmp l3121
l3120:
	add $5,1
	pop $5
	jmp l3118
l3121:
	push $5
	call grdraw,get
	spushs
	push $1
	push $2
	push $3
	push $4
	push paintmode
	spop $a
	call [$a],paint
	push $5
	push 0
	push 255
	call dbkolory,set
	push $5
	push 1
	push 255
	call dbkolory,set
	push $5
	push 2
	push 255
	call dbkolory,set
	jmp l3120
l3119:
	cthis tp_savekols
	end method
	end class

	class TPainterCon
	parent TPainter
	parent GameController
	method init
	end method
	end class

	new string,sAskerGame
	new int,idymekdelay
	push 300
	pop idymekdelay
	new int,bHorizon
	push "bHorizon:"
	push 1
	cthis readcfg
	pop bHorizon
	class StdGame
	parent classadv
	parent Localize
	method init
	localstring $1
	pop $1
	push 0
	pop AdventureGame
	push $1
	clparent classadv,init
	clparent Localize,init
	push $1
	cthis path=
	call advmouse,setstd
	push PrzygodaMode
	cmp0
	je l3123
	cthis advsaveonstart
	cthis advsave_game
l3123:
	end method
	method loadasker
	push bHorizon
	cmp0
	je l3125
	push "$scripts/common/asker.pyz"
	cthis _loadasker
	jmp l3124
l3125:
	push "$scripts/common/asker_pion.pyz"
	cthis _loadasker
l3124:
	end method
	method _loadasker
	localstring $1
	pop $1
	push $1
	push "anasker"
	cthis _loadasker2
	end method
	method _loadasker2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "bg"
	pop $b
	popax
	add $a,$b
	push $1
	push 1990
	cthis newanima
	push $2
	push "bg"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	push $2
	push "bg"
	pop $b
	popax
	add $a,$b
	push $2
	push "yes"
	pop $b
	popax
	add $a,$b
	cthis copyanima
	push $2
	push "yes"
	pop $b
	popax
	add $a,$b
	spushs
	push "yes"
	push 0
	spop $a
	call [$a],setframe
	push $2
	push "bg"
	pop $b
	popax
	add $a,$b
	push $2
	push "no"
	pop $b
	popax
	add $a,$b
	cthis copyanima
	push $2
	push "no"
	pop $b
	popax
	add $a,$b
	spushs
	push "no"
	push 0
	spop $a
	call [$a],setframe
	push $2
	push "yes"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],Button_std
	push $2
	push "yes"
	pop $b
	popax
	add $a,$b
	spushs
	push "butclick"
	push "StdGame0"
	spop $a
	call [$a],addmethod
	push $2
	push "no"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],Button_std
	push $2
	push "no"
	pop $b
	popax
	add $a,$b
	spushs
	push "butclick"
	push "StdGame1"
	spop $a
	call [$a],addmethod
	push $2
	push "yes"
	pop $b
	popax
	add $a,$b
	call butgame,add
	push $2
	push "no"
	pop $b
	popax
	add $a,$b
	call butgame,add
	end method
	method StdGame0
	push "preclick_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sgmstate
	push "state_askexit"
	cmpje
	cmp0
	je l3127
	push sAskerGame
	push "null"
	cmpjne
	cmp0
	je l3129
	push sAskerGame
	push "exit"
	cmpje
	cmp0
	je l3131
	push "state_exitgame"
	pop sgmstate
	push 0
	call ccs,benableloading=
	cthis closexit
	jmp l3130
l3131:
	push sAskerGame
	cthis stdexit
l3130:
	jmp l3128
l3129:
	cthis Button_butclick
l3128:
l3127:
	end method
	method StdGame1
	push "preclick_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sgmstate
	push "state_askexit"
	cmpje
	cmp0
	je l3133
	push GAME
	spushs
	push "butclick_"
	cthis getname
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],hasmet
	cmp0
	je l3135
	localdef $1
	push "Button_butclick"
	pop $1
	jmp l3134
l3135:
	localdef $1
	push "advsetstdstate"
	pop $1
l3134:
	localdef $2
	cthis getname
	spushs
	push 2
	spop $h
	call $h,strsube
	pop $2
	push $2
	push "bg"
	pop $b
	popax
	add $a,$b
	spushs
	push idymekdelay
	push "null"
	spop $a
	call [$a],anzoomout
	push $2
	push "yes"
	pop $b
	popax
	add $a,$b
	spushs
	push idymekdelay
	push "null"
	spop $a
	call [$a],anzoomout
	push $2
	push "no"
	pop $b
	popax
	add $a,$b
	spushs
	push idymekdelay
	push $1
	spop $a
	call [$a],anzoomout
l3133:
	end method
	method closexit
	call ccs,buildblack
	push "StdGame2"
	call ccs,close
	end method
	method StdGame2
	call gameapi,exit
	end method
	method showasker
	push "anasker"
	cthis _showasker
	end method
	method _showasker
	localstring $1
	pop $1
	push "state_askexitstart"
	pop sgmstate
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	spushs
	push idymekdelay
	push "StdGame3"
	spop $a
	call [$a],anzoomin
	push $1
	push "yes"
	pop $b
	popax
	add $a,$b
	spushs
	push idymekdelay
	push "null"
	spop $a
	call [$a],anzoomin
	push $1
	push "no"
	pop $b
	popax
	add $a,$b
	spushs
	push idymekdelay
	push "null"
	spop $a
	call [$a],anzoomin
	end method
	method StdGame3
	push "state_askexit"
	pop sgmstate
	push "asker_"
	cthis getname
	spushs
	push "bg"
	spop $a
	call $a,strsubes
	pop $b
	popax
	add $a,$b
	push "_shown"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method askfor
	localstring $1
	pop $1
	push $1
	pop sAskerGame
	cthis showasker
	end method
	method skipenter
	push "GAME_skipenter"
	call clsave,bset
	end method
	method stdenter
	push "GAME_skipenter"
	call clsave,bis
	cmp0
	je l3137
	push "GAME_skipenter"
	call clsave,bunset
	cthis refreshstdstate
	jmp l3136
l3137:
	push "refreshstdstate"
	call ccs,enter
l3136:
	end method
	method refreshstdstate
	cthis advsetstdstate
	call butgame,refresh
	end method
	method timfinito
	push GAME
	spushs
	push "_timfinito"
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l3139
	push GAME
	spushs
	push "_timfinito"
	push 1000
	push "StdGame4"
	spop $a
	call [$a],timer=
l3139:
	call _timfinito,play
	end method
	method StdGame4
	cthis advstdstate
	cmp0
	je l3141
	cthis mend
l3141:
	end method
	method Button_stdoff
	push "butmoveoff"
	push "StdGame5"
	cthis addmethod
	end method
	method StdGame5
	cthis advstdstate
	cmp0
	je l3143
	call advmouse,setstd
l3143:
	end method
	method buildfadebut
	localint $1
	pop $1
	localdef $2
	cthis getname
	push "_copy"
	pop $b
	popax
	add $a,$b
	pop $2
	push GAME
	spushs
	cthis getname
	push $2
	spop $a
	call [$a],copyanima
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	push $2
	spushs
	spop $a
	call [$a],hide
	push $1
	cmp0
	je l3145
	cthis Button_isinalpha
	jmp l3144
l3145:
	cthis Button_isin
l3144:
	push "sanbutcopy"
	push $2
	cthis var2
	push "butmoveon"
	push "StdGame6"
	cthis addmethod
	push "butmoveoff"
	push "StdGame7"
	cthis addmethod
	cthis Button_stdclick
	cthis getname
	call butgame,add
	end method
	method StdGame6
	cthis advstdstate
	cmp0
	je l3147
	call advmouse,setact
	push sanbutcopy
	spushs
	push 300
	push "null"
	spop $a
	call [$a],anfadein
l3147:
	cthis Button_butmoveon
	end method
	method StdGame7
	call advmouse,setstd
	push sanbutcopy
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l3149
	push sanbutcopy
	spushs
	push 300
	push "hide"
	spop $a
	call [$a],anfadeout
l3149:
	cthis Button_butmoveoff
	end method
	method crect
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push igmoffsetx
	call $1,igetsc
	pop $b
	popax
	add $a,$b
	push igmoffsety
	call $2,igetsc
	pop $b
	popax
	add $a,$b
	push igmoffsetx
	push iResX
	pop $b
	popax
	add $a,$b
	call $3,igetsc
	pop $b
	popax
	sub $a,$b
	push igmoffsety
	push iResY
	pop $b
	popax
	add $a,$b
	call $4,igetsc
	pop $b
	popax
	sub $a,$b
	new Rect,rec
	end method
	method mkchmura
	localstring $1
	localreal $2
	pop $2
	pop $1
	localdef $3
	push "canmov"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	push $1
	push $2
	push 0
	spop $e
	new AnMover,[$e]
	push $3
	spushs
	spop $a
	call [$a],enableroll
	push $3
	spushs
	spop $a
	call [$a],play
	end method
	method mkfxset
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l3150:
	push $4
	push $2
	cmpjl
	cmp0
	je l3151
	jmp l3153
l3152:
	add $4,1
	pop $4
	jmp l3150
l3153:
	localdef $5
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	cthis newsfx
	push $5
	spushs
	push $3
	spop $a
	call [$a],setvol
	jmp l3152
l3151:
	push "_icnt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new int,[$e]
	push 0
	pop [$e]
	push "_ilecnt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new int,[$e]
	push $2
	pop [$e]
	end method
	method fxsetplay
	localstring $1
	pop $1
	localstring $2
	push "_icnt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	popax
	mov $a,[$a]
	psax
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],play
	push $2
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	push 1
	pop $b
	popax
	add $a,$b
	push "_ilecnt"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	pop $b
	popax
	div $a,$b
	push $d
	spop $b
	popax
	mov [$b],$a
	end method
	method newtxtbut
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push "_fntbutpom"
	push sgmfontfile
	push 14
	spushs
	spop $h
	call $h,igetsc
	cthis newfont
	push "_txtbutpom"
	push $2
	push "_fntbutpom"
	push 16
	cthis grey
	cthis newtext
	push $1
	spushs
	push 1.2
	call _txtbutpom,getw
	pop $b
	popax
	mul $a,$b
	push 1.2
	call _txtbutpom,geth
	pop $b
	popax
	mul $a,$b
	push 192
	cthis grey
	push 255
	spop $a
	call [$a],create
	localdef $3
	push $1
	push "_clicked"
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new img,[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],imgclone
	push $1
	spushs
	push 2
	cthis white
	push 128
	push "1001"
	spop $a
	call [$a],imgborderss
	push $1
	spushs
	push 2
	cthis black
	push 128
	push "0110"
	spop $a
	call [$a],imgborderss
	push $3
	spushs
	push 2
	cthis black
	push 128
	push "1001"
	spop $a
	call [$a],imgborderss
	push $3
	spushs
	push 2
	cthis white
	push 128
	push "0110"
	spop $a
	call [$a],imgborderss
	push $1
	call _txtbutpom,txtcenter
	push $1
	spushs
	push "_txtbutpom"
	spop $a
	call [$a],blit
	push $1
	spushs
	spop $a
	call [$a],Button_isin
	push $1
	spushs
	push "butlrel"
	push "StdGame8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "butclick"
	push "StdGame9"
	spop $a
	call [$a],addmethod
	push 1
	push 1
	call _txtbutpom,move
	push $3
	spushs
	push "_txtbutpom"
	spop $a
	call [$a],blit
	push $3
	spushs
	spop $a
	call [$a],hide
	localdef $4
	push $1
	push "_timer"
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push 250
	push "StdGame10"
	cthis timer=
	push $4
	spushs
	push A
	push "sbutton"
	push $1
	push "sbutton2"
	push $3
	spop $a
	call [$a],vars2
	push $1
	call butgame,add
	delete _txtbutpom
	delete _fntbutpom
	end method
	method StdGame8
	push "null"
	call butgame,sclicked=
	cthis getname
	push "_timer"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],isplaying
	neg
	cmp0
	je l3155
	cthis getname
	push "_clicked"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
l3155:
	end method
	method StdGame9
	localdef $1
	cthis getname
	push "_timer"
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	cmp0
	je l3157
	push $1
	spushs
	spop $a
	call [$a],play
	localdef $2
	cthis getname
	push "_clicked"
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	cthis getpx
	cthis getpy
	spop $a
	call [$a],setpos
	push $2
	spushs
	spop $a
	call [$a],show
	push $2
	spushs
	cthis getz
	spop $a
	call [$a],setz
	cthis Button_butclick
l3157:
	end method
	method StdGame10
	call butgame,sclicked
	push sbutton
	cmpjne
	cmp0
	je l3159
	push sbutton2
	spushs
	spop $a
	call [$a],hide
l3159:
	end method
	method key_down
	push igmdebug
	cmp0
	je l3161
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l3161
	push "r"
	call keyboard,iskey
	jmp l3163
l3161:
	push 0
	jmp l3163
l3162:
	push 1
l3163:
	cmp0
	je l3164
	cthis crestart
l3164:
	end method
	end class

	new classgamepause,clpause
	class classplacepointer2
	parent classplacepointer
	method init
	clparent classplacepointer,init
	push "scripts/common/strzalka.pyz"
	cthis load
	end method
	end class

	push "MainLoader"
	call gameapi,play
	game MainLoader
	parent StdGame
	method init
	push "mainloader"
	clparent StdGame,init
	push "modadv"
	call engine,varexist
	cmp0
	je l3166
	push "scripts/scripts/defaults.adv"
	call modadv,load
	push "scripts/scripts/sounds.db"
	call modadv,loadsounds
	push "snd"
	call modadv,settalktype
	push "scripts/scripts/initscript.dsc"
	call modadv,loadscript
l3166:
	push "global.txt"
	call clsave,load
	cthis getname
	pop sgmlastscene
	push "startgame:"
	call dbconf,dbget
	call gameapi,play
	end method
	end game

	class HwarsStd
	parent StdGame
	method init
	localstring $1
	pop $1
	push $1
	clparent StdGame,init
	end method
	end class

	class HWarsUnit
	method init
	end method
	end class

	game HWarsGame
	parent HwarsStd
	method init
	push "hwars"
	clparent HwarsStd,init
	end method
	end game

	game HWarsEdytor
	parent HwarsStd
	method init
	push "hwars"
	clparent HwarsStd,init
	new int,ifontgui
	push 15
	pop ifontgui
	push "butgui"
	push ifontgui
	new GUI,gui
	call gui,calcmonowidth
	call gui,unlock
	new int,iterrainz
	push 25
	pop iterrainz
	new int,iterobjz
	push 40
	pop iterobjz
	new int,iunitz
	push 45
	pop iunitz
	new int,ipanelz
	push 50
	pop ipanelz
	new int,iguiz
	push 100
	pop iguiz
	new string,sactcolor
	push "red"
	pop sactcolor
	push 1
	call clsave,saveonset=
	call clsave,stdload
	new img,imgbg
	push igmappw
	push igmapph
	cthis white
	push 255
	call imgbg,create
	push A
	push "hexy.pyz 5"
	push "ramka.pyz 6"
	push "hexyfunc.pyzH"
	push "iko_field.pyzH"
	cthis imgs=
	push iterrainz
	push 1
	pop $b
	popax
	sub $a,$b
	call anhexyfunc,setz
	push "anhexyfunc"
	push "anselecthex"
	cthis copyanima
	push iterobjz
	push 1
	pop $b
	popax
	sub $a,$b
	call anselecthex,setz
	push A
	push "selected"
	push "null"
	call anselecthex,vars2
	push "frame"
	push 0
	call anselecthex,setframe
	push iunitz
	call aniko_field,setz
	new DelayMover,cmov
	push 1
	call cmov,b2clicks=
	call cmov,unlock
	localdef $1
	push 3
	pop $1
	new int,yhexy
	call anhexy,geth
	push $1
	pop $b
	popax
	add $a,$b
	pop yhexy
	new int,hhex
	push 3
	call anhexy,geth
	pop $b
	popax
	mul $a,$b
	push 4
	pop $b
	popax
	div $a,$b
	psax
	pop hhex
	new int,xstarthex
	call anhexy,getw
	popax
	sub 0,$a
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop xstarthex
	new gmimgvec,grels
	new gmimgvec,grhex
	new gmimgvec,gramka
	new gmimgvec,grobs
	new gmimgvec,grunits
	new gmimgvec,grikounits
	new gmimgvec,grhexfunc
	new int,iminrows
	push 9
	pop iminrows
	new int,imincols
	push 11
	pop imincols
	new int,iilerows
	push iminrows
	pop iilerows
	new int,iilecols
	push imincols
	pop iilecols
	localint $2
	push 0
	pop $2
l3167:
	push $2
	push iilerows
	cmpjl
	cmp0
	je l3168
	jmp l3170
l3169:
	add $2,1
	pop $2
	jmp l3167
l3170:
	localint $3
	push 0
	pop $3
l3171:
	push $3
	push iilecols
	cmpjl
	cmp0
	je l3172
	jmp l3174
l3173:
	add $3,1
	pop $3
	jmp l3171
l3174:
	push $2
	push $3
	cthis mbuildhex
	jmp l3173
l3172:
	jmp l3169
l3168:
	call anramka,hide
	localdef $4
	push 100
	pop $4
	localdef $5
	push 20
	pop $5
	push "begin"
	push "File"
	push "Terrains"
	push "Units"
	push "Map"
	push "Scenario"
	push "vm1"
	cthis mvec
	push "begin"
	push "Save Map"
	push "Load Map"
	push "Bg Map"
	push "Quit"
	push "vfile"
	cthis mvec
	push "begin"
	push "brzegi"
	push "drzewa"
	push "drogi"
	push "rzeki"
	push "krawedzie"
	push "bld1"
	push "bld2"
	push "bld3"
	push "bld4"
	push "vter"
	cthis mvec
	push "begin"
	push "ancient"
	push "vunit"
	cthis mvec
	push "begin"
	push "Grid on/off"
	push "Add Rows"
	push "Add Cols"
	push "Show miniature"
	push "vmap"
	cthis mvec
	push "begin"
	push "Set Red"
	push "Set Blue"
	push "Set City"
	push "vscen"
	cthis mvec
	push "menu1"
	push $4
	push $5
	push "vm1"
	push "vertical"
	call gui,newsubmenu
	push iguiz
	call menu1,setz
	call menu1,hide
	push "butshowmenu"
	push "menu on/off"
	push 80
	push 30
	call gui,newbutton
	push $1
	push $1
	call butshowmenu,setpos
	push $1
	call butshowmenu,geth
	push $1
	pop $b
	popax
	add $a,$b
	call menu1,move
	push iguiz
	call butshowmenu,setz
	push "menu1"
	push 0
	push "menufile"
	push "vfile"
	call gui,addsubmenu
	push "menu1"
	push 1
	push "menuterrains"
	push "vter"
	call gui,addsubmenu
	push "menu1"
	push 2
	push "menuunits"
	push "vunit"
	call gui,addsubmenu
	push "menu1"
	push 3
	push "menumap"
	push "vmap"
	call gui,addsubmenu
	push "menu1"
	push 4
	push "menuscen"
	push "vscen"
	call gui,addsubmenu
	new img,imleftpanel
	push $4
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push yhexy
	push 236
	cthis grey
	push 255
	call imleftpanel,create
	push "grhex"
	call grels,add
	push "gramka"
	call grels,add
	push "grobs"
	call grels,add
	push "grunits"
	call grels,add
	push "grikounits"
	call grels,add
	push "grhexfunc"
	call grels,add
	push "anselecthex"
	call grels,add
	push 0
	push yhexy
	call grels,move
	push ipanelz
	call imleftpanel,setz
	new img,imupanel
	push igmappw
	call imleftpanel,getw
	pop $b
	popax
	sub $a,$b
	push yhexy
	cthis white
	push 255
	call imupanel,create
	call imleftpanel,getw
	push 0
	call imupanel,move
	push ipanelz
	call imupanel,setz
	new gmimgvec,grall
	localint $6
	push 0
	pop $6
l3175:
	push $6
	call vter,size
	cmpjl
	cmp0
	je l3176
	jmp l3178
l3177:
	add $6,1
	pop $6
	jmp l3175
l3178:
	localdef $7
	push "ter_"
	push $6
	call vter,get
	pop $b
	popax
	add $a,$b
	pop $7
	localdef $8
	push "gr"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	cthis getgraphpath
	push $7
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l3180
	push $8
	spushs
	spop $e
	new gmimgvec,[$e]
	push $8
	push $7
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator<
	push $8
	call grall,add
	push $6
	call vter,get
	spushs
	push 0
	push 4
	spop $h
	call $h,getb
	spushs
	spop $h
	call $h,moneonly
	neg
	cmp0
	je l3182
	push $8
	spushs
	push "HWarsEdytor0"
	spop $a
	call [$a],each
	jmp l3181
l3182:
	push $8
	spushs
	push "msetaspanelobj"
	spop $a
	call [$a],each
l3181:
l3180:
	jmp l3177
l3176:
	localint $6
	push 0
	pop $6
l3183:
	push $6
	call vunit,size
	cmpjl
	cmp0
	je l3184
	jmp l3186
l3185:
	add $6,1
	pop $6
	jmp l3183
l3186:
	localdef $7
	push "uni_"
	push $6
	call vunit,get
	pop $b
	popax
	add $a,$b
	pop $7
	localdef $8
	push "gr"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	cthis getgraphpath
	push $7
	pop $b
	popax
	add $a,$b
	push ".pyz"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l3188
	push $8
	spushs
	spop $e
	new gmimgvec,[$e]
	push $8
	push $7
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator<
	push $8
	call grall,add
	push $8
	spushs
	push "msetaspanelobj"
	spop $a
	call [$a],each
l3188:
	jmp l3185
l3184:
	new string,sactterrainunit
	push "null"
	pop sactterrainunit
	call butgui,sort
	new int,irewspeed
	push 20
	pop irewspeed
	push "timkeyboard"
	push "HWarsEdytor1"
	cthis cycle=
	call timkeyboard,play
	new gmimgvec,grmap
	new int,iidterrain
	push 0
	pop iidterrain
	new int,ilasterrainx
	new int,ilasterrainy
	push 40
	pop $5
	push "ttfile"
	push "0a._"
	push 300
	push $5
	call gui,newtextline
	call ttfile,mttpos
	push "edytor_filemap"
	call clsave,has
	cmp0
	je l3221
	push "edytor_filemap"
	call clsave,get
	call ttfile,txtset
l3221:
	push "ttfilebg"
	push "0a._"
	push 300
	push $5
	call gui,newtextline
	call ttfilebg,mttpos
	push "edytor_filebgmap"
	call clsave,has
	cmp0
	je l3223
	push "edytor_filebgmap"
	call clsave,get
	call ttfilebg,txtset
l3223:
	push "ttrows"
	push "0a._"
	push 80
	push $5
	call gui,newtextline
	call ttrows,mttpos
	push "ttcols"
	push "0a._"
	push 80
	push $5
	call gui,newtextline
	call ttcols,mttpos
	push 0
	push $5
	push $1
	pop $b
	popax
	add $a,$b
	call ttcols,winmove
	cthis msetttsize
	new string,shexex
	cthis mfindhexex
	pop shexex
	new img,imgmap
	new img,imgminimap
	push igmappw
	push igmapph
	cthis black
	push 192
	call imgminimap,create
	call imgminimap,hide
	new img,imgbgmap
	push "imgbgmap"
	call grels,add
	cthis advsetstdstate
	end method
	method HWarsEdytor0
	localdef $1
	pop $1
	cthis hide
	call imupanel,getpx
	push 5
	pop $b
	popax
	add $a,$b
	push $1
	call anhexy,getw
	push 3
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	call anhexy,geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setpos
	cthis mterpanel
	push A
	push "imyposx"
	cthis getposx
	push "imyposy"
	cthis getposy
	cthis vars2
	end method
	method HWarsEdytor1
	cthis advstdstate
	cmp0
	je l3190
	cthis misinpanel
	cmp0
	je l3192
	push "left"
	call keyboard,iskeydown
	cmp0
	je l3194
	push sactterrainunit
	push "null"
	cmpjne
	cmp0
	je l3196
	push sactterrainunit
	spushs
	spop $a
	call [$a],first
	spushs
	spop $a
	call [$a],getpx
	call imleftpanel,getex
	cmpjl
	jmp l3198
l3196:
	push 0
	jmp l3198
l3197:
	push 1
l3198:
	cmp0
	je l3199
	push sactterrainunit
	spushs
	push irewspeed
	push 0
	spop $a
	call [$a],move
l3199:
	jmp l3193
l3194:
	push "right"
	call keyboard,iskeydown
	cmp0
	je l3201
	push sactterrainunit
	push "null"
	cmpjne
	cmp0
	je l3203
	push sactterrainunit
	spushs
	spop $a
	call [$a],last
	spushs
	spop $a
	call [$a],getex
	push igmappw
	cmpja
	jmp l3205
l3203:
	push 0
	jmp l3205
l3204:
	push 1
l3205:
	cmp0
	je l3206
	push sactterrainunit
	spushs
	push irewspeed
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
l3206:
l3201:
l3193:
	jmp l3191
l3192:
	localint $1
	push 0
	pop $1
	localint $2
	push 0
	pop $2
	push "left"
	call keyboard,iskeydown
	cmp0
	je l3208
	push irewspeed
	pop $1
	jmp l3207
l3208:
	push "right"
	call keyboard,iskeydown
	cmp0
	je l3210
	push irewspeed
	popax
	sub 0,$a
	pop $1
l3210:
l3207:
	push "up"
	call keyboard,iskeydown
	cmp0
	je l3212
	push irewspeed
	pop $2
	jmp l3211
l3212:
	push "down"
	call keyboard,iskeydown
	cmp0
	je l3214
	push irewspeed
	popax
	sub 0,$a
	pop $2
l3214:
l3211:
	push $1
	cmp0
	jne l3217
	push $2
	jmp l3218
l3216:
	push 0
	jmp l3218
l3217:
	push 1
l3218:
	cmp0
	je l3219
	push $1
	push $2
	cthis movemap
l3219:
l3191:
l3190:
	cthis play
	end method
	method msetaspanelobj
	localint $1
	pop $1
	cthis hide
	call imupanel,getpx
	push 5
	pop $b
	popax
	add $a,$b
	push $1
	call anhexy,getw
	push 3
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	push 0
	cthis move
	cthis mterpanel
	push A
	push "imyposx"
	cthis getposx
	push "imyposy"
	cthis getposy
	cthis vars2
	end method
	method msetttsize
	push iilerows
	call ttrows,txtset
	push iilecols
	call ttcols,txtset
	end method
	method mttpos
	push 1
	pop insystem
	push igmappw
	cthis getname
	push "wnd"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0.33
	push igmapph
	pop $b
	popax
	mul $a,$b
	cthis winmove
	push iguiz
	cthis winsetz
	cthis winhide
	cthis disable
	end method
	method mfindhexex
	call grhex,last
	spushs
	spop $a
	call [$a],getex
	call grhex,size
	push iilecols
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	call grhex,get
	spushs
	spop $a
	call [$a],getex
	cmpjl
	cmp0
	je l3225
	call grhex,last
	jmp l3224
l3225:
	call grhex,size
	push iilecols
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	sub $a,$b
	call grhex,get
l3224:
	end method
	method mkmap
	push GAME
	spushs
	spop $a
	call [$a],HWarsEdytor2
	end method
	method HWarsEdytor2
	new img,imgpomap
	localdef $1
	call grhex,first
	pop $1
	localdef $2
	call grhex,last
	pop $2
	localint $3
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getpy
	push hhex
	pop $b
	popax
	add $a,$b
	pop $4
	push shexex
	spushs
	spop $a
	call [$a],getex
	push $3
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpy
	push hhex
	pop $b
	popax
	add $a,$b
	push $4
	pop $b
	popax
	sub $a,$b
	cthis black
	push 255
	call imgpomap,create
	push $3
	push $4
	call imgpomap,setpos
	push "imgpomap"
	call grhex,blitto
	push "imgpomap"
	call grhexfunc,blitto
	push "imgpomap"
	call grobs,blitto
	push "imgpomap"
	call grunits,blitto
	localreal $5
	push 0.7
	push igmappw
	pop $b
	popax
	mul $a,$b
	call imgpomap,getw
	pop $b
	popax
	div $a,$b
	psax
	push 0.7
	push igmapph
	pop $b
	popax
	mul $a,$b
	call imgpomap,geth
	pop $b
	popax
	div $a,$b
	psax
	cthis min
	pop $5
	push "imgpomap"
	push $5
	call imgmap,imgclonezoom
	push iguiz
	push 10
	pop $b
	popax
	add $a,$b
	call imgmap,setz
	call imgmap,getz
	push 1
	pop $b
	popax
	sub $a,$b
	call imgminimap,setz
	call imgminimap,show
	call imgpomap,delete_internals
	delete imgpomap
	end method
	method movemap
	localint $1
	localint $2
	pop $2
	pop $1
	localdef $3
	call grhex,first
	pop $3
	localdef $4
	call grhex,last
	pop $4
	push $1
	push $2
	call grels,move
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	push $1
	push 0
	cmpja
	cmp0
	je l3227
	push $3
	spushs
	spop $a
	call [$a],getpx
	push 0
	cmpja
	cmp0
	je l3229
	push $3
	spushs
	spop $a
	call [$a],getpx
	popax
	sub 0,$a
	pop $5
l3229:
	jmp l3226
l3227:
	push shexex
	spushs
	spop $a
	call [$a],getex
	push igmappw
	cmpjl
	cmp0
	je l3231
	push igmappw
	push shexex
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	pop $5
l3231:
l3226:
	push $2
	push 0
	cmpja
	cmp0
	je l3233
	push $3
	spushs
	spop $a
	call [$a],getpy
	push yhexy
	push hhex
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l3235
	push yhexy
	push hhex
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $6
l3235:
	jmp l3232
l3233:
	push $4
	spushs
	spop $a
	call [$a],getpy
	push hhex
	pop $b
	popax
	add $a,$b
	push igmapph
	cmpjl
	cmp0
	je l3237
	push igmapph
	push $4
	spushs
	spop $a
	call [$a],getpy
	push hhex
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	sub $a,$b
	pop $6
l3237:
l3232:
	push $5
	cmp0
	jne l3240
	push $6
	jmp l3241
l3239:
	push 0
	jmp l3241
l3240:
	push 1
l3241:
	cmp0
	je l3242
	push $5
	push $6
	call grels,move
l3242:
	end method
	method mvec
	localstring $1
	pop $1
	push $1
	spushs
	spop $e
	new vector,[$e]
	push $1
	spushs
	push "string"
	spop $a
	call [$a],type
	push $1
	spushs
	spop $a
	call [$a],beginadd
	end method
	method mterpanel
	push ipanelz
	cthis setz
	call imupanel,getpx
	push 0
	push igmappw
	call imupanel,getey
	cthis clip
	end method
	method mtercopy
	localstring $1
	pop $1
	localstring $2
	call $1,misunit
	cmp0
	je l3244
	push "imguni"
	push iidterrain
	pop $b
	popax
	add $a,$b
	pop $2
	jmp l3243
l3244:
	push "imgter"
	push iidterrain
	pop $b
	popax
	add $a,$b
	pop $2
l3243:
	add iidterrain,1
	pop iidterrain
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	spop $a
	call [$a],setframe
	push $2
	spushs
	push A
	push "sanima"
	push $1
	push "shex"
	push "null"
	spop $a
	call [$a],vars2
	push $2
	end method
	method cmov_GET
	cthis advstdstate
	cmp0
	je l3246
	call gui,isstdclicked
	neg
	cmp0
	je l3246
	push sactterrainunit
	push "null"
	cmpjne
	cmp0
	je l3246
	push sactterrainunit
	spushs
	call mouse,getpos
	push 1
	push 0
	spop $a
	call [$a],isincut
	jmp l3248
l3246:
	push 0
	jmp l3248
l3247:
	push 1
l3248:
	cmp0
	je l3249
	localstring $1
	push sactterrainunit
	spushs
	spop $a
	call [$a],getsfound
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getposx
	pop ilasterrainx
	push $1
	spushs
	spop $a
	call [$a],getposy
	pop ilasterrainy
	push $1
	spushs
	push 500
	spop $a
	call [$a],setz
	push $1
	spushs
	spop $a
	call [$a],anclipscreen
	push $1
	cthis mssetobj
l3249:
	end method
	method misinpanel
	call mouse,getpy
	call imupanel,getey
	cmpjl
	end method
	method cmov_PUT
	cthis advstdstate
	cmp0
	je l3251
	cthis misinpanel
	cmp0
	je l3253
	localdef $1
	cthis getfree
	pop $1
	push $1
	spushs
	spop $a
	call [$a],mobrettopanel
	push $1
	spushs
	spop $a
	call [$a],mterpanel
	jmp l3252
l3253:
	cthis getmover
	spushs
	spop $h
	call $h,mismultiply
	cmp0
	je l3255
	cthis getmover
	spushs
	spop $a
	call [$a],getposx
	cthis getmover
	spushs
	spop $a
	call [$a],getposy
	push 1
	push 1
	call grhex,isin
	jmp l3257
l3255:
	push 0
	jmp l3257
l3256:
	push 1
l3257:
	cmp0
	jne l3259
	call mouse,getpos
	push 1
	push 1
	call grhex,isin
	jmp l3260
l3258:
	push 0
	jmp l3260
l3259:
	push 1
l3260:
	cmp0
	je l3261
	cthis getmover
	spushs
	spop $h
	call $h,misunit
	cmp0
	je l3263
	push GAME
	spushs
	call grhex,getsfound
	cthis getmover
	push sactcolor
	spop $a
	call [$a],mputunit
	jmp l3262
l3263:
	push GAME
	spushs
	call grhex,getsfound
	cthis getmover
	spop $a
	call [$a],mputobj
l3262:
l3261:
l3252:
l3251:
	end method
	method mismultiply
	push "anter_"
	spushs
	spop $h
	call $h,length
	push 4
	cthis getb
	spushs
	spop $h
	call $h,mmultiply
	end method
	method moneonly
	cthis mmultiply
	neg
	end method
	method mmultiply
	cthis get
	push "drze"
	cmpje
	cmp0
	jne l3265
	push 0
	push 3
	cthis getb
	push "bld"
	cmpje
	jmp l3266
l3264:
	push 0
	jmp l3266
l3265:
	push 1
l3266:
	end method
	method munikopos
	localint $1
	cthis getposx
	pop $1
	localint $2
	cthis getposy
	pop $2
	localdef $3
	cthis getname
	push "iko_"
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	push "at"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	push $3
	push "de"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	push $3
	push "st"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	end method
	method mshowuniko
	localdef $1
	cthis getname
	push "iko_"
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	push "at"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	push $1
	push "de"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	push $1
	push "st"
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],show
	end method
	method msetactcolor
	localstring $1
	pop $1
	push $1
	pop sactcolor
	end method
	method mputunit
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $3
	cthis msetactcolor
	push $1
	push $2
	cthis mputobj
	localstring $4
	call grunits,last
	pop $4
	push $4
	push "attack"
	cthis mcopyikounit
	push $4
	push "defense"
	cthis mcopyikounit
	push $4
	push $3
	cthis mcopyikounit
	end method
	method mcopyikounit
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	push "iko_"
	pop $b
	popax
	add $a,$b
	push $2
	push "red"
	cmpje
	cmp0
	jne l3268
	push $2
	push "blue"
	cmpje
	jmp l3269
l3267:
	push 0
	jmp l3269
l3268:
	push 1
l3269:
	cmp0
	je l3271
	push "st"
	jmp l3270
l3271:
	push 0
	push 2
	call $2,getb
l3270:
	pop $b
	popax
	add $a,$b
	pop $3
	push "aniko_field"
	push $3
	cthis copyanima
	push $3
	spushs
	push $2
	push 0
	spop $a
	call [$a],setframe
	push $3
	spushs
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $1
	spushs
	spop $a
	call [$a],getposy
	spop $a
	call [$a],setpos
	push $3
	spushs
	spop $a
	call [$a],show
	push $3
	call grikounits,add
	end method
	method mputobj
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	call $2,misunit
	pop $3
	localstring $4
	push $3
	cmp0
	je l3273
	push "grunits"
	jmp l3272
l3273:
	push "grobs"
l3272:
	pop $4
	localdef $5
	push "anter_"
	spushs
	spop $h
	call $h,length
	push 4
	call $2,getb
	pop $5
	call $5,moneonly
	cmp0
	jne l3276
	push $3
	jmp l3277
l3275:
	push 0
	jmp l3277
l3276:
	push 1
l3277:
	cmp0
	je l3278
	localint $6
	push 0
	pop $6
l3279:
	push $6
	push $4
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l3280
	jmp l3282
l3281:
	add $6,1
	pop $6
	jmp l3279
l3282:
	localdef $7
	push $4
	spushs
	push $6
	spop $a
	call [$a],get
	pop $7
	push $7
	spushs
	spop $a
	call [$a],shex
	push $1
	cmpje
	cmp0
	je l3284
	push $7
	spushs
	spop $a
	call [$a],sobtyp
	push $5
	cmpje
	cmp0
	je l3284
	push $7
	spushs
	spop $a
	call [$a],iaction
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l3284
	push $7
	spushs
	spop $a
	call [$a],iframe
	push $2
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l3286
l3284:
	push 0
	jmp l3286
l3285:
	push 1
l3286:
	cmp0
	je l3287
	ret
l3287:
	jmp l3281
l3280:
	push $2
	spushs
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $1
	spushs
	spop $a
	call [$a],getposy
	spop $a
	call [$a],setpos
	jmp l3274
l3278:
	push $2
	spushs
	push $2
	spushs
	spop $a
	call [$a],getposx
	push $2
	spushs
	spop $a
	call [$a],getposy
	spop $a
	call [$a],setpos
l3274:
	localdef $8
	push $2
	cthis mtercopy
	pop $8
	push $8
	spushs
	push A
	push "sobject"
	push $2
	push "shex"
	push $1
	push "sobtyp"
	push $5
	push "iaction"
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push "iframe"
	push $2
	spushs
	spop $a
	call [$a],framenr
	push "posy"
	push $2
	spushs
	spop $a
	call [$a],getposy
	spop $a
	call [$a],vars2
	push $4
	spushs
	push $8
	spop $a
	call [$a],add
	call $2,misunit
	cmp0
	je l3289
	push $8
	spushs
	push A
	push "scolor"
	push sactcolor
	push "iliczebnosc"
	push 10
	push "iatak"
	push 50
	push "idefense"
	push 50
	push "ipanzer"
	push 0
	push "iwykterenu"
	push 20
	push "iszarza"
	push 0
	push "iostrzal"
	push 0
	push "izasieg"
	push 1
	push "izmeczenie"
	push 0
	push "iruch"
	push 2
	push "idoswiadczenie"
	push 0
	push "imorale"
	push 0
	push "ifort"
	push 0
	push "iatakowal"
	push 0
	push "iruszal"
	push 0
	push "iconstliczebnosc"
	push 10
	push "iilezniszczyl"
	push 0
	push "iilestracil"
	push 0
	push "isupply"
	push 0
	push "iconstsupply"
	push 0
	spop $a
	call [$a],vars2
	push iunitz
	jmp l3288
l3289:
	push $5
	spushs
	push "kraw"
	cmpst
	jne l3291
	spop $a
	push iterrainz
	jmp l3290
l3291:
	push "brze"
	cmpst
	jne l3292
	spop $a
	push iterrainz
	push 2
	pop $b
	popax
	add $a,$b
	jmp l3290
l3292:
	push "rzek"
	cmpst
	jne l3293
	spop $a
	push iterrainz
	push 1
	pop $b
	popax
	add $a,$b
	jmp l3290
l3293:
	push "drog"
	cmpst
	jne l3294
	spop $a
	push iterrainz
	push 3
	pop $b
	popax
	add $a,$b
	jmp l3290
l3294:
	push "drze"
	cmpst
	je l3296
	push "bld1"
	cmpst
	je l3296
	jmp l3295
l3296:
	spop $a
	push iterobjz
	jmp l3290
l3295:
	spop $a
	push iterrainz
l3290:
l3288:
	push $8
	spushs
	spop $a
	call [$a],setz
	push $8
	spushs
	spop $a
	call [$a],show
	end method
	method misunit
	push 0
	push 5
	cthis getb
	push "anuni"
	cmpje
	end method
	method butshowmenu_lclick
	call butshowmenu,unclick
	cthis advstdstate
	cmp0
	je l3298
	call menu1,isvisible
	cmp0
	je l3300
	call menu1,hide
	jmp l3299
l3300:
	call menu1,show
l3299:
l3298:
	end method
	method menufile_lclick
	cthis advstdstate
	cmp0
	je l3302
	localdef $1
	call menufile,idclicked
	call vfile,get
	pop $1
	push $1
	spushs
	push "Save Map"
	cmpst
	jne l3304
	spop $a
	cthis mopensave
	jmp l3303
l3304:
	push "Load Map"
	cmpst
	jne l3305
	spop $a
	cthis mopenload
	jmp l3303
l3305:
	push "Bg Map"
	cmpst
	jne l3306
	spop $a
	push "state_loadbgmap"
	cthis advsetstate
	call ttfilebg,winshow
	call ttfilebg,enable
	jmp l3303
l3306:
	push "Quit"
	cmpst
	jne l3307
	spop $a
	call gameapi,exit
	jmp l3303
l3307:
	spop $a
l3303:
l3302:
	end method
	method mputcity
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push $1
	push "city"
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	cthis hasvar
	cmp0
	je l3309
	push $3
	spushs
	push $2
	push 0
	spop $a
	call [$a],setframe
	jmp l3308
l3309:
	push "anhexyfunc"
	push $3
	cthis copyanima
	push $3
	spushs
	push A
	push "shex"
	push $1
	spop $a
	call [$a],vars2
	push $3
	spushs
	push $2
	push 0
	spop $a
	call [$a],setframe
	push $3
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	spop $a
	call [$a],setpos
	push $3
	call grhexfunc,add
	push $3
	spushs
	spop $a
	call [$a],show
l3308:
	end method
	method menuscen_lclick
	call menuscen,idclicked
	spushs
	push 0
	cmpst
	jne l3311
	spop $a
	push "red"
	pop sactcolor
	jmp l3310
l3311:
	push 1
	cmpst
	jne l3312
	spop $a
	push "blue"
	pop sactcolor
	jmp l3310
l3312:
	push 2
	cmpst
	jne l3313
	spop $a
	call anselecthex,selected
	push "null"
	cmpjne
	cmp0
	je l3315
	push GAME
	spushs
	call anselecthex,selected
	push sactcolor
	spop $a
	call [$a],mputcity
l3315:
	jmp l3310
l3313:
	spop $a
l3310:
	end method
	method mopenload
	push "state_loadmap"
	cthis advsetstate
	call ttfile,winshow
	call ttfile,enable
	end method
	method mopensave
	push "state_savemap"
	cthis advsetstate
	call ttfile,winshow
	call ttfile,enable
	end method
	method menumap_lclick
	cthis advstdstate
	cmp0
	je l3317
	call menumap,idclicked
	spushs
	push 0
	cmpst
	jne l3319
	spop $a
	call gramka,isvisible
	cmp0
	je l3321
	call gramka,hide
	jmp l3320
l3321:
	call gramka,show
l3320:
	jmp l3318
l3319:
	push 1
	cmpst
	jne l3322
	spop $a
	push "state_resizemaprows"
	cthis advsetstate
	call ttrows,winshow
	cthis msetttsize
	call ttrows,enable
	jmp l3318
l3322:
	push 2
	cmpst
	jne l3323
	spop $a
	push "state_resizemapcols"
	cthis advsetstate
	call ttcols,winshow
	cthis msetttsize
	call ttcols,enable
	jmp l3318
l3323:
	push 3
	cmpst
	jne l3324
	spop $a
	cthis mminiature
	jmp l3318
l3324:
	spop $a
l3318:
l3317:
	end method
	method mminiature
	push "state_showminiaturemap"
	cthis advsetstate
	cthis mkmap
	call imgmap,show
	call imgmap,ancenterscreen
	end method
	method menuterrains_lclick
	cthis advstdstate
	cmp0
	je l3326
	push "grter_"
	call menuterrains,idclicked
	call vter,get
	pop $b
	popax
	add $a,$b
	cthis mshowterrainunit
l3326:
	end method
	method mshowterrainunit
	localstring $1
	pop $1
	push sactterrainunit
	push "null"
	cmpjne
	cmp0
	je l3328
	push sactterrainunit
	spushs
	spop $a
	call [$a],hide
l3328:
	push $1
	pop sactterrainunit
	push sactterrainunit
	spushs
	spop $a
	call [$a],show
	end method
	method menuunits_lclick
	cthis advstdstate
	cmp0
	je l3330
	push "gruni_"
	call menuunits,idclicked
	call vunit,get
	pop $b
	popax
	add $a,$b
	cthis mshowterrainunit
l3330:
	end method
	method mbuildhex
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	cmp0
	je l3332
	push xstarthex
	push $2
	call anhexy,getw
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	jmp l3331
l3332:
	push $2
	call anhexy,getw
	pop $b
	popax
	mul $a,$b
l3331:
	pop $3
	localint $4
	push $1
	push hhex
	pop $b
	popax
	mul $a,$b
	push hhex
	pop $b
	popax
	sub $a,$b
	pop $4
	localstring $5
	push "anhexy"
	push $1
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $5
	push "anhexy"
	push $5
	cthis copyanima
	push $5
	spushs
	push A
	push "irow"
	push $1
	push "icol"
	push $2
	spop $a
	call [$a],vars2
	push $5
	spushs
	spop $a
	call [$a],show
	push $5
	spushs
	push $3
	push $4
	spop $a
	call [$a],setpos
	push $5
	spushs
	push 5
	spop $a
	call [$a],setz
	localdef $6
	push "anrama"
	push $1
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $6
	push "anramka"
	push $6
	cthis copyanima
	push $6
	call gramka,add
	push $6
	spushs
	push $3
	push $4
	spop $a
	call [$a],setpos
	call gramka,isvisible
	cmp0
	je l3334
	push $6
	spushs
	spop $a
	call [$a],show
	jmp l3333
l3334:
	push $6
	spushs
	spop $a
	call [$a],hide
l3333:
	push $5
	call grhex,add
	end method
	method msavemap
	localstring $1
	pop $1
	new db,dbsav
	push "HWarsEdytor3"
	call grhexfunc,eval
	push "HWarsEdytor4"
	call grunits,eval
	call $1,miscenario
	cmp0
	je l3336
	localstring $2
	push 3
	call $1,strsube
	push "map"
	pop $b
	popax
	add $a,$b
	pop $2
	push A
	push "map:"
	push $2
	call dbsav,dbaddrow
	cthis getgraphpath
	push "scenarios/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	call dbsav,save
	push $2
	pop $1
	jmp l3335
l3336:
	push A
	push "map:"
	push $1
	call dbsav,dbaddrow
	cthis getgraphpath
	push "scenarios/auto_"
	pop $b
	popax
	add $a,$b
	push 3
	call $1,strsube
	pop $b
	popax
	add $a,$b
	push "scn"
	pop $b
	popax
	add $a,$b
	call dbsav,save
l3335:
	call dbsav,free
	push A
	push "size:"
	push iilerows
	push iilecols
	call dbsav,dbaddrow
	push "HWarsEdytor6"
	call grhex,eval
	push "HWarsEdytor7"
	call grobs,eval
	call grobs,sortimgs
	push "HWarsEdytor8"
	call grobs,eval
	cthis getgraphpath
	push "maps/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	call dbsav,save
	delete dbsav
	end method
	method HWarsEdytor3
	push A
	push "vpoint:"
	push sobject
	push saction
	push shex
	spushs
	spop $a
	call [$a],irow
	push shex
	spushs
	spop $a
	call [$a],icol
	push "name:"
	push "city"
	call dbsav,dbaddrow
	end method
	method HWarsEdytor4
	push A
	push "unit:"
	push sobject
	push iaction
	push iframe
	push shex
	spushs
	spop $a
	call [$a],irow
	push shex
	spushs
	spop $a
	call [$a],icol
	call dbsav,dbaddrow
	push A
	push "scolor"
	push "iliczebnosc"
	push "iatak"
	push "idefense"
	push "ipanzer"
	push "iwykterenu"
	push "iszarza"
	push "iostrzal"
	push "izasieg"
	push "izmeczenie"
	push "iruch"
	push "idoswiadczenie"
	push "imorale"
	push "ifort"
	push "iatakowal"
	push "iruszal"
	push "iconstliczebnosc"
	push "iilezniszczyl"
	push "iilestracil"
	push "isupply"
	push "iconstsupply"
	push "HWarsEdytor5"
	cthis withlist
	end method
	method HWarsEdytor5
	localstring $1
	pop $1
	push $1
	push ":"
	pop $b
	popax
	add $a,$b
	call dbsav,dbaddlast
	push $1
	popax
	mov $a,[$a]
	psax
	call dbsav,dbaddlast
	end method
	method HWarsEdytor6
	push A
	push "hex:"
	push irow
	push icol
	push 1
	popax
	sub 0,$a
	cthis actionnr
	call dbsav,dbaddrow
	end method
	method HWarsEdytor7
	call sobtyp,mmultiply
	cmp0
	je l3338
	push iterobjz
	push posy
	pop $b
	popax
	add $a,$b
	cthis setz
l3338:
	end method
	method HWarsEdytor8
	call sobtyp,mmultiply
	cmp0
	je l3340
	push iterobjz
	cthis setz
	push A
	push "obj:"
	push sobject
	push iaction
	push iframe
	cthis getpx
	call grels,getpx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	call grels,getpy
	pop $b
	popax
	sub $a,$b
	call dbsav,dbaddrow
	jmp l3339
l3340:
	push A
	push "obj:"
	push sobject
	push iaction
	push iframe
	push shex
	spushs
	spop $a
	call [$a],irow
	push shex
	spushs
	spop $a
	call [$a],icol
	call dbsav,dbaddrow
l3339:
	end method
	method miscenario
	push 0
	push 3
	cthis gete
	push "scn"
	cmpje
	end method
	method mloadmap
	localstring $1
	pop $1
	call grobs,deleteallgm
	call grobs,free
	call grunits,deleteallgm
	call grunits,free
	call grikounits,deleteallgm
	call grikounits,free
	call grhexfunc,deleteallgm
	call grhexfunc,free
	call grhex,deleteallgm
	call grhex,free
	call gramka,deleteallgm
	call gramka,free
	push 0
	push 0
	call grels,setpos
	call anselecthex,hide
	call $1,miscenario
	cmp0
	je l3342
	localdef $2
	cthis getgraphpath
	push "scenarios/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,fileexist
	neg
	cmp0
	je l3344
	cthis getgraphpath
	push "scenarios/auto_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,fileexist
	neg
	cmp0
	je l3346
	ret
l3346:
l3344:
	new db,dblodsc
	push $2
	call dblodsc,load
	localint $3
	push "map:"
	call dblodsc,findbyrow
	pop $3
	push $3
	push 1
	call dblodsc,get
	pop $1
l3342:
	localdef $2
	cthis getgraphpath
	push "maps/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,fileexist
	neg
	cmp0
	je l3348
	push "dblodsc"
	cthis vardelif
	ret
l3348:
	new db,dblod
	push $2
	call dblod,load
	localint $3
	push "size:"
	call dblod,findbyrow
	pop $3
	push $3
	push 1
	call dblod,get
	pop iilerows
	push $3
	push 2
	call dblod,get
	pop iilecols
	push "hex:"
	call dblod,findbyrow
	pop $3
	localint $4
	push 0
	pop $4
l3349:
	push $4
	push iilerows
	cmpjl
	cmp0
	je l3350
	jmp l3352
l3351:
	add $4,1
	pop $4
	jmp l3349
l3352:
	localint $5
	push 0
	pop $5
l3353:
	push $5
	push iilecols
	cmpjl
	cmp0
	je l3354
	jmp l3356
l3355:
	add $5,1
	pop $5
	jmp l3353
l3356:
	push $4
	push $5
	cthis mbuildhex
	push "anhexy"
	push $4
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push 3
	call dblod,get
	spushs
	spop $h
	call $h,to_i
	push 0
	spop $a
	call [$a],setframe
	add $3,1
	pop $3
	jmp l3355
l3354:
	jmp l3351
l3350:
	push "obj:"
	call dblod,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l3358
l3359:
	push $3
	call dblod,getrowsno
	cmpjl
	cmp0
	je l3360
	push $3
	call dblod,getcolsno
	push 0
	cmpja
	cmp0
	je l3360
	push $3
	push 0
	call dblod,get
	push "obj:"
	cmpje
	jmp l3362
l3360:
	push 0
	jmp l3362
l3361:
	push 1
l3362:
	cmp0
	je l3363
	push $3
	push 1
	call dblod,get
	pop $2
	push $2
	spushs
	push $3
	push 2
	call dblod,get
	spushs
	spop $h
	call $h,to_i
	push $3
	push 3
	call dblod,get
	spop $a
	call [$a],setframe
	call $2,mismultiply
	cmp0
	je l3365
	push $2
	spushs
	push $3
	push 4
	call dblod,get
	push $3
	push 5
	call dblod,get
	spop $a
	call [$a],ansetbpos
	localdef $6
	push "null"
	pop $6
	jmp l3364
l3365:
	localdef $6
	push "anhexy"
	push $3
	push 4
	call dblod,get
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	push 5
	call dblod,get
	pop $b
	popax
	add $a,$b
	pop $6
	push $2
	spushs
	push $6
	spushs
	spop $a
	call [$a],getposx
	push $6
	spushs
	spop $a
	call [$a],getposy
	spop $a
	call [$a],setpos
l3364:
	push $6
	push $2
	cthis mputobj
	push $2
	spushs
	push $2
	spushs
	spop $a
	call [$a],imyposx
	push $2
	spushs
	spop $a
	call [$a],imyposy
	spop $a
	call [$a],setpos
	add $3,1
	pop $3
	jmp l3359
l3363:
l3358:
	push "dblodsc"
	cthis hasvar
	cmp0
	je l3367
	push "unit:"
	call dblodsc,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l3369
l3370:
	push $3
	call dblodsc,getrowsno
	cmpjl
	cmp0
	je l3371
	push $3
	push 0
	call dblodsc,get
	push "unit:"
	cmpje
	jmp l3373
l3371:
	push 0
	jmp l3373
l3372:
	push 1
l3373:
	cmp0
	je l3374
	push $3
	push 1
	call dblodsc,get
	pop $2
	push $2
	spushs
	push $3
	push 2
	call dblodsc,get
	spushs
	spop $h
	call $h,to_i
	push $3
	push 3
	call dblodsc,get
	spop $a
	call [$a],setframe
	localdef $6
	push "anhexy"
	push $3
	push 4
	call dblodsc,get
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	push 5
	call dblodsc,get
	pop $b
	popax
	add $a,$b
	pop $6
	push $2
	spushs
	push $6
	spushs
	spop $a
	call [$a],getposx
	push $6
	spushs
	spop $a
	call [$a],getposy
	spop $a
	call [$a],setpos
	localint $7
	push $3
	push "scolor:"
	call dblodsc,dbfindinrow
	pop $7
	localstring $8
	push $7
	push 0
	cmpjae
	cmp0
	je l3376
	push $3
	push $7
	push 1
	pop $b
	popax
	add $a,$b
	call dblodsc,get
	pop $8
	jmp l3375
l3376:
	push "unit "
	push $2
	pop $b
	popax
	add $a,$b
	push " has no color!"
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	push sactcolor
	pop $8
l3375:
	push $6
	push $2
	push $8
	cthis mputunit
	push $2
	spushs
	push $2
	spushs
	spop $a
	call [$a],imyposx
	push $2
	spushs
	spop $a
	call [$a],imyposy
	spop $a
	call [$a],setpos
	localstring $9
	call grunits,last
	pop $9
	push $9
	spushs
	push "irowload"
	push $3
	spop $a
	call [$a],var2
	push $9
	spushs
	push A
	push "iliczebnosc"
	push "iatak"
	push "idefense"
	push "ipanzer"
	push "iwykterenu"
	push "iszarza"
	push "iostrzal"
	push "izasieg"
	push "izmeczenie"
	push "iruch"
	push "idoswiadczenie"
	push "imorale"
	push "ifort"
	push "iatakowal"
	push "iruszal"
	push "iconstliczebnosc"
	push "iilezniszczyl"
	push "iilestracil"
	push "isupply"
	push "iconstsupply"
	push "HWarsEdytor9"
	spop $a
	call [$a],withlist
	add $3,1
	pop $3
	jmp l3370
l3374:
l3369:
	delete dblodsc
l3367:
	delete dblod
	push 0
	push yhexy
	call grels,move
	end method
	method HWarsEdytor9
	localstring $1
	pop $1
	localint $2
	push irowload
	push $1
	push ":"
	pop $b
	popax
	add $a,$b
	call dblodsc,dbfindinrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l3378
	push $1
	spushs
	push irowload
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	call dblodsc,get
	spop $b
	popax
	mov [$b],$a
	jmp l3377
l3378:
	push "couldn't find "
	push $1
	pop $b
	popax
	add $a,$b
	push " in scenario"
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,print
	push $1
	spushs
	push 0
	spop $b
	popax
	mov [$b],$a
l3377:
	end method
	method mobrettopanel
	push imyposx
	push sactterrainunit
	spushs
	spop $a
	call [$a],getposx
	pop $b
	popax
	add $a,$b
	push imyposy
	push sactterrainunit
	spushs
	spop $a
	call [$a],getposy
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method ttrows_onenter
	localint $1
	push iminrows
	cthis get
	spushs
	spop $h
	call $h,to_i
	push 30
	cthis between
	pop $1
	push $1
	push iilerows
	cmpja
	cmp0
	je l3380
	localint $2
	push iilerows
	pop $2
l3381:
	push $2
	push $1
	cmpjl
	cmp0
	je l3382
	jmp l3384
l3383:
	add $2,1
	pop $2
	jmp l3381
l3384:
	localint $3
	push 0
	pop $3
l3385:
	push $3
	push iilecols
	cmpjl
	cmp0
	je l3386
	jmp l3388
l3387:
	add $3,1
	pop $3
	jmp l3385
l3388:
	push GAME
	spushs
	push $2
	push $3
	spop $a
	call [$a],mbuildhex
	push "anhexy"
	push $2
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	call grhex,getpx
	call grhex,getpy
	spop $a
	call [$a],move
	push "anrama"
	push $2
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	call grhex,getpx
	call grhex,getpy
	spop $a
	call [$a],move
	jmp l3387
l3386:
	jmp l3383
l3382:
	push $1
	pop iilerows
	cthis msorthexs
l3380:
	cthis mttexit
	end method
	method msorthexs
	push "HWarsEdytor10"
	call grhex,sortimgsfun
	cthis mfindhexex
	pop shexex
	end method
	method HWarsEdytor10
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],irow
	push $2
	spushs
	spop $a
	call [$a],irow
	cmpjl
	cmp0
	jne l3390
	push $1
	spushs
	spop $a
	call [$a],irow
	push $2
	spushs
	spop $a
	call [$a],irow
	cmpje
	cmp0
	je l3391
	push $1
	spushs
	spop $a
	call [$a],icol
	push $2
	spushs
	spop $a
	call [$a],icol
	cmpjl
	jmp l3393
l3391:
	push 0
	jmp l3393
l3392:
	push 1
l3393:
	jmp l3394
l3389:
	push 0
	jmp l3394
l3390:
	push 1
l3394:
	end method
	method ttcols_onenter
	localint $1
	push imincols
	cthis get
	spushs
	spop $h
	call $h,to_i
	push 30
	cthis between
	pop $1
	push $1
	push iilecols
	cmpja
	cmp0
	je l3396
	localint $2
	push 0
	pop $2
l3397:
	push $2
	push iilerows
	cmpjl
	cmp0
	je l3398
	jmp l3400
l3399:
	add $2,1
	pop $2
	jmp l3397
l3400:
	localint $3
	push iilecols
	pop $3
l3401:
	push $3
	push $1
	cmpjl
	cmp0
	je l3402
	jmp l3404
l3403:
	add $3,1
	pop $3
	jmp l3401
l3404:
	push GAME
	spushs
	push $2
	push $3
	spop $a
	call [$a],mbuildhex
	push "anhexy"
	push $2
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	call grhex,getpx
	call grhex,getpy
	spop $a
	call [$a],move
	push "anrama"
	push $2
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	call grhex,getpx
	call grhex,getpy
	spop $a
	call [$a],move
	jmp l3403
l3402:
	jmp l3399
l3398:
	push $1
	pop iilecols
	cthis msorthexs
l3396:
	cthis mttexit
	end method
	method ttfile_onenter
	push "state_savemap"
	cthis advisstate
	cmp0
	je l3406
	push GAME
	spushs
	cthis get
	spop $a
	call [$a],msavemap
	jmp l3405
l3406:
	push "state_loadmap"
	cthis advisstate
	cmp0
	je l3408
	push GAME
	spushs
	cthis get
	spop $a
	call [$a],mloadmap
l3408:
l3405:
	push "edytor_filemap"
	cthis get
	call clsave,set
	cthis mttexit
	end method
	method ttfilebg_onenter
	push "state_loadbgmap"
	cthis advisstate
	cmp0
	je l3410
	push GAME
	spushs
	cthis get
	spop $a
	call [$a],mloadbgmap
l3410:
	push "edytor_filebgmap"
	cthis get
	call clsave,set
	cthis mttexit
	end method
	method mloadbgmap
	localstring $1
	pop $1
	localdef $2
	cthis getgraphpath
	push "tmp/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,fileexist
	neg
	cmp0
	je l3412
	call imgbgmap,hide
	ret
l3412:
	new img,imgtmp
	push $2
	call imgtmp,load
	localdef $3
	call grhex,first
	pop $3
	localdef $4
	call grhex,last
	pop $4
	localint $5
	push $3
	spushs
	spop $a
	call [$a],getpx
	pop $5
	localint $6
	push $3
	spushs
	spop $a
	call [$a],getpy
	push hhex
	pop $b
	popax
	add $a,$b
	pop $6
	push shexex
	spushs
	spop $a
	call [$a],getex
	push $5
	pop $b
	popax
	sub $a,$b
	push $4
	spushs
	spop $a
	call [$a],getpy
	push hhex
	pop $b
	popax
	add $a,$b
	push $6
	pop $b
	popax
	sub $a,$b
	cthis transparent
	call imgbgmap,create
	call imgbgmap,getw
	spushs
	spop $h
	call $h,to_r
	call imgtmp,getw
	spushs
	spop $h
	call $h,to_r
	pop $b
	popax
	div $a,$b
	psax
	call imgbgmap,geth
	spushs
	spop $h
	call $h,to_r
	call imgtmp,geth
	spushs
	spop $h
	call $h,to_r
	pop $b
	popax
	div $a,$b
	psax
	call imgtmp,anzoomxy
	call imgtmp,getpx
	call imgtmp,getpy
	call imgbgmap,setpos
	push "imgtmp"
	call imgbgmap,blit
	push $5
	push $6
	call imgbgmap,setpos
	call imgbgmap,show
	push 1
	cthis msetbgop
	push iguiz
	push 10
	pop $b
	popax
	add $a,$b
	call imgbgmap,setz
	call imgtmp,delete_internals
	delete imgtmp
	end method
	method msetbgop
	localint $1
	pop $1
	push $1
	cmp0
	je l3414
	call imgbgmap,show
	push 32
	push $1
	pop $b
	popax
	mul $a,$b
	call imgbgmap,transparency
	jmp l3413
l3414:
	call imgbgmap,hide
l3413:
	end method
	method mttexit
	cthis disable
	cthis winhide
	cthis advsetstdstate
	end method
	method key_down
	push "state_savemap"
	cthis advisstate
	cmp0
	je l3416
	push "escape"
	call keyboard,iskey
	cmp0
	je l3418
	call ttfile,mttexit
l3418:
	jmp l3415
l3416:
	push "state_loadmap"
	cthis advisstate
	cmp0
	je l3420
	push "escape"
	call keyboard,iskey
	cmp0
	je l3422
	call ttfile,mttexit
l3422:
	jmp l3419
l3420:
	push "state_loadbgmap"
	cthis advisstate
	cmp0
	je l3424
	push "escape"
	call keyboard,iskey
	cmp0
	je l3426
	call ttfilebg,mttexit
l3426:
	jmp l3423
l3424:
	push "state_resizemaprows"
	cthis advisstate
	cmp0
	je l3428
	push "escape"
	call keyboard,iskey
	cmp0
	je l3430
	call ttrows,mttexit
l3430:
	jmp l3427
l3428:
	push "state_resizemapcols"
	cthis advisstate
	cmp0
	je l3432
	push "escape"
	call keyboard,iskey
	cmp0
	je l3434
	call ttcols,mttexit
l3434:
	jmp l3431
l3432:
	cthis advstdstate
	cmp0
	je l3436
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l3438
	push "l"
	call keyboard,iskey
	cmp0
	je l3440
	cthis mopenload
	jmp l3439
l3440:
	push "s"
	call keyboard,iskey
	cmp0
	je l3442
	cthis mopensave
	jmp l3441
l3442:
	push "m"
	call keyboard,iskey
	cmp0
	je l3444
	cthis mminiature
	jmp l3443
l3444:
	push "0"
	call keyboard,iskey
	cmp0
	je l3446
	push 0
	cthis msetbgop
	jmp l3445
l3446:
	push "1"
	call keyboard,iskey
	cmp0
	je l3448
	push 1
	cthis msetbgop
	jmp l3447
l3448:
	push "2"
	call keyboard,iskey
	cmp0
	je l3450
	push 2
	cthis msetbgop
	jmp l3449
l3450:
	push "3"
	call keyboard,iskey
	cmp0
	je l3452
	push 3
	cthis msetbgop
	jmp l3451
l3452:
	push "4"
	call keyboard,iskey
	cmp0
	je l3454
	push 4
	cthis msetbgop
	jmp l3453
l3454:
	push "5"
	call keyboard,iskey
	cmp0
	je l3456
	push 5
	cthis msetbgop
	jmp l3455
l3456:
	push "6"
	call keyboard,iskey
	cmp0
	je l3458
	push 6
	cthis msetbgop
l3458:
l3455:
l3453:
l3451:
l3449:
l3447:
l3445:
l3443:
l3441:
l3439:
l3438:
l3436:
l3431:
l3427:
l3423:
l3419:
l3415:
	end method
	method mdelikounit
	localstring $1
	pop $1
	cthis getname
	push "iko_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call grikounits,remove
	push GAME
	spushs
	push $1
	spop $a
	call [$a],vardel
	end method
	method mdelunit
	localstring $1
	pop $1
	push $1
	call grunits,remove
	push $1
	spushs
	push "at"
	spop $a
	call [$a],mdelikounit
	push $1
	spushs
	push "de"
	spop $a
	call [$a],mdelikounit
	push $1
	spushs
	push "st"
	spop $a
	call [$a],mdelikounit
	push GAME
	spushs
	push $1
	spop $a
	call [$a],vardel
	end method
	method mouse_rclick
	cthis advstdstate
	cmp0
	je l3460
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	cthis misinpanel
	cmp0
	je l3462
	jmp l3461
l3462:
	push $1
	push $2
	push 1
	push 1
	call grunits,isin
	cmp0
	je l3464
	call grunits,getsfound
	cthis mdelunit
	jmp l3463
l3464:
	push $1
	push $2
	push 1
	push 1
	call grobs,isin
	cmp0
	je l3466
	localdef $3
	call grobs,getsfound
	pop $3
	push $3
	call grobs,remove
	push GAME
	spushs
	push $3
	spop $a
	call [$a],vardel
	jmp l3465
l3466:
	push $1
	push $2
	push 1
	push 1
	call grhex,isin
	cmp0
	je l3468
	call grhex,getsfound
	spushs
	spop $a
	call [$a],ansetnextact
l3468:
l3465:
l3463:
l3461:
	jmp l3459
l3460:
	push "state_showminiaturemap"
	cthis advisstate
	cmp0
	je l3470
	call imgmap,hide
	call imgminimap,hide
	cthis advsetstdstate
l3470:
l3459:
	end method
	method mouse_lclick
	cthis advstdstate
	cmp0
	je l3472
	cthis misinpanel
	cmp0
	je l3474
	jmp l3473
l3474:
	call mouse,getpos
	push 1
	push 1
	call grhex,isin
	cmp0
	je l3476
	localdef $1
	call grhex,getsfound
	pop $1
	push $1
	call anselecthex,selected=
	call anselecthex,show
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	call anselecthex,setpos
l3476:
l3473:
l3472:
	end method
	end game

