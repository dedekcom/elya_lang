; Dominik Dagiel   ix 2005

	new db,dbconf
	push "configs/config.beh"
	call dbconf,loadscript
	push "enginedebug:"
	call dbconf,dbgetint
	call engine,setdebugstate
	new int,igmdebug
	push "igmdebug:"
	call dbconf,dbgetint
	pop igmdebug
	new int,igmpcdebug
	push "igmpcdebug:"
	call dbconf,dbgetint
	pop igmpcdebug
	new int,igmexportan
	push "igmexportan:"
	call dbconf,dbgetint
	pop igmexportan
	new int,igmimportan
	push "igmimportan:"
	call dbconf,dbgetint
	pop igmimportan
	new int,igmwinlocal
	push "igmwinlocal:"
	call dbconf,dbgetint
	pop igmwinlocal
	new int,igmmac
	push "igmmac:"
	call dbconf,dbgetint
	pop igmmac
	new int,igmipad
	push "igmipad:"
	call dbconf,dbgetint
	pop igmipad
	new int,igmiphone
	push "igmiphone:"
	call dbconf,dbgetint
	pop igmiphone
	new int,igmandroid
	push "igmandroid:"
	call dbconf,dbgetint
	pop igmandroid
	new string,sgmdeveloper
	push "sgmdeveloper:"
	call dbconf,dbget
	pop sgmdeveloper
	new string,sgmproject
	push "sgmproject:"
	call dbconf,dbget
	pop sgmproject
	push igmdebug
	cmp0
	je l2
	push igmipad
	cmp0
	jne l5
	push igmmac
	cmp0
	jne l5
	push igmiphone
	cmp0
	jne l5
	push igmandroid
	jmp l6
l4:
	push 0
	jmp l6
l5:
	push 1
l6:
	jmp l7
l2:
	push 0
	jmp l7
l3:
	push 1
l7:
	cmp0
	je l8
	push "getsavepath"
	push "global0"
	call engine,addmethod
l8:
	method global0
	push "saves/"
	end method
	method checktouchpad
	push igmipad
	cmp0
	jne l10
	push igmiphone
	cmp0
	jne l10
	push igmandroid
	jmp l11
l9:
	push 0
	jmp l11
l10:
	push 1
l11:
	cmp0
	je l12
	push igmpcdebug
	push 0
	cmpje
	jmp l14
l12:
	push 0
	jmp l14
l13:
	push 1
l14:
	end method
	method getwinpath
	localstring $1
	pop $1
	localstring $2
	push "appdata"
	call engine,getspecialpath
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l16
	push $2
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push sgmproject
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	jmp l15
l16:
	push $1
l15:
	end method
	method getsavepath
	push igmipad
	cmp0
	jne l19
	push igmmac
	jmp l20
l18:
	push 0
	jmp l20
l19:
	push 1
l20:
	cmp0
	je l21
	call engine,getsavepath
	jmp l17
l21:
	push igmwinlocal
	cmp0
	je l23
	push "saves/"
	cthis getwinpath
	jmp l22
l23:
	push "saves/"
l22:
l17:
	end method
	method buildsavedir
	push igmwinlocal
	cmp0
	je l25
	push igmipad
	neg
	cmp0
	je l25
	push igmmac
	neg
	jmp l27
l25:
	push 0
	jmp l27
l26:
	push 1
l27:
	cmp0
	je l28
	localstring $1
	push "appdata"
	call engine,getspecialpath
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l30
	push "/"
	push sgmdeveloper
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	localint $2
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l33
	push $2
	push 1
	cmpje
	jmp l34
l32:
	push 0
	jmp l34
l33:
	push 1
l34:
	cmp0
	je l35
	push "/"
	push sgmproject
	pop $b
	popax
	add $a,$b
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	pop $2
	push 0
	pop $2
	push $2
	push 0
	cmpje
	cmp0
	jne l38
	push $2
	push 1
	cmpje
	jmp l39
l37:
	push 0
	jmp l39
l38:
	push 1
l39:
	cmp0
	je l40
	push "/saves"
	popax
	add $1,$a
	pop $1
	push $1
	call engine,mkdir
	popax
l40:
l35:
l30:
l28:
	end method
	cthis buildsavedir
	new string,A
	push "!!!"
	pop A
	new real,PI
	push 3.14159265358979323846
	pop PI
	new int,BYTE0
	push "0"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE0
	new int,BYTE9
	push "9"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE9
	new int,BYTEa
	push "a"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEa
	new int,BYTEz
	push "z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEz
	new int,BYTEA
	push "A"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEA
	new int,BYTEZ
	push "Z"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTEZ
	new int,BYTE_
	push "_"
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTE_
	new int,BYTESPACE
	push " "
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop BYTESPACE
	method varget
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	end method
	method varset
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method varnew
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method varnewif
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	cthis hasvar
	neg
	cmp0
	je l42
	push $1
	push $2
	cthis varnew
l42:
	end method
	method vardelif
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l44
	push $1
	cthis vardel
l44:
	end method
	method vardel
	localstring $1
	pop $1
	push $1
	spushs
	spop $d
	delete [$d]
	end method
	method reader
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "global1"
	cthis addmethod
	end method
	method global1
	cthis methodname
	popax
	mov $a,[$a]
	psax
	end method
	method writer
	localstring $1
	pop $1
	push "def"
	push $1
	cthis varnewif
	push $1
	push "="
	pop $b
	popax
	add $a,$b
	push "global2"
	cthis addmethod
	end method
	method global2
	localdef $1
	pop $1
	cthis methodname
	spushs
	push 1
	spop $a
	call $a,strsube
	spushs
	push $1
	spop $b
	popax
	mov [$b],$a
	end method
	method var
	localstring $1
	pop $1
	push $1
	cthis reader
	push $1
	cthis writer
	end method
	method var2
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	cthis var
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method withlist
	localstring $1
	pop $1
	localdef $2
	pop $2
l45:
	push A
	push $2
	cmpjne
	cmp0
	je l46
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l45
l46:
	end method
	method withlist2
	localstring $1
	pop $1
	localdef $2
	pop $2
l47:
	push A
	push $2
	cmpjne
	cmp0
	je l48
	localdef $3
	pop $3
	push $1
	spushs
	push $3
	push $2
	spop $d
	cthis [$d]
	localdef $2
	pop $2
	jmp l47
l48:
	end method
	method vars
	push "var"
	cthis withlist
	end method
	method vars2
	push "var2"
	cthis withlist2
	end method
	method builder_func
	localstring $1
	pop $1
	cthis getbuildername
	spushs
	cthis getbuildername
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method callfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	push "null"
	cmpjne
	cmp0
	je l50
	push $1
	push "null"
	cmpje
	cmp0
	je l52
	push $2
	spushs
	spop $d
	cthis [$d]
	jmp l51
l52:
	push $1
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l51:
l50:
	end method
	method in
	localint $1
	push 0
	pop $1
	localdef $2
	cthis get
	pop $2
	localdef $3
	pop $3
l53:
	push A
	push $3
	cmpjne
	cmp0
	je l54
	push $1
	neg
	cmp0
	je l56
	push $2
	push $3
	cmpje
	pop $1
l56:
	localdef $3
	pop $3
	jmp l53
l54:
	push $1
	end method
	method with
	localstring $1
	pop $1
	localstring $2
	pop $2
l57:
	push $2
	push A
	cmpjne
	cmp0
	je l58
	push $2
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	pop $2
	jmp l57
l58:
	end method
	method copycall
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	pop $3
	push $3
	spushs
	spop $e
	new string,[$e]
	push $3
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	push $1
	push "global3"
	cthis addmethod
	end method
	method global3
	localstring $1
	cthis methodname
	pop $1
	push "__call"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method copycalls
	localstring $1
	pop $1
	localstring $2
	pop $2
l59:
	push $2
	push A
	cmpjne
	cmp0
	je l60
	push $2
	push $1
	cthis copycall
	pop $2
	jmp l59
l60:
	end method
	method mresize
	cthis gettype
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	cthis getname
	spop $a
	 clparent [$a],resizemethods
	end method
	method times
	localstring $1
	pop $1
	push 0
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis for_plus
	end method
	method upto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_plus
	end method
	method downto
	localint $1
	localstring $2
	pop $2
	pop $1
	cthis get
	push $1
	push $2
	cthis for_minus
	end method
	method for_plus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l62
	ret
l62:
l63:
	push $1
	push $2
	cmpjle
	cmp0
	je l64
	jmp l66
l65:
	add $1,1
	pop $1
	jmp l63
l66:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l65
l64:
	end method
	method for_minus
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	push 0
	cmpjle
	cmp0
	je l68
	ret
l68:
l69:
	push $1
	push $2
	cmpjae
	cmp0
	je l70
	jmp l72
l71:
	sub $1,1
	pop $1
	jmp l69
l72:
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
	jmp l71
l70:
	end method
	method double_for
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	push 0
	pop $5
l73:
	push $5
	push $1
	cmpjl
	cmp0
	je l74
	jmp l76
l75:
	add $5,1
	pop $5
	jmp l73
l76:
	push 0
	pop $4
l77:
	push $4
	push $2
	cmpjl
	cmp0
	je l78
	jmp l80
l79:
	add $4,1
	pop $4
	jmp l77
l80:
	push $3
	spushs
	push $5
	push $4
	spop $d
	cthis [$d]
	jmp l79
l78:
	jmp l75
l74:
	end method
	class classobjcounter
	method init
	localstring $1
	pop $1
	new string,_sprefix
	push $1
	pop _sprefix
	new int,_iile
	push 0
	pop _iile
	push "limit"
	push 0
	cthis var2
	end method
	method get
	push limit
	push 0
	cmpja
	cmp0
	je l82
	push _iile
	push limit
	pop $b
	popax
	div $a,$b
	push $d
	push 1
	pop $b
	popax
	add $a,$b
	pop _iile
	jmp l81
l82:
	add _iile,1
	pop _iile
l81:
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	ret
	end method
	method size
	push _iile
	end method
	method getid
	localint $1
	pop $1
	push _sprefix
	push _iile
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	end method
	end class

	class classsignals
	method init
	end method
	method stdfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "classsignals0"
	spop $a
	call [$a],addmethod
	end method
	method classsignals0
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdstart
	localstring $1
	pop $1
	push $1
	spushs
	push "onstart"
	push "classsignals1"
	spop $a
	call [$a],addmethod
	end method
	method classsignals1
	cthis getname
	push "_START"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method stdsigs
	localstring $1
	pop $1
	push $1
	cthis stdstart
	push $1
	cthis stdfinish
	end method
	method buildanima
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "onendframe"
	push "classsignals2"
	spop $a
	call [$a],addmethod
	end method
	method classsignals2
	cthis getname
	push "_ENDFRAME"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildsnd
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	end method
	method buildtimer
	localstring $1
	pop $1
	push $1
	cthis stdsigs
	push $1
	spushs
	push "ontick"
	push "classsignals3"
	spop $a
	call [$a],addmethod
	end method
	method classsignals3
	cthis getname
	push "_TICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method buildbut
	localstring $1
	pop $1
	push $1
	spushs
	push "onclick"
	push "classsignals4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onrel"
	push "classsignals5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveon"
	push "classsignals6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "onmoveoff"
	push "classsignals7"
	spop $a
	call [$a],addmethod
	end method
	method classsignals4
	cthis getname
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals5
	cthis getname
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals6
	cthis getname
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsignals7
	cthis getname
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classlocker
	method init
	new int,_block
	push 1
	pop _block
	end method
	method lock
	push 1
	pop _block
	end method
	method unlock
	push 0
	pop _block
	end method
	method setlock
	localint $1
	pop $1
	push $1
	pop _block
	end method
	method getlock
	push _block
	ret
	end method
	method unlocked
	push _block
	push 0
	cmpje
	end method
	method setaslocker
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlocker"
	push "classlocker0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlocker
	push $1
	spushs
	push "lock"
	push "lock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlock"
	push "unlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setlock"
	push "setlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getlock"
	push "getlock"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlocked"
	push "unlocked"
	spop $a
	call [$a],addmethod
	end method
	method classlocker0
	new int,_block
	push 1
	pop _block
	end method
	end class

	module classdbreader
	method init
	new db,dbl
	end method
	method readdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
	localint $3
	call dbl,getrowsno
	pop $3
l83:
	push $2
	push $3
	cmpjl
	cmp0
	je l84
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	add $2,1
	pop $2
	jmp l83
l84:
	end method
	method readrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l86
	push $2
	spushs
	push $3
	spop $d
	cthis [$d]
l86:
	end method
	end module

	class collection
	method init
	localstring $1
	pop $1
	new string,stype
	push $1
	pop stype
	end method
	method type
	push stype
	ret
	end method
	end class

	class array
	parent collection
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	clparent collection,init
	new int,idim
	push $2
	pop idim
	new int,isize
	push $3
	pop isize
	new vector,vec
	push $1
	call vec,type
	push $2
	push 0
	cmpjle
	cmp0
	jne l89
	push $3
	push 0
	cmpjle
	jmp l90
l88:
	push 0
	jmp l90
l89:
	push 1
l90:
	cmp0
	je l91
	ret
l91:
	push $2
	call $3,pow
	push 0
	call vec,resize
	end method
	method getid
	localint $1
	push 0
	pop $1
	localint $2
	push idim
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l92:
	push $2
	push 0
	cmpja
	cmp0
	je l93
	popax
	add $1,$a
	pop $1
	push isize
	popax
	mul $1,$a
	pop $1
	sub $2,1
	pop $2
	jmp l92
l93:
	push $1
	pop $b
	popax
	add $a,$b
	ret
	end method
	method get
	cthis getid
	call vec,get
	ret
	end method
	method set
	localdef $1
	pop $1
	cthis getid
	push $1
	call vec,set
	end method
	method getsize
	push isize
	ret
	end method
	method getdim
	push idim
	ret
	end method
	end class

	class stack
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vec
	push $1
	call vec,type
	push $1
	spushs
	spop $d
	new [$d],var
	end method
	method push
	localstring $1
	pop $1
	push $1
	call vec,add
	end method
	method top
	call vec,last
	ret
	end method
	method pop
	cthis top
	pop var
	call vec,size
	push 1
	pop $b
	popax
	sub $a,$b
	call vec,removeat
	push var
	ret
	end method
	method free
	call vec,free
	end method
	end class

	class map
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new int,isize
	push 0
	pop isize
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	neg
	cmp0
	je l95
	push $1
	cthis add
l95:
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	call [$a],set
	end method
	method add
	localstring $1
	pop $1
	push stype
	spushs
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	end method
	method get
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method remove
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method contains
	localstring $1
	pop $1
	push "v"
	push $1
	pop $b
	popax
	add $a,$b
	cthis hasvar
	ret
	end method
	end class

	class map2
	parent collection
	method init
	localstring $1
	pop $1
	push $1
	clparent collection,init
	new vector,vn
	push "string"
	call vn,type
	new vector,vec
	push $1
	call vec,type
	end method
	method add
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,add
	push $2
	call vec,add
	end method
	method set
	localstring $1
	localdef $2
	pop $2
	pop $1
	push $1
	call vn,find
	push $2
	call vec,set
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call vn,contains
	ret
	end method
	method get
	localstring $1
	pop $1
	push $1
	call vn,find
	call vec,get
	ret
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call vn,find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l97
	push $2
	call vec,removeat
	push $2
	call vn,removeat
l97:
	end method
	method free
	call vn,free
	call vec,free
	end method
	method print
	call vec,print
	call vn,print
	end method
	end class

	module advmouse
	method init
	new anima,anmsc
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anmsc,load
	push "onendframe"
	push "setnextframe"
	call anmsc,addmethod
	push "onsetframe"
	push "advmouse0"
	call anmsc,addmethod
	call anmsc,hide
	end method
	method advmouse0
	cthis hide
	end method
	method setnextframe
	call anmsc,ansetnextfr
	push "anmsc"
	call mouse,setcursor
	end method
	method set
	localstring $1
	pop $1
	push $1
	call anmsc,isplaying
	neg
	cmp0
	je l99
	push $1
	call anmsc,play
l99:
	push "anmsc"
	call mouse,setcursor
	end method
	method setstd
	push "normal"
	cthis set
	end method
	method setactive
	push "active"
	cthis set
	end method
	method setact
	push "active"
	cthis set
	end method
	method setbut
	push "active"
	cthis set
	end method
	method setexit
	push "exit"
	cthis set
	end method
	method setwait
	push "wait"
	cthis set
	end method
	method get
	call anmsc,actionname
	ret
	end method
	end module

	push igmdebug
	neg
	cmp0
	je l101
	cthis checktouchpad
	jmp l103
l101:
	push 0
	jmp l103
l102:
	push 1
l103:
	cmp0
	je l104
	push "scripts/common/kursorypad.pyz"
	call advmouse,load
	jmp l100
l104:
	push "scripts/common/cursors.pyz"
	call advmouse,load
l100:
	class classgamemusic
	parent classdbreader
	method init
	clparent classdbreader,init
	new string,smuspath
	push ""
	pop smuspath
	new string,sbgrpath
	push ""
	pop sbgrpath
	new snd,_sndbgr
	push "onfinish"
	push "_stdsndloop"
	call _sndbgr,addmethod
	end method
	method reset
	call gameapi,stopmusic
	cthis stopbgr
	end method
	method _stdsndloop
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call dbl,loadscript
	end method
	method musicpath
	localstring $1
	pop $1
	push $1
	pop smuspath
	end method
	method sndbgrpath
	localstring $1
	pop $1
	push $1
	pop sbgrpath
	end method
	method _play
	localint $1
	pop $1
	localint $2
	localint $3
	localint $4
	localstring $5
	localstring $6
	push 1
	pop $2
	push $1
	call dbl,getcolsno
	pop $3
l105:
	push $2
	push $3
	cmpjl
	cmp0
	je l106
	push $1
	push $2
	call dbl,get
	pop $5
	add $2,1
	pop $2
	push $5
	push "music"
	cmpje
	cmp0
	je l108
	push smuspath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	pop $6
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l110
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l112
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call gameapi,setmusicvol
	add $2,1
	pop $2
l112:
	jmp l109
l110:
	push 100
	call gameapi,setmusicvol
l109:
	push $6
	call gameapi,playmusic
	jmp l107
l108:
	push $5
	push "bgr"
	cmpje
	cmp0
	je l114
	push sbgrpath
	push $1
	push $2
	call dbl,get
	pop $b
	popax
	add $a,$b
	call _sndbgr,load
	add $2,1
	pop $2
	push $2
	push $3
	cmpjl
	cmp0
	je l116
	push $1
	push $2
	call dbl,get
	push "vol"
	cmpje
	cmp0
	je l118
	add $2,1
	pop $2
	push $1
	push $2
	call dbl,get
	call _sndbgr,setvol
	add $2,1
	pop $2
l118:
	jmp l115
l116:
	push 100
	call _sndbgr,setvol
l115:
	cthis playbgr
	jmp l113
l114:
	add $2,1
	pop $2
l113:
l107:
	jmp l105
l106:
	end method
	method play
	cthis reset
	call gameapi,getgamename
	push "_play"
	cthis readrow
	end method
	method playbgr
	call _sndbgr,play
	end method
	method stopbgr
	push 0
	call _sndbgr,stop
	end method
	end class

	class Music
	method init
	new vector,vmus
	push "string"
	call vmus,type
	new int,ilastid
	push "musicvolume"
	push 100
	cthis var2
	end method
	method playdb
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	call vmus,free
l119:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l120
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	call vmus,add
	add $3,1
	pop $3
	jmp l119
l120:
	push 0
	pop ilastid
	cthis play
	end method
	method playvec
	localstring $1
	localint $2
	pop $2
	pop $1
	call vmus,free
l121:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l122
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	call vmus,add
	add $2,1
	pop $2
	jmp l121
l122:
	push 0
	pop ilastid
	cthis play
	end method
	method playstr
	localstring $1
	pop $1
	push $1
	push " "
	call vmus,vecbuildfromstring
	push 0
	pop ilastid
	cthis play
	end method
	method play
	push ilastid
	call vmus,size
	cmpjae
	cmp0
	je l124
	ret
l124:
	localstring $1
	push MUSICPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
	push $1
	call engine,fileexist
	neg
	cmp0
	je l126
	push SFXPATH
	push ilastid
	call vmus,get
	pop $b
	popax
	add $a,$b
	pop $1
l126:
	add ilastid,1
	pop ilastid
	localint $2
	push 0
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	push 0
	pop $4
	localint $5
	push musicvolume
	pop $5
	localint $6
	push ilastid
	pop $6
l127:
	push $6
	call vmus,size
	cmpjl
	cmp0
	je l128
	jmp l130
l129:
	add $6,1
	pop $6
	jmp l127
l130:
	localdef $7
	push $6
	call vmus,get
	pop $7
	push $7
	spushs
	push "-l"
	cmpst
	jne l132
	spop $a
	push 1
	pop $2
	jmp l131
l132:
	push "-v"
	cmpst
	jne l133
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $5
	push $5
	push musicvolume
	pop $b
	popax
	mul $a,$b
	push 100
	pop $b
	popax
	div $a,$b
	psax
	pop $5
	jmp l131
l133:
	push "-fin"
	cmpst
	jne l134
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $3
	jmp l131
l134:
	push "-fout"
	cmpst
	jne l135
	spop $a
	add $6,1
	pop $6
	push $6
	call vmus,get
	pop $4
	jmp l131
l135:
	push "-p"
	cmpst
	jne l136
	spop $a
	jmp l131
l136:
	spop $a
	push $6
	pop ilastid
	call vmus,size
	pop $6
l131:
	jmp l129
l128:
	push $5
	call gameapi,setmusicvol
	push $2
	cmp0
	je l138
	push $1
	call gameapi,playmusic
	call vmus,size
	pop ilastid
	ret
l138:
	push $1
	call gameapi,loadmusic
	push $3
	cmp0
	je l140
	push $3
	call gameapi,fadeinmusic
	jmp l139
l140:
	call gameapi,startmusic
l139:
	push $4
	cmp0
	je l142
	push $4
	call gameapi,fadeoutmusic
l142:
	end method
	method fadeout
	localint $1
	pop $1
	call gameapi,ismusicplaying
	cmp0
	je l144
	push $1
	call gameapi,fadeoutmusic
	call vmus,size
	pop ilastid
l144:
	end method
	method isplaying
	call gameapi,ismusicplaying
	end method
	method stop
	push 0
	call gameapi,endmusic
	end method
	end class

	new int,igmstate
	new string,sgmstate
	new int,igmdemo
	push "igmdemo:"
	call dbconf,dbgetint
	pop igmdemo
	new int,igmbegin
	push 1
	pop igmbegin
	new int,igmsoundson
	push "igmsoundson:"
	call dbconf,dbgetint
	pop igmsoundson
	new string,sgmfontfile
	push "sgmfontfile:"
	call dbconf,dbget
	pop sgmfontfile
	new string,sgmfontmono
	push "sgmfontmono:"
	call dbconf,dbget
	pop sgmfontmono
	new string,sgmfontmonobold
	push "sgmfontmonobold:"
	call dbconf,dbget
	pop sgmfontmonobold
	new string,sgmfontbold
	push "sgmfontbold:"
	call dbconf,dbget
	pop sgmfontbold
	new string,sgmfontitalic
	push "sgmfontitalic:"
	call dbconf,dbget
	pop sgmfontitalic
	new string,SFXPATH
	push "sfxpath:"
	call dbconf,dbget
	pop SFXPATH
	new string,BGRPATH
	push "sndbgrpath:"
	call dbconf,dbget
	pop BGRPATH
	new string,MUSICPATH
	push "musicpath:"
	call dbconf,dbget
	pop MUSICPATH
	new string,LANG
	push "lang:"
	call dbconf,dbget
	pop LANG
	new string,LANGDIR
	push "lang/"
	push LANG
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop LANGDIR
	new string,SNDPATH
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l146
	push ""
	pop LANG
l146:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l148
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l148:
	new int,igmappw
	new int,igmapph
	call engine,getscreenres
	pop igmapph
	pop igmappw
	new int,iResX
	new int,iResY
	call engine,getscreensize
	pop iResY
	pop iResX
	new real,rgmscalex
	new real,rgmscaley
	call engine,getscreenscale
	pop rgmscaley
	pop rgmscalex
	class newvars
	method init
	new string,_sclpath
	push ""
	pop _sclpath
	new string,_sclwavpath
	push ""
	pop _sclwavpath
	end method
	method _checkfont
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l150
	push sgmfontfile
	pop $1
l150:
	push ".ttf"
	call $1,contains
	cmp0
	je l152
	push $3
	spushs
	spop $e
	new font,[$e]
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	pop $1
l152:
	push $1
	end method
	method checkfont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push "_fnt"
	cthis _checkfont
	end method
	method begingame
	push igmbegin
	neg
	pop igmbegin
	push igmbegin
	neg
	end method
	method newarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $3
	push 0
	cmpjle
	cmp0
	je l154
	ret
l154:
	sub $3,1
	pop $3
l155:
	push $3
	push 0
	cmpjae
	cmp0
	je l156
	push $1
	spushs
	push $2
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	sub $3,1
	pop $3
	jmp l155
l156:
	end method
	method setgraphpath
	localstring $1
	pop $1
	push $1
	pop _sclpath
	end method
	method setwavpath
	localstring $1
	pop $1
	push $1
	pop _sclwavpath
	end method
	method getgraphpath
	push _sclpath
	ret
	end method
	method getsndpath
	push _sclwavpath
	ret
	end method
	method getpath
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l158
	push 1
	call $1,strsubb
	jmp l157
l158:
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
l157:
	end method
	method newanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new anima,[$e]
	localdef $4
	push $2
	cthis getpath
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],load
	push igmdebug
	cmp0
	je l160
	push igmexportan
	cmp0
	je l162
	push $1
	spushs
	push "debug/"
	push 0
	call $4,length
	push "/"
	call $4,strgeteto
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	sub $a,$b
	call $4,getb
	pop $b
	popax
	add $a,$b
	push "/"
	call $4,strgeteto
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],saveimages
	jmp l161
l162:
	push igmimportan
	cmp0
	je l164
	push "debug/"
	push ".pyz"
	call $4,strsubes
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push "0.png"
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	cmp0
	je l166
	push $1
	spushs
	push $4
	spop $a
	call [$a],loadimages
l166:
l164:
l161:
l160:
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method newstdanima
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	cthis stdanaction
	end method
	method copyanimaactz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis copyanimaact
	push $2
	spushs
	push $4
	spop $a
	call [$a],setz
	end method
	method copyanimaact
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push $3
	push 0
	spop $a
	call [$a],setframe
	end method
	method copyanima
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new anima,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method copyanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l168
	ret
l168:
	localint $5
	push 0
	pop $5
l169:
	push $5
	push $4
	cmpjl
	cmp0
	je l170
	jmp l172
l171:
	add $5,1
	pop $5
	jmp l169
l172:
	push $1
	push $2
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	cthis copyanima
	jmp l171
l170:
	end method
	method newanimas
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push 0
	cmpjl
	cmp0
	je l174
	ret
l174:
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $2
	push $3
	cthis newanima
	push $1
	push "0"
	pop $b
	popax
	add $a,$b
	push $1
	push 1
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis copyanimas
	end method
	method newanframesgr
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push $1
	spushs
	push $3
	spop $a
	call [$a],nofframes
	pop $5
	push $1
	push $2
	push 0
	push $5
	cthis copyanimas
	localint $6
	push 0
	pop $6
l175:
	push $6
	push $5
	cmpjl
	cmp0
	je l176
	jmp l178
l177:
	add $6,1
	pop $6
	jmp l175
l178:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	push $3
	push $6
	spop $a
	call [$a],setframe
	push $4
	push "null"
	cmpjne
	cmp0
	je l180
	push $4
	spushs
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],add
l180:
	jmp l177
l176:
	push $5
	ret
	end method
	method newanframes
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis newanframesgr
	ret
	end method
	method newcanvas
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],create
	push $1
	spushs
	push $8
	spop $a
	call [$a],setz
	end method
	method newimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new img,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method copyimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $2
	spushs
	spop $e
	new img,[$e]
	push $2
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method playmusic
	localstring $1
	pop $1
	push MUSICPATH
	push $1
	pop $b
	popax
	add $a,$b
	call gameapi,playmusic
	end method
	method newsndfree
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	end method
	method snewsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	spushs
	push "onfinish"
	push "__std_finish"
	spop $a
	call [$a],addmethod
	end method
	method _newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push "."
	call $2,contains
	neg
	cmp0
	je l182
	push ".wav"
	popax
	add $2,$a
	pop $2
l182:
	push $2
	call engine,fileexist
	neg
	cmp0
	je l184
	push "wav"
	call $2,strsubes
	push "ogg"
	pop $b
	popax
	add $a,$b
	pop $2
l184:
	push $1
	spushs
	push $2
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l186
	push $1
	push $2
	call subtitle,register
l186:
	end method
	method newsfx
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push SFXPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgr
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push BGRPATH
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newbgrloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newbgr
	push $1
	cthis sndplayloop
	end method
	method newsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	cthis _newsnd
	end method
	method newsndloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	cthis looponfinish1
	end method
	method looponfinish1
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
	end method
	method sndplayloop
	localstring $1
	pop $1
	push $1
	cthis looponfinish1
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method newsnds
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $6
	localint $7
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $7
	localint $8
	push 0
	pop $8
l187:
	push $8
	push $7
	cmpjl
	cmp0
	je l188
	jmp l190
l189:
	add $8,1
	pop $8
	jmp l187
l190:
	push $1
	push $2
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new snd,[$e]
	push $6
	spushs
	cthis getsndpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $8
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	jmp l189
l188:
	end method
	method newtimer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],delay
	end method
	method newtimercycle
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new timer,[$e]
	push $1
	spushs
	push $3
	spop $a
	call [$a],settick
	push $1
	spushs
	push $2
	spop $a
	call [$a],setcycle
	end method
	method stdanaction
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $a
	call [$a],actionname
	pop $2
	push "L"
	call $2,contains
	cmp0
	je l192
	push $1
	cthis looponfinish
	jmp l191
l192:
	push "H"
	call $2,contains
	cmp0
	je l194
	push $1
	cthis hideonfinish
l194:
l191:
	push "P"
	call $2,contains
	cmp0
	je l196
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l196:
	end method
	method newanactionsgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	push $1
	push $2
	push 0
	push $4
	cthis copyanimas
	localstring $5
	localint $6
	push 0
	pop $6
l197:
	push $6
	push $4
	cmpjl
	cmp0
	je l198
	jmp l200
l199:
	add $6,1
	pop $6
	jmp l197
l200:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	push $6
	push 0
	spop $a
	call [$a],setframe
	push $5
	cthis stdanaction
	push $3
	push "null"
	cmpjne
	cmp0
	je l202
	push $3
	spushs
	push $5
	spop $a
	call [$a],add
l202:
	jmp l199
l198:
	push $4
	ret
	end method
	method newanactions
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanactionsgr
	ret
	end method
	method newanfrbyactgr
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	spop $a
	call [$a],nofactions
	pop $4
	localint $5
	push 0
	pop $5
l203:
	push $5
	push $4
	cmpjl
	cmp0
	je l204
	jmp l206
l205:
	add $5,1
	pop $5
	jmp l203
l206:
	push $1
	push $2
	push $5
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $5
	push $3
	cthis newanframesgr
	popax
	jmp l205
l204:
	push $4
	ret
	end method
	method newanfrbyact
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis newanfrbyactgr
	ret
	end method
	method loadanfrbyact
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanfrbyact
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanactions
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $4
	push $4
	push $2
	push $3
	cthis newanima
	localint $5
	push $4
	push $1
	cthis newanactions
	pop $5
	push $4
	spushs
	spop $a
	call [$a],hide
	push $5
	ret
	end method
	method loadanframes
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push $1
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $2
	push $4
	cthis newanima
	localint $6
	push $5
	push $1
	push $3
	cthis newanframes
	pop $6
	push $5
	spushs
	spop $a
	call [$a],hide
	push $6
	ret
	end method
	method newbutimg
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],set
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newbutan
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new button,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],setan
	push $1
	spushs
	push $5
	spop $a
	call [$a],setmouse
	end method
	method newdb
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],load
	end method
	method newdbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push $2
	cthis getpath
	spop $a
	call [$a],loadscritp
	end method
	method vargmset
	localstring $1
	localdef $2
	pop $2
	pop $1
	localstring $3
	call gameapi,getgamename
	pop $3
	push $3
	spushs
	push $1
	spop $a
	call [$a],hasvar
	neg
	cmp0
	je l208
	push $3
	spushs
	call $2,gettype
	push $1
	spop $a
	call [$a],varnew
l208:
	push $1
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	end class

	module clsurf
	method init
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l209
	push $1
	push $5
	cmpjle
	cmp0
	je l209
	push $2
	push $4
	cmpjae
	cmp0
	je l209
	push $2
	push $6
	cmpjle
	jmp l211
l209:
	push 0
	jmp l211
l210:
	push 1
l211:
	end method
	method isin2
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	cmpjae
	cmp0
	je l212
	push $1
	push $3
	push $5
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l212
	push $2
	push $4
	cmpjae
	cmp0
	je l212
	push $2
	push $4
	push $6
	pop $b
	popax
	add $a,$b
	cmpjl
	jmp l214
l212:
	push 0
	jmp l214
l213:
	push 1
l214:
	end method
	method inscreen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $3
	pop $b
	popax
	sub $a,$b
	push 0
	push $4
	pop $b
	popax
	sub $a,$b
	push 800
	push $3
	pop $b
	popax
	add $a,$b
	push 600
	push $4
	pop $b
	popax
	add $a,$b
	cthis isin
	end method
	method insurf
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	spushs
	spop $a
	call [$a],getpx
	push $3
	spushs
	spop $a
	call [$a],getpy
	push $3
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis isin
	end method
	method issurfin
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l216
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l216
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	jne l216
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l217
l215:
	push 0
	jmp l217
l216:
	push 1
l217:
	end method
	method commonsurface
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis issurfin
	cmp0
	jne l219
	push $5
	push $6
	push $7
	push $8
	push $1
	push $2
	push $3
	push $4
	cthis issurfin
	jmp l220
l218:
	push 0
	jmp l220
l219:
	push 1
l220:
	end method
	method commonimgs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis commonsurface
	end method
	method surfwithinsurf
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l221
	push $3
	push $2
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l221
	push $1
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	cmp0
	je l221
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	cthis isin
	jmp l223
l221:
	push 0
	jmp l223
l222:
	push 1
l223:
	end method
	method imgwithinimg
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis surfwithinsurf
	end method
	end module

	module cllen
	method init
	new int,il1
	new int,ilx
	new int,ily
	end method
	method ilenx
	push ilx
	ret
	end method
	method ileny
	push ily
	ret
	end method
	method ilen4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	ret
	end method
	method ilen3
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	cthis ilen
	ret
	end method
	method ilen5
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpx
	push $2
	spushs
	spop $a
	call [$a],getpy
	cthis ilen
	ret
	end method
	method ilen2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	push $3
	cthis ilen
	ret
	end method
	method ilen
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $3
	pop $b
	popax
	sub $a,$b
	pop ilx
	push $2
	push $4
	pop $b
	popax
	sub $a,$b
	pop ily
	push ilx
	push ily
	call il1,length
	ret
	end method
	method iclenx
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method iclenx2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method icleny2
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	spushs
	spop $a
	call [$a],getcy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method isbetween2
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	spushs
	spop $a
	call [$a],getcx
	push $2
	spushs
	spop $a
	call [$a],getcy
	push $3
	push $4
	push $5
	push $6
	cthis isbetween
	ret
	end method
	method isbetween
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis ilen
	pop il1
	push ilx
	push $4
	cmpjae
	cmp0
	je l224
	push ilx
	push $6
	cmpjle
	cmp0
	je l224
	push ily
	push $5
	cmpjae
	cmp0
	je l224
	push ily
	push $7
	cmpjle
	jmp l226
l224:
	push 0
	jmp l226
l225:
	push 1
l226:
	ret
	end method
	method ilodlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],lodx
	push $1
	spushs
	spop $a
	call [$a],lody
	push $2
	spushs
	spop $a
	call [$a],lodx
	push $2
	spushs
	spop $a
	call [$a],lody
	cthis ilen
	end method
	method iposlen
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpos
	push $2
	spushs
	spop $a
	call [$a],getpos
	cthis ilen
	end method
	end module

	class classansearcher
	method init
	end method
	method _findnotr
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $6
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $6
	localint $7
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $7
l227:
	push $2
	push $6
	cmpjne
	cmp0
	je l228
	push $3
	push $7
	cmpjne
	jmp l230
l228:
	push 0
	jmp l230
l229:
	push 1
l230:
	cmp0
	je l231
	push $1
	spushs
	push $2
	push $3
	push 0
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l233
	push $2
	push $3
	ret
l233:
	push $4
	popax
	add $2,$a
	pop $2
	push $5
	popax
	add $3,$a
	pop $3
	jmp l227
l231:
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	ret
	end method
	method firstnotrx1y
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	method firstnotrexy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrxy1
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push 0
	push 1
	cthis _findnotr
	ret
	end method
	method firstnotrx1ey
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getey
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	push 0
	cthis _findnotr
	ret
	end method
	end class

	class signal_pack
	method init
	end method
	method addsignals
	localstring $1
	pop $1
	push $1
	spushs
	push "operator<"
	push "signal_pack0"
	spop $a
	call [$a],addmethod
	end method
	method signal_pack0
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	end method
	end class

	class ImagePos
	method init
	end method
	method getex
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	end method
	method getey
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	end class

	class ImageVisible
	method init
	new int,_isvisible
	push 1
	pop _isvisible
	end method
	method isvisible
	push _isvisible
	end method
	method show
	push 1
	pop _isvisible
	end method
	method hide
	push 0
	pop _isvisible
	end method
	end class

	class Image
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push A
	push "getz"
	push 0
	push "getpx"
	push 0
	push "getpy"
	push 0
	push "getw"
	push 0
	push "geth"
	push 0
	push "isvisible"
	push 0
	spop $a
	call [$a],vars2
	push $1
	spushs
	push "show"
	push "Image0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "hide"
	push "Image1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setz"
	push "Image2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpos"
	push "Image3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "move"
	push "Image4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getex"
	push "Image5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getey"
	push "Image6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcx"
	push "Image7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getcy"
	push "Image8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isin"
	push "Image9"
	spop $a
	call [$a],addmethod
	end method
	method Image0
	push 1
	pop isvisible
	end method
	method Image1
	push 0
	pop isvisible
	end method
	method Image2
	localint $1
	pop $1
	push $1
	pop getz
	end method
	method Image3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop getpx
	push $2
	pop getpy
	end method
	method Image4
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add getpx,$a
	pop getpx
	push $2
	popax
	add getpy,$a
	pop getpy
	end method
	method Image5
	push getpx
	push getw
	pop $b
	popax
	add $a,$b
	end method
	method Image6
	push getpy
	push geth
	pop $b
	popax
	add $a,$b
	end method
	method Image7
	push getpx
	push getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image8
	push getpy
	push geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	end method
	method Image9
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	neg
	cmp0
	je l235
	push $3
	neg
	cmp0
	jne l238
	push $3
	cmp0
	je l239
	push isvisible
	jmp l241
l239:
	push 0
	jmp l241
l240:
	push 1
l241:
	jmp l242
l237:
	push 0
	jmp l242
l238:
	push 1
l242:
	cmp0
	je l243
	push $1
	push getpx
	cmpjae
	cmp0
	je l244
	push $1
	cthis getex
	cmpjl
	cmp0
	je l244
	push $2
	push getpy
	cmpjae
	cmp0
	je l244
	push $2
	cthis getey
	cmpjl
	jmp l246
l244:
	push 0
	jmp l246
l245:
	push 1
l246:
	jmp l236
l243:
	push 0
l236:
	jmp l234
l235:
	push 0
l234:
	end method
	end class

	class anima_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "_clanbuildpomvars"
	push "anima_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],_clanbuildpomvars
	push $1
	spushs
	push "setbpos"
	push "anima_pack1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "saverelpos"
	push "anima_pack2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setrelpos"
	push "anima_pack3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssaverelpos"
	push "anima_pack4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mssetrelpos"
	push "anima_pack5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rplay"
	push "anima_pack6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setcpos"
	push "anima_pack7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator="
	push "anima_pack8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator=="
	push "anima_pack9"
	spop $a
	call [$a],addmethod
	push $1
	cthis addsignals
	end method
	method anima_pack0
	new int,_ixp
	new int,_iyp
	end method
	method anima_pack1
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method anima_pack2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	pop $b
	popax
	sub $a,$b
	pop _ixp
	push $2
	cthis getpy
	pop $b
	popax
	sub $a,$b
	pop _iyp
	end method
	method anima_pack3
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push _ixp
	pop $b
	popax
	sub $a,$b
	push $2
	push _iyp
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack4
	call mouse,getpos
	cthis saverelpos
	end method
	method anima_pack5
	call mouse,getpos
	cthis setrelpos
	end method
	method anima_pack6
	localstring $1
	pop $1
	push $1
	cthis isplaying
	neg
	cmp0
	je l248
	push $1
	cthis play
l248:
	end method
	method anima_pack7
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setbpos
	end method
	method anima_pack8
	localstring $1
	pop $1
	push $1
	cthis copy
	end method
	method anima_pack9
	localstring $1
	pop $1
	cthis actionnr
	push $1
	spushs
	spop $a
	call [$a],actionnr
	cmpje
	cmp0
	je l249
	cthis framenr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cmpje
	jmp l251
l249:
	push 0
	jmp l251
l250:
	push 1
l251:
	end method
	end class

	class timer_pack
	parent signal_pack
	method init
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	cthis addsignals
	end method
	end class

	class vector_pack
	method init
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l252:
	push $2
	cthis size
	cmpjl
	cmp0
	je l253
	jmp l255
l254:
	add $2,1
	pop $2
	jmp l252
l255:
	push $1
	spushs
	push $2
	cthis get
	spop $d
	cthis [$d]
	jmp l254
l253:
	end method
	method resizemethods
	localstring $1
	pop $1
	push $1
	spushs
	push "each"
	push "each"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator-"
	push "vector_pack0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "operator+"
	push "vector_pack1"
	spop $a
	call [$a],addmethod
	end method
	method vector_pack0
	localdef $1
	pop $1
	push $1
	cthis remove
	cthis getname
	end method
	method vector_pack1
	localdef $1
	pop $1
	push $1
	cthis add
	cthis getname
	end method
	end class

	method new_object
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $1
	push "_pack"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $a
	 clparent [$a],resizemethods
	end method
	method new_anima
	localstring $1
	pop $1
	push "anima"
	push $1
	cthis new_object
	end method
	method new_vector
	localstring $1
	pop $1
	push "vector"
	push $1
	cthis new_object
	end method
	class classanfilter
	method init
	end method
	method buildanfilter
	new filter,ft
	cthis getname
	call ft,link
	push 1
	call ft,setpivottype
	end method
	method build
	localstring $1
	pop $1
	push $1
	spushs
	push "buildanfilter"
	push "buildanfilter"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildanfilter
	push $1
	spushs
	push "setopacity"
	push "classanfilter0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setzoom"
	push "classanfilter1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setangle"
	push "classanfilter2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getangle"
	push "classanfilter3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "rotate"
	push "classanfilter4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setpivottype"
	push "classanfilter5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "unlink"
	push "classanfilter6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "link"
	push "classanfilter7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "blend"
	push "classanfilter8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "mask"
	push "classanfilter9"
	spop $a
	call [$a],addmethod
	end method
	method classanfilter0
	localint $1
	pop $1
	push $1
	call ft,setopacity
	end method
	method classanfilter1
	localreal $1
	pop $1
	push $1
	call ft,setzoom
	end method
	method classanfilter2
	localreal $1
	pop $1
	push $1
	call ft,setangle
	end method
	method classanfilter3
	call ft,getangle
	ret
	end method
	method classanfilter4
	localreal $1
	pop $1
	push $1
	call ft,rotate
	end method
	method classanfilter5
	localint $1
	pop $1
	push $1
	call ft,setpivottype
	end method
	method classanfilter6
	call ft,unlink
	end method
	method classanfilter7
	cthis getname
	call ft,link
	end method
	method classanfilter8
	localstring $1
	pop $1
	push $1
	call ft,blend
	end method
	method classanfilter9
	localstring $1
	pop $1
	push $1
	call ft,mask
	end method
	end class

	class classancounter
	method init
	new int,iile
	new int,id
	new string,_san
	new vector,_vs
	new int,_pos
	end method
	method set
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _san
	push $2
	pop iile
	push 0
	pop id
	call $1,length
	pop _pos
	push $2
	push 0
	call _vs,resize
	end method
	method get
	localstring $1
	push _san
	push id
	pop $b
	popax
	add $a,$b
	pop $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop id
	push $1
	ret
	end method
	method getf
	localint $1
	push 0
	pop $1
l256:
	push $1
	push iile
	cmpjl
	cmp0
	je l257
	jmp l259
l258:
	add $1,1
	pop $1
	jmp l256
l259:
	push $1
	call _vs,get
	neg
	cmp0
	je l261
	push $1
	push 1
	call _vs,set
	push _san
	push $1
	pop $b
	popax
	add $a,$b
	ret
l261:
	jmp l258
l257:
	push "null"
	ret
	end method
	method retf
	localstring $1
	pop $1
	push _san
	call $1,strsubbs
	push 0
	call _vs,set
	end method
	method isfree
	localint $1
	pop $1
	push $1
	call _vs,get
	ret
	end method
	method getile
	push iile
	ret
	end method
	method allfree
	call _vs,vecsum
	push 0
	cmpje
	end method
	end class

	class gmobjvec
	method init
	new vector,lsim
	push "string"
	call lsim,type
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	call engine,varexist
	cmp0
	je l263
	push $1
	spushs
	spop $a
	call [$a],gettype
	spushs
	push "vector"
	cmpst
	jne l265
	spop $a
	push $1
	cthis copy
	jmp l264
l265:
	push "gmobjvec"
	cmpst
	jne l266
	spop $a
	push $1
	cthis copy
	jmp l264
l266:
	push "gmimgvec"
	cmpst
	jne l267
	spop $a
	push $1
	cthis copy
	jmp l264
l267:
	spop $a
	cthis free
	push $1
	cthis add
l264:
	jmp l262
l263:
	cthis free
	push $1
	cthis add
l262:
	end method
	method save
	localstring $1
	pop $1
	push $1
	call lsim,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call lsim,load
	end method
	method operator+
	localstring $1
	pop $1
	push $1
	cthis add
	cthis getname
	ret
	end method
	method operator-
	localstring $1
	pop $1
	push $1
	cthis remove
	cthis getname
	ret
	end method
	method removegr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l268:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l269
	jmp l271
l270:
	add $2,1
	pop $2
	jmp l268
l271:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis remove
	jmp l270
l269:
	end method
	method addtogr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l272:
	push $2
	cthis size
	cmpjl
	cmp0
	je l273
	jmp l275
l274:
	add $2,1
	pop $2
	jmp l272
l275:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],add
	jmp l274
l273:
	end method
	method addgr
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l276:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l277
	jmp l279
l278:
	add $2,1
	pop $2
	jmp l276
l279:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l278
l277:
	end method
	method addgroups
	push "addgr"
	cthis withlist
	end method
	method copy
	localstring $1
	pop $1
	cthis free
	push $1
	cthis addgr
	end method
	method free
	call lsim,free
	end method
	method size
	call lsim,size
	ret
	end method
	method empty
	cthis size
	push 0
	cmpje
	ret
	end method
	method hash
	call lsim,hash
	end method
	method first
	push 0
	call lsim,get
	ret
	end method
	method last
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,get
	ret
	end method
	method print
	push ""
	call engine,print
	push "------ type("
	cthis gettype
	pop $b
	popax
	add $a,$b
	push ") "
	pop $b
	popax
	add $a,$b
	cthis getname
	pop $b
	popax
	add $a,$b
	push " ------"
	pop $b
	popax
	add $a,$b
	call engine,print
	call lsim,print
	push "------ end ------"
	call engine,print
	push ""
	call engine,print
	end method
	method get
	localint $1
	pop $1
	push $1
	call lsim,get
	ret
	end method
	method set
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,set
	end method
	method add
	localstring $1
	pop $1
	push $1
	call lsim,add
	end method
	method additer
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l280:
	push $3
	push 0
	cmpja
	cmp0
	je l281
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	sub $3,1
	pop $3
	jmp l280
l281:
	end method
	method buildarray
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	call gameapi,getgamename
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newarray
	push $2
	push 0
	push $3
	cthis additer
	end method
	method deleteall
	localint $1
	push 0
	pop $1
l282:
	push $1
	cthis size
	cmpjl
	cmp0
	je l283
	jmp l285
l284:
	add $1,1
	pop $1
	jmp l282
l285:
	push $1
	cthis get
	spushs
	spop $d
	delete [$d]
	jmp l284
l283:
	end method
	method deleteallgm
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l286:
	push $2
	cthis size
	cmpjl
	cmp0
	je l287
	jmp l289
l288:
	add $2,1
	pop $2
	jmp l286
l289:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],vardel
	jmp l288
l287:
	end method
	method deleteallgmobj
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l290:
	push $2
	cthis size
	cmpjl
	cmp0
	je l291
	jmp l293
l292:
	add $2,1
	pop $2
	jmp l290
l293:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],deletegmobj
	jmp l292
l291:
	end method
	method lockall
	push "lock"
	cthis eval
	cthis print
	end method
	method unlockall
	push "unlock"
	cthis eval
	end method
	method addbegin
	localstring $1
	pop $1
	push $1
	call lsim,addbegin
	end method
	method swap
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call lsim,swap
	end method
	method addonce
	localstring $1
	pop $1
	push $1
	call lsim,contains
	neg
	cmp0
	je l295
	push $1
	call lsim,add
l295:
	end method
	method sepadd
	localstring $1
	pop $1
	localstring $2
	pop $2
l296:
	push $2
	push $1
	cmpjne
	cmp0
	je l297
	push $2
	cthis addbegin
	pop $2
	jmp l296
l297:
	end method
	method addlist
	push A
	cthis sepadd
	end method
	method removelist
	push "remove"
	cthis withlist
	end method
	method insertat
	localstring $1
	localint $2
	pop $2
	pop $1
	localdef $3
	cthis size
	pop $3
	push $2
	push 0
	cmpjle
	cmp0
	je l299
	push $1
	cthis addbegin
	jmp l298
l299:
	push $2
	push $3
	cmpjae
	cmp0
	je l301
	push $1
	cthis add
	jmp l300
l301:
	push "null"
	cthis add
	localdef $4
	push $3
	pop $4
l302:
	push $4
	push $2
	cmpja
	cmp0
	je l303
	jmp l305
l304:
	sub $4,1
	pop $4
	jmp l302
l305:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l304
l303:
	push $2
	push $1
	cthis set
l300:
l298:
	end method
	method remove
	localstring $1
	pop $1
	push $1
	call lsim,remove
	end method
	method removeat
	localint $1
	pop $1
	push $1
	call lsim,removeat
	end method
	method removefirst
	push 0
	call lsim,removeat
	end method
	method removelast
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	call lsim,removeat
	end method
	method removealloccurs
	localstring $1
	pop $1
l306:
	push $1
	cthis contains
	cmp0
	je l307
	push $1
	cthis remove
	jmp l306
l307:
	end method
	method removeif
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l308:
	push $2
	cthis size
	cmpjl
	cmp0
	je l309
	jmp l311
l310:
	add $2,1
	pop $2
	jmp l308
l311:
	push $2
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l313
	push $2
	cthis removeat
l313:
	jmp l310
l309:
	end method
	method find
	localstring $1
	pop $1
	push $1
	call lsim,find
	ret
	end method
	method contains
	localstring $1
	pop $1
	push $1
	call lsim,contains
	ret
	end method
	method addgroup
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis addgroup2
	end method
	method addgroup2
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
l314:
	push $2
	push $3
	cmpjle
	cmp0
	je l315
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	cthis add
	add $2,1
	pop $2
	jmp l314
l315:
	end method
	method rand
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l317
	call $1,rand
	cthis get
	jmp l316
l317:
	push "null"
l316:
	end method
	method randdiff
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l319
	localint $3
	call $2,rand
	pop $3
	localint $4
	push $3
	pop $4
l320:
	push $3
	cthis get
	push $1
	cmpje
	cmp0
	je l321
	push $3
	push 1
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	div $a,$b
	push $d
	pop $3
	push $3
	push $4
	cmpje
	cmp0
	je l323
	push "null"
	ret
l323:
	jmp l320
l321:
	push $3
	cthis get
	ret
l319:
	push "null"
	end method
	method buildfullvars
	push "gmobjvec0"
	cthis each
	end method
	method gmobjvec0
	localdef $1
	pop $1
	cthis buildfullname
	end method
	method buildvars
	push "gmobjvec1"
	cthis each
	end method
	method gmobjvec1
	localdef $1
	pop $1
	cthis getname
	cthis addtogamevars
	end method
	method movefrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	cthis find
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l325
l326:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l327
	push $4
	call lsim,get
	spushs
	push $2
	push $3
	spop $a
	call [$a],move
	add $4,1
	pop $4
	jmp l326
l327:
l325:
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method show
	push "show"
	cthis eval
	end method
	method hide
	push "hide"
	cthis eval
	end method
	method stop
	localint $1
	pop $1
	push "stop"
	push $1
	cthis eval1
	end method
	method play
	push "play"
	cthis eval
	end method
	method setdelay
	localint $1
	pop $1
	push "setdelay"
	push $1
	cthis eval1
	end method
	method isplaying
	localint $1
	push 0
	pop $1
l328:
	push $1
	cthis size
	cmpjl
	cmp0
	je l329
	jmp l331
l330:
	add $1,1
	pop $1
	jmp l328
l331:
	push $1
	cthis get
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],isplaying
	cmp0
	je l333
	push 1
	ret
l333:
	jmp l330
l329:
	push 0
	end method
	method graddmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "addmethod"
	push $1
	push $2
	cthis eval2
	end method
	method getimg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l334:
	push $5
	push 0
	cmpjae
	cmp0
	je l335
	jmp l337
l336:
	sub $5,1
	pop $5
	jmp l334
l337:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l339
	push $5
	call lsim,get
	ret
l339:
	jmp l336
l335:
	push "null"
	ret
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l340:
	push $5
	push 0
	cmpjae
	cmp0
	je l341
	jmp l343
l342:
	sub $5,1
	pop $5
	jmp l340
l343:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l345
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l345:
	jmp l342
l341:
	push 0
	ret
	end method
	method setframe
	localdef $1
	localint $2
	pop $2
	pop $1
	push "setframe"
	push $1
	push $2
	cthis eval2
	end method
	method setz
	localint $1
	pop $1
	push "setz"
	push $1
	cthis eval1
	end method
	method eval
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l346:
	push $2
	call lsim,size
	cmpjl
	cmp0
	je l347
	jmp l349
l348:
	add $2,1
	pop $2
	jmp l346
l349:
	push $2
	call lsim,get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l348
l347:
	end method
	method eval1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l350:
	push $3
	call lsim,size
	cmpjl
	cmp0
	je l351
	jmp l353
l352:
	add $3,1
	pop $3
	jmp l350
l353:
	push $3
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l352
l351:
	end method
	method eval2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l354:
	push $4
	call lsim,size
	cmpjl
	cmp0
	je l355
	jmp l357
l356:
	add $4,1
	pop $4
	jmp l354
l357:
	push $4
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l356
l355:
	end method
	method eval3
	localstring $1
	localdef $2
	localdef $3
	localdef $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l358:
	push $5
	call lsim,size
	cmpjl
	cmp0
	je l359
	jmp l361
l360:
	add $5,1
	pop $5
	jmp l358
l361:
	push $5
	call lsim,get
	spushs
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $d
	spop $a
	call [$a],[$d]
	jmp l360
l359:
	end method
	method _find
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l362:
	push $3
	cthis size
	cmpjl
	cmp0
	je l363
	jmp l365
l364:
	add $3,1
	pop $3
	jmp l362
l365:
	push $3
	cthis get
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	cmpje
	cmp0
	je l367
	push $3
	ret
l367:
	jmp l364
l363:
	push 1
	popax
	sub 0,$a
	end method
	method _find1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l368:
	push $3
	cthis size
	cmpjl
	cmp0
	je l369
	jmp l371
l370:
	add $3,1
	pop $3
	jmp l368
l371:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l373
	push $3
	ret
l373:
	jmp l370
l369:
	push 1
	popax
	sub 0,$a
	end method
	method each
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l374:
	push $2
	cthis size
	cmpjl
	cmp0
	je l375
	jmp l377
l376:
	add $2,1
	pop $2
	jmp l374
l377:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l376
l375:
	end method
	method each1
	localstring $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l378:
	push $3
	cthis size
	cmpjl
	cmp0
	je l379
	jmp l381
l380:
	add $3,1
	pop $3
	jmp l378
l381:
	push $3
	cthis get
	spushs
	push $1
	spushs
	push $3
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	jmp l380
l379:
	end method
	method each2
	localstring $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l382:
	push $4
	cthis size
	cmpjl
	cmp0
	je l383
	jmp l385
l384:
	add $4,1
	pop $4
	jmp l382
l385:
	push $4
	cthis get
	spushs
	push $1
	spushs
	push $4
	push $2
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l384
l383:
	end method
	method ineach
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l386:
	push $2
	cthis size
	cmpjl
	cmp0
	je l387
	jmp l389
l388:
	add $2,1
	pop $2
	jmp l386
l389:
	push $2
	cthis get
	spushs
	push $1
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	neg
	cmp0
	je l391
	push 0
	ret
l391:
	jmp l388
l387:
	push 1
	end method
	method find_closest
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis empty
	cmp0
	je l393
	ret
l393:
	localint $3
	push 0
	pop $3
	localreal $4
	localreal $5
	push 0
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $5
	localint $6
	push 1
	pop $6
l394:
	push $6
	cthis size
	cmpjl
	cmp0
	je l395
	jmp l397
l396:
	add $6,1
	pop $6
	jmp l394
l397:
	push $6
	cthis get
	spushs
	push $2
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	pop $4
	push $4
	push $5
	cmpjl
	cmp0
	je l399
	push $6
	pop $3
	push $5
	pop $4
l399:
	jmp l396
l395:
	push $3
	end method
	method sortimgsfun
	localstring $1
	pop $1
	push $1
	call lsim,vecsort
	end method
	method sortimgs
	push "_scmpimg1"
	call lsim,vecsort
	end method
	method _scmpimg1
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpjl
	cmp0
	jne l401
	push $1
	spushs
	spop $a
	call [$a],getz
	push $2
	spushs
	spop $a
	call [$a],getz
	cmpje
	cmp0
	je l402
	push $1
	spushs
	spop $a
	call [$a],getidobj
	push $2
	spushs
	spop $a
	call [$a],getidobj
	cmpjl
	jmp l404
l402:
	push 0
	jmp l404
l403:
	push 1
l404:
	jmp l405
l400:
	push 0
	jmp l405
l401:
	push 1
l405:
	ret
	end method
	end class

	class gmimgvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	new int,_ix
	push 0
	pop _ix
	new int,_iy
	push 0
	pop _iy
	new int,_iz
	push 0
	pop _iz
	new int,_ifound
	push 1
	popax
	sub 0,$a
	pop _ifound
	new string,sanload
	push "null"
	pop sanload
	end method
	method _setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	pop _iy
	pop _ix
	end method
	method lodx
	push 0
	end method
	method lody
	push 0
	end method
	method getposx
	push _ix
	ret
	end method
	method getposy
	push _iy
	ret
	end method
	method getpos
	push _ix
	push _iy
	ret
	end method
	method getpx
	push _ix
	ret
	end method
	method getpy
	push _iy
	ret
	end method
	method getw
	cthis getex
	cthis getpx
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method geth
	cthis getey
	cthis getpy
	pop $b
	popax
	sub $a,$b
	ret
	end method
	method getcx
	cthis getpx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getcy
	cthis getpy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	ret
	end method
	method getz
	push _iz
	ret
	end method
	method getex
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l407
	push _ix
	ret
l407:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l408:
	push $4
	push $1
	cmpjl
	cmp0
	je l409
	jmp l411
l410:
	add $4,1
	pop $4
	jmp l408
l411:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getex
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l413
	push $3
	pop $2
l413:
	jmp l410
l409:
	push $2
	ret
	end method
	method getey
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l415
	push _iy
	ret
l415:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l416:
	push $4
	push $1
	cmpjl
	cmp0
	je l417
	jmp l419
l418:
	add $4,1
	pop $4
	jmp l416
l419:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getey
	pop $3
	push $3
	push $2
	cmpja
	cmp0
	je l421
	push $3
	pop $2
l421:
	jmp l418
l417:
	push $2
	ret
	end method
	method _getpx
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l423
	push _ix
	ret
l423:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l424:
	push $4
	push $1
	cmpjl
	cmp0
	je l425
	jmp l427
l426:
	add $4,1
	pop $4
	jmp l424
l427:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpx
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l429
	push $3
	pop $2
l429:
	jmp l426
l425:
	push $2
	ret
	end method
	method _getpy
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l431
	push _iy
	ret
l431:
	localint $2
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $2
	localint $3
	localint $4
	push 1
	pop $4
l432:
	push $4
	push $1
	cmpjl
	cmp0
	je l433
	jmp l435
l434:
	add $4,1
	pop $4
	jmp l432
l435:
	push $4
	cthis get
	spushs
	spop $a
	call [$a],getpy
	pop $3
	push $3
	push $2
	cmpjl
	cmp0
	je l437
	push $3
	pop $2
l437:
	jmp l434
l433:
	push $2
	ret
	end method
	method _getw
	cthis getex
	cthis _getpx
	pop $b
	popax
	sub $a,$b
	end method
	method _geth
	cthis getey
	cthis _getpy
	pop $b
	popax
	sub $a,$b
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push "setz"
	push $1
	cthis eval1
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	popax
	add _ix,$a
	pop _ix
	push $2
	popax
	add _iy,$a
	pop _iy
	push "move"
	push $1
	push $2
	cthis eval2
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	push "setpos"
	push $1
	push $2
	cthis eval2
	end method
	method setpos2
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop _ix
	push $2
	pop _iy
	cthis empty
	neg
	cmp0
	je l439
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpx
	popax
	sub $1,$a
	pop $1
	push 0
	cthis get
	spushs
	spop $a
	call [$a],getpy
	popax
	sub $2,$a
	pop $2
	push $1
	popax
	sub 0,$a
	push $2
	popax
	sub 0,$a
	cthis move
l439:
	end method
	method changeframe
	localint $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l440:
	push $3
	cthis size
	cmpjl
	cmp0
	je l441
	jmp l443
l442:
	add $3,1
	pop $3
	jmp l440
l443:
	push $3
	cthis get
	pop $2
	push $2
	spushs
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spop $a
	call [$a],setframe
	jmp l442
l441:
	end method
	method nplay
	localint $1
	pop $1
	push "play"
	push $1
	cthis eval1
	end method
	method txtreset
	localint $1
	push 0
	pop $1
l444:
	push $1
	cthis size
	cmpjl
	cmp0
	je l445
	jmp l447
l446:
	add $1,1
	pop $1
	jmp l444
l447:
	push $1
	cthis get
	spushs
	push ""
	spop $a
	call [$a],txtset
	jmp l446
l445:
	end method
	method anputgr
	push "anputgr"
	cthis eval
	end method
	method anputy
	localint $1
	pop $1
	push "anputy"
	push ipos
	cthis eval1
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l448:
	push $5
	push 0
	cmpjae
	cmp0
	je l449
	jmp l451
l450:
	sub $5,1
	pop $5
	jmp l448
l451:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	cmp0
	je l453
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l453:
	jmp l450
l449:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method isinfunc
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l454:
	push $4
	push 0
	cmpjae
	cmp0
	je l455
	jmp l457
l456:
	sub $4,1
	pop $4
	jmp l454
l457:
	push $4
	call lsim,get
	spushs
	push $3
	spushs
	push $1
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	cmp0
	je l459
	push $4
	pop _ifound
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	ret
l459:
	jmp l456
l455:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method isincut
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l460:
	push $5
	push 0
	cmpjae
	cmp0
	je l461
	jmp l463
l462:
	sub $5,1
	pop $5
	jmp l460
l463:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	spop $a
	call [$a],withincut
	cmp0
	je l465
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],isin
	jmp l467
l465:
	push 0
	jmp l467
l466:
	push 1
l467:
	cmp0
	je l468
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l468:
	jmp l462
l461:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	method withincut
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	push $1
	push "gmimgvec0"
	cthis ineach
	pop $1
	pop $2
	end method
	method gmimgvec0
	localdef $1
	pop $1
	localint $2
	pop $2
	localint $3
	pop $3
	push $2
	push $3
	cthis withincut
	push $3
	push $2
	end method
	method findif
	localstring $1
	pop $1
	push $1
	push 1
	cthis _find
	end method
	method getfound
	push _ifound
	ret
	end method
	method getsfound
	push _ifound
	cthis get
	ret
	end method
	method findfr
	localint $1
	pop $1
	push "framenr"
	push $1
	cthis _find
	end method
	method findsfr
	localstring $1
	pop $1
	push "framename"
	push $1
	cthis _find
	end method
	method findac
	localint $1
	pop $1
	push "anactnr"
	push $1
	cthis _find
	end method
	method findsac
	localstring $1
	pop $1
	push "actionname"
	push $1
	cthis _find
	end method
	method nearest_to
	localstring $1
	pop $1
	push $1
	push "gmimgvec1"
	cthis find_closest
	end method
	method gmimgvec1
	localstring $1
	pop $1
	cthis getname
	push $1
	call cllen,ilen5
	end method
	method getsac
	localstring $1
	pop $1
	push $1
	cthis findsac
	cthis get
	end method
	method getsacfr
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l469:
	push $3
	cthis size
	cmpjl
	cmp0
	je l470
	jmp l472
l471:
	add $3,1
	pop $3
	jmp l469
l472:
	push $3
	cthis get
	spushs
	spop $a
	call [$a],actionname
	push $1
	cmpje
	cmp0
	je l474
	push $3
	cthis get
	spushs
	spop $a
	call [$a],framenr
	push $2
	cmpje
	jmp l476
l474:
	push 0
	jmp l476
l475:
	push 1
l476:
	cmp0
	je l477
	push $3
	cthis get
	ret
l477:
	jmp l471
l470:
	push "null"
	end method
	method blitto
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l478:
	push $2
	cthis size
	cmpjl
	cmp0
	je l479
	jmp l481
l480:
	add $2,1
	pop $2
	jmp l478
l481:
	push $1
	spushs
	push $2
	cthis get
	spop $a
	call [$a],blit
	jmp l480
l479:
	end method
	method sortz
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l482:
	push $2
	cthis size
	cmpjl
	cmp0
	je l483
	jmp l485
l484:
	add $2,1
	pop $2
	jmp l482
l485:
	push $2
	cthis get
	spushs
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	jmp l484
l483:
	end method
	method ancopies
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l486:
	push $3
	push $2
	cmpjl
	cmp0
	je l487
	jmp l489
l488:
	add $3,1
	pop $3
	jmp l486
l489:
	push GAME
	spushs
	push $1
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],copyanima
	push $1
	push "_"
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	cthis add
	jmp l488
l487:
	end method
	method loadallan
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localstring $4
	call gameapi,getgamename
	pop $4
	push $4
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],newanima
	push $4
	spushs
	push $1
	push $1
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $1
	spushs
	spop $a
	call [$a],hide
	end method
	method addsrcanima
	localstring $1
	pop $1
	push "srcanima"
	push $1
	cthis var2
	end method
	method operator*
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l491
	push 0
	push 1
	call $1,getb
	push "$"
	cmpje
	cmp0
	je l493
	new vector,_vtmp
	push "string"
	call _vtmp,type
	push $1
	push "/"
	call _vtmp,vecbuildfromstring
	push "an"
	call _vtmp,last
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	delete _vtmp
	jmp l492
l493:
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
l492:
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l490
l491:
	push $1
	pop $3
l490:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanactionsgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method operator<
	localstring $1
	pop $1
	localstring $2
	call gameapi,getgamename
	pop $2
	localstring $3
	push ".pyz"
	call $1,contains
	cmp0
	je l495
	push "an"
	push ".pyz"
	call $1,strsubes
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	push $1
	push 0
	spop $a
	call [$a],newanima
	jmp l494
l495:
	push $1
	pop $3
l494:
	push $3
	pop sanload
	push $2
	spushs
	push $3
	push $3
	cthis getname
	spop $a
	call [$a],newanfrbyactgr
	popax
	push $3
	spushs
	spop $a
	call [$a],hide
	push $3
	cthis addsrcanima
	end method
	method deleteloaded
	cthis deleteallgm
	push sanload
	push "null"
	cmpjne
	cmp0
	je l497
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l497:
	end method
	method deleteinit
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push 0
	pop $2
l498:
	push $2
	cthis size
	cmpjl
	cmp0
	je l499
	jmp l501
l500:
	add $2,1
	pop $2
	jmp l498
l501:
	localdef $3
	push $2
	cthis get
	pop $3
	push $3
	spushs
	spop $a
	call [$a],gettype
	push "gmimgvec"
	cmpje
	cmp0
	je l503
	push $3
	spushs
	spop $a
	call [$a],deleteinit
l503:
	push $1
	spushs
	push $3
	spop $a
	call [$a],vardel
	jmp l500
l499:
	push sanload
	push "null"
	cmpjne
	cmp0
	je l505
	call gameapi,getgamename
	spushs
	push sanload
	spop $a
	call [$a],vardel
l505:
	end method
	end class

	class gmadvvec
	parent gmimgvec
	method init
	clparent gmimgvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	call lsim,size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $5
l506:
	push $5
	push 0
	cmpjae
	cmp0
	je l507
	jmp l509
l508:
	sub $5,1
	pop $5
	jmp l506
l509:
	push $5
	call lsim,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],butisin
	cmp0
	je l511
	push $5
	pop _ifound
	push $5
	push 1
	pop $b
	popax
	add $a,$b
	ret
l511:
	jmp l508
l507:
	push 1
	popax
	sub 0,$a
	pop _ifound
	push 0
	ret
	end method
	end class

	class gmmaskvec
	parent gmadvvec
	method init
	clparent gmadvvec,init
	end method
	method butisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push $4
	clparent gmimgvec,butisin
	end method
	end class

	new int,igmsubtitle
	push 0
	pop igmsubtitle
	class Subtitle
	method init
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localreal $7
	push 0.5
	pop $7
	localint $8
	localint $9
	localint $10
	push 255
	pop $8
	push 255
	pop $9
	push 255
	pop $10
	new int,iborx
	push $5
	pop iborx
	new int,ibory
	push $6
	pop ibory
	new font,fnt
	push $3
	push $4
	call fnt,load
	new int,ifontsize
	push $4
	pop ifontsize
	new db,dbl
	push "lang/"
	push $1
	pop $b
	popax
	add $a,$b
	call dbl,load
	localstring $11
	localstring $12
	new vector,v1
	push "string"
	call v1,type
	localint $13
	push iResX
	push 2
	push $5
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push $7
	push $4
	pop $b
	popax
	mul $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	pop $13
	localint $14
	localint $15
	localint $16
	push 0
	pop $16
	localint $17
	push 0
	pop $17
l512:
	push $17
	call dbl,getrowsno
	cmpjl
	cmp0
	je l513
	jmp l515
l514:
	add $17,1
	pop $17
	jmp l512
l515:
	push $17
	push 0
	push $2
	push $17
	push 0
	call dbl,get
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	call dbl,set
	push $17
	push 1
	call dbl,get
	pop $11
	push $11
	push " "
	call v1,vecbuildfromstring
	push ""
	pop $12
	push 1
	pop $14
	push 0
	pop $15
l516:
	push $15
	call v1,size
	cmpjl
	cmp0
	je l517
	jmp l519
l518:
	add $15,1
	pop $15
	jmp l516
l519:
	call $12,length
	push $15
	call v1,get
	spushs
	spop $h
	call $h,length
	pop $b
	popax
	add $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	push $13
	cmpjle
	cmp0
	je l521
	push " "
	push $15
	call v1,get
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	jmp l520
l521:
	push $14
	push 1
	cmpje
	cmp0
	je l523
	push $17
	push $14
	push $12
	call dbl,set
	jmp l522
l523:
	push $17
	push $12
	call dbl,add
l522:
	push $15
	call v1,get
	pop $12
	add $14,1
	pop $14
l520:
	jmp l518
l517:
	push $14
	push 1
	cmpje
	cmp0
	je l525
	push $17
	push $14
	push $12
	call dbl,set
	jmp l524
l525:
	push $17
	push $12
	call dbl,add
l524:
	push $14
	push $16
	cmpja
	cmp0
	je l527
	push $14
	pop $16
l527:
	jmp l514
l513:
	new gmimgvec,grtxt
	localint $17
	push 0
	pop $17
l528:
	push $17
	push $16
	cmpjl
	cmp0
	je l529
	jmp l531
l530:
	add $17,1
	pop $17
	jmp l528
l531:
	push "txt"
	push $17
	pop $b
	popax
	add $a,$b
	pop $11
	push "txts"
	push $17
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	push ""
	push "fnt"
	cthis black
	clparent classgame,newtext
	push $11
	push ""
	push "fnt"
	push $8
	push $9
	push $10
	clparent classgame,newtext
	push $11
	call grtxt,add
	push $12
	call grtxt,add
	jmp l530
l529:
	new db,dbsnd
	new timer,timtxt
	push 1
	call timtxt,settick
	push 1
	call timtxt,setcycle
	push "onfinish"
	push "Subtitle0"
	call timtxt,addmethod
	push 12000
	cthis setz
	end method
	method Subtitle0
	cthis cisplaying
	neg
	cmp0
	je l533
	cthis hidesubs
	jmp l532
l533:
	cthis play
l532:
	end method
	method reset
	cthis stop
	call dbsnd,free
	end method
	method hidesubs
	call grtxt,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	call grtxt,setz
	end method
	method stop
	cthis hidesubs
	push 0
	call timtxt,stop
	end method
	method register
	localstring $1
	localstring $2
	pop $2
	pop $1
	localdef $3
	push $2
	call dbl,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l535
	localdef $4
	push $1
	call dbsnd,findbyrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l537
	push $4
	push 1
	push $3
	call dbsnd,set
	jmp l536
l537:
	localdef $4
	call dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	push $4
	push $1
	call dbsnd,add
	push $4
	push $3
	call dbsnd,add
l536:
l535:
	end method
	method play
	localstring $1
	pop $1
	cthis stop
	localdef $2
	push $1
	call dbsnd,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l539
	push $2
	push 1
	call dbsnd,get
	pop $2
	localdef $3
	push $2
	call dbl,getcolsno
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	localstring $5
	localint $6
	push 0
	push 0
	call grtxt,setpos
	localint $7
	push 2
	pop $7
	localint $8
	push 0
	pop $8
l540:
	push $8
	push $3
	cmpjl
	cmp0
	je l541
	jmp l543
l542:
	add $8,1
	pop $8
	jmp l540
l543:
	push 2
	push $8
	pop $b
	popax
	mul $a,$b
	pop $6
	push $6
	call grtxt,get
	pop $4
	push $4
	spushs
	push $2
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	call dbl,get
	spop $a
	call [$a],txtset
	push $6
	push 1
	pop $b
	popax
	add $a,$b
	call grtxt,get
	pop $5
	push $5
	spushs
	push $4
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],txtset
	push $4
	spushs
	push iResX
	push $4
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $8
	push ifontsize
	pop $b
	popax
	mul $a,$b
	push $7
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $4
	spushs
	spop $a
	call [$a],show
	push $5
	spushs
	push $4
	spushs
	spop $a
	call [$a],getpx
	push 1
	pop $b
	popax
	add $a,$b
	push $4
	spushs
	spop $a
	call [$a],getpy
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $5
	spushs
	spop $a
	call [$a],show
	jmp l542
l541:
	push 0
	push iResY
	push $3
	push ifontsize
	push $7
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	sub $a,$b
	push ibory
	pop $b
	popax
	sub $a,$b
	call grtxt,move
	call timtxt,play
l539:
	end method
	end class

	push igmsubtitle
	cmp0
	je l545
	push "eng_egipt.db"
	push "sounds/"
	push sgmfontbold
	push 24
	push 50
	push 15
	new Subtitle,subtitle
l545:
	class classsound
	method init
	new string,_csplay
	push "null"
	pop _csplay
	push igmsubtitle
	cmp0
	je l547
	call subtitle,reset
l547:
	end method
	method creset
	push "null"
	pop _csplay
	end method
	method cgetactsnd
	push _csplay
	ret
	end method
	method crselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	je l549
	push $1
	cthis cbplay
	jmp l548
l549:
	cthis cgetactsnd
	push $1
	cmpjne
	cmp0
	je l551
	push $1
	cthis cbplay
l551:
l548:
	end method
	method cbselfplay
	localstring $1
	pop $1
	cthis cisplaying
	neg
	cmp0
	jne l554
	cthis cgetactsnd
	push $1
	cmpjne
	jmp l555
l553:
	push 0
	jmp l555
l554:
	push 1
l555:
	cmp0
	je l556
	push $1
	cthis cbplay
l556:
	end method
	method cbplay
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l558
	push _csplay
	spushs
	push 1
	spop $a
	call [$a],stop
l558:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l560
	push $1
	cthis csubplay
l560:
	end method
	method cbsplay
	localstring $1
	pop $1
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l562
	push $1
	cthis csubplay
l562:
	end method
	method cbplayfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	push $1
	cthis cbplay
	end method
	method cbplay2
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l564
	push _csplay
	spushs
	push 0
	spop $a
	call [$a],stop
l564:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l566
	push $1
	cthis csubplay
l566:
	end method
	method crplay
	localstring $1
	pop $1
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l568
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l570
l568:
	push 0
	jmp l570
l569:
	push 1
l570:
	cmp0
	je l571
	ret
l571:
	push $1
	pop _csplay
	push $1
	push "null"
	cmpjne
	cmp0
	je l573
	push $1
	cthis csubplay
l573:
	end method
	method cbplayif
	localstring $1
	pop $1
	cthis cisplaying
	cmp0
	je l575
	push $1
	cthis cbplay
l575:
	end method
	method crbgplay
	localstring $1
	pop $1
	push $1
	push "null"
	cmpjne
	cmp0
	je l577
	push $1
	spushs
	spop $a
	call [$a],isplaying
	neg
	jmp l579
l577:
	push 0
	jmp l579
l578:
	push 1
l579:
	cmp0
	je l580
	push $1
	cthis csubplay
l580:
	end method
	method crandplay
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	call $2,rand
	push 0
	cmpje
	cmp0
	je l582
	push "c"
	push $3
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $d
	cthis [$d]
l582:
	end method
	method cplayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push "c"
	push $1
	pop $b
	popax
	add $a,$b
	push "play"
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $d
	cthis [$d]
	push $2
	spushs
	spop $a
	call [$a],isplaying
	cmp0
	je l584
	push $3
	push "null"
	cmpjne
	jmp l586
l584:
	push 0
	jmp l586
l585:
	push 1
l586:
	cmp0
	je l587
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l587:
	end method
	method cactsndstop
	localint $1
	pop $1
	cthis cisplaying
	cmp0
	je l589
	push _csplay
	spushs
	push $1
	spop $a
	call [$a],stop
l589:
	end method
	method cstopsnds
	localint $1
	pop $1
	call _csplay,in
	cmp0
	je l591
	cthis cisplaying
	jmp l593
l591:
	push 0
	jmp l593
l592:
	push 1
l593:
	cmp0
	je l594
	push $1
	cthis cactsndstop
l594:
	end method
	method cisplaying
	push _csplay
	push "null"
	cmpjne
	cmp0
	je l596
	push _csplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l595
l596:
	push 0
l595:
	end method
	method csubplay
	localstring $1
	pop $1
	push igmsubtitle
	cmp0
	je l598
	push $1
	call subtitle,play
l598:
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	end class

	class classsndbank
	method init
	new int,itype
	new int,ilicz
	push 0
	pop ilicz
	new int,iile
	new string,splay
	push "null"
	pop splay
	new string,ssnd
	push "snd"
	pop ssnd
	end method
	method loadsingle
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push 0
	cmpjle
	cmp0
	je l600
	push 0
	pop iile
	ret
l600:
	push $2
	pop iile
	push 0
	pop itype
	localint $3
	push 0
	pop $3
l601:
	push $3
	push $2
	cmpjl
	cmp0
	je l602
	jmp l604
l603:
	add $3,1
	pop $3
	jmp l601
l604:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	push $1
	clparent newvars,newsnd
	jmp l603
l602:
	end method
	method load
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	push 1
	pop $b
	popax
	add $a,$b
	pop iile
	push iile
	push 0
	cmpjle
	cmp0
	je l606
	push 0
	pop iile
	ret
l606:
	push ssnd
	push 0
	push $1
	push $2
	push $3
	clparent newvars,newsnds
	push $4
	pop itype
	push $5
	push 1
	cmpje
	cmp0
	je l608
	call iile,rand
	pop ilicz
l608:
	end method
	method addmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l609:
	push $3
	push iile
	cmpjl
	cmp0
	je l610
	jmp l612
l611:
	add $3,1
	pop $3
	jmp l609
l612:
	push ssnd
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],addmethod
	jmp l611
l610:
	end method
	method stop
	localint $1
	pop $1
	push splay
	push "null"
	cmpjne
	cmp0
	je l614
	push splay
	spushs
	push $1
	spop $a
	call [$a],stop
l614:
	end method
	method isplaying
	push splay
	push "null"
	cmpjne
	cmp0
	je l616
	push splay
	spushs
	spop $a
	call [$a],isplaying
	jmp l615
l616:
	push 0
l615:
	end method
	method randplay
	localint $1
	pop $1
	call $1,rand
	push 0
	cmpje
	cmp0
	je l618
	cthis play
l618:
	end method
	method playid
	localint $1
	pop $1
	push $1
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	cthis play
	end method
	method play
	push 0
	cthis stop
	cthis bgplay
	end method
	method reset
	push 0
	pop ilicz
	end method
	method rbgplay
	cthis isplaying
	neg
	cmp0
	je l620
	cthis bgplay
l620:
	end method
	method rplay
	cthis isplaying
	neg
	cmp0
	je l622
	cthis play
l622:
	end method
	method bgplay
	push ssnd
	push ilicz
	pop $b
	popax
	add $a,$b
	pop splay
	push splay
	spushs
	spop $a
	call [$a],play
	push itype
	push 0
	cmpje
	cmp0
	je l624
	push ilicz
	push 1
	pop $b
	popax
	add $a,$b
	push iile
	pop $b
	popax
	div $a,$b
	push $d
	pop ilicz
	jmp l623
l624:
	push itype
	push 1
	cmpje
	cmp0
	je l626
	call iile,rand
	pop ilicz
l626:
l623:
	end method
	method setvol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l627:
	push $2
	push iile
	cmpjl
	cmp0
	je l628
	jmp l630
l629:
	add $2,1
	pop $2
	jmp l627
l630:
	push ssnd
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],setvol
	jmp l629
l628:
	end method
	end class

	class SoundSource
	method init
	end method
	method setvol
	localstring $1
	localint $2
	localint $3
	localreal $4
	localreal $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call $5,abs
	push $4
	cmpjae
	cmp0
	je l632
	push $1
	spushs
	push $3
	spop $a
	call [$a],setvol
	jmp l631
l632:
	push $1
	spushs
	push 1.0
	call $5,abs
	push $4
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setvol
l631:
	end method
	end class

	class classgame
	parent newvars
	parent classsound
	method init
	clparent newvars,init
	clparent classsound,init
	new int,_iconstid
	new gmobjvec,_grsfxs
	end method
	method bkg=
	localdef $1
	pop $1
	push ".pyz"
	call $1,contains
	cmp0
	je l634
	push "anbkg"
	push $1
	push 0
	cthis newanima
	jmp l633
l634:
	push "imgbkg"
	push $1
	push 0
	cthis newimg
l633:
	end method
	method bgr=
	localdef $1
	pop $1
	push $1
	cthis csndbgr
	end method
	method path=
	localdef $1
	pop $1
	push "scripts/"
	push $1
	pop $b
	popax
	add $a,$b
	push "/"
	pop $b
	popax
	add $a,$b
	cthis setgraphpath
	end method
	method cycle=
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push 1
	push 1
	push $2
	cthis cnewtimercyclefin
	end method
	method timer=
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push $3
	cthis cnewtimerfin
	end method
	method _getflags
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
	push "L"
	call $1,contains
	cmp0
	je l636
	push "L"
	call $1,strremove
	push 1
	pop $2
l636:
	localdef $3
	push 0
	pop $3
	push "P"
	call $1,contains
	cmp0
	je l638
	push "P"
	call $1,strremove
	push 1
	pop $3
l638:
	localdef $4
	push 0
	pop $4
	push "H"
	call $1,contains
	cmp0
	je l640
	push "H"
	call $1,strremove
	push 1
	pop $4
l640:
	push $1
	push $2
	push $3
	push $4
	ret
	end method
	method img=
	localdef $1
	pop $1
	push $1
	cthis _build_img
	popax
	end method
	method getlangfile
	localstring $1
	pop $1
	localdef $2
	push 4
	call $1,strsube
	push "_"
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	push 0
	push 4
	call $1,gete
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	cthis getpath
	call engine,fileexist
	cmp0
	je l642
	push $2
	jmp l641
l642:
	push $1
l641:
	end method
	method _build_img
	localdef $1
	pop $1
	localdef $2
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
	push "G"
	call $1,contains
	cmp0
	je l644
	push "G"
	call $1,strremove
	push 1
	pop $5
l644:
	localdef $6
	push 0
	pop $6
	push " "
	call $1,contains
	cmp0
	je l646
	push " "
	call $1,strgetfrom
	pop $6
	push " "
	call $1,strgetto
	pop $1
l646:
	localstring $7
	push "/"
	call $1,contains
	cmp0
	je l648
	new vector,_v_sfile
	push "string"
	call _v_sfile,type
	push $1
	push "/"
	call _v_sfile,vecbuildfromstring
	call _v_sfile,last
	spushs
	push 4
	spop $h
	call $h,strsube
	pop $7
	delete _v_sfile
	jmp l647
l648:
	push 4
	call $1,strsube
	pop $7
l647:
	localstring $8
	push ".pyz"
	call $1,contains
	cmp0
	je l650
	push $5
	cmp0
	je l652
	push "gr"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	spushs
	push ".pyz"
	spop $h
	call $h,strsubes
	push $6
	cthis newgrimg
	jmp l651
l652:
	push "an"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newanima
l651:
	jmp l649
l650:
	push "img"
	push $7
	pop $b
	popax
	add $a,$b
	pop $8
	push $8
	push $1
	cthis getlangfile
	push $6
	cthis newimg
l649:
	push $2
	cmp0
	je l654
	push $8
	spushs
	spop $a
	call [$a],anloopfin
l654:
	push $3
	cmp0
	je l656
	push $8
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],play
l656:
	push $4
	cmp0
	je l658
	push $8
	spushs
	spop $a
	call [$a],hide
l658:
	push $8
	end method
	method imgsgr=
	localstring $1
	pop $1
	localstring $2
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	localdef $3
	pop $3
l659:
	push A
	push $3
	cmpjne
	cmp0
	je l660
	push $1
	spushs
	push $3
	cthis _build_img
	spop $a
	call [$a],add
	localdef $3
	pop $3
	jmp l659
l660:
	end method
	method imgs=
	push "img="
	cthis withlist
	end method
	method clone
	localstring $1
	pop $1
	call gameapi,getgamename
	spushs
	cthis getname
	cthis gettype
	push $1
	spop $a
	call [$a],classgame0
	end method
	method classgame0
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	spushs
	push $3
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $3
	spushs
	push $1
	spop $a
	call [$a],copy
	end method
	method clones=
	push "clone"
	cthis withlist
	end method
	method list=
	localdef $1
	pop $1
	localdef $2
	pop $2
	push $1
	spushs
	spop $e
	new gmobjvec,[$e]
l661:
	push A
	push $2
	cmpjne
	cmp0
	je l662
	push $1
	spushs
	push $2
	spop $a
	call [$a],addbegin
	pop $2
	jmp l661
l662:
	end method
	method list2=
	localdef $1
	push "gmobjvec"
	cthis newconst
	pop $1
	push $1
	cthis list=
	push $1
	end method
	method debug=
	localdef $1
	pop $1
	push $1
	call engine,setdebugstate
	end method
	method sfx=
	localstring $1
	pop $1
	localint $2
	push "N"
	call $1,contains
	pop $2
	push $2
	cmp0
	je l664
	push "N"
	call $1,strremove
l664:
	localdef $3
	localdef $4
	push $1
	cthis _getflags
	popax
	pop $4
	pop $3
	pop $1
	localdef $5
	push 100
	pop $5
	push " "
	call $1,contains
	cmp0
	je l666
	push " "
	call $1,strgetfrom
	pop $5
	push " "
	call $1,strgetto
	pop $1
l666:
	localstring $6
	push "fx"
	push $1
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	push $1
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsfx
	push $6
	spushs
	push $5
	spop $a
	call [$a],setvol
	push $3
	cmp0
	je l668
	push $6
	spushs
	push "onfinish"
	push "_stdsndloop"
	spop $a
	call [$a],addmethod
l668:
	push $4
	cmp0
	je l670
	push $6
	spushs
	spop $a
	call [$a],play
	jmp l669
l670:
	push $2
	cmp0
	je l672
	push $6
	spushs
	spop $a
	call [$a],playloop
l672:
l669:
	push $6
	call _grsfxs,add
	end method
	method sfxs=
	push "sfx="
	cthis withlist
	end method
	method snd=
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis newsndfree
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method tickstart
	push "__timspeed"
	cthis hasvar
	neg
	cmp0
	je l674
	new TicksCounter,__timspeed
l674:
	call __timspeed,start
	end method
	method tickstop
	push "ticker: "
	call __timspeed,print
	end method
	method csndplayloop
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newsndloop
	push $1
	spushs
	spop $a
	call [$a],play
	end method
	method csndbgr
	localstring $1
	pop $1
	push "sndbgr"
	push $1
	cthis newbgr
	push "sndbgr"
	cthis sndplayloop
	end method
	method cloadcursor
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l676
	push "imgkursor"
	push $1
	push 0
	cthis newimg
	push "imgkursor"
	pop $1
l676:
	push $1
	spushs
	spop $a
	call [$a],hide
	push $1
	call mouse,setcursor
	push $1
	call engine,stdbutcursor
	end method
	method newimgarray
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildarray
	end method
	method newfont
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new font,[$e]
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],load
	end method
	method monofont
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontmono
	push $2
	cthis newfont
	end method
	method newfontbold
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push sgmfontbold
	push $2
	cthis newfont
	end method
	method snewfont
	localstring $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push "font"
	cthis newconst
	pop $3
	push $3
	spushs
	push $1
	push $2
	spop $a
	call [$a],load
	push $3
	ret
	end method
	method stdfont
	localint $1
	pop $1
	push sgmfontfile
	push $1
	cthis snewfont
	end method
	method stdmono
	localint $1
	pop $1
	push sgmfontmono
	push $1
	cthis snewfont
	end method
	method stdbold
	localint $1
	pop $1
	push sgmfontbold
	push $1
	cthis snewfont
	end method
	method getconstid
	add _iconstid,1
	pop _iconstid
	push _iconstid
	push 1
	pop $b
	popax
	sub $a,$b
	end method
	method newconst
	localstring $1
	pop $1
	localstring $2
	push "const"
	push $1
	pop $b
	popax
	add $a,$b
	cthis getconstid
	pop $b
	popax
	add $a,$b
	pop $2
	push $1
	spushs
	push $2
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	push $2
	ret
	end method
	method consttext
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $8
	push "text"
	cthis newconst
	pop $8
	localstring $9
	push $4
	cthis stdfont
	pop $9
	push $8
	spushs
	push $9
	spop $a
	call [$a],setfont
	push $8
	spushs
	push $1
	spop $a
	call [$a],set
	push $8
	spushs
	push $5
	push $6
	push $7
	spop $a
	call [$a],createtxt
	push $8
	spushs
	push $2
	push $3
	spop $a
	call [$a],setpos
	push $8
	ret
	end method
	method newtext
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new text,[$e]
	push $1
	spushs
	push $2
	spop $a
	call [$a],set
	push $1
	spushs
	push $3
	spop $a
	call [$a],setfont
	push $1
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	end method
	method newtextposz
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	cthis newtext
	push $1
	spushs
	push $7
	push $8
	push $9
	spop $a
	call [$a],anposz
	end method
	method newgrimg
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmimgvec,[$e]
	push $1
	push $2
	push ".pyz"
	pop $b
	popax
	add $a,$b
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],setz
	end method
	method cfinmethod
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
	end method
	method cnewsndfin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis newsnd
	push $1
	push $3
	cthis cfinmethod
	end method
	method cnewsndsfin
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newsnds
	push $1
	push $2
	push $2
	push $5
	push $4
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $6
	cthis caddobjsfunfin
	end method
	method cnewsndfinbplay
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis cnewsndfin
	push $1
	cthis cbplay
	end method
	method cnewtimerfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimer
	push $1
	push $4
	cthis cfinmethod
	end method
	method cnewtimercyclefin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newtimercycle
	push $1
	push $4
	cthis cfinmethod
	end method
	method caddobjsfun
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l677:
	push $2
	push $3
	cmpjle
	cmp0
	je l678
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $4
	push $5
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],addmethod
	add $2,1
	pop $2
	jmp l677
l678:
	end method
	method caddobjsfunfin
	localstring $1
	localint $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "onfinish"
	push $4
	cthis caddobjsfun
	end method
	method newancounter
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push $3
	push $4
	push $5
	cthis newanimas
	push $1
	spushs
	spop $e
	new classancounter,[$e]
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],set
	end method
	method newancounterh
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $6
	push 0
	pop $6
l679:
	push $6
	push $5
	cmpjl
	cmp0
	je l680
	jmp l682
l681:
	add $6,1
	pop $6
	jmp l679
l682:
	push $2
	push $6
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l681
l680:
	end method
	method newancounterf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l683:
	push $7
	push $5
	cmpjl
	cmp0
	je l684
	jmp l686
l685:
	add $7,1
	pop $7
	jmp l683
l686:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	jmp l685
l684:
	end method
	method newancounterhf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis newancounter
	localint $7
	push 0
	pop $7
l687:
	push $7
	push $5
	cmpjl
	cmp0
	je l688
	jmp l690
l689:
	add $7,1
	pop $7
	jmp l687
l690:
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $6
	spop $a
	call [$a],addmethod
	push $2
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l689
l688:
	end method
	method cnewanimafin
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis newanima
	push $1
	spushs
	push "onfinish"
	push $4
	spop $a
	call [$a],addmethod
	end method
	method ccopyanimafin
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis copyanima
	push $2
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	end method
	method cloadwavs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis newdb
	localint $3
	push 0
	pop $3
	localint $4
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	pop $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	localstring $12
	localstring $13
	localstring $14
	localstring $15
l691:
	push $3
	push $4
	cmpjl
	cmp0
	je l692
	push $1
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	pop $6
	push 0
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push 0
	push 1
	call $12,getb
	push "#"
	cmpjne
	cmp0
	je l694
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $14
	add $7,1
	pop $7
	push $12
	push "wav"
	cmpje
	cmp0
	jne l697
	push $12
	push "sfx"
	cmpje
	jmp l698
l696:
	push 0
	jmp l698
l697:
	push 1
l698:
	cmp0
	je l699
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "sfx"
	cmpje
	cmp0
	je l701
	push $14
	push $13
	cthis newsfx
	jmp l700
l701:
	push $14
	push $13
	cthis newsnd
l700:
	push $7
	push $6
	cmpjl
	cmp0
	je l703
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l705
	push $14
	spushs
	push "onfinish"
	push $13
	spop $a
	call [$a],addmethod
	jmp l704
l705:
	push 0
	push 4
	call $12,gete
	push "play"
	cmpje
	cmp0
	je l707
	push "c"
	push 4
	push 10
	call $12,gete
	pop $b
	popax
	add $a,$b
	push "playonfin"
	pop $b
	popax
	add $a,$b
	spushs
	push $14
	push $13
	spop $d
	cthis [$d]
	jmp l706
l707:
	push $12
	push "vol"
	cmpje
	cmp0
	je l709
	push $14
	spushs
	push $13
	spop $a
	call [$a],setvol
l709:
l706:
l704:
l703:
	jmp l695
l699:
	push $12
	push "group"
	cmpje
	cmp0
	je l711
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $7
	push $6
	cmpjl
	cmp0
	je l713
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l715
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	push $8
	push $13
	push $8
	push $9
	push $15
	cthis cnewsndsfin
l715:
	jmp l712
l713:
	push $14
	push $8
	push $13
	push $8
	push $9
	cthis newsnds
l712:
	jmp l710
l711:
	push $12
	push "bank"
	cmpje
	cmp0
	je l717
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $5
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $10
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $5
	push $8
	push $9
	push $10
	spop $a
	call [$a],load
	push $7
	push $6
	cmpjl
	cmp0
	je l719
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $12
	add $7,1
	pop $7
	push $12
	push "method"
	cmpje
	cmp0
	je l721
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $15
	add $7,1
	pop $7
	push $14
	spushs
	push "onfinish"
	push $15
	spop $a
	call [$a],addmethod
	jmp l720
l721:
	push $12
	push "vol"
	cmpje
	cmp0
	je l723
	push $14
	spushs
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	spop $a
	call [$a],setvol
l723:
l720:
l719:
	jmp l716
l717:
	push $12
	push "method"
	cmpje
	cmp0
	je l725
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $9
	add $7,1
	pop $7
l726:
	push $8
	push $9
	cmpjle
	cmp0
	je l727
	push $13
	push $8
	pop $b
	popax
	add $a,$b
	spushs
	push "onfinish"
	push $14
	spop $a
	call [$a],addmethod
	add $8,1
	pop $8
	jmp l726
l727:
	jmp l724
l725:
	push $12
	push "singlebank"
	cmpje
	cmp0
	je l729
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $13
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	pop $8
	add $7,1
	pop $7
	push $14
	spushs
	spop $e
	new classsndbank,[$e]
	push $14
	spushs
	push $13
	push $8
	spop $a
	call [$a],loadsingle
	jmp l728
l729:
	push $12
	push "bgr"
	cmpje
	cmp0
	je l731
	push $14
	cthis csndbgr
	push $7
	push $6
	cmpjl
	cmp0
	je l733
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l735
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l735:
l733:
	jmp l730
l731:
	push $12
	push "music"
	cmpje
	cmp0
	je l737
	push $14
	cthis playmusic
	push $7
	push $6
	cmpjl
	cmp0
	je l739
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	push "vol"
	cmpje
	cmp0
	je l741
	add $7,1
	pop $7
	push $1
	spushs
	push $3
	push $7
	spop $a
	call [$a],get
	call sndbgr,setvol
	add $7,1
	pop $7
l741:
l739:
l737:
l730:
l728:
l724:
l716:
l710:
l695:
l694:
	add $3,1
	pop $3
	jmp l691
l692:
	end method
	method crestart
	call gameapi,getgamename
	call gameapi,play
	end method
	method cgetscreenshoot
	localstring $1
	pop $1
	new img,_imgsavebkg
	push iResX
	push iResY
	cthis white
	push 255
	call _imgsavebkg,create
	push 2000
	call _imgsavebkg,setz
	call _imgsavebkg,blitscreen
	new filter,_ftbg
	push "_imgsavebkg"
	call _ftbg,link
	push 1
	call _ftbg,setsmooth
	localreal $2
	push 0.3
	pop $2
	push $2
	call _ftbg,setzoom
	push 0
	push 0
	call _imgsavebkg,setpos
	new img,_im_1
	push $2
	push iResX
	pop $b
	popax
	mul $a,$b
	push $2
	push iResY
	pop $b
	popax
	mul $a,$b
	cthis white
	push 255
	call _im_1,create
	call _imgsavebkg,getpx
	call _imgsavebkg,getpy
	call _im_1,setpos
	push "_imgsavebkg"
	call _im_1,blit
	push $1
	call _im_1,save
	delete _im_1
	call _ftbg,unlink
	delete _ftbg
	delete _imgsavebkg
	end method
	end class

	class clfindfunc
	method init
	end method
	method _stdfindfunc
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
l742:
	push $2
	push $3
	cmpjle
	cmp0
	je l743
	push $1
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $5
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	push $4
	cmpje
	cmp0
	je l745
	push $2
	ret
l745:
	add $2,1
	pop $2
	jmp l742
l743:
	push 1
	popax
	sub 0,$a
	end method
	method _stdfindfunc2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	cthis _stdfindfunc
	end method
	method cfindandeval2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 0
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	push $3
	push $4
	push $5
	cthis cfindandeval
	end method
	method cfindandeval
	localstring $1
	localint $2
	localint $3
	localstring $4
	localstring $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $7
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis _stdfindfunc
	pop $7
	push $7
	push 0
	cmpjae
	cmp0
	je l747
	push $1
	push $7
	pop $b
	popax
	add $a,$b
	spushs
	push $6
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l747:
	end method
	end class

	class classbutton
	method init
	new string,san
	push "anbut"
	pop san
	new string,sbut
	push "but"
	pop sbut
	new int,iilebut
	push 0
	pop iilebut
	new string,sfxmon
	push "null"
	pop sfxmon
	end method
	method _cbuildbutname
	localstring $1
	pop $1
	new string,_sbutname
	push $1
	pop _sbutname
	end method
	method cgetbutname
	push _sbutname
	ret
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis build2
	end method
	method build2
	localstring $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push "_"
	push san
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	spushs
	spop $e
	new anima,[$e]
	push $5
	spushs
	push $1
	spop $a
	call [$a],load
	push $5
	spushs
	push $2
	spop $a
	call [$a],setz
	localint $6
	push $5
	spushs
	spop $a
	call [$a],nofactions
	pop $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $9
	localstring $10
	localstring $11
	localstring $12
	localstring $13
	localint $14
	push 0
	pop $14
l748:
	push $14
	push $6
	cmpjl
	cmp0
	je l749
	jmp l751
l750:
	add $14,1
	pop $14
	jmp l748
l751:
	push "null"
	pop $10
	push "null"
	pop $11
	push "null"
	pop $12
	push $5
	spushs
	push $14
	spop $a
	call [$a],nofframes
	pop $7
	push 1
	pop $8
l752:
	push $8
	push $7
	cmpjle
	cmp0
	je l753
	jmp l755
l754:
	add $8,1
	pop $8
	jmp l752
l755:
	push san
	push $9
	pop $b
	popax
	add $a,$b
	pop $13
	push $8
	push 1
	cmpje
	cmp0
	je l757
	push $13
	pop $10
	jmp l756
l757:
	push $8
	push 2
	cmpje
	cmp0
	je l759
	push $13
	pop $11
	jmp l758
l759:
	push $8
	push 3
	cmpje
	cmp0
	je l761
	push $13
	pop $12
l761:
l758:
l756:
	push $5
	push $13
	clparent newvars,copyanima
	push $13
	spushs
	push $14
	push $8
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setframe
	add $9,1
	pop $9
	jmp l754
l753:
	push $4
	push "null"
	cmpjne
	cmp0
	je l763
	push $4
	spushs
	push $5
	spushs
	push $14
	spop $a
	call [$a],nameofaction
	spop $a
	call [$a],contains
	jmp l765
l763:
	push 0
	jmp l765
l764:
	push 1
l765:
	cmp0
	je l766
	push $10
	spushs
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	jmp l762
l766:
	push $10
	push $11
	push $12
	push $3
	cthis addbut
l762:
	jmp l750
l749:
	push $5
	spushs
	spop $a
	call [$a],hide
	end method
	method _buildfuncclick
	localstring $1
	pop $1
	new string,_sfunclick
	push $1
	pop _sfunclick
	end method
	method _stdbutclick
	push _sfunclick
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncrel
	localstring $1
	pop $1
	new string,_sfuncrel
	push $1
	pop _sfuncrel
	end method
	method _stdbutrel
	push _sfuncrel
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovon
	localstring $1
	pop $1
	new string,_sfunmovon
	push $1
	pop _sfunmovon
	end method
	method _stdbutmovon
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l768
	push sfxmon
	spushs
	spop $a
	call [$a],play
l768:
	push _sfunmovon
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method _buildfuncmovoff
	localstring $1
	pop $1
	new string,_sfunmovoff
	push $1
	pop _sfunmovoff
	end method
	method _stdbutmovoff
	push _sfunmovoff
	spushs
	cthis getbutname
	spop $d
	cthis [$d]
	end method
	method butsigfun
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $2
	push "null"
	cmpje
	cmp0
	je l770
	ret
l770:
	push $1
	spushs
	push $4
	push $4
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push $4
	spushs
	push $2
	spop $d
	spop $a
	call [$a],[$d]
	push $1
	spushs
	push $3
	push $5
	spop $a
	call [$a],addmethod
	end method
	method sigfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l771:
	push $5
	push iilebut
	cmpjl
	cmp0
	je l772
	jmp l774
l773:
	add $5,1
	pop $5
	jmp l771
l774:
	push sbut
	push $5
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis butsigfun
	jmp l773
l772:
	end method
	method print
	localint $1
	push 0
	pop $1
l775:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l776
	jmp l778
l777:
	add $1,1
	pop $1
	jmp l775
l778:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getbutname
	call engine,print
	jmp l777
l776:
	end method
	method setrect
	localstring $1
	localint $2
	push 0
	pop $2
l779:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l780
	jmp l782
l781:
	add $2,1
	pop $2
	jmp l779
l782:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getimg
	pop $1
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	spop $a
	call [$a],setrect
	jmp l781
l780:
	end method
	method setflags
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l783:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l784
	jmp l786
l785:
	add $3,1
	pop $3
	jmp l783
l786:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setflags
	jmp l785
l784:
	end method
	method sfxonmovon
	localstring $1
	pop $1
	push $1
	pop sfxmon
	end method
	method clickfunc
	localstring $1
	pop $1
	push $1
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis sigfunc
	end method
	method relfunc
	localstring $1
	pop $1
	push $1
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis sigfunc
	end method
	method movonfunc
	localstring $1
	pop $1
	push $1
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis sigfunc
	end method
	method movofffunc
	localstring $1
	pop $1
	push $1
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis sigfunc
	end method
	method ilebuts
	push iilebut
	ret
	end method
	method ifind
	localstring $1
	pop $1
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	ret
	end method
	method sfind
	localstring $1
	pop $1
	localint $2
	push sbut
	push iilebut
	push $1
	push "getbutname"
	clparent clfindfunc,_stdfindfunc2
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l788
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	jmp l787
l788:
	push "null"
l787:
	ret
	end method
	method _cbutfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push sbut
	cthis ilebuts
	push $1
	push "getbutname"
	push $2
	clparent clfindfunc,cfindandeval2
	end method
	method _callbutfunc
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l789:
	push $2
	push iilebut
	cmpjl
	cmp0
	je l790
	jmp l792
l791:
	add $2,1
	pop $2
	jmp l789
l792:
	push sbut
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l791
l790:
	end method
	method _cibutfunc
	localstring $1
	localint $2
	pop $2
	pop $1
	push $2
	push iilebut
	cmpja
	cmp0
	je l794
	push iilebut
	pop $2
l794:
	localint $3
	push 0
	pop $3
l795:
	push $3
	push $2
	cmpjl
	cmp0
	je l796
	jmp l798
l797:
	add $3,1
	pop $3
	jmp l795
l798:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l797
l796:
	end method
	method ienable
	localint $1
	pop $1
	push "enable"
	push $1
	cthis _cibutfunc
	end method
	method benableall
	cthis resumeall
	cthis enableall
	end method
	method pauseall
	push "pause"
	cthis _callbutfunc
	end method
	method resumeall
	push "resume"
	cthis _callbutfunc
	end method
	method enableall
	push "enable"
	cthis _callbutfunc
	end method
	method disableall
	push "disable"
	cthis _callbutfunc
	end method
	method disabled
	push sbut
	push 0
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disabled
	end method
	method benable
	localstring $1
	pop $1
	push $1
	cthis resume
	push $1
	cthis enable
	end method
	method disable
	localstring $1
	pop $1
	push $1
	push "disable"
	cthis _cbutfun
	end method
	method enable
	localstring $1
	pop $1
	push $1
	push "enable"
	cthis _cbutfun
	end method
	method pause
	localstring $1
	pop $1
	push $1
	push "pause"
	cthis _cbutfun
	end method
	method resume
	localstring $1
	pop $1
	push $1
	push "resume"
	cthis _cbutfun
	end method
	method resetall
	localint $1
	push 0
	pop $1
l799:
	push $1
	push iilebut
	cmpjl
	cmp0
	je l800
	jmp l802
l801:
	add $1,1
	pop $1
	jmp l799
l802:
	push sbut
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setcursorpos
	jmp l801
l800:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l803:
	push $3
	push iilebut
	cmpjl
	cmp0
	je l804
	jmp l806
l805:
	add $3,1
	pop $3
	jmp l803
l806:
	push sbut
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	push $2
	spop $a
	call [$a],setcursorpos
	jmp l805
l804:
	end method
	method getimg
	localstring $1
	pop $1
	localstring $2
	push $1
	cthis sfind
	pop $2
	push $2
	push "null"
	cmpjne
	cmp0
	je l808
	push $2
	spushs
	spop $a
	call [$a],getimg
	jmp l807
l808:
	push "null"
l807:
	ret
	end method
	method callimgfun
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis getimg
	spushs
	push $2
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method newmouse
	localstring $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis sfind
	pop $3
	push $3
	push "null"
	cmpjne
	cmp0
	je l810
	push $3
	spushs
	push $2
	spop $a
	call [$a],setmouse
l810:
	end method
	method addbut
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push $2
	push $3
	push $4
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	add iilebut,1
	pop iilebut
	end method
	method _addfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l812
	ret
l812:
	push $1
	push $2
	push "onclick"
	push "_buildfuncclick"
	push "_stdbutclick"
	cthis butsigfun
	push $1
	push $3
	push "onrel"
	push "_buildfuncrel"
	push "_stdbutrel"
	cthis butsigfun
	push $1
	push $4
	push "onmoveon"
	push "_buildfuncmovon"
	push "_stdbutmovon"
	cthis butsigfun
	push $1
	push $5
	push "onmoveoff"
	push "_buildfuncmovoff"
	push "_stdbutmovoff"
	cthis butsigfun
	end method
	method addfuncto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis sfind
	push $2
	push $3
	push $4
	push $5
	cthis _addfunc
	end method
	method addfunctolast
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push sbut
	push iilebut
	push 1
	pop $b
	popax
	sub $a,$b
	pop $b
	popax
	add $a,$b
	push $1
	push $2
	push $3
	push $4
	cthis _addfunc
	end method
	method _transmet
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push "_sob"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $1
	pop [$e]
	push "_sf"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	push $2
	pop [$e]
	push $3
	spushs
	push "_trf"
	push $4
	pop $b
	popax
	add $a,$b
	spop $d
	cthis [$d]
	end method
	method transclickfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "clickfunc"
	push "cl"
	cthis _transmet
	end method
	method transrelfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "relfunc"
	push "rl"
	cthis _transmet
	end method
	method transmovonfunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movonfunc"
	push "mn"
	cthis _transmet
	end method
	method transmovofffunc
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "movofffunc"
	push "mf"
	cthis _transmet
	end method
	method _trfcl
	localstring $1
	pop $1
	push _sobcl
	spushs
	push _sfcl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfrl
	localstring $1
	pop $1
	push _sobrl
	spushs
	push _sfrl
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmn
	localstring $1
	pop $1
	push sfxmon
	push "null"
	cmpjne
	cmp0
	je l814
	push sfxmon
	spushs
	spop $a
	call [$a],play
l814:
	push _sobmn
	spushs
	push _sfmn
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method _trfmf
	localstring $1
	pop $1
	push _sobmf
	spushs
	push _sfmf
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	end method
	end class

	class classsimplebutton
	method init
	new string,simgob
	push "null"
	pop simgob
	new gmimgvec,grbut
	end method
	method stdbuild
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis getgraphpath
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push 0
	push 0
	push $3
	push 0
	cthis build
	end method
	method getimgfunc
	localstring $1
	pop $1
	push simgob
	push "null"
	cmpje
	cmp0
	je l816
	push 0
	jmp l815
l816:
	push simgob
	spushs
	push $1
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l815:
	end method
	method setbutpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grbut,setpos
	end method
	method build
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new button,but1
	cthis getname
	call but1,classsimplebutton0
	push "onclick"
	push "classsimplebutton1"
	call but1,addmethod
	push "onrel"
	push "classsimplebutton2"
	call but1,addmethod
	push "onmoveon"
	push "classsimplebutton3"
	call but1,addmethod
	push "onmoveoff"
	push "classsimplebutton4"
	call but1,addmethod
	push ".pyz"
	call $1,contains
	cmp0
	je l818
	new anima,anbut0
	push $1
	call anbut0,load
	push $3
	push $4
	call anbut0,setpos
	push $5
	call anbut0,setz
	push $6
	push 0
	call anbut0,setframe
	push "anbut0"
	pop simgob
	push simgob
	call grbut,add
	localstring $7
	push "anbut0"
	pop $7
	localstring $8
	push "null"
	pop $8
	localstring $9
	push "null"
	pop $9
	localint $10
	push $6
	call anbut0,nofframes
	pop $10
	push $10
	push 1
	cmpja
	cmp0
	je l820
	new anima,anbut1
	push "anbut0"
	call anbut1,copy
	push $6
	push 1
	call anbut1,setframe
	push "anbut1"
	pop $8
	push $8
	call grbut,add
l820:
	push $10
	push 2
	cmpja
	cmp0
	je l822
	new anima,anbut2
	push "anbut0"
	call anbut2,copy
	push $6
	push 2
	call anbut2,setframe
	push "anbut2"
	pop $8
	push $8
	call grbut,add
l822:
	push $7
	push $8
	push $9
	call but1,setan
	jmp l817
l818:
	new img,imgbut
	push "imgbut"
	pop simgob
	push simgob
	call grbut,add
	push $1
	call imgbut,load
	push $3
	push $4
	call imgbut,setpos
	push $5
	call imgbut,setz
	push "imgbut"
	push "null"
	push "null"
	call but1,set
l817:
	push $2
	call but1,setmouse
	end method
	method classsimplebutton0
	localstring $1
	pop $1
	new string,sbut
	push $1
	pop sbut
	end method
	method classsimplebutton1
	push sbut
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton2
	push sbut
	push "_REL"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton3
	push sbut
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method classsimplebutton4
	push sbut
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class classmask
	parent classbutton
	method init
	clparent classbutton,init
	end method
	method buildmask
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	push $2
	cthis build
	localint $3
	cthis ilebuts
	pop $3
	localint $4
	push 0
	pop $4
l823:
	push $4
	push $3
	cmpjl
	cmp0
	je l824
	jmp l826
l825:
	add $4,1
	pop $4
	jmp l823
l826:
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push sbut
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],hide
	jmp l825
l824:
	end method
	method buildmaskfunc
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis buildmask
	push $3
	cthis clickfunc
	end method
	method addmask
	localstring $1
	localstring $2
	localstring $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	push sbut
	push iilebut
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	push $1
	push "null"
	push "null"
	push $3
	clparent newvars,newbutan
	push $5
	spushs
	push "getbutname"
	push "cgetbutname"
	spop $a
	call [$a],addmethod
	push $2
	push "null"
	cmpje
	cmp0
	je l828
	push $5
	spushs
	push $1
	spushs
	spop $a
	call [$a],actionname
	spop $a
	call [$a],_cbuildbutname
	jmp l827
l828:
	push $5
	spushs
	push $2
	spop $a
	call [$a],_cbuildbutname
l827:
	push $4
	cmp0
	je l830
	push $5
	spushs
	push 0
	push 0
	spop $a
	call [$a],setflags
	push $5
	spushs
	spop $a
	call [$a],hide
l830:
	add iilebut,1
	pop iilebut
	end method
	method addadvmask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	cthis addmask
	push $4
	push "null"
	push "null"
	push "null"
	cthis addfunctolast
	end method
	end class

	method _stdanloop
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method _stdanhide
	cthis hide
	end method
	method _stdsndloop
	cthis play
	end method
	method __std_finish
	cthis getname
	push "_FINISH"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method looponfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanloop"
	spop $a
	call [$a],addmethod
	end method
	method hideonfinish
	localstring $1
	pop $1
	push $1
	spushs
	push "onfinish"
	push "_stdanhide"
	spop $a
	call [$a],addmethod
	end method
	method strsube
	localint $1
	pop $1
	push 0
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubb
	localint $1
	pop $1
	push $1
	cthis length
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getb
	ret
	end method
	method strsubbs
	localstring $1
	pop $1
	call $1,length
	cthis strsubb
	ret
	end method
	method strsubes
	localstring $1
	pop $1
	call $1,length
	cthis strsube
	ret
	end method
	method strgetto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l832
	cthis get
	jmp l831
l832:
	push 0
	push $2
	cthis getb
l831:
	end method
	method strgeteto
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis rfind
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l834
	cthis get
	jmp l833
l834:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
l833:
	end method
	method streq
	localstring $1
	pop $1
	cthis get
	push 0
	cthis length
	call $1,getb
	cmpje
	end method
	method strgetfromto
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis find
	cthis getb
	ret
	end method
	method strgetfrom
	localstring $1
	pop $1
	push $1
	cthis find
	call $1,length
	pop $b
	popax
	add $a,$b
	cthis length
	cthis getb
	ret
	end method
	method strremove
	localstring $1
	pop $1
	push $1
	cthis strgetto
	push $1
	cthis strgetfrom
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method strisbetween
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	localint $4
	push 0
	pop $4
l835:
	push $4
	cthis length
	cmpjl
	cmp0
	je l836
	jmp l838
l837:
	add $4,1
	pop $4
	jmp l835
l838:
	push $4
	cthis getbyte
	pop $3
	push $3
	push $1
	cmpjl
	cmp0
	jne l841
	push $3
	push $2
	cmpja
	jmp l842
l840:
	push 0
	jmp l842
l841:
	push 1
l842:
	cmp0
	je l843
	push 0
	ret
l843:
	jmp l837
l836:
	push 1
	end method
	method strisint
	push BYTE0
	push BYTE9
	cthis strisbetween
	end method
	method strisbin
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis strisbetween
	end method
	method strisalpha
	push BYTEa
	push BYTEz
	cthis strisbetween
	end method
	method streach
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l844:
	push $3
	cthis length
	cmpjl
	cmp0
	je l845
	jmp l847
l846:
	add $3,1
	pop $3
	jmp l844
l847:
	push $3
	push 1
	cthis getb
	pop $2
	push $2
	spushs
	push $1
	spushs
	push $3
	spop $d
	spop $a
	call [$a],[$d]
	jmp l846
l845:
	end method
	method strdotpos
	localint $1
	pop $1
	push "."
	cthis strgetto
	push "."
	pop $b
	popax
	add $a,$b
	push "."
	cthis strgetfrom
	spushs
	push 0
	push $1
	spop $h
	call $h,getb
	pop $b
	popax
	add $a,$b
	end method
	method swap
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	push $1
	spushs
	push $2
	popax
	mov $a,[$a]
	psax
	spop $b
	popax
	mov [$b],$a
	push $2
	spushs
	spop $b
	popax
	mov [$b],$a
	end method
	method stats
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l849
	push 0
	jmp l848
l849:
	push 100
	spushs
	spop $h
	call $h,rand
	push $1
	cmpjle
l848:
	end method
	method between
	localdef $1
	localdef $2
	localdef $3
	pop $3
	pop $2
	pop $1
	push $2
	push $1
	cmpjl
	cmp0
	je l851
	push $1
	jmp l850
l851:
	push $2
	push $3
	cmpja
	cmp0
	je l853
	push $3
	jmp l852
l853:
	push $2
l852:
l850:
	end method
	method max
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	cmp0
	je l855
	push $1
	jmp l854
l855:
	push $2
l854:
	end method
	method min
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	cmp0
	je l857
	push $1
	jmp l856
l857:
	push $2
l856:
	end method
	method imgborders
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push "1111"
	cthis imgborderss
	end method
	method imgborderss
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	new img,_img_bor
	cthis getw
	push $1
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 3
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l859
	push "_img_bor"
	cthis blit
l859:
	push 0
	cthis geth
	push $1
	pop $b
	popax
	sub $a,$b
	call _img_bor,move
	push 1
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l861
	push "_img_bor"
	cthis blit
l861:
	push $1
	cthis geth
	push $2
	push $3
	push $4
	push $5
	call _img_bor,create
	cthis getpx
	cthis getpy
	call _img_bor,setpos
	push 0
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l863
	push "_img_bor"
	cthis blit
l863:
	cthis getw
	push $1
	pop $b
	popax
	sub $a,$b
	push 0
	call _img_bor,move
	push 2
	push 1
	call $6,getb
	push "1"
	cmpje
	cmp0
	je l865
	push "_img_bor"
	cthis blit
l865:
	delete _img_bor
	end method
	method imgroundborder
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	cthis imgborders
	cthis imgerasecorners
	end method
	method imgerasecorners
	localdef $1
	cthis getpx
	pop $1
	localdef $2
	cthis getpy
	pop $2
	push $1
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	cthis transparent
	cthis putrgba
	cthis getex
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	push $1
	cthis getey
	push 1
	pop $b
	popax
	sub $a,$b
	cthis transparent
	cthis putrgba
	end method
	method imgdrawline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "blit"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgeraseline
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localreal $6
	localreal $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push "erase"
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	cthis imgfuncline
	end method
	method imgputoncenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method imgfuncline
	localstring $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localreal $7
	localreal $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $9
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	pop $9
	localdef $10
	push $6
	push $4
	pop $b
	popax
	sub $a,$b
	pop $10
	localreal $11
	push $9
	push 0
	cmpje
	cmp0
	je l867
	push $10
	push 0
	cmpjl
	cmp0
	je l869
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l870:
	push $11
	push $6
	cmpjae
	cmp0
	je l871
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	sub $11,$a
	pop $11
	jmp l870
l871:
	push $6
	push $11
	pop $b
	popax
	sub $a,$b
	jmp l868
l869:
	push $10
	push 0
	cmpja
	cmp0
	je l873
	push $8
	push $4
	pop $b
	popax
	add $a,$b
	pop $11
l874:
	push $11
	push $6
	cmpjle
	cmp0
	je l875
	push $2
	spushs
	push $3
	push $11
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $11,$a
	pop $11
	jmp l874
l875:
	push $11
	push $6
	pop $b
	popax
	sub $a,$b
	jmp l872
l873:
	push $8
l872:
l868:
	jmp l866
l867:
	push $9
	push $10
	call $8,length
	pop $11
	localreal $12
l876:
	push $8
	push $11
	cmpjle
	cmp0
	je l877
	push 1.0
	push $11
	push $8
	pop $b
	popax
	sub $a,$b
	push $11
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	pop $12
	push $2
	spushs
	push $12
	push $9
	pop $b
	popax
	mul $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push $12
	push $10
	pop $b
	popax
	mul $a,$b
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	push $7
	popax
	add $8,$a
	pop $8
	jmp l876
l877:
	push $8
	push $11
	pop $b
	popax
	sub $a,$b
l866:
	end method
	method anresizemets
	cthis getname
	clparent anima_pack,resizemethods
	end method
	method anfirstnontr
	cthis getname
	cthis getpx
	cthis getpy
	push 1
	push 0
	clparent classansearcher,_findnotr
	end method
	method anloopfin
	push "onfinish"
	push "_stdanloop"
	cthis addmethod
	end method
	method anloopplay
	localint $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anloopsplay
	localstring $1
	pop $1
	cthis anloopfin
	push $1
	cthis play
	end method
	method anhidefin
	push "onfinish"
	push "_stdanhide"
	cthis addmethod
	end method
	method anputgr
	cthis getey
	cthis setz
	end method
	method anputy
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method anputx
	localint $1
	pop $1
	push 0
	push $1
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis getpy
	pop $b
	popax
	sub $a,$b
	cthis move
	end method
	method ansetposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	cthis anputgr
	end method
	method anplayz
	localint $1
	localint $2
	pop $2
	pop $1
	push $2
	cthis setz
	push $1
	cthis play
	end method
	method anplaygr
	localint $1
	pop $1
	push $1
	cthis play
	cthis anputgr
	end method
	method anplayzpos
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	push $4
	cthis setpos
	push $1
	push $2
	cthis anplayz
	end method
	method anplaypos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplayposgr
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetposgr
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method anplaypos2
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anplaypos3
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis play
	end method
	method anhide
	push 0
	cthis stop
	cthis hide
	end method
	method andownpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetbpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis lodx
	pop $b
	popax
	sub $a,$b
	push $2
	cthis lody
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method ansetcpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $2
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis ansetbpos
	end method
	method ancenterscreen
	push iResX
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis ansetcpos
	end method
	method ansetframe
	localint $1
	pop $1
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push $1
	cthis setframe
	end method
	method ansetsframe
	localdef $1
	localstring $2
	pop $2
	pop $1
	push $1
	push 0
	cthis setframe
	localint $3
	push 0
	pop $3
l878:
	push $3
	push 1
	popax
	sub 0,$a
	cthis nofframes
	cmpjl
	cmp0
	je l879
	cthis framename
	push $2
	cmpjne
	jmp l881
l879:
	push 0
	jmp l881
l880:
	push 1
l881:
	cmp0
	je l882
	add $3,1
	pop $3
	push 1
	popax
	sub 0,$a
	push $3
	cthis setframe
	jmp l878
l882:
	end method
	method anonscreen
	cthis getcx
	cthis getcy
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call clsurf,inscreen
	ret
	end method
	method objplayfin
	localstring $1
	pop $1
	push "onfinish"
	push $1
	cthis addmethod
	cthis play
	end method
	method objloop
	push "onfinish"
	push "_stdsndloop"
	cthis addmethod
	end method
	method objplayloop
	cthis objloop
	cthis play
	end method
	method anplayfin
	localdef $1
	localstring $2
	pop $2
	pop $1
	push "onfinish"
	push $2
	cthis addmethod
	push $1
	cthis play
	end method
	method anytoz
	cthis getposy
	cthis setz
	end method
	method anposz
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis setpos
	push $3
	cthis setz
	end method
	method annextaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	cthis nameofaction
	ret
	end method
	method annextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	end method
	method ansetnextact
	push 1
	popax
	sub 0,$a
	cthis actionnr
	push 1
	pop $b
	popax
	add $a,$b
	cthis nofactions
	pop $b
	popax
	div $a,$b
	push $d
	push 0
	cthis setframe
	end method
	method ansetnextfr
	push 1
	popax
	sub 0,$a
	cthis framenr
	push 1
	pop $b
	popax
	add $a,$b
	push 1
	popax
	sub 0,$a
	cthis nofframes
	pop $b
	popax
	div $a,$b
	push $d
	cthis setframe
	end method
	method ansetrandfr
	push 1
	popax
	sub 0,$a
	push 1
	popax
	sub 0,$a
	cthis nofframes
	spushs
	spop $h
	call $h,rand
	cthis setframe
	end method
	method anhasaction
	localstring $1
	pop $1
	push $1
	cthis actionnr
	cthis nofactions
	cmpjne
	end method
	method anaddfilter
	cthis getname
	clparent classanfilter,build
	end method
	method anaddfx
	cthis getname
	clparent AnimaFx,build
	end method
	method anputc
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis ansetbpos
	push $3
	push $1
	pop $b
	popax
	sub $a,$b
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis move
	end method
	method aninlod
	localint $1
	pop $1
	cthis getpx
	cthis lodx
	pop $b
	popax
	sub $a,$b
	cthis getpy
	cthis lody
	pop $b
	popax
	sub $a,$b
	call $1,length
	push $1
	cmpjle
	end method
	method angetcpos
	cthis getcx
	cthis getcy
	ret
	end method
	method anactnr
	push 1
	popax
	sub 0,$a
	cthis actionnr
	end method
	method angetcrgba
	cthis getcx
	cthis getcy
	cthis getrgba
	end method
	method anisin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l883:
	push $5
	cthis nofactions
	cmpjl
	cmp0
	je l884
	jmp l886
l885:
	add $5,1
	pop $5
	jmp l883
l886:
	push $5
	push 0
	cthis setframe
	push $1
	push $2
	push $3
	push $4
	cthis isin
	cmp0
	je l888
	push $5
	ret
l888:
	jmp l885
l884:
	push 1
	popax
	sub 0,$a
	end method
	method anreload
	localstring $1
	pop $1
	localint $2
	push 1
	popax
	sub 0,$a
	cthis actionnr
	pop $2
	localint $3
	cthis framenr
	pop $3
	localint $4
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpjne
	pop $4
	localint $5
	localint $6
	cthis getpos
	pop $6
	pop $5
	localint $7
	cthis getz
	pop $7
	push $1
	cthis getpath
	cthis load
	push $5
	push $6
	cthis setpos
	push $7
	cthis setz
	push $2
	cthis nofactions
	cmpjl
	cmp0
	je l890
	push $4
	cmp0
	je l892
	push $2
	cthis play
l892:
	push $2
	push $3
	cthis setframe
	jmp l889
l890:
	push 0
	push 0
	cthis setframe
l889:
	end method
	method anclipob
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $1
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getey
	cthis clip
	end method
	method ancopyan
	localstring $1
	pop $1
	push $1
	spushs
	push 1
	popax
	sub 0,$a
	spop $a
	call [$a],actionnr
	push $1
	spushs
	spop $a
	call [$a],framenr
	cthis setframe
	push $1
	spushs
	spop $a
	call [$a],isvisible
	cmp0
	je l894
	cthis show
	jmp l893
l894:
	cthis hide
l893:
	push $1
	spushs
	spop $a
	call [$a],getpos
	cthis setpos
	end method
	method anconstmove
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push A
	push "mvx"
	push $2
	push "mvy"
	push $3
	cthis vars2
	push $1
	cthis setdelay
	push 1
	popax
	sub 0,$a
	push "global4"
	cthis anplayfin
	end method
	method global4
	push 1
	popax
	sub 0,$a
	cthis play
	push mvx
	push mvy
	cthis move
	end method
	method scmove
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis move
	end method
	method scpos
	localint $1
	localint $2
	pop $2
	pop $1
	push rgmscalex
	push $1
	pop $b
	popax
	mul $a,$b
	push rgmscaley
	push $2
	pop $b
	popax
	mul $a,$b
	cthis setpos
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis set
	cthis create
	end method
	method txtsetcol
	localstring $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	cthis set
	push $2
	push $3
	push $4
	cthis createtxt
	end method
	method txtshadow
	localint $1
	localstring $2
	pop $2
	pop $1
	push "txts"
	cthis hasvar
	neg
	cmp0
	je l896
	new text,txts
	push $2
	call txts,setfont
l896:
	cthis get
	call txts,set
	cthis getpx
	push $1
	pop $b
	popax
	add $a,$b
	cthis getpy
	push $1
	pop $b
	popax
	add $a,$b
	call txts,setpos
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	call txts,setz
	call txts,show
	push 0
	push 0
	push 0
	call txts,createtxt
	end method
	method txthides
	cthis hide
	push "txts"
	cthis hasvar
	cmp0
	je l898
	call txts,hide
l898:
	end method
	method txtisin
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getpx
	cmpjae
	cmp0
	je l899
	push $1
	cthis getpx
	cthis getw
	pop $b
	popax
	add $a,$b
	cmpjl
	cmp0
	je l899
	push $2
	cthis getpy
	cmpjae
	cmp0
	je l899
	push $2
	cthis getpy
	cthis geth
	pop $b
	popax
	add $a,$b
	cmpjle
	jmp l901
l899:
	push 0
	jmp l901
l900:
	push 1
l901:
	end method
	method txtcenter
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	cthis getw
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtright
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getex
	cthis getw
	pop $b
	popax
	sub $a,$b
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis geth
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	cthis setpos
	end method
	method txtcenterscreen
	push iResX
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push iResY
	cthis geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	cthis setpos
	end method
	method vecinc
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method vecdec
	localint $1
	pop $1
	push $1
	push $1
	cthis get
	push 1
	pop $b
	popax
	sub $a,$b
	cthis set
	end method
	method vecnewint
	localint $1
	pop $1
	cthis free
	push $1
	push 0
	cmpja
	cmp0
	je l903
	localint $2
	push 0
	pop $2
l904:
	push $2
	push $1
	cmpjl
	cmp0
	je l905
	jmp l907
l906:
	add $2,1
	pop $2
	jmp l904
l907:
	push $2
	cthis add
	jmp l906
l905:
l903:
	end method
	method veccopy
	localstring $1
	pop $1
	cthis free
	localint $2
	push 0
	pop $2
l908:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l909
	jmp l911
l910:
	add $2,1
	pop $2
	jmp l908
l911:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis add
	jmp l910
l909:
	end method
	method vecnextid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l913
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis size
	pop $b
	popax
	div $a,$b
	push $d
	pop $2
l913:
	push $2
	end method
	method vecprevid
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l915
	sub $2,1
	pop $2
	jmp l914
l915:
	push $2
	push 0
	cmpje
	cmp0
	je l917
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l917:
l914:
	push $2
	end method
	method vecget
	localint $1
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l918
	push $1
	cthis size
	cmpjl
	jmp l920
l918:
	push 0
	jmp l920
l919:
	push 1
l920:
	cmp0
	je l922
	push $1
	cthis get
	jmp l921
l922:
	push "null"
l921:
	end method
	method vecnext
	localdef $1
	pop $1
	push $1
	cthis vecnextid
	cthis vecget
	end method
	method vecprev
	localdef $1
	pop $1
	push $1
	cthis vecprevid
	cthis vecget
	end method
	method veclast
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l924
	push $1
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	jmp l923
l924:
	push "null"
l923:
	end method
	method vecpop
	localdef $1
	cthis last
	pop $1
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removeat
	push $1
	end method
	method veclimes
	localint $1
	pop $1
l925:
	cthis size
	push $1
	cmpja
	cmp0
	je l926
	cthis vecpop
	popax
	jmp l925
l926:
	end method
	method vecpopfront
	localdef $1
	push 0
	cthis get
	pop $1
	push 0
	cthis removeat
	push $1
	ret
	end method
	method vecreplace
	localdef $1
	localdef $2
	pop $2
	pop $1
	localdef $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l928
	push $3
	push $2
	cthis set
l928:
	end method
	method insertsort
	localint $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l930
	ret
l930:
	localdef $5
	localdef $6
	localint $7
	localint $8
	localint $9
	push 0
	pop $8
l931:
	push $8
	push $1
	cmpjl
	cmp0
	je l932
	jmp l934
l933:
	add $8,1
	pop $8
	jmp l931
l934:
	push $2
	spushs
	push $8
	spop $d
	cthis [$d]
	pop $5
	push $8
	pop $7
	push $8
	push 1
	pop $b
	popax
	add $a,$b
	pop $9
l935:
	push $9
	push $1
	cmpjl
	cmp0
	je l936
	jmp l938
l937:
	add $9,1
	pop $9
	jmp l935
l938:
	push $2
	spushs
	push $9
	spop $d
	cthis [$d]
	pop $6
	push $3
	spushs
	push $6
	push $5
	spop $d
	cthis [$d]
	cmp0
	je l940
	push $6
	pop $5
	push $9
	pop $7
l940:
	jmp l937
l936:
	push $4
	spushs
	push $8
	push $7
	spop $d
	cthis [$d]
	jmp l933
l932:
	end method
	method obbuildfromstring
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l941:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l942
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l941
l942:
	call $1,length
	push 0
	cmpja
	cmp0
	je l944
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l944:
	end method
	method obbuildfromstring2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $2
	call $1,find
	pop $4
l945:
	push $4
	push 1
	popax
	sub 0,$a
	cmpja
	cmp0
	je l946
	push $4
	push 0
	cmpja
	cmp0
	je l948
	push $3
	spushs
	push 0
	push $4
	call $1,getb
	spop $d
	cthis [$d]
l948:
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	call $1,strsubb
	pop $1
	push $2
	call $1,find
	pop $4
	jmp l945
l946:
	call $1,length
	push 0
	cmpja
	cmp0
	je l950
	push $3
	spushs
	push $1
	spop $d
	cthis [$d]
l950:
	end method
	method vecsort
	localstring $1
	pop $1
	cthis size
	push "get"
	push $1
	push "swap"
	cthis insertsort
	end method
	method vecbuildfromstring
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring
	end method
	method vecbuildfromstring2
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push "add"
	cthis obbuildfromstring2
	end method
	method vecremoveto
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l951:
	push $2
	push $1
	cmpjl
	cmp0
	je l952
	jmp l954
l953:
	add $2,1
	pop $2
	jmp l951
l954:
	push 0
	cthis removeat
	jmp l953
l952:
	end method
	method vecremovefrom
	localint $1
	pop $1
l955:
	push $1
	cthis size
	cmpjl
	cmp0
	je l956
	push $1
	cthis removeat
	jmp l955
l956:
	end method
	method vecfindfrom
	localint $1
	localdef $2
	pop $2
	pop $1
l957:
	push $1
	cthis size
	cmpjl
	cmp0
	je l958
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l960
	push $1
	ret
	jmp l959
l960:
	add $1,1
	pop $1
l959:
	jmp l957
l958:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method vecposfromto
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpje
	cmp0
	jne l963
	cthis size
	push 0
	cmpje
	jmp l964
l962:
	push 0
	jmp l964
l963:
	push 1
l964:
	cmp0
	je l965
	ret
l965:
	localdef $3
	push $1
	cthis get
	pop $3
	push $1
	push $2
	cmpja
	cmp0
	je l967
	localint $4
	push $1
	pop $4
l968:
	push $4
	push $2
	cmpja
	cmp0
	je l969
	jmp l971
l970:
	sub $4,1
	pop $4
	jmp l968
l971:
	push $4
	push $4
	push 1
	pop $b
	popax
	sub $a,$b
	cthis get
	cthis set
	jmp l970
l969:
	jmp l966
l967:
	push $1
	push $2
	cmpjl
	cmp0
	je l973
	localint $4
	push $1
	pop $4
l974:
	push $4
	push $2
	cmpjl
	cmp0
	je l975
	jmp l977
l976:
	add $4,1
	pop $4
	jmp l974
l977:
	push $4
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis get
	cthis set
	jmp l976
l975:
l973:
l966:
	push $2
	push $3
	cthis set
	end method
	method vecposfirst
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l979
	push $2
	push 0
	cthis vecposfromto
	jmp l978
l979:
	push $1
	cthis addbegin
l978:
	end method
	method vecposlast
	localdef $1
	pop $1
	localint $2
	push $1
	cthis find
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l981
	push $2
	cthis size
	push 1
	pop $b
	popax
	sub $a,$b
	cthis vecposfromto
	jmp l980
l981:
	push $1
	cthis addbegin
l980:
	end method
	method vecset
	localdef $1
	localdef $2
	pop $2
	pop $1
	localint $3
	push $1
	cthis find
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l983
	push $3
	push $2
	cthis set
l983:
	end method
	method veceq
	localstring $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjne
	cmp0
	je l985
	push 0
	ret
l985:
	localint $3
	push 0
	pop $3
l986:
	push $3
	push $2
	cmpjl
	cmp0
	je l987
	jmp l989
l988:
	add $3,1
	pop $3
	jmp l986
l989:
	push $3
	cthis get
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l991
	push 0
	ret
l991:
	jmp l988
l987:
	push 1
	end method
	method vecbuild
	push "addbegin"
	cthis withlist
	end method
	method veceq2
	new vector,___v
	cthis getvectype
	call ___v,type
	call ___v,vecbuild
	localint $1
	push "___v"
	cthis veceq
	pop $1
	delete ___v
	push $1
	end method
	method veccopydbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	cthis vecadddbrow
	end method
	method vecadddbrow
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l992:
	push $3
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l993
	jmp l995
l994:
	add $3,1
	pop $3
	jmp l992
l995:
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l994
l993:
	end method
	method vecchecknext
	localint $1
	pop $1
	add $1,1
	pop $1
	push $1
	cthis size
	cmpjl
	cmp0
	je l997
	push $1
	cthis get
	jmp l996
l997:
	push "null"
l996:
	end method
	method vecsum
	cthis size
	cmp0
	je l999
	localdef $1
	push 0
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
l1000:
	push $2
	cthis size
	cmpjl
	cmp0
	je l1001
	jmp l1003
l1002:
	add $2,1
	pop $2
	jmp l1000
l1003:
	push $2
	cthis get
	popax
	add $1,$a
	pop $1
	jmp l1002
l1001:
	push $1
	jmp l998
l999:
	push 0
l998:
	end method
	method vecclosest
	localdef $1
	pop $1
	localint $2
	cthis size
	pop $2
	push $2
	push 0
	cmpjle
	cmp0
	je l1005
	push 1
	popax
	sub 0,$a
	ret
l1005:
	localint $3
	push 0
	pop $3
	localdef $4
	push $1
	push 0
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $4
	localint $5
	push 1
	pop $5
l1006:
	push $5
	push $2
	cmpjl
	cmp0
	je l1007
	jmp l1009
l1008:
	add $5,1
	pop $5
	jmp l1006
l1009:
	localdef $6
	push $1
	push $5
	cthis get
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,abs
	pop $6
	push $6
	push $4
	cmpjl
	cmp0
	je l1011
	push $5
	pop $3
	push $6
	pop $4
l1011:
	jmp l1008
l1007:
	push $3
	end method
	method dbbuild
	localint $1
	pop $1
	push $1
	push 0
	cmpjle
	cmp0
	je l1013
	ret
l1013:
	sub $1,1
	pop $1
	cthis free
	localstring $2
	pop $2
	localint $3
	localint $4
	push 0
	pop $4
l1014:
	push $2
	push A
	cmpjne
	cmp0
	je l1015
	jmp l1017
l1016:
	jmp l1014
l1017:
	push $4
	push 0
	cmpje
	cmp0
	je l1019
	cthis addbeginrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
l1019:
	push 0
	push $2
	cthis addbegin
	pop $2
	push $4
	push $1
	cmpjl
	cmp0
	je l1021
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	jmp l1020
l1021:
	push 0
l1020:
	pop $4
	jmp l1016
l1015:
	end method
	method dbbuild2
	cthis free
	localstring $1
	pop $1
l1022:
	push $1
	push A
	cmpjne
	cmp0
	je l1023
	push $1
	push "null"
	cmpje
	cmp0
	je l1025
	cthis addbeginrow
	popax
	jmp l1024
l1025:
	push 0
	push $1
	cthis addbegin
l1024:
	pop $1
	jmp l1022
l1023:
	end method
	method dbaddvec
	localstring $1
	pop $1
	localdef $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	localint $3
	push 0
	pop $3
l1026:
	push $3
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1027
	jmp l1029
l1028:
	add $3,1
	pop $3
	jmp l1026
l1029:
	push $2
	push $1
	spushs
	push $3
	spop $a
	call [$a],get
	cthis add
	jmp l1028
l1027:
	end method
	method dbcopy
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis dbcopyfromto
	end method
	method dbcopyrow
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis dbcopyfromto
	end method
	method dbcopyfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	cthis free
	push $1
	push $2
	push $3
	cthis dbaddrowfromto
	end method
	method dbaddrowfromto
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	localint $5
	localint $6
	push $2
	pop $4
l1030:
	push $4
	push $3
	cmpjl
	cmp0
	je l1031
	jmp l1033
l1032:
	add $4,1
	pop $4
	jmp l1030
l1033:
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $6
	push 0
	pop $5
l1034:
	push $5
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1035
	jmp l1037
l1036:
	add $5,1
	pop $5
	jmp l1034
l1037:
	push $6
	push $1
	spushs
	push $4
	push $5
	spop $a
	call [$a],get
	cthis add
	jmp l1036
l1035:
	jmp l1032
l1031:
	end method
	method dbadddbrowtorow
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1038:
	push $4
	push $2
	spushs
	push $3
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1039
	jmp l1041
l1040:
	add $4,1
	pop $4
	jmp l1038
l1041:
	push $1
	push $2
	spushs
	push $3
	push $4
	spop $a
	call [$a],get
	cthis add
	jmp l1040
l1039:
	end method
	method dbremovecol
	localint $1
	pop $1
	localint $2
	push 0
	pop $2
l1042:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1043
	jmp l1045
l1044:
	add $2,1
	pop $2
	jmp l1042
l1045:
	push $2
	cthis getcolsno
	push $1
	cmpja
	cmp0
	je l1047
	push $2
	push $1
	cthis removeat
l1047:
	jmp l1044
l1043:
	end method
	method dbcopyfromtos
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis dbcopyfromto
	end method
	method dbremovelast
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	cthis removerow
	end method
	method dbcuttosize
	localint $1
	pop $1
	push $1
	push 0
	cmpja
	cmp0
	je l1049
l1050:
	cthis getrowsno
	push $1
	cmpja
	cmp0
	je l1051
	cthis dbremovelast
	jmp l1050
l1051:
	jmp l1048
l1049:
	cthis free
l1048:
	end method
	method dbaddlast
	localstring $1
	pop $1
	cthis getrowsno
	push 1
	pop $b
	popax
	sub $a,$b
	push $1
	cthis add
	end method
	method dbaddstringrow
	localstring $1
	localstring $2
	pop $2
	pop $1
	cthis addrow
	popax
	push $1
	push $2
	push "dbaddlast"
	cthis obbuildfromstring
	end method
	method dbgetstringrow
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push $1
	cthis getcolsno
	pop $3
	localint $4
	push 0
	pop $4
l1052:
	push $4
	push $3
	cmpjl
	cmp0
	je l1053
	jmp l1055
l1054:
	add $4,1
	pop $4
	jmp l1052
l1055:
	push $1
	push $4
	cthis get
	popax
	add $2,$a
	pop $2
	jmp l1054
l1053:
	push $2
	end method
	method dbaddrow
	localdef $1
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $1
	localdef $2
	pop $2
l1056:
	push A
	push $2
	cmpjne
	cmp0
	je l1057
	push $1
	push $2
	cthis addbegin
	localdef $2
	pop $2
	jmp l1056
l1057:
	end method
	method dbaddrowfrom
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],rowinrange
	cmp0
	je l1059
	push $3
	push 0
	cmpjae
	jmp l1061
l1059:
	push 0
	jmp l1061
l1060:
	push 1
l1061:
	cmp0
	je l1062
	localint $4
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
	localint $5
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $5
l1063:
	push $3
	push $5
	cmpjl
	cmp0
	je l1064
	push $4
	push $1
	spushs
	push $2
	push $3
	spop $a
	call [$a],get
	cthis add
	add $3,1
	pop $3
	jmp l1063
l1064:
l1062:
	end method
	method dbchecknext
	localint $1
	localint $2
	pop $2
	pop $1
	add $2,1
	pop $2
	push $2
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1066
	push $1
	push $2
	cthis get
	jmp l1065
l1066:
	push "null"
l1065:
	end method
	method dbgets
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis findbyrow
	push $2
	cthis get
	ret
	end method
	method dbget
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1068
	push $2
	push 1
	cthis get
	jmp l1067
l1068:
	push "null"
l1067:
	end method
	method dbgetint
	localstring $1
	pop $1
	localdef $2
	push $1
	cthis findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1070
	push $2
	push 1
	cthis get
	spushs
	spop $h
	call $h,to_i
	jmp l1069
l1070:
	push 0
l1069:
	end method
	method dbinsertless
	localint $1
	pop $1
	localint $2
	cthis addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	cthis add
	push "cmpless"
	cthis dbsort
l1071:
	push $2
	push 0
	cmpjae
	cmp0
	je l1072
	push $1
	push $2
	push 0
	cthis get
	cmpje
	cmp0
	je l1074
	push $2
	ret
l1074:
	sub $2,1
	pop $2
	jmp l1071
l1072:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbdelvar
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	cthis dbdelvarn
	ret
	end method
	method dbdelvarn
	localint $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	push $2
	cthis dbfindinrow
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1076
	push $1
	push $4
	push $3
	cthis removen
	push 1
	ret
l1076:
	push 0
	ret
	end method
	method dbfindinrow
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis rowinrange
	cmp0
	je l1078
	localint $3
	push 0
	pop $3
l1079:
	push $3
	push $1
	cthis getcolsno
	cmpjl
	cmp0
	je l1080
	jmp l1082
l1081:
	add $3,1
	pop $3
	jmp l1079
l1082:
	push $1
	push $3
	cthis get
	push $2
	cmpje
	cmp0
	je l1084
	push $3
	ret
l1084:
	jmp l1081
l1080:
l1078:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbfindbycol
	localint $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push 0
	pop $3
l1085:
	push $3
	cthis getrowsno
	cmpjl
	cmp0
	je l1086
	jmp l1088
l1087:
	add $3,1
	pop $3
	jmp l1085
l1088:
	push $3
	push $1
	cthis get
	push $2
	cmpje
	cmp0
	je l1090
	push $3
	ret
l1090:
	jmp l1087
l1086:
	push 1
	popax
	sub 0,$a
	ret
	end method
	method dbrowcontains
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	cthis dbfindinrow
	push 1
	popax
	sub 0,$a
	cmpjne
	ret
	end method
	method dbfirst
	localint $1
	pop $1
	push $1
	push 0
	cthis get
	ret
	end method
	method cmpless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpjl
	ret
	end method
	method cmpabove
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	cmpja
	end method
	method dbfirstless
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 0
	cthis get
	push $2
	push 0
	cthis get
	cmpjl
	end method
	method dbsort
	localstring $1
	pop $1
	cthis getrowsno
	push "dbfirst"
	push $1
	push "swap"
	cthis insertsort
	end method
	method dbsetall
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1091:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1092
	jmp l1094
l1093:
	add $2,1
	pop $2
	jmp l1091
l1094:
	localdef $3
	push 0
	pop $3
l1095:
	push $3
	push $2
	cthis getcolsno
	cmpjl
	cmp0
	je l1096
	jmp l1098
l1097:
	add $3,1
	pop $3
	jmp l1095
l1098:
	push $2
	push $3
	push $1
	cthis set
	jmp l1097
l1096:
	jmp l1093
l1092:
	end method
	method dbeach_row
	localstring $1
	pop $1
	localdef $2
	push 0
	pop $2
l1099:
	push $2
	cthis getrowsno
	cmpjl
	cmp0
	je l1100
	jmp l1102
l1101:
	add $2,1
	pop $2
	jmp l1099
l1102:
	push $1
	spushs
	push $2
	spop $d
	cthis [$d]
	jmp l1101
l1100:
	end method
	method dbeq
	localstring $1
	pop $1
	cthis getrowsno
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjne
	cmp0
	je l1104
	push 0
	ret
l1104:
	localint $2
	localint $3
	localint $4
	push 0
	pop $4
l1105:
	push $4
	cthis getrowsno
	cmpjl
	cmp0
	je l1106
	jmp l1108
l1107:
	add $4,1
	pop $4
	jmp l1105
l1108:
	push $4
	cthis getcolsno
	pop $2
	push $2
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmpjne
	cmp0
	je l1110
	push 0
	ret
l1110:
	push 0
	pop $3
l1111:
	push $3
	push $2
	cmpjl
	cmp0
	je l1112
	jmp l1114
l1113:
	add $3,1
	pop $3
	jmp l1111
l1114:
	push $4
	push $3
	cthis get
	push $1
	spushs
	push $4
	push $3
	spop $a
	call [$a],get
	cmpjne
	cmp0
	je l1116
	push 0
	ret
l1116:
	jmp l1113
l1112:
	jmp l1107
l1106:
	push 1
	end method
	method randdiff
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push 1
	cmpjle
	cmp0
	je l1118
	push 1
	popax
	sub 0,$a
	ret
l1118:
	localint $3
	call $1,rand
	pop $3
l1119:
	push $3
	push $2
	cmpje
	cmp0
	je l1120
	jmp l1122
l1121:
	call $1,rand
	pop $3
	jmp l1119
l1122:
	jmp l1121
l1120:
	push $3
	ret
	end method
	method bin_to_i
	localstring $1
	cthis get
	pop $1
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	call $1,length
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l1123:
	push $4
	push 0
	cmpjae
	cmp0
	je l1124
	jmp l1126
l1125:
	sub $4,1
	pop $4
	jmp l1123
l1126:
	push $4
	push 1
	call $1,getb
	push "1"
	cmpje
	cmp0
	je l1128
	push $2
	popax
	add $3,$a
	pop $3
l1128:
	push 2
	popax
	mul $2,$a
	pop $2
	jmp l1125
l1124:
	push $3
	end method
	class classgamepause
	method init
	new button,butpause
	push 0
	push 0
	push 800
	push 600
	call butpause,setrect
	push "onclick"
	push "resume"
	call butpause,addmethod
	call butpause,disable
	end method
	method resume
	call butpause,disable
	call gameapi,resume
	end method
	method pause
	call gameapi,pause
	call butpause,enable
	call butpause,resume
	end method
	end class

	class TicksCounter
	method init
	new int,istart
	end method
	method start
	call engine,getticks
	pop istart
	end method
	method stop
	call engine,getticks
	push istart
	pop $b
	popax
	sub $a,$b
	pop istart
	end method
	method get
	push istart
	ret
	end method
	method stopget
	cthis stop
	cthis get
	ret
	end method
	method print
	localstring $1
	pop $1
	push $1
	push " delay: "
	pop $b
	popax
	add $a,$b
	cthis stopget
	pop $b
	popax
	add $a,$b
	push " ms"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	method put
	push ""
	cthis print
	end method
	end class

	class ObjController
	method init
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],addgmobj
	end method
	method removefromgame
	push GAME
	spushs
	cthis getname
	spop $a
	call [$a],removegmobj
	end method
	end class

	class LObjController
	parent ObjController
	parent classlocker
	method init
	clparent ObjController,init
	clparent classlocker,init
	end method
	end class

	class gmbankvec
	parent gmobjvec
	method init
	clparent gmobjvec,init
	push "iid"
	push 1
	popax
	sub 0,$a
	cthis var2
	end method
	method startrand
	cthis size
	push 0
	cmpja
	cmp0
	je l1130
	cthis size
	spushs
	spop $h
	call $h,rand
	pop iid
l1130:
	end method
	method play
	push 0
	cthis stop
	localint $1
	cthis size
	pop $1
	push $1
	push 0
	cmpje
	cmp0
	je l1132
	ret
l1132:
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	cthis get
	spushs
	spop $a
	call [$a],play
	end method
	method onfinish
	end method
	method stop
	localint $1
	pop $1
	cthis isplaying
	cmp0
	je l1134
	cthis getplay
	spushs
	push $1
	spop $a
	call [$a],stop
	push $1
	cmp0
	je l1136
	cthis onfinish
l1136:
l1134:
	end method
	method isplaying
	push iid
	push 0
	cmpjae
	cmp0
	je l1138
	cthis getplay
	spushs
	spop $a
	call [$a],isplaying
	jmp l1137
l1138:
	push 0
l1137:
	end method
	method getplay
	push iid
	cthis get
	ret
	end method
	end class

	class GameController
	parent classlocker
	method init
	localstring $1
	pop $1
	clparent classlocker,init
	new gmobjvec,__grobj
	new db,_dbsnd
	push "|"
	call _dbsnd,setseparator
	new string,_sndbase
	push $1
	pop _sndbase
	new string,GAME
	cthis getname
	pop GAME
	new timer,__dblclick
	push 250
	call __dblclick,delay
	push 1
	call __dblclick,settick
	new int,_itimersnddelay
	push 10000
	pop _itimersnddelay
	end method
	method game_exit
	end method
	method setsndbase
	localstring $1
	pop $1
	push $1
	pop _sndbase
	end method
	method say
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis sayf
	end method
	method sayf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	localstring $4
	push $2
	cthis getsndtxt
	pop $4
	push $4
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	push $4
	push $3
	cthis cplayf
	end method
	method getsndtxt
	localstring $1
	pop $1
	localstring $2
	push "snd"
	push _sndbase
	pop $b
	popax
	add $a,$b
	call _dbsnd,getrowsno
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	push $1
	cthis addsnd
	push $2
	ret
	end method
	method _sndtimerstart
	ret
	localint $1
	push 1
	cthis getname
	call _dbsnd,dbfindbycol
	pop $1
	push $1
	push 0
	cmpjae
	cmp0
	je l1140
	push $1
	push 2
	call _dbsnd,get
	call engine,print
	jmp l1139
l1140:
	cthis getname
	push " not in _dbsnd"
	pop $b
	popax
	add $a,$b
	call engine,print
l1139:
	push ""
	call engine,print
	end method
	method addsndf
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	cthis addsnd
	push $3
	push "null"
	cmpjne
	cmp0
	je l1142
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1144
	push 1
	call $1,strsubb
	pop $1
l1144:
	push $1
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
l1142:
	end method
	method asf
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "snd"
	push $1
	pop $b
	popax
	add $a,$b
	push $2
	push "end"
	push $1
	pop $b
	popax
	add $a,$b
	cthis addsndff
	end method
	method addsndff
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	cthis addsndf
	end method
	method gmconsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new snd,[$e]
	push $1
	spushs
	push 0
	push 1
	spop $a
	call [$a],setstartstopflag
	push $1
	spushs
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],load
	push igmsubtitle
	cmp0
	je l1146
	push $1
	cthis getsndpath
	push $2
	pop $b
	popax
	add $a,$b
	call subtitle,register
l1146:
	end method
	method addsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	call _dbsnd,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	localstring $4
	push 0
	push 1
	call $1,getb
	push ":"
	cmpje
	cmp0
	je l1148
	push 1
	call $1,strsubb
	pop $1
	push _sndbase
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $4
	jmp l1147
l1148:
	push _sndbase
	push $3
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	pop $4
l1147:
	localstring $5
	call gameapi,getgamename
	pop $5
	push igmsoundson
	cmp0
	je l1150
	cthis getsndpath
	push $4
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	jmp l1152
l1150:
	push 0
	jmp l1152
l1151:
	push 1
l1152:
	cmp0
	je l1153
	push $5
	spushs
	push $1
	push $4
	spop $a
	call [$a],gmconsnd
	jmp l1149
l1153:
	push $5
	spushs
	push $1
	call $2,length
	push _itimersnddelay
	pop $b
	popax
	mul $a,$b
	push 1
	spop $a
	call [$a],newtimer
	push $1
	spushs
	push "onstart"
	push "_sndtimerstart"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setstartstopflag"
	push "GameController0"
	spop $a
	call [$a],addmethod
l1149:
	push $3
	push $4
	call _dbsnd,add
	push $3
	push $1
	call _dbsnd,add
	push $3
	push $2
	call _dbsnd,add
	end method
	method GameController0
	localint $1
	localint $2
	pop $2
	pop $1
	end method
	method addbank
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	localstring $3
	pop $3
	localstring $4
l1154:
	push $3
	push A
	cmpjne
	cmp0
	je l1155
	push $3
	cthis getsndtxt
	pop $4
	push $1
	spushs
	push $4
	spop $a
	call [$a],addbegin
	push $2
	push "null"
	cmpjne
	cmp0
	je l1157
	push $4
	spushs
	push "onfinish"
	push $2
	spop $a
	call [$a],addmethod
l1157:
	pop $3
	jmp l1154
l1155:
	end method
	method exportbank
	localstring $1
	pop $1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $e
	new db,[$e]
	call [$e],GameController1
	push "__db"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	delete [$d]
	end method
	method GameController1
	localdef $1
	pop $1
	push 1
	cthis dbbuild
	push "|"
	cthis setseparator
	push "GameController2"
	cthis dbeach_row
	push igmdebug
	cmp0
	je l1159
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis save
l1159:
	end method
	method GameController2
	localdef $1
	pop $1
	localdef $2
	cthis getname
	spushs
	push "__db"
	spop $h
	call $h,strsubbs
	pop $2
	push $1
	push "snd"
	push $2
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis addbegin
	push $1
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	push ".wav"
	pop $b
	popax
	add $a,$b
	cthis addbegin
	end method
	method importbank
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new gmbankvec,[$e]
	push $2
	push $3
	push "null"
	push $1
	cthis importgroupto
	end method
	method exportsnd
	localstring $1
	pop $1
	push igmdebug
	cmp0
	je l1161
	push $1
	call _dbsnd,save
l1161:
	end method
	method stdexportsnd
	push "exports/"
	push _sndbase
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	cthis exportsnd
	end method
	method sounds=
	cthis buildsnds
	end method
	method sounds_from
	localstring $1
	pop $1
	new db,__tmpdb
	localdef $2
	push _sndbase
	pop $2
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localdef $3
	pop $3
	localint $4
	localstring $5
l1162:
	push A
	push $3
	cmpjne
	cmp0
	je l1163
	localdef $6
	pop $6
	push 1
	push $6
	call __tmpdb,dbfindbycol
	pop $4
	push $4
	push 0
	cmpjae
	cmp0
	je l1165
	cthis getsndpath
	push $4
	push 0
	call __tmpdb,get
	pop $b
	popax
	add $a,$b
	pop $5
	push $5
	call engine,fileexist
	cmp0
	je l1167
	push GAME
	spushs
	push $6
	push $4
	push 0
	call __tmpdb,get
	spop $a
	call [$a],gmconsnd
	push $6
	spushs
	push "onfinish"
	push $3
	spop $a
	call [$a],addmethod
	jmp l1166
l1167:
	push $6
	push $4
	push 1
	call __tmpdb,get
	push $3
	cthis addsndf
l1166:
l1165:
	localdef $3
	pop $3
	jmp l1162
l1163:
	call _dbsnd,free
	delete __tmpdb
	push $2
	cthis setsndbase
	end method
	method buildsnds
	call _dbsnd,free
	new db,__dbsnd
	push 3
	call __dbsnd,dbbuild
	push "__dbsnd"
	cthis buildfromdb
	delete __dbsnd
	end method
	method buildfromdb
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1168:
	push $2
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1169
	jmp l1171
l1170:
	add $2,1
	pop $2
	jmp l1168
l1171:
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $1
	spushs
	push $2
	push 2
	spop $a
	call [$a],get
	cthis addsndf
	jmp l1170
l1169:
	cthis stdexportsnd
	end method
	method importsnd
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "null"
	cthis importgroup
	end method
	method importgroup
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "null"
	cthis importgroupto
	end method
	method importgroupto
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	new db,__tmpdb
	localdef $5
	push _sndbase
	pop $5
	push $1
	cthis setsndbase
	push "exports/"
	push $1
	pop $b
	popax
	add $a,$b
	push ".dlg"
	pop $b
	popax
	add $a,$b
	call __tmpdb,load
	call _dbsnd,free
	localstring $6
	localint $7
	push 0
	pop $7
l1172:
	push $7
	call __tmpdb,getrowsno
	cmpjl
	cmp0
	je l1173
	jmp l1175
l1174:
	add $7,1
	pop $7
	jmp l1172
l1175:
	push $7
	push 1
	call __tmpdb,get
	pop $6
	push $3
	push "null"
	cmpje
	cmp0
	jne l1178
	push $3
	spushs
	push $6
	spop $a
	call [$a],contains
	jmp l1179
l1177:
	push 0
	jmp l1179
l1178:
	push 1
l1179:
	cmp0
	je l1180
	push $6
	push $7
	push 2
	call __tmpdb,get
	push $2
	cthis addsndf
	push $4
	push "null"
	cmpjne
	cmp0
	je l1182
	push $4
	spushs
	push $6
	spop $a
	call [$a],add
l1182:
l1180:
	jmp l1174
l1173:
	call _dbsnd,free
	call __tmpdb,free
	delete __tmpdb
	push $5
	cthis setsndbase
	end method
	method freesnd
	call _dbsnd,free
	end method
	method addgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,add
	end method
	method removegmobj
	localstring $1
	pop $1
	push $1
	call __grobj,remove
	end method
	method isgmobj
	localstring $1
	pop $1
	push $1
	call __grobj,contains
	end method
	method deletegmobj
	localstring $1
	pop $1
	push $1
	cthis hasvar
	cmp0
	je l1184
	push $1
	cthis removegmobj
	push $1
	spushs
	spop $d
	delete [$d]
l1184:
	end method
	method lockall
	push "lock"
	call __grobj,eval
	cthis lock
	end method
	method unlockall
	push "unlock"
	call __grobj,eval
	cthis unlock
	end method
	method gmunlockall
	push GAME
	spushs
	spop $a
	call [$a],unlockall
	end method
	method gmlockall
	push GAME
	spushs
	spop $a
	call [$a],lockall
	end method
	method lock=
	localint $1
	pop $1
	push $1
	cmp0
	je l1186
	cthis gmlockall
	jmp l1185
l1186:
	cthis gmunlockall
l1185:
	end method
	method mousemove
	push "onmousemove"
	call __grobj,eval
	cthis mouse_move
	end method
	method mouselclick
	push "onmouselclick"
	call __grobj,eval
	cthis mouse_lclick
	call __dblclick,isplaying
	cmp0
	je l1188
	cthis mouse_dblclick
	jmp l1187
l1188:
	call __dblclick,play
l1187:
	end method
	method mouserclick
	push "onmouserclick"
	call __grobj,eval
	cthis mouse_rclick
	end method
	method mouselrel
	push "onmouselrel"
	call __grobj,eval
	cthis mouse_lrel
	end method
	method mouserrel
	push "onmouserrel"
	call __grobj,eval
	cthis mouse_rrel
	end method
	method keydown
	push "onkeydown"
	call __grobj,eval
	cthis key_down
	end method
	end class

	class classadv
	parent classgame
	method init
	clparent classgame,init
	end method
	method newclpathf
	localstring $1
	localstring $2
	localstring $3
	localint $4
	localint $5
	localreal $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	cthis getgraphpath
	push $3
	pop $b
	popax
	add $a,$b
	push $4
	push $5
	push $6
	push $7
	spop $a
	call [$a],build
	end method
	method newclpathfcopy
	localstring $1
	localstring $2
	localstring $3
	localreal $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classpathf,[$e]
	push $1
	spushs
	push $2
	push $3
	push $4
	spop $a
	call [$a],buildfrom
	end method
	method newpathf
	localstring $1
	localstring $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new path,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	push 2.0
	push 1
	spop $a
	call [$a],build
	end method
	method newclbut
	localstring $1
	localstring $2
	localint $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classbutton,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],build
	end method
	method newclmask
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	spop $a
	call [$a],buildmask
	end method
	method newclmaskfunc
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new classmask,[$e]
	push $1
	spushs
	cthis getgraphpath
	push $2
	pop $b
	popax
	add $a,$b
	push $3
	push $4
	spop $a
	call [$a],buildmaskfunc
	end method
	end class

	class classquest
	method init
	new vector,vqst
	push "string"
	call vqst,type
	end method
	method isdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	ret
	end method
	method notdone
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	ret
	end method
	method done
	localstring $1
	pop $1
	push $1
	call vqst,contains
	neg
	cmp0
	je l1190
	push $1
	call vqst,add
l1190:
	end method
	method reset
	call vqst,free
	end method
	method save
	localstring $1
	pop $1
	push $1
	call vqst,save
	end method
	method load
	localstring $1
	pop $1
	push $1
	call vqst,load
	end method
	end class

	new classquest,clqs
	method winsave
	localstring $1
	pop $1
	new db,_db_win
	push "output.db"
	call _db_win,load
	localdef $2
	call _db_win,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push $1
	call _db_win,add
	push "output.db"
	call _db_win,save
	delete _db_win
	end method
	method saveexist
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call engine,fileexist
	end method
	method vecsave
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis save
	end method
	method vecload
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis load
	end method
	class classfullsave
	method init
	localstring $1
	pop $1
	new db,dbsav
	push "|"
	call dbsav,setseparator
	new string,sstdfile
	push $1
	cthis setfile
	new int,saveonset
	push 0
	pop saveonset
	end method
	method save
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	call dbsav,save
	end method
	method _load
	localstring $1
	pop $1
	push $1
	call engine,fileexist
	cmp0
	je l1192
	call dbsav,free
	push $1
	call dbsav,load
l1192:
	end method
	method load
	localstring $1
	pop $1
	cthis getsavepath
	push $1
	pop $b
	popax
	add $a,$b
	cthis _load
	end method
	method print
	call dbsav,print
	end method
	method setfile
	localstring $1
	pop $1
	push $1
	pop sstdfile
	end method
	method stdload
	push sstdfile
	cthis load
	end method
	method stdsave
	push sstdfile
	cthis save
	end method
	method free
	call dbsav,free
	end method
	method set
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1194
	push $3
	push 1
	push $2
	call dbsav,set
	jmp l1193
l1194:
	call dbsav,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push $1
	call dbsav,add
	push $3
	push $2
	call dbsav,add
l1193:
	push saveonset
	cmp0
	je l1196
	cthis stdsave
l1196:
	end method
	method bset
	localstring $1
	pop $1
	push $1
	push 1
	cthis set
	end method
	method get
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1198
	push $2
	push 1
	call dbsav,get
	jmp l1197
l1198:
	push "null"
l1197:
	ret
	end method
	method is
	localstring $1
	localstring $2
	pop $2
	pop $1
	localint $3
	push $1
	call dbsav,findbyrow
	pop $3
	push $3
	push 0
	cmpjae
	cmp0
	je l1200
	push $3
	push 1
	call dbsav,get
	push $2
	cmpje
	jmp l1199
l1200:
	push 0
l1199:
	ret
	end method
	method bis
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1202
	push $2
	push 1
	call dbsav,get
	push 0
	cmpjne
	jmp l1201
l1202:
	push 0
l1201:
	ret
	end method
	method has
	localstring $1
	pop $1
	push $1
	call dbsav,findbyrow
	push 0
	cmpjae
	end method
	method bgo
	localstring $1
	pop $1
	push $1
	cthis bis
	neg
	cmp0
	je l1204
	push $1
	cthis bset
	push 1
	jmp l1203
l1204:
	push 0
l1203:
	end method
	method saveonset=
	localint $1
	pop $1
	push $1
	pop saveonset
	end method
	method remove
	localstring $1
	pop $1
	localint $2
	push $1
	call dbsav,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l1206
	push $2
	call dbsav,removerow
	push saveonset
	cmp0
	je l1208
	cthis stdsave
l1208:
l1206:
	end method
	end class

	class StringChecker
	method init
	end method
	method isdigit
	localstring $1
	pop $1
	call $1,to_i
	push 0
	cmpjne
	cmp0
	jne l1210
	push 0
	push 1
	call $1,getb
	push "0"
	cmpje
	jmp l1211
l1209:
	push 0
	jmp l1211
l1210:
	push 1
l1211:
	ret
	end method
	method getint
	localstring $1
	pop $1
	call $1,to_i
	ret
	end method
	method getreal
	localstring $1
	pop $1
	call $1,to_r
	ret
	end method
	method isreal
	localstring $1
	pop $1
	push $1
	cthis isdigit
	cmp0
	je l1212
	push "."
	call $1,contains
	jmp l1214
l1212:
	push 0
	jmp l1214
l1213:
	push 1
l1214:
	ret
	end method
	method isstring
	localstring $1
	pop $1
	push 0
	push 1
	call $1,getb
	push "\""
	cmpje
	ret
	end method
	method getstring
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	ret
	end method
	end class

	class Script
	method init
	localstring $1
	pop $1
	new db,__dbcode
	new string,__sdb
	new int,__irow
	new int,__icol
	new string,__sreads
	new vector,__vec
	push "string"
	call __vec,type
	new string,__sarg
	new int,__iarg
	new real,__rarg
	new StringChecker,__csc
	push "int"
	new map2,__mp
	localint $2
	push 0
	pop $2
l1215:
	push $2
	push 10
	cmpjl
	cmp0
	je l1216
	jmp l1218
l1217:
	add $2,1
	pop $2
	jmp l1215
l1218:
	push "ARG"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	new string,[$e]
	jmp l1217
l1216:
	push $1
	cthis load
	end method
	method ARG=
	localint $1
	localstring $2
	pop $2
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	spop $b
	popax
	mov [$b],$a
	end method
	method ARG
	localint $1
	pop $1
	push "ARG"
	push $1
	pop $b
	popax
	add $a,$b
	popax
	mov $a,[$a]
	psax
	end method
	method load
	localstring $1
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1220
	ret
l1220:
	push "."
	call $1,contains
	cmp0
	je l1222
	push "__dbcode"
	pop __sdb
	push $1
	call __dbcode,loadbeh
	jmp l1221
l1222:
	push $1
	pop __sdb
l1221:
	call __mp,free
	localint $2
	push 0
	pop $2
l1223:
	push $2
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l1224
	jmp l1226
l1225:
	add $2,1
	pop $2
	jmp l1223
l1226:
	push __sdb
	spushs
	push $2
	push 0
	spop $a
	call [$a],get
	push "func"
	cmpje
	cmp0
	je l1228
	push __sdb
	spushs
	push $2
	push 1
	spop $a
	call [$a],get
	push $2
	call __mp,add
l1228:
	jmp l1225
l1224:
	push "init"
	cthis call
	end method
	method get
	localstring $1
	pop $1
	push $1
	popax
	mov $a,[$a]
	psax
	ret
	end method
	method isvar
	localstring $1
	pop $1
	push "$"
	call $1,contains
	ret
	end method
	method getvar
	localstring $1
	pop $1
	push 1
	call $1,strsubb
	pop $1
	push $1
	call engine,varexist
	neg
	cmp0
	je l1230
	push $1
	spushs
	spop $e
	new def,[$e]
l1230:
	push $1
	ret
	end method
	method isfunc
	localstring $1
	pop $1
	push "."
	call $1,contains
	cmp0
	je l1231
	push $1
	call __csc,isreal
	neg
	jmp l1233
l1231:
	push 0
	jmp l1233
l1232:
	push 1
l1233:
	ret
	end method
	method getfunc
	localstring $1
	pop $1
	call __vec,free
	push "."
	call $1,strgetto
	call __vec,add
	push "."
	call $1,strgetfrom
	call __vec,add
	end method
	method _get
	add __icol,1
	pop __icol
	push __sdb
	spushs
	push __irow
	push __icol
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],get
	ret
	end method
	method isnext
	push __icol
	push __sdb
	spushs
	push __irow
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1235
	push __sdb
	spushs
	push __irow
	push __icol
	spop $a
	call [$a],get
	pop __sreads
	push 1
	ret
l1235:
	push 0
	ret
	end method
	method perror
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cmp0
	je l1237
	push "error: "
	push $2
	pop $b
	popax
	add $a,$b
	call engine,print
l1237:
	end method
	method interpcall
	localstring $1
	pop $1
	push $1
	cthis getfunc
	localstring $2
	push 0
	call __vec,get
	pop $2
	push 0
	push 1
	call $2,getb
	push "*"
	cmpje
	cmp0
	je l1239
	push 1
	call $2,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1239:
	localstring $3
	push 1
	call __vec,get
	pop $3
	push 0
	push 1
	call $3,getb
	push "*"
	cmpje
	cmp0
	je l1241
	push 1
	call $3,strsubb
	popax
	mov $a,[$a]
	psax
	pop $2
l1241:
	call __vec,free
	add __icol,1
	pop __icol
	localstring $4
	cthis _get
	pop $4
l1242:
	push $4
	push ")"
	cmpjne
	cmp0
	je l1243
	push $4
	cthis getexpr
	cthis _get
	pop $4
	jmp l1242
l1243:
	push $2
	push "this"
	cmpje
	cmp0
	je l1245
	push "null"
	pop $2
l1245:
	push $2
	push $3
	cthis callfun
	end method
	method getvname
	localstring $1
	pop $1
	push $1
	cthis isvar
	cmp0
	je l1247
	push $1
	cthis getvar
	pop $1
	jmp l1246
l1247:
	push $1
	call __csc,isreal
	cmp0
	je l1249
	call $1,to_r
	pop __rarg
	push "__rarg"
	pop $1
	jmp l1248
l1249:
	push $1
	call __csc,isdigit
	cmp0
	je l1251
	push $1
	pop __iarg
	push "__iarg"
	pop $1
	jmp l1250
l1251:
	push $1
	call __csc,isstring
	cmp0
	je l1253
	push $1
	call __csc,getstring
	pop __sarg
	push "__sarg"
	pop $1
l1253:
l1250:
l1248:
l1246:
	push $1
	ret
	end method
	method isscriptfun
	localstring $1
	pop $1
	push "->"
	call $1,contains
	ret
	end method
	method getscriptfun
	localstring $1
	pop $1
	push 2
	call $1,strsubb
	ret
	end method
	method getexpr
	localstring $1
	pop $1
	push $1
	call __csc,isstring
	cmp0
	je l1255
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
	jmp l1254
l1255:
	push $1
	cthis isfunc
	cmp0
	je l1257
	push $1
	cthis interpcall
	jmp l1256
l1257:
	push $1
	cthis isscriptfun
	cmp0
	je l1259
	localint $2
	push __irow
	pop $2
	localint $3
	push __icol
	pop $3
	push $1
	cthis getscriptfun
	cthis call
	push $2
	pop __irow
	push $3
	pop __icol
	jmp l1258
l1259:
	push $1
	cthis getvname
	spushs
	spop $a
	call [$a],get
l1258:
l1256:
l1254:
	end method
	method cmp
	localint $1
	push 0
	pop $1
	localdef $2
	cthis _get
	cthis getexpr
	pop $2
	localstring $3
	cthis _get
	pop $3
	localdef $4
	cthis _get
	cthis getexpr
	pop $4
	push $3
	spushs
	push "=="
	cmpst
	jne l1261
	spop $a
	push $2
	push $4
	cmpje
	pop $1
	jmp l1260
l1261:
	push "!="
	cmpst
	jne l1262
	spop $a
	push $2
	push $4
	cmpjne
	pop $1
	jmp l1260
l1262:
	push "<"
	cmpst
	jne l1263
	spop $a
	push $2
	push $4
	cmpjl
	pop $1
	jmp l1260
l1263:
	push ">"
	cmpst
	jne l1264
	spop $a
	push $2
	push $4
	cmpja
	pop $1
	jmp l1260
l1264:
	push "<="
	cmpst
	jne l1265
	spop $a
	push $2
	push $4
	cmpjle
	pop $1
	jmp l1260
l1265:
	push ">="
	cmpst
	jne l1266
	spop $a
	push $2
	push $4
	cmpjae
	pop $1
	jmp l1260
l1266:
	spop $a
l1260:
	cthis _get
	pop $3
	push $3
	push "||"
	cmpje
	cmp0
	je l1268
	push $1
	cmp0
	jne l1270
	cthis cmp
	jmp l1271
l1269:
	push 0
	jmp l1271
l1270:
	push 1
l1271:
	ret
	jmp l1267
l1268:
	push $3
	push "&&"
	cmpje
	cmp0
	je l1273
	push $1
	cmp0
	je l1274
	cthis cmp
	jmp l1276
l1274:
	push 0
	jmp l1276
l1275:
	push 1
l1276:
	ret
	jmp l1272
l1273:
	push $1
	ret
l1272:
l1267:
	end method
	method containsfun
	localstring $1
	pop $1
	push $1
	call __mp,contains
	end method
	method call
	localstring $1
	pop $1
	push $1
	call __mp,contains
	neg
	cmp0
	je l1278
	ret
l1278:
	push $1
	call __mp,get
	pop __irow
	add __irow,1
	pop __irow
	push 0
	pop __icol
	localint $2
	push 1
	pop $2
	localint $3
	push 0
	pop $3
	localint $4
	localint $5
	push 0
	pop $5
	localint $6
	push 0
	pop $6
	localint $7
	localstring $8
	localstring $9
	localstring $10
	localint $11
	localint $12
	localint $13
l1279:
	push $2
	cmp0
	je l1280
	push 0
	pop __icol
	cthis _get
	pop $8
	push $8
	spushs
	push "new"
	cmpst
	jne l1282
	spop $a
	cthis _get
	pop $8
	cthis _get
	pop $9
	push 1
	call $9,strsubb
	pop $9
	cthis isnext
	cmp0
	je l1284
	push __sreads
	push "["
	cmpje
	cmp0
	je l1286
	add __icol,1
	pop __icol
	cthis _get
	pop $11
	push 0
	pop $12
l1287:
	push $12
	push $11
	cmpjl
	cmp0
	je l1288
	jmp l1290
l1289:
	add $12,1
	pop $12
	jmp l1287
l1290:
	push $8
	spushs
	push $9
	push $12
	pop $b
	popax
	add $a,$b
	spushs
	spop $e
	spop $d
	new [$d],[$e]
	jmp l1289
l1288:
	jmp l1285
l1286:
	add __icol,1
	pop __icol
l1291:
	cthis isnext
	cmp0
	je l1292
	push __sreads
	push ")"
	cmpjne
	jmp l1294
l1292:
	push 0
	jmp l1294
l1293:
	push 1
l1294:
	cmp0
	je l1295
	cthis _get
	cthis getexpr
	jmp l1291
l1295:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1285:
	jmp l1283
l1284:
	push $8
	spushs
	push $9
	spushs
	spop $e
	spop $d
	new [$d],[$e]
l1283:
	add __irow,1
	pop __irow
	jmp l1281
l1282:
	push "delete"
	cmpst
	jne l1296
	spop $a
	cthis _get
	cthis getvar
	spushs
	spop $d
	delete [$d]
	add __irow,1
	pop __irow
	jmp l1281
l1296:
	push $8
	push "if"
	cmpje
	cmp0
	jne l1298
	push $6
	cmp0
	jne l1298
	push $5
	jmp l1299
l1297:
	push 0
	jmp l1299
l1298:
	push 1
l1299:
	cmp0
	je l1301
	push $8
	jmp l1300
l1301:
	push ""
l1300:
	cmpst
	jne l1302
	spop $a
	add __icol,1
	pop __icol
	cthis cmp
	pop $4
	push $8
	push "if"
	cmpje
	cmp0
	je l1304
	push 1
	pop $3
l1304:
	push 0
	pop $6
	push 0
	pop $5
	add __irow,1
	pop __irow
	push $4
	neg
	cmp0
	je l1306
	push 1
	pop $12
l1307:
	push $12
	cmp0
	je l1308
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	pop $8
	push $8
	push "else"
	cmpje
	cmp0
	jne l1311
	push $8
	push "elif"
	cmpje
	cmp0
	jne l1311
	push $8
	push "fi"
	cmpje
	cmp0
	jne l1311
	push $8
	push "done"
	cmpje
	jmp l1312
l1310:
	push 0
	jmp l1312
l1311:
	push 1
l1312:
	cmp0
	je l1313
	push 0
	pop $12
	jmp l1309
l1313:
	add __irow,1
	pop __irow
l1309:
	jmp l1307
l1308:
l1306:
	jmp l1281
l1302:
	push "else"
	cmpst
	jne l1314
	spop $a
	push $3
	neg
	push "else without if"
	cthis perror
	add __irow,1
	pop __irow
	push $4
	cmp0
	je l1316
l1317:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1318
	add __irow,1
	pop __irow
	jmp l1317
l1318:
l1316:
	jmp l1281
l1314:
	push "fi"
	cmpst
	jne l1319
	spop $a
	push $3
	neg
	push "fi without if"
	cthis perror
	push 0
	pop $3
	push 0
	pop $4
	push 0
	pop $6
	add __irow,1
	pop __irow
	jmp l1281
l1319:
	push "elif"
	cmpst
	jne l1320
	spop $a
	push $4
	cmp0
	je l1322
	add __irow,1
	pop __irow
l1323:
	push __sdb
	spushs
	push __irow
	push 0
	spop $a
	call [$a],get
	push "fi"
	cmpjne
	cmp0
	je l1324
	add __irow,1
	pop __irow
	jmp l1323
l1324:
	jmp l1321
l1322:
	push 1
	pop $6
l1321:
	jmp l1281
l1320:
	push "end"
	cmpst
	jne l1325
	spop $a
	push 0
	pop $2
	jmp l1281
l1325:
	push "while"
	cmpst
	jne l1326
	spop $a
	push __irow
	pop $7
	push 1
	pop $5
	jmp l1281
l1326:
	push "done"
	cmpst
	jne l1327
	spop $a
	push $4
	cmp0
	je l1329
	push $7
	pop __irow
	jmp l1328
l1329:
	add __irow,1
	pop __irow
l1328:
	jmp l1281
l1327:
	push "print"
	cmpst
	jne l1330
	spop $a
	push ""
	pop $8
l1331:
	cthis isnext
	cmp0
	je l1332
	cthis _get
	cthis getexpr
	popax
	add $8,$a
	pop $8
	jmp l1331
l1332:
	push $8
	call engine,print
	add __irow,1
	pop __irow
	jmp l1281
l1330:
	push "return"
	cmpst
	jne l1333
	spop $a
	cthis isnext
	cmp0
	je l1335
	push __sreads
	cthis getexpr
l1335:
	ret
	jmp l1281
l1333:
	spop $a
	push "$"
	call $8,contains
	cmp0
	je l1337
	push $8
	cthis getvar
	pop $8
	add __icol,1
	pop __icol
	push $8
	spushs
	cthis _get
	cthis getexpr
	spop $b
	popax
	mov [$b],$a
l1338:
	cthis isnext
	cmp0
	je l1339
	add __icol,1
	pop __icol
	localdef $14
	cthis _get
	cthis getexpr
	pop $14
	push __sreads
	spushs
	push "+"
	cmpst
	jne l1341
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	add [$b],$a
	pop [$b]
	jmp l1340
l1341:
	push "-"
	cmpst
	jne l1342
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	sub [$b],$a
	pop [$b]
	jmp l1340
l1342:
	push "*"
	cmpst
	jne l1343
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	mul [$b],$a
	pop [$b]
	jmp l1340
l1343:
	push "/"
	cmpst
	jne l1344
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$a
	jmp l1340
l1344:
	push "%"
	cmpst
	jne l1345
	spop $a
	push $8
	spushs
	push $14
	popax
	spop $b
	div [$b],$a
	mov [$b],$d
	jmp l1340
l1345:
	spop $a
l1340:
	jmp l1338
l1339:
	jmp l1336
l1337:
	push $8
	cthis getexpr
l1336:
	add __irow,1
	pop __irow
l1281:
	push __irow
	push __sdb
	spushs
	spop $a
	call [$a],getrowsno
	cmpjae
	cmp0
	je l1347
	push 1
	push "function "
	push $1
	pop $b
	popax
	add $a,$b
	push " not finished!"
	pop $b
	popax
	add $a,$b
	cthis perror
	push 0
	pop $2
l1347:
	jmp l1279
l1280:
	end method
	end class

	method transparent
	push 0
	push 0
	push 0
	push 0
	ret
	end method
	method red
	push 255
	push 0
	push 0
	ret
	end method
	method green
	push 0
	push 255
	push 0
	ret
	end method
	method blue
	push 0
	push 0
	push 255
	ret
	end method
	method white
	push 255
	push 255
	push 255
	ret
	end method
	method black
	push 0
	push 0
	push 0
	ret
	end method
	method grey
	localint $1
	pop $1
	push $1
	push $1
	push $1
	ret
	end method
	method yellow
	push 255
	push 255
	push 0
	ret
	end method
	class Color
	method init
	push A
	push "r"
	push "g"
	push "b"
	push "a"
	cthis vars
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],get
	cthis set
	end method
	method img=
	localdef $1
	pop $1
	push $1
	spushs
	push $1
	clparent classansearcher,firstnotrx1y
	spop $a
	call [$a],getrgba
	pop a
	pop b
	pop g
	pop r
	end method
	method get
	push r
	push g
	push b
	push a
	ret
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop a
	pop b
	pop g
	pop r
	end method
	method rgb=
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	pop b
	pop g
	pop r
	end method
	method rgb
	push r
	push g
	push b
	ret
	end method
	method print
	push "Color::"
	cthis getname
	pop $b
	popax
	add $a,$b
	push " (r,g,b,a) = ("
	pop $b
	popax
	add $a,$b
	push r
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push g
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push b
	pop $b
	popax
	add $a,$b
	push ","
	pop $b
	popax
	add $a,$b
	push a
	pop $b
	popax
	add $a,$b
	push ")"
	pop $b
	popax
	add $a,$b
	call engine,print
	end method
	end class

	class classasker
	parent newvars
	method init
	clparent newvars,init
	new string,sfuncyes
	push "null"
	pop sfuncyes
	new string,sfuncno
	push "null"
	pop sfuncno
	new string,ssndask
	new string,ssndyes
	new string,ssndno
	new classsound,clsnd
	end method
	method reset
	push "null"
	pop sfuncyes
	push "null"
	pop sfuncno
	call buts,resetall
	end method
	method setfuncs
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop sfuncyes
	push $2
	pop sfuncno
	end method
	method fxonmovon
	localstring $1
	pop $1
	push $1
	call buts,sfxonmovon
	end method
	method setmouse
	localstring $1
	pop $1
	push "yes"
	push $1
	call buts,newmouse
	push "no"
	push $1
	call buts,newmouse
	end method
	method load
	localstring $1
	localint $2
	pop $2
	pop $1
	new classbutton,buts
	push $1
	push $2
	push "null"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call buts,disableall
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $4
	push $5
	cthis setfuncs
	push $1
	push $2
	push $3
	cthis ask2
	end method
	method ask2
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	pop ssndask
	push $2
	pop ssndyes
	push $3
	pop ssndno
	call gameapi,pause
	call buts,benableall
	push "bkg"
	call buts,pause
	call clsnd,creset
	push $1
	call clsnd,cbplay
	cthis getname
	push "_ask"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovon
	localstring $1
	pop $1
	push $1
	push "yes"
	cmpje
	cmp0
	je l1349
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndyes
	call clsnd,cbplay
	jmp l1348
l1349:
	push $1
	push "no"
	cmpje
	cmp0
	je l1351
	push ssndask
	spushs
	push 0
	spop $a
	call [$a],stop
	push ssndno
	call clsnd,cbplay
l1351:
l1348:
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "bkg"
	cmpje
	cmp0
	je l1353
	ret
l1353:
	call gameapi,resume
	call buts,disableall
	push 0
	call clsnd,cactsndstop
	push $1
	push "yes"
	cmpje
	cmp0
	je l1355
	push sfuncyes
	push "null"
	cmpjne
	jmp l1357
l1355:
	push 0
	jmp l1357
l1356:
	push 1
l1357:
	cmp0
	je l1358
	push sfuncyes
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_yes"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	jmp l1354
l1358:
	push $1
	push "no"
	cmpje
	cmp0
	je l1360
	push sfuncno
	push "null"
	cmpjne
	jmp l1362
l1360:
	push 0
	jmp l1362
l1361:
	push 1
l1362:
	cmp0
	je l1363
	push sfuncno
	spushs
	spop $d
	cthis [$d]
	cthis getname
	push "_no"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1363:
l1354:
	end method
	method disabled
	call buts,disabled
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	end class

	class classplacepointer
	method init
	new anima,anpointer
	push "onfinish"
	push "classplacepointer0"
	call anpointer,addmethod
	new int,_iz
	push 1000
	pop _iz
	end method
	method classplacepointer0
	push 1
	popax
	sub 0,$a
	cthis play
	end method
	method load
	localstring $1
	pop $1
	push $1
	call anpointer,load
	push _iz
	cthis setz
	call anpointer,hide
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop _iz
	push $1
	call anpointer,setz
	end method
	method stop
	push 0
	call anpointer,stop
	end method
	method stoph
	push 0
	call anpointer,stop
	call anpointer,hide
	end method
	method show
	localint $1
	localint $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,setpos
	push $3
	call anpointer,play
	end method
	method move
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	call anpointer,move
	end method
	method showob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	push $2
	cthis show
	end method
	method showpob
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	push $2
	cthis show
	end method
	end class

	class SimpleCounter
	method init
	localint $1
	pop $1
	push "length"
	push $1
	cthis var2
	new int,iid
	push 0
	pop iid
	end method
	method next
	push iid
	push 1
	pop $b
	popax
	add $a,$b
	push length
	pop $b
	popax
	div $a,$b
	push $d
	pop iid
	push iid
	end method
	method set
	localint $1
	pop $1
	push $1
	pop iid
	end method
	method reset
	push 0
	pop iid
	end method
	method get
	push iid
	end method
	end class

	module clstrdigit
	method init
	end method
	method getdigit
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	pop $3
l1364:
	call $3,length
	push $2
	cmpjl
	cmp0
	je l1365
	push "0"
	push $3
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l1364
l1365:
	push $3
	ret
	end method
	method gettime
	localint $1
	localstring $2
	pop $2
	pop $1
	push $1
	cthis geth
	push $1
	cthis getm
	push $1
	cthis gets
	push "h"
	call $2,contains
	push "m"
	call $2,contains
	push "s"
	call $2,contains
	cthis getstime
	ret
	end method
	method getstime
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $7
	push ""
	pop $7
	push $4
	cmp0
	je l1367
	push $1
	popax
	add $7,$a
	pop $7
l1367:
	push $5
	cmp0
	je l1369
	push $4
	cmp0
	je l1371
	push ":"
	jmp l1370
l1371:
	push ""
l1370:
	push $2
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1369:
	push $6
	cmp0
	je l1373
	push $4
	cmp0
	jne l1375
	push $5
	jmp l1376
l1374:
	push 0
	jmp l1376
l1375:
	push 1
l1376:
	cmp0
	je l1378
	push ":"
	jmp l1377
l1378:
	push ""
l1377:
	push $3
	push 2
	cthis getdigit
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
l1373:
	push $7
	ret
	end method
	method geth
	localint $1
	pop $1
	push $1
	push 3600
	pop $b
	popax
	div $a,$b
	psax
	ret
	end method
	method getm
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	psax
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method gets
	localint $1
	pop $1
	push $1
	push 60
	pop $b
	popax
	div $a,$b
	push $d
	ret
	end method
	method getns
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis gets
	push $2
	cthis getdigit
	ret
	end method
	method getnm
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	cthis getm
	push $2
	cthis getdigit
	ret
	end method
	method getbinary
	localint $1
	pop $1
	localstring $2
	push ""
	pop $2
l1379:
	push $1
	push 0
	cmpja
	cmp0
	je l1380
	push ""
	push $1
	push 2
	pop $b
	popax
	div $a,$b
	push $d
	pop $b
	popax
	add $a,$b
	push $2
	pop $b
	popax
	add $a,$b
	pop $2
	push 2
	popax
	div $1,$a
	mov $1,$a
	jmp l1379
l1380:
	push $2
	ret
	end method
	method bintohex
	localstring $1
	pop $1
	localstring $2
	call $1,length
	push 4
	pop $b
	popax
	div $a,$b
	push $d
	spushs
	push 3
	cmpst
	jne l1382
	spop $a
	push "0"
	jmp l1381
l1382:
	push 2
	cmpst
	jne l1383
	spop $a
	push "00"
	jmp l1381
l1383:
	push 1
	cmpst
	jne l1384
	spop $a
	push "000"
	jmp l1381
l1384:
	spop $a
	push ""
l1381:
	pop $2
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1385:
	push $3
	call $1,length
	cmpjl
	cmp0
	je l1386
	jmp l1388
l1387:
	push 4
	popax
	add $3,$a
	pop $3
	jmp l1385
l1388:
	push $3
	push 4
	call $1,getb
	spushs
	push "0000"
	cmpst
	jne l1390
	spop $a
	push "0"
	jmp l1389
l1390:
	push "0001"
	cmpst
	jne l1391
	spop $a
	push "1"
	jmp l1389
l1391:
	push "0010"
	cmpst
	jne l1392
	spop $a
	push "2"
	jmp l1389
l1392:
	push "0011"
	cmpst
	jne l1393
	spop $a
	push "3"
	jmp l1389
l1393:
	push "0100"
	cmpst
	jne l1394
	spop $a
	push "4"
	jmp l1389
l1394:
	push "0101"
	cmpst
	jne l1395
	spop $a
	push "5"
	jmp l1389
l1395:
	push "0110"
	cmpst
	jne l1396
	spop $a
	push "6"
	jmp l1389
l1396:
	push "0111"
	cmpst
	jne l1397
	spop $a
	push "7"
	jmp l1389
l1397:
	push "1000"
	cmpst
	jne l1398
	spop $a
	push "8"
	jmp l1389
l1398:
	push "1001"
	cmpst
	jne l1399
	spop $a
	push "9"
	jmp l1389
l1399:
	push "1010"
	cmpst
	jne l1400
	spop $a
	push "A"
	jmp l1389
l1400:
	push "1011"
	cmpst
	jne l1401
	spop $a
	push "B"
	jmp l1389
l1401:
	push "1100"
	cmpst
	jne l1402
	spop $a
	push "C"
	jmp l1389
l1402:
	push "1101"
	cmpst
	jne l1403
	spop $a
	push "D"
	jmp l1389
l1403:
	push "1110"
	cmpst
	jne l1404
	spop $a
	push "E"
	jmp l1389
l1404:
	push "1111"
	cmpst
	jne l1405
	spop $a
	push "F"
	jmp l1389
l1405:
	spop $a
l1389:
	popax
	add $2,$a
	pop $2
	jmp l1387
l1386:
	push $2
	end method
	end module

	method getbinary
	cthis get
	clparent clstrdigit,getbinary
	end method
	method getdigit
	localint $1
	pop $1
	cthis get
	push $1
	clparent clstrdigit,getdigit
	end method
	method getbindigit
	localint $1
	pop $1
	cthis getbinary
	push $1
	clparent clstrdigit,getdigit
	end method
	class Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1407
	push sgmfontfile
	pop $1
l1407:
	push ".ttf"
	call $1,contains
	cmp0
	je l1409
	new font,_fnt
	push $1
	push $2
	call _fnt,load
	push "_fnt"
	pop $1
l1409:
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new int,iFontSize
	push $2
	pop iFontSize
	new text,txt
	push $1
	call txt,setfont
	push $8
	call txt,setz
	push $6
	push $7
	call txt,setpos
	call txt,show
	new text,txtbg
	call txtbg,hide
	end method
	method hide
	call txt,hide
	end method
	method show
	call txt,show
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,setpos
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt,set
	push iR
	push iG
	push iB
	call txt,createtxt
	end method
	method get
	call txt,get
	ret
	end method
	method setbg
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	call txt,getpx
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getpy
	push iFontSize
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	sub $a,$b
	call txt,getw
	push iFontSize
	pop $b
	popax
	add $a,$b
	push iFontSize
	push 2
	pop $b
	popax
	mul $a,$b
	push $1
	push $2
	push $3
	push $4
	call txtbg,setbkg
	push 1
	push 255
	push 255
	push 255
	push 128
	call txtbg,setborders
	call txtbg,show
	end method
	method operator=
	localstring $1
	pop $1
	push $1
	cthis set
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call txt,move
	end method
	end class

	class Cypher
	parent Text
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push 0
	cthis set
	end method
	method add
	localint $1
	pop $1
	push $1
	cthis get
	pop $b
	popax
	add $a,$b
	cthis set
	end method
	method iget
	cthis get
	spushs
	spop $h
	call $h,to_i
	end method
	method operator+
	localint $1
	pop $1
	push $1
	cthis add
	end method
	method operator++
	push 1
	cthis add
	end method
	method operator--
	push 1
	popax
	sub 0,$a
	cthis add
	end method
	method operator-
	localint $1
	pop $1
	push $1
	popax
	sub 0,$a
	cthis add
	end method
	method operator=
	localint $1
	pop $1
	push $1
	cthis set
	end method
	method operator==
	localint $1
	pop $1
	cthis get
	push $1
	cmpje
	end method
	method operator!=
	localint $1
	pop $1
	cthis get
	push $1
	cmpjne
	end method
	method operator>
	localint $1
	pop $1
	cthis get
	push $1
	cmpja
	end method
	method operator<
	localint $1
	pop $1
	cthis get
	push $1
	cmpjl
	end method
	end class

	class SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	new string,sdigit
	push $1
	pop sdigit
	push A
	push "istarttime"
	push $2
	push "idtime"
	push $3
	push "itime"
	push 0
	cthis vars2
	cthis reset
	push "timcyk"
	push 1000
	push 1
	push "SecCounter0"
	cthis cnewtimerfin
	end method
	method SecCounter0
	cthis play
	cthis getbuildername
	spushs
	spop $a
	call [$a],tick
	end method
	method play
	call timcyk,play
	end method
	method stop
	push 0
	call timcyk,stop
	end method
	method sgettime
	push itime
	push sdigit
	call clstrdigit,gettime
	ret
	end method
	method gettime
	push itime
	ret
	end method
	method tick
	push idtime
	cthis update
	end method
	method reset
	push istarttime
	pop itime
	end method
	method update
	localint $1
	pop $1
	push $1
	popax
	add itime,$a
	pop itime
	end method
	end class

	class TextTimeCounter
	parent Text
	parent SecCounter
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localstring $9
	localint $10
	localint $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	clparent Text,init
	push $9
	push $10
	push $11
	clparent SecCounter,init
	cthis reset
	push 0
	cthis update
	end method
	method update
	localint $1
	pop $1
	push $1
	clparent SecCounter,update
	cthis sgettime
	cthis set
	push itime
	push 0
	cmpjle
	cmp0
	je l1411
	push idtime
	push 0
	cmpjl
	jmp l1413
l1411:
	push 0
	jmp l1413
l1412:
	push 1
l1413:
	cmp0
	je l1414
	cthis getname
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1414:
	end method
	end class

	class gfxObject
	method init
	localstring $1
	pop $1
	new string,sgfxobj
	push $1
	pop sgfxobj
	end method
	method setpos
	push sgfxobj
	spushs
	spop $a
	call [$a],setpos
	end method
	method move
	push sgfxobj
	spushs
	spop $a
	call [$a],move
	end method
	method getpos
	push sgfxobj
	spushs
	spop $a
	call [$a],getpos
	end method
	method getposx
	push sgfxobj
	spushs
	spop $a
	call [$a],getposx
	end method
	method getposy
	push sgfxobj
	spushs
	spop $a
	call [$a],getposy
	end method
	method getpx
	push sgfxobj
	spushs
	spop $a
	call [$a],getpx
	end method
	method getpy
	push sgfxobj
	spushs
	spop $a
	call [$a],getpy
	end method
	method getw
	push sgfxobj
	spushs
	spop $a
	call [$a],getw
	end method
	method geth
	push sgfxobj
	spushs
	spop $a
	call [$a],geth
	end method
	method getcx
	push sgfxobj
	spushs
	spop $a
	call [$a],getcx
	end method
	method getcy
	push sgfxobj
	spushs
	spop $a
	call [$a],getcy
	end method
	method getex
	push sgfxobj
	spushs
	spop $a
	call [$a],getex
	end method
	method getey
	push sgfxobj
	spushs
	spop $a
	call [$a],getey
	end method
	method lodx
	push sgfxobj
	spushs
	spop $a
	call [$a],lodx
	end method
	method lody
	push sgfxobj
	spushs
	spop $a
	call [$a],lody
	end method
	method setz
	push sgfxobj
	spushs
	spop $a
	call [$a],setz
	end method
	method getz
	push sgfxobj
	spushs
	spop $a
	call [$a],getz
	end method
	method show
	push sgfxobj
	spushs
	spop $a
	call [$a],show
	end method
	method hide
	push sgfxobj
	spushs
	spop $a
	call [$a],hide
	end method
	method isvisible
	push sgfxobj
	spushs
	spop $a
	call [$a],isvisible
	end method
	method isin
	push sgfxobj
	spushs
	spop $a
	call [$a],isin
	end method
	end class

	class gfxSquare
	parent Color
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent Color,init
	push A
	push "w"
	push "h"
	cthis vars
	push $3
	pop w
	push $4
	pop h
	new img,imggfx
	push $1
	push $2
	call imggfx,setpos
	push "imggfx"
	clparent gfxObject,init
	end method
	method build
	push w
	push h
	push r
	push g
	push b
	push a
	call imggfx,create
	end method
	method shadow
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localdef $4
	localdef $5
	call imggfx,getpos
	pop $5
	pop $4
	push 0
	push 0
	call imggfx,setpos
	new img,_img1
	new img,_img2
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1416
	push w
	push h
	cthis transparent
	call _img1,create
	push "imggfx"
	call _img1,blit
	jmp l1415
l1416:
	push w
	push h
	cthis get
	call _img1,create
l1415:
	push w
	push h
	cthis black
	push $3
	call _img2,create
	push $1
	push 0
	cmpjl
	cmp0
	je l1418
	push $1
	popax
	sub 0,$a
	push 0
	call _img1,move
	push $1
	popax
	add $4,$a
	pop $4
	jmp l1417
l1418:
	push $1
	push 0
	call _img2,move
l1417:
	push $2
	push 0
	cmpjl
	cmp0
	je l1420
	push 0
	push $2
	popax
	sub 0,$a
	call _img1,move
	push $2
	popax
	add $5,$a
	pop $5
	jmp l1419
l1420:
	push 0
	push $2
	call _img2,move
l1419:
	call $1,abs
	popax
	add w,$a
	pop w
	call $2,abs
	popax
	add h,$a
	pop h
	push w
	push h
	cthis transparent
	call imggfx,create
	push "_img2"
	call imggfx,blit
	push "_img1"
	call imggfx,blit
	delete _img1
	delete _img2
	push $4
	push $5
	call imggfx,move
	end method
	method blackborder
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $1
	cthis black
	push $2
	cthis border
	end method
	method border
	localint $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $7
	localdef $8
	call imggfx,getpos
	pop $8
	pop $7
	push 0
	push 0
	call imggfx,setpos
	new img,_img
	call imggfx,getw
	push 0
	cmpja
	cmp0
	je l1422
	push w
	push h
	cthis transparent
	call _img,create
	push "imggfx"
	call _img,blit
	jmp l1421
l1422:
	push w
	push h
	cthis get
	call _img,create
l1421:
	push $1
	push $2
	call _img,move
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add w,$a
	pop w
	push 2
	push $1
	pop $b
	popax
	mul $a,$b
	popax
	add h,$a
	pop h
	push w
	push h
	push $3
	push $4
	push $5
	push $6
	call imggfx,create
	push "_img"
	call imggfx,blit
	delete _img
	push $7
	push $8
	call imggfx,move
	end method
	end class

	class Rect
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push A
	push "x"
	push "y"
	push "w"
	push "h"
	cthis vars
	push $1
	push $2
	push $3
	push $4
	cthis set
	new vector,vecgr
	push "string"
	call vecgr,type
	push "gmimgvec"
	call vecgr,add
	end method
	method x2
	push x
	push w
	pop $b
	popax
	add $a,$b
	end method
	method y2
	push y
	push h
	pop $b
	popax
	add $a,$b
	end method
	method set
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	pop x
	push $2
	pop y
	push $3
	pop w
	push $4
	pop h
	end method
	method fit
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],gettype
	call vecgr,contains
	cmp0
	je l1424
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],_getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1426
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1426:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],_getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1428
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1428:
	jmp l1423
l1424:
	localdef $2
	push x
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpja
	cmp0
	je l1430
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1430:
	localdef $3
	push y
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpja
	cmp0
	je l1432
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1432:
l1423:
	cthis x2
	push $1
	spushs
	spop $a
	call [$a],getex
	pop $b
	popax
	sub $a,$b
	pop $2
	push $2
	push 0
	cmpjl
	cmp0
	je l1434
	push $1
	spushs
	push $2
	push 0
	spop $a
	call [$a],move
l1434:
	cthis y2
	push $1
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	pop $3
	push $3
	push 0
	cmpjl
	cmp0
	je l1436
	push $1
	spushs
	push 0
	push $3
	spop $a
	call [$a],move
l1436:
	end method
	method fitrand
	localstring $1
	pop $1
	push $1
	spushs
	push x
	push w
	push $1
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	push y
	push h
	push $1
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	spushs
	spop $h
	call $h,rand
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],ansetbpos
	end method
	method fitgrouprand
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1437:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1438
	jmp l1440
l1439:
	add $2,1
	pop $2
	jmp l1437
l1440:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fitrand
	jmp l1439
l1438:
	end method
	method fitgroup
	localstring $1
	pop $1
	localint $2
	push 0
	pop $2
l1441:
	push $2
	push $1
	spushs
	spop $a
	call [$a],size
	cmpjl
	cmp0
	je l1442
	jmp l1444
l1443:
	add $2,1
	pop $2
	jmp l1441
l1444:
	push $1
	spushs
	push $2
	spop $a
	call [$a],get
	cthis fit
	jmp l1443
l1442:
	end method
	end class

	class classfadeinout
	method init
	new timer,timf
	new string,_sob
	new int,_istep
	new int,_ival
	new int,_ib1
	new int,_ib2
	new string,_sfun
	new string,_sfunfin
	new string,_sobfin
	push "onfinish"
	push "_ctimffin"
	call timf,addmethod
	end method
	method _cfinito
	localint $1
	pop $1
	push _sob
	spushs
	push _sfun
	spushs
	push $1
	spop $d
	spop $a
	call [$a],[$d]
	push _sfunfin
	push "null"
	cmpjne
	cmp0
	je l1446
	push _sobfin
	push "null"
	cmpje
	cmp0
	je l1448
	push _sfunfin
	spushs
	spop $d
	cthis [$d]
	jmp l1447
l1448:
	push _sobfin
	spushs
	push _sfunfin
	spushs
	spop $d
	spop $a
	call [$a],[$d]
l1447:
l1446:
	end method
	method _ctimffin
	push _istep
	popax
	add _ival,$a
	pop _ival
	push _ival
	push _ib2
	cmpja
	cmp0
	je l1450
	push _ib2
	cthis _cfinito
	jmp l1449
l1450:
	push _ival
	push _ib1
	cmpjl
	cmp0
	je l1452
	push _ib1
	cthis _cfinito
	jmp l1451
l1452:
	push _sob
	spushs
	push _sfun
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	cthis play
l1451:
l1449:
	end method
	method _play
	localint $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localint $6
	localstring $7
	localstring $8
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $7
	pop _sobfin
	push $8
	pop _sfunfin
	push $5
	pop _ib1
	push $6
	pop _ib2
	localint $9
	call $2,abs
	pop $9
	push $1
	push 0
	cmpjle
	cmp0
	jne l1455
	push $9
	push $5
	cmpje
	cmp0
	jne l1455
	push $9
	push $6
	cmpja
	jmp l1456
l1454:
	push 0
	jmp l1456
l1455:
	push 1
l1456:
	cmp0
	je l1457
	ret
l1457:
	push $4
	pop _sfun
	push $1
	call timf,setcycle
	push $3
	pop _sob
	push $2
	push 0
	cmpja
	cmp0
	je l1459
	push _ib1
	pop _ival
	jmp l1458
l1459:
	push $2
	push 0
	cmpjl
	cmp0
	je l1461
	push _ib2
	pop _ival
	jmp l1460
l1461:
	ret
l1460:
l1458:
	push $3
	spushs
	push $4
	spushs
	push _ival
	spop $d
	spop $a
	call [$a],[$d]
	push $2
	pop _istep
	call timf,play
	end method
	method imgtransparency
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "transparency"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method setopacity
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setopacity"
	push 0
	push 255
	push "null"
	push $4
	cthis _play
	end method
	method sndvolume
	localint $1
	localint $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push "setvol"
	push 0
	push 100
	push "null"
	push $4
	cthis _play
	end method
	method isplaying
	call timf,isplaying
	end method
	end class

	class CutScene
	parent gfxObject
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	new int,X1
	new int,Y1
	new int,X2
	new int,Y2
	new img,_gsq
	push $1
	push $2
	push $3
	push $4
	cthis build
	push "_gsq"
	clparent gfxObject,init
	new string,_sfunc1
	new string,_sob1
	new string,_sfunc2
	new string,_sob2
	new int,_idelay
	push 10
	pop _idelay
	new classfadeinout,_clfio
	end method
	method build
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	pop Y2
	pop X2
	pop Y1
	pop X1
	push X2
	push X1
	pop $b
	popax
	sub $a,$b
	push Y2
	push Y1
	pop $b
	popax
	sub $a,$b
	cthis black
	push 255
	call _gsq,create
	push X1
	push Y1
	call _gsq,setpos
	call _gsq,hide
	push 0
	call _gsq,transparency
	end method
	method delay
	localint $1
	pop $1
	push $1
	pop _idelay
	end method
	method transparency
	localint $1
	pop $1
	push $1
	call _gsq,transparency
	end method
	method playfin
	localstring $1
	localstring $2
	pop $2
	pop $1
	push "null"
	push $1
	push "null"
	push $2
	cthis playobfin
	end method
	method playobfin
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push "null"
	cmpje
	cmp0
	je l1463
	call gameapi,getgamename
	jmp l1462
l1463:
	push $1
l1462:
	pop _sob1
	push $2
	pop _sfunc1
	push $3
	push "null"
	cmpje
	cmp0
	je l1465
	call gameapi,getgamename
	jmp l1464
l1465:
	push $3
l1464:
	pop _sob2
	push $4
	pop _sfunc2
	call _gsq,show
	push 0
	call _gsq,transparency
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene0"
	call _clfio,_play
	end method
	method CutScene0
	push _sob1
	push _sfunc1
	cthis callfun
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method close
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obclose
	end method
	method obclose
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob1
	push $2
	pop _sfunc1
	push 0
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "CutScene1"
	call _clfio,_play
	end method
	method CutScene1
	call _gsq,hide
	push _sob1
	push _sfunc1
	cthis callfun
	end method
	method enter
	localstring $1
	pop $1
	call gameapi,getgamename
	push $1
	cthis obenter
	end method
	method obenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob2
	push $2
	pop _sfunc2
	push 255
	call _gsq,transparency
	call _gsq,show
	push 1
	push _idelay
	popax
	sub 0,$a
	cthis getname
	push "transparency"
	push 0
	push 255
	cthis getname
	push "_callfun2"
	call _clfio,_play
	end method
	method _callfun2
	call _gsq,hide
	push _sob2
	push _sfunc2
	cthis callfun
	end method
	method isplaying
	call _clfio,isplaying
	end method
	method show
	push 255
	call _gsq,transparency
	call _gsq,show
	end method
	end class

	method allchars
	push "a0 t_!@#$%^&*()_+-=[]\\|}{;':\",./<>?`~"
	end method
	class TextTyper
	parent classlocker
	parent gfxObject
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localstring $6
	localint $7
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	push $1
	push $2
	cthis checkfont
	pop $1
	new int,iR
	push $3
	pop iR
	new int,iG
	push $4
	pop iG
	new int,iB
	push $5
	pop iB
	new string,sChars
	push $6
	pop sChars
	new int,iLimit
	push $7
	pop iLimit
	push A
	push "Sdir"
	push "left"
	push "W"
	push 0
	push "iFontSize"
	push $2
	push "X"
	push 0
	push "Y"
	push 0
	cthis vars2
	new text,txt1
	push $1
	call txt1,setfont
	push ""
	call txt1,set
	new text,txt2
	push $1
	call txt2,setfont
	push "_"
	call txt2,set
	push iR
	push iG
	push iB
	call txt2,createtxt
	call txt2,hide
	new text,txtpass
	push $1
	call txtpass,setfont
	call txtpass,hide
	new int,bpass
	push 0
	pop bpass
	new string,_sob
	push "null"
	pop _sob
	new string,_sfun
	push "null"
	pop _sfun
	push "timcyk"
	push 300
	push 1
	push "fintimcyk"
	cthis cnewtimerfin
	push "txt1"
	clparent gfxObject,init
	end method
	method setaspasswd
	push 1
	pop bpass
	call txt1,hide
	call txt1,getz
	call txtpass,setz
	call txtpass,show
	cthis copytopass
	end method
	method copytopass
	localdef $1
	call txt1,get
	spushs
	spop $h
	call $h,length
	pop $1
	localstring $2
	push ""
	pop $2
	localint $3
	push 0
	pop $3
l1466:
	push $3
	push $1
	cmpjl
	cmp0
	je l1467
	jmp l1469
l1468:
	add $3,1
	pop $3
	jmp l1466
l1469:
	push "*"
	popax
	add $2,$a
	pop $2
	jmp l1468
l1467:
	push $2
	call txtpass,txtset
	call txt1,getpx
	call txt1,getpy
	call txtpass,setpos
	end method
	method setastext
	push 0
	pop bpass
	call txt1,show
	call txtpass,hide
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,isin
	end method
	method getcol
	push iR
	push iG
	push iB
	ret
	end method
	method fintimcyk
	cthis getlock
	cmp0
	je l1471
	ret
l1471:
	cthis updatecyk
	cthis play
	end method
	method updatecyk
	call txt2,isvisible
	cmp0
	je l1473
	call txt2,hide
	jmp l1472
l1473:
	call txt1,getex
	call txt1,getpy
	call txt2,setpos
	call txt2,show
l1472:
	end method
	method enable
	cthis unlock
	cthis updatecyk
	call timcyk,play
	end method
	method disable
	call txt2,hide
	push 0
	call timcyk,stop
	cthis lock
	end method
	method onenter
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	pop _sob
	push $2
	pop _sfun
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	pop X
	push $2
	pop Y
	cthis get
	cthis updatetxt
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push X
	push $1
	pop $b
	popax
	add $a,$b
	push Y
	push $2
	pop $b
	popax
	add $a,$b
	cthis setpos
	end method
	method setz
	localint $1
	pop $1
	push $1
	call txt1,setz
	push $1
	call txt2,setz
	end method
	method get
	localstring $1
	call txt1,get
	pop $1
	call $1,length
	push 0
	cmpja
	cmp0
	je l1475
	push $1
	jmp l1474
l1475:
	push ""
l1474:
	end method
	method getpx
	call txt1,getpx
	end method
	method getpy
	call txt1,getpy
	end method
	method getcx
	call txt1,getcx
	end method
	method getcy
	call txt1,getcy
	end method
	method geth
	call txt1,geth
	end method
	method getey
	call txt1,getpy
	push iFontSize
	pop $b
	popax
	add $a,$b
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call txt1,clip
	push $1
	push $2
	push $3
	push $4
	call txt2,clip
	end method
	method length
	call txt1,get
	spushs
	spop $h
	call $h,length
	end method
	method set
	localstring $1
	pop $1
	push $1
	call txt1,set
	end method
	method txtset
	localstring $1
	pop $1
	push $1
	cthis getcol
	call txt1,txtsetcol
	end method
	method limit=
	localint $1
	pop $1
	push $1
	pop iLimit
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1477
	ret
l1477:
	cthis getname
	push "_ontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1479
	cthis disable
	push _sob
	push _sfun
	cthis callfun
	cthis getname
	push "_onenter"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	ret
l1479:
	localstring $1
	push "t"
	call sChars,contains
	cmp0
	je l1481
	push "tab"
	call keyboard,iskey
	jmp l1483
l1481:
	push 0
	jmp l1483
l1482:
	push 1
l1483:
	cmp0
	je l1484
	push " "
	pop $1
	jmp l1480
l1484:
	call keyboard,getkey
	pop $1
l1480:
	localstring $2
	call txt1,get
	pop $2
	call keyboard,isalpha
	cmp0
	je l1486
	push "a"
	call sChars,contains
	jmp l1488
l1486:
	push 0
	jmp l1488
l1487:
	push 1
l1488:
	cmp0
	jne l1490
	call keyboard,isdigit
	cmp0
	je l1491
	push "0"
	call sChars,contains
	jmp l1493
l1491:
	push 0
	jmp l1493
l1492:
	push 1
l1493:
	cmp0
	jne l1490
	push $1
	call sChars,contains
	jmp l1494
l1489:
	push 0
	jmp l1494
l1490:
	push 1
l1494:
	cmp0
	je l1495
	push iLimit
	push 0
	cmpjle
	cmp0
	jne l1498
	push iLimit
	call $2,length
	cmpja
	jmp l1499
l1497:
	push 0
	jmp l1499
l1498:
	push 1
l1499:
	jmp l1500
l1495:
	push 0
	jmp l1500
l1496:
	push 1
l1500:
	cmp0
	je l1501
	push $2
	push $1
	pop $b
	popax
	add $a,$b
	cthis updatetxt
	cthis updatecyk
	jmp l1485
l1501:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1503
	call $2,length
	push 0
	cmpja
	jmp l1505
l1503:
	push 0
	jmp l1505
l1504:
	push 1
l1505:
	cmp0
	je l1506
	push 1
	call $2,strsube
	cthis updatetxt
	cthis updatecyk
l1506:
l1485:
	cthis getname
	push "_ontyped"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method updatetxt
	localstring $1
	pop $1
	push $1
	call txt1,set
	push iR
	push iG
	push iB
	call txt1,createtxt
	push Sdir
	push "center"
	cmpje
	cmp0
	je l1508
	push X
	push W
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	pop $b
	popax
	add $a,$b
	push Y
	call txt1,setpos
	jmp l1507
l1508:
	push Sdir
	push "right"
	cmpje
	cmp0
	je l1510
	push X
	push W
	pop $b
	popax
	add $a,$b
	call txt1,getw
	pop $b
	popax
	sub $a,$b
	push Y
	call txt1,setpos
	jmp l1509
l1510:
	push X
	push Y
	call txt1,setpos
l1509:
l1507:
	push bpass
	cmp0
	je l1512
	cthis copytopass
l1512:
	cthis getname
	push "_onwrite"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end class

	class ConTextTyper
	parent TextTyper
	parent ObjController
	method init
	clparent TextTyper,init
	clparent ObjController,init
	end method
	end class

	new string,sTextBoxTyperSys
	push "null"
	pop sTextBoxTyperSys
	class TextBoxTyper
	parent LObjController
	parent ImagePos
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent LObjController,init
	clparent ImagePos,init
	new def,Font
	push $1
	push $2
	cthis checkfont
	pop Font
	push A
	push "Cols"
	push $10
	push $3
	pop $b
	popax
	div $a,$b
	psax
	push "Rows"
	push $11
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	div $a,$b
	psax
	push "X"
	push $8
	push "Y"
	push $9
	push "Row"
	push 0
	push "enablemove"
	push 1
	push "W"
	push $10
	push "insystem"
	push 0
	push "H"
	push $11
	push "isvisible"
	push 1
	push "clipx1"
	push $8
	push "clipy1"
	push $9
	push "clipx2"
	push 0
	push "clipy2"
	push 0
	push "clipped"
	push 0
	cthis vars2
	new def,Size
	push $2
	pop Size
	new def,Dy
	push $12
	pop Dy
	new def,Z
	push 0
	pop Z
	localstring $13
	new gmimgvec,grtt
	new gmimgvec,gren
	localint $14
	push 0
	pop $14
l1513:
	push $14
	push Rows
	cmpjl
	cmp0
	je l1514
	jmp l1516
l1515:
	add $14,1
	pop $14
	jmp l1513
l1516:
	push "tt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $13
	push $13
	spushs
	push Font
	push $2
	push $4
	push $5
	push $6
	push $7
	push Cols
	spop $e
	new TextTyper,[$e]
	push $13
	spushs
	push $10
	spop $a
	call [$a],W=
	push $13
	spushs
	push "left"
	spop $a
	call [$a],Sdir=
	push $13
	spushs
	push $8
	push $9
	push $14
	push $2
	push $12
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $13
	call grtt,add
	jmp l1515
l1514:
	end method
	method settyper
	localint $1
	localstring $2
	localint $3
	localint $4
	localint $5
	localint $6
	localint $7
	localstring $8
	localstring $9
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	localint $10
	localint $11
	localstring $12
	localstring $13
	push ""
	pop $13
	push $1
	push 0
	cmpjl
	cmp0
	je l1518
	call grtt,last
	spushs
	spop $a
	call [$a],X
	pop $10
	call grtt,last
	spushs
	spop $a
	call [$a],getey
	push Dy
	pop $b
	popax
	add $a,$b
	pop $11
	call grtt,size
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	call grtt,add
	jmp l1517
l1518:
	push $1
	call grtt,get
	pop $12
	push $12
	spushs
	spop $a
	call [$a],X
	pop $10
	push $12
	spushs
	spop $a
	call [$a],getpy
	pop $11
	push $12
	spushs
	spop $a
	call [$a],get
	pop $13
	push $12
	push 0
	push $3
	push $12
	spushs
	spop $a
	call [$a],iFontSize
	pop $b
	popax
	sub $a,$b
	call grtt,movefrom
	push $12
	spushs
	spop $d
	delete [$d]
l1517:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	push $2
	push $3
	push $5
	push $6
	push $7
	push $8
	push W
	push $4
	pop $b
	popax
	div $a,$b
	psax
	spop $e
	new TextTyper,[$e]
	push $12
	spushs
	push W
	spop $a
	call [$a],W=
	push $12
	spushs
	push $9
	spop $a
	call [$a],Sdir=
	push $12
	spushs
	push $13
	spop $a
	call [$a],updatetxt
	push $12
	spushs
	push Z
	spop $a
	call [$a],setz
	push $12
	spushs
	push $10
	push $11
	spop $a
	call [$a],setpos
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grtt,move
	push $1
	push $2
	call gren,move
	push $1
	popax
	add X,$a
	pop X
	push $2
	popax
	add Y,$a
	pop Y
	end method
	method size
	call grtt,size
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtt,setz
	push $1
	call gren,setz
	end method
	method getz
	push Z
	end method
	method show
	push 1
	pop isvisible
	call grtt,show
	end method
	method hide
	push 0
	pop isvisible
	call grtt,hide
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push 1
	pop clipped
	push $1
	pop clipx1
	push $2
	pop clipy1
	push $3
	pop clipx2
	push $4
	pop clipy2
	localint $5
	push 0
	pop $5
l1519:
	push $5
	call grtt,size
	cmpjl
	cmp0
	je l1520
	jmp l1522
l1521:
	add $5,1
	pop $5
	jmp l1519
l1522:
	push $5
	call grtt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l1521
l1520:
	end method
	method getw
	push W
	end method
	method geth
	push H
	end method
	method enumerate
	localint $1
	pop $1
	localstring $2
	localstring $3
	localint $4
	push 0
	pop $4
l1523:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1524
	jmp l1526
l1525:
	add $4,1
	pop $4
	jmp l1523
l1526:
	push "txte"
	push $4
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new text,[$e]
	push $2
	call gren,add
	push $2
	spushs
	push Z
	spop $a
	call [$a],setz
	push $2
	spushs
	push Font
	spop $a
	call [$a],setfont
	push $2
	spushs
	push ""
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	call tt0,getcol
	spop $a
	call [$a],txtsetcol
	push $2
	spushs
	push X
	push $2
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $1
	pop $b
	popax
	sub $a,$b
	push Y
	push $4
	push Size
	push Dy
	pop $b
	popax
	add $a,$b
	pop $b
	popax
	mul $a,$b
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	jmp l1525
l1524:
	end method
	method cut
	localint $1
	pop $1
	push $1
	pop Rows
	end method
	method enable
	cthis unlock
	cthis activateact
	end method
	method disable
	cthis lock
	push "disable"
	call grtt,eval
	end method
	method actual
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	end method
	method activate
	localint $1
	pop $1
	cthis unlock
	push $1
	push 0
	cmpjae
	cmp0
	je l1528
	push $1
	push Rows
	cmpjl
	jmp l1530
l1528:
	push 0
	jmp l1530
l1529:
	push 1
l1530:
	cmp0
	je l1531
	push insystem
	cmp0
	je l1533
	push GAME
	spushs
	push sTextBoxTyperSys
	spop $a
	call [$a],isgmobj
	cmp0
	je l1535
	push sTextBoxTyperSys
	cthis getname
	cmpjne
	jmp l1537
l1535:
	push 0
	jmp l1537
l1536:
	push 1
l1537:
	cmp0
	je l1538
	push sTextBoxTyperSys
	spushs
	spop $a
	call [$a],deactivate
l1538:
	cthis getname
	pop sTextBoxTyperSys
l1533:
	cthis deactivate
	push $1
	pop Row
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],enable
	cthis getname
	push "_activate"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1531:
	end method
	method activateact
	push Row
	cthis activate
	end method
	method deactivate
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],disable
	end method
	method onkeydown
	cthis getlock
	cmp0
	je l1540
	ret
l1540:
	cthis getname
	push "_boxontype"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "enter"
	call keyboard,iskeydown
	cmp0
	je l1542
	localdef $1
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	pop $1
	call $1,clear
	call $1,length
	push 0
	cmpje
	cmp0
	je l1544
	push enablemove
	jmp l1546
l1544:
	push 0
	jmp l1546
l1545:
	push 1
l1546:
	cmp0
	je l1547
	localdef $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	pop $2
l1548:
	push $2
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cmpja
	cmp0
	je l1549
	jmp l1551
l1550:
	sub $2,1
	pop $2
	jmp l1548
l1551:
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1550
l1549:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	push Rows
	cmpjl
	cmp0
	je l1553
	push ""
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis setid
l1553:
l1547:
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1541
l1542:
	push "up"
	call keyboard,iskey
	cmp0
	je l1555
	push Row
	push 0
	cmpja
	jmp l1557
l1555:
	push 0
	jmp l1557
l1556:
	push 1
l1557:
	cmp0
	je l1558
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1554
l1558:
	push "down"
	call keyboard,iskey
	cmp0
	je l1560
	push Row
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	jmp l1562
l1560:
	push 0
	jmp l1562
l1561:
	push 1
l1562:
	cmp0
	je l1563
	push Row
	push 1
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1559
l1563:
	push "pgdown"
	call keyboard,iskey
	cmp0
	je l1565
	push Row
	push Rows
	push 10
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1567
	push Row
	push 10
	pop $b
	popax
	add $a,$b
	cthis activate
	jmp l1566
l1567:
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1566:
	jmp l1564
l1565:
	push "pgup"
	call keyboard,iskey
	cmp0
	je l1569
	push Row
	push 9
	cmpja
	cmp0
	je l1571
	push Row
	push 10
	pop $b
	popax
	sub $a,$b
	cthis activate
	jmp l1570
l1571:
	push 0
	cthis activate
l1570:
	jmp l1568
l1569:
	push "backspace"
	call keyboard,iskey
	cmp0
	jne l1574
	push "delete"
	call keyboard,iskey
	jmp l1575
l1573:
	push 0
	jmp l1575
l1574:
	push 1
l1575:
	cmp0
	je l1576
	cthis actual
	spushs
	spop $a
	call [$a],length
	push 0
	cmpje
	jmp l1578
l1576:
	push 0
	jmp l1578
l1577:
	push 1
l1578:
	cmp0
	je l1579
	push enablemove
	cmp0
	je l1581
	localdef $2
	push Row
	pop $2
l1582:
	push $2
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cmpjl
	cmp0
	je l1583
	jmp l1585
l1584:
	add $2,1
	pop $2
	jmp l1582
l1585:
	push $2
	push 1
	pop $b
	popax
	add $a,$b
	cthis getid
	push $2
	cthis setid
	jmp l1584
l1583:
	push ""
	push Rows
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setid
l1581:
	push "backspace"
	call keyboard,iskey
	cmp0
	je l1587
	push Row
	push 1
	pop $b
	popax
	sub $a,$b
	cthis activate
l1587:
	jmp l1572
l1579:
	push "onkeydown"
	call grtt,eval
l1572:
l1568:
l1564:
l1559:
l1554:
l1541:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1589
	ret
l1589:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push clipped
	cmp0
	je l1591
	push $1
	push $2
	push clipx1
	push clipy1
	push clipx2
	push clipy2
	call clsurf,isin
	jmp l1593
l1591:
	push 0
	jmp l1593
l1592:
	push 1
l1593:
	cmp0
	jne l1595
	push clipped
	neg
	cmp0
	je l1596
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	jmp l1598
l1596:
	push 0
	jmp l1598
l1597:
	push 1
l1598:
	jmp l1599
l1594:
	push 0
	jmp l1599
l1595:
	push 1
l1599:
	cmp0
	je l1600
	cthis deactivate
	localint $3
	push 0
	pop $3
l1601:
	push $3
	cthis size
	cmpjl
	cmp0
	je l1602
	jmp l1604
l1603:
	add $3,1
	pop $3
	jmp l1601
l1604:
	push "tt"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getey
	push $2
	cmpja
	cmp0
	je l1606
	push $3
	cthis activate
	ret
l1606:
	jmp l1603
l1602:
	jmp l1590
l1600:
	cthis getname
	push "_OUTSIDE"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1590:
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $3
	cmp0
	je l1608
	push isvisible
	neg
	jmp l1610
l1608:
	push 0
	jmp l1610
l1609:
	push 1
l1610:
	cmp0
	je l1611
	push 0
	ret
l1611:
	push $1
	push $2
	push X
	push Y
	push W
	push H
	call clsurf,isin2
	end method
	method getid
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method getact
	push "tt"
	push Row
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	end method
	method idpx
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpx
	end method
	method idpy
	localint $1
	pop $1
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],getpy
	end method
	method getpx
	push X
	end method
	method getpy
	push Y
	end method
	method get
	push 0
	cthis getfrom
	end method
	method getfrom
	localint $1
	pop $1
	push $1
	push ""
	cthis getlinesfrom
	end method
	method getlinesfrom
	localint $1
	localstring $2
	pop $2
	pop $1
	localstring $3
	push ""
	pop $3
	localint $4
	push $1
	pop $4
l1612:
	push $4
	call grtt,size
	cmpjl
	cmp0
	je l1613
	jmp l1615
l1614:
	add $4,1
	pop $4
	jmp l1612
l1615:
	push "tt"
	push $4
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	push $2
	pop $b
	popax
	add $a,$b
	popax
	add $3,$a
	pop $3
	jmp l1614
l1613:
	push $3
	end method
	method getlines
	push 0
	push " "
	cthis getlinesfrom
	end method
	method nonempty
	localint $1
	pop $1
	localstring $2
l1616:
	push $1
	call grtt,size
	cmpjl
	cmp0
	je l1617
	jmp l1619
l1618:
	add $1,1
	pop $1
	jmp l1616
l1619:
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	spushs
	spop $a
	call [$a],get
	pop $2
	call $2,clear
	call $2,length
	push 0
	cmpja
	cmp0
	je l1621
	push $1
	ret
l1621:
	jmp l1618
l1617:
	push 1
	popax
	sub 0,$a
	end method
	method clear
	call grtt,txtreset
	end method
	method setid
	localstring $1
	localint $2
	pop $2
	pop $1
	call grtt,size
	push $2
	cmpjae
	cmp0
	je l1623
	push "tt"
	push $2
	pop $b
	popax
	add $a,$b
	spushs
	push $1
	spop $a
	call [$a],txtset
l1623:
	end method
	method settext
	localint $1
	pop $1
l1624:
	push $1
	push 0
	cmpja
	cmp0
	je l1625
	sub $1,1
	pop $1
	push $1
	cthis setid
	jmp l1624
l1625:
	end method
	method copytodb
	localstring $1
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
	localint $2
	push 0
	pop $2
l1626:
	push $2
	call grtt,size
	cmpjl
	cmp0
	je l1627
	jmp l1629
l1628:
	add $2,1
	pop $2
	jmp l1626
l1629:
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],addrow
	push 1
	pop $b
	popax
	sub $a,$b
	push $2
	call grtt,get
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],add
	jmp l1628
l1627:
	end method
	method copyfromdb
	localstring $1
	pop $1
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cthis copyfromdbii
	end method
	method copyfromdbss
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	push $1
	spushs
	push $2
	spop $a
	call [$a],findbyrow
	push 1
	pop $b
	popax
	add $a,$b
	push $1
	spushs
	push $3
	spop $a
	call [$a],findbyrow
	cthis copyfromdbii
	end method
	method copyfromdbii
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $2
	push 1
	popax
	sub 0,$a
	cmpje
	cmp0
	jne l1632
	push $3
	push 1
	popax
	sub 0,$a
	cmpje
	jmp l1633
l1631:
	push 0
	jmp l1633
l1632:
	push 1
l1633:
	cmp0
	je l1634
	ret
l1634:
	cthis clear
	push $3
	push $2
	pop $b
	popax
	sub $a,$b
	cthis size
	cmpja
	cmp0
	je l1636
	push $2
	cthis size
	pop $b
	popax
	add $a,$b
	pop $3
l1636:
	localint $4
	push $2
	pop $4
l1637:
	push $4
	push $3
	cmpjl
	cmp0
	je l1638
	jmp l1640
l1639:
	add $4,1
	pop $4
	jmp l1637
l1640:
	push $1
	spushs
	push $4
	spop $a
	call [$a],getcolsno
	cmp0
	je l1642
	push $1
	spushs
	push $4
	push 0
	spop $a
	call [$a],get
	push $4
	push $2
	pop $b
	popax
	sub $a,$b
	cthis setid
l1642:
	jmp l1639
l1638:
	end method
	method copyfromdbrow
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push $1
	spushs
	push $2
	spop $a
	call [$a],getcolsno
	pop $4
	push $4
	cthis size
	cmpja
	cmp0
	je l1644
	cthis size
	pop $4
l1644:
	localint $5
	push $3
	pop $5
l1645:
	push $5
	push $4
	cmpjl
	cmp0
	je l1646
	jmp l1648
l1647:
	add $5,1
	pop $5
	jmp l1645
l1648:
	push $1
	spushs
	push $2
	push $5
	spop $a
	call [$a],get
	push $5
	push $3
	pop $b
	popax
	sub $a,$b
	cthis setid
	jmp l1647
l1646:
	end method
	method save
	localstring $1
	pop $1
	new db,__tmpdb
	push "__tmpdb"
	cthis copytodb
	push "|"
	call __tmpdb,setseparator
	push $1
	call __tmpdb,save
	delete __tmpdb
	end method
	method load
	localstring $1
	pop $1
	new db,__tmpdb
	push $1
	call __tmpdb,load
	push "__tmpdb"
	cthis copyfromdb
	delete __tmpdb
	end method
	end class

	class GUITextBoxTyper
	parent TextBoxTyper
	method init
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	localint $6
	localstring $7
	localint $8
	localint $9
	localint $10
	localint $11
	localint $12
	pop $12
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	push $6
	push $7
	push $8
	push $9
	push $10
	push $11
	push $12
	clparent TextBoxTyper,init
	push A
	push "rewinder"
	push "null"
	push "rewinderbg"
	push "null"
	cthis vars2
	end method
	method setrewinder
	localstring $1
	pop $1
	push $1
	pop rewinder
	push $1
	push "bg"
	pop $b
	popax
	add $a,$b
	pop rewinderbg
	end method
	method activate
	localint $1
	pop $1
	push $1
	clparent TextBoxTyper,activate
	cthis updaterewactual
	end method
	method updaterewactual
	push Row
	cthis updaterewpos
	end method
	method updaterewpos
	localint $1
	pop $1
	push rewinder
	push "null"
	cmpjne
	cmp0
	je l1650
	localdef $2
	push "tt"
	push $1
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $a
	call [$a],getpy
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	cmpjl
	cmp0
	je l1652
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getpy
	push $2
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
	jmp l1651
l1652:
	push $2
	spushs
	spop $a
	call [$a],getey
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	cmpja
	cmp0
	je l1654
	push rewinder
	spushs
	push 0
	push rewinderbg
	spushs
	spop $a
	call [$a],getey
	push $2
	spushs
	spop $a
	call [$a],getey
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],rewind
l1654:
l1651:
l1650:
	end method
	end class

	class DelayTaker
	method init
	new int,bonrel
	push 0
	pop bonrel
	new int,bstart
	push 0
	pop bstart
	new int,bclickrel
	push 1
	pop bclickrel
	push "timwez"
	push 300
	push 1
	push "DelayTaker0"
	cthis cnewtimerfin
	end method
	method DelayTaker0
	push 1
	pop bonrel
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	pop bclickrel
	end method
	method setdelay
	localint $1
	pop $1
	push $1
	call timwez,delay
	end method
	method take
	push bclickrel
	cmp0
	je l1656
	call timwez,play
	push 0
	pop bonrel
	jmp l1655
l1656:
	push 1
	pop bonrel
l1655:
	push 1
	pop bstart
	end method
	method ret
	push 0
	pop bonrel
	push 0
	pop bstart
	push 0
	call timwez,stop
	end method
	method isonclick
	cthis stoptimer
	push bstart
	cmp0
	je l1657
	push bonrel
	neg
	jmp l1659
l1657:
	push 0
	jmp l1659
l1658:
	push 1
l1659:
	end method
	method isonrel
	cthis stoptimer
	push bstart
	cmp0
	je l1660
	push bonrel
	jmp l1662
l1660:
	push 0
	jmp l1662
l1661:
	push 1
l1662:
	end method
	method istaken
	push bstart
	end method
	method stoptimer
	push 0
	call timwez,stop
	end method
	end class

	class ImgMover
	method init
	new string,smoved
	push "null"
	pop smoved
	new int,ilastx
	new int,ilasty
	new int,irelx
	new int,irely
	end method
	method mssetobj
	localstring $1
	pop $1
	push $1
	call mouse,getpos
	cthis setobj
	end method
	method setobj
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push 0
	push 0
	cthis set
	end method
	method setcobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getcx
	push $1
	spushs
	spop $a
	call [$a],getcy
	cthis setobj
	end method
	method setpobj
	localstring $1
	pop $1
	push $1
	push $1
	spushs
	spop $a
	call [$a],getpx
	push $1
	spushs
	spop $a
	call [$a],getpy
	cthis setobj
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],getposx
	push $4
	pop $b
	popax
	sub $a,$b
	pop ilastx
	push $1
	spushs
	spop $a
	call [$a],getposy
	push $5
	pop $b
	popax
	sub $a,$b
	pop ilasty
	push $2
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	pop irelx
	push $3
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	pop irely
	push $1
	pop smoved
	end method
	method msmove
	call mouse,getpos
	cthis move
	end method
	method msftmove
	call mouse,getpos
	cthis ftmove
	end method
	method move
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1664
	push smoved
	spushs
	push $1
	push smoved
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push irelx
	pop $b
	popax
	sub $a,$b
	push $2
	push smoved
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	push irely
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
l1664:
	end method
	method ftmove
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1666
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
l1666:
	end method
	method retobj
	push 0
	push 0
	cthis ret
	end method
	method ret
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push ilastx
	push $1
	pop $b
	popax
	add $a,$b
	push ilasty
	push $2
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	cthis free
	end method
	method put
	localint $1
	localint $2
	pop $2
	pop $1
	push smoved
	spushs
	push $1
	push $2
	spop $a
	call [$a],setpos
	cthis free
	end method
	method free
	push "null"
	pop smoved
	end method
	method getmover
	push smoved
	end method
	method getfree
	localdef $1
	push smoved
	pop $1
	cthis free
	push $1
	end method
	method moving
	push smoved
	push "null"
	cmpjne
	end method
	end class

	class ConImgMover
	parent ImgMover
	parent ObjController
	method init
	clparent ImgMover,init
	clparent ObjController,init
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmouselrel
	push smoved
	push "null"
	cmpjne
	cmp0
	je l1668
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1668:
	end method
	end class

	class DelayImgMover
	parent classlocker
	parent ImgMover
	method init
	clparent classlocker,init
	clparent ImgMover,init
	new DelayTaker,cldt
	end method
	method setclickrel
	localint $1
	pop $1
	push $1
	call cldt,setclickrel
	end method
	method reset
	call cldt,ret
	end method
	method _put
	call cldt,ret
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method set
	localstring $1
	localint $2
	localint $3
	localint $4
	localint $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent ImgMover,set
	call cldt,take
	end method
	method onmousemove
	cthis msmove
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1670
	ret
l1670:
	call cldt,isonclick
	cmp0
	je l1672
	cthis _put
	jmp l1671
l1672:
	call cldt,istaken
	neg
	cmp0
	je l1674
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1674:
l1671:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1676
	ret
l1676:
	call cldt,isonrel
	cmp0
	je l1678
	cthis _put
l1678:
	end method
	end class

	class DelayMover
	parent DelayImgMover
	parent ObjController
	method init
	clparent DelayImgMover,init
	clparent ObjController,init
	end method
	end class

	class Rewinder
	parent classlocker
	method init
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	new string,sarrowdir
	new int,ilenx
	new int,ileny
	new string,sgr
	new string,sorientation
	new int,bvertical
	new int,bfilteritem
	push 0
	pop bfilteritem
	new int,ibx1
	push 0
	pop ibx1
	new int,ibx2
	push iResX
	pop ibx2
	new int,iby1
	push 0
	pop iby1
	new int,iby2
	push iResY
	pop iby2
	new int,iodleg
	push 2
	pop iodleg
	new ImgMover,clmv
	push "timtick"
	push 1
	push 1
	push "timfin"
	cthis cnewtimercyclefin
	push A
	push "borx1"
	push $1
	push "bory1"
	push $2
	push "borx2"
	push $3
	push "bory2"
	push $4
	cthis vars2
	new snd,fxrew
	end method
	method movefilter
	push 1
	pop bfilteritem
	end method
	method movenormal
	push 0
	pop bfilteritem
	end method
	method setfxrew
	localstring $1
	pop $1
	cthis getsndpath
	push $1
	pop $b
	popax
	add $a,$b
	call fxrew,load
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setz
	push $1
	push $2
	push $3
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,set
	push $1
	spushs
	push 0
	push 0
	push iResX
	push iResY
	spop $a
	call [$a],clip
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1681
	push sorientation
	push "down"
	cmpje
	jmp l1682
l1680:
	push 0
	jmp l1682
l1681:
	push 1
l1682:
	cmp0
	je l1683
	push sgr
	spushs
	push $1
	push $1
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getw
	push 0
	spop $a
	call [$a],move
	jmp l1679
l1683:
	push sgr
	spushs
	push $1
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	sub 0,$a
	spop $a
	call [$a],movefrom
	push $1
	spushs
	push 0
	push $1
	spushs
	spop $a
	call [$a],geth
	spop $a
	call [$a],move
l1679:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],remove
	end method
	method pickup
	localint $1
	localint $2
	pop $2
	pop $1
	push sgr
	spushs
	push $1
	push $2
	push 1
	push 1
	spop $a
	call [$a],isin
	cmp0
	je l1685
	push sgr
	spushs
	spop $a
	call [$a],getsfound
	push $1
	push $2
	cthis getitem
	push 1
	ret
l1685:
	push 0
	ret
	end method
	method mspickup
	call mouse,getpos
	cthis pickup
	ret
	end method
	method freeitem
	call clmv,free
	end method
	method moveitem
	push bfilteritem
	cmp0
	je l1687
	call clmv,msftmove
	jmp l1686
l1687:
	call clmv,msmove
l1686:
	end method
	method retitem
	localstring $1
	call clmv,getmover
	pop $1
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push sgr
	spushs
	spop $a
	call [$a],getpy
	call clmv,ret
	push $1
	cthis putitem
	end method
	method putitem
	localstring $1
	pop $1
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1690
	push sorientation
	push "down"
	cmpje
	jmp l1691
l1689:
	push 0
	jmp l1691
l1690:
	push 1
l1691:
	cmp0
	je l1692
	push $1
	spushs
	push sgr
	spushs
	spop $a
	call [$a],getex
	push $1
	spushs
	spop $a
	call [$a],getpx
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	push 0
	spop $a
	call [$a],move
	jmp l1688
l1692:
	push $1
	spushs
	push 0
	push sgr
	spushs
	spop $a
	call [$a],getey
	push $1
	spushs
	spop $a
	call [$a],getpy
	pop $b
	popax
	sub $a,$b
	push iodleg
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],move
l1688:
	push sgr
	spushs
	push $1
	spop $a
	call [$a],add
	push $1
	spushs
	push $1
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $1
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	end method
	method getmoved
	call clmv,getmover
	ret
	end method
	method getbutw
	call anupstd,getw
	ret
	end method
	method getbuth
	call anupstd,geth
	ret
	end method
	method movearrows
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call grarrows,move
	end method
	method build
	localstring $1
	localint $2
	localstring $3
	localstring $4
	localint $5
	localstring $6
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	push $6
	pop sgr
	new anima,anupstd
	push $1
	call anupstd,load
	push $2
	call anupstd,setz
	push "up"
	push 0
	call anupstd,setframe
	push "anupstd"
	push "anupact"
	cthis copyanima
	push "up"
	push 1
	call anupact,setframe
	push "anupstd"
	push "andownact"
	cthis copyanima
	push "down"
	push 1
	call andownact,setframe
	push "anupstd"
	push "andownstd"
	cthis copyanima
	push "down"
	push 0
	call andownstd,setframe
	push "butup"
	push "anupstd"
	push "anupact"
	push "null"
	push $3
	cthis newbutan
	push "butdown"
	push "andownstd"
	push "andownact"
	push "null"
	push $3
	cthis newbutan
	push "onmoveon"
	push "_rewbutmoveon"
	call butup,addmethod
	push "onmoveon"
	push "_rewbutmoveon"
	call butdown,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butup,addmethod
	push "onmoveoff"
	push "_rewstrzalkaoff"
	call butdown,addmethod
	push "onclick"
	push "_rewbutclick"
	call butup,addmethod
	push "onclick"
	push "_rewbutclick"
	call butdown,addmethod
	push "onrel"
	push "_rewbutrel"
	call butup,addmethod
	push "onrel"
	push "_rewbutrel"
	call butdown,addmethod
	push $4
	pop sorientation
	new gmimgvec,grarrows
	push "grarrows"
	push "anupstd"
	popax
	pop $b
	psax
	call [$b],operator+
	push "anupact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownact"
	popax
	pop $b
	psax
	call [$b],operator+
	push "andownstd"
	popax
	pop $b
	psax
	call [$b],operator+
	popax
	localint $7
	localint $8
	localint $9
	localint $10
	push sorientation
	push "up"
	cmpje
	cmp0
	jne l1695
	push sorientation
	push "down"
	cmpje
	jmp l1696
l1694:
	push 0
	jmp l1696
l1695:
	push 1
l1696:
	cmp0
	je l1697
	push 0
	pop bvertical
	push $5
	pop ilenx
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1699
	push borx1
	push bory2
	call anupstd,geth
	pop $b
	popax
	sub $a,$b
	call anupstd,setpos
	push borx1
	push bory2
	call anupact,geth
	pop $b
	popax
	sub $a,$b
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call andownstd,getey
	pop $7
	jmp l1698
l1699:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call andownact,setpos
	push bory1
	pop $7
l1698:
	call anupstd,getex
	push iodleg
	pop $b
	popax
	add $a,$b
	pop ibx1
	call andownstd,getpx
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop ibx2
	push ibx1
	pop $8
	jmp l1693
l1697:
	push 1
	pop bvertical
	push $5
	pop ileny
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1701
	push borx2
	call anupstd,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupstd,setpos
	push borx2
	call anupact,getw
	pop $b
	popax
	sub $a,$b
	push bory1
	call anupact,setpos
	push borx2
	call andownstd,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx2
	call andownact,getw
	pop $b
	popax
	sub $a,$b
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	call anupstd,getex
	pop $8
	jmp l1700
l1701:
	push borx1
	push bory1
	call anupstd,setpos
	push borx1
	push bory1
	call anupact,setpos
	push borx1
	push bory2
	call andownstd,geth
	pop $b
	popax
	sub $a,$b
	call andownstd,setpos
	push borx1
	push bory2
	call andownact,geth
	pop $b
	popax
	sub $a,$b
	call andownact,setpos
	push borx1
	pop $8
l1700:
	call anupstd,getey
	push iodleg
	pop $b
	popax
	add $a,$b
	pop iby1
	call andownstd,getpy
	push iodleg
	pop $b
	popax
	sub $a,$b
	pop iby2
	push iby1
	pop $7
l1693:
	cthis getname
	push "up"
	call butup,_rewbuildbut
	cthis getname
	push "down"
	call butdown,_rewbuildbut
	localint $11
	push $6
	spushs
	spop $a
	call [$a],size
	pop $11
	push $6
	spushs
	push $8
	push $7
	spop $a
	call [$a],_setpos
	new int,ilimx
	push $8
	pop ilimx
	new int,ilimy
	push $7
	pop ilimy
	localstring $12
	localint $13
	push 0
	pop $13
l1702:
	push $13
	push $11
	cmpjl
	cmp0
	je l1703
	jmp l1705
l1704:
	add $13,1
	pop $13
	jmp l1702
l1705:
	push sgr
	spushs
	push $13
	spop $a
	call [$a],get
	pop $12
	push sorientation
	push "right"
	cmpje
	cmp0
	je l1707
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1706
l1707:
	push sorientation
	push "left"
	cmpje
	cmp0
	je l1709
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],geth
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $7,$a
	pop $7
	jmp l1708
l1709:
	push sorientation
	push "up"
	cmpje
	cmp0
	je l1711
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	jmp l1710
l1711:
	push sorientation
	push "down"
	cmpje
	cmp0
	je l1713
	push $12
	spushs
	push $8
	push $12
	spushs
	spop $a
	call [$a],lodx
	pop $b
	popax
	sub $a,$b
	push $7
	push $12
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	push $12
	spushs
	spop $a
	call [$a],lody
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setpos
	push $12
	spushs
	spop $a
	call [$a],getw
	push iodleg
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
l1713:
l1710:
l1708:
l1706:
	push $12
	spushs
	push ibx1
	push iby1
	push ibx2
	push iby2
	spop $a
	call [$a],clip
	jmp l1704
l1703:
	end method
	method _rewbuildbut
	localstring $1
	localstring $2
	pop $2
	pop $1
	new string,_sob
	push $1
	pop _sob
	new string,_sdir
	push $2
	push "up"
	cmpje
	cmp0
	je l1715
	push bvertical
	push 0
	cmpje
	cmp0
	je l1717
	push "left"
	pop _sdir
	jmp l1716
l1717:
	push "up"
	pop _sdir
l1716:
	jmp l1714
l1715:
	push $2
	push "down"
	cmpje
	cmp0
	je l1719
	push bvertical
	push 0
	cmpje
	cmp0
	je l1721
	push "right"
	pop _sdir
	jmp l1720
l1721:
	push "down"
	pop _sdir
l1720:
l1719:
l1714:
	end method
	method _rewbutmoveon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEON"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method _rewbutclick
	push _sdir
	cthis mstrzalkaon
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_CLICK"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method mstrzalkaon
	localstring $1
	pop $1
	push $1
	pop sarrowdir
	call timtick,play
	end method
	method _rewbutrel
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	end method
	method _rewstrzalkaoff
	push "null"
	pop sarrowdir
	push 0
	call timtick,stop
	push 0
	call fxrew,stop
	push _sob
	push "_"
	pop $b
	popax
	add $a,$b
	push _sdir
	pop $b
	popax
	add $a,$b
	push "_MOVEOFF"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method timfin
	cthis getlock
	cmp0
	je l1723
	ret
l1723:
	localint $1
	push 0
	pop $1
	push sarrowdir
	push "null"
	cmpjne
	cmp0
	je l1725
	push sgr
	spushs
	spop $a
	call [$a],empty
	neg
	jmp l1727
l1725:
	push 0
	jmp l1727
l1726:
	push 1
l1727:
	cmp0
	je l1728
	push sarrowdir
	push "up"
	cmpje
	cmp0
	je l1730
	push sgr
	spushs
	spop $a
	call [$a],getey
	call andownstd,getpy
	push ileny
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1732
	push sgr
	spushs
	push 0
	push ileny
	popax
	sub 0,$a
	spop $a
	call [$a],move
	push 1
	pop $1
l1732:
	jmp l1729
l1730:
	push sarrowdir
	push "down"
	cmpje
	cmp0
	je l1734
	push sgr
	spushs
	spop $a
	call [$a],getpy
	push ilimy
	cmpjl
	cmp0
	je l1736
	push sgr
	spushs
	push 0
	push ileny
	spop $a
	call [$a],move
	push 1
	pop $1
l1736:
	jmp l1733
l1734:
	push sarrowdir
	push "left"
	cmpje
	cmp0
	je l1738
	push sgr
	spushs
	spop $a
	call [$a],getex
	call andownstd,getpx
	push ilenx
	pop $b
	popax
	sub $a,$b
	cmpja
	cmp0
	je l1740
	push sgr
	spushs
	push ilenx
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1740:
	jmp l1737
l1738:
	push sarrowdir
	push "right"
	cmpje
	cmp0
	je l1742
	push sgr
	spushs
	spop $a
	call [$a],getpx
	push ilimx
	cmpjl
	cmp0
	je l1744
	push sgr
	spushs
	push ilenx
	push 0
	spop $a
	call [$a],move
	push 1
	pop $1
l1744:
l1742:
l1737:
l1733:
l1729:
l1728:
	push $1
	cmp0
	je l1746
	call fxrew,isplaying
	neg
	cmp0
	je l1748
	call fxrew,play
l1748:
	jmp l1745
l1746:
	push 0
	call fxrew,stop
l1745:
	cthis play
	end method
	end class

	class ConRewinder
	parent Rewinder
	parent ObjController
	method init
	clparent Rewinder,init
	clparent ObjController,init
	new DelayTaker,cldt
	end method
	method getitem
	localstring $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	clparent Rewinder,getitem
	call cldt,take
	end method
	method _put
	call cldt,ret
	cthis getname
	push "_PUT"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method onmousemove
	cthis moveitem
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1750
	ret
l1750:
	call cldt,isonrel
	cmp0
	je l1752
	cthis _put
l1752:
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1754
	ret
l1754:
	call cldt,isonclick
	cmp0
	je l1756
	cthis _put
	jmp l1755
l1756:
	call cldt,istaken
	neg
	cmp0
	je l1758
	cthis getname
	push "_GET"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1758:
l1755:
	end method
	end class

	class Button
	parent LObjController
	method init
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	push A
	push "sobject"
	push "null"
	push "sclicked"
	push "null"
	cthis vars2
	end method
	method sort
	call grbuts,sortimgs
	end method
	method addgroups
	call grbuts,addgroups
	call grbuts,sortimgs
	end method
	method addgroup
	localstring $1
	pop $1
	push $1
	call grbuts,addgr
	call grbuts,sortimgs
	end method
	method addlist
	call grbuts,addlist
	call grbuts,sortimgs
	end method
	method add
	localstring $1
	pop $1
	push $1
	call grbuts,add
	call grbuts,sortimgs
	end method
	method addlocker
	localstring $1
	pop $1
	push $1
	cthis add
	push $1
	clparent classlocker,setaslocker
	end method
	method removebutlist
	push "removebut"
	cthis withlist
	end method
	method removebut
	localstring $1
	pop $1
	push $1
	call grbuts,remove
	push $1
	push sobject
	cmpje
	cmp0
	je l1760
	push "null"
	pop sobject
l1760:
	push $1
	push sclicked
	cmpje
	cmp0
	je l1762
	push "null"
	pop sclicked
l1762:
	end method
	method load
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push GAME
	spushs
	push "gmimgvec"
	push $1
	spop $a
	call [$a],varnew
	push $1
	push $2
	popax
	pop $b
	psax
	call [$b],operator*
	push $1
	spushs
	push $3
	spop $a
	call [$a],each
	push $1
	cthis addgroup
	end method
	method remove
	localstring $1
	pop $1
	push GAME
	spushs
	push $1
	spop $a
	call [$a],hasvar
	cmp0
	je l1764
	push $1
	call grbuts,removegr
l1764:
	end method
	method loadfrom
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	pop $4
	pop $3
	pop $2
	pop $1
	localdef $5
	cthis getgraphpath
	pop $5
	push $2
	cthis setgraphpath
	push $1
	push $3
	push $4
	cthis load
	push $5
	cthis setgraphpath
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1766
	ret
l1766:
	cthis checktouchpad
	cmp0
	je l1768
	cthis onmousemove
	call engine,redraw
l1768:
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1770
	push sobject
	pop sclicked
	push sobject
	spushs
	push "butclick"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1772
	push sobject
	spushs
	spop $a
	call [$a],butclick
l1772:
l1770:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1774
	ret
l1774:
	cthis checktouchpad
	cmp0
	je l1776
	cthis lastoff
l1776:
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1778
	push sclicked
	spushs
	push "butlrel"
	spop $a
	call [$a],hasaddedmet
	jmp l1780
l1778:
	push 0
	jmp l1780
l1779:
	push 1
l1780:
	cmp0
	je l1781
	push sclicked
	spushs
	spop $a
	call [$a],butlrel
	jmp l1777
l1781:
	push "null"
	pop sclicked
l1777:
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1783
	ret
l1783:
	push sclicked
	push "null"
	cmpjne
	cmp0
	je l1785
	push sclicked
	spushs
	push "butmoving"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1787
	push sclicked
	spushs
	spop $a
	call [$a],butmoving
l1787:
l1785:
	localint $1
	localint $2
	call mouse,getpos
	pop $2
	pop $1
	push $1
	push $2
	push "isbutin"
	call grbuts,isinfunc
	cmp0
	je l1789
	localdef $3
	call grbuts,getsfound
	pop $3
	push $3
	push sobject
	cmpjne
	cmp0
	je l1791
	cthis lastoff
	push $3
	pop sobject
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push $3
	spushs
	push "butmoveon"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1793
	push $3
	spushs
	spop $a
	call [$a],butmoveon
l1793:
l1791:
	jmp l1788
l1789:
	cthis lastoff
l1788:
	end method
	method lastoff
	push sobject
	push "null"
	cmpjne
	cmp0
	je l1795
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push sobject
	spushs
	push "butmoveoff"
	spop $a
	call [$a],hasaddedmet
	cmp0
	je l1797
	push sobject
	spushs
	spop $a
	call [$a],butmoveoff
l1797:
	push "null"
	pop sobject
l1795:
	end method
	end class

	method Button_isin
	push "isbutin"
	push "global5"
	cthis addmethod
	end method
	method global5
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 0
	cthis isin
	end method
	method Button_isinvis
	push "isbutin"
	push "global6"
	cthis addmethod
	end method
	method global6
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 0
	cthis isin
	end method
	method Button_isinalpha
	push "isbutin"
	push "global7"
	cthis addmethod
	end method
	method global7
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 1
	push 1
	cthis isin
	end method
	method Button_isinvisalpha
	push "isbutin"
	push "global8"
	cthis addmethod
	end method
	method global8
	localdef $1
	localdef $2
	pop $2
	pop $1
	push $1
	push $2
	push 0
	push 1
	cthis isin
	end method
	method Button_moveon
	push "butmoveon"
	push "global9"
	cthis addmethod
	end method
	method global9
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis nofframes
	push 1
	cmpja
	cmp0
	je l1799
	push 1
	popax
	sub 0,$a
	push 1
	cthis setframe
l1799:
	end method
	method Button_moveonplay
	push "butmoveon"
	push "global10"
	cthis addmethod
	end method
	method global10
	call sndakskermovon,play
	call advmouse,setbut
	push 1
	popax
	sub 0,$a
	cthis isplaying
	push 0
	cmpje
	cmp0
	je l1801
	push 1
	popax
	sub 0,$a
	cthis play
l1801:
	end method
	method Button_moveoff
	push "butmoveoff"
	push "global11"
	cthis addmethod
	end method
	method global11
	call advmouse,setstd
	push 1
	popax
	sub 0,$a
	push 0
	cthis setframe
	end method
	method Button_moveonms
	push "butmoveon"
	push "global12"
	cthis addmethod
	end method
	method global12
	call advmouse,setbut
	end method
	method Button_moveoffms
	push "butmoveoff"
	push "global13"
	cthis addmethod
	end method
	method global13
	call advmouse,setstd
	end method
	method Button_std
	cthis Button_isin
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdalpha
	cthis Button_isinalpha
	cthis Button_moveon
	cthis Button_moveoff
	end method
	method Button_stdms
	cthis Button_isinalpha
	cthis Button_moveonms
	cthis Button_moveoffms
	end method
	class Buttons
	parent LObjController
	method init
	localstring $1
	pop $1
	clparent LObjController,init
	cthis unlock
	new gmimgvec,grbuts
	new int,__id
	push 0
	pop __id
	new string,sanbut
	push "anbut"
	pop sanbut
	push sanbut
	push $1
	push 10
	cthis newanima
	push sanbut
	push sanbut
	push "grbuts"
	cthis newanactionsgr
	popax
	call anbut,hide
	push 10
	call grbuts,setz
	push "Buttons0"
	call grbuts,removeif
	new string,slastb
	push "null"
	pop slastb
	push A
	push "sobject"
	push "null"
	push "bvisible"
	push 1
	push "balpha"
	push 1
	cthis vars2
	cthis checktouchpad
	cmp0
	je l1805
	new int,ipadclick
	push 0
	pop ipadclick
	push "bcheck2klik"
	push 0
	cthis var2
l1805:
	end method
	method Buttons0
	cthis actionname
	push "bkg"
	cmpje
	cmp0
	je l1803
	cthis getz
	push 1
	pop $b
	popax
	sub $a,$b
	cthis setz
	push 1
	jmp l1802
l1803:
	push 0
l1802:
	end method
	method _release
	cthis checktouchpad
	cmp0
	je l1807
	push 0
	pop ipadclick
l1807:
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 0
	spop $a
	call [$a],setframe
	cthis copyobj
	cthis getname
	push "_moveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	push "null"
	pop slastb
	call advmouse,setstd
	end method
	method getbut
	call grbuts,getsfound
	end method
	method onmousemove
	cthis getlock
	cmp0
	je l1809
	ret
l1809:
	push 1
	popax
	sub 0,$a
	push 0
	call grbuts,setframe
	localdef $1
	call mouse,getpos
	push bvisible
	push balpha
	call grbuts,isin
	pop $1
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1811
	push slastb
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
l1811:
	push $1
	cmp0
	je l1813
	localstring $2
	call grbuts,getsfound
	pop $2
	push $2
	push slastb
	cmpjne
	cmp0
	je l1815
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1817
	cthis _release
l1817:
	push $2
	pop slastb
	push $2
	spushs
	push 1
	popax
	sub 0,$a
	push 1
	spop $a
	call [$a],setframe
	cthis copyobj
	call advmouse,setact
	cthis getname
	push "_moveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1815:
	jmp l1812
l1813:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1819
	cthis _release
l1819:
l1812:
	end method
	method copyobj
	push slastb
	spushs
	spop $a
	call [$a],actionname
	pop sobject
	end method
	method onmouselclick
	cthis getlock
	cmp0
	je l1821
	ret
l1821:
	cthis checktouchpad
	cmp0
	je l1823
	push bcheck2klik
	jmp l1825
l1823:
	push 0
	jmp l1825
l1824:
	push 1
l1825:
	cmp0
	je l1826
	push ipadclick
	cmp0
	je l1828
	push 0
	pop ipadclick
	cthis _butmouselclick
	jmp l1827
l1828:
	push 1
	pop ipadclick
	cthis onmousemove
l1827:
	jmp l1822
l1826:
	cthis _butmouselclick
l1822:
	end method
	method _butmouselclick
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1830
	cthis copyobj
	cthis getname
	push "_lclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1830:
	end method
	method onmouselrel
	cthis getlock
	cmp0
	je l1832
	ret
l1832:
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1834
	cthis copyobj
	cthis getname
	push "_lrel"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
l1834:
	end method
	method disable
	cthis lock
	call grbuts,hide
	push slastb
	push "null"
	cmpjne
	cmp0
	je l1836
	call advmouse,setstd
	push "null"
	pop slastb
l1836:
	end method
	method enable
	cthis unlock
	call grbuts,show
	end method
	end class

	class TextDb
	parent classlocker
	parent ObjController
	parent gfxObject
	method init
	localstring $1
	localint $2
	localstring $3
	localint $4
	localint $5
	localint $6
	localint $7
	localint $8
	localint $9
	localint $10
	localstring $11
	pop $11
	pop $10
	pop $9
	pop $8
	pop $7
	pop $6
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	clparent classlocker,init
	clparent ObjController,init
	new string,sFont
	push $1
	pop sFont
	new string,sFontBold
	push "null"
	pop sFontBold
	new string,sFontItalic
	push "null"
	pop sFontItalic
	new string,sFontBoldItalic
	push "null"
	pop sFontBoldItalic
	new int,bhtml
	push 0
	pop bhtml
	localstring $12
	localint $13
	localint $14
	push "$"
	call $1,contains
	cmp0
	je l1838
	push 1
	pop bhtml
	new vector,vfont
	push "string"
	call vfont,type
	push $1
	push "$"
	call vfont,vecbuildfromstring
	push 0
	pop $14
l1839:
	push $14
	call vfont,size
	cmpjl
	cmp0
	je l1840
	jmp l1842
l1841:
	add $14,1
	pop $14
	jmp l1839
l1842:
	push $14
	call vfont,get
	pop $12
	push "_italic"
	call $12,contains
	cmp0
	je l1844
	push "_bold"
	call $12,contains
	jmp l1846
l1844:
	push 0
	jmp l1846
l1845:
	push 1
l1846:
	cmp0
	je l1847
	push $12
	pop sFontBoldItalic
	jmp l1843
l1847:
	push "_italic"
	call $12,contains
	cmp0
	je l1849
	push $12
	pop sFontItalic
	jmp l1848
l1849:
	push "_bold"
	call $12,contains
	cmp0
	je l1851
	push $12
	pop sFontBold
	jmp l1850
l1851:
	push $12
	pop sFont
l1850:
l1848:
l1843:
	jmp l1841
l1840:
	push "$"
	call sFont,contains
	cmp0
	je l1853
	push sFontItalic
	push "null"
	cmpjne
	cmp0
	je l1855
	push sFontItalic
	pop sFont
	jmp l1854
l1855:
	push sFontBold
	push "null"
	cmpjne
	cmp0
	je l1857
	push sFontBold
	pop sFont
	jmp l1856
l1857:
	push sFontBoldItalic
	pop sFont
l1856:
l1854:
l1853:
	push sFont
	pop $1
	jmp l1837
l1838:
	push $1
	push $2
	cthis checkfont
	pop $1
l1837:
	new int,iFontSize
	push $2
	pop iFontSize
	push "Z"
	push $10
	cthis var2
	localstring $15
	push "null"
	pop $15
	push ":"
	call $3,contains
	cmp0
	je l1859
	push ":"
	call $3,strgetto
	push ":"
	pop $b
	popax
	add $a,$b
	pop $15
l1859:
	push ".db"
	call $3,contains
	cmp0
	je l1861
	push $15
	push "$path:"
	cmpje
	cmp0
	je l1863
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,load
	jmp l1862
l1863:
	push "dbtxt"
	push $3
	cthis newdb
l1862:
	jmp l1860
l1861:
	push $15
	spushs
	push "$lang:"
	cmpst
	jne l1865
	spop $a
	push "dbtxt"
	push $15
	call $3,strsubbs
	cthis lang_db
	jmp l1864
l1865:
	push "$var:"
	cmpst
	jne l1866
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	call dbtxt,dbcopy
	jmp l1864
l1866:
	push "$row:"
	cmpst
	jne l1867
	spop $a
	new db,dbtxt
	push $15
	call $3,strsubbs
	spushs
	push ","
	spop $h
	call $h,strgetto
	pop $12
	push ","
	call $3,strgetfrom
	pop $13
	push 0
	pop $14
l1868:
	push $14
	push $12
	spushs
	push $13
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l1869
	jmp l1871
l1870:
	add $14,1
	pop $14
	jmp l1868
l1871:
	call dbtxt,addrow
	popax
	push $14
	push $12
	spushs
	push $13
	push $14
	spop $a
	call [$a],get
	call dbtxt,add
	jmp l1870
l1869:
	jmp l1864
l1867:
	spop $a
	new db,dbtxt
	push $3
	call dbtxt,dbaddlast
l1864:
l1860:
	localint $16
	push 0
	pop $16
	localint $17
	call dbtxt,getrowsno
	pop $17
	push 0
	push 5
	call $11,getb
	push "limit"
	cmpje
	cmp0
	je l1873
	localint $18
	push "limit_"
	call $11,strsubbs
	pop $18
	new vector,vtmp
	push "string"
	call vtmp,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	localint $14
	push 0
	pop $14
l1874:
	push $14
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l1875
	jmp l1877
l1876:
	add $14,1
	pop $14
	jmp l1874
l1877:
	push $14
	push 0
	call dbtxt,get
	push " "
	call vtmp,vecbuildfromstring
	localint $19
	push 0
	pop $19
l1878:
	push $19
	call vtmp,size
	cmpjl
	cmp0
	je l1879
	jmp l1881
l1880:
	add $19,1
	pop $19
	jmp l1878
l1881:
	push $19
	call vtmp,get
	call vtmp2,add
	jmp l1880
l1879:
	jmp l1876
l1875:
	call dbtxt,free
	localstring $12
	push ""
	pop $12
	localstring $20
	push 0
	pop $14
l1882:
	push $14
	call vtmp2,size
	cmpjl
	cmp0
	je l1883
	jmp l1885
l1884:
	add $14,1
	pop $14
	jmp l1882
l1885:
	push $14
	call vtmp2,get
	pop $20
	push $12
	push $20
	pop $b
	popax
	add $a,$b
	spushs
	spop $h
	call $h,length
	push $18
	cmpjl
	cmp0
	je l1887
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	popax
	add $12,$a
	pop $12
	jmp l1886
l1887:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	push $20
	push " "
	pop $b
	popax
	add $a,$b
	pop $12
l1886:
	jmp l1884
l1883:
	call dbtxt,addrow
	push 1
	pop $b
	popax
	sub $a,$b
	pop $19
	push $19
	push $12
	call dbtxt,add
	call dbtxt,getrowsno
	pop $17
l1873:
	new gmimgvec,grtxt
	push $7
	push $8
	call grtxt,_setpos
	push 0
	pop $14
l1888:
	push $14
	push $17
	cmpjl
	cmp0
	je l1889
	jmp l1891
l1890:
	add $14,1
	pop $14
	jmp l1888
l1891:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $12
	spushs
	spop $e
	new text,[$e]
	localdef $21
	push $14
	push 0
	call dbtxt,get
	pop $21
	push bhtml
	cmp0
	je l1893
	push "<b>"
	call $21,contains
	cmp0
	je l1895
	push sFontBold
	pop $1
	push "<b>"
	call $21,strremove
	jmp l1894
l1895:
	push "<bi>"
	call $21,contains
	cmp0
	je l1897
	push sFontBoldItalic
	pop $1
	push "<bi>"
	call $21,strremove
	jmp l1896
l1897:
	push "<i>"
	call $21,contains
	cmp0
	je l1899
	push sFontItalic
	pop $1
	push "<i>"
	call $21,strremove
	jmp l1898
l1899:
	push sFont
	pop $1
l1898:
l1896:
l1894:
l1893:
	push $12
	spushs
	push $1
	spop $a
	call [$a],setfont
	push $12
	spushs
	push $21
	spop $a
	call [$a],set
	push $12
	spushs
	push $7
	push $8
	spop $a
	call [$a],setpos
	push $2
	push $9
	pop $b
	popax
	add $a,$b
	popax
	add $8,$a
	pop $8
	push $12
	spushs
	push $10
	spop $a
	call [$a],setz
	push $12
	spushs
	push $4
	push $5
	push $6
	spop $a
	call [$a],createtxt
	push $12
	spushs
	spop $a
	call [$a],getw
	push $16
	cmpja
	cmp0
	je l1901
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $16
l1901:
	push $12
	call grtxt,add
	jmp l1890
l1889:
	push "Rows"
	push $17
	cthis var2
	push $11
	push "right"
	cmpje
	cmp0
	jne l1904
	push $11
	push "center"
	cmpje
	jmp l1905
l1903:
	push 0
	jmp l1905
l1904:
	push 1
l1905:
	cmp0
	je l1906
	push 0
	pop $14
l1907:
	push $14
	push $17
	cmpjl
	cmp0
	je l1908
	jmp l1910
l1909:
	add $14,1
	pop $14
	jmp l1907
l1910:
	push "txt"
	push $14
	pop $b
	popax
	add $a,$b
	pop $12
	push $11
	push "center"
	cmpje
	cmp0
	je l1912
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	spop $a
	call [$a],move
	jmp l1911
l1912:
	push $12
	spushs
	push $16
	push $12
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 0
	spop $a
	call [$a],move
l1911:
	jmp l1909
l1908:
l1906:
	push "W"
	push $16
	cthis var2
	push "grtxt"
	clparent gfxObject,init
	end method
	method stdshadow
	localint $1
	pop $1
	push 0
	push 0
	push 0
	push $1
	cthis setshadow
	end method
	method setshadow
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localstring $5
	localstring $6
	localstring $7
	push sFont
	push iFontSize
	push "_fntbrd"
	cthis _checkfont
	pop $7
	localint $8
	push 0
	pop $8
l1913:
	push $8
	call dbtxt,getrowsno
	cmpjl
	cmp0
	je l1914
	jmp l1916
l1915:
	add $8,1
	pop $8
	jmp l1913
l1916:
	push "txt"
	push $8
	pop $b
	popax
	add $a,$b
	pop $5
	push "txts"
	push $8
	pop $b
	popax
	add $a,$b
	pop $6
	push $6
	spushs
	spop $e
	new text,[$e]
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],get
	spop $a
	call [$a],set
	push $6
	spushs
	push $7
	spop $a
	call [$a],setfont
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getz
	push 1
	pop $b
	popax
	sub $a,$b
	spop $a
	call [$a],setz
	push $6
	spushs
	push $5
	spushs
	spop $a
	call [$a],getpx
	push $4
	pop $b
	popax
	add $a,$b
	push $5
	spushs
	spop $a
	call [$a],getpy
	push $4
	pop $b
	popax
	add $a,$b
	spop $a
	call [$a],setpos
	push $6
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	push $6
	call grtxt,add
	jmp l1915
l1914:
	end method
	method setz
	localint $1
	pop $1
	push $1
	pop Z
	push $1
	call grtxt,setz
	end method
	method getz
	push Z
	end method
	method isin
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	push $3
	push $4
	call grtxt,isin
	end method
	method view
	localdef $1
	pop $1
	localstring $2
l1917:
	push A
	push $1
	cmpjne
	cmp0
	je l1918
	push $1
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],show
	push "txts"
	push "txt"
	call $2,strsubbs
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call engine,varexist
	cmp0
	je l1920
	push $2
	spushs
	spop $a
	call [$a],show
l1920:
	localdef $1
	pop $1
	jmp l1917
l1918:
	end method
	method blitto
	localstring $1
	pop $1
	localstring $2
	localint $3
	push 0
	pop $3
l1921:
	push $3
	call grtxt,size
	cmpjl
	cmp0
	je l1922
	jmp l1924
l1923:
	add $3,1
	pop $3
	jmp l1921
l1924:
	push $3
	call grtxt,get
	pop $2
	push $2
	spushs
	spop $a
	call [$a],buildfullname
	push $1
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],blit
	push GAME
	spushs
	push $2
	spushs
	spop $a
	call [$a],getfullname
	spop $a
	call [$a],vardel
	jmp l1923
l1922:
	end method
	method setcol
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	localint $4
	push 0
	pop $4
l1925:
	push $4
	call grtxt,size
	cmpjl
	cmp0
	je l1926
	jmp l1928
l1927:
	add $4,1
	pop $4
	jmp l1925
l1928:
	push $4
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	spop $a
	call [$a],createtxt
	jmp l1927
l1926:
	end method
	method clip
	localint $1
	localint $2
	localint $3
	localint $4
	pop $4
	pop $3
	pop $2
	pop $1
	localint $5
	push 0
	pop $5
l1929:
	push $5
	call grtxt,size
	cmpjl
	cmp0
	je l1930
	jmp l1932
l1931:
	add $5,1
	pop $5
	jmp l1929
l1932:
	push $5
	call grtxt,get
	spushs
	push $1
	push $2
	push $3
	push $4
	spop $a
	call [$a],clip
	jmp l1931
l1930:
	end method
	method setpos
	localint $1
	localint $2
	pop $2
	pop $1
	localdef $3
	push $1
	call grtxt,getposx
	pop $b
	popax
	sub $a,$b
	pop $3
	localdef $4
	push $2
	call grtxt,getposy
	pop $b
	popax
	sub $a,$b
	pop $4
	push $3
	push $4
	call grtxt,move
	end method
	end class

	class Lexer
	method init
	end method
	method buildlex
	push A
	push "id"
	push "found"
	cthis vars
	new vector,vconsts
	push "string"
	call vconsts,type
	new vector,vtmp1
	push "string"
	call vtmp1,type
	new vector,vtmp2
	push "string"
	call vtmp2,type
	new int,dot
	push "."
	spushs
	push 0
	spop $h
	call $h,getbyte
	pop dot
	new string,_literal_char
	push "\""
	pop _literal_char
	end method
	method setliteralchar
	localstring $1
	pop $1
	push $1
	pop _literal_char
	end method
	method getliteralchar
	push _literal_char
	end method
	method _isvar
	localint $1
	localint $2
	pop $2
	pop $1
	localint $3
	push id
	pop $3
	push ""
	pop found
	localint $4
l1933:
	push $3
	cthis length
	cmpjl
	cmp0
	je l1934
	push $3
	cthis getbyte
	pop $4
	push $4
	push $1
	cmpjae
	cmp0
	je l1936
	push $4
	push $2
	cmpjle
	jmp l1938
l1936:
	push 0
	jmp l1938
l1937:
	push 1
l1938:
	cmp0
	je l1939
	push $3
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $3,1
	pop $3
	jmp l1935
l1939:
	push $4
	push BYTEa
	cmpjae
	cmp0
	je l1941
	push $4
	push BYTEz
	cmpjle
	jmp l1943
l1941:
	push 0
	jmp l1943
l1942:
	push 1
l1943:
	cmp0
	jne l1945
	push $4
	push BYTEA
	cmpjae
	cmp0
	je l1946
	push $4
	push BYTEZ
	cmpjle
	jmp l1948
l1946:
	push 0
	jmp l1948
l1947:
	push 1
l1948:
	cmp0
	jne l1945
	push $4
	push BYTE_
	cmpje
	jmp l1949
l1944:
	push 0
	jmp l1949
l1945:
	push 1
l1949:
	cmp0
	je l1950
	push ""
	pop found
l1950:
	cthis length
	pop $3
l1935:
	jmp l1933
l1934:
	call found,length
	end method
	method isreal
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
	localint $3
	push 1
	pop $3
l1951:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1952
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l1954
	push $2
	push BYTE9
	cmpjle
	jmp l1956
l1954:
	push 0
	jmp l1956
l1955:
	push 1
l1956:
	cmp0
	jne l1958
	push $2
	push dot
	cmpje
	cmp0
	je l1959
	push $3
	jmp l1961
l1959:
	push 0
	jmp l1961
l1960:
	push 1
l1961:
	jmp l1962
l1957:
	push 0
	jmp l1962
l1958:
	push 1
l1962:
	cmp0
	je l1963
	push $2
	push dot
	cmpje
	cmp0
	je l1965
	push 0
	pop $3
l1965:
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l1953
l1963:
	cthis length
	pop $1
l1953:
	jmp l1951
l1952:
	push $3
	cmp0
	jne l1968
	push 0
	push 1
	call found,getb
	push "."
	cmpje
	cmp0
	jne l1968
	push 0
	push 1
	call found,gete
	push "."
	cmpje
	jmp l1969
l1967:
	push 0
	jmp l1969
l1968:
	push 1
l1969:
	cmp0
	je l1970
	push ""
	pop found
l1970:
	call found,length
	end method
	method isident
	localint $1
	push id
	pop $1
	push ""
	pop found
	localint $2
l1971:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1972
	push $1
	cthis getbyte
	pop $2
	push $2
	push BYTEa
	cmpjae
	cmp0
	je l1974
	push $2
	push BYTEz
	cmpjle
	jmp l1976
l1974:
	push 0
	jmp l1976
l1975:
	push 1
l1976:
	cmp0
	jne l1978
	push $2
	push BYTEA
	cmpjae
	cmp0
	je l1979
	push $2
	push BYTEZ
	cmpjle
	jmp l1981
l1979:
	push 0
	jmp l1981
l1980:
	push 1
l1981:
	cmp0
	jne l1978
	push $2
	push BYTE_
	cmpje
	cmp0
	jne l1978
	push $1
	push id
	cmpja
	cmp0
	je l1982
	push $2
	push BYTE0
	cmpjae
	cmp0
	je l1982
	push $2
	push BYTE9
	cmpjle
	jmp l1984
l1982:
	push 0
	jmp l1984
l1983:
	push 1
l1984:
	jmp l1985
l1977:
	push 0
	jmp l1985
l1978:
	push 1
l1985:
	cmp0
	je l1986
	push $1
	push 1
	cthis getb
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
	jmp l1973
l1986:
	cthis length
	pop $1
l1973:
	jmp l1971
l1972:
	call found,length
	end method
	method isliteral
	cthis check
	cthis getliteralchar
	cmpjne
	cmp0
	je l1988
	push 0
	ret
l1988:
	localint $1
	push id
	push 1
	pop $b
	popax
	add $a,$b
	pop $1
	push ""
	pop found
	localstring $2
l1989:
	push $1
	cthis length
	cmpjl
	cmp0
	je l1990
	push $1
	push 1
	cthis getb
	pop $2
	push $2
	cthis getliteralchar
	cmpje
	cmp0
	je l1992
	push 1
	ret
	jmp l1991
l1992:
	push $2
	popax
	add found,$a
	pop found
	add $1,1
	pop $1
l1991:
	jmp l1989
l1990:
	push 0
	end method
	method isconst
	localstring $1
	localint $2
	cthis isident
	pop $2
	localint $3
	push 0
	pop $3
l1993:
	push $3
	call vconsts,size
	cmpjl
	cmp0
	je l1994
	jmp l1996
l1995:
	add $3,1
	pop $3
	jmp l1993
l1996:
	push $3
	call vconsts,get
	pop $1
	push $2
	cmp0
	je l1998
	push $1
	push found
	cmpje
	cmp0
	je l2000
	push 1
	ret
l2000:
	jmp l1997
l1998:
	push id
	call $1,length
	cthis getb
	pop found
	push $1
	push found
	cmpje
	cmp0
	je l2002
	push 1
	ret
l2002:
l1997:
	jmp l1995
l1994:
	push 0
	end method
	method gettoken
	localstring $1
	localint $2
	pop $2
	pop $1
	push $1
	spushs
	spop $a
	call [$a],free
l2003:
	cthis notend
	cmp0
	je l2004
	cthis check
	push " "
	cmpje
	cmp0
	je l2006
	add id,1
	pop id
	jmp l2005
l2006:
	cthis isconst
	cmp0
	je l2008
	push $1
	spushs
	push "$const"
	spop $a
	call [$a],add
	push $1
	spushs
	cthis read
	spop $a
	call [$a],add
	jmp l2007
l2008:
	cthis isreal
	cmp0
	je l2010
	push $1
	spushs
	push "$real"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2012
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2012:
	jmp l2009
l2010:
	cthis isint
	cmp0
	je l2014
	push $1
	spushs
	push "$int"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2016
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2016:
	jmp l2013
l2014:
	cthis isident
	cmp0
	je l2018
	push $1
	spushs
	push "$alpha"
	spop $a
	call [$a],add
	cthis next
	push $2
	cmp0
	je l2020
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2020:
	jmp l2017
l2018:
	cthis isliteral
	cmp0
	je l2022
	push $1
	spushs
	push "$literal"
	spop $a
	call [$a],add
	cthis next
	push 2
	popax
	add id,$a
	pop id
	push $2
	cmp0
	je l2024
	push $1
	spushs
	push found
	spop $a
	call [$a],add
l2024:
	jmp l2021
l2022:
	push $1
	spushs
	push "$error"
	spop $a
	call [$a],add
	add id,1
	pop id
l2021:
l2017:
l2013:
l2009:
l2007:
l2005:
	jmp l2003
l2004:
	end method
	method expectdb
	localstring $1
	localint $2
	pop $2
	pop $1
	localint $3
	localstring $4
	localint $5
	push 0
	pop $5
l2025:
	push $5
	push $1
	spushs
	spop $a
	call [$a],getrowsno
	cmpjl
	cmp0
	je l2026
	jmp l2028
l2027:
	add $5,1
	pop $5
	jmp l2025
l2028:
	call vtmp2,free
	push 0
	pop $3
l2029:
	push $3
	push $1
	spushs
	push $5
	spop $a
	call [$a],getcolsno
	cmpjl
	cmp0
	je l2030
	jmp l2032
l2031:
	add $3,1
	pop $3
	jmp l2029
l2032:
	push $1
	spushs
	push $5
	push $3
	spop $a
	call [$a],get
	pop $4
	call $4,clear
	push $4
	push ""
	cmpjne
	cmp0
	je l2034
	push $4
	call vtmp2,add
l2034:
	jmp l2031
l2030:
	push "vtmp2"
	push $2
	cthis expectvec
	cmp0
	je l2036
	push $5
	ret
l2036:
	jmp l2027
l2026:
	push 1
	popax
	sub 0,$a
	end method
	method expectvec
	localstring $1
	localint $2
	pop $2
	pop $1
	push 0
	pop id
	push "vtmp1"
	push $2
	cthis gettoken
	push $1
	call vtmp1,veceq
	end method
	method expects
	localstring $1
	localstring $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	push $2
	call vtmp2,vecbuildfromstring
	push "vtmp2"
	push $3
	cthis expectvec
	end method
	method consts=
	push "addbegin"
	call vconsts,withlist
	end method
	method setas
	localstring $1
	pop $1
	push $1
	spushs
	push "buildlex"
	push "buildlex"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	spop $a
	call [$a],buildlex
	push $1
	spushs
	push "start"
	push "Lexer0"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "notend"
	push "Lexer1"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getnext"
	push "Lexer2"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "next"
	push "Lexer3"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "check"
	push "Lexer4"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "ischar"
	push "Lexer5"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isint"
	push "Lexer6"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isreal"
	push "isreal"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isbinary"
	push "Lexer7"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isident"
	push "isident"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isconst"
	push "isconst"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "_isvar"
	push "_isvar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "read"
	push "Lexer8"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "isliteral"
	push "isliteral"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "gettoken"
	push "gettoken"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expects"
	push "expects"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectvec"
	push "expectvec"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "expectdb"
	push "expectdb"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "consts="
	push "consts="
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "setliteralchar"
	push "setliteralchar"
	spop $a
	call [$a],addmethod
	push $1
	spushs
	push "getliteralchar"
	push "getliteralchar"
	spop $a
	call [$a],addmethod
	end method
	method Lexer0
	localstring $1
	pop $1
	push $1
	cthis set
	push 0
	pop id
	end method
	method Lexer1
	push id
	cthis length
	cmpjl
	end method
	method Lexer2
	push id
	cthis length
	cmpje
	cmp0
	je l2038
	push "null"
	ret
l2038:
	add id,1
	pop id
	push id
	push 1
	pop $b
	popax
	sub $a,$b
	push 1
	cthis getb
	end method
	method Lexer3
	call found,length
	popax
	add id,$a
	pop id
	end method
	method Lexer4
	push id
	cthis length
	cmpje
	cmp0
	je l2040
	push "null"
	ret
l2040:
	push id
	push 1
	cthis getb
	pop found
	push found
	end method
	method Lexer5
	localstring $1
	pop $1
	push id
	push 1
	cthis getb
	call $1,contains
	end method
	method Lexer6
	push BYTE0
	push BYTE9
	cthis _isvar
	end method
	method Lexer7
	push BYTE0
	push BYTE0
	push 1
	pop $b
	popax
	add $a,$b
	cthis _isvar
	end method
	method Lexer8
	cthis next
	push found
	end method
	end class

	class Localize
	method init
	end method
	method _lang_db
	localstring $1
	localstring $2
	localstring $3
	pop $3
	pop $2
	pop $1
	push $1
	spushs
	spop $e
	new db,[$e]
	push $1
	spushs
	push "load"
	push $3
	pop $b
	popax
	add $a,$b
	spushs
	push $2
	cthis lang_path
	push ".db"
	pop $b
	popax
	add $a,$b
	spop $d
	spop $a
	call [$a],[$d]
	end method
	method lang_db
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push ""
	cthis _lang_db
	end method
	method lang_dbscript
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "script"
	cthis _lang_db
	end method
	method lang_dbbeh
	localstring $1
	localstring $2
	pop $2
	pop $1
	push $1
	push $2
	push "beh"
	cthis _lang_db
	end method
	method lang_path
	localstring $1
	pop $1
	push LANGDIR
	call gameapi,getgamename
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push LANG
	pop $b
	popax
	add $a,$b
	end method
	end class

	class PyzCounter
	method init
	localstring $1
	localint $2
	pop $2
	pop $1
	new int,istart
	new int,istop
	new int,istep
	new int,idigits
	push 50
	pop idigits
	new int,iactual
	new string,_sanima
	push $1
	pop _sanima
	push A
	push "idx"
	push 2
	push "itimestep"
	push $2
	cthis vars2
	new gmimgvec,grcnt
	localint $3
	push 0
	pop $3
l2041:
	push $3
	push idigits
	cmpjl
	cmp0
	je l2042
	jmp l2044
l2043:
	add $3,1
	pop $3
	jmp l2041
l2044:
	localstring $4
	push "pcc"
	push $1
	pop $b
	popax
	add $a,$b
	push $3
	pop $b
	popax
	add $a,$b
	pop $4
	push $1
	push $4
	cthis copyanima
	push $4
	spushs
	spop $a
	call [$a],hide
	push $4
	call grcnt,add
	jmp l2043
l2042:
	push "timcnt"
	push $2
	push "PyzCounter0"
	cthis timer=
	end method
	method PyzCounter0
	push istep
	popax
	add iactual,$a
	pop iactual
	push iactual
	cthis view
	push iactual
	push istop
	cmpje
	cmp0
	je l2046
	cthis getbuildername
	spushs
	cthis getbuildername
	push "_finish"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	spop $a
	call [$a],[$d]
	jmp l2045
l2046:
	cthis play
l2045:
	end method
	method getcypher
	localint $1
	pop $1
	push "pcc"
	push _sanima
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	end method
	method start
	localint $1
	localint $2
	localint $3
	pop $3
	pop $2
	pop $1
	push $1
	pop istart
	push $2
	pop istop
	push $3
	pop istep
	push istart
	pop iactual
	push istart
	cthis view
	call timcnt,play
	end method
	method showcypher
	localint $1
	localint $2
	pop $2
	pop $1
	localstring $3
	push $1
	cthis getcypher
	pop $3
	push $3
	spushs
	push 0
	push $2
	spop $a
	call [$a],setframe
	push $3
	spushs
	spop $a
	call [$a],show
	end method
	method stop
	push 0
	call timcnt,stop
	end method
	method view
	localint $1
	pop $1
	call grcnt,hide
	push 0
	push 0
	call grcnt,setpos
	push $1
	push 0
	cmpje
	cmp0
	je l2048
	push 0
	push 0
	cthis showcypher
	jmp l2047
l2048:
	localint $2
	push 0
	pop $2
l2049:
	push $1
	push 0
	cmpja
	cmp0
	je l2050
	jmp l2052
l2051:
	add $2,1
	pop $2
	jmp l2049
l2052:
	push $2
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	push $d
	cthis showcypher
	push $1
	push 10
	pop $b
	popax
	div $a,$b
	psax
	pop $1
	jmp l2051
l2050:
	localint $3
	push 0
	pop $3
	localint $4
	push $2
	push 1
	pop $b
	popax
	sub $a,$b
	pop $4
l2053:
	push $4
	push 0
	cmpjae
	cmp0
	je l2054
	jmp l2056
l2055:
	sub $4,1
	pop $4
	jmp l2053
l2056:
	push $4
	cthis getcypher
	spushs
	push $3
	push 0
	spop $a
	call [$a],move
	push $3
	push $4
	push 1
	pop $b
	popax
	add $a,$b
	cthis getcypher
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	add $a,$b
	pop $3
	jmp l2055
l2054:
l2047:
	end method
	end class

	new string,bookdir
	push "bookdir:"
	call dbconf,dbget
	pop bookdir
	new string,screenmode
	push "screenmode:"
	call dbconf,dbget
	pop screenmode
	new string,storyfile
	push "storyfile:"
	call dbconf,dbget
	pop storyfile
	new string,sAskerGame
	new string,sGotoGame
	class StdGame
	parent classadv
	parent GameController
	parent Localize
	method init
	localstring $1
	pop $1
	push 0
	pop igmstate
	clparent classadv,init
	push $1
	clparent GameController,init
	clparent Localize,init
	push 0
	push 0
	call clbuts,setcursorpos
	push 0
	push 0
	call claskexit,setcursorpos
	push bookdir
	push "/"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	cthis path=
	push SNDPATH
	cthis setwavpath
	call clmusic,play
	call clbuts,reset
	call claskexit,reset
	call advmouse,setstd
	new Music,mus
	new Button,but1
	cthis cutscene
	end method
	method cutscene
	push 0
	push 0
	push iResX
	push iResY
	new CutScene,ccs
	push 50
	call ccs,delay
	push 2000
	call ccs,setz
	end method
	method gotogame
	localstring $1
	pop $1
	push sgmstate
	push "go"
	cmpje
	cmp0
	je l2058
	push "end"
	pop sgmstate
	push $1
	pop sGotoGame
	push "StdGame0"
	call ccs,close
l2058:
	end method
	method StdGame0
	push sGotoGame
	call gameapi,play
	end method
	method stdstart
	push "StdGame1"
	call ccs,enter
	end method
	method StdGame1
	push "go"
	pop sgmstate
	end method
	method key_down
	push igmdebug
	cmp0
	je l2060
	push "lctrl"
	call keyboard,iskeydown
	cmp0
	je l2060
	push "r"
	call keyboard,iskey
	jmp l2062
l2060:
	push 0
	jmp l2062
l2061:
	push 1
l2062:
	cmp0
	je l2063
	cthis crestart
l2063:
	end method
	method askrestart
	call claskexit,askrestart
	end method
	method onmusicfin
	call mus,play
	end method
	method exit
	cthis game_exit
	push igmsubtitle
	cmp0
	je l2065
	call subtitle,reset
l2065:
	end method
	end class

	new classgamepause,clpause
	new classgamemusic,clmusic
	push "sounds/bgr/"
	call clmusic,sndbgrpath
	push "sounds/music/"
	call clmusic,musicpath
	push "sounds/music.db"
	call clmusic,load
	new snd,sndakskermovon
	push "sounds/sfx/butmovon.wav"
	call sndakskermovon,load
	push 50
	call sndakskermovon,setvol
	class classasker2
	parent classasker
	method init
	clparent classasker,init
	new snd,sndaskexit
	push 0
	push 1
	call sndaskexit,setstartstopflag
	new snd,sndaskexitgame
	push 0
	push 1
	call sndaskexitgame,setstartstopflag
	new snd,sndyes
	push 0
	push 1
	call sndyes,setstartstopflag
	new snd,sndno
	push 0
	push 1
	call sndno,setstartstopflag
	new snd,sndaskrestart
	push 0
	push 1
	call sndaskrestart,setstartstopflag
	new snd,sndaskrestart2
	push 0
	push 1
	call sndaskrestart2,setstartstopflag
	cthis reload
	push "scripts/common/asker.pyz"
	push 12000
	cthis load
	push "sndakskermovon"
	cthis fxonmovon
	end method
	method reload
	push SNDPATH
	cthis setwavpath
	localdef $1
	cthis getsndpath
	pop $1
	push $1
	push "narexit.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexit,load
	push $1
	push "narexitgame.wav"
	pop $b
	popax
	add $a,$b
	call sndaskexitgame,load
	push $1
	push "naryes.wav"
	pop $b
	popax
	add $a,$b
	call sndyes,load
	push $1
	push "narno.wav"
	pop $b
	popax
	add $a,$b
	call sndno,load
	push $1
	push "narrestart.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart,load
	push $1
	push "narrestart.wav"
	pop $b
	popax
	add $a,$b
	call sndaskrestart2,load
	end method
	method askexittomenu
	push "sndaskexit"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askexitgame
	push "sndaskexitgame"
	push "sndyes"
	push "sndno"
	push "myestomenu"
	push "mnotomenu"
	cthis ask
	end method
	method askrestart
	push "sndaskrestart"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method askrestart2
	push "sndaskrestart2"
	push "sndyes"
	push "sndno"
	push "myesrestart"
	push "mnorestart"
	cthis ask
	end method
	method mnotomenu
	end method
	method myestomenu
	push GAME
	spushs
	push "clsave"
	spop $a
	call [$a],hasvar
	cmp0
	je l2067
	call clsave,free
l2067:
	call gameapi,getgamename
	spushs
	push "MainMenu"
	cmpst
	jne l2069
	spop $a
	push "exit"
	jmp l2068
l2069:
	spop $a
	push "MainMenu"
l2068:
	call gameapi,play
	end method
	method mnorestart
	call gameapi,getgamename
	spushs
	push "SubMenu"
	cmpst
	jne l2071
	spop $a
	push "MenuGry"
	jmp l2070
l2071:
	spop $a
	push "MainMenu"
l2070:
	call gameapi,play
	end method
	method myesrestart
	cthis crestart
	end method
	method ask
	localstring $1
	localstring $2
	localstring $3
	localstring $4
	localstring $5
	pop $5
	pop $4
	pop $3
	pop $2
	pop $1
	call ccs,isplaying
	neg
	cmp0
	je l2073
	push $1
	push $2
	push $3
	push $4
	push $5
	clparent classasker,ask
l2073:
	end method
	end class

	new classasker2,claskexit
	method LANG=
	localdef $1
	pop $1
	push $1
	pop LANG
	push "sounds/"
	pop SNDPATH
	push LANG
	push "pl"
	cmpje
	cmp0
	je l2075
	push ""
	pop LANG
l2075:
	call LANG,length
	push 0
	cmpja
	cmp0
	je l2077
	push LANG
	push "/"
	pop $b
	popax
	add $a,$b
	popax
	add SNDPATH,$a
	pop SNDPATH
l2077:
	call claskexit,reload
	end method
	new img,imglobcurs
	module clbuts
	method init
	end method
	method load
	new classbutton,buts
	push "scripts/common/buttons.pyz"
	push 4000
	push "imglobcurs"
	call buts,build
	call engine,actclassname
	push "butclick"
	call buts,transclickfunc
	call engine,actclassname
	push "butmovon"
	call buts,transmovonfunc
	call engine,actclassname
	push "butmovoff"
	call buts,transmovofffunc
	call buts,disableall
	new db,dbb
	push "scripts/common/buts.db"
	call dbb,load
	new snd,sndfxglobon
	push "sounds/sfx/globbutmovon.wav"
	call sndfxglobon,load
	push 50
	call sndfxglobon,setvol
	new def,bvisible
	push 1
	pop bvisible
	end method
	method reset
	call buts,disableall
	localdef $1
	call gameapi,getgamename
	pop $1
	localint $2
	push $1
	call dbb,findbyrow
	pop $2
	push $2
	push 0
	cmpjae
	cmp0
	je l2079
	localint $3
	push $2
	call dbb,getcolsno
	pop $3
	localint $4
	push 1
	pop $4
l2080:
	push $4
	push $3
	cmpjl
	cmp0
	je l2081
	jmp l2083
l2082:
	add $4,1
	pop $4
	jmp l2080
l2083:
	push $2
	push $4
	call dbb,get
	call buts,enable
	jmp l2082
l2081:
l2079:
	end method
	method setcursorpos
	localint $1
	localint $2
	pop $2
	pop $1
	push $1
	push $2
	call buts,setcursorpos
	end method
	method enable
	localstring $1
	pop $1
	push $1
	call buts,enable
	end method
	method butmovon
	localstring $1
	pop $1
	call sndfxglobon,play
	call mouse,isvisible
	pop bvisible
	call mouse,show
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveon"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butmovoff
	localstring $1
	pop $1
	push bvisible
	neg
	cmp0
	je l2085
	call mouse,hide
l2085:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butmoveoff"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method butclick
	localstring $1
	pop $1
	push $1
	push "pause"
	cmpje
	cmp0
	je l2087
	call clpause,pause
	jmp l2086
l2087:
	push $1
	push "menu"
	cmpje
	cmp0
	je l2089
	call gameapi,getgamename
	spushs
	push "MainMenu"
	cmpst
	jne l2091
	spop $a
	call claskexit,askexitgame
	jmp l2090
l2091:
	spop $a
	call claskexit,askexittomenu
l2090:
	jmp l2088
l2089:
	push $1
	push "restart"
	cmpje
	cmp0
	je l2093
	call claskexit,askrestart
l2093:
l2088:
l2086:
	cthis getname
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "_butclick"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	end module

	class classplacepointer2
	parent classplacepointer
	method init
	clparent classplacepointer,init
	push "scripts/common/strzalka.pyz"
	cthis load
	end method
	end class

	call clbuts,load
	push "startgame:"
	call dbconf,dbget
	call gameapi,play
	new string,sBookFile
	new string,sBookPrefix
	new int,iBookStart
	new int,iBookEnd
	new int,iCurPage
	new string,sBookDir
	new string,StoryName
	class BookGame
	parent StdGame
	method init
	push StoryName
	clparent StdGame,init
	push bookdir
	push "/"
	pop $b
	popax
	add $a,$b
	push sBookDir
	pop $b
	popax
	add $a,$b
	cthis path=
	new int,iPageZ
	push 10
	pop iPageZ
	new int,iButsZ
	push 100
	pop iButsZ
	new int,iExitZ
	push 200
	pop iExitZ
	end method
	method cloadexit
	new img,imexit
	push "scripts/"
	push bookdir
	pop $b
	popax
	add $a,$b
	push "/sys/"
	pop $b
	popax
	add $a,$b
	push screenmode
	pop $b
	popax
	add $a,$b
	push "_exit.jpg"
	pop $b
	popax
	add $a,$b
	call imexit,load
	push screenmode
	push "landscape"
	cmpje
	cmp0
	je l2095
	jmp l2094
l2095:
	push 0
	push iResY
	call imexit,geth
	pop $b
	popax
	sub $a,$b
	call imexit,setpos
l2094:
	call imexit,Button_isin
	push iExitZ
	call imexit,setz
	push "butclick"
	push "BookGame0"
	call imexit,addmethod
	push "imexit"
	call but1,add
	end method
	method BookGame0
	cthis gotocontents
	end method
	method cloadbutnext
	push "next"
	cthis cloadbutpage
	end method
	method cloadbutprev
	push "prev"
	cthis cloadbutpage
	end method
	method cloadbutpage
	localstring $1
	pop $1
	localdef $2
	push "img"
	push $1
	pop $b
	popax
	add $a,$b
	push "page"
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	spushs
	spop $e
	new img,[$e]
	localdef $3
	push "scripts/"
	push bookdir
	pop $b
	popax
	add $a,$b
	push "/sys/"
	pop $b
	popax
	add $a,$b
	push screenmode
	pop $b
	popax
	add $a,$b
	push "_"
	pop $b
	popax
	add $a,$b
	push $1
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push storyfile
	pop $b
	popax
	add $a,$b
	pop $3
	push $2
	spushs
	push $3
	spop $a
	call [$a],load
	push $2
	spushs
	push "dir"
	push $1
	spop $a
	call [$a],var2
	push $2
	spushs
	spop $a
	call [$a],BookGame1
	end method
	method BookGame1
	push iButsZ
	cthis setz
	push screenmode
	push "landscape"
	cmpje
	cmp0
	je l2097
	push dir
	push "next"
	cmpje
	cmp0
	je l2099
	push iResX
	cthis getw
	pop $b
	popax
	sub $a,$b
	push iResY
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
	jmp l2098
l2099:
	push 0
	push iResY
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
l2098:
	jmp l2096
l2097:
	push dir
	push "next"
	cmpje
	cmp0
	je l2101
	push iResX
	cthis getw
	pop $b
	popax
	sub $a,$b
	push 0
	cthis setpos
	jmp l2100
l2101:
	push iResX
	cthis getw
	pop $b
	popax
	sub $a,$b
	push iResY
	cthis geth
	pop $b
	popax
	sub $a,$b
	cthis setpos
l2100:
l2096:
	cthis Button_isin
	push "butclick"
	push "BookGame2"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method BookGame2
	push sgmstate
	push "go"
	cmpjne
	cmp0
	je l2103
	ret
l2103:
	cthis getname
	push "_click"
	pop $b
	popax
	add $a,$b
	spushs
	spop $d
	cthis [$d]
	end method
	method imgnextpage_click
	push iCurPage
	push 1
	pop $b
	popax
	add $a,$b
	cthis csetpage
	end method
	method imgprevpage_click
	push iCurPage
	push 1
	pop $b
	popax
	sub $a,$b
	cthis csetpage
	end method
	method csetpage
	localint $1
	pop $1
	push $1
	pop iCurPage
	push iCurPage
	push iBookStart
	cmpjl
	cmp0
	jne l2106
	push iCurPage
	push iBookEnd
	cmpja
	jmp l2107
l2105:
	push 0
	jmp l2107
l2106:
	push 1
l2107:
	cmp0
	je l2108
	cthis gotocontents
	jmp l2104
l2108:
	call gameapi,getgamename
	spushs
	spop $a
	call [$a],cloadpage
l2104:
	end method
	method gotocontents
	push "BookContents"
	cthis gotogame
	end method
	end class

	game BookStory
	parent BookGame
	method init
	clparent BookGame,init
	cthis cloadbutnext
	cthis cloadbutprev
	cthis cloadexit
	new img,impage
	cthis cloadpage
	push "go"
	pop sgmstate
	end method
	method cloadpage
	push iCurPage
	cthis _cloadpage
	end method
	method _cloadpage
	localint $1
	pop $1
	push $1
	pop iCurPage
	push storyfile
	pop sBookFile
	cthis getgraphpath
	push sBookPrefix
	pop $b
	popax
	add $a,$b
	push iCurPage
	pop $b
	popax
	add $a,$b
	push "."
	pop $b
	popax
	add $a,$b
	push sBookFile
	pop $b
	popax
	add $a,$b
	call impage,load
	push iPageZ
	call impage,setz
	end method
	end game

	game BookCover
	parent BookGame
	method init
	push "cover"
	pop StoryName
	push StoryName
	pop sBookDir
	clparent BookGame,init
	push "imbkg"
	push "cover.jpg"
	push 10
	cthis newimg
	cthis cloadbutnext
	push "timend"
	push "coverdelay:"
	call dbconf,dbget
	push "imgnextpage_click"
	cthis timer=
	push "BookCover0"
	call ccs,enter
	push "go"
	pop sgmstate
	end method
	method BookCover0
	call timend,play
	end method
	method imgnextpage_click
	cthis gotocontents
	end method
	end game

	game BookContents
	parent BookGame
	method init
	push "contents"
	pop StoryName
	push StoryName
	pop sBookDir
	clparent BookGame,init
	push "bkg.jpg"
	cthis img=
	cthis loadcontents
	cthis stdstart
	end method
	method loadcontents
	new db,dbcon
	cthis getgraphpath
	push "contents.beh"
	pop $b
	popax
	add $a,$b
	call dbcon,loadbeh
	new gmimgvec,grels
	localint $1
	localstring $2
	localstring $3
	localstring $4
	localint $5
	push 0
	pop $5
l2109:
	push $5
	call dbcon,getrowsno
	cmpjl
	cmp0
	je l2110
	jmp l2112
l2111:
	add $5,1
	pop $5
	jmp l2109
l2112:
	push 0
	pop $1
	push $5
	push $1
	call dbcon,get
	spushs
	push "story:"
	cmpst
	jne l2114
	spop $a
	add $1,1
	pop $1
	push "s"
	push $5
	push $1
	call dbcon,get
	pop $b
	popax
	add $a,$b
	pop $4
	add $1,1
	pop $1
	push $4
	spushs
	spop $e
	new string,[$e]
l2115:
	push $1
	push $5
	call dbcon,getcolsno
	cmpjl
	cmp0
	je l2116
	push $5
	push $1
	call dbcon,get
	pop $2
	add $1,1
	pop $1
	push $2
	spushs
	push "gfx:"
	cmpst
	jne l2118
	spop $a
	push $5
	push $1
	call dbcon,get
	pop $2
	add $1,1
	pop $1
	push $2
	cthis img=
	push "img"
	push ".jpg"
	call $2,strsubes
	pop $b
	popax
	add $a,$b
	pop $2
	push $2
	call grels,add
	push $2
	spushs
	push "bajka"
	push $4
	spop $a
	call [$a],var2
	push $4
	spushs
	push "gfx"
	push $2
	spop $a
	call [$a],var2
	push $2
	spushs
	spop $a
	call [$a],setascontent
	jmp l2117
l2118:
	push "dir:"
	cmpst
	jne l2119
	spop $a
	push $4
	spushs
	push "dir"
	push $5
	push $1
	call dbcon,get
	spop $a
	call [$a],var2
	add $1,1
	pop $1
	jmp l2117
l2119:
	push "prefix:"
	cmpst
	jne l2120
	spop $a
	push $4
	spushs
	push "prefix"
	push $5
	push $1
	call dbcon,get
	spop $a
	call [$a],var2
	add $1,1
	pop $1
	jmp l2117
l2120:
	push "start:"
	cmpst
	jne l2121
	spop $a
	push $4
	spushs
	push "start"
	push $5
	push $1
	call dbcon,get
	spop $a
	call [$a],var2
	add $1,1
	pop $1
	jmp l2117
l2121:
	push "end:"
	cmpst
	jne l2122
	spop $a
	push $4
	spushs
	push "end"
	push $5
	push $1
	call dbcon,get
	spop $a
	call [$a],var2
	add $1,1
	pop $1
	jmp l2117
l2122:
	spop $a
	add $1,1
	pop $1
l2117:
	jmp l2115
l2116:
	jmp l2113
l2114:
	spop $a
l2113:
	jmp l2111
l2110:
	localint $6
	push 0
	pop $6
	localint $7
	push 0
	pop $7
	push screenmode
	push "landscape"
	cmpje
	cmp0
	je l2124
	localint $8
	push 0
	pop $8
l2125:
	push $8
	call grels,size
	cmpjl
	cmp0
	je l2126
	jmp l2128
l2127:
	add $8,1
	pop $8
	jmp l2125
l2128:
	localdef $9
	push $8
	call grels,get
	pop $9
	push $9
	spushs
	push iResX
	push $9
	spushs
	spop $a
	call [$a],getw
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push $6
	spop $a
	call [$a],setpos
	push $9
	spushs
	spop $a
	call [$a],geth
	popax
	add $6,$a
	pop $6
	jmp l2127
l2126:
	push 0
	push iResY
	push $6
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	call grels,move
	jmp l2123
l2124:
	localint $8
	push 0
	pop $8
l2129:
	push $8
	call grels,size
	cmpjl
	cmp0
	je l2130
	jmp l2132
l2131:
	add $8,1
	pop $8
	jmp l2129
l2132:
	localdef $9
	push $8
	call grels,get
	pop $9
	push $9
	spushs
	push $7
	push iResY
	push $9
	spushs
	spop $a
	call [$a],geth
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	spop $a
	call [$a],setpos
	push $9
	spushs
	spop $a
	call [$a],getw
	popax
	add $7,$a
	pop $7
	jmp l2131
l2130:
	push iResX
	push $7
	pop $b
	popax
	sub $a,$b
	push 2
	pop $b
	popax
	div $a,$b
	psax
	push 0
	call grels,move
l2123:
	end method
	method setascontent
	cthis Button_isin
	push "butclick"
	push "BookContents0"
	cthis addmethod
	cthis getname
	call but1,add
	end method
	method BookContents0
	push sgmstate
	push "go"
	cmpjne
	cmp0
	je l2134
	ret
l2134:
	push bajka
	spushs
	spop $a
	call [$a],BookContents1
	end method
	method BookContents1
	push start
	push "cover"
	cmpje
	cmp0
	je l2136
	push "BookCover"
	cthis gotogame
	jmp l2135
l2136:
	push start
	pop iBookStart
	push end
	pop iBookEnd
	push prefix
	pop sBookPrefix
	push dir
	pop sBookDir
	push iBookStart
	pop iCurPage
	push "BookStory"
	cthis gotogame
l2135:
	end method
	end game

